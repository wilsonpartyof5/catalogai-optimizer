var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value;
var __esm = (fn, res) => function() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var __publicField = (obj, key, value) => (__defNormalProp(obj, typeof key != "symbol" ? key + "" : key, value), value);

// app/utils/db.ts
var import_client, db, init_db = __esm({
  "app/utils/db.ts"() {
    "use strict";
    import_client = require("@prisma/client");
    global.__db__ || (global.__db__ = new import_client.PrismaClient({
      log: ["query", "error", "warn"],
      errorFormat: "pretty"
    })), db = global.__db__, db.$connect().catch((error) => {
      console.error("Failed to connect to database:", error);
    });
  }
});

// node_modules/react/cjs/react.development.js
var require_react_development = __commonJS({
  "node_modules/react/cjs/react.development.js"(exports, module2) {
    "use strict";
    (function() {
      "use strict";
      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      var ReactVersion = "18.3.1", REACT_ELEMENT_TYPE = Symbol.for("react.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable != "object")
          return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        return typeof maybeIterator == "function" ? maybeIterator : null;
      }
      var ReactCurrentDispatcher = {
        /**
         * @internal
         * @type {ReactComponent}
         */
        current: null
      }, ReactCurrentBatchConfig = {
        transition: null
      }, ReactCurrentActQueue = {
        current: null,
        // Used to reproduce behavior of `batchedUpdates` in legacy mode.
        isBatchingLegacy: !1,
        didScheduleLegacyUpdate: !1
      }, ReactCurrentOwner = {
        /**
         * @internal
         * @type {ReactComponent}
         */
        current: null
      }, ReactDebugCurrentFrame = {}, currentExtraStackFrame = null;
      function setExtraStackFrame(stack) {
        currentExtraStackFrame = stack;
      }
      ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
        currentExtraStackFrame = stack;
      }, ReactDebugCurrentFrame.getCurrentStack = null, ReactDebugCurrentFrame.getStackAddendum = function() {
        var stack = "";
        currentExtraStackFrame && (stack += currentExtraStackFrame);
        var impl = ReactDebugCurrentFrame.getCurrentStack;
        return impl && (stack += impl() || ""), stack;
      };
      var enableScopeAPI = !1, enableCacheElement = !1, enableTransitionTracing = !1, enableLegacyHidden = !1, enableDebugTracing = !1, ReactSharedInternals = {
        ReactCurrentDispatcher,
        ReactCurrentBatchConfig,
        ReactCurrentOwner
      };
      ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame, ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
      function warn(format) {
        {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)
            args[_key - 1] = arguments[_key];
          printWarning("warn", format, args);
        }
      }
      function error(format) {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)
            args[_key2 - 1] = arguments[_key2];
          printWarning("error", format, args);
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame, stack = ReactDebugCurrentFrame2.getStackAddendum();
          stack !== "" && (format += "%s", args = args.concat([stack]));
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format), Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var didWarnStateUpdateForUnmountedComponent = {};
      function warnNoop(publicInstance, callerName) {
        {
          var _constructor = publicInstance.constructor, componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass", warningKey = componentName + "." + callerName;
          if (didWarnStateUpdateForUnmountedComponent[warningKey])
            return;
          error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName), didWarnStateUpdateForUnmountedComponent[warningKey] = !0;
        }
      }
      var ReactNoopUpdateQueue = {
        /**
         * Checks whether or not this composite component is mounted.
         * @param {ReactClass} publicInstance The instance we want to test.
         * @return {boolean} True if mounted, false otherwise.
         * @protected
         * @final
         */
        isMounted: function(publicInstance) {
          return !1;
        },
        /**
         * Forces an update. This should only be invoked when it is known with
         * certainty that we are **not** in a DOM transaction.
         *
         * You may want to call this when you know that some deeper aspect of the
         * component's state has changed but `setState` was not called.
         *
         * This will not invoke `shouldComponentUpdate`, but it will invoke
         * `componentWillUpdate` and `componentDidUpdate`.
         *
         * @param {ReactClass} publicInstance The instance that should rerender.
         * @param {?function} callback Called after component is updated.
         * @param {?string} callerName name of the calling function in the public API.
         * @internal
         */
        enqueueForceUpdate: function(publicInstance, callback, callerName) {
          warnNoop(publicInstance, "forceUpdate");
        },
        /**
         * Replaces all of the state. Always use this or `setState` to mutate state.
         * You should treat `this.state` as immutable.
         *
         * There is no guarantee that `this.state` will be immediately updated, so
         * accessing `this.state` after calling this method may return the old value.
         *
         * @param {ReactClass} publicInstance The instance that should rerender.
         * @param {object} completeState Next state.
         * @param {?function} callback Called after component is updated.
         * @param {?string} callerName name of the calling function in the public API.
         * @internal
         */
        enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
          warnNoop(publicInstance, "replaceState");
        },
        /**
         * Sets a subset of the state. This only exists because _pendingState is
         * internal. This provides a merging strategy that is not available to deep
         * properties which is confusing. TODO: Expose pendingState or don't use it
         * during the merge.
         *
         * @param {ReactClass} publicInstance The instance that should rerender.
         * @param {object} partialState Next partial state to be merged with state.
         * @param {?function} callback Called after component is updated.
         * @param {?string} Name of the calling function in the public API.
         * @internal
         */
        enqueueSetState: function(publicInstance, partialState, callback, callerName) {
          warnNoop(publicInstance, "setState");
        }
      }, assign = Object.assign, emptyObject = {};
      Object.freeze(emptyObject);
      function Component(props, context, updater) {
        this.props = props, this.context = context, this.refs = emptyObject, this.updater = updater || ReactNoopUpdateQueue;
      }
      Component.prototype.isReactComponent = {}, Component.prototype.setState = function(partialState, callback) {
        if (typeof partialState != "object" && typeof partialState != "function" && partialState != null)
          throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        this.updater.enqueueSetState(this, partialState, callback, "setState");
      }, Component.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
      };
      {
        var deprecatedAPIs = {
          isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
          replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
        }, defineDeprecationWarning = function(methodName, info) {
          Object.defineProperty(Component.prototype, methodName, {
            get: function() {
              warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
            }
          });
        };
        for (var fnName in deprecatedAPIs)
          deprecatedAPIs.hasOwnProperty(fnName) && defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
      }
      function ComponentDummy() {
      }
      ComponentDummy.prototype = Component.prototype;
      function PureComponent(props, context, updater) {
        this.props = props, this.context = context, this.refs = emptyObject, this.updater = updater || ReactNoopUpdateQueue;
      }
      var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
      pureComponentPrototype.constructor = PureComponent, assign(pureComponentPrototype, Component.prototype), pureComponentPrototype.isPureReactComponent = !0;
      function createRef() {
        var refObject = {
          current: null
        };
        return Object.seal(refObject), refObject;
      }
      var isArrayImpl = Array.isArray;
      function isArray(a) {
        return isArrayImpl(a);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol == "function" && Symbol.toStringTag, type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        try {
          return testStringCoercion(value), !1;
        } catch {
          return !0;
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value))
          return error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName)
          return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null)
          return null;
        if (typeof type.tag == "number" && error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof type == "function")
          return type.displayName || type.name || null;
        if (typeof type == "string")
          return type;
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              return outerName !== null ? outerName : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch {
                return null;
              }
            }
          }
        return null;
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty, RESERVED_PROPS = {
        key: !0,
        ref: !0,
        __self: !0,
        __source: !0
      }, specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
      didWarnAboutStringRefs = {};
      function hasValidRef(config) {
        if (hasOwnProperty.call(config, "ref")) {
          var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
          if (getter && getter.isReactWarning)
            return !1;
        }
        return config.ref !== void 0;
      }
      function hasValidKey(config) {
        if (hasOwnProperty.call(config, "key")) {
          var getter = Object.getOwnPropertyDescriptor(config, "key").get;
          if (getter && getter.isReactWarning)
            return !1;
        }
        return config.key !== void 0;
      }
      function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
          specialPropKeyWarningShown || (specialPropKeyWarningShown = !0, error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName));
        };
        warnAboutAccessingKey.isReactWarning = !0, Object.defineProperty(props, "key", {
          get: warnAboutAccessingKey,
          configurable: !0
        });
      }
      function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
          specialPropRefWarningShown || (specialPropRefWarningShown = !0, error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName));
        };
        warnAboutAccessingRef.isReactWarning = !0, Object.defineProperty(props, "ref", {
          get: warnAboutAccessingRef,
          configurable: !0
        });
      }
      function warnIfStringRefCannotBeAutoConverted(config) {
        if (typeof config.ref == "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
          var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
          didWarnAboutStringRefs[componentName] || (error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref), didWarnAboutStringRefs[componentName] = !0);
        }
      }
      var ReactElement = function(type, key, ref, self, source, owner, props) {
        var element = {
          // This tag allows us to uniquely identify this as a React Element
          $$typeof: REACT_ELEMENT_TYPE,
          // Built-in properties that belong on the element
          type,
          key,
          ref,
          props,
          // Record the component responsible for creating this element.
          _owner: owner
        };
        return element._store = {}, Object.defineProperty(element._store, "validated", {
          configurable: !1,
          enumerable: !1,
          writable: !0,
          value: !1
        }), Object.defineProperty(element, "_self", {
          configurable: !1,
          enumerable: !1,
          writable: !1,
          value: self
        }), Object.defineProperty(element, "_source", {
          configurable: !1,
          enumerable: !1,
          writable: !1,
          value: source
        }), Object.freeze && (Object.freeze(element.props), Object.freeze(element)), element;
      };
      function createElement(type, config, children) {
        var propName, props = {}, key = null, ref = null, self = null, source = null;
        if (config != null) {
          hasValidRef(config) && (ref = config.ref, warnIfStringRefCannotBeAutoConverted(config)), hasValidKey(config) && (checkKeyStringCoercion(config.key), key = "" + config.key), self = config.__self === void 0 ? null : config.__self, source = config.__source === void 0 ? null : config.__source;
          for (propName in config)
            hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName) && (props[propName] = config[propName]);
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1)
          props.children = children;
        else if (childrenLength > 1) {
          for (var childArray = Array(childrenLength), i = 0; i < childrenLength; i++)
            childArray[i] = arguments[i + 2];
          Object.freeze && Object.freeze(childArray), props.children = childArray;
        }
        if (type && type.defaultProps) {
          var defaultProps = type.defaultProps;
          for (propName in defaultProps)
            props[propName] === void 0 && (props[propName] = defaultProps[propName]);
        }
        if (key || ref) {
          var displayName = typeof type == "function" ? type.displayName || type.name || "Unknown" : type;
          key && defineKeyPropWarningGetter(props, displayName), ref && defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
      }
      function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
      }
      function cloneElement(element, config, children) {
        if (element == null)
          throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
        var propName, props = assign({}, element.props), key = element.key, ref = element.ref, self = element._self, source = element._source, owner = element._owner;
        if (config != null) {
          hasValidRef(config) && (ref = config.ref, owner = ReactCurrentOwner.current), hasValidKey(config) && (checkKeyStringCoercion(config.key), key = "" + config.key);
          var defaultProps;
          element.type && element.type.defaultProps && (defaultProps = element.type.defaultProps);
          for (propName in config)
            hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName) && (config[propName] === void 0 && defaultProps !== void 0 ? props[propName] = defaultProps[propName] : props[propName] = config[propName]);
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1)
          props.children = children;
        else if (childrenLength > 1) {
          for (var childArray = Array(childrenLength), i = 0; i < childrenLength; i++)
            childArray[i] = arguments[i + 2];
          props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self, source, owner, props);
      }
      function isValidElement(object) {
        return typeof object == "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      var SEPARATOR = ".", SUBSEPARATOR = ":";
      function escape(key) {
        var escapeRegex = /[=:]/g, escaperLookup = {
          "=": "=0",
          ":": "=2"
        }, escapedString = key.replace(escapeRegex, function(match) {
          return escaperLookup[match];
        });
        return "$" + escapedString;
      }
      var didWarnAboutMaps = !1, userProvidedKeyEscapeRegex = /\/+/g;
      function escapeUserProvidedKey(text) {
        return text.replace(userProvidedKeyEscapeRegex, "$&/");
      }
      function getElementKey(element, index) {
        return typeof element == "object" && element !== null && element.key != null ? (checkKeyStringCoercion(element.key), escape("" + element.key)) : index.toString(36);
      }
      function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        (type === "undefined" || type === "boolean") && (children = null);
        var invokeCallback = !1;
        if (children === null)
          invokeCallback = !0;
        else
          switch (type) {
            case "string":
            case "number":
              invokeCallback = !0;
              break;
            case "object":
              switch (children.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  invokeCallback = !0;
              }
          }
        if (invokeCallback) {
          var _child = children, mappedChild = callback(_child), childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
          if (isArray(mappedChild)) {
            var escapedChildKey = "";
            childKey != null && (escapedChildKey = escapeUserProvidedKey(childKey) + "/"), mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
              return c;
            });
          } else
            mappedChild != null && (isValidElement(mappedChild) && (mappedChild.key && (!_child || _child.key !== mappedChild.key) && checkKeyStringCoercion(mappedChild.key), mappedChild = cloneAndReplaceKey(
              mappedChild,
              // Keep both the (mapped) and old keys if they differ, just as
              // traverseAllChildren used to do for objects as children
              escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
              (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                // eslint-disable-next-line react-internal/safe-string-coercion
                escapeUserProvidedKey("" + mappedChild.key) + "/"
              ) : "") + childKey
            )), array.push(mappedChild));
          return 1;
        }
        var child, nextName, subtreeCount = 0, nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (isArray(children))
          for (var i = 0; i < children.length; i++)
            child = children[i], nextName = nextNamePrefix + getElementKey(child, i), subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
        else {
          var iteratorFn = getIteratorFn(children);
          if (typeof iteratorFn == "function") {
            var iterableChildren = children;
            iteratorFn === iterableChildren.entries && (didWarnAboutMaps || warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), didWarnAboutMaps = !0);
            for (var iterator = iteratorFn.call(iterableChildren), step, ii = 0; !(step = iterator.next()).done; )
              child = step.value, nextName = nextNamePrefix + getElementKey(child, ii++), subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
          } else if (type === "object") {
            var childrenString = String(children);
            throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
          }
        }
        return subtreeCount;
      }
      function mapChildren(children, func, context) {
        if (children == null)
          return children;
        var result = [], count = 0;
        return mapIntoArray(children, result, "", "", function(child) {
          return func.call(context, child, count++);
        }), result;
      }
      function countChildren(children) {
        var n = 0;
        return mapChildren(children, function() {
          n++;
        }), n;
      }
      function forEachChildren(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
          forEachFunc.apply(this, arguments);
        }, forEachContext);
      }
      function toArray(children) {
        return mapChildren(children, function(child) {
          return child;
        }) || [];
      }
      function onlyChild(children) {
        if (!isValidElement(children))
          throw new Error("React.Children.only expected to receive a single React element child.");
        return children;
      }
      function createContext(defaultValue) {
        var context = {
          $$typeof: REACT_CONTEXT_TYPE,
          // As a workaround to support multiple concurrent renderers, we categorize
          // some renderers as primary and others as secondary. We only expect
          // there to be two concurrent renderers at most: React Native (primary) and
          // Fabric (secondary); React DOM (primary) and React ART (secondary).
          // Secondary renderers store their context values on separate fields.
          _currentValue: defaultValue,
          _currentValue2: defaultValue,
          // Used to track how many concurrent renderers this context currently
          // supports within in a single renderer. Such as parallel server rendering.
          _threadCount: 0,
          // These are circular
          Provider: null,
          Consumer: null,
          // Add these to use same hidden class in VM as ServerContext
          _defaultValue: null,
          _globalName: null
        };
        context.Provider = {
          $$typeof: REACT_PROVIDER_TYPE,
          _context: context
        };
        var hasWarnedAboutUsingNestedContextConsumers = !1, hasWarnedAboutUsingConsumerProvider = !1, hasWarnedAboutDisplayNameOnConsumer = !1;
        {
          var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context
          };
          Object.defineProperties(Consumer, {
            Provider: {
              get: function() {
                return hasWarnedAboutUsingConsumerProvider || (hasWarnedAboutUsingConsumerProvider = !0, error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?")), context.Provider;
              },
              set: function(_Provider) {
                context.Provider = _Provider;
              }
            },
            _currentValue: {
              get: function() {
                return context._currentValue;
              },
              set: function(_currentValue) {
                context._currentValue = _currentValue;
              }
            },
            _currentValue2: {
              get: function() {
                return context._currentValue2;
              },
              set: function(_currentValue2) {
                context._currentValue2 = _currentValue2;
              }
            },
            _threadCount: {
              get: function() {
                return context._threadCount;
              },
              set: function(_threadCount) {
                context._threadCount = _threadCount;
              }
            },
            Consumer: {
              get: function() {
                return hasWarnedAboutUsingNestedContextConsumers || (hasWarnedAboutUsingNestedContextConsumers = !0, error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?")), context.Consumer;
              }
            },
            displayName: {
              get: function() {
                return context.displayName;
              },
              set: function(displayName) {
                hasWarnedAboutDisplayNameOnConsumer || (warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName), hasWarnedAboutDisplayNameOnConsumer = !0);
              }
            }
          }), context.Consumer = Consumer;
        }
        return context._currentRenderer = null, context._currentRenderer2 = null, context;
      }
      var Uninitialized = -1, Pending = 0, Resolved = 1, Rejected = 2;
      function lazyInitializer(payload) {
        if (payload._status === Uninitialized) {
          var ctor = payload._result, thenable = ctor();
          if (thenable.then(function(moduleObject2) {
            if (payload._status === Pending || payload._status === Uninitialized) {
              var resolved = payload;
              resolved._status = Resolved, resolved._result = moduleObject2;
            }
          }, function(error2) {
            if (payload._status === Pending || payload._status === Uninitialized) {
              var rejected = payload;
              rejected._status = Rejected, rejected._result = error2;
            }
          }), payload._status === Uninitialized) {
            var pending = payload;
            pending._status = Pending, pending._result = thenable;
          }
        }
        if (payload._status === Resolved) {
          var moduleObject = payload._result;
          return moduleObject === void 0 && error(`lazy: Expected the result of a dynamic import() call. Instead received: %s

Your code should look like: 
  const MyComponent = lazy(() => import('./MyComponent'))

Did you accidentally put curly braces around the import?`, moduleObject), "default" in moduleObject || error(`lazy: Expected the result of a dynamic import() call. Instead received: %s

Your code should look like: 
  const MyComponent = lazy(() => import('./MyComponent'))`, moduleObject), moduleObject.default;
        } else
          throw payload._result;
      }
      function lazy(ctor) {
        var payload = {
          // We use these fields to store the result.
          _status: Uninitialized,
          _result: ctor
        }, lazyType = {
          $$typeof: REACT_LAZY_TYPE,
          _payload: payload,
          _init: lazyInitializer
        };
        {
          var defaultProps, propTypes;
          Object.defineProperties(lazyType, {
            defaultProps: {
              configurable: !0,
              get: function() {
                return defaultProps;
              },
              set: function(newDefaultProps) {
                error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."), defaultProps = newDefaultProps, Object.defineProperty(lazyType, "defaultProps", {
                  enumerable: !0
                });
              }
            },
            propTypes: {
              configurable: !0,
              get: function() {
                return propTypes;
              },
              set: function(newPropTypes) {
                error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."), propTypes = newPropTypes, Object.defineProperty(lazyType, "propTypes", {
                  enumerable: !0
                });
              }
            }
          });
        }
        return lazyType;
      }
      function forwardRef(render) {
        render != null && render.$$typeof === REACT_MEMO_TYPE ? error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).") : typeof render != "function" ? error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render) : render.length !== 0 && render.length !== 2 && error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined."), render != null && (render.defaultProps != null || render.propTypes != null) && error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
        var elementType = {
          $$typeof: REACT_FORWARD_REF_TYPE,
          render
        };
        {
          var ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: !1,
            configurable: !0,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name, !render.name && !render.displayName && (render.displayName = name);
            }
          });
        }
        return elementType;
      }
      var REACT_MODULE_REFERENCE;
      REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
      function isValidElementType(type) {
        return !!(typeof type == "string" || typeof type == "function" || type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing || typeof type == "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
        // types supported by any Flight configuration anywhere since
        // we don't know which Flight build this will end up being used
        // with.
        type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0));
      }
      function memo(type, compare) {
        isValidElementType(type) || error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
        var elementType = {
          $$typeof: REACT_MEMO_TYPE,
          type,
          compare: compare === void 0 ? null : compare
        };
        {
          var ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: !1,
            configurable: !0,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name, !type.name && !type.displayName && (type.displayName = name);
            }
          });
        }
        return elementType;
      }
      function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        return dispatcher === null && error(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`), dispatcher;
      }
      function useContext(Context) {
        var dispatcher = resolveDispatcher();
        if (Context._context !== void 0) {
          var realContext = Context._context;
          realContext.Consumer === Context ? error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?") : realContext.Provider === Context && error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
        }
        return dispatcher.useContext(Context);
      }
      function useState4(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
      }
      function useReducer(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
      }
      function useRef(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
      }
      function useEffect4(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create, deps);
      }
      function useInsertionEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useInsertionEffect(create, deps);
      }
      function useLayoutEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create, deps);
      }
      function useCallback(callback, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, deps);
      }
      function useMemo(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create, deps);
      }
      function useImperativeHandle(ref, create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create, deps);
      }
      function useDebugValue(value, formatterFn) {
        {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDebugValue(value, formatterFn);
        }
      }
      function useTransition() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useTransition();
      }
      function useDeferredValue(value) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDeferredValue(value);
      }
      function useId() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useId();
      }
      function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
      }
      var disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = !0;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log, prevInfo = console.info, prevWarn = console.warn, prevError = console.error, prevGroup = console.group, prevGroupCollapsed = console.groupCollapsed, prevGroupEnd = console.groupEnd;
            var props = {
              configurable: !0,
              enumerable: !0,
              value: disabledLog,
              writable: !0
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          if (disabledDepth--, disabledDepth === 0) {
            var props = {
              configurable: !0,
              enumerable: !0,
              writable: !0
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          disabledDepth < 0 && error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, prefix;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix === void 0)
            try {
              throw Error();
            } catch (x) {
              var match = x.stack.trim().match(/\n( *(at )?)/);
              prefix = match && match[1] || "";
            }
          return `
` + prefix + name;
        }
      }
      var reentry = !1, componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap == "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry)
          return "";
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0)
            return frame;
        }
        var control;
        reentry = !0;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher$1.current, ReactCurrentDispatcher$1.current = null, disableLogs();
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            if (Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            }), typeof Reflect == "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack == "string") {
            for (var sampleLines = sample.stack.split(`
`), controlLines = control.stack.split(`
`), s = sampleLines.length - 1, c = controlLines.length - 1; s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]; )
              c--;
            for (; s >= 1 && c >= 0; s--, c--)
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1)
                  do
                    if (s--, c--, c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = `
` + sampleLines[s].replace(" at new ", " at ");
                      return fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName)), typeof fn == "function" && componentFrameCache.set(fn, _frame), _frame;
                    }
                  while (s >= 1 && c >= 0);
                break;
              }
          }
        } finally {
          reentry = !1, ReactCurrentDispatcher$1.current = previousDispatcher, reenableLogs(), Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "", syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        return typeof fn == "function" && componentFrameCache.set(fn, syntheticFrame), syntheticFrame;
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, !1);
      }
      function shouldConstruct(Component2) {
        var prototype = Component2.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null)
          return "";
        if (typeof type == "function")
          return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type == "string")
          return describeBuiltInComponentFrame(type);
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch {
              }
            }
          }
        return "";
      }
      var loggedTypeFailures = {}, ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else
          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
      }
      function checkPropTypes(typeSpecs, values, location, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs)
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] != "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  throw err.name = "Invariant Violation", err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              error$1 && !(error$1 instanceof Error) && (setCurrentlyValidatingElement(element), error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1), setCurrentlyValidatingElement(null)), error$1 instanceof Error && !(error$1.message in loggedTypeFailures) && (loggedTypeFailures[error$1.message] = !0, setCurrentlyValidatingElement(element), error("Failed %s type: %s", location, error$1.message), setCurrentlyValidatingElement(null));
            }
        }
      }
      function setCurrentlyValidatingElement$1(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          setExtraStackFrame(stack);
        } else
          setExtraStackFrame(null);
      }
      var propTypesMisspellWarningShown;
      propTypesMisspellWarningShown = !1;
      function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
          var name = getComponentNameFromType(ReactCurrentOwner.current.type);
          if (name)
            return `

Check the render method of \`` + name + "`.";
        }
        return "";
      }
      function getSourceInfoErrorAddendum(source) {
        if (source !== void 0) {
          var fileName = source.fileName.replace(/^.*[\\\/]/, ""), lineNumber = source.lineNumber;
          return `

Check your code at ` + fileName + ":" + lineNumber + ".";
        }
        return "";
      }
      function getSourceInfoErrorAddendumForProps(elementProps) {
        return elementProps != null ? getSourceInfoErrorAddendum(elementProps.__source) : "";
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
          var parentName = typeof parentType == "string" ? parentType : parentType.displayName || parentType.name;
          parentName && (info = `

Check the top-level render call using <` + parentName + ">.");
        }
        return info;
      }
      function validateExplicitKey(element, parentType) {
        if (!(!element._store || element._store.validated || element.key != null)) {
          element._store.validated = !0;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (!ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            ownerHasKeyUseWarning[currentComponentErrorInfo] = !0;
            var childOwner = "";
            element && element._owner && element._owner !== ReactCurrentOwner.current && (childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + "."), setCurrentlyValidatingElement$1(element), error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner), setCurrentlyValidatingElement$1(null);
          }
        }
      }
      function validateChildKeys(node, parentType) {
        if (typeof node == "object") {
          if (isArray(node))
            for (var i = 0; i < node.length; i++) {
              var child = node[i];
              isValidElement(child) && validateExplicitKey(child, parentType);
            }
          else if (isValidElement(node))
            node._store && (node._store.validated = !0);
          else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn == "function" && iteratorFn !== node.entries)
              for (var iterator = iteratorFn.call(node), step; !(step = iterator.next()).done; )
                isValidElement(step.value) && validateExplicitKey(step.value, parentType);
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type = element.type;
          if (type == null || typeof type == "string")
            return;
          var propTypes;
          if (typeof type == "function")
            propTypes = type.propTypes;
          else if (typeof type == "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
          // Inner props are checked in the reconciler.
          type.$$typeof === REACT_MEMO_TYPE))
            propTypes = type.propTypes;
          else
            return;
          if (propTypes) {
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, "prop", name, element);
          } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = !0;
            var _name = getComponentNameFromType(type);
            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          typeof type.getDefaultProps == "function" && !type.getDefaultProps.isReactClassApproved && error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
        }
      }
      function validateFragmentProps(fragment) {
        {
          for (var keys = Object.keys(fragment.props), i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (key !== "children" && key !== "key") {
              setCurrentlyValidatingElement$1(fragment), error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key), setCurrentlyValidatingElement$1(null);
              break;
            }
          }
          fragment.ref !== null && (setCurrentlyValidatingElement$1(fragment), error("Invalid attribute `ref` supplied to `React.Fragment`."), setCurrentlyValidatingElement$1(null));
        }
      }
      function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type);
        if (!validType) {
          var info = "";
          (type === void 0 || typeof type == "object" && type !== null && Object.keys(type).length === 0) && (info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
          var sourceInfo = getSourceInfoErrorAddendumForProps(props);
          sourceInfo ? info += sourceInfo : info += getDeclarationErrorAddendum();
          var typeString;
          type === null ? typeString = "null" : isArray(type) ? typeString = "array" : type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE ? (typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />", info = " Did you accidentally export a JSX literal instead of a component?") : typeString = typeof type, error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = createElement.apply(this, arguments);
        if (element == null)
          return element;
        if (validType)
          for (var i = 2; i < arguments.length; i++)
            validateChildKeys(arguments[i], type);
        return type === REACT_FRAGMENT_TYPE ? validateFragmentProps(element) : validatePropTypes(element), element;
      }
      var didWarnAboutDeprecatedCreateFactory = !1;
      function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        return validatedFactory.type = type, didWarnAboutDeprecatedCreateFactory || (didWarnAboutDeprecatedCreateFactory = !0, warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.")), Object.defineProperty(validatedFactory, "type", {
          enumerable: !1,
          get: function() {
            return warn("Factory.type is deprecated. Access the class directly before passing it to createFactory."), Object.defineProperty(this, "type", {
              value: type
            }), type;
          }
        }), validatedFactory;
      }
      function cloneElementWithValidation(element, props, children) {
        for (var newElement = cloneElement.apply(this, arguments), i = 2; i < arguments.length; i++)
          validateChildKeys(arguments[i], newElement.type);
        return validatePropTypes(newElement), newElement;
      }
      function startTransition(scope, options) {
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = {};
        var currentTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
        try {
          scope();
        } finally {
          if (ReactCurrentBatchConfig.transition = prevTransition, prevTransition === null && currentTransition._updatedFibers) {
            var updatedFibersCount = currentTransition._updatedFibers.size;
            updatedFibersCount > 10 && warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."), currentTransition._updatedFibers.clear();
          }
        }
      }
      var didWarnAboutMessageChannel = !1, enqueueTaskImpl = null;
      function enqueueTask(task) {
        if (enqueueTaskImpl === null)
          try {
            var requireString = ("require" + Math.random()).slice(0, 7), nodeRequire = module2 && module2[requireString];
            enqueueTaskImpl = nodeRequire.call(module2, "timers").setImmediate;
          } catch {
            enqueueTaskImpl = function(callback) {
              didWarnAboutMessageChannel === !1 && (didWarnAboutMessageChannel = !0, typeof MessageChannel > "u" && error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning."));
              var channel = new MessageChannel();
              channel.port1.onmessage = callback, channel.port2.postMessage(void 0);
            };
          }
        return enqueueTaskImpl(task);
      }
      var actScopeDepth = 0, didWarnNoAwaitAct = !1;
      function act(callback) {
        {
          var prevActScopeDepth = actScopeDepth;
          actScopeDepth++, ReactCurrentActQueue.current === null && (ReactCurrentActQueue.current = []);
          var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy, result;
          try {
            if (ReactCurrentActQueue.isBatchingLegacy = !0, result = callback(), !prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
              var queue = ReactCurrentActQueue.current;
              queue !== null && (ReactCurrentActQueue.didScheduleLegacyUpdate = !1, flushActQueue(queue));
            }
          } catch (error2) {
            throw popActScope(prevActScopeDepth), error2;
          } finally {
            ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
          }
          if (result !== null && typeof result == "object" && typeof result.then == "function") {
            var thenableResult = result, wasAwaited = !1, thenable = {
              then: function(resolve, reject) {
                wasAwaited = !0, thenableResult.then(function(returnValue2) {
                  popActScope(prevActScopeDepth), actScopeDepth === 0 ? recursivelyFlushAsyncActWork(returnValue2, resolve, reject) : resolve(returnValue2);
                }, function(error2) {
                  popActScope(prevActScopeDepth), reject(error2);
                });
              }
            };
            return !didWarnNoAwaitAct && typeof Promise < "u" && Promise.resolve().then(function() {
            }).then(function() {
              wasAwaited || (didWarnNoAwaitAct = !0, error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);"));
            }), thenable;
          } else {
            var returnValue = result;
            if (popActScope(prevActScopeDepth), actScopeDepth === 0) {
              var _queue = ReactCurrentActQueue.current;
              _queue !== null && (flushActQueue(_queue), ReactCurrentActQueue.current = null);
              var _thenable = {
                then: function(resolve, reject) {
                  ReactCurrentActQueue.current === null ? (ReactCurrentActQueue.current = [], recursivelyFlushAsyncActWork(returnValue, resolve, reject)) : resolve(returnValue);
                }
              };
              return _thenable;
            } else {
              var _thenable2 = {
                then: function(resolve, reject) {
                  resolve(returnValue);
                }
              };
              return _thenable2;
            }
          }
        }
      }
      function popActScope(prevActScopeDepth) {
        prevActScopeDepth !== actScopeDepth - 1 && error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. "), actScopeDepth = prevActScopeDepth;
      }
      function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
        {
          var queue = ReactCurrentActQueue.current;
          if (queue !== null)
            try {
              flushActQueue(queue), enqueueTask(function() {
                queue.length === 0 ? (ReactCurrentActQueue.current = null, resolve(returnValue)) : recursivelyFlushAsyncActWork(returnValue, resolve, reject);
              });
            } catch (error2) {
              reject(error2);
            }
          else
            resolve(returnValue);
        }
      }
      var isFlushing = !1;
      function flushActQueue(queue) {
        if (!isFlushing) {
          isFlushing = !0;
          var i = 0;
          try {
            for (; i < queue.length; i++) {
              var callback = queue[i];
              do
                callback = callback(!0);
              while (callback !== null);
            }
            queue.length = 0;
          } catch (error2) {
            throw queue = queue.slice(i + 1), error2;
          } finally {
            isFlushing = !1;
          }
        }
      }
      var createElement$1 = createElementWithValidation, cloneElement$1 = cloneElementWithValidation, createFactory = createFactoryWithValidation, Children = {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray,
        only: onlyChild
      };
      exports.Children = Children, exports.Component = Component, exports.Fragment = REACT_FRAGMENT_TYPE, exports.Profiler = REACT_PROFILER_TYPE, exports.PureComponent = PureComponent, exports.StrictMode = REACT_STRICT_MODE_TYPE, exports.Suspense = REACT_SUSPENSE_TYPE, exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals, exports.act = act, exports.cloneElement = cloneElement$1, exports.createContext = createContext, exports.createElement = createElement$1, exports.createFactory = createFactory, exports.createRef = createRef, exports.forwardRef = forwardRef, exports.isValidElement = isValidElement, exports.lazy = lazy, exports.memo = memo, exports.startTransition = startTransition, exports.unstable_act = act, exports.useCallback = useCallback, exports.useContext = useContext, exports.useDebugValue = useDebugValue, exports.useDeferredValue = useDeferredValue, exports.useEffect = useEffect4, exports.useId = useId, exports.useImperativeHandle = useImperativeHandle, exports.useInsertionEffect = useInsertionEffect, exports.useLayoutEffect = useLayoutEffect, exports.useMemo = useMemo, exports.useReducer = useReducer, exports.useRef = useRef, exports.useState = useState4, exports.useSyncExternalStore = useSyncExternalStore, exports.useTransition = useTransition, exports.version = ReactVersion, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
    })();
  }
});

// node_modules/react/index.js
var require_react = __commonJS({
  "node_modules/react/index.js"(exports, module2) {
    "use strict";
    module2.exports = require_react_development();
  }
});

// app/shopify.server.ts
var shopify_server_exports = {};
__export(shopify_server_exports, {
  addDocumentResponseHeaders: () => addDocumentResponseHeaders,
  apiVersion: () => apiVersion,
  authenticate: () => authenticate,
  default: () => shopify_server_default,
  registerWebhooks: () => registerWebhooks,
  sessionStorage: () => sessionStorage,
  unauthenticated: () => unauthenticated
});
var import_server2, import_shopify_app_session_storage_prisma, shopify, shopify_server_default, apiVersion, addDocumentResponseHeaders, authenticate, unauthenticated, registerWebhooks, sessionStorage, init_shopify_server = __esm({
  "app/shopify.server.ts"() {
    "use strict";
    import_server2 = require("@shopify/shopify-app-remix/server"), import_shopify_app_session_storage_prisma = require("@shopify/shopify-app-session-storage-prisma");
    init_db();
    shopify = (0, import_server2.shopifyApp)({
      apiKey: process.env.SHOPIFY_API_KEY,
      apiSecretKey: process.env.SHOPIFY_API_SECRET,
      appUrl: process.env.SHOPIFY_APP_URL,
      apiVersion: "2025-10",
      scopes: process.env.SCOPES?.split(",") || ["read_products", "read_inventory", "write_metafields", "read_orders"],
      sessionStorage: new import_shopify_app_session_storage_prisma.PrismaSessionStorage(db),
      distribution: "app",
      useOnlineTokens: !1,
      // Use offline tokens for background API calls
      hooks: {
        afterAuth: async ({ session }) => {
          let requestId = Math.random().toString(36).substring(7);
          console.log(`\u{1F50D} [${requestId}] afterAuth triggered for shop:`, session.shop), console.log(`\u{1F50D} [${requestId}] Session details:`, {
            id: session.id,
            shop: session.shop,
            scope: session.scope,
            isOnline: session.isOnline,
            expires: session.expires,
            accessTokenLength: session.accessToken?.length,
            accessTokenPrefix: session.accessToken?.substring(0, 15) + "..."
          });
          try {
            let user = await db.user.upsert({
              where: { shopId: session.shop },
              update: {
                accessToken: session.accessToken,
                updatedAt: /* @__PURE__ */ new Date()
              },
              create: {
                shopId: session.shop,
                shopDomain: session.shop,
                accessToken: session.accessToken,
                tier: "starter",
                aiUsage: 0
              }
            });
            console.log(`\u2705 [${requestId}] User created/updated:`, user.id), console.log(`\u{1F50D} [${requestId}] User details:`, {
              id: user.id,
              shopId: user.shopId,
              tier: user.tier,
              aiUsage: user.aiUsage,
              createdAt: user.createdAt,
              updatedAt: user.updatedAt
            });
          } catch (error) {
            throw console.error(`\u274C [${requestId}] afterAuth error:`, error), console.error(`\u274C [${requestId}] Error details:`, {
              message: error instanceof Error ? error.message : "Unknown error",
              stack: error instanceof Error ? error.stack : "No stack trace",
              errorType: error?.constructor?.name
            }), error;
          }
        }
      }
    }), shopify_server_default = shopify, apiVersion = "2025-10", addDocumentResponseHeaders = shopify.addDocumentResponseHeaders, authenticate = shopify.authenticate, unauthenticated = shopify.unauthenticated, registerWebhooks = shopify.registerWebhooks, sessionStorage = shopify.sessionStorage;
  }
});

// app/utils/shopifySync.ts
var shopifySync_exports = {};
__export(shopifySync_exports, {
  ShopifySyncService: () => ShopifySyncService
});
var import_graphql_request, PRODUCTS_QUERY, ShopifySyncService, init_shopifySync = __esm({
  "app/utils/shopifySync.ts"() {
    "use strict";
    import_graphql_request = require("graphql-request");
    init_db();
    PRODUCTS_QUERY = `
  query getProducts($first: Int!, $after: String) {
    products(first: $first, after: $after) {
      pageInfo {
        hasNextPage
        endCursor
      }
      edges {
        node {
          id
          title
          description
          handle
          productType
          vendor
          tags
          variants(first: 100) {
            edges {
              node {
                id
                title
                price
                compareAtPrice
                sku
                inventoryQuantity
                availableForSale
              }
            }
          }
          metafields(first: 100) {
            edges {
              node {
                id
                namespace
                key
                value
                type
              }
            }
          }
          images(first: 10) {
            edges {
              node {
                id
                url
                altText
              }
            }
          }
        }
      }
    }
  }
`, ShopifySyncService = class {
      client;
      constructor(shopDomain, accessToken) {
        console.log("\u{1F527} ShopifySyncService constructor [v2]:", {
          shopDomain,
          accessTokenLength: accessToken?.length || 0,
          accessTokenPrefix: accessToken?.substring(0, 10) + "...",
          endpoint: `https://${shopDomain}/admin/api/2025-10/graphql`
        }), this.testAccessToken(shopDomain, accessToken), this.client = new import_graphql_request.GraphQLClient(
          `https://${shopDomain}/admin/api/2025-10/graphql`,
          {
            headers: {
              "X-Shopify-Access-Token": accessToken,
              "Content-Type": "application/json"
            }
          }
        );
      }
      async testAccessToken(shopDomain, accessToken) {
        try {
          console.log("\u{1F9EA} Testing access token with REST API...");
          let response = await fetch(`https://${shopDomain}/admin/api/2025-10/shop.json`, {
            headers: {
              "X-Shopify-Access-Token": accessToken,
              "Content-Type": "application/json"
            }
          });
          if (console.log("\u{1F9EA} REST API test response:", {
            status: response.status,
            statusText: response.statusText,
            ok: response.ok
          }), response.ok) {
            let data = await response.json();
            console.log("\u2705 Access token is valid, shop name:", data.shop?.name);
          } else
            console.log("\u274C Access token test failed:", response.status, response.statusText);
        } catch (error) {
          console.log("\u274C Access token test error:", error);
        }
      }
      async syncProducts(userId) {
        let allProducts = [], hasNextPage = !0, after, pageCount = 0;
        console.log("\u{1F504} Starting product sync for user:", userId);
        try {
          for (; hasNextPage; ) {
            pageCount++, console.log(`\u{1F4C4} Fetching page ${pageCount}${after ? ` (after: ${after.substring(0, 20)}...)` : " (first page)"}`);
            let startTime = Date.now(), response = await this.client.request(PRODUCTS_QUERY, {
              first: 250,
              after
            }), fetchTime = Date.now() - startTime;
            console.log(`\u23F1\uFE0F  Page ${pageCount} fetched in ${fetchTime}ms`), console.log(`\u{1F4E6} Products in this page: ${response.products.edges.length}`);
            let products = response.products.edges.map((edge) => ({
              id: edge.node.id.replace("gid://shopify/Product/", ""),
              title: edge.node.title,
              description: edge.node.description || "",
              handle: edge.node.handle,
              productType: edge.node.productType || "",
              vendor: edge.node.vendor || "",
              tags: edge.node.tags || [],
              variants: edge.node.variants.edges.map((v) => ({
                id: v.node.id.replace("gid://shopify/ProductVariant/", ""),
                title: v.node.title,
                price: v.node.price,
                compareAtPrice: v.node.compareAtPrice,
                sku: v.node.sku,
                inventoryQuantity: v.node.inventoryQuantity,
                availableForSale: v.node.availableForSale
              })),
              metafields: edge.node.metafields.edges.map((m) => ({
                id: m.node.id.replace("gid://shopify/Metafield/", ""),
                namespace: m.node.namespace,
                key: m.node.key,
                value: m.node.value,
                type: m.node.type
              })),
              images: edge.node.images.edges.map((i) => ({
                id: i.node.id.replace("gid://shopify/MediaImage/", ""),
                url: i.node.url,
                altText: i.node.altText
              }))
            }));
            allProducts.push(...products), console.log(`\u{1F4CA} Total products so far: ${allProducts.length}`), hasNextPage = response.products.pageInfo.hasNextPage, after = response.products.pageInfo.endCursor, console.log(`\u{1F517} Has next page: ${hasNextPage}`), hasNextPage && (console.log("\u23F3 Waiting 500ms before next request..."), await new Promise((resolve) => setTimeout(resolve, 500)));
          }
          return console.log(`\u2705 Sync complete! Total products: ${allProducts.length}`), await db.log.create({
            data: {
              userId,
              type: "sync",
              message: `Synchronized ${allProducts.length} products from Shopify`,
              metadata: {
                productsCount: allProducts.length,
                timestamp: (/* @__PURE__ */ new Date()).toISOString()
              }
            }
          }), allProducts;
        } catch (error) {
          throw console.error("\u274C Sync failed:", error), console.error("\u274C Error details:", {
            message: error instanceof Error ? error.message : "Unknown error",
            stack: error instanceof Error ? error.stack : String(error),
            pageCount,
            totalProducts: allProducts.length
          }), await db.log.create({
            data: {
              userId,
              type: "error",
              message: `Failed to sync products: ${error instanceof Error ? error.message : "Unknown error"}`,
              error: error instanceof Error ? error.stack : String(error),
              metadata: {
                timestamp: (/* @__PURE__ */ new Date()).toISOString(),
                pageCount,
                totalProducts: allProducts.length
              }
            }
          }), error;
        }
      }
      async getInventoryLevels(shopDomain, accessToken) {
        try {
          let response = await fetch(
            `https://${shopDomain}/admin/api/2025-10/inventory_levels.json`,
            {
              headers: {
                "X-Shopify-Access-Token": accessToken,
                "Content-Type": "application/json"
              }
            }
          );
          if (!response.ok)
            throw new Error(`HTTP error! status: ${response.status}`);
          return (await response.json()).inventory_levels || [];
        } catch (error) {
          throw console.error("Error fetching inventory levels:", error), error;
        }
      }
      async getRecentOrders(shopDomain, accessToken, limit = 50) {
        try {
          let response = await fetch(
            `https://${shopDomain}/admin/api/2025-10/orders.json?limit=${limit}&status=any`,
            {
              headers: {
                "X-Shopify-Access-Token": accessToken,
                "Content-Type": "application/json"
              }
            }
          );
          if (!response.ok)
            throw new Error(`HTTP error! status: ${response.status}`);
          return (await response.json()).orders || [];
        } catch (error) {
          throw console.error("Error fetching orders:", error), error;
        }
      }
    };
  }
});

// app/utils/openaiSpec.ts
function getFieldInputType(fieldName) {
  return FIELD_INPUT_TYPES.customer_input_required.includes(fieldName) ? "customer_required" : FIELD_INPUT_TYPES.ai_generatable.includes(fieldName) ? "ai_generatable" : FIELD_INPUT_TYPES.core_required.includes(fieldName) ? "core_required" : "customer_required";
}
var OPENAI_PRODUCT_SCHEMA, FIELD_WEIGHTS, FIELD_POINTS, FIELD_INPUT_TYPES, FIELD_LABELS, init_openaiSpec = __esm({
  "app/utils/openaiSpec.ts"() {
    "use strict";
    OPENAI_PRODUCT_SCHEMA = {
      type: "object",
      required: [
        "title",
        "description",
        "price",
        "availability",
        "category"
      ],
      properties: {
        // Core Product Information
        title: {
          type: "string",
          maxLength: 150,
          description: "Product title - clear, descriptive, keyword-rich"
        },
        description: {
          type: "string",
          minLength: 100,
          maxLength: 4e3,
          description: "Detailed product description with features, benefits, use cases"
        },
        price: {
          type: "string",
          pattern: "^\\d+\\.\\d{2} [A-Z]{3}$",
          description: "Price in format 'XX.XX USD'"
        },
        availability: {
          type: "string",
          enum: ["in_stock", "out_of_stock", "pre_order", "discontinued"],
          description: "Current availability status"
        },
        category: {
          type: "string",
          description: "Product category for classification"
        },
        // Physical Attributes
        material: {
          type: "string",
          description: "Primary material composition"
        },
        dimensions: {
          type: "object",
          properties: {
            length: { type: "string", description: "Length with unit" },
            width: { type: "string", description: "Width with unit" },
            height: { type: "string", description: "Height with unit" }
          },
          description: "Product dimensions"
        },
        weight: {
          type: "string",
          description: "Product weight with unit"
        },
        color: {
          type: "string",
          description: "Primary color"
        },
        size: {
          type: "string",
          description: "Size information"
        },
        // Functional Attributes
        brand: {
          type: "string",
          description: "Brand or manufacturer"
        },
        model: {
          type: "string",
          description: "Model number or name"
        },
        sku: {
          type: "string",
          description: "Stock keeping unit"
        },
        upc: {
          type: "string",
          description: "Universal Product Code"
        },
        // Usage and Context
        use_cases: {
          type: "array",
          items: { type: "string" },
          description: "List of use cases and applications"
        },
        target_audience: {
          type: "string",
          description: "Primary target audience"
        },
        age_range: {
          type: "string",
          description: "Recommended age range"
        },
        gender: {
          type: "string",
          enum: ["male", "female", "unisex", "kids"],
          description: "Target gender"
        },
        // Technical Specifications
        features: {
          type: "array",
          items: { type: "string" },
          description: "Key product features"
        },
        specifications: {
          type: "object",
          description: "Technical specifications as key-value pairs"
        },
        compatibility: {
          type: "array",
          items: { type: "string" },
          description: "Compatibility information"
        },
        // SEO and Search
        keywords: {
          type: "array",
          items: { type: "string" },
          description: "SEO keywords for search optimization"
        },
        tags: {
          type: "array",
          items: { type: "string" },
          description: "Product tags for categorization"
        },
        // Media and Links
        image_urls: {
          type: "array",
          items: { type: "string" },
          description: "High-quality product image URLs"
        },
        video_urls: {
          type: "array",
          items: { type: "string" },
          description: "Product video URLs"
        },
        documentation_url: {
          type: "string",
          format: "uri",
          description: "Link to product documentation"
        },
        // Business Information
        vendor: {
          type: "string",
          description: "Vendor or supplier"
        },
        warranty: {
          type: "string",
          description: "Warranty information"
        },
        return_policy: {
          type: "string",
          description: "Return policy information"
        },
        shipping_info: {
          type: "string",
          description: "Shipping information"
        },
        // AI-Specific Fields
        ai_search_queries: {
          type: "array",
          items: { type: "string" },
          description: "Sample AI search queries this product should match"
        },
        semantic_description: {
          type: "string",
          description: "AI-optimized semantic description for better matching"
        }
      }
    }, FIELD_WEIGHTS = {
      // Required fields (must be 100% complete) - Higher impact
      required: {
        title: 2.5,
        description: 2.5,
        price: 2,
        availability: 2,
        category: 2
      },
      // High importance optional fields (critical for AI search) - Meaningful impact
      high: {
        material: 2,
        dimensions: 2,
        weight: 1.8,
        brand: 2,
        use_cases: 2.2,
        features: 2,
        image_urls: 1.8
      },
      // Medium importance fields (enhance discoverability) - Good impact
      medium: {
        color: 1.5,
        size: 1.5,
        target_audience: 1.8,
        keywords: 1.8,
        upc: 1.2,
        compatibility: 1.5,
        age_range: 1.2,
        gender: 1.2,
        video_urls: 1.5
      },
      // Low importance fields (nice to have) - Still meaningful
      low: {
        model: 1,
        sku: 1.2,
        tags: 1.2,
        vendor: 1,
        warranty: 1,
        return_policy: 1,
        shipping_info: 1,
        documentation_url: 1,
        specifications: 1.2,
        ai_search_queries: 1,
        semantic_description: 1
      }
    }, FIELD_POINTS = {
      required: {
        title: 25,
        description: 25,
        price: 20,
        availability: 20,
        category: 20
      },
      high: {
        material: 20,
        dimensions: 20,
        weight: 18,
        brand: 20,
        use_cases: 22,
        features: 20,
        image_urls: 18
      },
      medium: {
        color: 15,
        size: 15,
        target_audience: 18,
        keywords: 18,
        upc: 12,
        compatibility: 15,
        age_range: 12,
        gender: 12,
        video_urls: 15
      },
      low: {
        model: 10,
        sku: 12,
        tags: 12,
        vendor: 10,
        warranty: 10,
        return_policy: 10,
        shipping_info: 10,
        documentation_url: 10,
        specifications: 12,
        ai_search_queries: 10,
        semantic_description: 10
      }
    }, FIELD_INPUT_TYPES = {
      // Fields that REQUIRE customer/brand input - AI cannot determine these accurately
      customer_input_required: [
        // Physical specifications (only the brand/manufacturer knows these)
        "material",
        "dimensions",
        "weight",
        "color",
        "size",
        // Identification & business info (brand-specific data)
        "brand",
        "model",
        "upc",
        "vendor",
        // Age/gender restrictions (brand policy)
        "age_range",
        "gender",
        "compatibility",
        // Business policies (company-specific)
        "warranty",
        "return_policy",
        "shipping_info",
        "specifications",
        "documentation_url",
        "video_urls"
      ],
      // Fields that AI can generate based on product info
      ai_generatable: [
        // Marketing content (AI can create based on existing product data)
        "description",
        "use_cases",
        "features",
        "keywords",
        "tags",
        "target_audience",
        "sku",
        "ai_search_queries",
        "semantic_description"
      ],
      // Core required fields (must exist, usually already present)
      core_required: [
        "title",
        "price",
        "availability",
        "category",
        "image_urls"
      ]
    };
    FIELD_LABELS = {
      material: "Material",
      dimensions: "Dimensions",
      weight: "Weight",
      color: "Color",
      size: "Size",
      brand: "Brand",
      model: "Model",
      upc: "UPC/Barcode",
      vendor: "Vendor",
      age_range: "Age Range",
      gender: "Target Gender",
      compatibility: "Compatibility",
      warranty: "Warranty Info",
      return_policy: "Return Policy",
      shipping_info: "Shipping Info",
      specifications: "Technical Specs",
      documentation_url: "Documentation URL",
      video_urls: "Video URLs"
    };
  }
});

// app/utils/fieldMapper.ts
var fieldMapper_exports = {};
__export(fieldMapper_exports, {
  calculateProductScore: () => calculateProductScore,
  mapProductsToSpec: () => mapProductsToSpec,
  mapShopifyToSpec: () => mapShopifyToSpec
});
function mapShopifyToSpec(product) {
  let spec = {
    // Core required fields - map directly from Shopify
    title: product.title || "",
    description: product.description || "",
    price: product.variants[0]?.price ? `${product.variants[0].price} USD` : "0.00 USD",
    availability: getAvailabilityStatus(product.variants),
    category: product.productType || "Uncategorized",
    // Physical attributes - from metafields or inference
    material: getMetafieldValue(product.metafields, "material") || inferMaterial(product.title, product.description),
    weight: getMetafieldValue(product.metafields, "weight"),
    color: getMetafieldValue(product.metafields, "color") || inferColor(product.title, product.description),
    size: getMetafieldValue(product.metafields, "size"),
    // Identification fields
    brand: product.vendor || getMetafieldValue(product.metafields, "brand"),
    model: getMetafieldValue(product.metafields, "model"),
    sku: product.variants[0]?.sku,
    upc: getMetafieldValue(product.metafields, "upc") || getMetafieldValue(product.metafields, "barcode"),
    // Usage and context
    use_cases: getMetafieldArray(product.metafields, "use_cases") || inferUseCases(product.title, product.description),
    target_audience: getMetafieldValue(product.metafields, "target_audience"),
    age_range: getMetafieldValue(product.metafields, "age_range"),
    gender: getMetafieldValue(product.metafields, "gender"),
    // Technical specifications
    features: getMetafieldArray(product.metafields, "features") || inferFeatures(product.description),
    compatibility: getMetafieldArray(product.metafields, "compatibility"),
    // SEO and search
    keywords: product.tags || [],
    tags: product.tags || [],
    // Media
    image_urls: product.images.map((img) => img.url),
    video_urls: getMetafieldArray(product.metafields, "video_urls") || getMetafieldArray(product.metafields, "videos"),
    documentation_url: getMetafieldValue(product.metafields, "documentation_url") || getMetafieldValue(product.metafields, "manual_url"),
    // Business information
    vendor: product.vendor,
    warranty: getMetafieldValue(product.metafields, "warranty"),
    return_policy: getMetafieldValue(product.metafields, "return_policy"),
    shipping_info: getMetafieldValue(product.metafields, "shipping_info"),
    // AI-specific fields
    ai_search_queries: getMetafieldArray(product.metafields, "ai_search_queries"),
    semantic_description: getMetafieldValue(product.metafields, "semantic_description")
  }, dimensions = getDimensionsFromMetafields(product.metafields);
  dimensions && (spec.dimensions = dimensions);
  let specifications = getSpecificationsFromMetafields(product.metafields);
  return specifications && Object.keys(specifications).length > 0 && (spec.specifications = specifications), spec;
}
function getAvailabilityStatus(variants) {
  if (variants.length === 0)
    return "out_of_stock";
  let hasAvailable = variants.some((v) => v.availableForSale && (v.inventoryQuantity || 0) > 0), hasInventory = variants.some((v) => (v.inventoryQuantity || 0) > 0);
  return hasAvailable ? "in_stock" : hasInventory && !hasAvailable ? "pre_order" : "out_of_stock";
}
function getMetafieldValue(metafields, key) {
  let metafield = metafields.find(
    (m) => m.namespace === "catalogai" && (m.key === key || m.key.toLowerCase().includes(key.toLowerCase()))
  );
  return metafield || (metafield = metafields.find(
    (m) => m.key === key || m.key.toLowerCase().includes(key.toLowerCase())
  )), metafield?.value;
}
function getMetafieldArray(metafields, key) {
  let value = getMetafieldValue(metafields, key);
  if (value)
    try {
      let parsed = JSON.parse(value);
      if (Array.isArray(parsed))
        return parsed.filter((item) => typeof item == "string");
    } catch {
      return value.includes(`
-`) || value.startsWith("-") ? value.split(`
`).map((line) => line.replace(/^[-•*]\s*/, "").trim()).filter(Boolean) : value.split(/[,;|]/).map((item) => item.trim()).filter(Boolean);
    }
}
function getDimensionsFromMetafields(metafields) {
  let length = getMetafieldValue(metafields, "length"), width = getMetafieldValue(metafields, "width"), height = getMetafieldValue(metafields, "height");
  return !length && !width && !height ? null : {
    ...length && { length },
    ...width && { width },
    ...height && { height }
  };
}
function getSpecificationsFromMetafields(metafields) {
  let specs = {}, specMetafields = metafields.filter(
    (m) => m.namespace === "specifications" || m.namespace === "specs"
  );
  for (let metafield of specMetafields)
    specs[metafield.key] = metafield.value;
  return Object.keys(specs).length > 0 ? specs : null;
}
function inferMaterial(title, description) {
  let materialKeywords = [
    "cotton",
    "polyester",
    "leather",
    "metal",
    "wood",
    "plastic",
    "glass",
    "ceramic",
    "fabric",
    "denim",
    "silk",
    "wool",
    "bamboo",
    "steel",
    "aluminum",
    "bronze",
    "silver",
    "gold",
    "rubber",
    "silicone"
  ], text = `${title} ${description}`.toLowerCase();
  for (let material of materialKeywords)
    if (text.includes(material))
      return material.charAt(0).toUpperCase() + material.slice(1);
}
function inferColor(title, description) {
  let colorKeywords = [
    "red",
    "blue",
    "green",
    "yellow",
    "black",
    "white",
    "gray",
    "grey",
    "pink",
    "purple",
    "orange",
    "brown",
    "beige",
    "navy",
    "maroon"
  ], text = `${title} ${description}`.toLowerCase();
  for (let color of colorKeywords)
    if (text.includes(color))
      return color.charAt(0).toUpperCase() + color.slice(1);
}
function inferUseCases(title, description) {
  let useCaseKeywords = [
    "home",
    "office",
    "kitchen",
    "bedroom",
    "bathroom",
    "garden",
    "outdoor",
    "travel",
    "sports",
    "fitness",
    "workout",
    "cooking",
    "cleaning",
    "decorative",
    "functional",
    "storage",
    "organization"
  ], text = `${title} ${description}`.toLowerCase(), foundUseCases = [];
  for (let useCase of useCaseKeywords)
    text.includes(useCase) && foundUseCases.push(useCase.charAt(0).toUpperCase() + useCase.slice(1));
  return foundUseCases;
}
function inferFeatures(description) {
  let featureKeywords = [
    "waterproof",
    "durable",
    "lightweight",
    "compact",
    "portable",
    "adjustable",
    "reversible",
    "washable",
    "dishwasher safe",
    "battery powered",
    "cordless",
    "wireless",
    "bluetooth",
    "stainless steel",
    "non-stick",
    "heat resistant"
  ], text = description.toLowerCase(), foundFeatures = [];
  for (let feature of featureKeywords)
    text.includes(feature) && foundFeatures.push(feature.charAt(0).toUpperCase() + feature.slice(1));
  return foundFeatures;
}
function calculateProductScore(spec) {
  let gaps = [], recommendations = [], totalWeight = 0, weightedScore = 0, totalPoints = 0, maxPossiblePoints = 0, fieldProgress = {}, categoryProgress = {
    required: { completed: 0, total: 0, points: 0 },
    high: { completed: 0, total: 0, points: 0 },
    medium: { completed: 0, total: 0, points: 0 },
    low: { completed: 0, total: 0, points: 0 }
  }, hasValue = (value) => value != null && (typeof value != "string" || value.trim() !== "") && (!Array.isArray(value) || value.length > 0) && (typeof value != "object" || Object.keys(value).length > 0);
  [
    { name: "required", fields: FIELD_WEIGHTS.required, points: FIELD_POINTS.required },
    { name: "high", fields: FIELD_WEIGHTS.high, points: FIELD_POINTS.high },
    { name: "medium", fields: FIELD_WEIGHTS.medium, points: FIELD_POINTS.medium },
    { name: "low", fields: FIELD_WEIGHTS.low, points: FIELD_POINTS.low }
  ].forEach(({ name, fields, points }) => {
    categoryProgress[name].total = Object.keys(fields).length;
    for (let [field, weight] of Object.entries(fields)) {
      totalWeight += weight, maxPossiblePoints += points[field];
      let value = spec[field], completed = hasValue(value);
      fieldProgress[field] = {
        completed,
        category: name,
        points: points[field],
        weight
      }, completed ? (weightedScore += weight, totalPoints += points[field], categoryProgress[name].completed++, categoryProgress[name].points += points[field]) : (gaps.push(field), name === "high" && recommendations.push(`Add ${field} to improve product discoverability`));
    }
  });
  let score = totalWeight > 0 ? Math.round(weightedScore / totalWeight * 100) : 0, totalFields = Object.keys(fieldProgress).length, completedFields = Object.values(fieldProgress).filter((f) => f.completed).length, completeness = totalFields > 0 ? Math.round(completedFields / totalFields * 100) : 0;
  return {
    score,
    completeness,
    gaps,
    recommendations,
    points: totalPoints,
    maxPoints: maxPossiblePoints,
    fieldProgress,
    categoryProgress
  };
}
function mapProductsToSpec(products) {
  return products.map((product) => {
    let spec = mapShopifyToSpec(product), score = calculateProductScore(spec);
    return {
      ...spec,
      originalId: product.id,
      score
    };
  });
}
var init_fieldMapper = __esm({
  "app/utils/fieldMapper.ts"() {
    "use strict";
    init_openaiSpec();
  }
});

// app/utils/aiClient.ts
var import_openai, openai, AIClient, init_aiClient = __esm({
  "app/utils/aiClient.ts"() {
    "use strict";
    import_openai = __toESM(require("openai"));
    init_db();
    openai = new import_openai.default({
      apiKey: process.env.OPENAI_API_KEY
    }), AIClient = class {
      async trackUsage(userId, usage) {
        try {
          await db.user.update({
            where: { id: userId },
            data: {
              aiUsage: {
                increment: usage.totalTokens
              }
            }
          });
        } catch (error) {
          console.error("Failed to track AI usage:", error);
        }
      }
      async enrichDescription(userId, title, currentDescription, category, material) {
        let prompt = `You are an expert product copywriter specializing in e-commerce optimization for AI search systems. 

Your task is to enrich the following product description to make it more comprehensive, SEO-friendly, and optimized for AI search queries. The description should be between 400-4000 characters and written in plain text (no HTML).

Product Information:
- Title: ${title}
- Category: ${category || "Not specified"}
- Material: ${material || "Not specified"}
- Current Description: ${currentDescription}

Requirements:
1. Expand the description with specific details about features, benefits, and use cases
2. Include relevant keywords that customers might search for
3. Add information about dimensions, weight, or other specifications if relevant
4. Mention target audience and ideal use cases
5. Use descriptive, engaging language that highlights product value
6. Ensure the description flows naturally and is easy to read
7. Do not include HTML tags or special formatting
8. Focus on factual, helpful information that aids in product discovery

Return only the enriched description text.`;
        try {
          let response = await openai.chat.completions.create({
            model: "gpt-3.5-turbo",
            messages: [
              {
                role: "system",
                content: "You are a professional product copywriter who creates detailed, SEO-optimized product descriptions for e-commerce platforms."
              },
              {
                role: "user",
                content: prompt
              }
            ],
            max_tokens: 1e3,
            temperature: 0.7
          }), enriched = response.choices[0]?.message?.content || currentDescription, usage = {
            promptTokens: response.usage?.prompt_tokens || 0,
            completionTokens: response.usage?.completion_tokens || 0,
            totalTokens: response.usage?.total_tokens || 0
          };
          return await this.trackUsage(userId, usage), { enriched, usage };
        } catch (error) {
          throw console.error("OpenAI API error:", error), new Error(`Failed to enrich description: ${error instanceof Error ? error.message : "Unknown error"}`);
        }
      }
      async inferMaterial(userId, title, description, category) {
        let prompt = `Based on the following product information, determine the most likely primary material composition. Return only the material name.

Product Information:
- Title: ${title}
- Category: ${category || "Not specified"}
- Description: ${description}

Common materials include: cotton, polyester, leather, metal, wood, plastic, glass, ceramic, fabric, denim, silk, wool, bamboo, steel, aluminum, bronze, silver, gold, rubber, silicone, etc.

If the material is unclear, return "Unknown". Return only the material name, nothing else.`;
        try {
          let response = await openai.chat.completions.create({
            model: "gpt-3.5-turbo",
            messages: [
              {
                role: "system",
                content: "You are a product analyst who identifies material composition from product descriptions."
              },
              {
                role: "user",
                content: prompt
              }
            ],
            max_tokens: 50,
            temperature: 0.3
          }), material = response.choices[0]?.message?.content?.trim() || "Unknown", usage = {
            promptTokens: response.usage?.prompt_tokens || 0,
            completionTokens: response.usage?.completion_tokens || 0,
            totalTokens: response.usage?.total_tokens || 0
          };
          return await this.trackUsage(userId, usage), { material, usage };
        } catch (error) {
          throw console.error("OpenAI API error:", error), new Error(`Failed to infer material: ${error instanceof Error ? error.message : "Unknown error"}`);
        }
      }
      async generateUseCases(userId, title, description, category) {
        let prompt = `Based on the following product information, generate 3-5 specific use cases or applications for this product. Return the use cases as a JSON array of strings.

Product Information:
- Title: ${title}
- Category: ${category || "Not specified"}
- Description: ${description}

Focus on practical, specific use cases that would help customers understand how to use this product. Examples might include specific activities, environments, or situations where the product would be useful.

Return only a JSON array like: ["Use case 1", "Use case 2", "Use case 3"]`;
        try {
          let response = await openai.chat.completions.create({
            model: "gpt-3.5-turbo",
            messages: [
              {
                role: "system",
                content: "You are a product analyst who identifies practical use cases for products."
              },
              {
                role: "user",
                content: prompt
              }
            ],
            max_tokens: 200,
            temperature: 0.7
          }), content = response.choices[0]?.message?.content || "[]", useCases = [];
          try {
            useCases = JSON.parse(content), Array.isArray(useCases) || (useCases = []);
          } catch {
            useCases = [];
          }
          let usage = {
            promptTokens: response.usage?.prompt_tokens || 0,
            completionTokens: response.usage?.completion_tokens || 0,
            totalTokens: response.usage?.total_tokens || 0
          };
          return await this.trackUsage(userId, usage), { useCases, usage };
        } catch (error) {
          throw console.error("OpenAI API error:", error), new Error(`Failed to generate use cases: ${error instanceof Error ? error.message : "Unknown error"}`);
        }
      }
      async generateFeatures(userId, title, description, category) {
        let prompt = `Based on the following product information, extract and generate 3-6 key features or characteristics of this product. Return the features as a JSON array of strings.

Product Information:
- Title: ${title}
- Category: ${category || "Not specified"}
- Description: ${description}

Focus on specific, factual features that highlight the product's benefits or characteristics. These should be features that customers would care about when making a purchase decision.

Return only a JSON array like: ["Feature 1", "Feature 2", "Feature 3"]`;
        try {
          let response = await openai.chat.completions.create({
            model: "gpt-3.5-turbo",
            messages: [
              {
                role: "system",
                content: "You are a product analyst who extracts key features from product descriptions."
              },
              {
                role: "user",
                content: prompt
              }
            ],
            max_tokens: 200,
            temperature: 0.5
          }), content = response.choices[0]?.message?.content || "[]", features = [];
          try {
            features = JSON.parse(content), Array.isArray(features) || (features = []);
          } catch {
            features = [];
          }
          let usage = {
            promptTokens: response.usage?.prompt_tokens || 0,
            completionTokens: response.usage?.completion_tokens || 0,
            totalTokens: response.usage?.total_tokens || 0
          };
          return await this.trackUsage(userId, usage), { features, usage };
        } catch (error) {
          throw console.error("OpenAI API error:", error), new Error(`Failed to generate features: ${error instanceof Error ? error.message : "Unknown error"}`);
        }
      }
      async generateKeywords(userId, title, description, category) {
        let prompt = `Based on the following product information, generate 5-10 relevant SEO keywords that customers might use to search for this product. Return the keywords as a JSON array of strings.

Product Information:
- Title: ${title}
- Category: ${category || "Not specified"}
- Description: ${description}

Focus on keywords that are:
1. Relevant to the product
2. Commonly used in search queries
3. Specific enough to be meaningful
4. Broad enough to capture search volume

Include a mix of short-tail and long-tail keywords.

Return only a JSON array like: ["keyword 1", "keyword 2", "keyword 3"]`;
        try {
          let response = await openai.chat.completions.create({
            model: "gpt-3.5-turbo",
            messages: [
              {
                role: "system",
                content: "You are an SEO specialist who generates relevant keywords for product optimization."
              },
              {
                role: "user",
                content: prompt
              }
            ],
            max_tokens: 200,
            temperature: 0.6
          }), content = response.choices[0]?.message?.content || "[]", keywords = [];
          try {
            keywords = JSON.parse(content), Array.isArray(keywords) || (keywords = []);
          } catch {
            keywords = [];
          }
          let usage = {
            promptTokens: response.usage?.prompt_tokens || 0,
            completionTokens: response.usage?.completion_tokens || 0,
            totalTokens: response.usage?.total_tokens || 0
          };
          return await this.trackUsage(userId, usage), { keywords, usage };
        } catch (error) {
          throw console.error("OpenAI API error:", error), new Error(`Failed to generate keywords: ${error instanceof Error ? error.message : "Unknown error"}`);
        }
      }
      async generateText(prompt, maxTokens = 100) {
        try {
          return ((await openai.chat.completions.create({
            model: "gpt-3.5-turbo",
            messages: [
              {
                role: "user",
                content: prompt
              }
            ],
            max_tokens: maxTokens,
            temperature: 0.7
          })).choices[0]?.message?.content || "").trim();
        } catch (error) {
          throw console.error("OpenAI API error:", error), new Error(`Failed to generate text: ${error instanceof Error ? error.message : "Unknown error"}`);
        }
      }
    };
  }
});

// app/utils/aiEnrich.ts
var aiEnrich_exports = {};
__export(aiEnrich_exports, {
  AIEnrichmentService: () => AIEnrichmentService
});
var AIEnrichmentService, init_aiEnrich = __esm({
  "app/utils/aiEnrich.ts"() {
    "use strict";
    init_aiClient();
    init_db();
    AIEnrichmentService = class {
      aiClient;
      constructor() {
        this.aiClient = new AIClient();
      }
      async enrichProduct(userId, product, gaps = []) {
        let improvements = [], errors = [], totalUsage = 0, baseSpec = {
          title: product.title || "",
          description: product.description || "",
          price: product.variants[0]?.price ? `${product.variants[0].price} USD` : "0.00 USD",
          availability: this.getAvailabilityStatus(product.variants),
          category: product.productType || "Uncategorized",
          sku: product.variants[0]?.sku,
          image_urls: product.images.map((img) => img.url),
          vendor: product.vendor
        };
        console.log("\u{1F3AF} Enriching product for gaps:", gaps);
        for (let gap of gaps)
          try {
            let result = await this.generateRecommendationForGap(gap, baseSpec, userId);
            result && (improvements.push(result), totalUsage += result.newValue?.length || 0);
          } catch (error) {
            errors.push(`Failed to generate recommendation for ${gap}: ${error instanceof Error ? error.message : "Unknown error"}`);
          }
        return {
          originalProduct: product,
          enrichedSpec: baseSpec,
          improvements,
          totalUsage,
          errors
        };
      }
      async generateRecommendationForGap(gap, baseSpec, userId) {
        if ([
          "material",
          "dimensions",
          "weight",
          "color",
          "size",
          "model",
          "brand",
          "vendor",
          "upc",
          "age_range",
          "gender",
          "compatibility",
          "specifications",
          "video_urls",
          "documentation_url",
          "return_policy",
          "shipping_info"
        ].includes(gap))
          return {
            field: gap,
            originalValue: baseSpec[gap] || null,
            newValue: "Need Customer Input",
            improvement: "This field requires actual product specifications from the brand/manufacturer"
          };
        let mapping = {
          description: {
            prompt: `Given the product title "${baseSpec.title}", generate a comprehensive and engaging product description. Highlight its key features, benefits, and target audience. Aim for a length of at least 200 words. Current description: "${baseSpec.description || "No description"}"`,
            maxTokens: 500,
            reason: "Generated comprehensive product description"
          },
          use_cases: {
            prompt: `Given the product title "${baseSpec.title}" and description "${baseSpec.description}", generate a comma-separated list of 3-5 practical use cases or scenarios where this product would be ideal. Focus on how a customer would use it.`,
            maxTokens: 100,
            reason: "Generated practical use cases"
          },
          features: {
            prompt: `Given the product title "${baseSpec.title}" and description "${baseSpec.description}", generate a bulleted list of 3-5 key features of the product. Focus on unique selling points and technical specifications.`,
            maxTokens: 150,
            reason: "Generated key product features"
          },
          keywords: {
            prompt: `Given the product title "${baseSpec.title}" and description "${baseSpec.description}", generate a comma-separated list of relevant keywords for SEO and search. Focus on terms a customer would use to find this product. Do not include the product title itself as a keyword.`,
            maxTokens: 100,
            reason: "Generated SEO keywords"
          },
          target_audience: {
            prompt: `Given the product title "${baseSpec.title}" and description "${baseSpec.description}", suggest the primary target audience for this product (e.g., 'Beginner snowboarders', 'Professional athletes', 'Casual users').`,
            maxTokens: 50,
            reason: "Suggested target audience"
          },
          sku: {
            prompt: `Given the product title "${baseSpec.title}", description "${baseSpec.description}", and current SKU "${baseSpec.sku || "N/A"}", suggest a concise SKU for the product if it's missing or generic. If a good SKU exists, state 'N/A'.`,
            maxTokens: 20,
            reason: "Suggested concise SKU"
          },
          tags: {
            prompt: `Given the product title "${baseSpec.title}" and description "${baseSpec.description}", generate a comma-separated list of relevant tags for product categorization and search. Focus on broad categories and attributes.`,
            maxTokens: 100,
            reason: "Generated relevant tags"
          },
          warranty: {
            prompt: `Given the product title "${baseSpec.title}" and description "${baseSpec.description}", suggest typical warranty information for this type of product (e.g., '1-year limited warranty', 'Manufacturer warranty applies').`,
            maxTokens: 50,
            reason: "Suggested warranty information"
          },
          ai_search_queries: {
            prompt: `Given the product title "${baseSpec.title}" and description "${baseSpec.description}", generate 5-7 example search queries that customers might use to find this product when using AI search or voice search. Focus on natural language queries.`,
            maxTokens: 150,
            reason: "Generated AI search query examples"
          },
          semantic_description: {
            prompt: `Given the product title "${baseSpec.title}" and description "${baseSpec.description}", create a concise semantic description optimized for AI understanding. Focus on key attributes, use cases, and context in 2-3 sentences.`,
            maxTokens: 150,
            reason: "Generated AI-optimized semantic description"
          },
          image_urls: {
            prompt: "Note: Image URLs cannot be generated by AI. This field requires actual product images to be uploaded to Shopify.",
            maxTokens: 10,
            reason: "Images require manual upload"
          }
        }[gap];
        if (!mapping)
          return console.log(`\u26A0\uFE0F No mapping found for gap: ${gap}`), null;
        try {
          let aiResponse = await this.aiClient.generateText(mapping.prompt, mapping.maxTokens);
          if (console.log(`\u{1F916} AI Response for ${gap}:`, aiResponse), aiResponse && aiResponse.trim() !== "" && !aiResponse.toLowerCase().includes("error") && aiResponse.trim().toLowerCase() !== "n/a")
            return {
              field: gap,
              originalValue: baseSpec[gap] || null,
              newValue: aiResponse,
              improvement: mapping.reason
            };
          console.log(`\u26A0\uFE0F Skipping ${gap}: Response was empty, N/A, or contained error`);
        } catch (error) {
          console.error(`Error generating recommendation for ${gap}:`, error);
        }
        return null;
      }
      async enrichProducts(userId, products, options = {}) {
        let results = [];
        for (let product of products)
          try {
            let { mapShopifyToSpec: mapShopifyToSpec2, calculateProductScore: calculateProductScore2 } = await Promise.resolve().then(() => (init_fieldMapper(), fieldMapper_exports)), spec = mapShopifyToSpec2(product), gaps = calculateProductScore2(spec).gaps;
            console.log(`\u{1F3AF} Enriching product ${product.title} with gaps:`, gaps);
            let result = await this.enrichProduct(userId, product, gaps);
            results.push(result);
          } catch (error) {
            console.error(`Failed to enrich product ${product.title}:`, error), results.push({
              originalProduct: product,
              enrichedSpec: {},
              improvements: [],
              totalUsage: 0,
              errors: [`Failed to enrich product: ${error instanceof Error ? error.message : "Unknown error"}`]
            });
          }
        return results;
      }
      async applyEnrichmentToShopify(userId, shopDomain, accessToken, enrichmentResult) {
        try {
          console.log("\u{1F504} Applying enrichment to Shopify with improvements:", enrichmentResult.improvements.length);
          for (let improvement of enrichmentResult.improvements) {
            let { field, newValue } = improvement;
            if (console.log(`\u{1F4DD} Applying ${field}: ${newValue}`), field === "description")
              await this.updateProductDescription(
                shopDomain,
                accessToken,
                enrichmentResult.originalProduct.id,
                newValue
              ), console.log("\u2705 Updated product description");
            else {
              let metafieldType = this.getMetafieldType(field, newValue), metafieldValue = this.formatMetafieldValue(field, newValue);
              console.log("\u{1F4DD} Creating metafield:", {
                namespace: "catalogai",
                key: field,
                type: metafieldType,
                originalValue: newValue,
                formattedValue: metafieldValue,
                valueType: typeof newValue
              }), await this.createProductMetafield(
                shopDomain,
                accessToken,
                enrichmentResult.originalProduct.id,
                {
                  namespace: "catalogai",
                  key: field,
                  value: metafieldValue,
                  type: metafieldType
                }
              ), console.log(`\u2705 Updated metafield: catalogai.${field}`);
            }
          }
          return await db.log.create({
            data: {
              userId,
              type: "enrichment",
              message: `Applied AI enrichment to product: ${enrichmentResult.originalProduct.title}`,
              metadata: {
                productId: enrichmentResult.originalProduct.id,
                improvements: enrichmentResult.improvements.length,
                usage: enrichmentResult.totalUsage,
                timestamp: (/* @__PURE__ */ new Date()).toISOString()
              }
            }
          }), !0;
        } catch (error) {
          return console.error("Failed to apply enrichment to Shopify:", error), await db.log.create({
            data: {
              userId,
              type: "error",
              message: `Failed to apply enrichment to Shopify: ${error instanceof Error ? error.message : "Unknown error"}`,
              error: error instanceof Error ? error.stack : String(error),
              metadata: {
                productId: enrichmentResult.originalProduct.id,
                timestamp: (/* @__PURE__ */ new Date()).toISOString()
              }
            }
          }), !1;
        }
      }
      getMetafieldType(field, value) {
        return field === "dimensions" || ["use_cases", "features", "keywords", "ai_search_queries"].includes(field) ? "json" : ["weight", "price"].includes(field) ? "number_decimal" : (field === "availability", "single_line_text_field");
      }
      formatMetafieldValue(field, value) {
        if (typeof value == "object" || Array.isArray(value))
          return JSON.stringify(value);
        if (["use_cases", "features", "keywords", "ai_search_queries", "tags"].includes(field)) {
          let stringValue = String(value);
          if (stringValue.includes(`
-`) || stringValue.startsWith("-")) {
            let items = stringValue.split(`
`).map((line) => line.replace(/^[-•*]\s*/, "").trim()).filter(Boolean);
            return JSON.stringify(items);
          }
          if (stringValue.includes(",")) {
            let items = stringValue.split(",").map((item) => item.trim()).filter(Boolean);
            return JSON.stringify(items);
          }
          return JSON.stringify([stringValue]);
        }
        return String(value);
      }
      getAvailabilityStatus(variants) {
        if (variants.length === 0)
          return "out_of_stock";
        let hasAvailable = variants.some((v) => v.availableForSale && (v.inventoryQuantity || 0) > 0), hasInventory = variants.some((v) => (v.inventoryQuantity || 0) > 0);
        return hasAvailable ? "in_stock" : hasInventory && !hasAvailable ? "pre_order" : "out_of_stock";
      }
      getMetafieldValue(metafields, key) {
        return metafields.find(
          (m) => m.key === key || m.key.toLowerCase().includes(key.toLowerCase())
        )?.value;
      }
      getMetafieldArray(metafields, key) {
        let value = this.getMetafieldValue(metafields, key);
        if (value)
          try {
            let parsed = JSON.parse(value);
            if (Array.isArray(parsed))
              return parsed.filter((item) => typeof item == "string");
          } catch {
            return value.split(/[,;|]/).map((item) => item.trim()).filter(Boolean);
          }
      }
      async updateProductDescription(shopDomain, accessToken, productId, description) {
        let mutation = `
      mutation productUpdate($input: ProductInput!) {
        productUpdate(input: $input) {
          product {
            id
            title
            descriptionHtml
          }
          userErrors {
            field
            message
          }
        }
      }
    `, variables = {
          input: {
            id: `gid://shopify/Product/${productId}`,
            descriptionHtml: description
          }
        }, response = await fetch(`https://${shopDomain}/admin/api/2025-10/graphql`, {
          method: "POST",
          headers: {
            "X-Shopify-Access-Token": accessToken,
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            query: mutation,
            variables
          })
        });
        if (!response.ok)
          throw new Error(`Failed to update product description: ${response.status}`);
        let result = await response.json();
        if (result.errors)
          throw new Error(`GraphQL errors: ${JSON.stringify(result.errors)}`);
        if (result.data?.productUpdate?.userErrors?.length > 0)
          throw new Error(`Shopify validation errors: ${JSON.stringify(result.data.productUpdate.userErrors)}`);
      }
      async createProductMetafield(shopDomain, accessToken, productId, metafield) {
        let mutation = `
      mutation metafieldsSet($metafields: [MetafieldsSetInput!]!) {
        metafieldsSet(metafields: $metafields) {
          metafields {
            id
            namespace
            key
            value
          }
          userErrors {
            field
            message
          }
        }
      }
    `, variables = {
          metafields: [
            {
              ownerId: `gid://shopify/Product/${productId}`,
              namespace: metafield.namespace,
              key: metafield.key,
              value: metafield.value,
              type: metafield.type
            }
          ]
        }, response = await fetch(`https://${shopDomain}/admin/api/2025-10/graphql`, {
          method: "POST",
          headers: {
            "X-Shopify-Access-Token": accessToken,
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            query: mutation,
            variables
          })
        });
        if (!response.ok)
          throw new Error(`Failed to create metafield: ${response.status}`);
        let result = await response.json();
        if (result.errors)
          throw new Error(`GraphQL errors: ${JSON.stringify(result.errors)}`);
      }
    };
  }
});

// node_modules/@shopify/polaris/build/cjs/configure.js
var require_configure = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/configure.js"(exports) {
    "use strict";
    var DEFAULT_LOCALE = "en", SUPPORTED_LOCALES = ["cs", "da", "de", "en", "es", "fi", "fr", "it", "ja", "ko", "nb", "nl", "pl", "pt-BR", "pt-PT", "sv", "th", "tr", "vi", "zh-CN", "zh-TW"];
    exports.DEFAULT_LOCALE = DEFAULT_LOCALE;
    exports.SUPPORTED_LOCALES = SUPPORTED_LOCALES;
  }
});

// node_modules/@shopify/polaris/build/cjs/types.js
var require_types = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/types.js"(exports) {
    "use strict";
    exports.Key = void 0;
    (function(Key) {
      Key[Key.Backspace = 8] = "Backspace", Key[Key.Tab = 9] = "Tab", Key[Key.Enter = 13] = "Enter", Key[Key.Shift = 16] = "Shift", Key[Key.Ctrl = 17] = "Ctrl", Key[Key.Alt = 18] = "Alt", Key[Key.Pause = 19] = "Pause", Key[Key.CapsLock = 20] = "CapsLock", Key[Key.Escape = 27] = "Escape", Key[Key.Space = 32] = "Space", Key[Key.PageUp = 33] = "PageUp", Key[Key.PageDown = 34] = "PageDown", Key[Key.End = 35] = "End", Key[Key.Home = 36] = "Home", Key[Key.LeftArrow = 37] = "LeftArrow", Key[Key.UpArrow = 38] = "UpArrow", Key[Key.RightArrow = 39] = "RightArrow", Key[Key.DownArrow = 40] = "DownArrow", Key[Key.Insert = 45] = "Insert", Key[Key.Delete = 46] = "Delete", Key[Key.Key0 = 48] = "Key0", Key[Key.Key1 = 49] = "Key1", Key[Key.Key2 = 50] = "Key2", Key[Key.Key3 = 51] = "Key3", Key[Key.Key4 = 52] = "Key4", Key[Key.Key5 = 53] = "Key5", Key[Key.Key6 = 54] = "Key6", Key[Key.Key7 = 55] = "Key7", Key[Key.Key8 = 56] = "Key8", Key[Key.Key9 = 57] = "Key9", Key[Key.KeyA = 65] = "KeyA", Key[Key.KeyB = 66] = "KeyB", Key[Key.KeyC = 67] = "KeyC", Key[Key.KeyD = 68] = "KeyD", Key[Key.KeyE = 69] = "KeyE", Key[Key.KeyF = 70] = "KeyF", Key[Key.KeyG = 71] = "KeyG", Key[Key.KeyH = 72] = "KeyH", Key[Key.KeyI = 73] = "KeyI", Key[Key.KeyJ = 74] = "KeyJ", Key[Key.KeyK = 75] = "KeyK", Key[Key.KeyL = 76] = "KeyL", Key[Key.KeyM = 77] = "KeyM", Key[Key.KeyN = 78] = "KeyN", Key[Key.KeyO = 79] = "KeyO", Key[Key.KeyP = 80] = "KeyP", Key[Key.KeyQ = 81] = "KeyQ", Key[Key.KeyR = 82] = "KeyR", Key[Key.KeyS = 83] = "KeyS", Key[Key.KeyT = 84] = "KeyT", Key[Key.KeyU = 85] = "KeyU", Key[Key.KeyV = 86] = "KeyV", Key[Key.KeyW = 87] = "KeyW", Key[Key.KeyX = 88] = "KeyX", Key[Key.KeyY = 89] = "KeyY", Key[Key.KeyZ = 90] = "KeyZ", Key[Key.LeftMeta = 91] = "LeftMeta", Key[Key.RightMeta = 92] = "RightMeta", Key[Key.Select = 93] = "Select", Key[Key.Numpad0 = 96] = "Numpad0", Key[Key.Numpad1 = 97] = "Numpad1", Key[Key.Numpad2 = 98] = "Numpad2", Key[Key.Numpad3 = 99] = "Numpad3", Key[Key.Numpad4 = 100] = "Numpad4", Key[Key.Numpad5 = 101] = "Numpad5", Key[Key.Numpad6 = 102] = "Numpad6", Key[Key.Numpad7 = 103] = "Numpad7", Key[Key.Numpad8 = 104] = "Numpad8", Key[Key.Numpad9 = 105] = "Numpad9", Key[Key.Multiply = 106] = "Multiply", Key[Key.Add = 107] = "Add", Key[Key.Subtract = 109] = "Subtract", Key[Key.Decimal = 110] = "Decimal", Key[Key.Divide = 111] = "Divide", Key[Key.F1 = 112] = "F1", Key[Key.F2 = 113] = "F2", Key[Key.F3 = 114] = "F3", Key[Key.F4 = 115] = "F4", Key[Key.F5 = 116] = "F5", Key[Key.F6 = 117] = "F6", Key[Key.F7 = 118] = "F7", Key[Key.F8 = 119] = "F8", Key[Key.F9 = 120] = "F9", Key[Key.F10 = 121] = "F10", Key[Key.F11 = 122] = "F11", Key[Key.F12 = 123] = "F12", Key[Key.NumLock = 144] = "NumLock", Key[Key.ScrollLock = 145] = "ScrollLock", Key[Key.Semicolon = 186] = "Semicolon", Key[Key.Equals = 187] = "Equals", Key[Key.Comma = 188] = "Comma", Key[Key.Dash = 189] = "Dash", Key[Key.Period = 190] = "Period", Key[Key.ForwardSlash = 191] = "ForwardSlash", Key[Key.GraveAccent = 192] = "GraveAccent", Key[Key.OpenBracket = 219] = "OpenBracket", Key[Key.BackSlash = 220] = "BackSlash", Key[Key.CloseBracket = 221] = "CloseBracket", Key[Key.SingleQuote = 222] = "SingleQuote";
    })(exports.Key || (exports.Key = {}));
  }
});

// node_modules/@shopify/polaris/build/cjs/components/shared.js
var require_shared = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/shared.js"(exports) {
    "use strict";
    var scrollable = {
      props: {
        "data-polaris-scrollable": !0
      },
      selector: "[data-polaris-scrollable]"
    }, overlay = {
      props: {
        "data-polaris-overlay": !0
      },
      selector: "[data-polaris-overlay]"
    }, layer = {
      props: {
        "data-polaris-layer": !0
      },
      selector: "[data-polaris-layer]"
    }, unstyled = {
      props: {
        "data-polaris-unstyled": !0
      },
      selector: "[data-polaris-unstyled]"
    }, dataPolarisTopBar = {
      props: {
        "data-polaris-top-bar": !0
      },
      selector: "[data-polaris-top-bar]"
    }, headerCell = {
      props: {
        "data-polaris-header-cell": !0
      },
      selector: "[data-polaris-header-cell]"
    }, portal = {
      props: ["data-portal-id"],
      selector: "[data-portal-id]"
    }, DATA_ATTRIBUTE = {
      overlay,
      layer
    };
    exports.DATA_ATTRIBUTE = DATA_ATTRIBUTE;
    exports.dataPolarisTopBar = dataPolarisTopBar;
    exports.headerCell = headerCell;
    exports.layer = layer;
    exports.overlay = overlay;
    exports.portal = portal;
    exports.scrollable = scrollable;
    exports.unstyled = unstyled;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-theme.js
var require_use_theme = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-theme.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisTokens = require("@shopify/polaris-tokens"), ThemeContext = /* @__PURE__ */ React2.createContext(null), ThemeNameContext = /* @__PURE__ */ React2.createContext(null);
    function getTheme(themeName) {
      return polarisTokens.themes[themeName];
    }
    function useTheme() {
      let theme = React2.useContext(ThemeContext);
      if (!theme)
        throw new Error("No theme was provided. Your application must be wrapped in an <AppProvider> or <ThemeProvider> component. See https://polaris.shopify.com/components/app-provider for implementation instructions.");
      return theme;
    }
    function useThemeName() {
      let themeName = React2.useContext(ThemeNameContext);
      if (!themeName)
        throw new Error("No themeName was provided. Your application must be wrapped in an <AppProvider> or <ThemeProvider> component. See https://polaris.shopify.com/components/app-provider for implementation instructions.");
      return themeName;
    }
    function UseTheme(props) {
      let theme = useTheme();
      return props.children(theme);
    }
    exports.ThemeContext = ThemeContext;
    exports.ThemeNameContext = ThemeNameContext;
    exports.UseTheme = UseTheme;
    exports.getTheme = getTheme;
    exports.useTheme = useTheme;
    exports.useThemeName = useThemeName;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/is-object.js
var require_is_object = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/is-object.js"(exports) {
    "use strict";
    function isObject(value) {
      let type = typeof value;
      return value != null && (type === "object" || type === "function");
    }
    exports.isObject = isObject;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/css.js
var require_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/css.js"(exports) {
    "use strict";
    var polarisTokens = require("@shopify/polaris-tokens"), isObject = require_is_object();
    function classNames(...classes) {
      return classes.filter(Boolean).join(" ");
    }
    function variationName(name, value) {
      return `${name}${value.charAt(0).toUpperCase()}${value.slice(1)}`;
    }
    function sanitizeCustomProperties(styles) {
      let nonNullValues = Object.entries(styles).filter(([_, value]) => value != null);
      return nonNullValues.length ? Object.fromEntries(nonNullValues) : void 0;
    }
    function getResponsiveProps(componentName, componentProp, tokenSubgroup, responsiveProp) {
      if (!responsiveProp)
        return {};
      let result;
      return isObject.isObject(responsiveProp) ? result = Object.fromEntries(Object.entries(responsiveProp).map(([breakpointAlias, aliasOrScale]) => [breakpointAlias, `var(--p-${tokenSubgroup}-${aliasOrScale})`])) : result = {
        [polarisTokens.breakpointsAliases[0]]: `var(--p-${tokenSubgroup}-${responsiveProp})`
      }, Object.fromEntries(Object.entries(result).map(([breakpointAlias, value]) => [`--pc-${componentName}-${componentProp}-${breakpointAlias}`, value]));
    }
    function getResponsiveValue(componentName, componentProp, responsiveProp) {
      return responsiveProp ? isObject.isObject(responsiveProp) ? Object.fromEntries(Object.entries(responsiveProp).map(([breakpointAlias, responsiveValue]) => [`--pc-${componentName}-${componentProp}-${breakpointAlias}`, responsiveValue])) : {
        [`--pc-${componentName}-${componentProp}-${polarisTokens.breakpointsAliases[0]}`]: responsiveProp
      } : {};
    }
    exports.classNames = classNames;
    exports.getResponsiveProps = getResponsiveProps;
    exports.getResponsiveValue = getResponsiveValue;
    exports.sanitizeCustomProperties = sanitizeCustomProperties;
    exports.variationName = variationName;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ThemeProvider/ThemeProvider.css.js
var require_ThemeProvider_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ThemeProvider/ThemeProvider.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      themeContainer: "Polaris-ThemeProvider--themeContainer"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ThemeProvider/ThemeProvider.js
var require_ThemeProvider = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ThemeProvider/ThemeProvider.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisTokens = require("@shopify/polaris-tokens"), useTheme = require_use_theme(), css = require_css(), ThemeProvider_module = require_ThemeProvider_css(), themeNamesLocal = ["light", "dark-experimental"], isThemeNameLocal = (name) => themeNamesLocal.includes(name);
    function ThemeProvider(props) {
      let {
        as: ThemeContainer = "div",
        children,
        className,
        theme: themeName = polarisTokens.themeNameDefault
      } = props;
      return /* @__PURE__ */ React2.createElement(useTheme.ThemeNameContext.Provider, {
        value: themeName
      }, /* @__PURE__ */ React2.createElement(useTheme.ThemeContext.Provider, {
        value: useTheme.getTheme(themeName)
      }, /* @__PURE__ */ React2.createElement(ThemeContainer, {
        "data-portal-id": props["data-portal-id"],
        className: css.classNames(polarisTokens.createThemeClassName(themeName), ThemeProvider_module.default.themeContainer, className)
      }, children)));
    }
    exports.ThemeProvider = ThemeProvider;
    exports.isThemeNameLocal = isThemeNameLocal;
    exports.themeNamesLocal = themeNamesLocal;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/clamp.js
var require_clamp = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/clamp.js"(exports) {
    "use strict";
    function clamp(number, min, max) {
      return number < min ? min : number > max ? max : number;
    }
    exports.clamp = clamp;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/roundNumberToDecimalPlaces.js
var require_roundNumberToDecimalPlaces = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/roundNumberToDecimalPlaces.js"(exports) {
    "use strict";
    function roundNumberToDecimalPlaces(value, decimals) {
      let exponent = Number(`${value}e${decimals}`), roundedExponent = Math.round(exponent);
      return Number(`${roundedExponent}e-${decimals}`);
    }
    exports.roundNumberToDecimalPlaces = roundNumberToDecimalPlaces;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/color-transformers.js
var require_color_transformers = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/color-transformers.js"(exports) {
    "use strict";
    var clamp = require_clamp(), roundNumberToDecimalPlaces = require_roundNumberToDecimalPlaces();
    function rgbString(color) {
      let {
        red,
        green,
        blue
      } = color;
      return "alpha" in color ? `rgba(${red}, ${green}, ${blue}, ${color.alpha})` : `rgb(${red}, ${green}, ${blue})`;
    }
    var rgbaString = rgbString;
    function rgbToHex({
      red,
      green,
      blue
    }) {
      return `#${componentToHex(red)}${componentToHex(green)}${componentToHex(blue)}`;
    }
    function componentToHex(component) {
      let hex = component.toString(16);
      return hex.length === 1 ? `0${hex}` : hex;
    }
    function hsbToHex(color) {
      return rgbToHex(hsbToRgb(color));
    }
    function rgbFromHueAndChroma(hue, chroma) {
      let huePrime = hue / 60, hueDelta = 1 - Math.abs(huePrime % 2 - 1), intermediateValue = chroma * hueDelta, red = 0, green = 0, blue = 0;
      return huePrime >= 0 && huePrime <= 1 && (red = chroma, green = intermediateValue, blue = 0), huePrime >= 1 && huePrime <= 2 && (red = intermediateValue, green = chroma, blue = 0), huePrime >= 2 && huePrime <= 3 && (red = 0, green = chroma, blue = intermediateValue), huePrime >= 3 && huePrime <= 4 && (red = 0, green = intermediateValue, blue = chroma), huePrime >= 4 && huePrime <= 5 && (red = intermediateValue, green = 0, blue = chroma), huePrime >= 5 && huePrime <= 6 && (red = chroma, green = 0, blue = intermediateValue), {
        red,
        green,
        blue
      };
    }
    function hsbToRgb(color) {
      let {
        hue,
        saturation,
        brightness,
        alpha = 1
      } = color, chroma = brightness * saturation, {
        red,
        green,
        blue
      } = rgbFromHueAndChroma(hue, chroma), chromaBrightnessDelta = brightness - chroma;
      return red += chromaBrightnessDelta, green += chromaBrightnessDelta, blue += chromaBrightnessDelta, {
        red: Math.round(red * 255),
        green: Math.round(green * 255),
        blue: Math.round(blue * 255),
        alpha
      };
    }
    function hslToRgb(color) {
      let {
        hue,
        saturation,
        lightness,
        alpha = 1
      } = color, chroma = (1 - Math.abs(2 * (lightness / 100) - 1)) * (saturation / 100), {
        red,
        green,
        blue
      } = rgbFromHueAndChroma(hue, chroma), lightnessVal = lightness / 100 - chroma / 2;
      return red += lightnessVal, green += lightnessVal, blue += lightnessVal, {
        red: Math.round(red * 255),
        green: Math.round(green * 255),
        blue: Math.round(blue * 255),
        alpha
      };
    }
    function rgbToHsbl(color, type = "b") {
      let {
        alpha = 1
      } = color, red = color.red / 255, green = color.green / 255, blue = color.blue / 255, largestComponent = Math.max(red, green, blue), smallestComponent = Math.min(red, green, blue), delta = largestComponent - smallestComponent, lightness = (largestComponent + smallestComponent) / 2, saturation = 0;
      if (largestComponent === 0)
        saturation = 0;
      else if (type === "b")
        saturation = delta / largestComponent;
      else if (type === "l") {
        let baseSaturation = lightness > 0.5 ? delta / (2 - largestComponent - smallestComponent) : delta / (largestComponent + smallestComponent);
        saturation = isNaN(baseSaturation) ? 0 : baseSaturation;
      }
      let huePercentage = 0;
      switch (largestComponent) {
        case red:
          huePercentage = (green - blue) / delta + (green < blue ? 6 : 0);
          break;
        case green:
          huePercentage = (blue - red) / delta + 2;
          break;
        case blue:
          huePercentage = (red - green) / delta + 4;
      }
      let hue = huePercentage / 6 * 360, clampedHue = clamp.clamp(hue, 0, 360);
      return {
        hue: clampedHue ? roundNumberToDecimalPlaces.roundNumberToDecimalPlaces(clampedHue, 2) : 0,
        saturation: roundNumberToDecimalPlaces.roundNumberToDecimalPlaces(clamp.clamp(saturation, 0, 1), 4),
        brightness: roundNumberToDecimalPlaces.roundNumberToDecimalPlaces(clamp.clamp(largestComponent, 0, 1), 4),
        lightness: roundNumberToDecimalPlaces.roundNumberToDecimalPlaces(lightness, 4),
        alpha: roundNumberToDecimalPlaces.roundNumberToDecimalPlaces(alpha, 4)
      };
    }
    function rgbToHsb(color) {
      let {
        hue,
        saturation,
        brightness,
        alpha = 1
      } = rgbToHsbl(color, "b");
      return {
        hue,
        saturation,
        brightness,
        alpha
      };
    }
    function rgbToHsl(color) {
      let {
        hue,
        saturation: rawSaturation,
        lightness: rawLightness,
        alpha = 1
      } = rgbToHsbl(color, "l"), saturation = roundNumberToDecimalPlaces.roundNumberToDecimalPlaces(rawSaturation * 100, 2), lightness = roundNumberToDecimalPlaces.roundNumberToDecimalPlaces(rawLightness * 100, 2);
      return {
        hue,
        saturation,
        lightness,
        alpha
      };
    }
    function hexToRgb(color) {
      if (color.length === 4) {
        let repeatHex = (hex1, hex2) => color.slice(hex1, hex2).repeat(2), red2 = parseInt(repeatHex(1, 2), 16), green2 = parseInt(repeatHex(2, 3), 16), blue2 = parseInt(repeatHex(3, 4), 16);
        return {
          red: red2,
          green: green2,
          blue: blue2
        };
      }
      let red = parseInt(color.slice(1, 3), 16), green = parseInt(color.slice(3, 5), 16), blue = parseInt(color.slice(5, 7), 16);
      return {
        red,
        green,
        blue
      };
    }
    exports.hexToRgb = hexToRgb;
    exports.hsbToHex = hsbToHex;
    exports.hsbToRgb = hsbToRgb;
    exports.hslToRgb = hslToRgb;
    exports.rgbString = rgbString;
    exports.rgbToHex = rgbToHex;
    exports.rgbToHsb = rgbToHsb;
    exports.rgbToHsl = rgbToHsl;
    exports.rgbaString = rgbaString;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/within-content-context.js
var require_within_content_context = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/within-content-context.js"(exports) {
    "use strict";
    var React2 = require_react(), WithinContentContext = /* @__PURE__ */ React2.createContext(!1);
    exports.WithinContentContext = WithinContentContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-copy-to-clipboard.js
var require_use_copy_to_clipboard = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-copy-to-clipboard.js"(exports) {
    "use strict";
    var React2 = require_react();
    function useCopyToClipboard(options = {}) {
      let {
        defaultValue = "",
        timeout = 1500
      } = options, [status, setStatus] = React2.useState("inactive"), copy = React2.useCallback((value) => {
        navigator.clipboard.writeText(typeof value == "string" ? value : defaultValue).then(() => setStatus("copied"), () => setStatus("failed")).catch((error) => {
          throw error;
        });
      }, [defaultValue]);
      return React2.useEffect(() => {
        if (status === "inactive")
          return;
        let timeoutId = setTimeout(() => setStatus("inactive"), timeout);
        return () => clearTimeout(timeoutId);
      }, [status, timeout]), [copy, status];
    }
    exports.useCopyToClipboard = useCopyToClipboard;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/target.js
var require_target = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/target.js"(exports) {
    "use strict";
    var isServer = typeof window > "u" || typeof document > "u";
    exports.isServer = isServer;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-isomorphic-layout-effect.js
var require_use_isomorphic_layout_effect = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-isomorphic-layout-effect.js"(exports) {
    "use strict";
    var React2 = require_react(), target = require_target(), useIsomorphicLayoutEffect = target.isServer ? React2.useEffect : React2.useLayoutEffect;
    exports.useIsomorphicLayoutEffect = useIsomorphicLayoutEffect;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-event-listener.js
var require_use_event_listener = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-event-listener.js"(exports) {
    "use strict";
    var React2 = require_react(), useIsomorphicLayoutEffect = require_use_isomorphic_layout_effect();
    function useEventListener(eventName, handler, target, options) {
      let handlerRef = React2.useRef(handler), optionsRef = React2.useRef(options);
      useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
        handlerRef.current = handler;
      }, [handler]), useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
        optionsRef.current = options;
      }, [options]), React2.useEffect(() => {
        if (!(typeof eventName == "string" && target !== null))
          return;
        let targetElement;
        if (typeof target > "u")
          targetElement = window;
        else if ("current" in target) {
          if (target.current === null)
            return;
          targetElement = target.current;
        } else
          targetElement = target;
        let eventOptions = optionsRef.current, eventListener = (event) => handlerRef.current(event);
        return targetElement.addEventListener(eventName, eventListener, eventOptions), () => {
          targetElement.removeEventListener(eventName, eventListener, eventOptions);
        };
      }, [eventName, target]);
    }
    exports.useEventListener = useEventListener;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-focus.js
var require_use_focus = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-focus.js"(exports) {
    "use strict";
    var React2 = require_react(), useEventListener = require_use_event_listener();
    function useFocus(ref) {
      let [isFocused, setIsFocused] = React2.useState(!1), handleFocus = React2.useCallback(() => setIsFocused(!0), []), handleBlur = React2.useCallback(() => setIsFocused(!1), []);
      return useEventListener.useEventListener("focus", handleFocus, ref), useEventListener.useEventListener("blur", handleBlur, ref), isFocused;
    }
    function useFocusIn(ref) {
      let [isFocusedIn, setIsFocusedIn] = React2.useState(!1), deferredFocusOut = React2.useRef(null), handleFocusIn = React2.useCallback(() => {
        deferredFocusOut.current && (clearTimeout(deferredFocusOut.current), deferredFocusOut.current = null), setIsFocusedIn(!0);
      }, []), handleFocusOut = React2.useCallback(() => {
        deferredFocusOut.current = setTimeout(() => {
          setIsFocusedIn(!1);
        }, 0);
      }, []);
      return useEventListener.useEventListener("focusin", handleFocusIn, ref), useEventListener.useEventListener("focusout", handleFocusOut, ref), React2.useEffect(() => () => {
        deferredFocusOut.current && clearTimeout(deferredFocusOut.current);
      }, []), isFocusedIn;
    }
    exports.useFocus = useFocus;
    exports.useFocusIn = useFocusIn;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-hover.js
var require_use_hover = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-hover.js"(exports) {
    "use strict";
    var React2 = require_react(), useEventListener = require_use_event_listener();
    function useHover(ref) {
      let [isHovered, setIsHovered] = React2.useState(!1), handleMouseEnter = React2.useCallback(() => setIsHovered(!0), []), handleMouseLeave = React2.useCallback(() => setIsHovered(!1), []);
      return useEventListener.useEventListener("mouseenter", handleMouseEnter, ref), useEventListener.useEventListener("mouseleave", handleMouseLeave, ref), isHovered;
    }
    exports.useHover = useHover;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-media-query.js
var require_use_media_query = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-media-query.js"(exports) {
    "use strict";
    var React2 = require_react(), target = require_target(), useIsomorphicLayoutEffect = require_use_isomorphic_layout_effect(), queryAliases = {
      touch: "(hover: none) and (pointer: coarse)",
      stylus: "(hover: none) and (pointer: fine)",
      pointer: "(hover) and (pointer: coarse)",
      mouse: "(hover) and (pointer: fine)"
    }, isQueryAlias = (queryOrAlias) => Object.prototype.hasOwnProperty.call(queryAliases, queryOrAlias);
    function useMediaQuery(queryOrAlias, options = {}) {
      let {
        defaultValue = !1,
        initializeWithValue = !1
      } = options, query = isQueryAlias(queryOrAlias) ? queryAliases[queryOrAlias] : queryOrAlias, getMatches = React2.useCallback((query2) => target.isServer ? defaultValue : window.matchMedia(query2).matches, [defaultValue]), [matches, setMatches] = React2.useState(() => initializeWithValue ? getMatches(query) : defaultValue), handleChange = React2.useCallback(() => {
        setMatches(getMatches(query));
      }, [getMatches, query]);
      return useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
        let mediaQueryList = window.matchMedia(query);
        return handleChange(), mediaQueryList.addListener ? mediaQueryList.addListener(handleChange) : mediaQueryList.addEventListener("change", handleChange), () => {
          mediaQueryList.removeListener ? mediaQueryList.removeListener(handleChange) : mediaQueryList.removeEventListener("change", handleChange);
        };
      }, [query]), matches;
    }
    exports.queryAliases = queryAliases;
    exports.useMediaQuery = useMediaQuery;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-index-resource-state.js
var require_use_index_resource_state = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-index-resource-state.js"(exports) {
    "use strict";
    var React2 = require_react();
    exports.SelectionType = void 0;
    (function(SelectionType) {
      SelectionType.All = "all", SelectionType.Page = "page", SelectionType.Multi = "multi", SelectionType.Single = "single", SelectionType.Range = "range";
    })(exports.SelectionType || (exports.SelectionType = {}));
    function defaultResourceIDResolver(resource) {
      if ("id" in resource)
        return resource.id;
      throw new Error("Your resource does not directly contain an `id`. Pass a `resourceIDResolver` to `useIndexResourceState`");
    }
    function useIndexResourceState(resources, {
      selectedResources: initSelectedResources = [],
      allResourcesSelected: initAllResourcesSelected = !1,
      resourceIDResolver = defaultResourceIDResolver,
      resourceFilter = void 0
    } = {
      selectedResources: [],
      allResourcesSelected: !1,
      resourceIDResolver: defaultResourceIDResolver,
      resourceFilter: void 0
    }) {
      let [selectedResources, setSelectedResources] = React2.useState(initSelectedResources), [allResourcesSelected, setAllResourcesSelected] = React2.useState(initAllResourcesSelected), handleSelectionChange = React2.useCallback((selectionType, isSelecting, selection, _position) => {
        switch (selectionType === exports.SelectionType.All ? setAllResourcesSelected(isSelecting) : allResourcesSelected && setAllResourcesSelected(!1), selectionType) {
          case exports.SelectionType.Single:
            setSelectedResources((newSelectedResources) => isSelecting ? [...newSelectedResources, selection] : newSelectedResources.filter((id) => id !== selection));
            break;
          case exports.SelectionType.All:
          case exports.SelectionType.Page:
            if (resourceFilter) {
              let filteredResources = resources.filter(resourceFilter);
              setSelectedResources(isSelecting && selectedResources.length < filteredResources.length ? filteredResources.map(resourceIDResolver) : []);
            } else
              setSelectedResources(isSelecting ? resources.map(resourceIDResolver) : []);
            break;
          case exports.SelectionType.Multi:
            if (!selection)
              break;
            setSelectedResources((currentSelectedResources) => {
              let ids = [], filteredResources = resourceFilter ? resources.filter(resourceFilter) : resources;
              for (let i = selection[0]; i <= selection[1]; i++)
                if (filteredResources.includes(resources[i])) {
                  let id = resourceIDResolver(resources[i]);
                  (isSelecting && !currentSelectedResources.includes(id) || !isSelecting && currentSelectedResources.includes(id)) && ids.push(id);
                }
              return isSelecting ? [...currentSelectedResources, ...ids] : currentSelectedResources.filter((id) => !ids.includes(id));
            });
            break;
          case exports.SelectionType.Range:
            if (!selection)
              break;
            setSelectedResources((currentSelectedResources) => {
              let selectedIds = (resourceFilter ? resources.filter(resourceFilter) : resources).map(resourceIDResolver).slice(Number(selection[0]), Number(selection[1]) + 1), isIndeterminate = selectedIds.some((id) => selectedResources.includes(id));
              return !selectedIds.every((id) => selectedResources.includes(id)) && (isSelecting || isIndeterminate) ? [...(/* @__PURE__ */ new Set([...currentSelectedResources, ...selectedIds])).values()] : currentSelectedResources.filter((id) => !selectedIds.includes(id));
            });
            break;
        }
      }, [allResourcesSelected, resourceFilter, selectedResources, resources, resourceIDResolver]), clearSelection = React2.useCallback(() => {
        setSelectedResources([]), setAllResourcesSelected(!1);
      }, []), removeSelectedResources = React2.useCallback((removeResources) => {
        let newSelectedResources = [...selectedResources].filter((resource) => !removeResources.includes(resource));
        setSelectedResources(newSelectedResources), newSelectedResources.length === 0 && setAllResourcesSelected(!1);
      }, [selectedResources]);
      return {
        selectedResources,
        allResourcesSelected,
        handleSelectionChange,
        clearSelection,
        removeSelectedResources
      };
    }
    exports.useIndexResourceState = useIndexResourceState;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/breakpoints.js
var require_breakpoints = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/breakpoints.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisTokens = require("@shopify/polaris-tokens"), target = require_target(), useIsomorphicLayoutEffect = require_use_isomorphic_layout_effect(), Breakpoints = {
      // TODO: Update to smDown
      navigationBarCollapsed: "767.95px",
      // TODO: Update to lgDown
      stackedContent: "1039.95px"
    }, noWindowMatches = {
      media: "",
      addListener: noop,
      removeListener: noop,
      matches: !1,
      onchange: noop,
      addEventListener: noop,
      removeEventListener: noop,
      dispatchEvent: (_) => !0
    };
    function noop() {
    }
    function navigationBarCollapsed() {
      return typeof window > "u" ? noWindowMatches : window.matchMedia(`(max-width: ${Breakpoints.navigationBarCollapsed})`);
    }
    function stackedContent() {
      return typeof window > "u" ? noWindowMatches : window.matchMedia(`(max-width: ${Breakpoints.stackedContent})`);
    }
    var breakpointsQueryEntries = getBreakpointsQueryEntries(polarisTokens.themeDefault.breakpoints);
    function getMatches(defaults, forceDefaults) {
      return !target.isServer && !forceDefaults ? Object.fromEntries(breakpointsQueryEntries.map(([directionAlias, query]) => [directionAlias, window.matchMedia(query).matches])) : Object.fromEntries(typeof defaults == "object" && defaults !== null ? breakpointsQueryEntries.map(([directionAlias]) => [directionAlias, defaults[directionAlias] ?? !1]) : breakpointsQueryEntries.map(([directionAlias]) => [directionAlias, defaults ?? !1]));
    }
    function useBreakpoints(options) {
      let [breakpoints, setBreakpoints] = React2.useState(getMatches(options?.defaults, !0));
      return useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
        let mediaQueryLists = breakpointsQueryEntries.map(([_, query]) => window.matchMedia(query)), handler = () => setBreakpoints(getMatches());
        return mediaQueryLists.forEach((mql) => {
          mql.addListener ? mql.addListener(handler) : mql.addEventListener("change", handler);
        }), handler(), () => {
          mediaQueryLists.forEach((mql) => {
            mql.removeListener ? mql.removeListener(handler) : mql.removeEventListener("change", handler);
          });
        };
      }, []), breakpoints;
    }
    function getBreakpointsQueryEntries(breakpoints) {
      return Object.entries(polarisTokens.getMediaConditions(breakpoints)).map(([breakpointsToken, mediaConditions]) => Object.entries(mediaConditions).map(([direction, mediaCondition]) => [`${breakpointsToken.split("-")[1]}${capitalize(direction)}`, mediaCondition])).flat();
    }
    function capitalize(str) {
      return str.charAt(0).toUpperCase() + str.slice(1);
    }
    exports.getBreakpointsQueryEntries = getBreakpointsQueryEntries;
    exports.navigationBarCollapsed = navigationBarCollapsed;
    exports.stackedContent = stackedContent;
    exports.useBreakpoints = useBreakpoints;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/AppProvider/global.css.js
var require_global_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/AppProvider/global.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var global2 = {};
    exports.default = global2;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/debounce.js
var require_debounce = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/debounce.js"(exports) {
    "use strict";
    function debounce(func, waitArg, options) {
      let lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = !1, maxing = !1, trailing = !0, useRAF = !waitArg && waitArg !== 0;
      if (typeof func != "function")
        throw new TypeError("Expected a function");
      let wait = waitArg || 0;
      typeof options == "object" && (leading = Boolean(options.leading), maxing = "maxWait" in options, maxWait = maxing ? Math.max(Number(options.maxWait) || 0, wait) : void 0, trailing = "trailing" in options ? Boolean(options.trailing) : trailing);
      function invokeFunc(time) {
        let args = lastArgs, thisArg = lastThis;
        return lastArgs = void 0, lastThis = void 0, lastInvokeTime = time, result = func.apply(thisArg, args), result;
      }
      function startTimer(pendingFunc, wait2) {
        return useRAF ? (cancelAnimationFrame(timerId), requestAnimationFrame(pendingFunc)) : setTimeout(pendingFunc, wait2);
      }
      function cancelTimer(id) {
        if (useRAF)
          return cancelAnimationFrame(id);
        clearTimeout(id);
      }
      function leadingEdge(time) {
        return lastInvokeTime = time, timerId = startTimer(timerExpired, wait), leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        let timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
        return maxing && maxWait ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
      }
      function shouldInvoke(time) {
        let timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && maxWait && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        let time = Date.now();
        if (shouldInvoke(time))
          return trailingEdge(time);
        timerId = startTimer(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        return timerId = void 0, trailing && lastArgs ? invokeFunc(time) : (lastArgs = lastThis = void 0, result);
      }
      function cancel() {
        timerId !== void 0 && cancelTimer(timerId), lastInvokeTime = 0, lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush() {
        return timerId === void 0 ? result : trailingEdge(Date.now());
      }
      function pending() {
        return timerId !== void 0;
      }
      function debounced(...args) {
        let time = Date.now(), isInvoking = shouldInvoke(time);
        if (lastArgs = args, lastThis = this, lastCallTime = time, isInvoking) {
          if (timerId === void 0)
            return leadingEdge(lastCallTime);
          if (maxing)
            return timerId = startTimer(timerExpired, wait), invokeFunc(lastCallTime);
        }
        return timerId === void 0 && (timerId = startTimer(timerExpired, wait)), result;
      }
      return debounced.cancel = cancel, debounced.flush = flush, debounced.pending = pending, debounced;
    }
    exports.debounce = debounce;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/geometry.js
var require_geometry = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/geometry.js"(exports) {
    "use strict";
    var Rect = class {
      static get zero() {
        return new Rect();
      }
      constructor({
        top = 0,
        left = 0,
        width = 0,
        height = 0
      } = {}) {
        this.top = top, this.left = left, this.width = width, this.height = height;
      }
      get center() {
        return {
          x: this.left + this.width / 2,
          y: this.top + this.height / 2
        };
      }
    };
    function getRectForNode(node) {
      if (!(node instanceof Element))
        return new Rect({
          width: window.innerWidth,
          height: window.innerHeight
        });
      let rect = node.getBoundingClientRect();
      return new Rect({
        top: rect.top,
        left: rect.left,
        width: rect.width,
        height: rect.height
      });
    }
    exports.Rect = Rect;
    exports.getRectForNode = getRectForNode;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/sticky-manager/sticky-manager.js
var require_sticky_manager = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/sticky-manager/sticky-manager.js"(exports) {
    "use strict";
    var polarisTokens = require("@shopify/polaris-tokens"), debounce = require_debounce(), shared = require_shared(), breakpoints = require_breakpoints(), geometry = require_geometry(), SIXTY_FPS = 1e3 / 60, StickyManager = class {
      constructor(container) {
        this.stickyItems = [], this.stuckItems = [], this.container = null, this.topBarOffset = 0, this.handleResize = debounce.debounce(() => {
          this.manageStickyItems();
        }, SIXTY_FPS, {
          leading: !0,
          trailing: !0,
          maxWait: SIXTY_FPS
        }), this.handleScroll = debounce.debounce(() => {
          this.manageStickyItems();
        }, SIXTY_FPS, {
          leading: !0,
          trailing: !0,
          maxWait: SIXTY_FPS
        }), container && this.setContainer(container);
      }
      registerStickyItem(stickyItem) {
        this.stickyItems.push(stickyItem);
      }
      unregisterStickyItem(nodeToRemove) {
        let nodeIndex = this.stickyItems.findIndex(({
          stickyNode
        }) => nodeToRemove === stickyNode);
        this.stickyItems.splice(nodeIndex, 1);
      }
      setContainer(el) {
        this.container = el, isDocument(el) && this.setTopBarOffset(el), this.container.addEventListener("scroll", this.handleScroll), window.addEventListener("resize", this.handleResize), this.manageStickyItems();
      }
      removeScrollListener() {
        this.container && (this.container.removeEventListener("scroll", this.handleScroll), window.removeEventListener("resize", this.handleResize));
      }
      manageStickyItems() {
        if (this.stickyItems.length <= 0)
          return;
        let scrollTop = this.container ? scrollTopFor(this.container) : 0, containerTop = geometry.getRectForNode(this.container).top + this.topBarOffset;
        this.stickyItems.forEach((stickyItem) => {
          let {
            handlePositioning
          } = stickyItem, {
            sticky,
            top,
            left,
            width
          } = this.evaluateStickyItem(stickyItem, scrollTop, containerTop);
          this.updateStuckItems(stickyItem, sticky), handlePositioning(sticky, top, left, width);
        });
      }
      evaluateStickyItem(stickyItem, scrollTop, containerTop) {
        let {
          stickyNode,
          placeHolderNode,
          boundingElement,
          offset,
          disableWhenStacked
        } = stickyItem;
        if (disableWhenStacked && breakpoints.stackedContent().matches)
          return {
            sticky: !1,
            top: 0,
            left: 0,
            width: "auto"
          };
        let stickyOffset = offset ? this.getOffset(stickyNode) + parseInt(
          // Important: This will not update when the active theme changes.
          // Update this to `useTheme` once converted to a function component.
          polarisTokens.themeDefault.space["space-500"],
          10
        ) : this.getOffset(stickyNode), scrollPosition = scrollTop + stickyOffset, placeHolderNodeCurrentTop = placeHolderNode.getBoundingClientRect().top - containerTop + scrollTop, top = containerTop + stickyOffset, width = placeHolderNode.getBoundingClientRect().width, left = placeHolderNode.getBoundingClientRect().left, sticky;
        if (boundingElement == null)
          sticky = scrollPosition >= placeHolderNodeCurrentTop;
        else {
          let stickyItemHeight = stickyNode.getBoundingClientRect().height || stickyNode.firstElementChild?.getBoundingClientRect().height || 0, stickyItemBottomPosition = boundingElement.getBoundingClientRect().bottom - stickyItemHeight + scrollTop - containerTop;
          sticky = scrollPosition >= placeHolderNodeCurrentTop && scrollPosition < stickyItemBottomPosition;
        }
        return {
          sticky,
          top,
          left,
          width
        };
      }
      updateStuckItems(item, sticky) {
        let {
          stickyNode
        } = item;
        sticky && !this.isNodeStuck(stickyNode) ? this.addStuckItem(item) : !sticky && this.isNodeStuck(stickyNode) && this.removeStuckItem(item);
      }
      addStuckItem(stickyItem) {
        this.stuckItems.push(stickyItem);
      }
      removeStuckItem(stickyItem) {
        let {
          stickyNode: nodeToRemove
        } = stickyItem, nodeIndex = this.stuckItems.findIndex(({
          stickyNode
        }) => nodeToRemove === stickyNode);
        this.stuckItems.splice(nodeIndex, 1);
      }
      getOffset(node) {
        if (this.stuckItems.length === 0)
          return 0;
        let offset = 0, count = 0, stuckNodesLength = this.stuckItems.length, nodeRect = geometry.getRectForNode(node);
        for (; count < stuckNodesLength; ) {
          let stuckNode = this.stuckItems[count].stickyNode;
          if (stuckNode !== node) {
            let stuckNodeRect = geometry.getRectForNode(stuckNode);
            horizontallyOverlaps(nodeRect, stuckNodeRect) || (offset += geometry.getRectForNode(stuckNode).height);
          } else
            break;
          count++;
        }
        return offset;
      }
      isNodeStuck(node) {
        return this.stuckItems.findIndex(({
          stickyNode
        }) => node === stickyNode) >= 0;
      }
      setTopBarOffset(container) {
        let topbarElement = container.querySelector(`:not(${shared.scrollable.selector}) ${shared.dataPolarisTopBar.selector}`);
        this.topBarOffset = topbarElement ? topbarElement.clientHeight : 0;
      }
    };
    function isDocument(node) {
      return node === document;
    }
    function scrollTopFor(container) {
      return isDocument(container) ? document.body.scrollTop || document.documentElement.scrollTop : container.scrollTop;
    }
    function horizontallyOverlaps(rect1, rect2) {
      let rect1Left = rect1.left, rect1Right = rect1.left + rect1.width, rect2Left = rect2.left;
      return rect2.left + rect2.width < rect1Left || rect1Right < rect2Left;
    }
    exports.StickyManager = StickyManager;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/scroll-lock-manager/scroll-lock-manager.js
var require_scroll_lock_manager = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/scroll-lock-manager/scroll-lock-manager.js"(exports) {
    "use strict";
    var target = require_target(), SCROLL_LOCKING_ATTRIBUTE = "data-lock-scrolling", SCROLL_LOCKING_HIDDEN_ATTRIBUTE = "data-lock-scrolling-hidden", SCROLL_LOCKING_WRAPPER_ATTRIBUTE = "data-lock-scrolling-wrapper", scrollPosition = 0;
    function isScrollBarVisible() {
      let {
        body
      } = document;
      return body.scrollHeight > body.clientHeight;
    }
    var ScrollLockManager = class {
      constructor() {
        this.scrollLocks = 0, this.locked = !1;
      }
      registerScrollLock() {
        this.scrollLocks += 1, this.handleScrollLocking();
      }
      unregisterScrollLock() {
        this.scrollLocks -= 1, this.handleScrollLocking();
      }
      handleScrollLocking() {
        if (target.isServer)
          return;
        let {
          scrollLocks
        } = this, {
          body
        } = document, wrapper = body.firstElementChild;
        scrollLocks === 0 ? (body.removeAttribute(SCROLL_LOCKING_ATTRIBUTE), body.removeAttribute(SCROLL_LOCKING_HIDDEN_ATTRIBUTE), wrapper && wrapper.removeAttribute(SCROLL_LOCKING_WRAPPER_ATTRIBUTE), window.scroll(0, scrollPosition), this.locked = !1) : scrollLocks > 0 && !this.locked && (scrollPosition = window.pageYOffset, body.setAttribute(SCROLL_LOCKING_ATTRIBUTE, ""), isScrollBarVisible() || body.setAttribute(SCROLL_LOCKING_HIDDEN_ATTRIBUTE, ""), wrapper && (wrapper.setAttribute(SCROLL_LOCKING_WRAPPER_ATTRIBUTE, ""), wrapper.scrollTop = scrollPosition), this.locked = !0);
      }
      resetScrollPosition() {
        scrollPosition = 0;
      }
    };
    exports.SCROLL_LOCKING_ATTRIBUTE = SCROLL_LOCKING_ATTRIBUTE;
    exports.ScrollLockManager = ScrollLockManager;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/get.js
var require_get = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/get.js"(exports) {
    "use strict";
    var OBJECT_NOTATION_MATCHER = /\[(.*?)\]|(\w+)/g;
    function get(obj, keypath, defaultValue) {
      if (obj == null)
        return;
      let keys = Array.isArray(keypath) ? keypath : getKeypath(keypath), acc = obj;
      for (let i = 0; i < keys.length; i++) {
        let val = acc[keys[i]];
        if (val === void 0)
          return defaultValue;
        acc = val;
      }
      return acc;
    }
    function getKeypath(str) {
      let path = [], result;
      for (; result = OBJECT_NOTATION_MATCHER.exec(str); ) {
        let [, first, second] = result;
        path.push(first || second);
      }
      return path;
    }
    exports.get = get;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/merge.js
var require_merge = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/merge.js"(exports) {
    "use strict";
    function merge(...objs) {
      let final = {};
      for (let obj of objs)
        final = mergeRecursively(final, obj);
      return final;
    }
    function mergeRecursively(inputObjA, objB) {
      let objA = Array.isArray(inputObjA) ? [...inputObjA] : {
        ...inputObjA
      };
      for (let key in objB)
        if (Object.prototype.hasOwnProperty.call(objB, key))
          isMergeableValue(objB[key]) && isMergeableValue(objA[key]) ? objA[key] = mergeRecursively(objA[key], objB[key]) : objA[key] = objB[key];
        else
          continue;
      return objA;
    }
    function isMergeableValue(value) {
      return value !== null && typeof value == "object";
    }
    exports.merge = merge;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/i18n/I18n.js
var require_I18n = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/i18n/I18n.js"(exports) {
    "use strict";
    var get = require_get(), merge = require_merge(), REPLACE_REGEX = /{([^}]*)}/g, I18n = class {
      /**
       * @param translation A locale object or array of locale objects that overrides default translations. If specifying an array then your desired language dictionary should come first, followed by your fallback language dictionaries
       */
      constructor(translation) {
        this.translation = {}, this.translation = Array.isArray(translation) ? merge.merge(...translation.slice().reverse()) : translation;
      }
      translate(id, replacements) {
        let text = get.get(this.translation, id, "");
        return text ? replacements ? text.replace(REPLACE_REGEX, (match) => {
          let replacement = match.substring(1, match.length - 1);
          if (replacements[replacement] === void 0) {
            let replacementData = JSON.stringify(replacements);
            throw new Error(`Error in translation for key '${id}'. No replacement found for key '${replacement}'. The following replacements were passed: '${replacementData}'`);
          }
          return replacements[replacement];
        }) : text : "";
      }
      translationKeyExists(path) {
        return Boolean(get.get(this.translation, path));
      }
    };
    exports.I18n = I18n;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/features/context.js
var require_context = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/features/context.js"(exports) {
    "use strict";
    var React2 = require_react(), FeaturesContext = /* @__PURE__ */ React2.createContext(void 0);
    exports.FeaturesContext = FeaturesContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/i18n/context.js
var require_context2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/i18n/context.js"(exports) {
    "use strict";
    var React2 = require_react(), I18nContext = /* @__PURE__ */ React2.createContext(void 0);
    exports.I18nContext = I18nContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/scroll-lock-manager/context.js
var require_context3 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/scroll-lock-manager/context.js"(exports) {
    "use strict";
    var React2 = require_react(), ScrollLockManagerContext = /* @__PURE__ */ React2.createContext(void 0);
    exports.ScrollLockManagerContext = ScrollLockManagerContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/sticky-manager/context.js
var require_context4 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/sticky-manager/context.js"(exports) {
    "use strict";
    var React2 = require_react(), StickyManagerContext = /* @__PURE__ */ React2.createContext(void 0);
    exports.StickyManagerContext = StickyManagerContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/link/context.js
var require_context5 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/link/context.js"(exports) {
    "use strict";
    var React2 = require_react(), LinkContext = /* @__PURE__ */ React2.createContext(void 0);
    exports.LinkContext = LinkContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/media-query/context.js
var require_context6 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/media-query/context.js"(exports) {
    "use strict";
    var React2 = require_react(), MediaQueryContext = /* @__PURE__ */ React2.createContext(void 0);
    exports.MediaQueryContext = MediaQueryContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/EventListener/EventListener.js
var require_EventListener = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/EventListener/EventListener.js"(exports) {
    "use strict";
    var React2 = require_react(), EventListener = class extends React2.PureComponent {
      componentDidMount() {
        this.attachListener();
      }
      componentDidUpdate({
        passive,
        ...detachProps
      }) {
        this.detachListener(detachProps), this.attachListener();
      }
      componentWillUnmount() {
        this.detachListener();
      }
      render() {
        return null;
      }
      attachListener() {
        let {
          event,
          handler,
          capture,
          passive
        } = this.props;
        window.addEventListener(event, handler, {
          capture,
          passive
        });
      }
      detachListener(prevProps) {
        let {
          event,
          handler,
          capture
        } = prevProps || this.props;
        window.removeEventListener(event, handler, capture);
      }
    };
    exports.EventListener = EventListener;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/MediaQueryProvider/MediaQueryProvider.js
var require_MediaQueryProvider = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/MediaQueryProvider/MediaQueryProvider.js"(exports) {
    "use strict";
    var React2 = require_react(), debounce = require_debounce(), breakpoints = require_breakpoints(), context = require_context6(), EventListener = require_EventListener(), MediaQueryProvider = function({
      children
    }) {
      let [isNavigationCollapsed, setIsNavigationCollapsed] = React2.useState(breakpoints.navigationBarCollapsed().matches), handleResize = React2.useCallback(debounce.debounce(() => {
        isNavigationCollapsed !== breakpoints.navigationBarCollapsed().matches && setIsNavigationCollapsed(!isNavigationCollapsed);
      }, 40, {
        trailing: !0,
        leading: !0,
        maxWait: 40
      }), [isNavigationCollapsed]);
      React2.useEffect(() => {
        setIsNavigationCollapsed(breakpoints.navigationBarCollapsed().matches);
      }, []);
      let context$1 = React2.useMemo(() => ({
        isNavigationCollapsed
      }), [isNavigationCollapsed]);
      return /* @__PURE__ */ React2.createElement(context.MediaQueryContext.Provider, {
        value: context$1
      }, /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
        event: "resize",
        handler: handleResize
      }), children);
    };
    exports.MediaQueryProvider = MediaQueryProvider;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-is-after-initial-mount.js
var require_use_is_after_initial_mount = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-is-after-initial-mount.js"(exports) {
    "use strict";
    var React2 = require_react();
    function useIsAfterInitialMount() {
      let [isAfterInitialMount, setIsAfterInitialMount] = React2.useState(!1);
      return React2.useEffect(() => {
        setIsAfterInitialMount(!0);
      }, []), isAfterInitialMount;
    }
    exports.useIsAfterInitialMount = useIsAfterInitialMount;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/portals/context.js
var require_context7 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/portals/context.js"(exports) {
    "use strict";
    var React2 = require_react(), PortalsManagerContext = /* @__PURE__ */ React2.createContext(void 0);
    exports.PortalsManagerContext = PortalsManagerContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/PortalsManager/components/PortalsContainer/PortalsContainer.js
var require_PortalsContainer = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/PortalsManager/components/PortalsContainer/PortalsContainer.js"(exports) {
    "use strict";
    var React2 = require_react();
    function PortalsContainerComponent(_props, ref) {
      return /* @__PURE__ */ React2.createElement("div", {
        id: "PolarisPortalsContainer",
        ref
      });
    }
    var PortalsContainer = /* @__PURE__ */ React2.forwardRef(PortalsContainerComponent);
    exports.PortalsContainer = PortalsContainer;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/PortalsManager/PortalsManager.js
var require_PortalsManager = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/PortalsManager/PortalsManager.js"(exports) {
    "use strict";
    var React2 = require_react(), useIsAfterInitialMount = require_use_is_after_initial_mount(), context = require_context7(), PortalsContainer = require_PortalsContainer();
    function PortalsManager({
      children,
      container
    }) {
      let isMounted = useIsAfterInitialMount.useIsAfterInitialMount(), ref = React2.useRef(null), contextValue = React2.useMemo(() => container ? {
        container
      } : isMounted ? {
        container: ref.current
      } : {
        container: null
      }, [container, isMounted]);
      return /* @__PURE__ */ React2.createElement(context.PortalsManagerContext.Provider, {
        value: contextValue
      }, children, container ? null : /* @__PURE__ */ React2.createElement(PortalsContainer.PortalsContainer, {
        ref
      }));
    }
    exports.PortalsManager = PortalsManager;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/focus-manager/context.js
var require_context8 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/focus-manager/context.js"(exports) {
    "use strict";
    var React2 = require_react(), FocusManagerContext = /* @__PURE__ */ React2.createContext(void 0);
    exports.FocusManagerContext = FocusManagerContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/FocusManager/FocusManager.js
var require_FocusManager = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/FocusManager/FocusManager.js"(exports) {
    "use strict";
    var React2 = require_react(), context = require_context8();
    function FocusManager({
      children
    }) {
      let [trapFocusList, setTrapFocusList] = React2.useState([]), add = React2.useCallback((id) => {
        setTrapFocusList((list) => [...list, id]);
      }, []), remove = React2.useCallback((id) => {
        let removed = !0;
        return setTrapFocusList((list) => {
          let clone = [...list], index = clone.indexOf(id);
          return index === -1 ? removed = !1 : clone.splice(index, 1), clone;
        }), removed;
      }, []), value = React2.useMemo(() => ({
        trapFocusList,
        add,
        remove
      }), [add, trapFocusList, remove]);
      return /* @__PURE__ */ React2.createElement(context.FocusManagerContext.Provider, {
        value
      }, children);
    }
    exports.FocusManager = FocusManager;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/ephemeral-presence-manager/context.js
var require_context9 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/ephemeral-presence-manager/context.js"(exports) {
    "use strict";
    var React2 = require_react(), EphemeralPresenceManagerContext = /* @__PURE__ */ React2.createContext(void 0);
    exports.EphemeralPresenceManagerContext = EphemeralPresenceManagerContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/EphemeralPresenceManager/EphemeralPresenceManager.js
var require_EphemeralPresenceManager = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/EphemeralPresenceManager/EphemeralPresenceManager.js"(exports) {
    "use strict";
    var React2 = require_react(), context = require_context9(), defaultState = {
      tooltip: 0,
      hovercard: 0
    };
    function EphemeralPresenceManager({
      children
    }) {
      let [presenceCounter, setPresenceCounter] = React2.useState(defaultState), addPresence = React2.useCallback((key) => {
        setPresenceCounter((prevList) => ({
          ...prevList,
          [key]: prevList[key] + 1
        }));
      }, []), removePresence = React2.useCallback((key) => {
        setPresenceCounter((prevList) => ({
          ...prevList,
          [key]: prevList[key] - 1
        }));
      }, []), value = React2.useMemo(() => ({
        presenceList: Object.entries(presenceCounter).reduce((previousValue, currentValue) => {
          let [key, value2] = currentValue;
          return {
            ...previousValue,
            [key]: value2 >= 1
          };
        }, {}),
        presenceCounter,
        addPresence,
        removePresence
      }), [addPresence, removePresence, presenceCounter]);
      return /* @__PURE__ */ React2.createElement(context.EphemeralPresenceManagerContext.Provider, {
        value
      }, children);
    }
    exports.EphemeralPresenceManager = EphemeralPresenceManager;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/AppProvider/AppProvider.js
var require_AppProvider = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/AppProvider/AppProvider.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisTokens = require("@shopify/polaris-tokens"), useTheme = require_use_theme();
    require_global_css();
    var stickyManager = require_sticky_manager(), scrollLockManager = require_scroll_lock_manager(), I18n = require_I18n(), context = require_context(), context$1 = require_context2(), context$2 = require_context3(), context$3 = require_context4(), context$4 = require_context5(), MediaQueryProvider = require_MediaQueryProvider(), PortalsManager = require_PortalsManager(), FocusManager = require_FocusManager(), EphemeralPresenceManager = require_EphemeralPresenceManager(), MAX_SCROLLBAR_WIDTH = 20, SCROLLBAR_TEST_ELEMENT_PARENT_SIZE = 30, SCROLLBAR_TEST_ELEMENT_CHILD_SIZE = SCROLLBAR_TEST_ELEMENT_PARENT_SIZE + 10;
    function measureScrollbars() {
      let parentEl = document.createElement("div");
      parentEl.setAttribute("style", `position: absolute; opacity: 0; transform: translate3d(-9999px, -9999px, 0); pointer-events: none; width:${SCROLLBAR_TEST_ELEMENT_PARENT_SIZE}px; height:${SCROLLBAR_TEST_ELEMENT_PARENT_SIZE}px;`);
      let child = document.createElement("div");
      child.setAttribute("style", `width:100%; height: ${SCROLLBAR_TEST_ELEMENT_CHILD_SIZE}; overflow:scroll; scrollbar-width: thin;`), parentEl.appendChild(child), document.body.appendChild(parentEl);
      let scrollbarWidth = SCROLLBAR_TEST_ELEMENT_PARENT_SIZE - (parentEl.firstElementChild?.clientWidth ?? 0), scrollbarWidthWithSafetyHatch = Math.min(scrollbarWidth, MAX_SCROLLBAR_WIDTH);
      document.documentElement.style.setProperty("--pc-app-provider-scrollbar-width", `${scrollbarWidthWithSafetyHatch}px`), document.body.removeChild(parentEl);
    }
    var AppProvider = class extends React2.Component {
      constructor(props) {
        super(props), this.setBodyStyles = () => {
          document.body.style.backgroundColor = "var(--p-color-bg)", document.body.style.color = "var(--p-color-text)";
        }, this.setRootAttributes = () => {
          let activeThemeName = this.getThemeName();
          polarisTokens.themeNames.forEach((themeName) => {
            document.documentElement.classList.toggle(polarisTokens.createThemeClassName(themeName), themeName === activeThemeName);
          });
        }, this.getThemeName = () => this.props.theme ?? polarisTokens.themeNameDefault, this.stickyManager = new stickyManager.StickyManager(), this.scrollLockManager = new scrollLockManager.ScrollLockManager();
        let {
          i18n,
          linkComponent
        } = this.props;
        this.state = {
          link: linkComponent,
          intl: new I18n.I18n(i18n)
        };
      }
      componentDidMount() {
        if (document != null) {
          this.stickyManager.setContainer(document), this.setBodyStyles(), this.setRootAttributes();
          let isSafari16 = navigator.userAgent.includes("Safari") && !navigator.userAgent.includes("Chrome") && (navigator.userAgent.includes("Version/16.1") || navigator.userAgent.includes("Version/16.2") || navigator.userAgent.includes("Version/16.3")), isMobileApp16 = navigator.userAgent.includes("Shopify Mobile/iOS") && (navigator.userAgent.includes("OS 16_1") || navigator.userAgent.includes("OS 16_2") || navigator.userAgent.includes("OS 16_3"));
          (isSafari16 || isMobileApp16) && document.documentElement.classList.add("Polaris-Safari-16-Font-Optical-Sizing-Patch");
        }
        measureScrollbars();
      }
      componentDidUpdate({
        i18n: prevI18n,
        linkComponent: prevLinkComponent
      }) {
        let {
          i18n,
          linkComponent
        } = this.props;
        this.setRootAttributes(), !(i18n === prevI18n && linkComponent === prevLinkComponent) && this.setState({
          link: linkComponent,
          intl: new I18n.I18n(i18n)
        });
      }
      render() {
        let {
          children,
          features
        } = this.props, themeName = this.getThemeName(), {
          intl,
          link
        } = this.state;
        return /* @__PURE__ */ React2.createElement(useTheme.ThemeNameContext.Provider, {
          value: themeName
        }, /* @__PURE__ */ React2.createElement(useTheme.ThemeContext.Provider, {
          value: useTheme.getTheme(themeName)
        }, /* @__PURE__ */ React2.createElement(context.FeaturesContext.Provider, {
          value: features
        }, /* @__PURE__ */ React2.createElement(context$1.I18nContext.Provider, {
          value: intl
        }, /* @__PURE__ */ React2.createElement(context$2.ScrollLockManagerContext.Provider, {
          value: this.scrollLockManager
        }, /* @__PURE__ */ React2.createElement(context$3.StickyManagerContext.Provider, {
          value: this.stickyManager
        }, /* @__PURE__ */ React2.createElement(context$4.LinkContext.Provider, {
          value: link
        }, /* @__PURE__ */ React2.createElement(MediaQueryProvider.MediaQueryProvider, null, /* @__PURE__ */ React2.createElement(PortalsManager.PortalsManager, null, /* @__PURE__ */ React2.createElement(FocusManager.FocusManager, null, /* @__PURE__ */ React2.createElement(EphemeralPresenceManager.EphemeralPresenceManager, null, children)))))))))));
      }
    };
    exports.AppProvider = AppProvider;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/is-element-in-viewport.js
var require_is_element_in_viewport = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/is-element-in-viewport.js"(exports) {
    "use strict";
    function isElementInViewport(element) {
      let {
        top,
        left,
        bottom,
        right
      } = element.getBoundingClientRect();
      return top >= 0 && right <= window.innerWidth && bottom <= window.innerHeight && left >= 0;
    }
    exports.isElementInViewport = isElementInViewport;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/focus.js
var require_focus = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/focus.js"(exports) {
    "use strict";
    var isElementInViewport = require_is_element_in_viewport(), FOCUSABLE_SELECTOR = 'a,frame,iframe,input:not([type=hidden]):not(:disabled),select:not(:disabled),textarea:not(:disabled),button:not([aria-disabled="true"]):not([tabindex="-1"]):not(:disabled),*[tabindex]', KEYBOARD_FOCUSABLE_SELECTORS = 'a,frame,iframe,input:not([type=hidden]):not(:disabled),select:not(:disabled),textarea:not(:disabled),button:not([aria-disabled="true"]):not([tabindex="-1"]):not(:disabled),*[tabindex]:not([tabindex="-1"])', MENUITEM_FOCUSABLE_SELECTORS = 'a[role="menuitem"],frame[role="menuitem"],iframe[role="menuitem"],input[role="menuitem"]:not([type=hidden]):not(:disabled),select[role="menuitem"]:not(:disabled),textarea[role="menuitem"]:not(:disabled),button[role="menuitem"]:not(:disabled),*[tabindex]:not([tabindex="-1"])', handleMouseUpByBlurring = ({
      currentTarget
    }) => currentTarget.blur();
    function nextFocusableNode(node, filter) {
      let allFocusableElements = [...document.querySelectorAll(FOCUSABLE_SELECTOR)], sliceLocation = allFocusableElements.indexOf(node) + 1, focusableElementsAfterNode = allFocusableElements.slice(sliceLocation);
      for (let focusableElement of focusableElementsAfterNode)
        if (isElementInViewport.isElementInViewport(focusableElement) && (!filter || filter && filter(focusableElement)))
          return focusableElement;
      return null;
    }
    function findFirstFocusableNode(element, onlyDescendants = !0) {
      return !onlyDescendants && matches(element, FOCUSABLE_SELECTOR) ? element : element.querySelector(FOCUSABLE_SELECTOR);
    }
    function findFirstFocusableNodeIncludingDisabled(element) {
      let focusableSelector = "a,button,frame,iframe,input:not([type=hidden]),select,textarea,*[tabindex]";
      return matches(element, focusableSelector) ? element : element.querySelector(focusableSelector);
    }
    function focusFirstFocusableNode(element, onlyDescendants = !0) {
      findFirstFocusableNode(element, onlyDescendants)?.focus();
    }
    function focusNextFocusableNode(node, filter) {
      let nextFocusable = nextFocusableNode(node, filter);
      return nextFocusable && nextFocusable instanceof HTMLElement ? (nextFocusable.focus(), !0) : !1;
    }
    function findFirstKeyboardFocusableNode(element, onlyDescendants = !0) {
      return !onlyDescendants && matches(element, KEYBOARD_FOCUSABLE_SELECTORS) ? element : element.querySelector(KEYBOARD_FOCUSABLE_SELECTORS);
    }
    function focusFirstKeyboardFocusableNode(element, onlyDescendants = !0) {
      let firstFocusable = findFirstKeyboardFocusableNode(element, onlyDescendants);
      return firstFocusable ? (firstFocusable.focus(), !0) : !1;
    }
    function findLastKeyboardFocusableNode(element, onlyDescendants = !0) {
      if (!onlyDescendants && matches(element, KEYBOARD_FOCUSABLE_SELECTORS))
        return element;
      let allFocusable = element.querySelectorAll(KEYBOARD_FOCUSABLE_SELECTORS);
      return allFocusable[allFocusable.length - 1];
    }
    function focusLastKeyboardFocusableNode(element, onlyDescendants = !0) {
      let lastFocusable = findLastKeyboardFocusableNode(element, onlyDescendants);
      return lastFocusable ? (lastFocusable.focus(), !0) : !1;
    }
    function wrapFocusPreviousFocusableMenuItem(parentElement, currentFocusedElement) {
      let allFocusableChildren = getMenuFocusableDescendants(parentElement), currentItemIdx = getCurrentFocusedElementIndex(allFocusableChildren, currentFocusedElement);
      currentItemIdx === -1 ? allFocusableChildren[0].focus() : allFocusableChildren[(currentItemIdx - 1 + allFocusableChildren.length) % allFocusableChildren.length].focus();
    }
    function wrapFocusNextFocusableMenuItem(parentElement, currentFocusedElement) {
      let allFocusableChildren = getMenuFocusableDescendants(parentElement), currentItemIdx = getCurrentFocusedElementIndex(allFocusableChildren, currentFocusedElement);
      currentItemIdx === -1 ? allFocusableChildren[0].focus() : allFocusableChildren[(currentItemIdx + 1) % allFocusableChildren.length].focus();
    }
    function getMenuFocusableDescendants(element) {
      return element.querySelectorAll(MENUITEM_FOCUSABLE_SELECTORS);
    }
    function getCurrentFocusedElementIndex(allFocusableChildren, currentFocusedElement) {
      let currentItemIdx = 0;
      for (let focusableChild of allFocusableChildren) {
        if (focusableChild === currentFocusedElement)
          break;
        currentItemIdx++;
      }
      return currentItemIdx === allFocusableChildren.length ? -1 : currentItemIdx;
    }
    function matches(node, selector) {
      if (node.matches)
        return node.matches(selector);
      let matches2 = (node.ownerDocument || document).querySelectorAll(selector), i = matches2.length;
      for (; --i >= 0 && matches2.item(i) !== node; )
        return i > -1;
    }
    exports.findFirstFocusableNode = findFirstFocusableNode;
    exports.findFirstFocusableNodeIncludingDisabled = findFirstFocusableNodeIncludingDisabled;
    exports.findFirstKeyboardFocusableNode = findFirstKeyboardFocusableNode;
    exports.findLastKeyboardFocusableNode = findLastKeyboardFocusableNode;
    exports.focusFirstFocusableNode = focusFirstFocusableNode;
    exports.focusFirstKeyboardFocusableNode = focusFirstKeyboardFocusableNode;
    exports.focusLastKeyboardFocusableNode = focusLastKeyboardFocusableNode;
    exports.focusNextFocusableNode = focusNextFocusableNode;
    exports.handleMouseUpByBlurring = handleMouseUpByBlurring;
    exports.nextFocusableNode = nextFocusableNode;
    exports.wrapFocusNextFocusableMenuItem = wrapFocusNextFocusableMenuItem;
    exports.wrapFocusPreviousFocusableMenuItem = wrapFocusPreviousFocusableMenuItem;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Button/Button.css.js
var require_Button_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Button/Button.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Button: "Polaris-Button",
      disabled: "Polaris-Button--disabled",
      pressed: "Polaris-Button--pressed",
      variantPrimary: "Polaris-Button--variantPrimary",
      variantSecondary: "Polaris-Button--variantSecondary",
      variantTertiary: "Polaris-Button--variantTertiary",
      variantPlain: "Polaris-Button--variantPlain",
      removeUnderline: "Polaris-Button--removeUnderline",
      variantMonochromePlain: "Polaris-Button--variantMonochromePlain",
      toneSuccess: "Polaris-Button--toneSuccess",
      toneCritical: "Polaris-Button--toneCritical",
      sizeMicro: "Polaris-Button--sizeMicro",
      sizeSlim: "Polaris-Button--sizeSlim",
      sizeMedium: "Polaris-Button--sizeMedium",
      sizeLarge: "Polaris-Button--sizeLarge",
      textAlignCenter: "Polaris-Button--textAlignCenter",
      textAlignStart: "Polaris-Button--textAlignStart",
      textAlignLeft: "Polaris-Button--textAlignLeft",
      textAlignEnd: "Polaris-Button--textAlignEnd",
      textAlignRight: "Polaris-Button--textAlignRight",
      fullWidth: "Polaris-Button--fullWidth",
      iconOnly: "Polaris-Button--iconOnly",
      iconWithText: "Polaris-Button--iconWithText",
      disclosure: "Polaris-Button--disclosure",
      loading: "Polaris-Button--loading",
      pressable: "Polaris-Button--pressable",
      hidden: "Polaris-Button--hidden",
      Icon: "Polaris-Button__Icon",
      Spinner: "Polaris-Button__Spinner"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Icon/Icon.css.js
var require_Icon_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Icon/Icon.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Icon: "Polaris-Icon",
      toneInherit: "Polaris-Icon--toneInherit",
      toneBase: "Polaris-Icon--toneBase",
      toneSubdued: "Polaris-Icon--toneSubdued",
      toneCaution: "Polaris-Icon--toneCaution",
      toneWarning: "Polaris-Icon--toneWarning",
      toneCritical: "Polaris-Icon--toneCritical",
      toneInteractive: "Polaris-Icon--toneInteractive",
      toneInfo: "Polaris-Icon--toneInfo",
      toneSuccess: "Polaris-Icon--toneSuccess",
      tonePrimary: "Polaris-Icon--tonePrimary",
      toneEmphasis: "Polaris-Icon--toneEmphasis",
      toneMagic: "Polaris-Icon--toneMagic",
      toneTextCaution: "Polaris-Icon--toneTextCaution",
      toneTextWarning: "Polaris-Icon--toneTextWarning",
      toneTextCritical: "Polaris-Icon--toneTextCritical",
      toneTextInfo: "Polaris-Icon--toneTextInfo",
      toneTextPrimary: "Polaris-Icon--toneTextPrimary",
      toneTextSuccess: "Polaris-Icon--toneTextSuccess",
      toneTextMagic: "Polaris-Icon--toneTextMagic",
      Svg: "Polaris-Icon__Svg",
      Img: "Polaris-Icon__Img",
      Placeholder: "Polaris-Icon__Placeholder"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Text/Text.css.js
var require_Text_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Text/Text.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      root: "Polaris-Text--root",
      block: "Polaris-Text--block",
      truncate: "Polaris-Text--truncate",
      visuallyHidden: "Polaris-Text--visuallyHidden",
      start: "Polaris-Text--start",
      center: "Polaris-Text--center",
      end: "Polaris-Text--end",
      justify: "Polaris-Text--justify",
      base: "Polaris-Text--base",
      inherit: "Polaris-Text--inherit",
      disabled: "Polaris-Text--disabled",
      success: "Polaris-Text--success",
      critical: "Polaris-Text--critical",
      caution: "Polaris-Text--caution",
      subdued: "Polaris-Text--subdued",
      magic: "Polaris-Text--magic",
      "magic-subdued": "Polaris-Text__magic--subdued",
      "text-inverse": "Polaris-Text__text--inverse",
      "text-inverse-secondary": "Polaris-Text--textInverseSecondary",
      headingXs: "Polaris-Text--headingXs",
      headingSm: "Polaris-Text--headingSm",
      headingMd: "Polaris-Text--headingMd",
      headingLg: "Polaris-Text--headingLg",
      headingXl: "Polaris-Text--headingXl",
      heading2xl: "Polaris-Text--heading2xl",
      heading3xl: "Polaris-Text--heading3xl",
      bodyXs: "Polaris-Text--bodyXs",
      bodySm: "Polaris-Text--bodySm",
      bodyMd: "Polaris-Text--bodyMd",
      bodyLg: "Polaris-Text--bodyLg",
      regular: "Polaris-Text--regular",
      medium: "Polaris-Text--medium",
      semibold: "Polaris-Text--semibold",
      bold: "Polaris-Text--bold",
      break: "Polaris-Text--break",
      numeric: "Polaris-Text--numeric",
      "line-through": "Polaris-Text__line--through"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Text/Text.js
var require_Text = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Text/Text.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Text_module = require_Text_css(), deprecatedVariants = {
      heading3xl: "heading2xl"
    }, Text3 = ({
      alignment,
      as,
      breakWord,
      children,
      tone,
      fontWeight,
      id,
      numeric = !1,
      truncate = !1,
      variant,
      visuallyHidden = !1,
      textDecorationLine
    }) => {
      variant && Object.prototype.hasOwnProperty.call(deprecatedVariants, variant) && console.warn(`Deprecation: <Text variant="${variant}" />. The value "${variant}" will be removed in a future major version of Polaris. Use "${deprecatedVariants[variant]}" instead.`);
      let Component = as || (visuallyHidden ? "span" : "p"), className = css.classNames(Text_module.default.root, variant && Text_module.default[variant], fontWeight && Text_module.default[fontWeight], (alignment || truncate) && Text_module.default.block, alignment && Text_module.default[alignment], breakWord && Text_module.default.break, tone && Text_module.default[tone], numeric && Text_module.default.numeric, truncate && Text_module.default.truncate, visuallyHidden && Text_module.default.visuallyHidden, textDecorationLine && Text_module.default[textDecorationLine]);
      return /* @__PURE__ */ React2.createElement(Component, Object.assign({
        className
      }, id && {
        id
      }), children);
    };
    exports.Text = Text3;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Icon/Icon.js
var require_Icon = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Icon/Icon.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), breakpoints = require_breakpoints(), Icon_module = require_Icon_css(), Text3 = require_Text();
    function Icon2({
      source,
      tone,
      accessibilityLabel
    }) {
      let sourceType;
      typeof source == "function" ? sourceType = "function" : source === "placeholder" ? sourceType = "placeholder" : sourceType = "external", tone && sourceType === "external" && console.warn("Recoloring external SVGs is not supported. Set the intended color on your SVG instead.");
      let className = css.classNames(Icon_module.default.Icon, tone && Icon_module.default[css.variationName("tone", tone)]), {
        mdDown
      } = breakpoints.useBreakpoints(), SourceComponent = source, contentMarkup = {
        function: /* @__PURE__ */ React2.createElement(SourceComponent, Object.assign({
          className: Icon_module.default.Svg,
          focusable: "false",
          "aria-hidden": "true"
          // On Mobile we're scaling the viewBox to 18x18 to make the icons bigger
          // Also, we're setting the viewport origin to 1x1 to center the icon
          // We use this syntax so we don't override the existing viewBox value if we don't need to.
        }, mdDown ? {
          viewBox: "1 1 18 18"
        } : {})),
        placeholder: /* @__PURE__ */ React2.createElement("div", {
          className: Icon_module.default.Placeholder
        }),
        external: /* @__PURE__ */ React2.createElement("img", {
          className: Icon_module.default.Img,
          src: `data:image/svg+xml;utf8,${source}`,
          alt: "",
          "aria-hidden": "true"
        })
      };
      return /* @__PURE__ */ React2.createElement("span", {
        className
      }, accessibilityLabel && /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        visuallyHidden: !0
      }, accessibilityLabel), contentMarkup[sourceType]);
    }
    exports.Icon = Icon2;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Spinner/Spinner.css.js
var require_Spinner_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Spinner/Spinner.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Spinner: "Polaris-Spinner",
      sizeSmall: "Polaris-Spinner--sizeSmall",
      sizeLarge: "Polaris-Spinner--sizeLarge"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Spinner/Spinner.js
var require_Spinner = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Spinner/Spinner.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), useIsAfterInitialMount = require_use_is_after_initial_mount(), Spinner_module = require_Spinner_css(), Text3 = require_Text();
    function Spinner2({
      size = "large",
      accessibilityLabel,
      hasFocusableParent
    }) {
      let isAfterInitialMount = useIsAfterInitialMount.useIsAfterInitialMount(), className = css.classNames(Spinner_module.default.Spinner, size && Spinner_module.default[css.variationName("size", size)]), spinnerSVGMarkup = size === "large" ? /* @__PURE__ */ React2.createElement("svg", {
        viewBox: "0 0 44 44",
        xmlns: "http://www.w3.org/2000/svg"
      }, /* @__PURE__ */ React2.createElement("path", {
        d: "M15.542 1.487A21.507 21.507 0 00.5 22c0 11.874 9.626 21.5 21.5 21.5 9.847 0 18.364-6.675 20.809-16.072a1.5 1.5 0 00-2.904-.756C37.803 34.755 30.473 40.5 22 40.5 11.783 40.5 3.5 32.217 3.5 22c0-8.137 5.3-15.247 12.942-17.65a1.5 1.5 0 10-.9-2.863z"
      })) : /* @__PURE__ */ React2.createElement("svg", {
        viewBox: "0 0 20 20",
        xmlns: "http://www.w3.org/2000/svg"
      }, /* @__PURE__ */ React2.createElement("path", {
        d: "M7.229 1.173a9.25 9.25 0 1011.655 11.412 1.25 1.25 0 10-2.4-.698 6.75 6.75 0 11-8.506-8.329 1.25 1.25 0 10-.75-2.385z"
      })), spanAttributes = {
        ...!hasFocusableParent && {
          role: "status"
        }
      }, accessibilityLabelMarkup = (isAfterInitialMount || !hasFocusableParent) && /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        visuallyHidden: !0
      }, accessibilityLabel);
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("span", {
        className
      }, spinnerSVGMarkup), /* @__PURE__ */ React2.createElement("span", spanAttributes, accessibilityLabelMarkup));
    }
    exports.Spinner = Spinner2;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-disable-interaction.js
var require_use_disable_interaction = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-disable-interaction.js"(exports) {
    "use strict";
    var React2 = require_react();
    function useDisableClick(disabled, handleClick) {
      let handleClickWrapper = React2.useCallback((event) => {
        disabled && (event.preventDefault(), event.stopPropagation());
      }, [disabled]);
      return disabled ? handleClickWrapper : handleClick;
    }
    exports.useDisableClick = useDisableClick;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/link/hooks.js
var require_hooks = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/link/hooks.js"(exports) {
    "use strict";
    var React2 = require_react(), context = require_context5();
    function useLink() {
      return React2.useContext(context.LinkContext);
    }
    exports.useLink = useLink;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/UnstyledLink/UnstyledLink.js
var require_UnstyledLink = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/UnstyledLink/UnstyledLink.js"(exports) {
    "use strict";
    var React2 = require_react(), shared = require_shared(), hooks = require_hooks(), UnstyledLink = /* @__PURE__ */ React2.memo(/* @__PURE__ */ React2.forwardRef(function(props, _ref) {
      let LinkComponent = hooks.useLink();
      if (LinkComponent)
        return /* @__PURE__ */ React2.createElement(LinkComponent, Object.assign({}, shared.unstyled.props, props, {
          ref: _ref
        }));
      let {
        external,
        url,
        target: targetProp,
        ...rest
      } = props, target;
      external ? target = "_blank" : target = targetProp ?? void 0;
      let rel = target === "_blank" ? "noopener noreferrer" : void 0;
      return /* @__PURE__ */ React2.createElement("a", Object.assign({
        target
      }, rest, {
        href: url,
        rel
      }, shared.unstyled.props, {
        ref: _ref
      }));
    }));
    exports.UnstyledLink = UnstyledLink;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/UnstyledButton/UnstyledButton.js
var require_UnstyledButton = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/UnstyledButton/UnstyledButton.js"(exports) {
    "use strict";
    var React2 = require_react(), focus = require_focus(), useDisableInteraction = require_use_disable_interaction(), UnstyledLink = require_UnstyledLink();
    function UnstyledButton({
      id,
      children,
      className,
      url,
      external,
      target,
      download,
      submit,
      disabled,
      loading,
      pressed,
      accessibilityLabel,
      role,
      ariaControls,
      ariaExpanded,
      ariaDescribedBy,
      ariaChecked,
      onClick,
      onFocus,
      onBlur,
      onKeyDown,
      onKeyPress,
      onKeyUp,
      onMouseEnter,
      onTouchStart,
      ...rest
    }) {
      let buttonMarkup, commonProps = {
        id,
        className,
        "aria-label": accessibilityLabel
      }, interactiveProps = {
        ...commonProps,
        role,
        onClick,
        onFocus,
        onBlur,
        onMouseUp: focus.handleMouseUpByBlurring,
        onMouseEnter,
        onTouchStart
      }, handleClick = useDisableInteraction.useDisableClick(disabled, onClick);
      return url ? buttonMarkup = disabled ? (
        // Render an `<a>` so toggling disabled/enabled state changes only the
        // `href` attribute instead of replacing the whole element.
        /* @__PURE__ */ React2.createElement("a", commonProps, children)
      ) : /* @__PURE__ */ React2.createElement(UnstyledLink.UnstyledLink, Object.assign({}, interactiveProps, {
        url,
        external,
        target,
        download
      }, rest), children) : buttonMarkup = /* @__PURE__ */ React2.createElement("button", Object.assign({}, interactiveProps, {
        "aria-disabled": disabled,
        type: submit ? "submit" : "button",
        "aria-busy": loading ? !0 : void 0,
        "aria-controls": ariaControls,
        "aria-expanded": ariaExpanded,
        "aria-describedby": ariaDescribedBy,
        "aria-checked": ariaChecked,
        "aria-pressed": pressed,
        onKeyDown,
        onKeyUp,
        onKeyPress,
        onClick: handleClick,
        tabIndex: disabled ? -1 : void 0
      }, rest), children), buttonMarkup;
    }
    exports.UnstyledButton = UnstyledButton;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/errors.js
var require_errors = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/errors.js"(exports) {
    "use strict";
    var MissingAppProviderError = class extends Error {
      constructor(message = "") {
        super(`${message && `${message} `}Your application must be wrapped in an <AppProvider> component. See https://polaris.shopify.com/components/app-provider for implementation instructions.`), this.name = "MissingAppProviderError";
      }
    };
    exports.MissingAppProviderError = MissingAppProviderError;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/i18n/hooks.js
var require_hooks2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/i18n/hooks.js"(exports) {
    "use strict";
    var React2 = require_react(), errors = require_errors(), context = require_context2();
    function useI18n() {
      let i18n = React2.useContext(context.I18nContext);
      if (!i18n)
        throw new errors.MissingAppProviderError("No i18n was provided.");
      return i18n;
    }
    exports.useI18n = useI18n;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Button/Button.js
var require_Button = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Button/Button.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), breakpoints = require_breakpoints(), css = require_css(), focus = require_focus(), Button_module = require_Button_css(), Icon2 = require_Icon(), Spinner2 = require_Spinner(), UnstyledButton = require_UnstyledButton(), hooks = require_hooks2(), Text3 = require_Text();
    function Button3({
      id,
      children,
      url,
      disabled,
      external,
      download,
      target,
      submit,
      loading,
      pressed,
      accessibilityLabel,
      role,
      ariaControls,
      ariaExpanded,
      ariaDescribedBy,
      ariaChecked,
      onClick,
      onFocus,
      onBlur,
      onKeyDown,
      onKeyPress,
      onKeyUp,
      onMouseEnter,
      onTouchStart,
      onPointerDown,
      icon,
      disclosure,
      removeUnderline,
      size = "medium",
      textAlign = "center",
      fullWidth,
      dataPrimaryLink,
      tone,
      variant = "secondary"
    }) {
      let i18n = hooks.useI18n(), isDisabled = disabled || loading, {
        mdUp
      } = breakpoints.useBreakpoints(), className = css.classNames(Button_module.default.Button, Button_module.default.pressable, Button_module.default[css.variationName("variant", variant)], Button_module.default[css.variationName("size", size)], Button_module.default[css.variationName("textAlign", textAlign)], fullWidth && Button_module.default.fullWidth, disclosure && Button_module.default.disclosure, icon && children && Button_module.default.iconWithText, icon && children == null && Button_module.default.iconOnly, isDisabled && Button_module.default.disabled, loading && Button_module.default.loading, pressed && !disabled && !url && Button_module.default.pressed, removeUnderline && Button_module.default.removeUnderline, tone && Button_module.default[css.variationName("tone", tone)]), disclosureMarkup = disclosure ? /* @__PURE__ */ React2.createElement("span", {
        className: loading ? Button_module.default.hidden : Button_module.default.Icon
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: loading ? "placeholder" : getDisclosureIconSource(disclosure, polarisIcons.ChevronUpIcon, polarisIcons.ChevronDownIcon)
      })) : null, iconSource = isIconSource(icon) ? /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: loading ? "placeholder" : icon
      }) : icon, iconMarkup = iconSource ? /* @__PURE__ */ React2.createElement("span", {
        className: loading ? Button_module.default.hidden : Button_module.default.Icon
      }, iconSource) : null, hasPlainText = ["plain", "monochromePlain"].includes(variant), textFontWeight = "medium";
      hasPlainText ? textFontWeight = "regular" : variant === "primary" && (textFontWeight = mdUp ? "medium" : "semibold");
      let textVariant = "bodySm";
      (size === "large" || hasPlainText && size !== "micro") && (textVariant = "bodyMd");
      let childMarkup = children ? /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: textVariant,
        fontWeight: textFontWeight,
        key: disabled ? "text-disabled" : "text"
      }, children) : null, spinnerSVGMarkup = loading ? /* @__PURE__ */ React2.createElement("span", {
        className: Button_module.default.Spinner
      }, /* @__PURE__ */ React2.createElement(Spinner2.Spinner, {
        size: "small",
        accessibilityLabel: i18n.translate("Polaris.Button.spinnerAccessibilityLabel")
      })) : null, commonProps = {
        id,
        className,
        accessibilityLabel,
        ariaDescribedBy,
        role,
        onClick,
        onFocus,
        onBlur,
        onMouseUp: focus.handleMouseUpByBlurring,
        onMouseEnter,
        onTouchStart,
        "data-primary-link": dataPrimaryLink
      }, linkProps = {
        url,
        external,
        download,
        target
      }, actionProps = {
        submit,
        disabled: isDisabled,
        loading,
        ariaControls,
        ariaExpanded,
        ariaChecked,
        pressed,
        onKeyDown,
        onKeyUp,
        onKeyPress,
        onPointerDown
      };
      return /* @__PURE__ */ React2.createElement(UnstyledButton.UnstyledButton, Object.assign({}, commonProps, linkProps, actionProps), spinnerSVGMarkup, iconMarkup, childMarkup, disclosureMarkup);
    }
    function isIconSource(x) {
      return typeof x == "string" || typeof x == "object" && x.body || typeof x == "function";
    }
    function getDisclosureIconSource(disclosure, upIcon, downIcon) {
      return disclosure === "select" ? polarisIcons.SelectIcon : disclosure === "up" ? upIcon : downIcon;
    }
    exports.Button = Button3;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Button/utils.js
var require_utils = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Button/utils.js"(exports) {
    "use strict";
    var React2 = require_react(), Button3 = require_Button();
    function buttonsFrom(actions, overrides = {}) {
      return Array.isArray(actions) ? actions.map((action8, index) => buttonFrom(action8, overrides, index)) : buttonFrom(actions, overrides);
    }
    function buttonFrom({
      content,
      onAction,
      plain,
      destructive,
      ...action8
    }, overrides, key) {
      let plainVariant = plain ? "plain" : void 0, destructiveVariant = destructive ? "primary" : void 0, tone = !overrides?.tone && destructive ? "critical" : overrides?.tone;
      return /* @__PURE__ */ React2.createElement(Button3.Button, Object.assign({
        key,
        onClick: onAction,
        tone,
        variant: plainVariant || destructiveVariant
      }, action8, overrides), content);
    }
    exports.buttonFrom = buttonFrom;
    exports.buttonsFrom = buttonsFrom;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ShadowBevel/ShadowBevel.css.js
var require_ShadowBevel_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ShadowBevel/ShadowBevel.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ShadowBevel: "Polaris-ShadowBevel"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ShadowBevel/ShadowBevel.js
var require_ShadowBevel = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ShadowBevel/ShadowBevel.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), ShadowBevel_module = require_ShadowBevel_css();
    function ShadowBevel(props) {
      let {
        as = "div",
        bevel = !0,
        borderRadius,
        boxShadow,
        children,
        zIndex = "0"
      } = props, Component = as;
      return /* @__PURE__ */ React2.createElement(Component, {
        className: ShadowBevel_module.default.ShadowBevel,
        style: {
          "--pc-shadow-bevel-z-index": zIndex,
          ...css.getResponsiveValue("shadow-bevel", "content", mapResponsiveProp(bevel, (bevel2) => bevel2 ? '""' : "none")),
          ...css.getResponsiveValue("shadow-bevel", "box-shadow", mapResponsiveProp(bevel, (bevel2) => bevel2 ? `var(--p-shadow-${boxShadow})` : "none")),
          ...css.getResponsiveValue("shadow-bevel", "border-radius", mapResponsiveProp(bevel, (bevel2) => bevel2 ? `var(--p-border-radius-${borderRadius})` : "var(--p-border-radius-0)"))
        }
      }, children);
    }
    function mapResponsiveProp(responsiveProp, callback) {
      return typeof responsiveProp == "boolean" ? callback(responsiveProp) : Object.fromEntries(Object.entries(responsiveProp).map(([breakpointsAlias, value]) => [breakpointsAlias, callback(value)]));
    }
    exports.ShadowBevel = ShadowBevel;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Box/Box.css.js
var require_Box_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Box/Box.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      listReset: "Polaris-Box--listReset",
      Box: "Polaris-Box",
      visuallyHidden: "Polaris-Box--visuallyHidden",
      printHidden: "Polaris-Box--printHidden"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Box/Box.js
var require_Box = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Box/Box.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Box_module = require_Box_css(), Box3 = /* @__PURE__ */ React2.forwardRef(({
      as = "div",
      background,
      borderColor,
      borderStyle,
      borderWidth,
      borderBlockStartWidth,
      borderBlockEndWidth,
      borderInlineStartWidth,
      borderInlineEndWidth,
      borderRadius,
      borderEndStartRadius,
      borderEndEndRadius,
      borderStartStartRadius,
      borderStartEndRadius,
      children,
      color,
      id,
      minHeight,
      minWidth,
      maxWidth,
      overflowX,
      overflowY,
      outlineColor,
      outlineStyle,
      outlineWidth,
      padding,
      paddingBlock,
      paddingBlockStart,
      paddingBlockEnd,
      paddingInline,
      paddingInlineStart,
      paddingInlineEnd,
      role,
      shadow,
      tabIndex,
      width,
      printHidden,
      visuallyHidden,
      position,
      insetBlockStart,
      insetBlockEnd,
      insetInlineStart,
      insetInlineEnd,
      zIndex,
      opacity,
      ...restProps
    }, ref) => {
      let borderStyleValue = borderStyle || (borderColor || borderWidth || borderBlockStartWidth || borderBlockEndWidth || borderInlineStartWidth || borderInlineEndWidth ? "solid" : void 0), outlineStyleValue = outlineStyle || (outlineColor || outlineWidth ? "solid" : void 0), style = {
        "--pc-box-color": color ? `var(--p-color-${color})` : void 0,
        "--pc-box-background": background ? `var(--p-color-${background})` : void 0,
        // eslint-disable-next-line no-nested-ternary
        "--pc-box-border-color": borderColor ? borderColor === "transparent" ? "transparent" : `var(--p-color-${borderColor})` : void 0,
        "--pc-box-border-style": borderStyleValue,
        "--pc-box-border-radius": borderRadius ? `var(--p-border-radius-${borderRadius})` : void 0,
        "--pc-box-border-end-start-radius": borderEndStartRadius ? `var(--p-border-radius-${borderEndStartRadius})` : void 0,
        "--pc-box-border-end-end-radius": borderEndEndRadius ? `var(--p-border-radius-${borderEndEndRadius})` : void 0,
        "--pc-box-border-start-start-radius": borderStartStartRadius ? `var(--p-border-radius-${borderStartStartRadius})` : void 0,
        "--pc-box-border-start-end-radius": borderStartEndRadius ? `var(--p-border-radius-${borderStartEndRadius})` : void 0,
        "--pc-box-border-width": borderWidth ? `var(--p-border-width-${borderWidth})` : void 0,
        "--pc-box-border-block-start-width": borderBlockStartWidth ? `var(--p-border-width-${borderBlockStartWidth})` : void 0,
        "--pc-box-border-block-end-width": borderBlockEndWidth ? `var(--p-border-width-${borderBlockEndWidth})` : void 0,
        "--pc-box-border-inline-start-width": borderInlineStartWidth ? `var(--p-border-width-${borderInlineStartWidth})` : void 0,
        "--pc-box-border-inline-end-width": borderInlineEndWidth ? `var(--p-border-width-${borderInlineEndWidth})` : void 0,
        "--pc-box-min-height": minHeight,
        "--pc-box-min-width": minWidth,
        "--pc-box-max-width": maxWidth,
        "--pc-box-outline-color": outlineColor ? `var(--p-color-${outlineColor})` : void 0,
        "--pc-box-outline-style": outlineStyleValue,
        "--pc-box-outline-width": outlineWidth ? `var(--p-border-width-${outlineWidth})` : void 0,
        "--pc-box-overflow-x": overflowX,
        "--pc-box-overflow-y": overflowY,
        ...css.getResponsiveProps("box", "padding-block-start", "space", paddingBlockStart || paddingBlock || padding),
        ...css.getResponsiveProps("box", "padding-block-end", "space", paddingBlockEnd || paddingBlock || padding),
        ...css.getResponsiveProps("box", "padding-inline-start", "space", paddingInlineStart || paddingInline || padding),
        ...css.getResponsiveProps("box", "padding-inline-end", "space", paddingInlineEnd || paddingInline || padding),
        "--pc-box-shadow": shadow ? `var(--p-shadow-${shadow})` : void 0,
        "--pc-box-width": width,
        position,
        "--pc-box-inset-block-start": insetBlockStart ? `var(--p-space-${insetBlockStart})` : void 0,
        "--pc-box-inset-block-end": insetBlockEnd ? `var(--p-space-${insetBlockEnd})` : void 0,
        "--pc-box-inset-inline-start": insetInlineStart ? `var(--p-space-${insetInlineStart})` : void 0,
        "--pc-box-inset-inline-end": insetInlineEnd ? `var(--p-space-${insetInlineEnd})` : void 0,
        zIndex,
        opacity
      }, className = css.classNames(Box_module.default.Box, visuallyHidden && Box_module.default.visuallyHidden, printHidden && Box_module.default.printHidden, as === "ul" && Box_module.default.listReset);
      return /* @__PURE__ */ React2.createElement(as, {
        className,
        id,
        ref,
        style: css.sanitizeCustomProperties(style),
        role,
        tabIndex,
        ...restProps
      }, children);
    });
    Box3.displayName = "Box";
    exports.Box = Box3;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Card/Card.js
var require_Card = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Card/Card.js"(exports) {
    "use strict";
    var React2 = require_react(), breakpoints = require_breakpoints(), withinContentContext = require_within_content_context(), ShadowBevel = require_ShadowBevel(), Box3 = require_Box(), Card3 = ({
      children,
      background = "bg-surface",
      padding = {
        xs: "400"
      },
      roundedAbove = "sm"
    }) => {
      let breakpoints$1 = breakpoints.useBreakpoints(), defaultBorderRadius = "300", hasBorderRadius = Boolean(breakpoints$1[`${roundedAbove}Up`]);
      return /* @__PURE__ */ React2.createElement(withinContentContext.WithinContentContext.Provider, {
        value: !0
      }, /* @__PURE__ */ React2.createElement(ShadowBevel.ShadowBevel, {
        boxShadow: "100",
        borderRadius: hasBorderRadius ? defaultBorderRadius : "0",
        zIndex: "32"
      }, /* @__PURE__ */ React2.createElement(Box3.Box, {
        background,
        padding,
        overflowX: "clip",
        overflowY: "clip",
        minHeight: "100%"
      }, children)));
    };
    exports.Card = Card3;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SettingAction/SettingAction.css.js
var require_SettingAction_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SettingAction/SettingAction.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      SettingAction: "Polaris-SettingAction",
      Setting: "Polaris-SettingAction__Setting",
      Action: "Polaris-SettingAction__Action"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SettingAction/SettingAction.js
var require_SettingAction = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SettingAction/SettingAction.js"(exports) {
    "use strict";
    var React2 = require_react(), SettingAction_module = require_SettingAction_css();
    function SettingAction({
      action: action8,
      children
    }) {
      return /* @__PURE__ */ React2.createElement("div", {
        className: SettingAction_module.default.SettingAction
      }, /* @__PURE__ */ React2.createElement("div", {
        className: SettingAction_module.default.Setting
      }, children), /* @__PURE__ */ React2.createElement("div", {
        className: SettingAction_module.default.Action
      }, action8));
    }
    exports.SettingAction = SettingAction;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/InlineStack/InlineStack.css.js
var require_InlineStack_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/InlineStack/InlineStack.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      InlineStack: "Polaris-InlineStack"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/InlineStack/InlineStack.js
var require_InlineStack = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/InlineStack/InlineStack.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), InlineStack_module = require_InlineStack_css(), InlineStack3 = function({
      as: Element2 = "div",
      align,
      direction = "row",
      blockAlign,
      gap,
      wrap = !0,
      children
    }) {
      let style = {
        "--pc-inline-stack-align": align,
        "--pc-inline-stack-block-align": blockAlign,
        "--pc-inline-stack-wrap": wrap ? "wrap" : "nowrap",
        ...css.getResponsiveProps("inline-stack", "gap", "space", gap),
        ...css.getResponsiveValue("inline-stack", "flex-direction", direction)
      };
      return /* @__PURE__ */ React2.createElement(Element2, {
        className: InlineStack_module.default.InlineStack,
        style
      }, children);
    };
    exports.InlineStack = InlineStack3;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/BlockStack/BlockStack.css.js
var require_BlockStack_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/BlockStack/BlockStack.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      BlockStack: "Polaris-BlockStack",
      listReset: "Polaris-BlockStack--listReset",
      fieldsetReset: "Polaris-BlockStack--fieldsetReset"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/BlockStack/BlockStack.js
var require_BlockStack = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/BlockStack/BlockStack.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), BlockStack_module = require_BlockStack_css(), BlockStack3 = ({
      as = "div",
      children,
      align,
      inlineAlign,
      gap,
      id,
      reverseOrder = !1,
      ...restProps
    }) => {
      let className = css.classNames(BlockStack_module.default.BlockStack, (as === "ul" || as === "ol") && BlockStack_module.default.listReset, as === "fieldset" && BlockStack_module.default.fieldsetReset), style = {
        "--pc-block-stack-align": align ? `${align}` : null,
        "--pc-block-stack-inline-align": inlineAlign ? `${inlineAlign}` : null,
        "--pc-block-stack-order": reverseOrder ? "column-reverse" : "column",
        ...css.getResponsiveProps("block-stack", "gap", "space", gap)
      };
      return /* @__PURE__ */ React2.createElement(as, {
        className,
        id,
        style: css.sanitizeCustomProperties(style),
        ...restProps
      }, children);
    };
    exports.BlockStack = BlockStack3;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Avatar/Avatar.css.js
var require_Avatar_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Avatar/Avatar.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Avatar: "Polaris-Avatar",
      imageHasLoaded: "Polaris-Avatar--imageHasLoaded",
      Text: "Polaris-Avatar__Text",
      long: "Polaris-Avatar--long",
      hidden: "Polaris-Avatar--hidden",
      sizeXs: "Polaris-Avatar--sizeXs",
      sizeSm: "Polaris-Avatar--sizeSm",
      sizeMd: "Polaris-Avatar--sizeMd",
      sizeLg: "Polaris-Avatar--sizeLg",
      sizeXl: "Polaris-Avatar--sizeXl",
      styleOne: "Polaris-Avatar--styleOne",
      styleTwo: "Polaris-Avatar--styleTwo",
      styleThree: "Polaris-Avatar--styleThree",
      styleFour: "Polaris-Avatar--styleFour",
      styleFive: "Polaris-Avatar--styleFive",
      styleSix: "Polaris-Avatar--styleSix",
      styleSeven: "Polaris-Avatar--styleSeven",
      Image: "Polaris-Avatar__Image",
      Initials: "Polaris-Avatar__Initials",
      Svg: "Polaris-Avatar__Svg"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Image/Image.js
var require_Image = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Image/Image.js"(exports) {
    "use strict";
    var React2 = require_react();
    function Image({
      alt,
      sourceSet,
      source,
      crossOrigin,
      onLoad,
      className,
      ...rest
    }) {
      let finalSourceSet = sourceSet ? sourceSet.map(({
        source: subSource,
        descriptor
      }) => `${subSource} ${descriptor}`).join(",") : null, handleLoad = React2.useCallback(() => {
        onLoad && onLoad();
      }, [onLoad]);
      return /* @__PURE__ */ React2.createElement("img", Object.assign({
        alt,
        src: source,
        crossOrigin,
        className,
        onLoad: handleLoad
      }, finalSourceSet ? {
        srcSet: finalSourceSet
      } : {}, rest));
    }
    exports.Image = Image;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Avatar/Avatar.js
var require_Avatar = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Avatar/Avatar.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), useIsAfterInitialMount = require_use_is_after_initial_mount(), Avatar_module = require_Avatar_css(), hooks = require_hooks2(), Image = require_Image(), Status;
    (function(Status2) {
      Status2.Pending = "PENDING", Status2.Loaded = "LOADED", Status2.Errored = "ERRORED";
    })(Status || (Status = {}));
    var STYLE_CLASSES = ["one", "two", "three", "four", "five", "six", "seven"], avatarStrokeWidth = {
      xs: "3",
      sm: "2.5",
      md: "2.5",
      lg: "2.5",
      xl: "2"
    };
    function xorHash(str) {
      let hash = 0;
      for (let char of str)
        hash ^= char.charCodeAt(0);
      return hash;
    }
    function styleClass(name) {
      return name ? STYLE_CLASSES[xorHash(name) % STYLE_CLASSES.length] : STYLE_CLASSES[0];
    }
    function Avatar({
      name,
      source,
      onError,
      initials,
      customer,
      size = "md",
      accessibilityLabel
    }) {
      let i18n = hooks.useI18n(), isAfterInitialMount = useIsAfterInitialMount.useIsAfterInitialMount(), [status, setStatus] = React2.useState(Status.Pending);
      React2.useEffect(() => {
        setStatus(Status.Pending);
      }, [source]);
      let handleError = React2.useCallback(() => {
        setStatus(Status.Errored), onError && onError();
      }, [onError]), handleLoad = React2.useCallback(() => {
        setStatus(Status.Loaded);
      }, []), hasImage = source && status !== Status.Errored, nameString = name || initials, label;
      if (accessibilityLabel)
        label = accessibilityLabel;
      else if (name)
        label = name;
      else if (initials) {
        let splitInitials = initials.split("").join(" ");
        label = i18n.translate("Polaris.Avatar.labelWithInitials", {
          initials: splitInitials
        });
      }
      let className = css.classNames(Avatar_module.default.Avatar, size && Avatar_module.default[css.variationName("size", size)], hasImage && status === Status.Loaded && Avatar_module.default.imageHasLoaded, !customer && !hasImage && Avatar_module.default[css.variationName("style", styleClass(nameString))]), textClassName = css.classNames(Avatar_module.default.Text, (initials?.length || 0) > 2 && Avatar_module.default.long), imageClassName = css.classNames(Avatar_module.default.Image, status !== Status.Loaded && Avatar_module.default.hidden), imageMarkUp = source && isAfterInitialMount && status !== Status.Errored ? /* @__PURE__ */ React2.createElement(Image.Image, {
        className: imageClassName,
        source,
        alt: "",
        role: "presentation",
        onLoad: handleLoad,
        onError: handleError
      }) : null, verticalOffset = "0.35em", avatarPath = /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("path", {
        fill: "none",
        d: "M25.5 13.5C25.5 16.5376 23.0376 19 20 19C16.9624 19 14.5 16.5376 14.5 13.5C14.5 10.4624 16.9624 8 20 8C23.0376 8 25.5 10.4624 25.5 13.5Z",
        stroke: "currentColor",
        strokeWidth: avatarStrokeWidth[size]
      }), /* @__PURE__ */ React2.createElement("path", {
        fill: "none",
        d: "M10.3433 29.682L9.47 31.254C9.03481 32.0373 9.60125 33 10.4974 33H29.5026C30.3988 33 30.9652 32.0373 30.53 31.254L29.6567 29.682C27.7084 26.175 24.0119 24 20 24C15.9882 24 12.2916 26.175 10.3433 29.682Z",
        stroke: "currentColor",
        strokeWidth: avatarStrokeWidth[size],
        strokeLinecap: "round",
        strokeLinejoin: "round"
      })), avatarBody = customer || !initials ? avatarPath : /* @__PURE__ */ React2.createElement("text", {
        className: textClassName,
        x: "50%",
        y: "50%",
        dy: verticalOffset,
        fill: "currentColor",
        textAnchor: "middle"
      }, initials), svgMarkup = hasImage ? null : /* @__PURE__ */ React2.createElement("span", {
        className: Avatar_module.default.Initials
      }, /* @__PURE__ */ React2.createElement("svg", {
        className: Avatar_module.default.Svg,
        viewBox: "0 0 40 40"
      }, avatarBody));
      return /* @__PURE__ */ React2.createElement("span", {
        "aria-label": label,
        role: label ? "img" : "presentation",
        className
      }, svgMarkup, imageMarkUp);
    }
    exports.Avatar = Avatar;
    exports.STYLE_CLASSES = STYLE_CLASSES;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/AccountConnection/AccountConnection.js
var require_AccountConnection = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/AccountConnection/AccountConnection.js"(exports) {
    "use strict";
    var React2 = require_react(), breakpoints = require_breakpoints(), utils = require_utils(), Card3 = require_Card(), SettingAction = require_SettingAction(), InlineStack3 = require_InlineStack(), BlockStack3 = require_BlockStack(), Avatar = require_Avatar(), Box3 = require_Box(), Text3 = require_Text();
    function AccountConnection({
      connected = !1,
      action: action8,
      avatarUrl,
      accountName = "",
      title,
      details,
      termsOfService
    }) {
      let breakpoints$1 = breakpoints.useBreakpoints(), initials = accountName ? accountName.split(/\s+/).map((name) => name[0]).join("") : void 0, avatarMarkup = connected ? /* @__PURE__ */ React2.createElement("span", null, /* @__PURE__ */ React2.createElement(Avatar.Avatar, {
        accessibilityLabel: "",
        name: accountName,
        initials,
        source: avatarUrl
      })) : null, titleContent = title || accountName, titleMarkup = /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "h2",
        variant: "headingSm"
      }, titleContent), detailsMarkup = details ? /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "bodyMd",
        tone: "subdued"
      }, details) : null, termsOfServiceMarkup = termsOfService ? /* @__PURE__ */ React2.createElement(Box3.Box, {
        paddingBlockStart: breakpoints$1.mdUp ? "400" : "500"
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "bodyMd"
      }, termsOfService)) : null, actionElement = action8 ? utils.buttonFrom(action8, {
        variant: connected ? void 0 : "primary"
      }) : null;
      return /* @__PURE__ */ React2.createElement(Card3.Card, null, /* @__PURE__ */ React2.createElement(SettingAction.SettingAction, {
        action: actionElement
      }, /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        gap: "400"
      }, avatarMarkup, /* @__PURE__ */ React2.createElement(BlockStack3.BlockStack, {
        gap: "100"
      }, titleMarkup, detailsMarkup))), termsOfServiceMarkup);
    }
    exports.AccountConnection = AccountConnection;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/FilterActionsProvider/FilterActionsProvider.js
var require_FilterActionsProvider = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/FilterActionsProvider/FilterActionsProvider.js"(exports) {
    "use strict";
    var React2 = require_react(), FilterActionsContext = /* @__PURE__ */ React2.createContext(!1);
    function FilterActionsProvider({
      children,
      filterActions
    }) {
      return /* @__PURE__ */ React2.createElement(FilterActionsContext.Provider, {
        value: filterActions
      }, children);
    }
    exports.FilterActionsContext = FilterActionsContext;
    exports.FilterActionsProvider = FilterActionsProvider;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionList/ActionList.css.js
var require_ActionList_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionList/ActionList.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Item: "Polaris-ActionList__Item",
      default: "Polaris-ActionList--default",
      active: "Polaris-ActionList--active",
      destructive: "Polaris-ActionList--destructive",
      disabled: "Polaris-ActionList--disabled",
      Prefix: "Polaris-ActionList__Prefix",
      Suffix: "Polaris-ActionList__Suffix",
      indented: "Polaris-ActionList--indented",
      menu: "Polaris-ActionList--menu",
      Text: "Polaris-ActionList__Text"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/within-filter-context.js
var require_within_filter_context = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/within-filter-context.js"(exports) {
    "use strict";
    var React2 = require_react(), WithinFilterContext = /* @__PURE__ */ React2.createContext(!1);
    exports.WithinFilterContext = WithinFilterContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Badge/Badge.css.js
var require_Badge_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Badge/Badge.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Badge: "Polaris-Badge",
      toneSuccess: "Polaris-Badge--toneSuccess",
      "toneSuccess-strong": "Polaris-Badge__toneSuccess--strong",
      toneInfo: "Polaris-Badge--toneInfo",
      "toneInfo-strong": "Polaris-Badge__toneInfo--strong",
      toneAttention: "Polaris-Badge--toneAttention",
      "toneAttention-strong": "Polaris-Badge__toneAttention--strong",
      toneWarning: "Polaris-Badge--toneWarning",
      "toneWarning-strong": "Polaris-Badge__toneWarning--strong",
      toneCritical: "Polaris-Badge--toneCritical",
      "toneCritical-strong": "Polaris-Badge__toneCritical--strong",
      toneNew: "Polaris-Badge--toneNew",
      toneMagic: "Polaris-Badge--toneMagic",
      "toneRead-only": "Polaris-Badge__toneRead--only",
      toneEnabled: "Polaris-Badge--toneEnabled",
      sizeLarge: "Polaris-Badge--sizeLarge",
      withinFilter: "Polaris-Badge--withinFilter",
      Icon: "Polaris-Badge__Icon",
      PipContainer: "Polaris-Badge__PipContainer"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Badge/types.js
var require_types2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Badge/types.js"(exports) {
    "use strict";
    exports.ToneValue = void 0;
    (function(ToneValue) {
      ToneValue.Info = "info", ToneValue.Success = "success", ToneValue.Warning = "warning", ToneValue.Critical = "critical", ToneValue.Attention = "attention", ToneValue.New = "new", ToneValue.Magic = "magic", ToneValue.InfoStrong = "info-strong", ToneValue.SuccessStrong = "success-strong", ToneValue.WarningStrong = "warning-strong", ToneValue.CriticalStrong = "critical-strong", ToneValue.AttentionStrong = "attention-strong", ToneValue.ReadOnly = "read-only", ToneValue.Enabled = "enabled";
    })(exports.ToneValue || (exports.ToneValue = {}));
    exports.ProgressValue = void 0;
    (function(ProgressValue) {
      ProgressValue.Incomplete = "incomplete", ProgressValue.PartiallyComplete = "partiallyComplete", ProgressValue.Complete = "complete";
    })(exports.ProgressValue || (exports.ProgressValue = {}));
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Badge/utils.js
var require_utils2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Badge/utils.js"(exports) {
    "use strict";
    var types = require_types2();
    function getDefaultAccessibilityLabel(i18n, progress, tone) {
      let progressLabel = "", toneLabel = "";
      if (!progress && !tone)
        return "";
      switch (progress) {
        case types.ProgressValue.Incomplete:
          progressLabel = i18n.translate("Polaris.Badge.PROGRESS_LABELS.incomplete");
          break;
        case types.ProgressValue.PartiallyComplete:
          progressLabel = i18n.translate("Polaris.Badge.PROGRESS_LABELS.partiallyComplete");
          break;
        case types.ProgressValue.Complete:
          progressLabel = i18n.translate("Polaris.Badge.PROGRESS_LABELS.complete");
          break;
      }
      switch (tone) {
        case types.ToneValue.Info:
        case types.ToneValue.InfoStrong:
          toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.info");
          break;
        case types.ToneValue.Success:
        case types.ToneValue.SuccessStrong:
          toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.success");
          break;
        case types.ToneValue.Warning:
        case types.ToneValue.WarningStrong:
          toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.warning");
          break;
        case types.ToneValue.Critical:
        case types.ToneValue.CriticalStrong:
          toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.critical");
          break;
        case types.ToneValue.Attention:
        case types.ToneValue.AttentionStrong:
          toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.attention");
          break;
        case types.ToneValue.New:
          toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.new");
          break;
        case types.ToneValue.ReadOnly:
          toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.readOnly");
          break;
        case types.ToneValue.Enabled:
          toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.enabled");
          break;
      }
      return !tone && progress ? progressLabel : tone && !progress ? toneLabel : i18n.translate("Polaris.Badge.progressAndTone", {
        progressLabel,
        toneLabel
      });
    }
    exports.getDefaultAccessibilityLabel = getDefaultAccessibilityLabel;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Badge/components/Pip/Pip.css.js
var require_Pip_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Badge/components/Pip/Pip.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Pip: "Polaris-Badge-Pip",
      toneInfo: "Polaris-Badge-Pip--toneInfo",
      toneSuccess: "Polaris-Badge-Pip--toneSuccess",
      toneNew: "Polaris-Badge-Pip--toneNew",
      toneAttention: "Polaris-Badge-Pip--toneAttention",
      toneWarning: "Polaris-Badge-Pip--toneWarning",
      toneCritical: "Polaris-Badge-Pip--toneCritical",
      progressIncomplete: "Polaris-Badge-Pip--progressIncomplete",
      progressPartiallyComplete: "Polaris-Badge-Pip--progressPartiallyComplete",
      progressComplete: "Polaris-Badge-Pip--progressComplete"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Badge/components/Pip/Pip.js
var require_Pip = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Badge/components/Pip/Pip.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), utils = require_utils2(), Pip_module = require_Pip_css(), hooks = require_hooks2(), Text3 = require_Text();
    function Pip({
      tone,
      progress = "complete",
      accessibilityLabelOverride
    }) {
      let i18n = hooks.useI18n(), className = css.classNames(Pip_module.default.Pip, tone && Pip_module.default[css.variationName("tone", tone)], progress && Pip_module.default[css.variationName("progress", progress)]), accessibilityLabel = accessibilityLabelOverride || utils.getDefaultAccessibilityLabel(i18n, progress, tone);
      return /* @__PURE__ */ React2.createElement("span", {
        className
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        visuallyHidden: !0
      }, accessibilityLabel));
    }
    exports.Pip = Pip;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Badge/Badge.js
var require_Badge = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Badge/Badge.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), withinFilterContext = require_within_filter_context(), Badge_module = require_Badge_css(), utils = require_utils2(), Pip = require_Pip(), hooks = require_hooks2(), Icon2 = require_Icon(), Text3 = require_Text(), DEFAULT_SIZE = "medium", progressIconMap = {
      complete: () => /* @__PURE__ */ React2.createElement("svg", {
        viewBox: "0 0 20 20"
      }, /* @__PURE__ */ React2.createElement("path", {
        d: "M6 10c0-.93 0-1.395.102-1.776a3 3 0 0 1 2.121-2.122C8.605 6 9.07 6 10 6c.93 0 1.395 0 1.776.102a3 3 0 0 1 2.122 2.122C14 8.605 14 9.07 14 10s0 1.395-.102 1.777a3 3 0 0 1-2.122 2.12C11.395 14 10.93 14 10 14s-1.395 0-1.777-.102a3 3 0 0 1-2.12-2.121C6 11.395 6 10.93 6 10Z"
      })),
      partiallyComplete: () => /* @__PURE__ */ React2.createElement("svg", {
        viewBox: "0 0 20 20"
      }, /* @__PURE__ */ React2.createElement("path", {
        fillRule: "evenodd",
        d: "m8.888 6.014-.017-.018-.02.02c-.253.013-.45.038-.628.086a3 3 0 0 0-2.12 2.122C6 8.605 6 9.07 6 10s0 1.395.102 1.777a3 3 0 0 0 2.121 2.12C8.605 14 9.07 14 10 14c.93 0 1.395 0 1.776-.102a3 3 0 0 0 2.122-2.121C14 11.395 14 10.93 14 10c0-.93 0-1.395-.102-1.776a3 3 0 0 0-2.122-2.122C11.395 6 10.93 6 10 6c-.475 0-.829 0-1.112.014ZM8.446 7.34a1.75 1.75 0 0 0-1.041.94l4.314 4.315c.443-.2.786-.576.941-1.042L8.446 7.34Zm4.304 2.536L10.124 7.25c.908.001 1.154.013 1.329.06a1.75 1.75 0 0 1 1.237 1.237c.047.175.059.42.06 1.329ZM8.547 12.69c.182.05.442.06 1.453.06h.106L7.25 9.894V10c0 1.01.01 1.27.06 1.453a1.75 1.75 0 0 0 1.237 1.237Z"
      })),
      incomplete: () => /* @__PURE__ */ React2.createElement("svg", {
        viewBox: "0 0 20 20"
      }, /* @__PURE__ */ React2.createElement("path", {
        fillRule: "evenodd",
        d: "M8.547 12.69c.183.05.443.06 1.453.06s1.27-.01 1.453-.06a1.75 1.75 0 0 0 1.237-1.237c.05-.182.06-.443.06-1.453s-.01-1.27-.06-1.453a1.75 1.75 0 0 0-1.237-1.237c-.182-.05-.443-.06-1.453-.06s-1.27.01-1.453.06A1.75 1.75 0 0 0 7.31 8.547c-.05.183-.06.443-.06 1.453s.01 1.27.06 1.453a1.75 1.75 0 0 0 1.237 1.237ZM6.102 8.224C6 8.605 6 9.07 6 10s0 1.395.102 1.777a3 3 0 0 0 2.122 2.12C8.605 14 9.07 14 10 14s1.395 0 1.777-.102a3 3 0 0 0 2.12-2.121C14 11.395 14 10.93 14 10c0-.93 0-1.395-.102-1.776a3 3 0 0 0-2.121-2.122C11.395 6 10.93 6 10 6c-.93 0-1.395 0-1.776.102a3 3 0 0 0-2.122 2.122Z"
      }))
    };
    function Badge3({
      children,
      tone,
      progress,
      icon,
      size = DEFAULT_SIZE,
      toneAndProgressLabelOverride
    }) {
      let i18n = hooks.useI18n(), withinFilter = React2.useContext(withinFilterContext.WithinFilterContext), className = css.classNames(Badge_module.default.Badge, tone && Badge_module.default[css.variationName("tone", tone)], size && size !== DEFAULT_SIZE && Badge_module.default[css.variationName("size", size)], withinFilter && Badge_module.default.withinFilter), accessibilityLabel = toneAndProgressLabelOverride || utils.getDefaultAccessibilityLabel(i18n, progress, tone), accessibilityMarkup = Boolean(accessibilityLabel) && /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        visuallyHidden: !0
      }, accessibilityLabel);
      return progress && !icon && (accessibilityMarkup = /* @__PURE__ */ React2.createElement("span", {
        className: Badge_module.default.Icon
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        accessibilityLabel,
        source: progressIconMap[progress]
      }))), /* @__PURE__ */ React2.createElement("span", {
        className
      }, accessibilityMarkup, icon && /* @__PURE__ */ React2.createElement("span", {
        className: Badge_module.default.Icon
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: icon
      })), children && /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "bodySm",
        fontWeight: tone === "new" ? "medium" : void 0
      }, children));
    }
    Badge3.Pip = Pip.Pip;
    exports.Badge = Badge3;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-toggle.js
var require_use_toggle = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-toggle.js"(exports) {
    "use strict";
    var React2 = require_react();
    function useToggle(initialState) {
      let [value, setState] = React2.useState(initialState);
      return {
        value,
        toggle: React2.useCallback(() => setState((state) => !state), []),
        setTrue: React2.useCallback(() => setState(!0), []),
        setFalse: React2.useCallback(() => setState(!1), [])
      };
    }
    exports.useToggle = useToggle;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tooltip/Tooltip.css.js
var require_Tooltip_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tooltip/Tooltip.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      TooltipContainer: "Polaris-Tooltip__TooltipContainer",
      HasUnderline: "Polaris-Tooltip__HasUnderline"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/ephemeral-presence-manager/hooks.js
var require_hooks3 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/ephemeral-presence-manager/hooks.js"(exports) {
    "use strict";
    var React2 = require_react(), context = require_context9();
    function useEphemeralPresenceManager() {
      let ephemeralPresenceManager = React2.useContext(context.EphemeralPresenceManagerContext);
      if (!ephemeralPresenceManager)
        throw new Error("No ephemeral presence manager was provided. Your application must be wrapped in an <AppProvider> component. See https://polaris.shopify.com/components/app-provider for implementation instructions.");
      return ephemeralPresenceManager;
    }
    function useReadOnlyEphemeralPresenceManager() {
      let {
        presenceList,
        presenceCounter
      } = useEphemeralPresenceManager();
      return {
        presenceList,
        presenceCounter
      };
    }
    exports.useEphemeralPresenceManager = useEphemeralPresenceManager;
    exports.useReadOnlyEphemeralPresenceManager = useReadOnlyEphemeralPresenceManager;
  }
});

// node_modules/scheduler/cjs/scheduler.development.js
var require_scheduler_development = __commonJS({
  "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
    "use strict";
    (function() {
      "use strict";
      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      var enableSchedulerDebugging = !1, enableProfiling = !1, frameYieldMs = 5;
      function push(heap, node) {
        var index = heap.length;
        heap.push(node), siftUp(heap, node, index);
      }
      function peek(heap) {
        return heap.length === 0 ? null : heap[0];
      }
      function pop(heap) {
        if (heap.length === 0)
          return null;
        var first = heap[0], last = heap.pop();
        return last !== first && (heap[0] = last, siftDown(heap, last, 0)), first;
      }
      function siftUp(heap, node, i) {
        for (var index = i; index > 0; ) {
          var parentIndex = index - 1 >>> 1, parent = heap[parentIndex];
          if (compare(parent, node) > 0)
            heap[parentIndex] = node, heap[index] = parent, index = parentIndex;
          else
            return;
        }
      }
      function siftDown(heap, node, i) {
        for (var index = i, length = heap.length, halfLength = length >>> 1; index < halfLength; ) {
          var leftIndex = (index + 1) * 2 - 1, left = heap[leftIndex], rightIndex = leftIndex + 1, right = heap[rightIndex];
          if (compare(left, node) < 0)
            rightIndex < length && compare(right, left) < 0 ? (heap[index] = right, heap[rightIndex] = node, index = rightIndex) : (heap[index] = left, heap[leftIndex] = node, index = leftIndex);
          else if (rightIndex < length && compare(right, node) < 0)
            heap[index] = right, heap[rightIndex] = node, index = rightIndex;
          else
            return;
        }
      }
      function compare(a, b) {
        var diff = a.sortIndex - b.sortIndex;
        return diff !== 0 ? diff : a.id - b.id;
      }
      var ImmediatePriority = 1, UserBlockingPriority = 2, NormalPriority = 3, LowPriority = 4, IdlePriority = 5;
      function markTaskErrored(task, ms) {
      }
      var hasPerformanceNow = typeof performance == "object" && typeof performance.now == "function";
      if (hasPerformanceNow) {
        var localPerformance = performance;
        exports.unstable_now = function() {
          return localPerformance.now();
        };
      } else {
        var localDate = Date, initialTime = localDate.now();
        exports.unstable_now = function() {
          return localDate.now() - initialTime;
        };
      }
      var maxSigned31BitInt = 1073741823, IMMEDIATE_PRIORITY_TIMEOUT = -1, USER_BLOCKING_PRIORITY_TIMEOUT = 250, NORMAL_PRIORITY_TIMEOUT = 5e3, LOW_PRIORITY_TIMEOUT = 1e4, IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt, taskQueue = [], timerQueue = [], taskIdCounter = 1, currentTask = null, currentPriorityLevel = NormalPriority, isPerformingWork = !1, isHostCallbackScheduled = !1, isHostTimeoutScheduled = !1, localSetTimeout = typeof setTimeout == "function" ? setTimeout : null, localClearTimeout = typeof clearTimeout == "function" ? clearTimeout : null, localSetImmediate = typeof setImmediate < "u" ? setImmediate : null, isInputPending = typeof navigator < "u" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
      function advanceTimers(currentTime) {
        for (var timer = peek(timerQueue); timer !== null; ) {
          if (timer.callback === null)
            pop(timerQueue);
          else if (timer.startTime <= currentTime)
            pop(timerQueue), timer.sortIndex = timer.expirationTime, push(taskQueue, timer);
          else
            return;
          timer = peek(timerQueue);
        }
      }
      function handleTimeout(currentTime) {
        if (isHostTimeoutScheduled = !1, advanceTimers(currentTime), !isHostCallbackScheduled)
          if (peek(taskQueue) !== null)
            isHostCallbackScheduled = !0, requestHostCallback(flushWork);
          else {
            var firstTimer = peek(timerQueue);
            firstTimer !== null && requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
          }
      }
      function flushWork(hasTimeRemaining, initialTime2) {
        isHostCallbackScheduled = !1, isHostTimeoutScheduled && (isHostTimeoutScheduled = !1, cancelHostTimeout()), isPerformingWork = !0;
        var previousPriorityLevel = currentPriorityLevel;
        try {
          if (enableProfiling)
            try {
              return workLoop(hasTimeRemaining, initialTime2);
            } catch (error) {
              if (currentTask !== null) {
                var currentTime = exports.unstable_now();
                currentTask.isQueued = !1;
              }
              throw error;
            }
          else
            return workLoop(hasTimeRemaining, initialTime2);
        } finally {
          currentTask = null, currentPriorityLevel = previousPriorityLevel, isPerformingWork = !1;
        }
      }
      function workLoop(hasTimeRemaining, initialTime2) {
        var currentTime = initialTime2;
        for (advanceTimers(currentTime), currentTask = peek(taskQueue); currentTask !== null && !enableSchedulerDebugging && !(currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())); ) {
          var callback = currentTask.callback;
          if (typeof callback == "function") {
            currentTask.callback = null, currentPriorityLevel = currentTask.priorityLevel;
            var didUserCallbackTimeout = currentTask.expirationTime <= currentTime, continuationCallback = callback(didUserCallbackTimeout);
            currentTime = exports.unstable_now(), typeof continuationCallback == "function" ? currentTask.callback = continuationCallback : currentTask === peek(taskQueue) && pop(taskQueue), advanceTimers(currentTime);
          } else
            pop(taskQueue);
          currentTask = peek(taskQueue);
        }
        if (currentTask !== null)
          return !0;
        var firstTimer = peek(timerQueue);
        return firstTimer !== null && requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime), !1;
      }
      function unstable_runWithPriority(priorityLevel, eventHandler) {
        switch (priorityLevel) {
          case ImmediatePriority:
          case UserBlockingPriority:
          case NormalPriority:
          case LowPriority:
          case IdlePriority:
            break;
          default:
            priorityLevel = NormalPriority;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      }
      function unstable_next(eventHandler) {
        var priorityLevel;
        switch (currentPriorityLevel) {
          case ImmediatePriority:
          case UserBlockingPriority:
          case NormalPriority:
            priorityLevel = NormalPriority;
            break;
          default:
            priorityLevel = currentPriorityLevel;
            break;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      }
      function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = parentPriorityLevel;
          try {
            return callback.apply(this, arguments);
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        };
      }
      function unstable_scheduleCallback(priorityLevel, callback, options) {
        var currentTime = exports.unstable_now(), startTime2;
        if (typeof options == "object" && options !== null) {
          var delay = options.delay;
          typeof delay == "number" && delay > 0 ? startTime2 = currentTime + delay : startTime2 = currentTime;
        } else
          startTime2 = currentTime;
        var timeout;
        switch (priorityLevel) {
          case ImmediatePriority:
            timeout = IMMEDIATE_PRIORITY_TIMEOUT;
            break;
          case UserBlockingPriority:
            timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
            break;
          case IdlePriority:
            timeout = IDLE_PRIORITY_TIMEOUT;
            break;
          case LowPriority:
            timeout = LOW_PRIORITY_TIMEOUT;
            break;
          case NormalPriority:
          default:
            timeout = NORMAL_PRIORITY_TIMEOUT;
            break;
        }
        var expirationTime = startTime2 + timeout, newTask = {
          id: taskIdCounter++,
          callback,
          priorityLevel,
          startTime: startTime2,
          expirationTime,
          sortIndex: -1
        };
        return startTime2 > currentTime ? (newTask.sortIndex = startTime2, push(timerQueue, newTask), peek(taskQueue) === null && newTask === peek(timerQueue) && (isHostTimeoutScheduled ? cancelHostTimeout() : isHostTimeoutScheduled = !0, requestHostTimeout(handleTimeout, startTime2 - currentTime))) : (newTask.sortIndex = expirationTime, push(taskQueue, newTask), !isHostCallbackScheduled && !isPerformingWork && (isHostCallbackScheduled = !0, requestHostCallback(flushWork))), newTask;
      }
      function unstable_pauseExecution() {
      }
      function unstable_continueExecution() {
        !isHostCallbackScheduled && !isPerformingWork && (isHostCallbackScheduled = !0, requestHostCallback(flushWork));
      }
      function unstable_getFirstCallbackNode() {
        return peek(taskQueue);
      }
      function unstable_cancelCallback(task) {
        task.callback = null;
      }
      function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
      }
      var isMessageLoopRunning = !1, scheduledHostCallback = null, taskTimeoutID = -1, frameInterval = frameYieldMs, startTime = -1;
      function shouldYieldToHost() {
        var timeElapsed = exports.unstable_now() - startTime;
        return !(timeElapsed < frameInterval);
      }
      function requestPaint() {
      }
      function forceFrameRate(fps) {
        if (fps < 0 || fps > 125) {
          console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
          return;
        }
        fps > 0 ? frameInterval = Math.floor(1e3 / fps) : frameInterval = frameYieldMs;
      }
      var performWorkUntilDeadline = function() {
        if (scheduledHostCallback !== null) {
          var currentTime = exports.unstable_now();
          startTime = currentTime;
          var hasTimeRemaining = !0, hasMoreWork = !0;
          try {
            hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
          } finally {
            hasMoreWork ? schedulePerformWorkUntilDeadline() : (isMessageLoopRunning = !1, scheduledHostCallback = null);
          }
        } else
          isMessageLoopRunning = !1;
      }, schedulePerformWorkUntilDeadline;
      if (typeof localSetImmediate == "function")
        schedulePerformWorkUntilDeadline = function() {
          localSetImmediate(performWorkUntilDeadline);
        };
      else if (typeof MessageChannel < "u") {
        var channel = new MessageChannel(), port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline, schedulePerformWorkUntilDeadline = function() {
          port.postMessage(null);
        };
      } else
        schedulePerformWorkUntilDeadline = function() {
          localSetTimeout(performWorkUntilDeadline, 0);
        };
      function requestHostCallback(callback) {
        scheduledHostCallback = callback, isMessageLoopRunning || (isMessageLoopRunning = !0, schedulePerformWorkUntilDeadline());
      }
      function requestHostTimeout(callback, ms) {
        taskTimeoutID = localSetTimeout(function() {
          callback(exports.unstable_now());
        }, ms);
      }
      function cancelHostTimeout() {
        localClearTimeout(taskTimeoutID), taskTimeoutID = -1;
      }
      var unstable_requestPaint = requestPaint, unstable_Profiling = null;
      exports.unstable_IdlePriority = IdlePriority, exports.unstable_ImmediatePriority = ImmediatePriority, exports.unstable_LowPriority = LowPriority, exports.unstable_NormalPriority = NormalPriority, exports.unstable_Profiling = unstable_Profiling, exports.unstable_UserBlockingPriority = UserBlockingPriority, exports.unstable_cancelCallback = unstable_cancelCallback, exports.unstable_continueExecution = unstable_continueExecution, exports.unstable_forceFrameRate = forceFrameRate, exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel, exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode, exports.unstable_next = unstable_next, exports.unstable_pauseExecution = unstable_pauseExecution, exports.unstable_requestPaint = unstable_requestPaint, exports.unstable_runWithPriority = unstable_runWithPriority, exports.unstable_scheduleCallback = unstable_scheduleCallback, exports.unstable_shouldYield = shouldYieldToHost, exports.unstable_wrapCallback = unstable_wrapCallback, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
    })();
  }
});

// node_modules/scheduler/index.js
var require_scheduler = __commonJS({
  "node_modules/scheduler/index.js"(exports, module2) {
    "use strict";
    module2.exports = require_scheduler_development();
  }
});

// node_modules/react-dom/cjs/react-dom.development.js
var require_react_dom_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
    "use strict";
    (function() {
      "use strict";
      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      var React2 = require_react(), Scheduler = require_scheduler(), ReactSharedInternals = React2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, suppressWarning = !1;
      function setSuppressWarning(newSuppressWarning) {
        suppressWarning = newSuppressWarning;
      }
      function warn(format) {
        if (!suppressWarning) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)
            args[_key - 1] = arguments[_key];
          printWarning("warn", format, args);
        }
      }
      function error(format) {
        if (!suppressWarning) {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)
            args[_key2 - 1] = arguments[_key2];
          printWarning("error", format, args);
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame, stack = ReactDebugCurrentFrame2.getStackAddendum();
          stack !== "" && (format += "%s", args = args.concat([stack]));
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format), Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var FunctionComponent = 0, ClassComponent = 1, IndeterminateComponent = 2, HostRoot = 3, HostPortal = 4, HostComponent = 5, HostText = 6, Fragment3 = 7, Mode = 8, ContextConsumer = 9, ContextProvider = 10, ForwardRef = 11, Profiler = 12, SuspenseComponent = 13, MemoComponent = 14, SimpleMemoComponent = 15, LazyComponent = 16, IncompleteClassComponent = 17, DehydratedFragment = 18, SuspenseListComponent = 19, ScopeComponent = 21, OffscreenComponent = 22, LegacyHiddenComponent = 23, CacheComponent = 24, TracingMarkerComponent = 25, enableClientRenderFallbackOnTextMismatch = !0, enableNewReconciler = !1, enableLazyContextPropagation = !1, enableLegacyHidden = !1, enableSuspenseAvoidThisFallback = !1, disableCommentsAsDOMContainers = !0, enableCustomElementPropertySupport = !1, warnAboutStringRefs = !0, enableSchedulingProfiler = !0, enableProfilerTimer = !0, enableProfilerCommitHooks = !0, allNativeEvents = /* @__PURE__ */ new Set(), registrationNameDependencies = {}, possibleRegistrationNames = {};
      function registerTwoPhaseEvent(registrationName, dependencies) {
        registerDirectEvent(registrationName, dependencies), registerDirectEvent(registrationName + "Capture", dependencies);
      }
      function registerDirectEvent(registrationName, dependencies) {
        registrationNameDependencies[registrationName] && error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName), registrationNameDependencies[registrationName] = dependencies;
        {
          var lowerCasedName = registrationName.toLowerCase();
          possibleRegistrationNames[lowerCasedName] = registrationName, registrationName === "onDoubleClick" && (possibleRegistrationNames.ondblclick = registrationName);
        }
        for (var i = 0; i < dependencies.length; i++)
          allNativeEvents.add(dependencies[i]);
      }
      var canUseDOM = typeof window < "u" && typeof window.document < "u" && typeof window.document.createElement < "u", hasOwnProperty = Object.prototype.hasOwnProperty;
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol == "function" && Symbol.toStringTag, type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        try {
          return testStringCoercion(value), !1;
        } catch {
          return !0;
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkAttributeStringCoercion(value, attributeName) {
        if (willCoercionThrow(value))
          return error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value)), testStringCoercion(value);
      }
      function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value))
          return error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
      }
      function checkPropStringCoercion(value, propName) {
        if (willCoercionThrow(value))
          return error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value)), testStringCoercion(value);
      }
      function checkCSSPropertyStringCoercion(value, propName) {
        if (willCoercionThrow(value))
          return error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value)), testStringCoercion(value);
      }
      function checkHtmlStringCoercion(value) {
        if (willCoercionThrow(value))
          return error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
      }
      function checkFormFieldValueStringCoercion(value) {
        if (willCoercionThrow(value))
          return error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
      }
      var RESERVED = 0, STRING = 1, BOOLEANISH_STRING = 2, BOOLEAN = 3, OVERLOADED_BOOLEAN = 4, NUMERIC = 5, POSITIVE_NUMERIC = 6, ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD", ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040", VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$"), illegalAttributeNameCache = {}, validatedAttributeNameCache = {};
      function isAttributeNameSafe(attributeName) {
        return hasOwnProperty.call(validatedAttributeNameCache, attributeName) ? !0 : hasOwnProperty.call(illegalAttributeNameCache, attributeName) ? !1 : VALID_ATTRIBUTE_NAME_REGEX.test(attributeName) ? (validatedAttributeNameCache[attributeName] = !0, !0) : (illegalAttributeNameCache[attributeName] = !0, error("Invalid attribute name: `%s`", attributeName), !1);
      }
      function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
        return propertyInfo !== null ? propertyInfo.type === RESERVED : isCustomComponentTag ? !1 : name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N");
      }
      function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED)
          return !1;
        switch (typeof value) {
          case "function":
          case "symbol":
            return !0;
          case "boolean": {
            if (isCustomComponentTag)
              return !1;
            if (propertyInfo !== null)
              return !propertyInfo.acceptsBooleans;
            var prefix2 = name.toLowerCase().slice(0, 5);
            return prefix2 !== "data-" && prefix2 !== "aria-";
          }
          default:
            return !1;
        }
      }
      function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
        if (value === null || typeof value > "u" || shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag))
          return !0;
        if (isCustomComponentTag)
          return !1;
        if (propertyInfo !== null)
          switch (propertyInfo.type) {
            case BOOLEAN:
              return !value;
            case OVERLOADED_BOOLEAN:
              return value === !1;
            case NUMERIC:
              return isNaN(value);
            case POSITIVE_NUMERIC:
              return isNaN(value) || value < 1;
          }
        return !1;
      }
      function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
      }
      function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN, this.attributeName = attributeName, this.attributeNamespace = attributeNamespace, this.mustUseProperty = mustUseProperty, this.propertyName = name, this.type = type, this.sanitizeURL = sanitizeURL2, this.removeEmptyString = removeEmptyString;
      }
      var properties = {}, reservedProps = [
        "children",
        "dangerouslySetInnerHTML",
        // TODO: This prevents the assignment of defaultValue to regular
        // elements (not just inputs). Now that ReactDOMInput assigns to the
        // defaultValue property -- do we need this?
        "defaultValue",
        "defaultChecked",
        "innerHTML",
        "suppressContentEditableWarning",
        "suppressHydrationWarning",
        "style"
      ];
      reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          RESERVED,
          !1,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      }), [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          // mustUseProperty
          attributeName,
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      }), ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEANISH_STRING,
          !1,
          // mustUseProperty
          name.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      }), ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEANISH_STRING,
          !1,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      }), [
        "allowFullScreen",
        "async",
        // Note: there is a special case that prevents it from being written to the DOM
        // on the client side because the browsers are inconsistent. Instead we call focus().
        "autoFocus",
        "autoPlay",
        "controls",
        "default",
        "defer",
        "disabled",
        "disablePictureInPicture",
        "disableRemotePlayback",
        "formNoValidate",
        "hidden",
        "loop",
        "noModule",
        "noValidate",
        "open",
        "playsInline",
        "readOnly",
        "required",
        "reversed",
        "scoped",
        "seamless",
        // Microdata
        "itemScope"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEAN,
          !1,
          // mustUseProperty
          name.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      }), [
        "checked",
        // Note: `option.selected` is not updated if `select.multiple` is
        // disabled with `removeAttribute`. We have special logic for handling this.
        "multiple",
        "muted",
        "selected"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEAN,
          !0,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      }), [
        "capture",
        "download"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          OVERLOADED_BOOLEAN,
          !1,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      }), [
        "cols",
        "rows",
        "size",
        "span"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          POSITIVE_NUMERIC,
          !1,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      }), ["rowSpan", "start"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          NUMERIC,
          !1,
          // mustUseProperty
          name.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      });
      var CAMELIZE = /[\-\:]([a-z])/g, capitalize = function(token) {
        return token[1].toUpperCase();
      };
      [
        "accent-height",
        "alignment-baseline",
        "arabic-form",
        "baseline-shift",
        "cap-height",
        "clip-path",
        "clip-rule",
        "color-interpolation",
        "color-interpolation-filters",
        "color-profile",
        "color-rendering",
        "dominant-baseline",
        "enable-background",
        "fill-opacity",
        "fill-rule",
        "flood-color",
        "flood-opacity",
        "font-family",
        "font-size",
        "font-size-adjust",
        "font-stretch",
        "font-style",
        "font-variant",
        "font-weight",
        "glyph-name",
        "glyph-orientation-horizontal",
        "glyph-orientation-vertical",
        "horiz-adv-x",
        "horiz-origin-x",
        "image-rendering",
        "letter-spacing",
        "lighting-color",
        "marker-end",
        "marker-mid",
        "marker-start",
        "overline-position",
        "overline-thickness",
        "paint-order",
        "panose-1",
        "pointer-events",
        "rendering-intent",
        "shape-rendering",
        "stop-color",
        "stop-opacity",
        "strikethrough-position",
        "strikethrough-thickness",
        "stroke-dasharray",
        "stroke-dashoffset",
        "stroke-linecap",
        "stroke-linejoin",
        "stroke-miterlimit",
        "stroke-opacity",
        "stroke-width",
        "text-anchor",
        "text-decoration",
        "text-rendering",
        "underline-position",
        "underline-thickness",
        "unicode-bidi",
        "unicode-range",
        "units-per-em",
        "v-alphabetic",
        "v-hanging",
        "v-ideographic",
        "v-mathematical",
        "vector-effect",
        "vert-adv-y",
        "vert-origin-x",
        "vert-origin-y",
        "word-spacing",
        "writing-mode",
        "xmlns:xlink",
        "x-height"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          // mustUseProperty
          attributeName,
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      }), [
        "xlink:actuate",
        "xlink:arcrole",
        "xlink:role",
        "xlink:show",
        "xlink:title",
        "xlink:type"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          // mustUseProperty
          attributeName,
          "http://www.w3.org/1999/xlink",
          !1,
          // sanitizeURL
          !1
        );
      }), [
        "xml:base",
        "xml:lang",
        "xml:space"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          // mustUseProperty
          attributeName,
          "http://www.w3.org/XML/1998/namespace",
          !1,
          // sanitizeURL
          !1
        );
      }), ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(
          attributeName,
          STRING,
          !1,
          // mustUseProperty
          attributeName.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      });
      var xlinkHref = "xlinkHref";
      properties[xlinkHref] = new PropertyInfoRecord(
        "xlinkHref",
        STRING,
        !1,
        // mustUseProperty
        "xlink:href",
        "http://www.w3.org/1999/xlink",
        !0,
        // sanitizeURL
        !1
      ), ["src", "href", "action", "formAction"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(
          attributeName,
          STRING,
          !1,
          // mustUseProperty
          attributeName.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          !0,
          // sanitizeURL
          !0
        );
      });
      var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i, didWarn = !1;
      function sanitizeURL(url) {
        !didWarn && isJavaScriptProtocol.test(url) && (didWarn = !0, error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url)));
      }
      function getValueForProperty(node, name, expected, propertyInfo) {
        if (propertyInfo.mustUseProperty) {
          var propertyName = propertyInfo.propertyName;
          return node[propertyName];
        } else {
          checkAttributeStringCoercion(expected, name), propertyInfo.sanitizeURL && sanitizeURL("" + expected);
          var attributeName = propertyInfo.attributeName, stringValue = null;
          if (propertyInfo.type === OVERLOADED_BOOLEAN) {
            if (node.hasAttribute(attributeName)) {
              var value = node.getAttribute(attributeName);
              return value === "" ? !0 : shouldRemoveAttribute(name, expected, propertyInfo, !1) ? value : value === "" + expected ? expected : value;
            }
          } else if (node.hasAttribute(attributeName)) {
            if (shouldRemoveAttribute(name, expected, propertyInfo, !1))
              return node.getAttribute(attributeName);
            if (propertyInfo.type === BOOLEAN)
              return expected;
            stringValue = node.getAttribute(attributeName);
          }
          return shouldRemoveAttribute(name, expected, propertyInfo, !1) ? stringValue === null ? expected : stringValue : stringValue === "" + expected ? expected : stringValue;
        }
      }
      function getValueForAttribute(node, name, expected, isCustomComponentTag) {
        {
          if (!isAttributeNameSafe(name))
            return;
          if (!node.hasAttribute(name))
            return expected === void 0 ? void 0 : null;
          var value = node.getAttribute(name);
          return checkAttributeStringCoercion(expected, name), value === "" + expected ? expected : value;
        }
      }
      function setValueForProperty(node, name, value, isCustomComponentTag) {
        var propertyInfo = getPropertyInfo(name);
        if (!shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
          if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) && (value = null), isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
              var _attributeName = name;
              value === null ? node.removeAttribute(_attributeName) : (checkAttributeStringCoercion(value, name), node.setAttribute(_attributeName, "" + value));
            }
            return;
          }
          var mustUseProperty = propertyInfo.mustUseProperty;
          if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
              var type = propertyInfo.type;
              node[propertyName] = type === BOOLEAN ? !1 : "";
            } else
              node[propertyName] = value;
            return;
          }
          var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
          if (value === null)
            node.removeAttribute(attributeName);
          else {
            var _type = propertyInfo.type, attributeValue;
            _type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === !0 ? attributeValue = "" : (checkAttributeStringCoercion(value, attributeName), attributeValue = "" + value, propertyInfo.sanitizeURL && sanitizeURL(attributeValue.toString())), attributeNamespace ? node.setAttributeNS(attributeNamespace, attributeName, attributeValue) : node.setAttribute(attributeName, attributeValue);
          }
        }
      }
      var REACT_ELEMENT_TYPE = Symbol.for("react.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_SCOPE_TYPE = Symbol.for("react.scope"), REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode"), REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"), REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden"), REACT_CACHE_TYPE = Symbol.for("react.cache"), REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable != "object")
          return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        return typeof maybeIterator == "function" ? maybeIterator : null;
      }
      var assign = Object.assign, disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = !0;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log, prevInfo = console.info, prevWarn = console.warn, prevError = console.error, prevGroup = console.group, prevGroupCollapsed = console.groupCollapsed, prevGroupEnd = console.groupEnd;
            var props = {
              configurable: !0,
              enumerable: !0,
              value: disabledLog,
              writable: !0
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          if (disabledDepth--, disabledDepth === 0) {
            var props = {
              configurable: !0,
              enumerable: !0,
              writable: !0
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          disabledDepth < 0 && error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, prefix;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix === void 0)
            try {
              throw Error();
            } catch (x) {
              var match = x.stack.trim().match(/\n( *(at )?)/);
              prefix = match && match[1] || "";
            }
          return `
` + prefix + name;
        }
      }
      var reentry = !1, componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap == "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry)
          return "";
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0)
            return frame;
        }
        var control;
        reentry = !0;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current, ReactCurrentDispatcher.current = null, disableLogs();
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            if (Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            }), typeof Reflect == "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack == "string") {
            for (var sampleLines = sample.stack.split(`
`), controlLines = control.stack.split(`
`), s = sampleLines.length - 1, c = controlLines.length - 1; s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]; )
              c--;
            for (; s >= 1 && c >= 0; s--, c--)
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1)
                  do
                    if (s--, c--, c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = `
` + sampleLines[s].replace(" at new ", " at ");
                      return fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName)), typeof fn == "function" && componentFrameCache.set(fn, _frame), _frame;
                    }
                  while (s >= 1 && c >= 0);
                break;
              }
          }
        } finally {
          reentry = !1, ReactCurrentDispatcher.current = previousDispatcher, reenableLogs(), Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "", syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        return typeof fn == "function" && componentFrameCache.set(fn, syntheticFrame), syntheticFrame;
      }
      function describeClassComponentFrame(ctor, source, ownerFn) {
        return describeNativeComponentFrame(ctor, !0);
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, !1);
      }
      function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null)
          return "";
        if (typeof type == "function")
          return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type == "string")
          return describeBuiltInComponentFrame(type);
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch {
              }
            }
          }
        return "";
      }
      function describeFiber(fiber) {
        var owner = fiber._debugOwner ? fiber._debugOwner.type : null, source = fiber._debugSource;
        switch (fiber.tag) {
          case HostComponent:
            return describeBuiltInComponentFrame(fiber.type);
          case LazyComponent:
            return describeBuiltInComponentFrame("Lazy");
          case SuspenseComponent:
            return describeBuiltInComponentFrame("Suspense");
          case SuspenseListComponent:
            return describeBuiltInComponentFrame("SuspenseList");
          case FunctionComponent:
          case IndeterminateComponent:
          case SimpleMemoComponent:
            return describeFunctionComponentFrame(fiber.type);
          case ForwardRef:
            return describeFunctionComponentFrame(fiber.type.render);
          case ClassComponent:
            return describeClassComponentFrame(fiber.type);
          default:
            return "";
        }
      }
      function getStackByFiberInDevAndProd(workInProgress2) {
        try {
          var info = "", node = workInProgress2;
          do
            info += describeFiber(node), node = node.return;
          while (node);
          return info;
        } catch (x) {
          return `
Error generating stack: ` + x.message + `
` + x.stack;
        }
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName)
          return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null)
          return null;
        if (typeof type.tag == "number" && error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof type == "function")
          return type.displayName || type.name || null;
        if (typeof type == "string")
          return type;
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              return outerName !== null ? outerName : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch {
                return null;
              }
            }
          }
        return null;
      }
      function getWrappedName$1(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || "";
        return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
      }
      function getContextName$1(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromFiber(fiber) {
        var tag = fiber.tag, type = fiber.type;
        switch (tag) {
          case CacheComponent:
            return "Cache";
          case ContextConsumer:
            var context = type;
            return getContextName$1(context) + ".Consumer";
          case ContextProvider:
            var provider = type;
            return getContextName$1(provider._context) + ".Provider";
          case DehydratedFragment:
            return "DehydratedFragment";
          case ForwardRef:
            return getWrappedName$1(type, type.render, "ForwardRef");
          case Fragment3:
            return "Fragment";
          case HostComponent:
            return type;
          case HostPortal:
            return "Portal";
          case HostRoot:
            return "Root";
          case HostText:
            return "Text";
          case LazyComponent:
            return getComponentNameFromType(type);
          case Mode:
            return type === REACT_STRICT_MODE_TYPE ? "StrictMode" : "Mode";
          case OffscreenComponent:
            return "Offscreen";
          case Profiler:
            return "Profiler";
          case ScopeComponent:
            return "Scope";
          case SuspenseComponent:
            return "Suspense";
          case SuspenseListComponent:
            return "SuspenseList";
          case TracingMarkerComponent:
            return "TracingMarker";
          case ClassComponent:
          case FunctionComponent:
          case IncompleteClassComponent:
          case IndeterminateComponent:
          case MemoComponent:
          case SimpleMemoComponent:
            if (typeof type == "function")
              return type.displayName || type.name || null;
            if (typeof type == "string")
              return type;
            break;
        }
        return null;
      }
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame, current = null, isRendering = !1;
      function getCurrentFiberOwnerNameInDevOrNull() {
        {
          if (current === null)
            return null;
          var owner = current._debugOwner;
          if (owner !== null && typeof owner < "u")
            return getComponentNameFromFiber(owner);
        }
        return null;
      }
      function getCurrentFiberStackInDev() {
        return current === null ? "" : getStackByFiberInDevAndProd(current);
      }
      function resetCurrentFiber() {
        ReactDebugCurrentFrame.getCurrentStack = null, current = null, isRendering = !1;
      }
      function setCurrentFiber(fiber) {
        ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev, current = fiber, isRendering = !1;
      }
      function getCurrentFiber() {
        return current;
      }
      function setIsRendering(rendering) {
        isRendering = rendering;
      }
      function toString(value) {
        return "" + value;
      }
      function getToStringValue(value) {
        switch (typeof value) {
          case "boolean":
          case "number":
          case "string":
          case "undefined":
            return value;
          case "object":
            return checkFormFieldValueStringCoercion(value), value;
          default:
            return "";
        }
      }
      var hasReadOnlyValue = {
        button: !0,
        checkbox: !0,
        image: !0,
        hidden: !0,
        radio: !0,
        reset: !0,
        submit: !0
      };
      function checkControlledValueProps(tagName, props) {
        hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null || error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`."), props.onChange || props.readOnly || props.disabled || props.checked == null || error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
      }
      function isCheckable(elem) {
        var type = elem.type, nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
      }
      function getTracker(node) {
        return node._valueTracker;
      }
      function detachTracker(node) {
        node._valueTracker = null;
      }
      function getValueFromNode(node) {
        var value = "";
        return node && (isCheckable(node) ? value = node.checked ? "true" : "false" : value = node.value), value;
      }
      function trackValueOnNode(node) {
        var valueField = isCheckable(node) ? "checked" : "value", descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
        checkFormFieldValueStringCoercion(node[valueField]);
        var currentValue = "" + node[valueField];
        if (!(node.hasOwnProperty(valueField) || typeof descriptor > "u" || typeof descriptor.get != "function" || typeof descriptor.set != "function")) {
          var get2 = descriptor.get, set2 = descriptor.set;
          Object.defineProperty(node, valueField, {
            configurable: !0,
            get: function() {
              return get2.call(this);
            },
            set: function(value) {
              checkFormFieldValueStringCoercion(value), currentValue = "" + value, set2.call(this, value);
            }
          }), Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
          });
          var tracker = {
            getValue: function() {
              return currentValue;
            },
            setValue: function(value) {
              checkFormFieldValueStringCoercion(value), currentValue = "" + value;
            },
            stopTracking: function() {
              detachTracker(node), delete node[valueField];
            }
          };
          return tracker;
        }
      }
      function track(node) {
        getTracker(node) || (node._valueTracker = trackValueOnNode(node));
      }
      function updateValueIfChanged(node) {
        if (!node)
          return !1;
        var tracker = getTracker(node);
        if (!tracker)
          return !0;
        var lastValue = tracker.getValue(), nextValue = getValueFromNode(node);
        return nextValue !== lastValue ? (tracker.setValue(nextValue), !0) : !1;
      }
      function getActiveElement(doc) {
        if (doc = doc || (typeof document < "u" ? document : void 0), typeof doc > "u")
          return null;
        try {
          return doc.activeElement || doc.body;
        } catch {
          return doc.body;
        }
      }
      var didWarnValueDefaultValue = !1, didWarnCheckedDefaultChecked = !1, didWarnControlledToUncontrolled = !1, didWarnUncontrolledToControlled = !1;
      function isControlled(props) {
        var usesChecked = props.type === "checkbox" || props.type === "radio";
        return usesChecked ? props.checked != null : props.value != null;
      }
      function getHostProps(element, props) {
        var node = element, checked = props.checked, hostProps = assign({}, props, {
          defaultChecked: void 0,
          defaultValue: void 0,
          value: void 0,
          checked: checked ?? node._wrapperState.initialChecked
        });
        return hostProps;
      }
      function initWrapperState(element, props) {
        checkControlledValueProps("input", props), props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked && (error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type), didWarnCheckedDefaultChecked = !0), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue && (error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type), didWarnValueDefaultValue = !0);
        var node = element, defaultValue = props.defaultValue == null ? "" : props.defaultValue;
        node._wrapperState = {
          initialChecked: props.checked != null ? props.checked : props.defaultChecked,
          initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
          controlled: isControlled(props)
        };
      }
      function updateChecked(element, props) {
        var node = element, checked = props.checked;
        checked != null && setValueForProperty(node, "checked", checked, !1);
      }
      function updateWrapper(element, props) {
        var node = element;
        {
          var controlled = isControlled(props);
          !node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled && (error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components"), didWarnUncontrolledToControlled = !0), node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled && (error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components"), didWarnControlledToUncontrolled = !0);
        }
        updateChecked(element, props);
        var value = getToStringValue(props.value), type = props.type;
        if (value != null)
          type === "number" ? (value === 0 && node.value === "" || // We explicitly want to coerce to number here if possible.
          // eslint-disable-next-line
          node.value != value) && (node.value = toString(value)) : node.value !== toString(value) && (node.value = toString(value));
        else if (type === "submit" || type === "reset") {
          node.removeAttribute("value");
          return;
        }
        props.hasOwnProperty("value") ? setDefaultValue(node, props.type, value) : props.hasOwnProperty("defaultValue") && setDefaultValue(node, props.type, getToStringValue(props.defaultValue)), props.checked == null && props.defaultChecked != null && (node.defaultChecked = !!props.defaultChecked);
      }
      function postMountWrapper(element, props, isHydrating2) {
        var node = element;
        if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
          var type = props.type, isButton = type === "submit" || type === "reset";
          if (isButton && (props.value === void 0 || props.value === null))
            return;
          var initialValue = toString(node._wrapperState.initialValue);
          isHydrating2 || initialValue !== node.value && (node.value = initialValue), node.defaultValue = initialValue;
        }
        var name = node.name;
        name !== "" && (node.name = ""), node.defaultChecked = !node.defaultChecked, node.defaultChecked = !!node._wrapperState.initialChecked, name !== "" && (node.name = name);
      }
      function restoreControlledState(element, props) {
        var node = element;
        updateWrapper(node, props), updateNamedCousins(node, props);
      }
      function updateNamedCousins(rootNode, props) {
        var name = props.name;
        if (props.type === "radio" && name != null) {
          for (var queryRoot = rootNode; queryRoot.parentNode; )
            queryRoot = queryRoot.parentNode;
          checkAttributeStringCoercion(name, "name");
          for (var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]'), i = 0; i < group.length; i++) {
            var otherNode = group[i];
            if (!(otherNode === rootNode || otherNode.form !== rootNode.form)) {
              var otherProps = getFiberCurrentPropsFromNode(otherNode);
              if (!otherProps)
                throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
              updateValueIfChanged(otherNode), updateWrapper(otherNode, otherProps);
            }
          }
        }
      }
      function setDefaultValue(node, type, value) {
        // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
        (type !== "number" || getActiveElement(node.ownerDocument) !== node) && (value == null ? node.defaultValue = toString(node._wrapperState.initialValue) : node.defaultValue !== toString(value) && (node.defaultValue = toString(value)));
      }
      var didWarnSelectedSetOnOption = !1, didWarnInvalidChild = !1, didWarnInvalidInnerHTML = !1;
      function validateProps(element, props) {
        props.value == null && (typeof props.children == "object" && props.children !== null ? React2.Children.forEach(props.children, function(child) {
          child != null && (typeof child == "string" || typeof child == "number" || didWarnInvalidChild || (didWarnInvalidChild = !0, error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.")));
        }) : props.dangerouslySetInnerHTML != null && (didWarnInvalidInnerHTML || (didWarnInvalidInnerHTML = !0, error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.")))), props.selected != null && !didWarnSelectedSetOnOption && (error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."), didWarnSelectedSetOnOption = !0);
      }
      function postMountWrapper$1(element, props) {
        props.value != null && element.setAttribute("value", toString(getToStringValue(props.value)));
      }
      var isArrayImpl = Array.isArray;
      function isArray(a) {
        return isArrayImpl(a);
      }
      var didWarnValueDefaultValue$1;
      didWarnValueDefaultValue$1 = !1;
      function getDeclarationErrorAddendum() {
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        return ownerName ? `

Check the render method of \`` + ownerName + "`." : "";
      }
      var valuePropNames = ["value", "defaultValue"];
      function checkSelectPropTypes(props) {
        {
          checkControlledValueProps("select", props);
          for (var i = 0; i < valuePropNames.length; i++) {
            var propName = valuePropNames[i];
            if (props[propName] != null) {
              var propNameIsArray = isArray(props[propName]);
              props.multiple && !propNameIsArray ? error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum()) : !props.multiple && propNameIsArray && error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
            }
          }
        }
      }
      function updateOptions(node, multiple, propValue, setDefaultSelected) {
        var options2 = node.options;
        if (multiple) {
          for (var selectedValues = propValue, selectedValue = {}, i = 0; i < selectedValues.length; i++)
            selectedValue["$" + selectedValues[i]] = !0;
          for (var _i = 0; _i < options2.length; _i++) {
            var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
            options2[_i].selected !== selected && (options2[_i].selected = selected), selected && setDefaultSelected && (options2[_i].defaultSelected = !0);
          }
        } else {
          for (var _selectedValue = toString(getToStringValue(propValue)), defaultSelected = null, _i2 = 0; _i2 < options2.length; _i2++) {
            if (options2[_i2].value === _selectedValue) {
              options2[_i2].selected = !0, setDefaultSelected && (options2[_i2].defaultSelected = !0);
              return;
            }
            defaultSelected === null && !options2[_i2].disabled && (defaultSelected = options2[_i2]);
          }
          defaultSelected !== null && (defaultSelected.selected = !0);
        }
      }
      function getHostProps$1(element, props) {
        return assign({}, props, {
          value: void 0
        });
      }
      function initWrapperState$1(element, props) {
        var node = element;
        checkSelectPropTypes(props), node._wrapperState = {
          wasMultiple: !!props.multiple
        }, props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1 && (error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components"), didWarnValueDefaultValue$1 = !0);
      }
      function postMountWrapper$2(element, props) {
        var node = element;
        node.multiple = !!props.multiple;
        var value = props.value;
        value != null ? updateOptions(node, !!props.multiple, value, !1) : props.defaultValue != null && updateOptions(node, !!props.multiple, props.defaultValue, !0);
      }
      function postUpdateWrapper(element, props) {
        var node = element, wasMultiple = node._wrapperState.wasMultiple;
        node._wrapperState.wasMultiple = !!props.multiple;
        var value = props.value;
        value != null ? updateOptions(node, !!props.multiple, value, !1) : wasMultiple !== !!props.multiple && (props.defaultValue != null ? updateOptions(node, !!props.multiple, props.defaultValue, !0) : updateOptions(node, !!props.multiple, props.multiple ? [] : "", !1));
      }
      function restoreControlledState$1(element, props) {
        var node = element, value = props.value;
        value != null && updateOptions(node, !!props.multiple, value, !1);
      }
      var didWarnValDefaultVal = !1;
      function getHostProps$2(element, props) {
        var node = element;
        if (props.dangerouslySetInnerHTML != null)
          throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
        var hostProps = assign({}, props, {
          value: void 0,
          defaultValue: void 0,
          children: toString(node._wrapperState.initialValue)
        });
        return hostProps;
      }
      function initWrapperState$2(element, props) {
        var node = element;
        checkControlledValueProps("textarea", props), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal && (error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component"), didWarnValDefaultVal = !0);
        var initialValue = props.value;
        if (initialValue == null) {
          var children = props.children, defaultValue = props.defaultValue;
          if (children != null) {
            error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
            {
              if (defaultValue != null)
                throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
              if (isArray(children)) {
                if (children.length > 1)
                  throw new Error("<textarea> can only have at most one child.");
                children = children[0];
              }
              defaultValue = children;
            }
          }
          defaultValue == null && (defaultValue = ""), initialValue = defaultValue;
        }
        node._wrapperState = {
          initialValue: getToStringValue(initialValue)
        };
      }
      function updateWrapper$1(element, props) {
        var node = element, value = getToStringValue(props.value), defaultValue = getToStringValue(props.defaultValue);
        if (value != null) {
          var newValue = toString(value);
          newValue !== node.value && (node.value = newValue), props.defaultValue == null && node.defaultValue !== newValue && (node.defaultValue = newValue);
        }
        defaultValue != null && (node.defaultValue = toString(defaultValue));
      }
      function postMountWrapper$3(element, props) {
        var node = element, textContent = node.textContent;
        textContent === node._wrapperState.initialValue && textContent !== "" && textContent !== null && (node.value = textContent);
      }
      function restoreControlledState$2(element, props) {
        updateWrapper$1(element, props);
      }
      var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml", MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML", SVG_NAMESPACE = "http://www.w3.org/2000/svg";
      function getIntrinsicNamespace(type) {
        switch (type) {
          case "svg":
            return SVG_NAMESPACE;
          case "math":
            return MATH_NAMESPACE;
          default:
            return HTML_NAMESPACE;
        }
      }
      function getChildNamespace(parentNamespace, type) {
        return parentNamespace == null || parentNamespace === HTML_NAMESPACE ? getIntrinsicNamespace(type) : parentNamespace === SVG_NAMESPACE && type === "foreignObject" ? HTML_NAMESPACE : parentNamespace;
      }
      var createMicrosoftUnsafeLocalFunction = function(func) {
        return typeof MSApp < "u" && MSApp.execUnsafeLocalFunction ? function(arg0, arg1, arg2, arg3) {
          MSApp.execUnsafeLocalFunction(function() {
            return func(arg0, arg1, arg2, arg3);
          });
        } : func;
      }, reusableSVGContainer, setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
        if (node.namespaceURI === SVG_NAMESPACE && !("innerHTML" in node)) {
          reusableSVGContainer = reusableSVGContainer || document.createElement("div"), reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
          for (var svgNode = reusableSVGContainer.firstChild; node.firstChild; )
            node.removeChild(node.firstChild);
          for (; svgNode.firstChild; )
            node.appendChild(svgNode.firstChild);
          return;
        }
        node.innerHTML = html;
      }), ELEMENT_NODE = 1, TEXT_NODE = 3, COMMENT_NODE = 8, DOCUMENT_NODE = 9, DOCUMENT_FRAGMENT_NODE = 11, setTextContent = function(node, text) {
        if (text) {
          var firstChild = node.firstChild;
          if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
            firstChild.nodeValue = text;
            return;
          }
        }
        node.textContent = text;
      }, shorthandToLonghand = {
        animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
        background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
        backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
        border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
        borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
        borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
        borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
        borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
        borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
        borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
        borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
        borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
        borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
        borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
        borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
        borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
        borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
        columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
        columns: ["columnCount", "columnWidth"],
        flex: ["flexBasis", "flexGrow", "flexShrink"],
        flexFlow: ["flexDirection", "flexWrap"],
        font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
        fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
        gap: ["columnGap", "rowGap"],
        grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
        gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
        gridColumn: ["gridColumnEnd", "gridColumnStart"],
        gridColumnGap: ["columnGap"],
        gridGap: ["columnGap", "rowGap"],
        gridRow: ["gridRowEnd", "gridRowStart"],
        gridRowGap: ["rowGap"],
        gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
        listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
        margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
        marker: ["markerEnd", "markerMid", "markerStart"],
        mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
        maskPosition: ["maskPositionX", "maskPositionY"],
        outline: ["outlineColor", "outlineStyle", "outlineWidth"],
        overflow: ["overflowX", "overflowY"],
        padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
        placeContent: ["alignContent", "justifyContent"],
        placeItems: ["alignItems", "justifyItems"],
        placeSelf: ["alignSelf", "justifySelf"],
        textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
        textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
        transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
        wordWrap: ["overflowWrap"]
      }, isUnitlessNumber = {
        animationIterationCount: !0,
        aspectRatio: !0,
        borderImageOutset: !0,
        borderImageSlice: !0,
        borderImageWidth: !0,
        boxFlex: !0,
        boxFlexGroup: !0,
        boxOrdinalGroup: !0,
        columnCount: !0,
        columns: !0,
        flex: !0,
        flexGrow: !0,
        flexPositive: !0,
        flexShrink: !0,
        flexNegative: !0,
        flexOrder: !0,
        gridArea: !0,
        gridRow: !0,
        gridRowEnd: !0,
        gridRowSpan: !0,
        gridRowStart: !0,
        gridColumn: !0,
        gridColumnEnd: !0,
        gridColumnSpan: !0,
        gridColumnStart: !0,
        fontWeight: !0,
        lineClamp: !0,
        lineHeight: !0,
        opacity: !0,
        order: !0,
        orphans: !0,
        tabSize: !0,
        widows: !0,
        zIndex: !0,
        zoom: !0,
        // SVG-related properties
        fillOpacity: !0,
        floodOpacity: !0,
        stopOpacity: !0,
        strokeDasharray: !0,
        strokeDashoffset: !0,
        strokeMiterlimit: !0,
        strokeOpacity: !0,
        strokeWidth: !0
      };
      function prefixKey(prefix2, key) {
        return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
      }
      var prefixes = ["Webkit", "ms", "Moz", "O"];
      Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes.forEach(function(prefix2) {
          isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
        });
      });
      function dangerousStyleValue(name, value, isCustomProperty) {
        var isEmpty = value == null || typeof value == "boolean" || value === "";
        return isEmpty ? "" : !isCustomProperty && typeof value == "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) ? value + "px" : (checkCSSPropertyStringCoercion(value, name), ("" + value).trim());
      }
      var uppercasePattern = /([A-Z])/g, msPattern = /^ms-/;
      function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
      }
      var warnValidStyle = function() {
      };
      {
        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/, msPattern$1 = /^-ms-/, hyphenPattern = /-(.)/g, badStyleValueWithSemicolonPattern = /;\s*$/, warnedStyleNames = {}, warnedStyleValues = {}, warnedForNaNValue = !1, warnedForInfinityValue = !1, camelize = function(string) {
          return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
          });
        }, warnHyphenatedStyleName = function(name) {
          warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name] || (warnedStyleNames[name] = !0, error(
            "Unsupported style property %s. Did you mean %s?",
            name,
            // As Andi Smith suggests
            // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
            // is converted to lowercase `ms`.
            camelize(name.replace(msPattern$1, "ms-"))
          ));
        }, warnBadVendoredStyleName = function(name) {
          warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name] || (warnedStyleNames[name] = !0, error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1)));
        }, warnStyleValueWithSemicolon = function(name, value) {
          warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value] || (warnedStyleValues[value] = !0, error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, "")));
        }, warnStyleValueIsNaN = function(name, value) {
          warnedForNaNValue || (warnedForNaNValue = !0, error("`NaN` is an invalid value for the `%s` css style property.", name));
        }, warnStyleValueIsInfinity = function(name, value) {
          warnedForInfinityValue || (warnedForInfinityValue = !0, error("`Infinity` is an invalid value for the `%s` css style property.", name));
        };
        warnValidStyle = function(name, value) {
          name.indexOf("-") > -1 ? warnHyphenatedStyleName(name) : badVendoredStyleNamePattern.test(name) ? warnBadVendoredStyleName(name) : badStyleValueWithSemicolonPattern.test(value) && warnStyleValueWithSemicolon(name, value), typeof value == "number" && (isNaN(value) ? warnStyleValueIsNaN(name, value) : isFinite(value) || warnStyleValueIsInfinity(name, value));
        };
      }
      var warnValidStyle$1 = warnValidStyle;
      function createDangerousStringForStyles(styles) {
        {
          var serialized = "", delimiter = "";
          for (var styleName in styles)
            if (styles.hasOwnProperty(styleName)) {
              var styleValue = styles[styleName];
              if (styleValue != null) {
                var isCustomProperty = styleName.indexOf("--") === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":", serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty), delimiter = ";";
              }
            }
          return serialized || null;
        }
      }
      function setValueForStyles(node, styles) {
        var style2 = node.style;
        for (var styleName in styles)
          if (styles.hasOwnProperty(styleName)) {
            var isCustomProperty = styleName.indexOf("--") === 0;
            isCustomProperty || warnValidStyle$1(styleName, styles[styleName]);
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            styleName === "float" && (styleName = "cssFloat"), isCustomProperty ? style2.setProperty(styleName, styleValue) : style2[styleName] = styleValue;
          }
      }
      function isValueEmpty(value) {
        return value == null || typeof value == "boolean" || value === "";
      }
      function expandShorthandMap(styles) {
        var expanded = {};
        for (var key in styles)
          for (var longhands = shorthandToLonghand[key] || [key], i = 0; i < longhands.length; i++)
            expanded[longhands[i]] = key;
        return expanded;
      }
      function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
        {
          if (!nextStyles)
            return;
          var expandedUpdates = expandShorthandMap(styleUpdates), expandedStyles = expandShorthandMap(nextStyles), warnedAbout = {};
          for (var key in expandedUpdates) {
            var originalKey = expandedUpdates[key], correctOriginalKey = expandedStyles[key];
            if (correctOriginalKey && originalKey !== correctOriginalKey) {
              var warningKey = originalKey + "," + correctOriginalKey;
              if (warnedAbout[warningKey])
                continue;
              warnedAbout[warningKey] = !0, error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
            }
          }
        }
      }
      var omittedCloseTags = {
        area: !0,
        base: !0,
        br: !0,
        col: !0,
        embed: !0,
        hr: !0,
        img: !0,
        input: !0,
        keygen: !0,
        link: !0,
        meta: !0,
        param: !0,
        source: !0,
        track: !0,
        wbr: !0
        // NOTE: menuitem's close tag should be omitted, but that causes problems.
      }, voidElementTags = assign({
        menuitem: !0
      }, omittedCloseTags), HTML = "__html";
      function assertValidProps(tag, props) {
        if (props) {
          if (voidElementTags[tag] && (props.children != null || props.dangerouslySetInnerHTML != null))
            throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
          if (props.dangerouslySetInnerHTML != null) {
            if (props.children != null)
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            if (typeof props.dangerouslySetInnerHTML != "object" || !(HTML in props.dangerouslySetInnerHTML))
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
          }
          if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null && error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."), props.style != null && typeof props.style != "object")
            throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
        }
      }
      function isCustomComponent(tagName, props) {
        if (tagName.indexOf("-") === -1)
          return typeof props.is == "string";
        switch (tagName) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return !1;
          default:
            return !0;
        }
      }
      var possibleStandardNames = {
        // HTML
        accept: "accept",
        acceptcharset: "acceptCharset",
        "accept-charset": "acceptCharset",
        accesskey: "accessKey",
        action: "action",
        allowfullscreen: "allowFullScreen",
        alt: "alt",
        as: "as",
        async: "async",
        autocapitalize: "autoCapitalize",
        autocomplete: "autoComplete",
        autocorrect: "autoCorrect",
        autofocus: "autoFocus",
        autoplay: "autoPlay",
        autosave: "autoSave",
        capture: "capture",
        cellpadding: "cellPadding",
        cellspacing: "cellSpacing",
        challenge: "challenge",
        charset: "charSet",
        checked: "checked",
        children: "children",
        cite: "cite",
        class: "className",
        classid: "classID",
        classname: "className",
        cols: "cols",
        colspan: "colSpan",
        content: "content",
        contenteditable: "contentEditable",
        contextmenu: "contextMenu",
        controls: "controls",
        controlslist: "controlsList",
        coords: "coords",
        crossorigin: "crossOrigin",
        dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
        data: "data",
        datetime: "dateTime",
        default: "default",
        defaultchecked: "defaultChecked",
        defaultvalue: "defaultValue",
        defer: "defer",
        dir: "dir",
        disabled: "disabled",
        disablepictureinpicture: "disablePictureInPicture",
        disableremoteplayback: "disableRemotePlayback",
        download: "download",
        draggable: "draggable",
        enctype: "encType",
        enterkeyhint: "enterKeyHint",
        for: "htmlFor",
        form: "form",
        formmethod: "formMethod",
        formaction: "formAction",
        formenctype: "formEncType",
        formnovalidate: "formNoValidate",
        formtarget: "formTarget",
        frameborder: "frameBorder",
        headers: "headers",
        height: "height",
        hidden: "hidden",
        high: "high",
        href: "href",
        hreflang: "hrefLang",
        htmlfor: "htmlFor",
        httpequiv: "httpEquiv",
        "http-equiv": "httpEquiv",
        icon: "icon",
        id: "id",
        imagesizes: "imageSizes",
        imagesrcset: "imageSrcSet",
        innerhtml: "innerHTML",
        inputmode: "inputMode",
        integrity: "integrity",
        is: "is",
        itemid: "itemID",
        itemprop: "itemProp",
        itemref: "itemRef",
        itemscope: "itemScope",
        itemtype: "itemType",
        keyparams: "keyParams",
        keytype: "keyType",
        kind: "kind",
        label: "label",
        lang: "lang",
        list: "list",
        loop: "loop",
        low: "low",
        manifest: "manifest",
        marginwidth: "marginWidth",
        marginheight: "marginHeight",
        max: "max",
        maxlength: "maxLength",
        media: "media",
        mediagroup: "mediaGroup",
        method: "method",
        min: "min",
        minlength: "minLength",
        multiple: "multiple",
        muted: "muted",
        name: "name",
        nomodule: "noModule",
        nonce: "nonce",
        novalidate: "noValidate",
        open: "open",
        optimum: "optimum",
        pattern: "pattern",
        placeholder: "placeholder",
        playsinline: "playsInline",
        poster: "poster",
        preload: "preload",
        profile: "profile",
        radiogroup: "radioGroup",
        readonly: "readOnly",
        referrerpolicy: "referrerPolicy",
        rel: "rel",
        required: "required",
        reversed: "reversed",
        role: "role",
        rows: "rows",
        rowspan: "rowSpan",
        sandbox: "sandbox",
        scope: "scope",
        scoped: "scoped",
        scrolling: "scrolling",
        seamless: "seamless",
        selected: "selected",
        shape: "shape",
        size: "size",
        sizes: "sizes",
        span: "span",
        spellcheck: "spellCheck",
        src: "src",
        srcdoc: "srcDoc",
        srclang: "srcLang",
        srcset: "srcSet",
        start: "start",
        step: "step",
        style: "style",
        summary: "summary",
        tabindex: "tabIndex",
        target: "target",
        title: "title",
        type: "type",
        usemap: "useMap",
        value: "value",
        width: "width",
        wmode: "wmode",
        wrap: "wrap",
        // SVG
        about: "about",
        accentheight: "accentHeight",
        "accent-height": "accentHeight",
        accumulate: "accumulate",
        additive: "additive",
        alignmentbaseline: "alignmentBaseline",
        "alignment-baseline": "alignmentBaseline",
        allowreorder: "allowReorder",
        alphabetic: "alphabetic",
        amplitude: "amplitude",
        arabicform: "arabicForm",
        "arabic-form": "arabicForm",
        ascent: "ascent",
        attributename: "attributeName",
        attributetype: "attributeType",
        autoreverse: "autoReverse",
        azimuth: "azimuth",
        basefrequency: "baseFrequency",
        baselineshift: "baselineShift",
        "baseline-shift": "baselineShift",
        baseprofile: "baseProfile",
        bbox: "bbox",
        begin: "begin",
        bias: "bias",
        by: "by",
        calcmode: "calcMode",
        capheight: "capHeight",
        "cap-height": "capHeight",
        clip: "clip",
        clippath: "clipPath",
        "clip-path": "clipPath",
        clippathunits: "clipPathUnits",
        cliprule: "clipRule",
        "clip-rule": "clipRule",
        color: "color",
        colorinterpolation: "colorInterpolation",
        "color-interpolation": "colorInterpolation",
        colorinterpolationfilters: "colorInterpolationFilters",
        "color-interpolation-filters": "colorInterpolationFilters",
        colorprofile: "colorProfile",
        "color-profile": "colorProfile",
        colorrendering: "colorRendering",
        "color-rendering": "colorRendering",
        contentscripttype: "contentScriptType",
        contentstyletype: "contentStyleType",
        cursor: "cursor",
        cx: "cx",
        cy: "cy",
        d: "d",
        datatype: "datatype",
        decelerate: "decelerate",
        descent: "descent",
        diffuseconstant: "diffuseConstant",
        direction: "direction",
        display: "display",
        divisor: "divisor",
        dominantbaseline: "dominantBaseline",
        "dominant-baseline": "dominantBaseline",
        dur: "dur",
        dx: "dx",
        dy: "dy",
        edgemode: "edgeMode",
        elevation: "elevation",
        enablebackground: "enableBackground",
        "enable-background": "enableBackground",
        end: "end",
        exponent: "exponent",
        externalresourcesrequired: "externalResourcesRequired",
        fill: "fill",
        fillopacity: "fillOpacity",
        "fill-opacity": "fillOpacity",
        fillrule: "fillRule",
        "fill-rule": "fillRule",
        filter: "filter",
        filterres: "filterRes",
        filterunits: "filterUnits",
        floodopacity: "floodOpacity",
        "flood-opacity": "floodOpacity",
        floodcolor: "floodColor",
        "flood-color": "floodColor",
        focusable: "focusable",
        fontfamily: "fontFamily",
        "font-family": "fontFamily",
        fontsize: "fontSize",
        "font-size": "fontSize",
        fontsizeadjust: "fontSizeAdjust",
        "font-size-adjust": "fontSizeAdjust",
        fontstretch: "fontStretch",
        "font-stretch": "fontStretch",
        fontstyle: "fontStyle",
        "font-style": "fontStyle",
        fontvariant: "fontVariant",
        "font-variant": "fontVariant",
        fontweight: "fontWeight",
        "font-weight": "fontWeight",
        format: "format",
        from: "from",
        fx: "fx",
        fy: "fy",
        g1: "g1",
        g2: "g2",
        glyphname: "glyphName",
        "glyph-name": "glyphName",
        glyphorientationhorizontal: "glyphOrientationHorizontal",
        "glyph-orientation-horizontal": "glyphOrientationHorizontal",
        glyphorientationvertical: "glyphOrientationVertical",
        "glyph-orientation-vertical": "glyphOrientationVertical",
        glyphref: "glyphRef",
        gradienttransform: "gradientTransform",
        gradientunits: "gradientUnits",
        hanging: "hanging",
        horizadvx: "horizAdvX",
        "horiz-adv-x": "horizAdvX",
        horizoriginx: "horizOriginX",
        "horiz-origin-x": "horizOriginX",
        ideographic: "ideographic",
        imagerendering: "imageRendering",
        "image-rendering": "imageRendering",
        in2: "in2",
        in: "in",
        inlist: "inlist",
        intercept: "intercept",
        k1: "k1",
        k2: "k2",
        k3: "k3",
        k4: "k4",
        k: "k",
        kernelmatrix: "kernelMatrix",
        kernelunitlength: "kernelUnitLength",
        kerning: "kerning",
        keypoints: "keyPoints",
        keysplines: "keySplines",
        keytimes: "keyTimes",
        lengthadjust: "lengthAdjust",
        letterspacing: "letterSpacing",
        "letter-spacing": "letterSpacing",
        lightingcolor: "lightingColor",
        "lighting-color": "lightingColor",
        limitingconeangle: "limitingConeAngle",
        local: "local",
        markerend: "markerEnd",
        "marker-end": "markerEnd",
        markerheight: "markerHeight",
        markermid: "markerMid",
        "marker-mid": "markerMid",
        markerstart: "markerStart",
        "marker-start": "markerStart",
        markerunits: "markerUnits",
        markerwidth: "markerWidth",
        mask: "mask",
        maskcontentunits: "maskContentUnits",
        maskunits: "maskUnits",
        mathematical: "mathematical",
        mode: "mode",
        numoctaves: "numOctaves",
        offset: "offset",
        opacity: "opacity",
        operator: "operator",
        order: "order",
        orient: "orient",
        orientation: "orientation",
        origin: "origin",
        overflow: "overflow",
        overlineposition: "overlinePosition",
        "overline-position": "overlinePosition",
        overlinethickness: "overlineThickness",
        "overline-thickness": "overlineThickness",
        paintorder: "paintOrder",
        "paint-order": "paintOrder",
        panose1: "panose1",
        "panose-1": "panose1",
        pathlength: "pathLength",
        patterncontentunits: "patternContentUnits",
        patterntransform: "patternTransform",
        patternunits: "patternUnits",
        pointerevents: "pointerEvents",
        "pointer-events": "pointerEvents",
        points: "points",
        pointsatx: "pointsAtX",
        pointsaty: "pointsAtY",
        pointsatz: "pointsAtZ",
        prefix: "prefix",
        preservealpha: "preserveAlpha",
        preserveaspectratio: "preserveAspectRatio",
        primitiveunits: "primitiveUnits",
        property: "property",
        r: "r",
        radius: "radius",
        refx: "refX",
        refy: "refY",
        renderingintent: "renderingIntent",
        "rendering-intent": "renderingIntent",
        repeatcount: "repeatCount",
        repeatdur: "repeatDur",
        requiredextensions: "requiredExtensions",
        requiredfeatures: "requiredFeatures",
        resource: "resource",
        restart: "restart",
        result: "result",
        results: "results",
        rotate: "rotate",
        rx: "rx",
        ry: "ry",
        scale: "scale",
        security: "security",
        seed: "seed",
        shaperendering: "shapeRendering",
        "shape-rendering": "shapeRendering",
        slope: "slope",
        spacing: "spacing",
        specularconstant: "specularConstant",
        specularexponent: "specularExponent",
        speed: "speed",
        spreadmethod: "spreadMethod",
        startoffset: "startOffset",
        stddeviation: "stdDeviation",
        stemh: "stemh",
        stemv: "stemv",
        stitchtiles: "stitchTiles",
        stopcolor: "stopColor",
        "stop-color": "stopColor",
        stopopacity: "stopOpacity",
        "stop-opacity": "stopOpacity",
        strikethroughposition: "strikethroughPosition",
        "strikethrough-position": "strikethroughPosition",
        strikethroughthickness: "strikethroughThickness",
        "strikethrough-thickness": "strikethroughThickness",
        string: "string",
        stroke: "stroke",
        strokedasharray: "strokeDasharray",
        "stroke-dasharray": "strokeDasharray",
        strokedashoffset: "strokeDashoffset",
        "stroke-dashoffset": "strokeDashoffset",
        strokelinecap: "strokeLinecap",
        "stroke-linecap": "strokeLinecap",
        strokelinejoin: "strokeLinejoin",
        "stroke-linejoin": "strokeLinejoin",
        strokemiterlimit: "strokeMiterlimit",
        "stroke-miterlimit": "strokeMiterlimit",
        strokewidth: "strokeWidth",
        "stroke-width": "strokeWidth",
        strokeopacity: "strokeOpacity",
        "stroke-opacity": "strokeOpacity",
        suppresscontenteditablewarning: "suppressContentEditableWarning",
        suppresshydrationwarning: "suppressHydrationWarning",
        surfacescale: "surfaceScale",
        systemlanguage: "systemLanguage",
        tablevalues: "tableValues",
        targetx: "targetX",
        targety: "targetY",
        textanchor: "textAnchor",
        "text-anchor": "textAnchor",
        textdecoration: "textDecoration",
        "text-decoration": "textDecoration",
        textlength: "textLength",
        textrendering: "textRendering",
        "text-rendering": "textRendering",
        to: "to",
        transform: "transform",
        typeof: "typeof",
        u1: "u1",
        u2: "u2",
        underlineposition: "underlinePosition",
        "underline-position": "underlinePosition",
        underlinethickness: "underlineThickness",
        "underline-thickness": "underlineThickness",
        unicode: "unicode",
        unicodebidi: "unicodeBidi",
        "unicode-bidi": "unicodeBidi",
        unicoderange: "unicodeRange",
        "unicode-range": "unicodeRange",
        unitsperem: "unitsPerEm",
        "units-per-em": "unitsPerEm",
        unselectable: "unselectable",
        valphabetic: "vAlphabetic",
        "v-alphabetic": "vAlphabetic",
        values: "values",
        vectoreffect: "vectorEffect",
        "vector-effect": "vectorEffect",
        version: "version",
        vertadvy: "vertAdvY",
        "vert-adv-y": "vertAdvY",
        vertoriginx: "vertOriginX",
        "vert-origin-x": "vertOriginX",
        vertoriginy: "vertOriginY",
        "vert-origin-y": "vertOriginY",
        vhanging: "vHanging",
        "v-hanging": "vHanging",
        videographic: "vIdeographic",
        "v-ideographic": "vIdeographic",
        viewbox: "viewBox",
        viewtarget: "viewTarget",
        visibility: "visibility",
        vmathematical: "vMathematical",
        "v-mathematical": "vMathematical",
        vocab: "vocab",
        widths: "widths",
        wordspacing: "wordSpacing",
        "word-spacing": "wordSpacing",
        writingmode: "writingMode",
        "writing-mode": "writingMode",
        x1: "x1",
        x2: "x2",
        x: "x",
        xchannelselector: "xChannelSelector",
        xheight: "xHeight",
        "x-height": "xHeight",
        xlinkactuate: "xlinkActuate",
        "xlink:actuate": "xlinkActuate",
        xlinkarcrole: "xlinkArcrole",
        "xlink:arcrole": "xlinkArcrole",
        xlinkhref: "xlinkHref",
        "xlink:href": "xlinkHref",
        xlinkrole: "xlinkRole",
        "xlink:role": "xlinkRole",
        xlinkshow: "xlinkShow",
        "xlink:show": "xlinkShow",
        xlinktitle: "xlinkTitle",
        "xlink:title": "xlinkTitle",
        xlinktype: "xlinkType",
        "xlink:type": "xlinkType",
        xmlbase: "xmlBase",
        "xml:base": "xmlBase",
        xmllang: "xmlLang",
        "xml:lang": "xmlLang",
        xmlns: "xmlns",
        "xml:space": "xmlSpace",
        xmlnsxlink: "xmlnsXlink",
        "xmlns:xlink": "xmlnsXlink",
        xmlspace: "xmlSpace",
        y1: "y1",
        y2: "y2",
        y: "y",
        ychannelselector: "yChannelSelector",
        z: "z",
        zoomandpan: "zoomAndPan"
      }, ariaProperties = {
        "aria-current": 0,
        // state
        "aria-description": 0,
        "aria-details": 0,
        "aria-disabled": 0,
        // state
        "aria-hidden": 0,
        // state
        "aria-invalid": 0,
        // state
        "aria-keyshortcuts": 0,
        "aria-label": 0,
        "aria-roledescription": 0,
        // Widget Attributes
        "aria-autocomplete": 0,
        "aria-checked": 0,
        "aria-expanded": 0,
        "aria-haspopup": 0,
        "aria-level": 0,
        "aria-modal": 0,
        "aria-multiline": 0,
        "aria-multiselectable": 0,
        "aria-orientation": 0,
        "aria-placeholder": 0,
        "aria-pressed": 0,
        "aria-readonly": 0,
        "aria-required": 0,
        "aria-selected": 0,
        "aria-sort": 0,
        "aria-valuemax": 0,
        "aria-valuemin": 0,
        "aria-valuenow": 0,
        "aria-valuetext": 0,
        // Live Region Attributes
        "aria-atomic": 0,
        "aria-busy": 0,
        "aria-live": 0,
        "aria-relevant": 0,
        // Drag-and-Drop Attributes
        "aria-dropeffect": 0,
        "aria-grabbed": 0,
        // Relationship Attributes
        "aria-activedescendant": 0,
        "aria-colcount": 0,
        "aria-colindex": 0,
        "aria-colspan": 0,
        "aria-controls": 0,
        "aria-describedby": 0,
        "aria-errormessage": 0,
        "aria-flowto": 0,
        "aria-labelledby": 0,
        "aria-owns": 0,
        "aria-posinset": 0,
        "aria-rowcount": 0,
        "aria-rowindex": 0,
        "aria-rowspan": 0,
        "aria-setsize": 0
      }, warnedProperties = {}, rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$"), rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
      function validateProperty(tagName, name) {
        {
          if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name])
            return !0;
          if (rARIACamel.test(name)) {
            var ariaName = "aria-" + name.slice(4).toLowerCase(), correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
            if (correctName == null)
              return error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name), warnedProperties[name] = !0, !0;
            if (name !== correctName)
              return error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName), warnedProperties[name] = !0, !0;
          }
          if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase(), standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
            if (standardName == null)
              return warnedProperties[name] = !0, !1;
            if (name !== standardName)
              return error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName), warnedProperties[name] = !0, !0;
          }
        }
        return !0;
      }
      function warnInvalidARIAProps(type, props) {
        {
          var invalidProps = [];
          for (var key in props) {
            var isValid = validateProperty(type, key);
            isValid || invalidProps.push(key);
          }
          var unknownPropString = invalidProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          invalidProps.length === 1 ? error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type) : invalidProps.length > 1 && error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
        }
      }
      function validateProperties(type, props) {
        isCustomComponent(type, props) || warnInvalidARIAProps(type, props);
      }
      var didWarnValueNull = !1;
      function validateProperties$1(type, props) {
        {
          if (type !== "input" && type !== "textarea" && type !== "select")
            return;
          props != null && props.value === null && !didWarnValueNull && (didWarnValueNull = !0, type === "select" && props.multiple ? error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type) : error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type));
        }
      }
      var validateProperty$1 = function() {
      };
      {
        var warnedProperties$1 = {}, EVENT_NAME_REGEX = /^on./, INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/, rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$"), rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        validateProperty$1 = function(tagName, name, value, eventRegistry) {
          if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name])
            return !0;
          var lowerCasedName = name.toLowerCase();
          if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout")
            return error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."), warnedProperties$1[name] = !0, !0;
          if (eventRegistry != null) {
            var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
            if (registrationNameDependencies2.hasOwnProperty(name))
              return !0;
            var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
            if (registrationName != null)
              return error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName), warnedProperties$1[name] = !0, !0;
            if (EVENT_NAME_REGEX.test(name))
              return error("Unknown event handler property `%s`. It will be ignored.", name), warnedProperties$1[name] = !0, !0;
          } else if (EVENT_NAME_REGEX.test(name))
            return INVALID_EVENT_NAME_REGEX.test(name) && error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name), warnedProperties$1[name] = !0, !0;
          if (rARIA$1.test(name) || rARIACamel$1.test(name))
            return !0;
          if (lowerCasedName === "innerhtml")
            return error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."), warnedProperties$1[name] = !0, !0;
          if (lowerCasedName === "aria")
            return error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."), warnedProperties$1[name] = !0, !0;
          if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value != "string")
            return error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value), warnedProperties$1[name] = !0, !0;
          if (typeof value == "number" && isNaN(value))
            return error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name), warnedProperties$1[name] = !0, !0;
          var propertyInfo = getPropertyInfo(name), isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
          if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name)
              return error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName), warnedProperties$1[name] = !0, !0;
          } else if (!isReserved && name !== lowerCasedName)
            return error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName), warnedProperties$1[name] = !0, !0;
          return typeof value == "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, !1) ? (value ? error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name) : error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name), warnedProperties$1[name] = !0, !0) : isReserved ? !0 : shouldRemoveAttributeWithWarning(name, value, propertyInfo, !1) ? (warnedProperties$1[name] = !0, !1) : ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN && (error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value), warnedProperties$1[name] = !0), !0);
        };
      }
      var warnUnknownProperties = function(type, props, eventRegistry) {
        {
          var unknownProps = [];
          for (var key in props) {
            var isValid = validateProperty$1(type, key, props[key], eventRegistry);
            isValid || unknownProps.push(key);
          }
          var unknownPropString = unknownProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          unknownProps.length === 1 ? error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type) : unknownProps.length > 1 && error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
        }
      };
      function validateProperties$2(type, props, eventRegistry) {
        isCustomComponent(type, props) || warnUnknownProperties(type, props, eventRegistry);
      }
      var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1, IS_NON_DELEGATED = 1 << 1, IS_CAPTURE_PHASE = 1 << 2, SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE, currentReplayingEvent = null;
      function setReplayingEvent(event) {
        currentReplayingEvent !== null && error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue."), currentReplayingEvent = event;
      }
      function resetReplayingEvent() {
        currentReplayingEvent === null && error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue."), currentReplayingEvent = null;
      }
      function isReplayingEvent(event) {
        return event === currentReplayingEvent;
      }
      function getEventTarget(nativeEvent) {
        var target = nativeEvent.target || nativeEvent.srcElement || window;
        return target.correspondingUseElement && (target = target.correspondingUseElement), target.nodeType === TEXT_NODE ? target.parentNode : target;
      }
      var restoreImpl = null, restoreTarget = null, restoreQueue = null;
      function restoreStateOfTarget(target) {
        var internalInstance = getInstanceFromNode(target);
        if (internalInstance) {
          if (typeof restoreImpl != "function")
            throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
          var stateNode = internalInstance.stateNode;
          if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
          }
        }
      }
      function setRestoreImplementation(impl) {
        restoreImpl = impl;
      }
      function enqueueStateRestore(target) {
        restoreTarget ? restoreQueue ? restoreQueue.push(target) : restoreQueue = [target] : restoreTarget = target;
      }
      function needsStateRestore() {
        return restoreTarget !== null || restoreQueue !== null;
      }
      function restoreStateIfNeeded() {
        if (restoreTarget) {
          var target = restoreTarget, queuedTargets = restoreQueue;
          if (restoreTarget = null, restoreQueue = null, restoreStateOfTarget(target), queuedTargets)
            for (var i = 0; i < queuedTargets.length; i++)
              restoreStateOfTarget(queuedTargets[i]);
        }
      }
      var batchedUpdatesImpl = function(fn, bookkeeping) {
        return fn(bookkeeping);
      }, flushSyncImpl = function() {
      }, isInsideEventHandler = !1;
      function finishEventHandler() {
        var controlledComponentsHavePendingUpdates = needsStateRestore();
        controlledComponentsHavePendingUpdates && (flushSyncImpl(), restoreStateIfNeeded());
      }
      function batchedUpdates(fn, a, b) {
        if (isInsideEventHandler)
          return fn(a, b);
        isInsideEventHandler = !0;
        try {
          return batchedUpdatesImpl(fn, a, b);
        } finally {
          isInsideEventHandler = !1, finishEventHandler();
        }
      }
      function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
        batchedUpdatesImpl = _batchedUpdatesImpl, flushSyncImpl = _flushSyncImpl;
      }
      function isInteractive(tag) {
        return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
      }
      function shouldPreventMouseEvent(name, type, props) {
        switch (name) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
          case "onMouseEnter":
            return !!(props.disabled && isInteractive(type));
          default:
            return !1;
        }
      }
      function getListener(inst, registrationName) {
        var stateNode = inst.stateNode;
        if (stateNode === null)
          return null;
        var props = getFiberCurrentPropsFromNode(stateNode);
        if (props === null)
          return null;
        var listener = props[registrationName];
        if (shouldPreventMouseEvent(registrationName, inst.type, props))
          return null;
        if (listener && typeof listener != "function")
          throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
        return listener;
      }
      var passiveBrowserEventsSupported = !1;
      if (canUseDOM)
        try {
          var options = {};
          Object.defineProperty(options, "passive", {
            get: function() {
              passiveBrowserEventsSupported = !0;
            }
          }), window.addEventListener("test", options, options), window.removeEventListener("test", options, options);
        } catch {
          passiveBrowserEventsSupported = !1;
        }
      function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
        var funcArgs = Array.prototype.slice.call(arguments, 3);
        try {
          func.apply(context, funcArgs);
        } catch (error2) {
          this.onError(error2);
        }
      }
      var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
      if (typeof window < "u" && typeof window.dispatchEvent == "function" && typeof document < "u" && typeof document.createEvent == "function") {
        var fakeNode = document.createElement("react");
        invokeGuardedCallbackImpl = function(name, func, context, a, b, c, d, e, f) {
          if (typeof document > "u" || document === null)
            throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
          var evt = document.createEvent("Event"), didCall = !1, didError = !0, windowEvent = window.event, windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
          function restoreAfterDispatch() {
            fakeNode.removeEventListener(evtType, callCallback2, !1), typeof window.event < "u" && window.hasOwnProperty("event") && (window.event = windowEvent);
          }
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          function callCallback2() {
            didCall = !0, restoreAfterDispatch(), func.apply(context, funcArgs), didError = !1;
          }
          var error2, didSetError = !1, isCrossOriginError = !1;
          function handleWindowError(event) {
            if (error2 = event.error, didSetError = !0, error2 === null && event.colno === 0 && event.lineno === 0 && (isCrossOriginError = !0), event.defaultPrevented && error2 != null && typeof error2 == "object")
              try {
                error2._suppressLogging = !0;
              } catch {
              }
          }
          var evtType = "react-" + (name || "invokeguardedcallback");
          if (window.addEventListener("error", handleWindowError), fakeNode.addEventListener(evtType, callCallback2, !1), evt.initEvent(evtType, !1, !1), fakeNode.dispatchEvent(evt), windowEventDescriptor && Object.defineProperty(window, "event", windowEventDescriptor), didCall && didError && (didSetError ? isCrossOriginError && (error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.")) : error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`), this.onError(error2)), window.removeEventListener("error", handleWindowError), !didCall)
            return restoreAfterDispatch(), invokeGuardedCallbackProd.apply(this, arguments);
        };
      }
      var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl, hasError = !1, caughtError = null, hasRethrowError = !1, rethrowError = null, reporter = {
        onError: function(error2) {
          hasError = !0, caughtError = error2;
        }
      };
      function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        hasError = !1, caughtError = null, invokeGuardedCallbackImpl$1.apply(reporter, arguments);
      }
      function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        if (invokeGuardedCallback.apply(this, arguments), hasError) {
          var error2 = clearCaughtError();
          hasRethrowError || (hasRethrowError = !0, rethrowError = error2);
        }
      }
      function rethrowCaughtError() {
        if (hasRethrowError) {
          var error2 = rethrowError;
          throw hasRethrowError = !1, rethrowError = null, error2;
        }
      }
      function hasCaughtError() {
        return hasError;
      }
      function clearCaughtError() {
        if (hasError) {
          var error2 = caughtError;
          return hasError = !1, caughtError = null, error2;
        } else
          throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
      }
      function get(key) {
        return key._reactInternals;
      }
      function has(key) {
        return key._reactInternals !== void 0;
      }
      function set(key, value) {
        key._reactInternals = value;
      }
      var NoFlags = (
        /*                      */
        0
      ), PerformedWork = (
        /*                */
        1
      ), Placement = (
        /*                    */
        2
      ), Update = (
        /*                       */
        4
      ), ChildDeletion = (
        /*                */
        16
      ), ContentReset = (
        /*                 */
        32
      ), Callback = (
        /*                     */
        64
      ), DidCapture = (
        /*                   */
        128
      ), ForceClientRender = (
        /*            */
        256
      ), Ref = (
        /*                          */
        512
      ), Snapshot = (
        /*                     */
        1024
      ), Passive = (
        /*                      */
        2048
      ), Hydrating = (
        /*                    */
        4096
      ), Visibility = (
        /*                   */
        8192
      ), StoreConsistency = (
        /*             */
        16384
      ), LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency, HostEffectMask = (
        /*               */
        32767
      ), Incomplete = (
        /*                   */
        32768
      ), ShouldCapture = (
        /*                */
        65536
      ), ForceUpdateForLegacySuspense = (
        /* */
        131072
      ), Forked = (
        /*                       */
        1048576
      ), RefStatic = (
        /*                    */
        2097152
      ), LayoutStatic = (
        /*                 */
        4194304
      ), PassiveStatic = (
        /*                */
        8388608
      ), MountLayoutDev = (
        /*               */
        16777216
      ), MountPassiveDev = (
        /*              */
        33554432
      ), BeforeMutationMask = (
        // TODO: Remove Update flag from before mutation phase by re-landing Visibility
        // flag logic (see #20043)
        Update | Snapshot | 0
      ), MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility, LayoutMask = Update | Callback | Ref | Visibility, PassiveMask = Passive | ChildDeletion, StaticMask = LayoutStatic | PassiveStatic | RefStatic, ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
      function getNearestMountedFiber(fiber) {
        var node = fiber, nearestMounted = fiber;
        if (fiber.alternate)
          for (; node.return; )
            node = node.return;
        else {
          var nextNode = node;
          do
            node = nextNode, (node.flags & (Placement | Hydrating)) !== NoFlags && (nearestMounted = node.return), nextNode = node.return;
          while (nextNode);
        }
        return node.tag === HostRoot ? nearestMounted : null;
      }
      function getSuspenseInstanceFromFiber(fiber) {
        if (fiber.tag === SuspenseComponent) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState === null) {
            var current2 = fiber.alternate;
            current2 !== null && (suspenseState = current2.memoizedState);
          }
          if (suspenseState !== null)
            return suspenseState.dehydrated;
        }
        return null;
      }
      function getContainerFromFiber(fiber) {
        return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
      }
      function isFiberMounted(fiber) {
        return getNearestMountedFiber(fiber) === fiber;
      }
      function isMounted(component) {
        {
          var owner = ReactCurrentOwner.current;
          if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner, instance = ownerFiber.stateNode;
            instance._warnedAboutRefsInRender || error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component"), instance._warnedAboutRefsInRender = !0;
          }
        }
        var fiber = get(component);
        return fiber ? getNearestMountedFiber(fiber) === fiber : !1;
      }
      function assertIsMounted(fiber) {
        if (getNearestMountedFiber(fiber) !== fiber)
          throw new Error("Unable to find node on an unmounted component.");
      }
      function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
          var nearestMounted = getNearestMountedFiber(fiber);
          if (nearestMounted === null)
            throw new Error("Unable to find node on an unmounted component.");
          return nearestMounted !== fiber ? null : fiber;
        }
        for (var a = fiber, b = alternate; ; ) {
          var parentA = a.return;
          if (parentA === null)
            break;
          var parentB = parentA.alternate;
          if (parentB === null) {
            var nextParent = parentA.return;
            if (nextParent !== null) {
              a = b = nextParent;
              continue;
            }
            break;
          }
          if (parentA.child === parentB.child) {
            for (var child = parentA.child; child; ) {
              if (child === a)
                return assertIsMounted(parentA), fiber;
              if (child === b)
                return assertIsMounted(parentA), alternate;
              child = child.sibling;
            }
            throw new Error("Unable to find node on an unmounted component.");
          }
          if (a.return !== b.return)
            a = parentA, b = parentB;
          else {
            for (var didFindChild = !1, _child = parentA.child; _child; ) {
              if (_child === a) {
                didFindChild = !0, a = parentA, b = parentB;
                break;
              }
              if (_child === b) {
                didFindChild = !0, b = parentA, a = parentB;
                break;
              }
              _child = _child.sibling;
            }
            if (!didFindChild) {
              for (_child = parentB.child; _child; ) {
                if (_child === a) {
                  didFindChild = !0, a = parentB, b = parentA;
                  break;
                }
                if (_child === b) {
                  didFindChild = !0, b = parentB, a = parentA;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild)
                throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
            }
          }
          if (a.alternate !== b)
            throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
        }
        if (a.tag !== HostRoot)
          throw new Error("Unable to find node on an unmounted component.");
        return a.stateNode.current === a ? fiber : alternate;
      }
      function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
      }
      function findCurrentHostFiberImpl(node) {
        if (node.tag === HostComponent || node.tag === HostText)
          return node;
        for (var child = node.child; child !== null; ) {
          var match = findCurrentHostFiberImpl(child);
          if (match !== null)
            return match;
          child = child.sibling;
        }
        return null;
      }
      function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
      }
      function findCurrentHostFiberWithNoPortalsImpl(node) {
        if (node.tag === HostComponent || node.tag === HostText)
          return node;
        for (var child = node.child; child !== null; ) {
          if (child.tag !== HostPortal) {
            var match = findCurrentHostFiberWithNoPortalsImpl(child);
            if (match !== null)
              return match;
          }
          child = child.sibling;
        }
        return null;
      }
      var scheduleCallback = Scheduler.unstable_scheduleCallback, cancelCallback = Scheduler.unstable_cancelCallback, shouldYield = Scheduler.unstable_shouldYield, requestPaint = Scheduler.unstable_requestPaint, now = Scheduler.unstable_now, getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, ImmediatePriority = Scheduler.unstable_ImmediatePriority, UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, NormalPriority = Scheduler.unstable_NormalPriority, LowPriority = Scheduler.unstable_LowPriority, IdlePriority = Scheduler.unstable_IdlePriority, unstable_yieldValue = Scheduler.unstable_yieldValue, unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue, rendererID = null, injectedHook = null, injectedProfilingHooks = null, hasLoggedError = !1, isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u";
      function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ > "u")
          return !1;
        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook.isDisabled)
          return !0;
        if (!hook.supportsFiber)
          return error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools"), !0;
        try {
          enableSchedulingProfiler && (internals = assign({}, internals, {
            getLaneLabelMap,
            injectProfilingHooks
          })), rendererID = hook.inject(internals), injectedHook = hook;
        } catch (err) {
          error("React instrumentation encountered an error: %s.", err);
        }
        return !!hook.checkDCE;
      }
      function onScheduleRoot(root2, children) {
        if (injectedHook && typeof injectedHook.onScheduleFiberRoot == "function")
          try {
            injectedHook.onScheduleFiberRoot(rendererID, root2, children);
          } catch (err) {
            hasLoggedError || (hasLoggedError = !0, error("React instrumentation encountered an error: %s", err));
          }
      }
      function onCommitRoot(root2, eventPriority) {
        if (injectedHook && typeof injectedHook.onCommitFiberRoot == "function")
          try {
            var didError = (root2.current.flags & DidCapture) === DidCapture;
            if (enableProfilerTimer) {
              var schedulerPriority;
              switch (eventPriority) {
                case DiscreteEventPriority:
                  schedulerPriority = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriority = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriority = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriority = IdlePriority;
                  break;
                default:
                  schedulerPriority = NormalPriority;
                  break;
              }
              injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
            } else
              injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
          } catch (err) {
            hasLoggedError || (hasLoggedError = !0, error("React instrumentation encountered an error: %s", err));
          }
      }
      function onPostCommitRoot(root2) {
        if (injectedHook && typeof injectedHook.onPostCommitFiberRoot == "function")
          try {
            injectedHook.onPostCommitFiberRoot(rendererID, root2);
          } catch (err) {
            hasLoggedError || (hasLoggedError = !0, error("React instrumentation encountered an error: %s", err));
          }
      }
      function onCommitUnmount(fiber) {
        if (injectedHook && typeof injectedHook.onCommitFiberUnmount == "function")
          try {
            injectedHook.onCommitFiberUnmount(rendererID, fiber);
          } catch (err) {
            hasLoggedError || (hasLoggedError = !0, error("React instrumentation encountered an error: %s", err));
          }
      }
      function setIsStrictModeForDevtools(newIsStrictMode) {
        if (typeof unstable_yieldValue == "function" && (unstable_setDisableYieldValue(newIsStrictMode), setSuppressWarning(newIsStrictMode)), injectedHook && typeof injectedHook.setStrictMode == "function")
          try {
            injectedHook.setStrictMode(rendererID, newIsStrictMode);
          } catch (err) {
            hasLoggedError || (hasLoggedError = !0, error("React instrumentation encountered an error: %s", err));
          }
      }
      function injectProfilingHooks(profilingHooks) {
        injectedProfilingHooks = profilingHooks;
      }
      function getLaneLabelMap() {
        {
          for (var map = /* @__PURE__ */ new Map(), lane = 1, index2 = 0; index2 < TotalLanes; index2++) {
            var label = getLabelForLane(lane);
            map.set(lane, label), lane *= 2;
          }
          return map;
        }
      }
      function markCommitStarted(lanes) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted == "function" && injectedProfilingHooks.markCommitStarted(lanes);
      }
      function markCommitStopped() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped == "function" && injectedProfilingHooks.markCommitStopped();
      }
      function markComponentRenderStarted(fiber) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted == "function" && injectedProfilingHooks.markComponentRenderStarted(fiber);
      }
      function markComponentRenderStopped() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped == "function" && injectedProfilingHooks.markComponentRenderStopped();
      }
      function markComponentPassiveEffectMountStarted(fiber) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted == "function" && injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
      }
      function markComponentPassiveEffectMountStopped() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped == "function" && injectedProfilingHooks.markComponentPassiveEffectMountStopped();
      }
      function markComponentPassiveEffectUnmountStarted(fiber) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted == "function" && injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
      }
      function markComponentPassiveEffectUnmountStopped() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped == "function" && injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
      }
      function markComponentLayoutEffectMountStarted(fiber) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted == "function" && injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
      }
      function markComponentLayoutEffectMountStopped() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped == "function" && injectedProfilingHooks.markComponentLayoutEffectMountStopped();
      }
      function markComponentLayoutEffectUnmountStarted(fiber) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted == "function" && injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
      }
      function markComponentLayoutEffectUnmountStopped() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped == "function" && injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
      }
      function markComponentErrored(fiber, thrownValue, lanes) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored == "function" && injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
      }
      function markComponentSuspended(fiber, wakeable, lanes) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended == "function" && injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
      }
      function markLayoutEffectsStarted(lanes) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted == "function" && injectedProfilingHooks.markLayoutEffectsStarted(lanes);
      }
      function markLayoutEffectsStopped() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped == "function" && injectedProfilingHooks.markLayoutEffectsStopped();
      }
      function markPassiveEffectsStarted(lanes) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted == "function" && injectedProfilingHooks.markPassiveEffectsStarted(lanes);
      }
      function markPassiveEffectsStopped() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped == "function" && injectedProfilingHooks.markPassiveEffectsStopped();
      }
      function markRenderStarted(lanes) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted == "function" && injectedProfilingHooks.markRenderStarted(lanes);
      }
      function markRenderYielded() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded == "function" && injectedProfilingHooks.markRenderYielded();
      }
      function markRenderStopped() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped == "function" && injectedProfilingHooks.markRenderStopped();
      }
      function markRenderScheduled(lane) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled == "function" && injectedProfilingHooks.markRenderScheduled(lane);
      }
      function markForceUpdateScheduled(fiber, lane) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled == "function" && injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
      }
      function markStateUpdateScheduled(fiber, lane) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled == "function" && injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
      }
      var NoMode = (
        /*                         */
        0
      ), ConcurrentMode = (
        /*                 */
        1
      ), ProfileMode = (
        /*                    */
        2
      ), StrictLegacyMode = (
        /*               */
        8
      ), StrictEffectsMode = (
        /*              */
        16
      ), clz32 = Math.clz32 ? Math.clz32 : clz32Fallback, log = Math.log, LN2 = Math.LN2;
      function clz32Fallback(x) {
        var asUint = x >>> 0;
        return asUint === 0 ? 32 : 31 - (log(asUint) / LN2 | 0) | 0;
      }
      var TotalLanes = 31, NoLanes = (
        /*                        */
        0
      ), NoLane = (
        /*                          */
        0
      ), SyncLane = (
        /*                        */
        1
      ), InputContinuousHydrationLane = (
        /*    */
        2
      ), InputContinuousLane = (
        /*             */
        4
      ), DefaultHydrationLane = (
        /*            */
        8
      ), DefaultLane = (
        /*                     */
        16
      ), TransitionHydrationLane = (
        /*                */
        32
      ), TransitionLanes = (
        /*                       */
        4194240
      ), TransitionLane1 = (
        /*                        */
        64
      ), TransitionLane2 = (
        /*                        */
        128
      ), TransitionLane3 = (
        /*                        */
        256
      ), TransitionLane4 = (
        /*                        */
        512
      ), TransitionLane5 = (
        /*                        */
        1024
      ), TransitionLane6 = (
        /*                        */
        2048
      ), TransitionLane7 = (
        /*                        */
        4096
      ), TransitionLane8 = (
        /*                        */
        8192
      ), TransitionLane9 = (
        /*                        */
        16384
      ), TransitionLane10 = (
        /*                       */
        32768
      ), TransitionLane11 = (
        /*                       */
        65536
      ), TransitionLane12 = (
        /*                       */
        131072
      ), TransitionLane13 = (
        /*                       */
        262144
      ), TransitionLane14 = (
        /*                       */
        524288
      ), TransitionLane15 = (
        /*                       */
        1048576
      ), TransitionLane16 = (
        /*                       */
        2097152
      ), RetryLanes = (
        /*                            */
        130023424
      ), RetryLane1 = (
        /*                             */
        4194304
      ), RetryLane2 = (
        /*                             */
        8388608
      ), RetryLane3 = (
        /*                             */
        16777216
      ), RetryLane4 = (
        /*                             */
        33554432
      ), RetryLane5 = (
        /*                             */
        67108864
      ), SomeRetryLane = RetryLane1, SelectiveHydrationLane = (
        /*          */
        134217728
      ), NonIdleLanes = (
        /*                          */
        268435455
      ), IdleHydrationLane = (
        /*               */
        268435456
      ), IdleLane = (
        /*                        */
        536870912
      ), OffscreenLane = (
        /*                   */
        1073741824
      );
      function getLabelForLane(lane) {
        {
          if (lane & SyncLane)
            return "Sync";
          if (lane & InputContinuousHydrationLane)
            return "InputContinuousHydration";
          if (lane & InputContinuousLane)
            return "InputContinuous";
          if (lane & DefaultHydrationLane)
            return "DefaultHydration";
          if (lane & DefaultLane)
            return "Default";
          if (lane & TransitionHydrationLane)
            return "TransitionHydration";
          if (lane & TransitionLanes)
            return "Transition";
          if (lane & RetryLanes)
            return "Retry";
          if (lane & SelectiveHydrationLane)
            return "SelectiveHydration";
          if (lane & IdleHydrationLane)
            return "IdleHydration";
          if (lane & IdleLane)
            return "Idle";
          if (lane & OffscreenLane)
            return "Offscreen";
        }
      }
      var NoTimestamp = -1, nextTransitionLane = TransitionLane1, nextRetryLane = RetryLane1;
      function getHighestPriorityLanes(lanes) {
        switch (getHighestPriorityLane(lanes)) {
          case SyncLane:
            return SyncLane;
          case InputContinuousHydrationLane:
            return InputContinuousHydrationLane;
          case InputContinuousLane:
            return InputContinuousLane;
          case DefaultHydrationLane:
            return DefaultHydrationLane;
          case DefaultLane:
            return DefaultLane;
          case TransitionHydrationLane:
            return TransitionHydrationLane;
          case TransitionLane1:
          case TransitionLane2:
          case TransitionLane3:
          case TransitionLane4:
          case TransitionLane5:
          case TransitionLane6:
          case TransitionLane7:
          case TransitionLane8:
          case TransitionLane9:
          case TransitionLane10:
          case TransitionLane11:
          case TransitionLane12:
          case TransitionLane13:
          case TransitionLane14:
          case TransitionLane15:
          case TransitionLane16:
            return lanes & TransitionLanes;
          case RetryLane1:
          case RetryLane2:
          case RetryLane3:
          case RetryLane4:
          case RetryLane5:
            return lanes & RetryLanes;
          case SelectiveHydrationLane:
            return SelectiveHydrationLane;
          case IdleHydrationLane:
            return IdleHydrationLane;
          case IdleLane:
            return IdleLane;
          case OffscreenLane:
            return OffscreenLane;
          default:
            return error("Should have found matching lanes. This is a bug in React."), lanes;
        }
      }
      function getNextLanes(root2, wipLanes) {
        var pendingLanes = root2.pendingLanes;
        if (pendingLanes === NoLanes)
          return NoLanes;
        var nextLanes = NoLanes, suspendedLanes = root2.suspendedLanes, pingedLanes = root2.pingedLanes, nonIdlePendingLanes = pendingLanes & NonIdleLanes;
        if (nonIdlePendingLanes !== NoLanes) {
          var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
          if (nonIdleUnblockedLanes !== NoLanes)
            nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
          else {
            var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
            nonIdlePingedLanes !== NoLanes && (nextLanes = getHighestPriorityLanes(nonIdlePingedLanes));
          }
        } else {
          var unblockedLanes = pendingLanes & ~suspendedLanes;
          unblockedLanes !== NoLanes ? nextLanes = getHighestPriorityLanes(unblockedLanes) : pingedLanes !== NoLanes && (nextLanes = getHighestPriorityLanes(pingedLanes));
        }
        if (nextLanes === NoLanes)
          return NoLanes;
        if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
        // bother waiting until the root is complete.
        (wipLanes & suspendedLanes) === NoLanes) {
          var nextLane = getHighestPriorityLane(nextLanes), wipLane = getHighestPriorityLane(wipLanes);
          if (
            // Tests whether the next lane is equal or lower priority than the wip
            // one. This works because the bits decrease in priority as you go left.
            nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
            // only difference between default updates and transition updates is that
            // default updates do not support refresh transitions.
            nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
          )
            return wipLanes;
        }
        (nextLanes & InputContinuousLane) !== NoLanes && (nextLanes |= pendingLanes & DefaultLane);
        var entangledLanes = root2.entangledLanes;
        if (entangledLanes !== NoLanes)
          for (var entanglements = root2.entanglements, lanes = nextLanes & entangledLanes; lanes > 0; ) {
            var index2 = pickArbitraryLaneIndex(lanes), lane = 1 << index2;
            nextLanes |= entanglements[index2], lanes &= ~lane;
          }
        return nextLanes;
      }
      function getMostRecentEventTime(root2, lanes) {
        for (var eventTimes = root2.eventTimes, mostRecentEventTime = NoTimestamp; lanes > 0; ) {
          var index2 = pickArbitraryLaneIndex(lanes), lane = 1 << index2, eventTime = eventTimes[index2];
          eventTime > mostRecentEventTime && (mostRecentEventTime = eventTime), lanes &= ~lane;
        }
        return mostRecentEventTime;
      }
      function computeExpirationTime(lane, currentTime) {
        switch (lane) {
          case SyncLane:
          case InputContinuousHydrationLane:
          case InputContinuousLane:
            return currentTime + 250;
          case DefaultHydrationLane:
          case DefaultLane:
          case TransitionHydrationLane:
          case TransitionLane1:
          case TransitionLane2:
          case TransitionLane3:
          case TransitionLane4:
          case TransitionLane5:
          case TransitionLane6:
          case TransitionLane7:
          case TransitionLane8:
          case TransitionLane9:
          case TransitionLane10:
          case TransitionLane11:
          case TransitionLane12:
          case TransitionLane13:
          case TransitionLane14:
          case TransitionLane15:
          case TransitionLane16:
            return currentTime + 5e3;
          case RetryLane1:
          case RetryLane2:
          case RetryLane3:
          case RetryLane4:
          case RetryLane5:
            return NoTimestamp;
          case SelectiveHydrationLane:
          case IdleHydrationLane:
          case IdleLane:
          case OffscreenLane:
            return NoTimestamp;
          default:
            return error("Should have found matching lanes. This is a bug in React."), NoTimestamp;
        }
      }
      function markStarvedLanesAsExpired(root2, currentTime) {
        for (var pendingLanes = root2.pendingLanes, suspendedLanes = root2.suspendedLanes, pingedLanes = root2.pingedLanes, expirationTimes = root2.expirationTimes, lanes = pendingLanes; lanes > 0; ) {
          var index2 = pickArbitraryLaneIndex(lanes), lane = 1 << index2, expirationTime = expirationTimes[index2];
          expirationTime === NoTimestamp ? ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) && (expirationTimes[index2] = computeExpirationTime(lane, currentTime)) : expirationTime <= currentTime && (root2.expiredLanes |= lane), lanes &= ~lane;
        }
      }
      function getHighestPriorityPendingLanes(root2) {
        return getHighestPriorityLanes(root2.pendingLanes);
      }
      function getLanesToRetrySynchronouslyOnError(root2) {
        var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
        return everythingButOffscreen !== NoLanes ? everythingButOffscreen : everythingButOffscreen & OffscreenLane ? OffscreenLane : NoLanes;
      }
      function includesSyncLane(lanes) {
        return (lanes & SyncLane) !== NoLanes;
      }
      function includesNonIdleWork(lanes) {
        return (lanes & NonIdleLanes) !== NoLanes;
      }
      function includesOnlyRetries(lanes) {
        return (lanes & RetryLanes) === lanes;
      }
      function includesOnlyNonUrgentLanes(lanes) {
        var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
        return (lanes & UrgentLanes) === NoLanes;
      }
      function includesOnlyTransitions(lanes) {
        return (lanes & TransitionLanes) === lanes;
      }
      function includesBlockingLane(root2, lanes) {
        var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
        return (lanes & SyncDefaultLanes) !== NoLanes;
      }
      function includesExpiredLane(root2, lanes) {
        return (lanes & root2.expiredLanes) !== NoLanes;
      }
      function isTransitionLane(lane) {
        return (lane & TransitionLanes) !== NoLanes;
      }
      function claimNextTransitionLane() {
        var lane = nextTransitionLane;
        return nextTransitionLane <<= 1, (nextTransitionLane & TransitionLanes) === NoLanes && (nextTransitionLane = TransitionLane1), lane;
      }
      function claimNextRetryLane() {
        var lane = nextRetryLane;
        return nextRetryLane <<= 1, (nextRetryLane & RetryLanes) === NoLanes && (nextRetryLane = RetryLane1), lane;
      }
      function getHighestPriorityLane(lanes) {
        return lanes & -lanes;
      }
      function pickArbitraryLane(lanes) {
        return getHighestPriorityLane(lanes);
      }
      function pickArbitraryLaneIndex(lanes) {
        return 31 - clz32(lanes);
      }
      function laneToIndex(lane) {
        return pickArbitraryLaneIndex(lane);
      }
      function includesSomeLane(a, b) {
        return (a & b) !== NoLanes;
      }
      function isSubsetOfLanes(set2, subset) {
        return (set2 & subset) === subset;
      }
      function mergeLanes(a, b) {
        return a | b;
      }
      function removeLanes(set2, subset) {
        return set2 & ~subset;
      }
      function intersectLanes(a, b) {
        return a & b;
      }
      function laneToLanes(lane) {
        return lane;
      }
      function higherPriorityLane(a, b) {
        return a !== NoLane && a < b ? a : b;
      }
      function createLaneMap(initial) {
        for (var laneMap = [], i = 0; i < TotalLanes; i++)
          laneMap.push(initial);
        return laneMap;
      }
      function markRootUpdated(root2, updateLane, eventTime) {
        root2.pendingLanes |= updateLane, updateLane !== IdleLane && (root2.suspendedLanes = NoLanes, root2.pingedLanes = NoLanes);
        var eventTimes = root2.eventTimes, index2 = laneToIndex(updateLane);
        eventTimes[index2] = eventTime;
      }
      function markRootSuspended(root2, suspendedLanes) {
        root2.suspendedLanes |= suspendedLanes, root2.pingedLanes &= ~suspendedLanes;
        for (var expirationTimes = root2.expirationTimes, lanes = suspendedLanes; lanes > 0; ) {
          var index2 = pickArbitraryLaneIndex(lanes), lane = 1 << index2;
          expirationTimes[index2] = NoTimestamp, lanes &= ~lane;
        }
      }
      function markRootPinged(root2, pingedLanes, eventTime) {
        root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
      }
      function markRootFinished(root2, remainingLanes) {
        var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
        root2.pendingLanes = remainingLanes, root2.suspendedLanes = NoLanes, root2.pingedLanes = NoLanes, root2.expiredLanes &= remainingLanes, root2.mutableReadLanes &= remainingLanes, root2.entangledLanes &= remainingLanes;
        for (var entanglements = root2.entanglements, eventTimes = root2.eventTimes, expirationTimes = root2.expirationTimes, lanes = noLongerPendingLanes; lanes > 0; ) {
          var index2 = pickArbitraryLaneIndex(lanes), lane = 1 << index2;
          entanglements[index2] = NoLanes, eventTimes[index2] = NoTimestamp, expirationTimes[index2] = NoTimestamp, lanes &= ~lane;
        }
      }
      function markRootEntangled(root2, entangledLanes) {
        for (var rootEntangledLanes = root2.entangledLanes |= entangledLanes, entanglements = root2.entanglements, lanes = rootEntangledLanes; lanes; ) {
          var index2 = pickArbitraryLaneIndex(lanes), lane = 1 << index2;
          // Is this one of the newly entangled lanes?
          lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
          entanglements[index2] & entangledLanes && (entanglements[index2] |= entangledLanes), lanes &= ~lane;
        }
      }
      function getBumpedLaneForHydration(root2, renderLanes2) {
        var renderLane = getHighestPriorityLane(renderLanes2), lane;
        switch (renderLane) {
          case InputContinuousLane:
            lane = InputContinuousHydrationLane;
            break;
          case DefaultLane:
            lane = DefaultHydrationLane;
            break;
          case TransitionLane1:
          case TransitionLane2:
          case TransitionLane3:
          case TransitionLane4:
          case TransitionLane5:
          case TransitionLane6:
          case TransitionLane7:
          case TransitionLane8:
          case TransitionLane9:
          case TransitionLane10:
          case TransitionLane11:
          case TransitionLane12:
          case TransitionLane13:
          case TransitionLane14:
          case TransitionLane15:
          case TransitionLane16:
          case RetryLane1:
          case RetryLane2:
          case RetryLane3:
          case RetryLane4:
          case RetryLane5:
            lane = TransitionHydrationLane;
            break;
          case IdleLane:
            lane = IdleHydrationLane;
            break;
          default:
            lane = NoLane;
            break;
        }
        return (lane & (root2.suspendedLanes | renderLanes2)) !== NoLane ? NoLane : lane;
      }
      function addFiberToLanesMap(root2, fiber, lanes) {
        if (isDevToolsPresent)
          for (var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap; lanes > 0; ) {
            var index2 = laneToIndex(lanes), lane = 1 << index2, updaters = pendingUpdatersLaneMap[index2];
            updaters.add(fiber), lanes &= ~lane;
          }
      }
      function movePendingFibersToMemoized(root2, lanes) {
        if (isDevToolsPresent)
          for (var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap, memoizedUpdaters = root2.memoizedUpdaters; lanes > 0; ) {
            var index2 = laneToIndex(lanes), lane = 1 << index2, updaters = pendingUpdatersLaneMap[index2];
            updaters.size > 0 && (updaters.forEach(function(fiber) {
              var alternate = fiber.alternate;
              (alternate === null || !memoizedUpdaters.has(alternate)) && memoizedUpdaters.add(fiber);
            }), updaters.clear()), lanes &= ~lane;
          }
      }
      function getTransitionsForLanes(root2, lanes) {
        return null;
      }
      var DiscreteEventPriority = SyncLane, ContinuousEventPriority = InputContinuousLane, DefaultEventPriority = DefaultLane, IdleEventPriority = IdleLane, currentUpdatePriority = NoLane;
      function getCurrentUpdatePriority() {
        return currentUpdatePriority;
      }
      function setCurrentUpdatePriority(newPriority) {
        currentUpdatePriority = newPriority;
      }
      function runWithPriority(priority, fn) {
        var previousPriority = currentUpdatePriority;
        try {
          return currentUpdatePriority = priority, fn();
        } finally {
          currentUpdatePriority = previousPriority;
        }
      }
      function higherEventPriority(a, b) {
        return a !== 0 && a < b ? a : b;
      }
      function lowerEventPriority(a, b) {
        return a === 0 || a > b ? a : b;
      }
      function isHigherEventPriority(a, b) {
        return a !== 0 && a < b;
      }
      function lanesToEventPriority(lanes) {
        var lane = getHighestPriorityLane(lanes);
        return isHigherEventPriority(DiscreteEventPriority, lane) ? isHigherEventPriority(ContinuousEventPriority, lane) ? includesNonIdleWork(lane) ? DefaultEventPriority : IdleEventPriority : ContinuousEventPriority : DiscreteEventPriority;
      }
      function isRootDehydrated(root2) {
        var currentState = root2.current.memoizedState;
        return currentState.isDehydrated;
      }
      var _attemptSynchronousHydration;
      function setAttemptSynchronousHydration(fn) {
        _attemptSynchronousHydration = fn;
      }
      function attemptSynchronousHydration(fiber) {
        _attemptSynchronousHydration(fiber);
      }
      var attemptContinuousHydration;
      function setAttemptContinuousHydration(fn) {
        attemptContinuousHydration = fn;
      }
      var attemptHydrationAtCurrentPriority;
      function setAttemptHydrationAtCurrentPriority(fn) {
        attemptHydrationAtCurrentPriority = fn;
      }
      var getCurrentUpdatePriority$1;
      function setGetCurrentUpdatePriority(fn) {
        getCurrentUpdatePriority$1 = fn;
      }
      var attemptHydrationAtPriority;
      function setAttemptHydrationAtPriority(fn) {
        attemptHydrationAtPriority = fn;
      }
      var hasScheduledReplayAttempt = !1, queuedDiscreteEvents = [], queuedFocus = null, queuedDrag = null, queuedMouse = null, queuedPointers = /* @__PURE__ */ new Map(), queuedPointerCaptures = /* @__PURE__ */ new Map(), queuedExplicitHydrationTargets = [], discreteReplayableEvents = [
        "mousedown",
        "mouseup",
        "touchcancel",
        "touchend",
        "touchstart",
        "auxclick",
        "dblclick",
        "pointercancel",
        "pointerdown",
        "pointerup",
        "dragend",
        "dragstart",
        "drop",
        "compositionend",
        "compositionstart",
        "keydown",
        "keypress",
        "keyup",
        "input",
        "textInput",
        // Intentionally camelCase
        "copy",
        "cut",
        "paste",
        "click",
        "change",
        "contextmenu",
        "reset",
        "submit"
      ];
      function isDiscreteEventThatRequiresHydration(eventType) {
        return discreteReplayableEvents.indexOf(eventType) > -1;
      }
      function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return {
          blockedOn,
          domEventName,
          eventSystemFlags,
          nativeEvent,
          targetContainers: [targetContainer]
        };
      }
      function clearIfContinuousEvent(domEventName, nativeEvent) {
        switch (domEventName) {
          case "focusin":
          case "focusout":
            queuedFocus = null;
            break;
          case "dragenter":
          case "dragleave":
            queuedDrag = null;
            break;
          case "mouseover":
          case "mouseout":
            queuedMouse = null;
            break;
          case "pointerover":
          case "pointerout": {
            var pointerId = nativeEvent.pointerId;
            queuedPointers.delete(pointerId);
            break;
          }
          case "gotpointercapture":
          case "lostpointercapture": {
            var _pointerId = nativeEvent.pointerId;
            queuedPointerCaptures.delete(_pointerId);
            break;
          }
        }
      }
      function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
          var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (blockedOn !== null) {
            var _fiber2 = getInstanceFromNode(blockedOn);
            _fiber2 !== null && attemptContinuousHydration(_fiber2);
          }
          return queuedEvent;
        }
        existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
        var targetContainers = existingQueuedEvent.targetContainers;
        return targetContainer !== null && targetContainers.indexOf(targetContainer) === -1 && targetContainers.push(targetContainer), existingQueuedEvent;
      }
      function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        switch (domEventName) {
          case "focusin": {
            var focusEvent = nativeEvent;
            return queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent), !0;
          }
          case "dragenter": {
            var dragEvent = nativeEvent;
            return queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent), !0;
          }
          case "mouseover": {
            var mouseEvent = nativeEvent;
            return queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent), !0;
          }
          case "pointerover": {
            var pointerEvent = nativeEvent, pointerId = pointerEvent.pointerId;
            return queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent)), !0;
          }
          case "gotpointercapture": {
            var _pointerEvent = nativeEvent, _pointerId2 = _pointerEvent.pointerId;
            return queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent)), !0;
          }
        }
        return !1;
      }
      function attemptExplicitHydrationTarget(queuedTarget) {
        var targetInst = getClosestInstanceFromNode(queuedTarget.target);
        if (targetInst !== null) {
          var nearestMounted = getNearestMountedFiber(targetInst);
          if (nearestMounted !== null) {
            var tag = nearestMounted.tag;
            if (tag === SuspenseComponent) {
              var instance = getSuspenseInstanceFromFiber(nearestMounted);
              if (instance !== null) {
                queuedTarget.blockedOn = instance, attemptHydrationAtPriority(queuedTarget.priority, function() {
                  attemptHydrationAtCurrentPriority(nearestMounted);
                });
                return;
              }
            } else if (tag === HostRoot) {
              var root2 = nearestMounted.stateNode;
              if (isRootDehydrated(root2)) {
                queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                return;
              }
            }
          }
        }
        queuedTarget.blockedOn = null;
      }
      function queueExplicitHydrationTarget(target) {
        for (var updatePriority = getCurrentUpdatePriority$1(), queuedTarget = {
          blockedOn: null,
          target,
          priority: updatePriority
        }, i = 0; i < queuedExplicitHydrationTargets.length && isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority); i++)
          ;
        queuedExplicitHydrationTargets.splice(i, 0, queuedTarget), i === 0 && attemptExplicitHydrationTarget(queuedTarget);
      }
      function attemptReplayContinuousQueuedEvent(queuedEvent) {
        if (queuedEvent.blockedOn !== null)
          return !1;
        for (var targetContainers = queuedEvent.targetContainers; targetContainers.length > 0; ) {
          var targetContainer = targetContainers[0], nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
          if (nextBlockedOn === null) {
            var nativeEvent = queuedEvent.nativeEvent, nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
            setReplayingEvent(nativeEventClone), nativeEvent.target.dispatchEvent(nativeEventClone), resetReplayingEvent();
          } else {
            var _fiber3 = getInstanceFromNode(nextBlockedOn);
            return _fiber3 !== null && attemptContinuousHydration(_fiber3), queuedEvent.blockedOn = nextBlockedOn, !1;
          }
          targetContainers.shift();
        }
        return !0;
      }
      function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
        attemptReplayContinuousQueuedEvent(queuedEvent) && map.delete(key);
      }
      function replayUnblockedEvents() {
        hasScheduledReplayAttempt = !1, queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus) && (queuedFocus = null), queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag) && (queuedDrag = null), queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse) && (queuedMouse = null), queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap), queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
      }
      function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        queuedEvent.blockedOn === unblocked && (queuedEvent.blockedOn = null, hasScheduledReplayAttempt || (hasScheduledReplayAttempt = !0, Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents)));
      }
      function retryIfBlockedOn(unblocked) {
        if (queuedDiscreteEvents.length > 0) {
          scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
          for (var i = 1; i < queuedDiscreteEvents.length; i++) {
            var queuedEvent = queuedDiscreteEvents[i];
            queuedEvent.blockedOn === unblocked && (queuedEvent.blockedOn = null);
          }
        }
        queuedFocus !== null && scheduleCallbackIfUnblocked(queuedFocus, unblocked), queuedDrag !== null && scheduleCallbackIfUnblocked(queuedDrag, unblocked), queuedMouse !== null && scheduleCallbackIfUnblocked(queuedMouse, unblocked);
        var unblock = function(queuedEvent2) {
          return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
        };
        queuedPointers.forEach(unblock), queuedPointerCaptures.forEach(unblock);
        for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
          var queuedTarget = queuedExplicitHydrationTargets[_i];
          queuedTarget.blockedOn === unblocked && (queuedTarget.blockedOn = null);
        }
        for (; queuedExplicitHydrationTargets.length > 0; ) {
          var nextExplicitTarget = queuedExplicitHydrationTargets[0];
          if (nextExplicitTarget.blockedOn !== null)
            break;
          attemptExplicitHydrationTarget(nextExplicitTarget), nextExplicitTarget.blockedOn === null && queuedExplicitHydrationTargets.shift();
        }
      }
      var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig, _enabled = !0;
      function setEnabled(enabled) {
        _enabled = !!enabled;
      }
      function isEnabled() {
        return _enabled;
      }
      function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
        var eventPriority = getEventPriority(domEventName), listenerWrapper;
        switch (eventPriority) {
          case DiscreteEventPriority:
            listenerWrapper = dispatchDiscreteEvent;
            break;
          case ContinuousEventPriority:
            listenerWrapper = dispatchContinuousEvent;
            break;
          case DefaultEventPriority:
          default:
            listenerWrapper = dispatchEvent;
            break;
        }
        return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
      }
      function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var previousPriority = getCurrentUpdatePriority(), prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = null;
        try {
          setCurrentUpdatePriority(DiscreteEventPriority), dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally {
          setCurrentUpdatePriority(previousPriority), ReactCurrentBatchConfig.transition = prevTransition;
        }
      }
      function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var previousPriority = getCurrentUpdatePriority(), prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = null;
        try {
          setCurrentUpdatePriority(ContinuousEventPriority), dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally {
          setCurrentUpdatePriority(previousPriority), ReactCurrentBatchConfig.transition = prevTransition;
        }
      }
      function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        _enabled && dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
      }
      function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
        if (blockedOn === null) {
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer), clearIfContinuousEvent(domEventName, nativeEvent);
          return;
        }
        if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
          nativeEvent.stopPropagation();
          return;
        }
        if (clearIfContinuousEvent(domEventName, nativeEvent), eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
          for (; blockedOn !== null; ) {
            var fiber = getInstanceFromNode(blockedOn);
            fiber !== null && attemptSynchronousHydration(fiber);
            var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (nextBlockedOn === null && dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer), nextBlockedOn === blockedOn)
              break;
            blockedOn = nextBlockedOn;
          }
          blockedOn !== null && nativeEvent.stopPropagation();
          return;
        }
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
      }
      var return_targetInst = null;
      function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return_targetInst = null;
        var nativeEventTarget = getEventTarget(nativeEvent), targetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (targetInst !== null) {
          var nearestMounted = getNearestMountedFiber(targetInst);
          if (nearestMounted === null)
            targetInst = null;
          else {
            var tag = nearestMounted.tag;
            if (tag === SuspenseComponent) {
              var instance = getSuspenseInstanceFromFiber(nearestMounted);
              if (instance !== null)
                return instance;
              targetInst = null;
            } else if (tag === HostRoot) {
              var root2 = nearestMounted.stateNode;
              if (isRootDehydrated(root2))
                return getContainerFromFiber(nearestMounted);
              targetInst = null;
            } else
              nearestMounted !== targetInst && (targetInst = null);
          }
        }
        return return_targetInst = targetInst, null;
      }
      function getEventPriority(domEventName) {
        switch (domEventName) {
          case "cancel":
          case "click":
          case "close":
          case "contextmenu":
          case "copy":
          case "cut":
          case "auxclick":
          case "dblclick":
          case "dragend":
          case "dragstart":
          case "drop":
          case "focusin":
          case "focusout":
          case "input":
          case "invalid":
          case "keydown":
          case "keypress":
          case "keyup":
          case "mousedown":
          case "mouseup":
          case "paste":
          case "pause":
          case "play":
          case "pointercancel":
          case "pointerdown":
          case "pointerup":
          case "ratechange":
          case "reset":
          case "resize":
          case "seeked":
          case "submit":
          case "touchcancel":
          case "touchend":
          case "touchstart":
          case "volumechange":
          case "change":
          case "selectionchange":
          case "textInput":
          case "compositionstart":
          case "compositionend":
          case "compositionupdate":
          case "beforeblur":
          case "afterblur":
          case "beforeinput":
          case "blur":
          case "fullscreenchange":
          case "focus":
          case "hashchange":
          case "popstate":
          case "select":
          case "selectstart":
            return DiscreteEventPriority;
          case "drag":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "mousemove":
          case "mouseout":
          case "mouseover":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "scroll":
          case "toggle":
          case "touchmove":
          case "wheel":
          case "mouseenter":
          case "mouseleave":
          case "pointerenter":
          case "pointerleave":
            return ContinuousEventPriority;
          case "message": {
            var schedulerPriority = getCurrentPriorityLevel();
            switch (schedulerPriority) {
              case ImmediatePriority:
                return DiscreteEventPriority;
              case UserBlockingPriority:
                return ContinuousEventPriority;
              case NormalPriority:
              case LowPriority:
                return DefaultEventPriority;
              case IdlePriority:
                return IdleEventPriority;
              default:
                return DefaultEventPriority;
            }
          }
          default:
            return DefaultEventPriority;
        }
      }
      function addEventBubbleListener(target, eventType, listener) {
        return target.addEventListener(eventType, listener, !1), listener;
      }
      function addEventCaptureListener(target, eventType, listener) {
        return target.addEventListener(eventType, listener, !0), listener;
      }
      function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
        return target.addEventListener(eventType, listener, {
          capture: !0,
          passive
        }), listener;
      }
      function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
        return target.addEventListener(eventType, listener, {
          passive
        }), listener;
      }
      var root = null, startText = null, fallbackText = null;
      function initialize(nativeEventTarget) {
        return root = nativeEventTarget, startText = getText(), !0;
      }
      function reset() {
        root = null, startText = null, fallbackText = null;
      }
      function getData() {
        if (fallbackText)
          return fallbackText;
        var start, startValue = startText, startLength = startValue.length, end, endValue = getText(), endLength = endValue.length;
        for (start = 0; start < startLength && startValue[start] === endValue[start]; start++)
          ;
        var minEnd = startLength - start;
        for (end = 1; end <= minEnd && startValue[startLength - end] === endValue[endLength - end]; end++)
          ;
        var sliceTail = end > 1 ? 1 - end : void 0;
        return fallbackText = endValue.slice(start, sliceTail), fallbackText;
      }
      function getText() {
        return "value" in root ? root.value : root.textContent;
      }
      function getEventCharCode(nativeEvent) {
        var charCode, keyCode = nativeEvent.keyCode;
        return "charCode" in nativeEvent ? (charCode = nativeEvent.charCode, charCode === 0 && keyCode === 13 && (charCode = 13)) : charCode = keyCode, charCode === 10 && (charCode = 13), charCode >= 32 || charCode === 13 ? charCode : 0;
      }
      function functionThatReturnsTrue() {
        return !0;
      }
      function functionThatReturnsFalse() {
        return !1;
      }
      function createSyntheticEvent(Interface) {
        function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
          this._reactName = reactName, this._targetInst = targetInst, this.type = reactEventType, this.nativeEvent = nativeEvent, this.target = nativeEventTarget, this.currentTarget = null;
          for (var _propName in Interface)
            if (Interface.hasOwnProperty(_propName)) {
              var normalize = Interface[_propName];
              normalize ? this[_propName] = normalize(nativeEvent) : this[_propName] = nativeEvent[_propName];
            }
          var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === !1;
          return defaultPrevented ? this.isDefaultPrevented = functionThatReturnsTrue : this.isDefaultPrevented = functionThatReturnsFalse, this.isPropagationStopped = functionThatReturnsFalse, this;
        }
        return assign(SyntheticBaseEvent.prototype, {
          preventDefault: function() {
            this.defaultPrevented = !0;
            var event = this.nativeEvent;
            event && (event.preventDefault ? event.preventDefault() : typeof event.returnValue != "unknown" && (event.returnValue = !1), this.isDefaultPrevented = functionThatReturnsTrue);
          },
          stopPropagation: function() {
            var event = this.nativeEvent;
            event && (event.stopPropagation ? event.stopPropagation() : typeof event.cancelBubble != "unknown" && (event.cancelBubble = !0), this.isPropagationStopped = functionThatReturnsTrue);
          },
          /**
           * We release all dispatched `SyntheticEvent`s after each event loop, adding
           * them back into the pool. This allows a way to hold onto a reference that
           * won't be added back into the pool.
           */
          persist: function() {
          },
          /**
           * Checks if this event should be released back into the pool.
           *
           * @return {boolean} True if this should not be released, false otherwise.
           */
          isPersistent: functionThatReturnsTrue
        }), SyntheticBaseEvent;
      }
      var EventInterface = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function(event) {
          return event.timeStamp || Date.now();
        },
        defaultPrevented: 0,
        isTrusted: 0
      }, SyntheticEvent = createSyntheticEvent(EventInterface), UIEventInterface = assign({}, EventInterface, {
        view: 0,
        detail: 0
      }), SyntheticUIEvent = createSyntheticEvent(UIEventInterface), lastMovementX, lastMovementY, lastMouseEvent;
      function updateMouseMovementPolyfillState(event) {
        event !== lastMouseEvent && (lastMouseEvent && event.type === "mousemove" ? (lastMovementX = event.screenX - lastMouseEvent.screenX, lastMovementY = event.screenY - lastMouseEvent.screenY) : (lastMovementX = 0, lastMovementY = 0), lastMouseEvent = event);
      }
      var MouseEventInterface = assign({}, UIEventInterface, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: getEventModifierState,
        button: 0,
        buttons: 0,
        relatedTarget: function(event) {
          return event.relatedTarget === void 0 ? event.fromElement === event.srcElement ? event.toElement : event.fromElement : event.relatedTarget;
        },
        movementX: function(event) {
          return "movementX" in event ? event.movementX : (updateMouseMovementPolyfillState(event), lastMovementX);
        },
        movementY: function(event) {
          return "movementY" in event ? event.movementY : lastMovementY;
        }
      }), SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface), DragEventInterface = assign({}, MouseEventInterface, {
        dataTransfer: 0
      }), SyntheticDragEvent = createSyntheticEvent(DragEventInterface), FocusEventInterface = assign({}, UIEventInterface, {
        relatedTarget: 0
      }), SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface), AnimationEventInterface = assign({}, EventInterface, {
        animationName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      }), SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface), ClipboardEventInterface = assign({}, EventInterface, {
        clipboardData: function(event) {
          return "clipboardData" in event ? event.clipboardData : window.clipboardData;
        }
      }), SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface), CompositionEventInterface = assign({}, EventInterface, {
        data: 0
      }), SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface), SyntheticInputEvent = SyntheticCompositionEvent, normalizeKey = {
        Esc: "Escape",
        Spacebar: " ",
        Left: "ArrowLeft",
        Up: "ArrowUp",
        Right: "ArrowRight",
        Down: "ArrowDown",
        Del: "Delete",
        Win: "OS",
        Menu: "ContextMenu",
        Apps: "ContextMenu",
        Scroll: "ScrollLock",
        MozPrintableKey: "Unidentified"
      }, translateToKey = {
        8: "Backspace",
        9: "Tab",
        12: "Clear",
        13: "Enter",
        16: "Shift",
        17: "Control",
        18: "Alt",
        19: "Pause",
        20: "CapsLock",
        27: "Escape",
        32: " ",
        33: "PageUp",
        34: "PageDown",
        35: "End",
        36: "Home",
        37: "ArrowLeft",
        38: "ArrowUp",
        39: "ArrowRight",
        40: "ArrowDown",
        45: "Insert",
        46: "Delete",
        112: "F1",
        113: "F2",
        114: "F3",
        115: "F4",
        116: "F5",
        117: "F6",
        118: "F7",
        119: "F8",
        120: "F9",
        121: "F10",
        122: "F11",
        123: "F12",
        144: "NumLock",
        145: "ScrollLock",
        224: "Meta"
      };
      function getEventKey(nativeEvent) {
        if (nativeEvent.key) {
          var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
          if (key !== "Unidentified")
            return key;
        }
        if (nativeEvent.type === "keypress") {
          var charCode = getEventCharCode(nativeEvent);
          return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
        }
        return nativeEvent.type === "keydown" || nativeEvent.type === "keyup" ? translateToKey[nativeEvent.keyCode] || "Unidentified" : "";
      }
      var modifierKeyToProp = {
        Alt: "altKey",
        Control: "ctrlKey",
        Meta: "metaKey",
        Shift: "shiftKey"
      };
      function modifierStateGetter(keyArg) {
        var syntheticEvent = this, nativeEvent = syntheticEvent.nativeEvent;
        if (nativeEvent.getModifierState)
          return nativeEvent.getModifierState(keyArg);
        var keyProp = modifierKeyToProp[keyArg];
        return keyProp ? !!nativeEvent[keyProp] : !1;
      }
      function getEventModifierState(nativeEvent) {
        return modifierStateGetter;
      }
      var KeyboardEventInterface = assign({}, UIEventInterface, {
        key: getEventKey,
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: getEventModifierState,
        // Legacy Interface
        charCode: function(event) {
          return event.type === "keypress" ? getEventCharCode(event) : 0;
        },
        keyCode: function(event) {
          return event.type === "keydown" || event.type === "keyup" ? event.keyCode : 0;
        },
        which: function(event) {
          return event.type === "keypress" ? getEventCharCode(event) : event.type === "keydown" || event.type === "keyup" ? event.keyCode : 0;
        }
      }), SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface), PointerEventInterface = assign({}, MouseEventInterface, {
        pointerId: 0,
        width: 0,
        height: 0,
        pressure: 0,
        tangentialPressure: 0,
        tiltX: 0,
        tiltY: 0,
        twist: 0,
        pointerType: 0,
        isPrimary: 0
      }), SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface), TouchEventInterface = assign({}, UIEventInterface, {
        touches: 0,
        targetTouches: 0,
        changedTouches: 0,
        altKey: 0,
        metaKey: 0,
        ctrlKey: 0,
        shiftKey: 0,
        getModifierState: getEventModifierState
      }), SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface), TransitionEventInterface = assign({}, EventInterface, {
        propertyName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      }), SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface), WheelEventInterface = assign({}, MouseEventInterface, {
        deltaX: function(event) {
          return "deltaX" in event ? event.deltaX : (
            // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
            "wheelDeltaX" in event ? -event.wheelDeltaX : 0
          );
        },
        deltaY: function(event) {
          return "deltaY" in event ? event.deltaY : (
            // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
            "wheelDeltaY" in event ? -event.wheelDeltaY : (
              // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
              "wheelDelta" in event ? -event.wheelDelta : 0
            )
          );
        },
        deltaZ: 0,
        // Browsers without "deltaMode" is reporting in raw wheel delta where one
        // notch on the scroll is always +/- 120, roughly equivalent to pixels.
        // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
        // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
        deltaMode: 0
      }), SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface), END_KEYCODES = [9, 13, 27, 32], START_KEYCODE = 229, canUseCompositionEvent = canUseDOM && "CompositionEvent" in window, documentMode = null;
      canUseDOM && "documentMode" in document && (documentMode = document.documentMode);
      var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode, useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11), SPACEBAR_CODE = 32, SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
      function registerEvents() {
        registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]), registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]), registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]), registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
      }
      var hasSpaceKeypress = !1;
      function isKeypressCommand(nativeEvent) {
        return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
        !(nativeEvent.ctrlKey && nativeEvent.altKey);
      }
      function getCompositionEventType(domEventName) {
        switch (domEventName) {
          case "compositionstart":
            return "onCompositionStart";
          case "compositionend":
            return "onCompositionEnd";
          case "compositionupdate":
            return "onCompositionUpdate";
        }
      }
      function isFallbackCompositionStart(domEventName, nativeEvent) {
        return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
      }
      function isFallbackCompositionEnd(domEventName, nativeEvent) {
        switch (domEventName) {
          case "keyup":
            return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
          case "keydown":
            return nativeEvent.keyCode !== START_KEYCODE;
          case "keypress":
          case "mousedown":
          case "focusout":
            return !0;
          default:
            return !1;
        }
      }
      function getDataFromCustomEvent(nativeEvent) {
        var detail = nativeEvent.detail;
        return typeof detail == "object" && "data" in detail ? detail.data : null;
      }
      function isUsingKoreanIME(nativeEvent) {
        return nativeEvent.locale === "ko";
      }
      var isComposing = !1;
      function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var eventType, fallbackData;
        if (canUseCompositionEvent ? eventType = getCompositionEventType(domEventName) : isComposing ? isFallbackCompositionEnd(domEventName, nativeEvent) && (eventType = "onCompositionEnd") : isFallbackCompositionStart(domEventName, nativeEvent) && (eventType = "onCompositionStart"), !eventType)
          return null;
        useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) && (!isComposing && eventType === "onCompositionStart" ? isComposing = initialize(nativeEventTarget) : eventType === "onCompositionEnd" && isComposing && (fallbackData = getData()));
        var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
        if (listeners.length > 0) {
          var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
          if (dispatchQueue.push({
            event,
            listeners
          }), fallbackData)
            event.data = fallbackData;
          else {
            var customData = getDataFromCustomEvent(nativeEvent);
            customData !== null && (event.data = customData);
          }
        }
      }
      function getNativeBeforeInputChars(domEventName, nativeEvent) {
        switch (domEventName) {
          case "compositionend":
            return getDataFromCustomEvent(nativeEvent);
          case "keypress":
            var which = nativeEvent.which;
            return which !== SPACEBAR_CODE ? null : (hasSpaceKeypress = !0, SPACEBAR_CHAR);
          case "textInput":
            var chars = nativeEvent.data;
            return chars === SPACEBAR_CHAR && hasSpaceKeypress ? null : chars;
          default:
            return null;
        }
      }
      function getFallbackBeforeInputChars(domEventName, nativeEvent) {
        if (isComposing) {
          if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
            var chars = getData();
            return reset(), isComposing = !1, chars;
          }
          return null;
        }
        switch (domEventName) {
          case "paste":
            return null;
          case "keypress":
            if (!isKeypressCommand(nativeEvent)) {
              if (nativeEvent.char && nativeEvent.char.length > 1)
                return nativeEvent.char;
              if (nativeEvent.which)
                return String.fromCharCode(nativeEvent.which);
            }
            return null;
          case "compositionend":
            return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
          default:
            return null;
        }
      }
      function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var chars;
        if (canUseTextInputEvent ? chars = getNativeBeforeInputChars(domEventName, nativeEvent) : chars = getFallbackBeforeInputChars(domEventName, nativeEvent), !chars)
          return null;
        var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
        if (listeners.length > 0) {
          var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
          dispatchQueue.push({
            event,
            listeners
          }), event.data = chars;
        }
      }
      function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
      }
      var supportedInputTypes = {
        color: !0,
        date: !0,
        datetime: !0,
        "datetime-local": !0,
        email: !0,
        month: !0,
        number: !0,
        password: !0,
        range: !0,
        search: !0,
        tel: !0,
        text: !0,
        time: !0,
        url: !0,
        week: !0
      };
      function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName === "input" ? !!supportedInputTypes[elem.type] : nodeName === "textarea";
      }
      function isEventSupported(eventNameSuffix) {
        if (!canUseDOM)
          return !1;
        var eventName = "on" + eventNameSuffix, isSupported = eventName in document;
        if (!isSupported) {
          var element = document.createElement("div");
          element.setAttribute(eventName, "return;"), isSupported = typeof element[eventName] == "function";
        }
        return isSupported;
      }
      function registerEvents$1() {
        registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
      }
      function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
        enqueueStateRestore(target);
        var listeners = accumulateTwoPhaseListeners(inst, "onChange");
        if (listeners.length > 0) {
          var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
          dispatchQueue.push({
            event,
            listeners
          });
        }
      }
      var activeElement = null, activeElementInst = null;
      function shouldUseChangeEvent(elem) {
        var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName === "select" || nodeName === "input" && elem.type === "file";
      }
      function manualDispatchChangeEvent(nativeEvent) {
        var dispatchQueue = [];
        createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent)), batchedUpdates(runEventInBatch, dispatchQueue);
      }
      function runEventInBatch(dispatchQueue) {
        processDispatchQueue(dispatchQueue, 0);
      }
      function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance(targetInst);
        if (updateValueIfChanged(targetNode))
          return targetInst;
      }
      function getTargetInstForChangeEvent(domEventName, targetInst) {
        if (domEventName === "change")
          return targetInst;
      }
      var isInputEventSupported = !1;
      canUseDOM && (isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9));
      function startWatchingForValueChange(target, targetInst) {
        activeElement = target, activeElementInst = targetInst, activeElement.attachEvent("onpropertychange", handlePropertyChange);
      }
      function stopWatchingForValueChange() {
        activeElement && (activeElement.detachEvent("onpropertychange", handlePropertyChange), activeElement = null, activeElementInst = null);
      }
      function handlePropertyChange(nativeEvent) {
        nativeEvent.propertyName === "value" && getInstIfValueChanged(activeElementInst) && manualDispatchChangeEvent(nativeEvent);
      }
      function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
        domEventName === "focusin" ? (stopWatchingForValueChange(), startWatchingForValueChange(target, targetInst)) : domEventName === "focusout" && stopWatchingForValueChange();
      }
      function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
        if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown")
          return getInstIfValueChanged(activeElementInst);
      }
      function shouldUseClickEvent(elem) {
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
      }
      function getTargetInstForClickEvent(domEventName, targetInst) {
        if (domEventName === "click")
          return getInstIfValueChanged(targetInst);
      }
      function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
        if (domEventName === "input" || domEventName === "change")
          return getInstIfValueChanged(targetInst);
      }
      function handleControlledInputBlur(node) {
        var state = node._wrapperState;
        !state || !state.controlled || node.type !== "number" || setDefaultValue(node, "number", node.value);
      }
      function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window, getTargetInstFunc, handleEventFunc;
        if (shouldUseChangeEvent(targetNode) ? getTargetInstFunc = getTargetInstForChangeEvent : isTextInputElement(targetNode) ? isInputEventSupported ? getTargetInstFunc = getTargetInstForInputOrChangeEvent : (getTargetInstFunc = getTargetInstForInputEventPolyfill, handleEventFunc = handleEventsForInputEventPolyfill) : shouldUseClickEvent(targetNode) && (getTargetInstFunc = getTargetInstForClickEvent), getTargetInstFunc) {
          var inst = getTargetInstFunc(domEventName, targetInst);
          if (inst) {
            createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
            return;
          }
        }
        handleEventFunc && handleEventFunc(domEventName, targetNode, targetInst), domEventName === "focusout" && handleControlledInputBlur(targetNode);
      }
      function registerEvents$2() {
        registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]), registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]), registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]), registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
      }
      function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover", isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
        if (isOverEvent && !isReplayingEvent(nativeEvent)) {
          var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
          if (related && (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)))
            return;
        }
        if (!(!isOutEvent && !isOverEvent)) {
          var win;
          if (nativeEventTarget.window === nativeEventTarget)
            win = nativeEventTarget;
          else {
            var doc = nativeEventTarget.ownerDocument;
            doc ? win = doc.defaultView || doc.parentWindow : win = window;
          }
          var from, to;
          if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            if (from = targetInst, to = _related ? getClosestInstanceFromNode(_related) : null, to !== null) {
              var nearestMounted = getNearestMountedFiber(to);
              (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) && (to = null);
            }
          } else
            from = null, to = targetInst;
          if (from !== to) {
            var SyntheticEventCtor = SyntheticMouseEvent, leaveEventType = "onMouseLeave", enterEventType = "onMouseEnter", eventTypePrefix = "mouse";
            (domEventName === "pointerout" || domEventName === "pointerover") && (SyntheticEventCtor = SyntheticPointerEvent, leaveEventType = "onPointerLeave", enterEventType = "onPointerEnter", eventTypePrefix = "pointer");
            var fromNode = from == null ? win : getNodeFromInstance(from), toNode = to == null ? win : getNodeFromInstance(to), leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode, leave.relatedTarget = toNode;
            var enter = null, nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode, enterEvent.relatedTarget = fromNode, enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
        }
      }
      function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
      }
      var objectIs = typeof Object.is == "function" ? Object.is : is;
      function shallowEqual(objA, objB) {
        if (objectIs(objA, objB))
          return !0;
        if (typeof objA != "object" || objA === null || typeof objB != "object" || objB === null)
          return !1;
        var keysA = Object.keys(objA), keysB = Object.keys(objB);
        if (keysA.length !== keysB.length)
          return !1;
        for (var i = 0; i < keysA.length; i++) {
          var currentKey = keysA[i];
          if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey]))
            return !1;
        }
        return !0;
      }
      function getLeafNode(node) {
        for (; node && node.firstChild; )
          node = node.firstChild;
        return node;
      }
      function getSiblingNode(node) {
        for (; node; ) {
          if (node.nextSibling)
            return node.nextSibling;
          node = node.parentNode;
        }
      }
      function getNodeForCharacterOffset(root2, offset) {
        for (var node = getLeafNode(root2), nodeStart = 0, nodeEnd = 0; node; ) {
          if (node.nodeType === TEXT_NODE) {
            if (nodeEnd = nodeStart + node.textContent.length, nodeStart <= offset && nodeEnd >= offset)
              return {
                node,
                offset: offset - nodeStart
              };
            nodeStart = nodeEnd;
          }
          node = getLeafNode(getSiblingNode(node));
        }
      }
      function getOffsets(outerNode) {
        var ownerDocument = outerNode.ownerDocument, win = ownerDocument && ownerDocument.defaultView || window, selection = win.getSelection && win.getSelection();
        if (!selection || selection.rangeCount === 0)
          return null;
        var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
        try {
          anchorNode.nodeType, focusNode.nodeType;
        } catch {
          return null;
        }
        return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
      }
      function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
        var length = 0, start = -1, end = -1, indexWithinAnchor = 0, indexWithinFocus = 0, node = outerNode, parentNode = null;
        outer:
          for (; ; ) {
            for (var next = null; node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE) && (start = length + anchorOffset), node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE) && (end = length + focusOffset), node.nodeType === TEXT_NODE && (length += node.nodeValue.length), (next = node.firstChild) !== null; )
              parentNode = node, node = next;
            for (; ; ) {
              if (node === outerNode)
                break outer;
              if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset && (start = length), parentNode === focusNode && ++indexWithinFocus === focusOffset && (end = length), (next = node.nextSibling) !== null)
                break;
              node = parentNode, parentNode = node.parentNode;
            }
            node = next;
          }
        return start === -1 || end === -1 ? null : {
          start,
          end
        };
      }
      function setOffsets(node, offsets) {
        var doc = node.ownerDocument || document, win = doc && doc.defaultView || window;
        if (win.getSelection) {
          var selection = win.getSelection(), length = node.textContent.length, start = Math.min(offsets.start, length), end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
          if (!selection.extend && start > end) {
            var temp = end;
            end = start, start = temp;
          }
          var startMarker = getNodeForCharacterOffset(node, start), endMarker = getNodeForCharacterOffset(node, end);
          if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset)
              return;
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset), selection.removeAllRanges(), start > end ? (selection.addRange(range), selection.extend(endMarker.node, endMarker.offset)) : (range.setEnd(endMarker.node, endMarker.offset), selection.addRange(range));
          }
        }
      }
      function isTextNode(node) {
        return node && node.nodeType === TEXT_NODE;
      }
      function containsNode(outerNode, innerNode) {
        return !outerNode || !innerNode ? !1 : outerNode === innerNode ? !0 : isTextNode(outerNode) ? !1 : isTextNode(innerNode) ? containsNode(outerNode, innerNode.parentNode) : "contains" in outerNode ? outerNode.contains(innerNode) : outerNode.compareDocumentPosition ? !!(outerNode.compareDocumentPosition(innerNode) & 16) : !1;
      }
      function isInDocument(node) {
        return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
      }
      function isSameOriginFrame(iframe) {
        try {
          return typeof iframe.contentWindow.location.href == "string";
        } catch {
          return !1;
        }
      }
      function getActiveElementDeep() {
        for (var win = window, element = getActiveElement(); element instanceof win.HTMLIFrameElement; ) {
          if (isSameOriginFrame(element))
            win = element.contentWindow;
          else
            return element;
          element = getActiveElement(win.document);
        }
        return element;
      }
      function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
      }
      function getSelectionInformation() {
        var focusedElem = getActiveElementDeep();
        return {
          focusedElem,
          selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
        };
      }
      function restoreSelection(priorSelectionInformation) {
        var curFocusedElem = getActiveElementDeep(), priorFocusedElem = priorSelectionInformation.focusedElem, priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
          priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem) && setSelection(priorFocusedElem, priorSelectionRange);
          for (var ancestors = [], ancestor = priorFocusedElem; ancestor = ancestor.parentNode; )
            ancestor.nodeType === ELEMENT_NODE && ancestors.push({
              element: ancestor,
              left: ancestor.scrollLeft,
              top: ancestor.scrollTop
            });
          typeof priorFocusedElem.focus == "function" && priorFocusedElem.focus();
          for (var i = 0; i < ancestors.length; i++) {
            var info = ancestors[i];
            info.element.scrollLeft = info.left, info.element.scrollTop = info.top;
          }
        }
      }
      function getSelection(input) {
        var selection;
        return "selectionStart" in input ? selection = {
          start: input.selectionStart,
          end: input.selectionEnd
        } : selection = getOffsets(input), selection || {
          start: 0,
          end: 0
        };
      }
      function setSelection(input, offsets) {
        var start = offsets.start, end = offsets.end;
        end === void 0 && (end = start), "selectionStart" in input ? (input.selectionStart = start, input.selectionEnd = Math.min(end, input.value.length)) : setOffsets(input, offsets);
      }
      var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
      function registerEvents$3() {
        registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
      }
      var activeElement$1 = null, activeElementInst$1 = null, lastSelection = null, mouseDown = !1;
      function getSelection$1(node) {
        if ("selectionStart" in node && hasSelectionCapabilities(node))
          return {
            start: node.selectionStart,
            end: node.selectionEnd
          };
        var win = node.ownerDocument && node.ownerDocument.defaultView || window, selection = win.getSelection();
        return {
          anchorNode: selection.anchorNode,
          anchorOffset: selection.anchorOffset,
          focusNode: selection.focusNode,
          focusOffset: selection.focusOffset
        };
      }
      function getEventTargetDocument(eventTarget) {
        return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
      }
      function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
        var doc = getEventTargetDocument(nativeEventTarget);
        if (!(mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc))) {
          var currentSelection = getSelection$1(activeElement$1);
          if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              }), event.target = activeElement$1;
            }
          }
        }
      }
      function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        switch (domEventName) {
          case "focusin":
            (isTextInputElement(targetNode) || targetNode.contentEditable === "true") && (activeElement$1 = targetNode, activeElementInst$1 = targetInst, lastSelection = null);
            break;
          case "focusout":
            activeElement$1 = null, activeElementInst$1 = null, lastSelection = null;
            break;
          case "mousedown":
            mouseDown = !0;
            break;
          case "contextmenu":
          case "mouseup":
          case "dragend":
            mouseDown = !1, constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            break;
          case "selectionchange":
            if (skipSelectionChangeEvent)
              break;
          case "keydown":
          case "keyup":
            constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
        }
      }
      function makePrefixMap(styleProp, eventName) {
        var prefixes2 = {};
        return prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase(), prefixes2["Webkit" + styleProp] = "webkit" + eventName, prefixes2["Moz" + styleProp] = "moz" + eventName, prefixes2;
      }
      var vendorPrefixes = {
        animationend: makePrefixMap("Animation", "AnimationEnd"),
        animationiteration: makePrefixMap("Animation", "AnimationIteration"),
        animationstart: makePrefixMap("Animation", "AnimationStart"),
        transitionend: makePrefixMap("Transition", "TransitionEnd")
      }, prefixedEventNames = {}, style = {};
      canUseDOM && (style = document.createElement("div").style, "AnimationEvent" in window || (delete vendorPrefixes.animationend.animation, delete vendorPrefixes.animationiteration.animation, delete vendorPrefixes.animationstart.animation), "TransitionEvent" in window || delete vendorPrefixes.transitionend.transition);
      function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName])
          return prefixedEventNames[eventName];
        if (!vendorPrefixes[eventName])
          return eventName;
        var prefixMap = vendorPrefixes[eventName];
        for (var styleProp in prefixMap)
          if (prefixMap.hasOwnProperty(styleProp) && styleProp in style)
            return prefixedEventNames[eventName] = prefixMap[styleProp];
        return eventName;
      }
      var ANIMATION_END = getVendorPrefixedEventName("animationend"), ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration"), ANIMATION_START = getVendorPrefixedEventName("animationstart"), TRANSITION_END = getVendorPrefixedEventName("transitionend"), topLevelEventsToReactNames = /* @__PURE__ */ new Map(), simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
      function registerSimpleEvent(domEventName, reactName) {
        topLevelEventsToReactNames.set(domEventName, reactName), registerTwoPhaseEvent(reactName, [domEventName]);
      }
      function registerSimpleEvents() {
        for (var i = 0; i < simpleEventPluginEvents.length; i++) {
          var eventName = simpleEventPluginEvents[i], domEventName = eventName.toLowerCase(), capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
          registerSimpleEvent(domEventName, "on" + capitalizedEvent);
        }
        registerSimpleEvent(ANIMATION_END, "onAnimationEnd"), registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration"), registerSimpleEvent(ANIMATION_START, "onAnimationStart"), registerSimpleEvent("dblclick", "onDoubleClick"), registerSimpleEvent("focusin", "onFocus"), registerSimpleEvent("focusout", "onBlur"), registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
      }
      function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var reactName = topLevelEventsToReactNames.get(domEventName);
        if (reactName !== void 0) {
          var SyntheticEventCtor = SyntheticEvent, reactEventType = domEventName;
          switch (domEventName) {
            case "keypress":
              if (getEventCharCode(nativeEvent) === 0)
                return;
            case "keydown":
            case "keyup":
              SyntheticEventCtor = SyntheticKeyboardEvent;
              break;
            case "focusin":
              reactEventType = "focus", SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "focusout":
              reactEventType = "blur", SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "beforeblur":
            case "afterblur":
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "click":
              if (nativeEvent.button === 2)
                return;
            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              SyntheticEventCtor = SyntheticMouseEvent;
              break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              SyntheticEventCtor = SyntheticDragEvent;
              break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              SyntheticEventCtor = SyntheticTouchEvent;
              break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
              SyntheticEventCtor = SyntheticAnimationEvent;
              break;
            case TRANSITION_END:
              SyntheticEventCtor = SyntheticTransitionEvent;
              break;
            case "scroll":
              SyntheticEventCtor = SyntheticUIEvent;
              break;
            case "wheel":
              SyntheticEventCtor = SyntheticWheelEvent;
              break;
            case "copy":
            case "cut":
            case "paste":
              SyntheticEventCtor = SyntheticClipboardEvent;
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
              SyntheticEventCtor = SyntheticPointerEvent;
              break;
          }
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          {
            var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
            // nonDelegatedEvents list in DOMPluginEventSystem.
            // Then we can remove this special list.
            // This is a breaking change that can wait until React 18.
            domEventName === "scroll", _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
            if (_listeners.length > 0) {
              var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event: _event,
                listeners: _listeners
              });
            }
          }
        }
      }
      registerSimpleEvents(), registerEvents$2(), registerEvents$1(), registerEvents$3(), registerEvents();
      function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
        shouldProcessPolyfillPlugins && (extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget), extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget), extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget), extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget));
      }
      var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"], nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
      function executeDispatch(event, listener, currentTarget) {
        var type = event.type || "unknown-event";
        event.currentTarget = currentTarget, invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event), event.currentTarget = null;
      }
      function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
        var previousInstance;
        if (inCapturePhase)
          for (var i = dispatchListeners.length - 1; i >= 0; i--) {
            var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
            if (instance !== previousInstance && event.isPropagationStopped())
              return;
            executeDispatch(event, listener, currentTarget), previousInstance = instance;
          }
        else
          for (var _i = 0; _i < dispatchListeners.length; _i++) {
            var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
            if (_instance !== previousInstance && event.isPropagationStopped())
              return;
            executeDispatch(event, _listener, _currentTarget), previousInstance = _instance;
          }
      }
      function processDispatchQueue(dispatchQueue, eventSystemFlags) {
        for (var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0, i = 0; i < dispatchQueue.length; i++) {
          var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
          processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
        }
        rethrowCaughtError();
      }
      function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var nativeEventTarget = getEventTarget(nativeEvent), dispatchQueue = [];
        extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags), processDispatchQueue(dispatchQueue, eventSystemFlags);
      }
      function listenToNonDelegatedEvent(domEventName, targetElement) {
        nonDelegatedEvents.has(domEventName) || error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
        var isCapturePhaseListener = !1, listenerSet = getEventListenerSet(targetElement), listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
        listenerSet.has(listenerSetKey) || (addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener), listenerSet.add(listenerSetKey));
      }
      function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
        nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener && error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
        var eventSystemFlags = 0;
        isCapturePhaseListener && (eventSystemFlags |= IS_CAPTURE_PHASE), addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
      }
      var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
      function listenToAllSupportedEvents(rootContainerElement) {
        if (!rootContainerElement[listeningMarker]) {
          rootContainerElement[listeningMarker] = !0, allNativeEvents.forEach(function(domEventName) {
            domEventName !== "selectionchange" && (nonDelegatedEvents.has(domEventName) || listenToNativeEvent(domEventName, !1, rootContainerElement), listenToNativeEvent(domEventName, !0, rootContainerElement));
          });
          var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          ownerDocument !== null && (ownerDocument[listeningMarker] || (ownerDocument[listeningMarker] = !0, listenToNativeEvent("selectionchange", !1, ownerDocument)));
        }
      }
      function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
        var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags), isPassiveListener = void 0;
        passiveBrowserEventsSupported && (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") && (isPassiveListener = !0), targetContainer = targetContainer;
        var unsubscribeListener;
        isCapturePhaseListener ? isPassiveListener !== void 0 ? unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener) : unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener) : isPassiveListener !== void 0 ? unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener) : unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
      }
      function isMatchingRootContainer(grandContainer, targetContainer) {
        return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
      }
      function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var ancestorInst = targetInst;
        if (!(eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) && !(eventSystemFlags & IS_NON_DELEGATED)) {
          var targetContainerNode = targetContainer;
          if (targetInst !== null) {
            var node = targetInst;
            mainLoop:
              for (; ; ) {
                if (node === null)
                  return;
                var nodeTag = node.tag;
                if (nodeTag === HostRoot || nodeTag === HostPortal) {
                  var container = node.stateNode.containerInfo;
                  if (isMatchingRootContainer(container, targetContainerNode))
                    break;
                  if (nodeTag === HostPortal)
                    for (var grandNode = node.return; grandNode !== null; ) {
                      var grandTag = grandNode.tag;
                      if (grandTag === HostRoot || grandTag === HostPortal) {
                        var grandContainer = grandNode.stateNode.containerInfo;
                        if (isMatchingRootContainer(grandContainer, targetContainerNode))
                          return;
                      }
                      grandNode = grandNode.return;
                    }
                  for (; container !== null; ) {
                    var parentNode = getClosestInstanceFromNode(container);
                    if (parentNode === null)
                      return;
                    var parentTag = parentNode.tag;
                    if (parentTag === HostComponent || parentTag === HostText) {
                      node = ancestorInst = parentNode;
                      continue mainLoop;
                    }
                    container = container.parentNode;
                  }
                }
                node = node.return;
              }
          }
        }
        batchedUpdates(function() {
          return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
        });
      }
      function createDispatchListener(instance, listener, currentTarget) {
        return {
          instance,
          listener,
          currentTarget
        };
      }
      function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
        for (var captureName = reactName !== null ? reactName + "Capture" : null, reactEventName = inCapturePhase ? captureName : reactName, listeners = [], instance = targetFiber, lastHostComponent = null; instance !== null; ) {
          var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
          if (tag === HostComponent && stateNode !== null && (lastHostComponent = stateNode, reactEventName !== null)) {
            var listener = getListener(instance, reactEventName);
            listener != null && listeners.push(createDispatchListener(instance, listener, lastHostComponent));
          }
          if (accumulateTargetOnly)
            break;
          instance = instance.return;
        }
        return listeners;
      }
      function accumulateTwoPhaseListeners(targetFiber, reactName) {
        for (var captureName = reactName + "Capture", listeners = [], instance = targetFiber; instance !== null; ) {
          var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
          if (tag === HostComponent && stateNode !== null) {
            var currentTarget = stateNode, captureListener = getListener(instance, captureName);
            captureListener != null && listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
            var bubbleListener = getListener(instance, reactName);
            bubbleListener != null && listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
          }
          instance = instance.return;
        }
        return listeners;
      }
      function getParent(inst) {
        if (inst === null)
          return null;
        do
          inst = inst.return;
        while (inst && inst.tag !== HostComponent);
        return inst || null;
      }
      function getLowestCommonAncestor(instA, instB) {
        for (var nodeA = instA, nodeB = instB, depthA = 0, tempA = nodeA; tempA; tempA = getParent(tempA))
          depthA++;
        for (var depthB = 0, tempB = nodeB; tempB; tempB = getParent(tempB))
          depthB++;
        for (; depthA - depthB > 0; )
          nodeA = getParent(nodeA), depthA--;
        for (; depthB - depthA > 0; )
          nodeB = getParent(nodeB), depthB--;
        for (var depth = depthA; depth--; ) {
          if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate)
            return nodeA;
          nodeA = getParent(nodeA), nodeB = getParent(nodeB);
        }
        return null;
      }
      function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
        for (var registrationName = event._reactName, listeners = [], instance = target; instance !== null && instance !== common; ) {
          var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
          if (alternate !== null && alternate === common)
            break;
          if (tag === HostComponent && stateNode !== null) {
            var currentTarget = stateNode;
            if (inCapturePhase) {
              var captureListener = getListener(instance, registrationName);
              captureListener != null && listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
            } else if (!inCapturePhase) {
              var bubbleListener = getListener(instance, registrationName);
              bubbleListener != null && listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
            }
          }
          instance = instance.return;
        }
        listeners.length !== 0 && dispatchQueue.push({
          event,
          listeners
        });
      }
      function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
        var common = from && to ? getLowestCommonAncestor(from, to) : null;
        from !== null && accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, !1), to !== null && enterEvent !== null && accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, !0);
      }
      function getListenerSetKey(domEventName, capture) {
        return domEventName + "__" + (capture ? "capture" : "bubble");
      }
      var didWarnInvalidHydration = !1, DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML", SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning", SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning", AUTOFOCUS = "autoFocus", CHILDREN = "children", STYLE = "style", HTML$1 = "__html", warnedUnknownTags, validatePropertiesInDevelopment, warnForPropDifference, warnForExtraAttributes, warnForInvalidEventListener, canDiffStyleForHydrationWarning, normalizeHTML;
      warnedUnknownTags = {
        // There are working polyfills for <dialog>. Let people use it.
        dialog: !0,
        // Electron ships a custom <webview> tag to display external web content in
        // an isolated frame and process.
        // This tag is not present in non Electron environments such as JSDom which
        // is often used for testing purposes.
        // @see https://electronjs.org/docs/api/webview-tag
        webview: !0
      }, validatePropertiesInDevelopment = function(type, props) {
        validateProperties(type, props), validateProperties$1(type, props), validateProperties$2(type, props, {
          registrationNameDependencies,
          possibleRegistrationNames
        });
      }, canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode, warnForPropDifference = function(propName, serverValue, clientValue) {
        if (!didWarnInvalidHydration) {
          var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue), normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
          normalizedServerValue !== normalizedClientValue && (didWarnInvalidHydration = !0, error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue)));
        }
      }, warnForExtraAttributes = function(attributeNames) {
        if (!didWarnInvalidHydration) {
          didWarnInvalidHydration = !0;
          var names = [];
          attributeNames.forEach(function(name) {
            names.push(name);
          }), error("Extra attributes from the server: %s", names);
        }
      }, warnForInvalidEventListener = function(registrationName, listener) {
        listener === !1 ? error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName) : error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
      }, normalizeHTML = function(parent, html) {
        var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
        return testElement.innerHTML = html, testElement.innerHTML;
      };
      var NORMALIZE_NEWLINES_REGEX = /\r\n?/g, NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
      function normalizeMarkupForTextOrAttribute(markup) {
        checkHtmlStringCoercion(markup);
        var markupString = typeof markup == "string" ? markup : "" + markup;
        return markupString.replace(NORMALIZE_NEWLINES_REGEX, `
`).replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
      }
      function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
        var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText), normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
        if (normalizedServerText !== normalizedClientText && (shouldWarnDev && (didWarnInvalidHydration || (didWarnInvalidHydration = !0, error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText))), isConcurrentMode && enableClientRenderFallbackOnTextMismatch))
          throw new Error("Text content does not match server-rendered HTML.");
      }
      function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
      }
      function noop() {
      }
      function trapClickOnNonInteractiveElement(node) {
        node.onclick = noop;
      }
      function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
        for (var propKey in nextProps)
          if (nextProps.hasOwnProperty(propKey)) {
            var nextProp = nextProps[propKey];
            if (propKey === STYLE)
              nextProp && Object.freeze(nextProp), setValueForStyles(domElement, nextProp);
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              nextHtml != null && setInnerHTML(domElement, nextHtml);
            } else if (propKey === CHILDREN)
              if (typeof nextProp == "string") {
                var canSetTextContent = tag !== "textarea" || nextProp !== "";
                canSetTextContent && setTextContent(domElement, nextProp);
              } else
                typeof nextProp == "number" && setTextContent(domElement, "" + nextProp);
            else
              propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === AUTOFOCUS || (registrationNameDependencies.hasOwnProperty(propKey) ? nextProp != null && (typeof nextProp != "function" && warnForInvalidEventListener(propKey, nextProp), propKey === "onScroll" && listenToNonDelegatedEvent("scroll", domElement)) : nextProp != null && setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag));
          }
      }
      function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
        for (var i = 0; i < updatePayload.length; i += 2) {
          var propKey = updatePayload[i], propValue = updatePayload[i + 1];
          propKey === STYLE ? setValueForStyles(domElement, propValue) : propKey === DANGEROUSLY_SET_INNER_HTML ? setInnerHTML(domElement, propValue) : propKey === CHILDREN ? setTextContent(domElement, propValue) : setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
        }
      }
      function createElement(type, props, rootContainerElement, parentNamespace) {
        var isCustomComponentTag, ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement), domElement, namespaceURI = parentNamespace;
        if (namespaceURI === HTML_NAMESPACE && (namespaceURI = getIntrinsicNamespace(type)), namespaceURI === HTML_NAMESPACE) {
          if (isCustomComponentTag = isCustomComponent(type, props), !isCustomComponentTag && type !== type.toLowerCase() && error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type), type === "script") {
            var div = ownerDocument.createElement("div");
            div.innerHTML = "<script></script>";
            var firstChild = div.firstChild;
            domElement = div.removeChild(firstChild);
          } else if (typeof props.is == "string")
            domElement = ownerDocument.createElement(type, {
              is: props.is
            });
          else if (domElement = ownerDocument.createElement(type), type === "select") {
            var node = domElement;
            props.multiple ? node.multiple = !0 : props.size && (node.size = props.size);
          }
        } else
          domElement = ownerDocument.createElementNS(namespaceURI, type);
        return namespaceURI === HTML_NAMESPACE && !isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type) && (warnedUnknownTags[type] = !0, error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type)), domElement;
      }
      function createTextNode(text, rootContainerElement) {
        return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
      }
      function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
        var isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        var props;
        switch (tag) {
          case "dialog":
            listenToNonDelegatedEvent("cancel", domElement), listenToNonDelegatedEvent("close", domElement), props = rawProps;
            break;
          case "iframe":
          case "object":
          case "embed":
            listenToNonDelegatedEvent("load", domElement), props = rawProps;
            break;
          case "video":
          case "audio":
            for (var i = 0; i < mediaEventTypes.length; i++)
              listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
            props = rawProps;
            break;
          case "source":
            listenToNonDelegatedEvent("error", domElement), props = rawProps;
            break;
          case "img":
          case "image":
          case "link":
            listenToNonDelegatedEvent("error", domElement), listenToNonDelegatedEvent("load", domElement), props = rawProps;
            break;
          case "details":
            listenToNonDelegatedEvent("toggle", domElement), props = rawProps;
            break;
          case "input":
            initWrapperState(domElement, rawProps), props = getHostProps(domElement, rawProps), listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "option":
            validateProps(domElement, rawProps), props = rawProps;
            break;
          case "select":
            initWrapperState$1(domElement, rawProps), props = getHostProps$1(domElement, rawProps), listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "textarea":
            initWrapperState$2(domElement, rawProps), props = getHostProps$2(domElement, rawProps), listenToNonDelegatedEvent("invalid", domElement);
            break;
          default:
            props = rawProps;
        }
        switch (assertValidProps(tag, props), setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag), tag) {
          case "input":
            track(domElement), postMountWrapper(domElement, rawProps, !1);
            break;
          case "textarea":
            track(domElement), postMountWrapper$3(domElement);
            break;
          case "option":
            postMountWrapper$1(domElement, rawProps);
            break;
          case "select":
            postMountWrapper$2(domElement, rawProps);
            break;
          default:
            typeof props.onClick == "function" && trapClickOnNonInteractiveElement(domElement);
            break;
        }
      }
      function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
        validatePropertiesInDevelopment(tag, nextRawProps);
        var updatePayload = null, lastProps, nextProps;
        switch (tag) {
          case "input":
            lastProps = getHostProps(domElement, lastRawProps), nextProps = getHostProps(domElement, nextRawProps), updatePayload = [];
            break;
          case "select":
            lastProps = getHostProps$1(domElement, lastRawProps), nextProps = getHostProps$1(domElement, nextRawProps), updatePayload = [];
            break;
          case "textarea":
            lastProps = getHostProps$2(domElement, lastRawProps), nextProps = getHostProps$2(domElement, nextRawProps), updatePayload = [];
            break;
          default:
            lastProps = lastRawProps, nextProps = nextRawProps, typeof lastProps.onClick != "function" && typeof nextProps.onClick == "function" && trapClickOnNonInteractiveElement(domElement);
            break;
        }
        assertValidProps(tag, nextProps);
        var propKey, styleName, styleUpdates = null;
        for (propKey in lastProps)
          if (!(nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null))
            if (propKey === STYLE) {
              var lastStyle = lastProps[propKey];
              for (styleName in lastStyle)
                lastStyle.hasOwnProperty(styleName) && (styleUpdates || (styleUpdates = {}), styleUpdates[styleName] = "");
            } else
              propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN || propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === AUTOFOCUS || (registrationNameDependencies.hasOwnProperty(propKey) ? updatePayload || (updatePayload = []) : (updatePayload = updatePayload || []).push(propKey, null));
        for (propKey in nextProps) {
          var nextProp = nextProps[propKey], lastProp = lastProps?.[propKey];
          if (!(!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null))
            if (propKey === STYLE)
              if (nextProp && Object.freeze(nextProp), lastProp) {
                for (styleName in lastProp)
                  lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName)) && (styleUpdates || (styleUpdates = {}), styleUpdates[styleName] = "");
                for (styleName in nextProp)
                  nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName] && (styleUpdates || (styleUpdates = {}), styleUpdates[styleName] = nextProp[styleName]);
              } else
                styleUpdates || (updatePayload || (updatePayload = []), updatePayload.push(propKey, styleUpdates)), styleUpdates = nextProp;
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0, lastHtml = lastProp ? lastProp[HTML$1] : void 0;
              nextHtml != null && lastHtml !== nextHtml && (updatePayload = updatePayload || []).push(propKey, nextHtml);
            } else
              propKey === CHILDREN ? (typeof nextProp == "string" || typeof nextProp == "number") && (updatePayload = updatePayload || []).push(propKey, "" + nextProp) : propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || (registrationNameDependencies.hasOwnProperty(propKey) ? (nextProp != null && (typeof nextProp != "function" && warnForInvalidEventListener(propKey, nextProp), propKey === "onScroll" && listenToNonDelegatedEvent("scroll", domElement)), !updatePayload && lastProp !== nextProp && (updatePayload = [])) : (updatePayload = updatePayload || []).push(propKey, nextProp));
        }
        return styleUpdates && (validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]), (updatePayload = updatePayload || []).push(STYLE, styleUpdates)), updatePayload;
      }
      function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
        tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null && updateChecked(domElement, nextRawProps);
        var wasCustomComponentTag = isCustomComponent(tag, lastRawProps), isCustomComponentTag = isCustomComponent(tag, nextRawProps);
        switch (updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag), tag) {
          case "input":
            updateWrapper(domElement, nextRawProps);
            break;
          case "textarea":
            updateWrapper$1(domElement, nextRawProps);
            break;
          case "select":
            postUpdateWrapper(domElement, nextRawProps);
            break;
        }
      }
      function getPossibleStandardName(propName) {
        {
          var lowerCasedName = propName.toLowerCase();
          return possibleStandardNames.hasOwnProperty(lowerCasedName) && possibleStandardNames[lowerCasedName] || null;
        }
      }
      function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
        var isCustomComponentTag, extraAttributeNames;
        switch (isCustomComponentTag = isCustomComponent(tag, rawProps), validatePropertiesInDevelopment(tag, rawProps), tag) {
          case "dialog":
            listenToNonDelegatedEvent("cancel", domElement), listenToNonDelegatedEvent("close", domElement);
            break;
          case "iframe":
          case "object":
          case "embed":
            listenToNonDelegatedEvent("load", domElement);
            break;
          case "video":
          case "audio":
            for (var i = 0; i < mediaEventTypes.length; i++)
              listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
            break;
          case "source":
            listenToNonDelegatedEvent("error", domElement);
            break;
          case "img":
          case "image":
          case "link":
            listenToNonDelegatedEvent("error", domElement), listenToNonDelegatedEvent("load", domElement);
            break;
          case "details":
            listenToNonDelegatedEvent("toggle", domElement);
            break;
          case "input":
            initWrapperState(domElement, rawProps), listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "option":
            validateProps(domElement, rawProps);
            break;
          case "select":
            initWrapperState$1(domElement, rawProps), listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "textarea":
            initWrapperState$2(domElement, rawProps), listenToNonDelegatedEvent("invalid", domElement);
            break;
        }
        assertValidProps(tag, rawProps);
        {
          extraAttributeNames = /* @__PURE__ */ new Set();
          for (var attributes = domElement.attributes, _i = 0; _i < attributes.length; _i++) {
            var name = attributes[_i].name.toLowerCase();
            switch (name) {
              case "value":
                break;
              case "checked":
                break;
              case "selected":
                break;
              default:
                extraAttributeNames.add(attributes[_i].name);
            }
          }
        }
        var updatePayload = null;
        for (var propKey in rawProps)
          if (rawProps.hasOwnProperty(propKey)) {
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN)
              typeof nextProp == "string" ? domElement.textContent !== nextProp && (rawProps[SUPPRESS_HYDRATION_WARNING] !== !0 && checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev), updatePayload = [CHILDREN, nextProp]) : typeof nextProp == "number" && domElement.textContent !== "" + nextProp && (rawProps[SUPPRESS_HYDRATION_WARNING] !== !0 && checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev), updatePayload = [CHILDREN, "" + nextProp]);
            else if (registrationNameDependencies.hasOwnProperty(propKey))
              nextProp != null && (typeof nextProp != "function" && warnForInvalidEventListener(propKey, nextProp), propKey === "onScroll" && listenToNonDelegatedEvent("scroll", domElement));
            else if (shouldWarnDev && // Convince Flow we've calculated it (it's DEV-only in this method.)
            typeof isCustomComponentTag == "boolean") {
              var serverValue = void 0, propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
              if (rawProps[SUPPRESS_HYDRATION_WARNING] !== !0) {
                if (!(propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected")) {
                  if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                    var serverHTML = domElement.innerHTML, nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                    if (nextHtml != null) {
                      var expectedHTML = normalizeHTML(domElement, nextHtml);
                      expectedHTML !== serverHTML && warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  } else if (propKey === STYLE) {
                    if (extraAttributeNames.delete(propKey), canDiffStyleForHydrationWarning) {
                      var expectedStyle = createDangerousStringForStyles(nextProp);
                      serverValue = domElement.getAttribute("style"), expectedStyle !== serverValue && warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  } else if (isCustomComponentTag && !enableCustomElementPropertySupport)
                    extraAttributeNames.delete(propKey.toLowerCase()), serverValue = getValueForAttribute(domElement, propKey, nextProp), nextProp !== serverValue && warnForPropDifference(propKey, serverValue, nextProp);
                  else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                    var isMismatchDueToBadCasing = !1;
                    if (propertyInfo !== null)
                      extraAttributeNames.delete(propertyInfo.attributeName), serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                    else {
                      var ownNamespace = parentNamespace;
                      if (ownNamespace === HTML_NAMESPACE && (ownNamespace = getIntrinsicNamespace(tag)), ownNamespace === HTML_NAMESPACE)
                        extraAttributeNames.delete(propKey.toLowerCase());
                      else {
                        var standardName = getPossibleStandardName(propKey);
                        standardName !== null && standardName !== propKey && (isMismatchDueToBadCasing = !0, extraAttributeNames.delete(standardName)), extraAttributeNames.delete(propKey);
                      }
                      serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    }
                    var dontWarnCustomElement = enableCustomElementPropertySupport;
                    !dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing && warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
          }
        switch (shouldWarnDev && // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== !0 && warnForExtraAttributes(extraAttributeNames), tag) {
          case "input":
            track(domElement), postMountWrapper(domElement, rawProps, !0);
            break;
          case "textarea":
            track(domElement), postMountWrapper$3(domElement);
            break;
          case "select":
          case "option":
            break;
          default:
            typeof rawProps.onClick == "function" && trapClickOnNonInteractiveElement(domElement);
            break;
        }
        return updatePayload;
      }
      function diffHydratedText(textNode, text, isConcurrentMode) {
        var isDifferent = textNode.nodeValue !== text;
        return isDifferent;
      }
      function warnForDeletedHydratableElement(parentNode, child) {
        {
          if (didWarnInvalidHydration)
            return;
          didWarnInvalidHydration = !0, error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
        }
      }
      function warnForDeletedHydratableText(parentNode, child) {
        {
          if (didWarnInvalidHydration)
            return;
          didWarnInvalidHydration = !0, error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
        }
      }
      function warnForInsertedHydratedElement(parentNode, tag, props) {
        {
          if (didWarnInvalidHydration)
            return;
          didWarnInvalidHydration = !0, error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
        }
      }
      function warnForInsertedHydratedText(parentNode, text) {
        {
          if (text === "" || didWarnInvalidHydration)
            return;
          didWarnInvalidHydration = !0, error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
        }
      }
      function restoreControlledState$3(domElement, tag, props) {
        switch (tag) {
          case "input":
            restoreControlledState(domElement, props);
            return;
          case "textarea":
            restoreControlledState$2(domElement, props);
            return;
          case "select":
            restoreControlledState$1(domElement, props);
            return;
        }
      }
      var validateDOMNesting = function() {
      }, updatedAncestorInfo = function() {
      };
      {
        var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"], inScopeTags = [
          "applet",
          "caption",
          "html",
          "table",
          "td",
          "th",
          "marquee",
          "object",
          "template",
          // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
          // TODO: Distinguish by namespace here -- for <title>, including it here
          // errs on the side of fewer warnings
          "foreignObject",
          "desc",
          "title"
        ], buttonScopeTags = inScopeTags.concat(["button"]), impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"], emptyAncestorInfo = {
          current: null,
          formTag: null,
          aTagInScope: null,
          buttonTagInScope: null,
          nobrTagInScope: null,
          pTagInButtonScope: null,
          listItemTagAutoclosing: null,
          dlItemTagAutoclosing: null
        };
        updatedAncestorInfo = function(oldInfo, tag) {
          var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo), info = {
            tag
          };
          return inScopeTags.indexOf(tag) !== -1 && (ancestorInfo.aTagInScope = null, ancestorInfo.buttonTagInScope = null, ancestorInfo.nobrTagInScope = null), buttonScopeTags.indexOf(tag) !== -1 && (ancestorInfo.pTagInButtonScope = null), specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p" && (ancestorInfo.listItemTagAutoclosing = null, ancestorInfo.dlItemTagAutoclosing = null), ancestorInfo.current = info, tag === "form" && (ancestorInfo.formTag = info), tag === "a" && (ancestorInfo.aTagInScope = info), tag === "button" && (ancestorInfo.buttonTagInScope = info), tag === "nobr" && (ancestorInfo.nobrTagInScope = info), tag === "p" && (ancestorInfo.pTagInButtonScope = info), tag === "li" && (ancestorInfo.listItemTagAutoclosing = info), (tag === "dd" || tag === "dt") && (ancestorInfo.dlItemTagAutoclosing = info), ancestorInfo;
        };
        var isTagValidWithParent = function(tag, parentTag) {
          switch (parentTag) {
            case "select":
              return tag === "option" || tag === "optgroup" || tag === "#text";
            case "optgroup":
              return tag === "option" || tag === "#text";
            case "option":
              return tag === "#text";
            case "tr":
              return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
            case "tbody":
            case "thead":
            case "tfoot":
              return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
            case "colgroup":
              return tag === "col" || tag === "template";
            case "table":
              return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
            case "head":
              return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
            case "html":
              return tag === "head" || tag === "body" || tag === "frameset";
            case "frameset":
              return tag === "frame";
            case "#document":
              return tag === "html";
          }
          switch (tag) {
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
              return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
            case "rp":
            case "rt":
              return impliedEndTags.indexOf(parentTag) === -1;
            case "body":
            case "caption":
            case "col":
            case "colgroup":
            case "frameset":
            case "frame":
            case "head":
            case "html":
            case "tbody":
            case "td":
            case "tfoot":
            case "th":
            case "thead":
            case "tr":
              return parentTag == null;
          }
          return !0;
        }, findInvalidAncestorForTag = function(tag, ancestorInfo) {
          switch (tag) {
            case "address":
            case "article":
            case "aside":
            case "blockquote":
            case "center":
            case "details":
            case "dialog":
            case "dir":
            case "div":
            case "dl":
            case "fieldset":
            case "figcaption":
            case "figure":
            case "footer":
            case "header":
            case "hgroup":
            case "main":
            case "menu":
            case "nav":
            case "ol":
            case "p":
            case "section":
            case "summary":
            case "ul":
            case "pre":
            case "listing":
            case "table":
            case "hr":
            case "xmp":
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
              return ancestorInfo.pTagInButtonScope;
            case "form":
              return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
            case "li":
              return ancestorInfo.listItemTagAutoclosing;
            case "dd":
            case "dt":
              return ancestorInfo.dlItemTagAutoclosing;
            case "button":
              return ancestorInfo.buttonTagInScope;
            case "a":
              return ancestorInfo.aTagInScope;
            case "nobr":
              return ancestorInfo.nobrTagInScope;
          }
          return null;
        }, didWarn$1 = {};
        validateDOMNesting = function(childTag, childText, ancestorInfo) {
          ancestorInfo = ancestorInfo || emptyAncestorInfo;
          var parentInfo = ancestorInfo.current, parentTag = parentInfo && parentInfo.tag;
          childText != null && (childTag != null && error("validateDOMNesting: when childText is passed, childTag should be null"), childTag = "#text");
          var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo, invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo), invalidParentOrAncestor = invalidParent || invalidAncestor;
          if (invalidParentOrAncestor) {
            var ancestorTag = invalidParentOrAncestor.tag, warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
            if (!didWarn$1[warnKey]) {
              didWarn$1[warnKey] = !0;
              var tagDisplayName = childTag, whitespaceInfo = "";
              if (childTag === "#text" ? /\S/.test(childText) ? tagDisplayName = "Text nodes" : (tagDisplayName = "Whitespace text nodes", whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.") : tagDisplayName = "<" + childTag + ">", invalidParent) {
                var info = "";
                ancestorTag === "table" && childTag === "tr" && (info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser."), error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
            }
          }
        };
      }
      var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning", SUSPENSE_START_DATA = "$", SUSPENSE_END_DATA = "/$", SUSPENSE_PENDING_START_DATA = "$?", SUSPENSE_FALLBACK_START_DATA = "$!", STYLE$1 = "style", eventsEnabled = null, selectionInformation = null;
      function getRootHostContext(rootContainerInstance) {
        var type, namespace, nodeType = rootContainerInstance.nodeType;
        switch (nodeType) {
          case DOCUMENT_NODE:
          case DOCUMENT_FRAGMENT_NODE: {
            type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
            var root2 = rootContainerInstance.documentElement;
            namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
            break;
          }
          default: {
            var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance, ownNamespace = container.namespaceURI || null;
            type = container.tagName, namespace = getChildNamespace(ownNamespace, type);
            break;
          }
        }
        {
          var validatedTag = type.toLowerCase(), ancestorInfo = updatedAncestorInfo(null, validatedTag);
          return {
            namespace,
            ancestorInfo
          };
        }
      }
      function getChildHostContext(parentHostContext, type, rootContainerInstance) {
        {
          var parentHostContextDev = parentHostContext, namespace = getChildNamespace(parentHostContextDev.namespace, type), ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
          return {
            namespace,
            ancestorInfo
          };
        }
      }
      function getPublicInstance(instance) {
        return instance;
      }
      function prepareForCommit(containerInfo) {
        eventsEnabled = isEnabled(), selectionInformation = getSelectionInformation();
        var activeInstance = null;
        return setEnabled(!1), activeInstance;
      }
      function resetAfterCommit(containerInfo) {
        restoreSelection(selectionInformation), setEnabled(eventsEnabled), eventsEnabled = null, selectionInformation = null;
      }
      function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var parentNamespace;
        {
          var hostContextDev = hostContext;
          if (validateDOMNesting(type, null, hostContextDev.ancestorInfo), typeof props.children == "string" || typeof props.children == "number") {
            var string = "" + props.children, ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
          }
          parentNamespace = hostContextDev.namespace;
        }
        var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
        return precacheFiberNode(internalInstanceHandle, domElement), updateFiberProps(domElement, props), domElement;
      }
      function appendInitialChild(parentInstance, child) {
        parentInstance.appendChild(child);
      }
      function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
        switch (setInitialProperties(domElement, type, props, rootContainerInstance), type) {
          case "button":
          case "input":
          case "select":
          case "textarea":
            return !!props.autoFocus;
          case "img":
            return !0;
          default:
            return !1;
        }
      }
      function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
        {
          var hostContextDev = hostContext;
          if (typeof newProps.children != typeof oldProps.children && (typeof newProps.children == "string" || typeof newProps.children == "number")) {
            var string = "" + newProps.children, ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
          }
        }
        return diffProperties(domElement, type, oldProps, newProps);
      }
      function shouldSetTextContent(type, props) {
        return type === "textarea" || type === "noscript" || typeof props.children == "string" || typeof props.children == "number" || typeof props.dangerouslySetInnerHTML == "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
      }
      function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        {
          var hostContextDev = hostContext;
          validateDOMNesting(null, text, hostContextDev.ancestorInfo);
        }
        var textNode = createTextNode(text, rootContainerInstance);
        return precacheFiberNode(internalInstanceHandle, textNode), textNode;
      }
      function getCurrentEventPriority() {
        var currentEvent = window.event;
        return currentEvent === void 0 ? DefaultEventPriority : getEventPriority(currentEvent.type);
      }
      var scheduleTimeout = typeof setTimeout == "function" ? setTimeout : void 0, cancelTimeout = typeof clearTimeout == "function" ? clearTimeout : void 0, noTimeout = -1, localPromise = typeof Promise == "function" ? Promise : void 0, scheduleMicrotask = typeof queueMicrotask == "function" ? queueMicrotask : typeof localPromise < "u" ? function(callback) {
        return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
      } : scheduleTimeout;
      function handleErrorInNextTick(error2) {
        setTimeout(function() {
          throw error2;
        });
      }
      function commitMount(domElement, type, newProps, internalInstanceHandle) {
        switch (type) {
          case "button":
          case "input":
          case "select":
          case "textarea":
            newProps.autoFocus && domElement.focus();
            return;
          case "img": {
            newProps.src && (domElement.src = newProps.src);
            return;
          }
        }
      }
      function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
        updateProperties(domElement, updatePayload, type, oldProps, newProps), updateFiberProps(domElement, newProps);
      }
      function resetTextContent(domElement) {
        setTextContent(domElement, "");
      }
      function commitTextUpdate(textInstance, oldText, newText) {
        textInstance.nodeValue = newText;
      }
      function appendChild(parentInstance, child) {
        parentInstance.appendChild(child);
      }
      function appendChildToContainer(container, child) {
        var parentNode;
        container.nodeType === COMMENT_NODE ? (parentNode = container.parentNode, parentNode.insertBefore(child, container)) : (parentNode = container, parentNode.appendChild(child));
        var reactRootContainer = container._reactRootContainer;
        reactRootContainer == null && parentNode.onclick === null && trapClickOnNonInteractiveElement(parentNode);
      }
      function insertBefore(parentInstance, child, beforeChild) {
        parentInstance.insertBefore(child, beforeChild);
      }
      function insertInContainerBefore(container, child, beforeChild) {
        container.nodeType === COMMENT_NODE ? container.parentNode.insertBefore(child, beforeChild) : container.insertBefore(child, beforeChild);
      }
      function removeChild(parentInstance, child) {
        parentInstance.removeChild(child);
      }
      function removeChildFromContainer(container, child) {
        container.nodeType === COMMENT_NODE ? container.parentNode.removeChild(child) : container.removeChild(child);
      }
      function clearSuspenseBoundary(parentInstance, suspenseInstance) {
        var node = suspenseInstance, depth = 0;
        do {
          var nextNode = node.nextSibling;
          if (parentInstance.removeChild(node), nextNode && nextNode.nodeType === COMMENT_NODE) {
            var data = nextNode.data;
            if (data === SUSPENSE_END_DATA)
              if (depth === 0) {
                parentInstance.removeChild(nextNode), retryIfBlockedOn(suspenseInstance);
                return;
              } else
                depth--;
            else
              (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) && depth++;
          }
          node = nextNode;
        } while (node);
        retryIfBlockedOn(suspenseInstance);
      }
      function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
        container.nodeType === COMMENT_NODE ? clearSuspenseBoundary(container.parentNode, suspenseInstance) : container.nodeType === ELEMENT_NODE && clearSuspenseBoundary(container, suspenseInstance), retryIfBlockedOn(container);
      }
      function hideInstance(instance) {
        instance = instance;
        var style2 = instance.style;
        typeof style2.setProperty == "function" ? style2.setProperty("display", "none", "important") : style2.display = "none";
      }
      function hideTextInstance(textInstance) {
        textInstance.nodeValue = "";
      }
      function unhideInstance(instance, props) {
        instance = instance;
        var styleProp = props[STYLE$1], display = styleProp != null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
        instance.style.display = dangerousStyleValue("display", display);
      }
      function unhideTextInstance(textInstance, text) {
        textInstance.nodeValue = text;
      }
      function clearContainer(container) {
        container.nodeType === ELEMENT_NODE ? container.textContent = "" : container.nodeType === DOCUMENT_NODE && container.documentElement && container.removeChild(container.documentElement);
      }
      function canHydrateInstance(instance, type, props) {
        return instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase() ? null : instance;
      }
      function canHydrateTextInstance(instance, text) {
        return text === "" || instance.nodeType !== TEXT_NODE ? null : instance;
      }
      function canHydrateSuspenseInstance(instance) {
        return instance.nodeType !== COMMENT_NODE ? null : instance;
      }
      function isSuspenseInstancePending(instance) {
        return instance.data === SUSPENSE_PENDING_START_DATA;
      }
      function isSuspenseInstanceFallback(instance) {
        return instance.data === SUSPENSE_FALLBACK_START_DATA;
      }
      function getSuspenseInstanceFallbackErrorDetails(instance) {
        var dataset = instance.nextSibling && instance.nextSibling.dataset, digest, message, stack;
        return dataset && (digest = dataset.dgst, message = dataset.msg, stack = dataset.stck), {
          message,
          digest,
          stack
        };
      }
      function registerSuspenseInstanceRetry(instance, callback) {
        instance._reactRetry = callback;
      }
      function getNextHydratable(node) {
        for (; node != null; node = node.nextSibling) {
          var nodeType = node.nodeType;
          if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE)
            break;
          if (nodeType === COMMENT_NODE) {
            var nodeData = node.data;
            if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA)
              break;
            if (nodeData === SUSPENSE_END_DATA)
              return null;
          }
        }
        return node;
      }
      function getNextHydratableSibling(instance) {
        return getNextHydratable(instance.nextSibling);
      }
      function getFirstHydratableChild(parentInstance) {
        return getNextHydratable(parentInstance.firstChild);
      }
      function getFirstHydratableChildWithinContainer(parentContainer) {
        return getNextHydratable(parentContainer.firstChild);
      }
      function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
        return getNextHydratable(parentInstance.nextSibling);
      }
      function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
        precacheFiberNode(internalInstanceHandle, instance), updateFiberProps(instance, props);
        var parentNamespace;
        {
          var hostContextDev = hostContext;
          parentNamespace = hostContextDev.namespace;
        }
        var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
        return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
      }
      function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
        precacheFiberNode(internalInstanceHandle, textInstance);
        var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
        return diffHydratedText(textInstance, text);
      }
      function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, suspenseInstance);
      }
      function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
        for (var node = suspenseInstance.nextSibling, depth = 0; node; ) {
          if (node.nodeType === COMMENT_NODE) {
            var data = node.data;
            if (data === SUSPENSE_END_DATA) {
              if (depth === 0)
                return getNextHydratableSibling(node);
              depth--;
            } else
              (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) && depth++;
          }
          node = node.nextSibling;
        }
        return null;
      }
      function getParentSuspenseInstance(targetInstance) {
        for (var node = targetInstance.previousSibling, depth = 0; node; ) {
          if (node.nodeType === COMMENT_NODE) {
            var data = node.data;
            if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
              if (depth === 0)
                return node;
              depth--;
            } else
              data === SUSPENSE_END_DATA && depth++;
          }
          node = node.previousSibling;
        }
        return null;
      }
      function commitHydratedContainer(container) {
        retryIfBlockedOn(container);
      }
      function commitHydratedSuspenseInstance(suspenseInstance) {
        retryIfBlockedOn(suspenseInstance);
      }
      function shouldDeleteUnhydratedTailInstances(parentType) {
        return parentType !== "head" && parentType !== "body";
      }
      function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
        var shouldWarnDev = !0;
        checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
      }
      function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== !0) {
          var shouldWarnDev = !0;
          checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
        }
      }
      function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
        instance.nodeType === ELEMENT_NODE ? warnForDeletedHydratableElement(parentContainer, instance) : instance.nodeType === COMMENT_NODE || warnForDeletedHydratableText(parentContainer, instance);
      }
      function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
        {
          var parentNode = parentInstance.parentNode;
          parentNode !== null && (instance.nodeType === ELEMENT_NODE ? warnForDeletedHydratableElement(parentNode, instance) : instance.nodeType === COMMENT_NODE || warnForDeletedHydratableText(parentNode, instance));
        }
      }
      function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
        (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== !0) && (instance.nodeType === ELEMENT_NODE ? warnForDeletedHydratableElement(parentInstance, instance) : instance.nodeType === COMMENT_NODE || warnForDeletedHydratableText(parentInstance, instance));
      }
      function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
        warnForInsertedHydratedElement(parentContainer, type);
      }
      function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
        warnForInsertedHydratedText(parentContainer, text);
      }
      function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
        {
          var parentNode = parentInstance.parentNode;
          parentNode !== null && warnForInsertedHydratedElement(parentNode, type);
        }
      }
      function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
        {
          var parentNode = parentInstance.parentNode;
          parentNode !== null && warnForInsertedHydratedText(parentNode, text);
        }
      }
      function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
        (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== !0) && warnForInsertedHydratedElement(parentInstance, type);
      }
      function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
        (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== !0) && warnForInsertedHydratedText(parentInstance, text);
      }
      function errorHydratingContainer(parentContainer) {
        error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
      }
      function preparePortalMount(portalInstance) {
        listenToAllSupportedEvents(portalInstance);
      }
      var randomKey = Math.random().toString(36).slice(2), internalInstanceKey = "__reactFiber$" + randomKey, internalPropsKey = "__reactProps$" + randomKey, internalContainerInstanceKey = "__reactContainer$" + randomKey, internalEventHandlersKey = "__reactEvents$" + randomKey, internalEventHandlerListenersKey = "__reactListeners$" + randomKey, internalEventHandlesSetKey = "__reactHandles$" + randomKey;
      function detachDeletedInstance(node) {
        delete node[internalInstanceKey], delete node[internalPropsKey], delete node[internalEventHandlersKey], delete node[internalEventHandlerListenersKey], delete node[internalEventHandlesSetKey];
      }
      function precacheFiberNode(hostInst, node) {
        node[internalInstanceKey] = hostInst;
      }
      function markContainerAsRoot(hostRoot, node) {
        node[internalContainerInstanceKey] = hostRoot;
      }
      function unmarkContainerAsRoot(node) {
        node[internalContainerInstanceKey] = null;
      }
      function isContainerMarkedAsRoot(node) {
        return !!node[internalContainerInstanceKey];
      }
      function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey];
        if (targetInst)
          return targetInst;
        for (var parentNode = targetNode.parentNode; parentNode; ) {
          if (targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey], targetInst) {
            var alternate = targetInst.alternate;
            if (targetInst.child !== null || alternate !== null && alternate.child !== null)
              for (var suspenseInstance = getParentSuspenseInstance(targetNode); suspenseInstance !== null; ) {
                var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                if (targetSuspenseInst)
                  return targetSuspenseInst;
                suspenseInstance = getParentSuspenseInstance(suspenseInstance);
              }
            return targetInst;
          }
          targetNode = parentNode, parentNode = targetNode.parentNode;
        }
        return null;
      }
      function getInstanceFromNode(node) {
        var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
        return inst && (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) ? inst : null;
      }
      function getNodeFromInstance(inst) {
        if (inst.tag === HostComponent || inst.tag === HostText)
          return inst.stateNode;
        throw new Error("getNodeFromInstance: Invalid argument.");
      }
      function getFiberCurrentPropsFromNode(node) {
        return node[internalPropsKey] || null;
      }
      function updateFiberProps(node, props) {
        node[internalPropsKey] = props;
      }
      function getEventListenerSet(node) {
        var elementListenerSet = node[internalEventHandlersKey];
        return elementListenerSet === void 0 && (elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set()), elementListenerSet;
      }
      var loggedTypeFailures = {}, ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else
          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
      }
      function checkPropTypes(typeSpecs, values, location, componentName, element) {
        {
          var has2 = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs)
            if (has2(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] != "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  throw err.name = "Invariant Violation", err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              error$1 && !(error$1 instanceof Error) && (setCurrentlyValidatingElement(element), error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1), setCurrentlyValidatingElement(null)), error$1 instanceof Error && !(error$1.message in loggedTypeFailures) && (loggedTypeFailures[error$1.message] = !0, setCurrentlyValidatingElement(element), error("Failed %s type: %s", location, error$1.message), setCurrentlyValidatingElement(null));
            }
        }
      }
      var valueStack = [], fiberStack;
      fiberStack = [];
      var index = -1;
      function createCursor(defaultValue) {
        return {
          current: defaultValue
        };
      }
      function pop(cursor, fiber) {
        if (index < 0) {
          error("Unexpected pop.");
          return;
        }
        fiber !== fiberStack[index] && error("Unexpected Fiber popped."), cursor.current = valueStack[index], valueStack[index] = null, fiberStack[index] = null, index--;
      }
      function push(cursor, value, fiber) {
        index++, valueStack[index] = cursor.current, fiberStack[index] = fiber, cursor.current = value;
      }
      var warnedAboutMissingGetChildContext;
      warnedAboutMissingGetChildContext = {};
      var emptyContextObject = {};
      Object.freeze(emptyContextObject);
      var contextStackCursor = createCursor(emptyContextObject), didPerformWorkStackCursor = createCursor(!1), previousContext = emptyContextObject;
      function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
        return didPushOwnContextIfProvider && isContextProvider(Component) ? previousContext : contextStackCursor.current;
      }
      function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
        {
          var instance = workInProgress2.stateNode;
          instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
        }
      }
      function getMaskedContext(workInProgress2, unmaskedContext) {
        {
          var type = workInProgress2.type, contextTypes = type.contextTypes;
          if (!contextTypes)
            return emptyContextObject;
          var instance = workInProgress2.stateNode;
          if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext)
            return instance.__reactInternalMemoizedMaskedChildContext;
          var context = {};
          for (var key in contextTypes)
            context[key] = unmaskedContext[key];
          {
            var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
            checkPropTypes(contextTypes, context, "context", name);
          }
          return instance && cacheContext(workInProgress2, unmaskedContext, context), context;
        }
      }
      function hasContextChanged() {
        return didPerformWorkStackCursor.current;
      }
      function isContextProvider(type) {
        {
          var childContextTypes = type.childContextTypes;
          return childContextTypes != null;
        }
      }
      function popContext(fiber) {
        pop(didPerformWorkStackCursor, fiber), pop(contextStackCursor, fiber);
      }
      function popTopLevelContextObject(fiber) {
        pop(didPerformWorkStackCursor, fiber), pop(contextStackCursor, fiber);
      }
      function pushTopLevelContextObject(fiber, context, didChange) {
        {
          if (contextStackCursor.current !== emptyContextObject)
            throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
          push(contextStackCursor, context, fiber), push(didPerformWorkStackCursor, didChange, fiber);
        }
      }
      function processChildContext(fiber, type, parentContext) {
        {
          var instance = fiber.stateNode, childContextTypes = type.childContextTypes;
          if (typeof instance.getChildContext != "function") {
            {
              var componentName = getComponentNameFromFiber(fiber) || "Unknown";
              warnedAboutMissingGetChildContext[componentName] || (warnedAboutMissingGetChildContext[componentName] = !0, error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName));
            }
            return parentContext;
          }
          var childContext = instance.getChildContext();
          for (var contextKey in childContext)
            if (!(contextKey in childContextTypes))
              throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
          {
            var name = getComponentNameFromFiber(fiber) || "Unknown";
            checkPropTypes(childContextTypes, childContext, "child context", name);
          }
          return assign({}, parentContext, childContext);
        }
      }
      function pushContextProvider(workInProgress2) {
        {
          var instance = workInProgress2.stateNode, memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
          return previousContext = contextStackCursor.current, push(contextStackCursor, memoizedMergedChildContext, workInProgress2), push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2), !0;
        }
      }
      function invalidateContextProvider(workInProgress2, type, didChange) {
        {
          var instance = workInProgress2.stateNode;
          if (!instance)
            throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
          if (didChange) {
            var mergedContext = processChildContext(workInProgress2, type, previousContext);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext, pop(didPerformWorkStackCursor, workInProgress2), pop(contextStackCursor, workInProgress2), push(contextStackCursor, mergedContext, workInProgress2), push(didPerformWorkStackCursor, didChange, workInProgress2);
          } else
            pop(didPerformWorkStackCursor, workInProgress2), push(didPerformWorkStackCursor, didChange, workInProgress2);
        }
      }
      function findCurrentUnmaskedContext(fiber) {
        {
          if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent)
            throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
          var node = fiber;
          do {
            switch (node.tag) {
              case HostRoot:
                return node.stateNode.context;
              case ClassComponent: {
                var Component = node.type;
                if (isContextProvider(Component))
                  return node.stateNode.__reactInternalMemoizedMergedChildContext;
                break;
              }
            }
            node = node.return;
          } while (node !== null);
          throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      var LegacyRoot = 0, ConcurrentRoot = 1, syncQueue = null, includesLegacySyncCallbacks = !1, isFlushingSyncQueue = !1;
      function scheduleSyncCallback(callback) {
        syncQueue === null ? syncQueue = [callback] : syncQueue.push(callback);
      }
      function scheduleLegacySyncCallback(callback) {
        includesLegacySyncCallbacks = !0, scheduleSyncCallback(callback);
      }
      function flushSyncCallbacksOnlyInLegacyMode() {
        includesLegacySyncCallbacks && flushSyncCallbacks();
      }
      function flushSyncCallbacks() {
        if (!isFlushingSyncQueue && syncQueue !== null) {
          isFlushingSyncQueue = !0;
          var i = 0, previousUpdatePriority = getCurrentUpdatePriority();
          try {
            var isSync = !0, queue = syncQueue;
            for (setCurrentUpdatePriority(DiscreteEventPriority); i < queue.length; i++) {
              var callback = queue[i];
              do
                callback = callback(isSync);
              while (callback !== null);
            }
            syncQueue = null, includesLegacySyncCallbacks = !1;
          } catch (error2) {
            throw syncQueue !== null && (syncQueue = syncQueue.slice(i + 1)), scheduleCallback(ImmediatePriority, flushSyncCallbacks), error2;
          } finally {
            setCurrentUpdatePriority(previousUpdatePriority), isFlushingSyncQueue = !1;
          }
        }
        return null;
      }
      var forkStack = [], forkStackIndex = 0, treeForkProvider = null, treeForkCount = 0, idStack = [], idStackIndex = 0, treeContextProvider = null, treeContextId = 1, treeContextOverflow = "";
      function isForkedChild(workInProgress2) {
        return warnIfNotHydrating(), (workInProgress2.flags & Forked) !== NoFlags;
      }
      function getForksAtLevel(workInProgress2) {
        return warnIfNotHydrating(), treeForkCount;
      }
      function getTreeId() {
        var overflow = treeContextOverflow, idWithLeadingBit = treeContextId, id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
        return id.toString(32) + overflow;
      }
      function pushTreeFork(workInProgress2, totalChildren) {
        warnIfNotHydrating(), forkStack[forkStackIndex++] = treeForkCount, forkStack[forkStackIndex++] = treeForkProvider, treeForkProvider = workInProgress2, treeForkCount = totalChildren;
      }
      function pushTreeId(workInProgress2, totalChildren, index2) {
        warnIfNotHydrating(), idStack[idStackIndex++] = treeContextId, idStack[idStackIndex++] = treeContextOverflow, idStack[idStackIndex++] = treeContextProvider, treeContextProvider = workInProgress2;
        var baseIdWithLeadingBit = treeContextId, baseOverflow = treeContextOverflow, baseLength = getBitLength(baseIdWithLeadingBit) - 1, baseId = baseIdWithLeadingBit & ~(1 << baseLength), slot = index2 + 1, length = getBitLength(totalChildren) + baseLength;
        if (length > 30) {
          var numberOfOverflowBits = baseLength - baseLength % 5, newOverflowBits = (1 << numberOfOverflowBits) - 1, newOverflow = (baseId & newOverflowBits).toString(32), restOfBaseId = baseId >> numberOfOverflowBits, restOfBaseLength = baseLength - numberOfOverflowBits, restOfLength = getBitLength(totalChildren) + restOfBaseLength, restOfNewBits = slot << restOfBaseLength, id = restOfNewBits | restOfBaseId, overflow = newOverflow + baseOverflow;
          treeContextId = 1 << restOfLength | id, treeContextOverflow = overflow;
        } else {
          var newBits = slot << baseLength, _id = newBits | baseId, _overflow = baseOverflow;
          treeContextId = 1 << length | _id, treeContextOverflow = _overflow;
        }
      }
      function pushMaterializedTreeId(workInProgress2) {
        warnIfNotHydrating();
        var returnFiber = workInProgress2.return;
        if (returnFiber !== null) {
          var numberOfForks = 1, slotIndex = 0;
          pushTreeFork(workInProgress2, numberOfForks), pushTreeId(workInProgress2, numberOfForks, slotIndex);
        }
      }
      function getBitLength(number) {
        return 32 - clz32(number);
      }
      function getLeadingBit(id) {
        return 1 << getBitLength(id) - 1;
      }
      function popTreeContext(workInProgress2) {
        for (; workInProgress2 === treeForkProvider; )
          treeForkProvider = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null, treeForkCount = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null;
        for (; workInProgress2 === treeContextProvider; )
          treeContextProvider = idStack[--idStackIndex], idStack[idStackIndex] = null, treeContextOverflow = idStack[--idStackIndex], idStack[idStackIndex] = null, treeContextId = idStack[--idStackIndex], idStack[idStackIndex] = null;
      }
      function getSuspendedTreeContext() {
        return warnIfNotHydrating(), treeContextProvider !== null ? {
          id: treeContextId,
          overflow: treeContextOverflow
        } : null;
      }
      function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
        warnIfNotHydrating(), idStack[idStackIndex++] = treeContextId, idStack[idStackIndex++] = treeContextOverflow, idStack[idStackIndex++] = treeContextProvider, treeContextId = suspendedContext.id, treeContextOverflow = suspendedContext.overflow, treeContextProvider = workInProgress2;
      }
      function warnIfNotHydrating() {
        getIsHydrating() || error("Expected to be hydrating. This is a bug in React. Please file an issue.");
      }
      var hydrationParentFiber = null, nextHydratableInstance = null, isHydrating = !1, didSuspendOrErrorDEV = !1, hydrationErrors = null;
      function warnIfHydrating() {
        isHydrating && error("We should not be hydrating here. This is a bug in React. Please file a bug.");
      }
      function markDidThrowWhileHydratingDEV() {
        didSuspendOrErrorDEV = !0;
      }
      function didSuspendOrErrorWhileHydratingDEV() {
        return didSuspendOrErrorDEV;
      }
      function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo;
        return nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance), hydrationParentFiber = fiber, isHydrating = !0, hydrationErrors = null, didSuspendOrErrorDEV = !1, !0;
      }
      function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
        return nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance), hydrationParentFiber = fiber, isHydrating = !0, hydrationErrors = null, didSuspendOrErrorDEV = !1, treeContext !== null && restoreSuspendedTreeContext(fiber, treeContext), !0;
      }
      function warnUnhydratedInstance(returnFiber, instance) {
        switch (returnFiber.tag) {
          case HostRoot: {
            didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
            break;
          }
          case HostComponent: {
            var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
            didNotHydrateInstance(
              returnFiber.type,
              returnFiber.memoizedProps,
              returnFiber.stateNode,
              instance,
              // TODO: Delete this argument when we remove the legacy root API.
              isConcurrentMode
            );
            break;
          }
          case SuspenseComponent: {
            var suspenseState = returnFiber.memoizedState;
            suspenseState.dehydrated !== null && didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
            break;
          }
        }
      }
      function deleteHydratableInstance(returnFiber, instance) {
        warnUnhydratedInstance(returnFiber, instance);
        var childToDelete = createFiberFromHostInstanceForDeletion();
        childToDelete.stateNode = instance, childToDelete.return = returnFiber;
        var deletions = returnFiber.deletions;
        deletions === null ? (returnFiber.deletions = [childToDelete], returnFiber.flags |= ChildDeletion) : deletions.push(childToDelete);
      }
      function warnNonhydratedInstance(returnFiber, fiber) {
        {
          if (didSuspendOrErrorDEV)
            return;
          switch (returnFiber.tag) {
            case HostRoot: {
              var parentContainer = returnFiber.stateNode.containerInfo;
              switch (fiber.tag) {
                case HostComponent:
                  var type = fiber.type, props = fiber.pendingProps;
                  didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                  break;
                case HostText:
                  var text = fiber.pendingProps;
                  didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                  break;
              }
              break;
            }
            case HostComponent: {
              var parentType = returnFiber.type, parentProps = returnFiber.memoizedProps, parentInstance = returnFiber.stateNode;
              switch (fiber.tag) {
                case HostComponent: {
                  var _type = fiber.type, _props = fiber.pendingProps, isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotFindHydratableInstance(
                    parentType,
                    parentProps,
                    parentInstance,
                    _type,
                    _props,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case HostText: {
                  var _text = fiber.pendingProps, _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotFindHydratableTextInstance(
                    parentType,
                    parentProps,
                    parentInstance,
                    _text,
                    // TODO: Delete this argument when we remove the legacy root API.
                    _isConcurrentMode
                  );
                  break;
                }
              }
              break;
            }
            case SuspenseComponent: {
              var suspenseState = returnFiber.memoizedState, _parentInstance = suspenseState.dehydrated;
              if (_parentInstance !== null)
                switch (fiber.tag) {
                  case HostComponent:
                    var _type2 = fiber.type, _props2 = fiber.pendingProps;
                    didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                    break;
                  case HostText:
                    var _text2 = fiber.pendingProps;
                    didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                    break;
                }
              break;
            }
            default:
              return;
          }
        }
      }
      function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.flags = fiber.flags & ~Hydrating | Placement, warnNonhydratedInstance(returnFiber, fiber);
      }
      function tryHydrate(fiber, nextInstance) {
        switch (fiber.tag) {
          case HostComponent: {
            var type = fiber.type, props = fiber.pendingProps, instance = canHydrateInstance(nextInstance, type);
            return instance !== null ? (fiber.stateNode = instance, hydrationParentFiber = fiber, nextHydratableInstance = getFirstHydratableChild(instance), !0) : !1;
          }
          case HostText: {
            var text = fiber.pendingProps, textInstance = canHydrateTextInstance(nextInstance, text);
            return textInstance !== null ? (fiber.stateNode = textInstance, hydrationParentFiber = fiber, nextHydratableInstance = null, !0) : !1;
          }
          case SuspenseComponent: {
            var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
            if (suspenseInstance !== null) {
              var suspenseState = {
                dehydrated: suspenseInstance,
                treeContext: getSuspendedTreeContext(),
                retryLane: OffscreenLane
              };
              fiber.memoizedState = suspenseState;
              var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
              return dehydratedFragment.return = fiber, fiber.child = dehydratedFragment, hydrationParentFiber = fiber, nextHydratableInstance = null, !0;
            }
            return !1;
          }
          default:
            return !1;
        }
      }
      function shouldClientRenderOnMismatch(fiber) {
        return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
      }
      function throwOnHydrationMismatch(fiber) {
        throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
      }
      function tryToClaimNextHydratableInstance(fiber) {
        if (isHydrating) {
          var nextInstance = nextHydratableInstance;
          if (!nextInstance) {
            shouldClientRenderOnMismatch(fiber) && (warnNonhydratedInstance(hydrationParentFiber, fiber), throwOnHydrationMismatch()), insertNonHydratedInstance(hydrationParentFiber, fiber), isHydrating = !1, hydrationParentFiber = fiber;
            return;
          }
          var firstAttemptedInstance = nextInstance;
          if (!tryHydrate(fiber, nextInstance)) {
            shouldClientRenderOnMismatch(fiber) && (warnNonhydratedInstance(hydrationParentFiber, fiber), throwOnHydrationMismatch()), nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            var prevHydrationParentFiber = hydrationParentFiber;
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber), isHydrating = !1, hydrationParentFiber = fiber;
              return;
            }
            deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
          }
        }
      }
      function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        var instance = fiber.stateNode, shouldWarnIfMismatchDev = !didSuspendOrErrorDEV, updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
        return fiber.updateQueue = updatePayload, updatePayload !== null;
      }
      function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode, textContent = fiber.memoizedProps, shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
        if (shouldUpdate) {
          var returnFiber = hydrationParentFiber;
          if (returnFiber !== null)
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo, isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotMatchHydratedContainerTextInstance(
                  parentContainer,
                  textInstance,
                  textContent,
                  // TODO: Delete this argument when we remove the legacy root API.
                  isConcurrentMode
                );
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type, parentProps = returnFiber.memoizedProps, parentInstance = returnFiber.stateNode, _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotMatchHydratedTextInstance(
                  parentType,
                  parentProps,
                  parentInstance,
                  textInstance,
                  textContent,
                  // TODO: Delete this argument when we remove the legacy root API.
                  _isConcurrentMode2
                );
                break;
              }
            }
        }
        return shouldUpdate;
      }
      function prepareToHydrateHostSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState, suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance)
          throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        hydrateSuspenseInstance(suspenseInstance, fiber);
      }
      function skipPastDehydratedSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState, suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance)
          throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
      }
      function popToNextHostParent(fiber) {
        for (var parent = fiber.return; parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent; )
          parent = parent.return;
        hydrationParentFiber = parent;
      }
      function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber)
          return !1;
        if (!isHydrating)
          return popToNextHostParent(fiber), isHydrating = !0, !1;
        if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
          var nextInstance = nextHydratableInstance;
          if (nextInstance)
            if (shouldClientRenderOnMismatch(fiber))
              warnIfUnhydratedTailNodes(fiber), throwOnHydrationMismatch();
            else
              for (; nextInstance; )
                deleteHydratableInstance(fiber, nextInstance), nextInstance = getNextHydratableSibling(nextInstance);
        }
        return popToNextHostParent(fiber), fiber.tag === SuspenseComponent ? nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber) : nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null, !0;
      }
      function hasUnhydratedTailNodes() {
        return isHydrating && nextHydratableInstance !== null;
      }
      function warnIfUnhydratedTailNodes(fiber) {
        for (var nextInstance = nextHydratableInstance; nextInstance; )
          warnUnhydratedInstance(fiber, nextInstance), nextInstance = getNextHydratableSibling(nextInstance);
      }
      function resetHydrationState() {
        hydrationParentFiber = null, nextHydratableInstance = null, isHydrating = !1, didSuspendOrErrorDEV = !1;
      }
      function upgradeHydrationErrorsToRecoverable() {
        hydrationErrors !== null && (queueRecoverableErrors(hydrationErrors), hydrationErrors = null);
      }
      function getIsHydrating() {
        return isHydrating;
      }
      function queueHydrationError(error2) {
        hydrationErrors === null ? hydrationErrors = [error2] : hydrationErrors.push(error2);
      }
      var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig, NoTransition = null;
      function requestCurrentTransition() {
        return ReactCurrentBatchConfig$1.transition;
      }
      var ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function(fiber, instance) {
        },
        flushPendingUnsafeLifecycleWarnings: function() {
        },
        recordLegacyContextWarning: function(fiber, instance) {
        },
        flushLegacyContextWarning: function() {
        },
        discardPendingWarnings: function() {
        }
      };
      {
        var findStrictRoot = function(fiber) {
          for (var maybeStrictRoot = null, node = fiber; node !== null; )
            node.mode & StrictLegacyMode && (maybeStrictRoot = node), node = node.return;
          return maybeStrictRoot;
        }, setToSortedString = function(set2) {
          var array = [];
          return set2.forEach(function(value) {
            array.push(value);
          }), array.sort().join(", ");
        }, pendingComponentWillMountWarnings = [], pendingUNSAFE_ComponentWillMountWarnings = [], pendingComponentWillReceivePropsWarnings = [], pendingUNSAFE_ComponentWillReceivePropsWarnings = [], pendingComponentWillUpdateWarnings = [], pendingUNSAFE_ComponentWillUpdateWarnings = [], didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
          didWarnAboutUnsafeLifecycles.has(fiber.type) || (typeof instance.componentWillMount == "function" && // Don't warn about react-lifecycles-compat polyfilled components.
          instance.componentWillMount.__suppressDeprecationWarning !== !0 && pendingComponentWillMountWarnings.push(fiber), fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount == "function" && pendingUNSAFE_ComponentWillMountWarnings.push(fiber), typeof instance.componentWillReceiveProps == "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== !0 && pendingComponentWillReceivePropsWarnings.push(fiber), fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps == "function" && pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber), typeof instance.componentWillUpdate == "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== !0 && pendingComponentWillUpdateWarnings.push(fiber), fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate == "function" && pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber));
        }, ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
          var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
          pendingComponentWillMountWarnings.length > 0 && (pendingComponentWillMountWarnings.forEach(function(fiber) {
            componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component"), didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingComponentWillMountWarnings = []);
          var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
          pendingUNSAFE_ComponentWillMountWarnings.length > 0 && (pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
            UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component"), didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingUNSAFE_ComponentWillMountWarnings = []);
          var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
          pendingComponentWillReceivePropsWarnings.length > 0 && (pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
            componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component"), didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingComponentWillReceivePropsWarnings = []);
          var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
          pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0 && (pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
            UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component"), didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingUNSAFE_ComponentWillReceivePropsWarnings = []);
          var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
          pendingComponentWillUpdateWarnings.length > 0 && (pendingComponentWillUpdateWarnings.forEach(function(fiber) {
            componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component"), didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingComponentWillUpdateWarnings = []);
          var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
          if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0 && (pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
            UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component"), didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingUNSAFE_ComponentWillUpdateWarnings = []), UNSAFE_componentWillMountUniqueNames.size > 0) {
            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
            error(`Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move code with side effects to componentDidMount, and set initial state in the constructor.

Please update the following components: %s`, sortedNames);
          }
          if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
            error(`Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state

Please update the following components: %s`, _sortedNames);
          }
          if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
            error(`Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.

Please update the following components: %s`, _sortedNames2);
          }
          if (componentWillMountUniqueNames.size > 0) {
            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
            warn(`componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move code with side effects to componentDidMount, and set initial state in the constructor.
* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, _sortedNames3);
          }
          if (componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
            warn(`componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state
* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, _sortedNames4);
          }
          if (componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
            warn(`componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, _sortedNames5);
          }
        };
        var pendingLegacyContextWarning = /* @__PURE__ */ new Map(), didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
        ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
          var strictRoot = findStrictRoot(fiber);
          if (strictRoot === null) {
            error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
            return;
          }
          if (!didWarnAboutLegacyContext.has(fiber.type)) {
            var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
            (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext == "function") && (warningsForRoot === void 0 && (warningsForRoot = [], pendingLegacyContextWarning.set(strictRoot, warningsForRoot)), warningsForRoot.push(fiber));
          }
        }, ReactStrictModeWarnings.flushLegacyContextWarning = function() {
          pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
            if (fiberArray.length !== 0) {
              var firstFiber = fiberArray[0], uniqueNames = /* @__PURE__ */ new Set();
              fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentNameFromFiber(fiber) || "Component"), didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);
              try {
                setCurrentFiber(firstFiber), error(`Legacy context API has been detected within a strict-mode tree.

The old API will be supported in all 16.x releases, but applications using it should migrate to the new version.

Please update the following components: %s

Learn more about this warning here: https://reactjs.org/link/legacy-context`, sortedNames);
              } finally {
                resetCurrentFiber();
              }
            }
          });
        }, ReactStrictModeWarnings.discardPendingWarnings = function() {
          pendingComponentWillMountWarnings = [], pendingUNSAFE_ComponentWillMountWarnings = [], pendingComponentWillReceivePropsWarnings = [], pendingUNSAFE_ComponentWillReceivePropsWarnings = [], pendingComponentWillUpdateWarnings = [], pendingUNSAFE_ComponentWillUpdateWarnings = [], pendingLegacyContextWarning = /* @__PURE__ */ new Map();
        };
      }
      var didWarnAboutMaps, didWarnAboutGenerators, didWarnAboutStringRefs, ownerHasKeyUseWarning, ownerHasFunctionTypeWarning, warnForMissingKey = function(child, returnFiber) {
      };
      didWarnAboutMaps = !1, didWarnAboutGenerators = !1, didWarnAboutStringRefs = {}, ownerHasKeyUseWarning = {}, ownerHasFunctionTypeWarning = {}, warnForMissingKey = function(child, returnFiber) {
        if (!(child === null || typeof child != "object") && !(!child._store || child._store.validated || child.key != null)) {
          if (typeof child._store != "object")
            throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
          child._store.validated = !0;
          var componentName = getComponentNameFromFiber(returnFiber) || "Component";
          ownerHasKeyUseWarning[componentName] || (ownerHasKeyUseWarning[componentName] = !0, error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.'));
        }
      };
      function isReactClass(type) {
        return type.prototype && type.prototype.isReactComponent;
      }
      function coerceRef(returnFiber, current2, element) {
        var mixedRef = element.ref;
        if (mixedRef !== null && typeof mixedRef != "function" && typeof mixedRef != "object") {
          if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
          // because these cannot be automatically converted to an arrow function
          // using a codemod. Therefore, we don't have to warn about string refs again.
          !(element._owner && element._self && element._owner.stateNode !== element._self) && // Will already throw with "Function components cannot have string refs"
          !(element._owner && element._owner.tag !== ClassComponent) && // Will already warn with "Function components cannot be given refs"
          !(typeof element.type == "function" && !isReactClass(element.type)) && // Will already throw with "Element ref was specified as a string (someStringRef) but no owner was set"
          element._owner) {
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            didWarnAboutStringRefs[componentName] || (error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, mixedRef), didWarnAboutStringRefs[componentName] = !0);
          }
          if (element._owner) {
            var owner = element._owner, inst;
            if (owner) {
              var ownerFiber = owner;
              if (ownerFiber.tag !== ClassComponent)
                throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
              inst = ownerFiber.stateNode;
            }
            if (!inst)
              throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
            var resolvedInst = inst;
            checkPropStringCoercion(mixedRef, "ref");
            var stringRef = "" + mixedRef;
            if (current2 !== null && current2.ref !== null && typeof current2.ref == "function" && current2.ref._stringRef === stringRef)
              return current2.ref;
            var ref = function(value) {
              var refs = resolvedInst.refs;
              value === null ? delete refs[stringRef] : refs[stringRef] = value;
            };
            return ref._stringRef = stringRef, ref;
          } else {
            if (typeof mixedRef != "string")
              throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
            if (!element._owner)
              throw new Error("Element ref was specified as a string (" + mixedRef + `) but no owner was set. This could happen for one of the following reasons:
1. You may be adding a ref to a function component
2. You may be adding a ref to a component that was not created inside a component's render method
3. You have multiple copies of React loaded
See https://reactjs.org/link/refs-must-have-owner for more information.`);
          }
        }
        return mixedRef;
      }
      function throwOnInvalidObjectType(returnFiber, newChild) {
        var childString = Object.prototype.toString.call(newChild);
        throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
      }
      function warnOnFunctionType(returnFiber) {
        {
          var componentName = getComponentNameFromFiber(returnFiber) || "Component";
          if (ownerHasFunctionTypeWarning[componentName])
            return;
          ownerHasFunctionTypeWarning[componentName] = !0, error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
        }
      }
      function resolveLazy(lazyType) {
        var payload = lazyType._payload, init = lazyType._init;
        return init(payload);
      }
      function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
          if (shouldTrackSideEffects) {
            var deletions = returnFiber.deletions;
            deletions === null ? (returnFiber.deletions = [childToDelete], returnFiber.flags |= ChildDeletion) : deletions.push(childToDelete);
          }
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
          if (!shouldTrackSideEffects)
            return null;
          for (var childToDelete = currentFirstChild; childToDelete !== null; )
            deleteChild(returnFiber, childToDelete), childToDelete = childToDelete.sibling;
          return null;
        }
        function mapRemainingChildren(returnFiber, currentFirstChild) {
          for (var existingChildren = /* @__PURE__ */ new Map(), existingChild = currentFirstChild; existingChild !== null; )
            existingChild.key !== null ? existingChildren.set(existingChild.key, existingChild) : existingChildren.set(existingChild.index, existingChild), existingChild = existingChild.sibling;
          return existingChildren;
        }
        function useFiber(fiber, pendingProps) {
          var clone = createWorkInProgress(fiber, pendingProps);
          return clone.index = 0, clone.sibling = null, clone;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
          if (newFiber.index = newIndex, !shouldTrackSideEffects)
            return newFiber.flags |= Forked, lastPlacedIndex;
          var current2 = newFiber.alternate;
          if (current2 !== null) {
            var oldIndex = current2.index;
            return oldIndex < lastPlacedIndex ? (newFiber.flags |= Placement, lastPlacedIndex) : oldIndex;
          } else
            return newFiber.flags |= Placement, lastPlacedIndex;
        }
        function placeSingleChild(newFiber) {
          return shouldTrackSideEffects && newFiber.alternate === null && (newFiber.flags |= Placement), newFiber;
        }
        function updateTextNode(returnFiber, current2, textContent, lanes) {
          if (current2 === null || current2.tag !== HostText) {
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            return created.return = returnFiber, created;
          } else {
            var existing = useFiber(current2, textContent);
            return existing.return = returnFiber, existing;
          }
        }
        function updateElement(returnFiber, current2, element, lanes) {
          var elementType = element.type;
          if (elementType === REACT_FRAGMENT_TYPE)
            return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
          if (current2 !== null && (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
          isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
          // We need to do this after the Hot Reloading check above,
          // because hot reloading has different semantics than prod because
          // it doesn't resuspend. So we can't let the call below suspend.
          typeof elementType == "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type)) {
            var existing = useFiber(current2, element.props);
            return existing.ref = coerceRef(returnFiber, current2, element), existing.return = returnFiber, existing._debugSource = element._source, existing._debugOwner = element._owner, existing;
          }
          var created = createFiberFromElement(element, returnFiber.mode, lanes);
          return created.ref = coerceRef(returnFiber, current2, element), created.return = returnFiber, created;
        }
        function updatePortal(returnFiber, current2, portal, lanes) {
          if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            return created.return = returnFiber, created;
          } else {
            var existing = useFiber(current2, portal.children || []);
            return existing.return = returnFiber, existing;
          }
        }
        function updateFragment2(returnFiber, current2, fragment, lanes, key) {
          if (current2 === null || current2.tag !== Fragment3) {
            var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
            return created.return = returnFiber, created;
          } else {
            var existing = useFiber(current2, fragment);
            return existing.return = returnFiber, existing;
          }
        }
        function createChild(returnFiber, newChild, lanes) {
          if (typeof newChild == "string" && newChild !== "" || typeof newChild == "number") {
            var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
            return created.return = returnFiber, created;
          }
          if (typeof newChild == "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                return _created.ref = coerceRef(returnFiber, null, newChild), _created.return = returnFiber, _created;
              }
              case REACT_PORTAL_TYPE: {
                var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                return _created2.return = returnFiber, _created2;
              }
              case REACT_LAZY_TYPE: {
                var payload = newChild._payload, init = newChild._init;
                return createChild(returnFiber, init(payload), lanes);
              }
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
              var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
              return _created3.return = returnFiber, _created3;
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          return typeof newChild == "function" && warnOnFunctionType(returnFiber), null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
          var key = oldFiber !== null ? oldFiber.key : null;
          if (typeof newChild == "string" && newChild !== "" || typeof newChild == "number")
            return key !== null ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
          if (typeof newChild == "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return newChild.key === key ? updateElement(returnFiber, oldFiber, newChild, lanes) : null;
              case REACT_PORTAL_TYPE:
                return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, lanes) : null;
              case REACT_LAZY_TYPE: {
                var payload = newChild._payload, init = newChild._init;
                return updateSlot(returnFiber, oldFiber, init(payload), lanes);
              }
            }
            if (isArray(newChild) || getIteratorFn(newChild))
              return key !== null ? null : updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          return typeof newChild == "function" && warnOnFunctionType(returnFiber), null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
          if (typeof newChild == "string" && newChild !== "" || typeof newChild == "number") {
            var matchedFiber = existingChildren.get(newIdx) || null;
            return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
          }
          if (typeof newChild == "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                return updateElement(returnFiber, _matchedFiber, newChild, lanes);
              }
              case REACT_PORTAL_TYPE: {
                var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
              }
              case REACT_LAZY_TYPE:
                var payload = newChild._payload, init = newChild._init;
                return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
              var _matchedFiber3 = existingChildren.get(newIdx) || null;
              return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          return typeof newChild == "function" && warnOnFunctionType(returnFiber), null;
        }
        function warnOnInvalidKey(child, knownKeys, returnFiber) {
          {
            if (typeof child != "object" || child === null)
              return knownKeys;
            switch (child.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                warnForMissingKey(child, returnFiber);
                var key = child.key;
                if (typeof key != "string")
                  break;
                if (knownKeys === null) {
                  knownKeys = /* @__PURE__ */ new Set(), knownKeys.add(key);
                  break;
                }
                if (!knownKeys.has(key)) {
                  knownKeys.add(key);
                  break;
                }
                error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                break;
              case REACT_LAZY_TYPE:
                var payload = child._payload, init = child._init;
                warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                break;
            }
          }
          return knownKeys;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
          for (var knownKeys = null, i = 0; i < newChildren.length; i++) {
            var child = newChildren[i];
            knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
          }
          for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, lastPlacedIndex = 0, newIdx = 0, nextOldFiber = null; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
            oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
            if (newFiber === null) {
              oldFiber === null && (oldFiber = nextOldFiber);
              break;
            }
            shouldTrackSideEffects && oldFiber && newFiber.alternate === null && deleteChild(returnFiber, oldFiber), lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx), previousNewFiber === null ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber, previousNewFiber = newFiber, oldFiber = nextOldFiber;
          }
          if (newIdx === newChildren.length) {
            if (deleteRemainingChildren(returnFiber, oldFiber), getIsHydrating()) {
              var numberOfForks = newIdx;
              pushTreeFork(returnFiber, numberOfForks);
            }
            return resultingFirstChild;
          }
          if (oldFiber === null) {
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
              _newFiber !== null && (lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx), previousNewFiber === null ? resultingFirstChild = _newFiber : previousNewFiber.sibling = _newFiber, previousNewFiber = _newFiber);
            }
            if (getIsHydrating()) {
              var _numberOfForks = newIdx;
              pushTreeFork(returnFiber, _numberOfForks);
            }
            return resultingFirstChild;
          }
          for (var existingChildren = mapRemainingChildren(returnFiber, oldFiber); newIdx < newChildren.length; newIdx++) {
            var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
            _newFiber2 !== null && (shouldTrackSideEffects && _newFiber2.alternate !== null && existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key), lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx), previousNewFiber === null ? resultingFirstChild = _newFiber2 : previousNewFiber.sibling = _newFiber2, previousNewFiber = _newFiber2);
          }
          if (shouldTrackSideEffects && existingChildren.forEach(function(child2) {
            return deleteChild(returnFiber, child2);
          }), getIsHydrating()) {
            var _numberOfForks2 = newIdx;
            pushTreeFork(returnFiber, _numberOfForks2);
          }
          return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
          var iteratorFn = getIteratorFn(newChildrenIterable);
          if (typeof iteratorFn != "function")
            throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
          {
            typeof Symbol == "function" && // $FlowFixMe Flow doesn't know about toStringTag
            newChildrenIterable[Symbol.toStringTag] === "Generator" && (didWarnAboutGenerators || error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers."), didWarnAboutGenerators = !0), newChildrenIterable.entries === iteratorFn && (didWarnAboutMaps || error("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), didWarnAboutMaps = !0);
            var _newChildren = iteratorFn.call(newChildrenIterable);
            if (_newChildren)
              for (var knownKeys = null, _step = _newChildren.next(); !_step.done; _step = _newChildren.next()) {
                var child = _step.value;
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
          }
          var newChildren = iteratorFn.call(newChildrenIterable);
          if (newChildren == null)
            throw new Error("An iterable object provided no iterator.");
          for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, lastPlacedIndex = 0, newIdx = 0, nextOldFiber = null, step = newChildren.next(); oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
            oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
            var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
            if (newFiber === null) {
              oldFiber === null && (oldFiber = nextOldFiber);
              break;
            }
            shouldTrackSideEffects && oldFiber && newFiber.alternate === null && deleteChild(returnFiber, oldFiber), lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx), previousNewFiber === null ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber, previousNewFiber = newFiber, oldFiber = nextOldFiber;
          }
          if (step.done) {
            if (deleteRemainingChildren(returnFiber, oldFiber), getIsHydrating()) {
              var numberOfForks = newIdx;
              pushTreeFork(returnFiber, numberOfForks);
            }
            return resultingFirstChild;
          }
          if (oldFiber === null) {
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber3 = createChild(returnFiber, step.value, lanes);
              _newFiber3 !== null && (lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx), previousNewFiber === null ? resultingFirstChild = _newFiber3 : previousNewFiber.sibling = _newFiber3, previousNewFiber = _newFiber3);
            }
            if (getIsHydrating()) {
              var _numberOfForks3 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks3);
            }
            return resultingFirstChild;
          }
          for (var existingChildren = mapRemainingChildren(returnFiber, oldFiber); !step.done; newIdx++, step = newChildren.next()) {
            var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
            _newFiber4 !== null && (shouldTrackSideEffects && _newFiber4.alternate !== null && existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key), lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx), previousNewFiber === null ? resultingFirstChild = _newFiber4 : previousNewFiber.sibling = _newFiber4, previousNewFiber = _newFiber4);
          }
          if (shouldTrackSideEffects && existingChildren.forEach(function(child2) {
            return deleteChild(returnFiber, child2);
          }), getIsHydrating()) {
            var _numberOfForks4 = newIdx;
            pushTreeFork(returnFiber, _numberOfForks4);
          }
          return resultingFirstChild;
        }
        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
          if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
            deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
            var existing = useFiber(currentFirstChild, textContent);
            return existing.return = returnFiber, existing;
          }
          deleteRemainingChildren(returnFiber, currentFirstChild);
          var created = createFiberFromText(textContent, returnFiber.mode, lanes);
          return created.return = returnFiber, created;
        }
        function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
          for (var key = element.key, child = currentFirstChild; child !== null; ) {
            if (child.key === key) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                if (child.tag === Fragment3) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, element.props.children);
                  return existing.return = returnFiber, existing._debugSource = element._source, existing._debugOwner = element._owner, existing;
                }
              } else if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
              isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
              // We need to do this after the Hot Reloading check above,
              // because hot reloading has different semantics than prod because
              // it doesn't resuspend. So we can't let the call below suspend.
              typeof elementType == "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var _existing = useFiber(child, element.props);
                return _existing.ref = coerceRef(returnFiber, child, element), _existing.return = returnFiber, _existing._debugSource = element._source, _existing._debugOwner = element._owner, _existing;
              }
              deleteRemainingChildren(returnFiber, child);
              break;
            } else
              deleteChild(returnFiber, child);
            child = child.sibling;
          }
          if (element.type === REACT_FRAGMENT_TYPE) {
            var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
            return created.return = returnFiber, created;
          } else {
            var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
            return _created4.ref = coerceRef(returnFiber, currentFirstChild, element), _created4.return = returnFiber, _created4;
          }
        }
        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
          for (var key = portal.key, child = currentFirstChild; child !== null; ) {
            if (child.key === key)
              if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, portal.children || []);
                return existing.return = returnFiber, existing;
              } else {
                deleteRemainingChildren(returnFiber, child);
                break;
              }
            else
              deleteChild(returnFiber, child);
            child = child.sibling;
          }
          var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
          return created.return = returnFiber, created;
        }
        function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
          var isUnkeyedTopLevelFragment = typeof newChild == "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
          if (isUnkeyedTopLevelFragment && (newChild = newChild.props.children), typeof newChild == "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
              case REACT_PORTAL_TYPE:
                return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
              case REACT_LAZY_TYPE:
                var payload = newChild._payload, init = newChild._init;
                return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
            }
            if (isArray(newChild))
              return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
            if (getIteratorFn(newChild))
              return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          return typeof newChild == "string" && newChild !== "" || typeof newChild == "number" ? placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes)) : (typeof newChild == "function" && warnOnFunctionType(returnFiber), deleteRemainingChildren(returnFiber, currentFirstChild));
        }
        return reconcileChildFibers2;
      }
      var reconcileChildFibers = ChildReconciler(!0), mountChildFibers = ChildReconciler(!1);
      function cloneChildFibers(current2, workInProgress2) {
        if (current2 !== null && workInProgress2.child !== current2.child)
          throw new Error("Resuming work not yet implemented.");
        if (workInProgress2.child !== null) {
          var currentChild = workInProgress2.child, newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
          for (workInProgress2.child = newChild, newChild.return = workInProgress2; currentChild.sibling !== null; )
            currentChild = currentChild.sibling, newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps), newChild.return = workInProgress2;
          newChild.sibling = null;
        }
      }
      function resetChildFibers(workInProgress2, lanes) {
        for (var child = workInProgress2.child; child !== null; )
          resetWorkInProgress(child, lanes), child = child.sibling;
      }
      var valueCursor = createCursor(null), rendererSigil;
      rendererSigil = {};
      var currentlyRenderingFiber = null, lastContextDependency = null, lastFullyObservedContext = null, isDisallowedContextReadInDEV = !1;
      function resetContextDependencies() {
        currentlyRenderingFiber = null, lastContextDependency = null, lastFullyObservedContext = null, isDisallowedContextReadInDEV = !1;
      }
      function enterDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = !0;
      }
      function exitDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = !1;
      }
      function pushProvider(providerFiber, context, nextValue) {
        push(valueCursor, context._currentValue, providerFiber), context._currentValue = nextValue, context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil && error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."), context._currentRenderer = rendererSigil;
      }
      function popProvider(context, providerFiber) {
        var currentValue = valueCursor.current;
        pop(valueCursor, providerFiber), context._currentValue = currentValue;
      }
      function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
        for (var node = parent; node !== null; ) {
          var alternate = node.alternate;
          if (isSubsetOfLanes(node.childLanes, renderLanes2) ? alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2) && (alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2)) : (node.childLanes = mergeLanes(node.childLanes, renderLanes2), alternate !== null && (alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2))), node === propagationRoot)
            break;
          node = node.return;
        }
        node !== propagationRoot && error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
      }
      function propagateContextChange(workInProgress2, context, renderLanes2) {
        propagateContextChange_eager(workInProgress2, context, renderLanes2);
      }
      function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
        var fiber = workInProgress2.child;
        for (fiber !== null && (fiber.return = workInProgress2); fiber !== null; ) {
          var nextFiber = void 0, list = fiber.dependencies;
          if (list !== null) {
            nextFiber = fiber.child;
            for (var dependency = list.firstContext; dependency !== null; ) {
              if (dependency.context === context) {
                if (fiber.tag === ClassComponent) {
                  var lane = pickArbitraryLane(renderLanes2), update = createUpdate(NoTimestamp, lane);
                  update.tag = ForceUpdate;
                  var updateQueue = fiber.updateQueue;
                  if (updateQueue !== null) {
                    var sharedQueue = updateQueue.shared, pending = sharedQueue.pending;
                    pending === null ? update.next = update : (update.next = pending.next, pending.next = update), sharedQueue.pending = update;
                  }
                }
                fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                var alternate = fiber.alternate;
                alternate !== null && (alternate.lanes = mergeLanes(alternate.lanes, renderLanes2)), scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2), list.lanes = mergeLanes(list.lanes, renderLanes2);
                break;
              }
              dependency = dependency.next;
            }
          } else if (fiber.tag === ContextProvider)
            nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
          else if (fiber.tag === DehydratedFragment) {
            var parentSuspense = fiber.return;
            if (parentSuspense === null)
              throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
            parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
            var _alternate = parentSuspense.alternate;
            _alternate !== null && (_alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2)), scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2), nextFiber = fiber.sibling;
          } else
            nextFiber = fiber.child;
          if (nextFiber !== null)
            nextFiber.return = fiber;
          else
            for (nextFiber = fiber; nextFiber !== null; ) {
              if (nextFiber === workInProgress2) {
                nextFiber = null;
                break;
              }
              var sibling = nextFiber.sibling;
              if (sibling !== null) {
                sibling.return = nextFiber.return, nextFiber = sibling;
                break;
              }
              nextFiber = nextFiber.return;
            }
          fiber = nextFiber;
        }
      }
      function prepareToReadContext(workInProgress2, renderLanes2) {
        currentlyRenderingFiber = workInProgress2, lastContextDependency = null, lastFullyObservedContext = null;
        var dependencies = workInProgress2.dependencies;
        if (dependencies !== null) {
          var firstContext = dependencies.firstContext;
          firstContext !== null && (includesSomeLane(dependencies.lanes, renderLanes2) && markWorkInProgressReceivedUpdate(), dependencies.firstContext = null);
        }
      }
      function readContext(context) {
        isDisallowedContextReadInDEV && error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        var value = context._currentValue;
        if (lastFullyObservedContext !== context) {
          var contextItem = {
            context,
            memoizedValue: value,
            next: null
          };
          if (lastContextDependency === null) {
            if (currentlyRenderingFiber === null)
              throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            lastContextDependency = contextItem, currentlyRenderingFiber.dependencies = {
              lanes: NoLanes,
              firstContext: contextItem
            };
          } else
            lastContextDependency = lastContextDependency.next = contextItem;
        }
        return value;
      }
      var concurrentQueues = null;
      function pushConcurrentUpdateQueue(queue) {
        concurrentQueues === null ? concurrentQueues = [queue] : concurrentQueues.push(queue);
      }
      function finishQueueingConcurrentUpdates() {
        if (concurrentQueues !== null) {
          for (var i = 0; i < concurrentQueues.length; i++) {
            var queue = concurrentQueues[i], lastInterleavedUpdate = queue.interleaved;
            if (lastInterleavedUpdate !== null) {
              queue.interleaved = null;
              var firstInterleavedUpdate = lastInterleavedUpdate.next, lastPendingUpdate = queue.pending;
              if (lastPendingUpdate !== null) {
                var firstPendingUpdate = lastPendingUpdate.next;
                lastPendingUpdate.next = firstInterleavedUpdate, lastInterleavedUpdate.next = firstPendingUpdate;
              }
              queue.pending = lastInterleavedUpdate;
            }
          }
          concurrentQueues = null;
        }
      }
      function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        return interleaved === null ? (update.next = update, pushConcurrentUpdateQueue(queue)) : (update.next = interleaved.next, interleaved.next = update), queue.interleaved = update, markUpdateLaneFromFiberToRoot(fiber, lane);
      }
      function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        interleaved === null ? (update.next = update, pushConcurrentUpdateQueue(queue)) : (update.next = interleaved.next, interleaved.next = update), queue.interleaved = update;
      }
      function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        return interleaved === null ? (update.next = update, pushConcurrentUpdateQueue(queue)) : (update.next = interleaved.next, interleaved.next = update), queue.interleaved = update, markUpdateLaneFromFiberToRoot(fiber, lane);
      }
      function enqueueConcurrentRenderForLane(fiber, lane) {
        return markUpdateLaneFromFiberToRoot(fiber, lane);
      }
      var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
      function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
        var alternate = sourceFiber.alternate;
        alternate !== null && (alternate.lanes = mergeLanes(alternate.lanes, lane)), alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags && warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
        for (var node = sourceFiber, parent = sourceFiber.return; parent !== null; )
          parent.childLanes = mergeLanes(parent.childLanes, lane), alternate = parent.alternate, alternate !== null ? alternate.childLanes = mergeLanes(alternate.childLanes, lane) : (parent.flags & (Placement | Hydrating)) !== NoFlags && warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber), node = parent, parent = parent.return;
        if (node.tag === HostRoot) {
          var root2 = node.stateNode;
          return root2;
        } else
          return null;
      }
      var UpdateState = 0, ReplaceState = 1, ForceUpdate = 2, CaptureUpdate = 3, hasForceUpdate = !1, didWarnUpdateInsideUpdate, currentlyProcessingQueue;
      didWarnUpdateInsideUpdate = !1, currentlyProcessingQueue = null;
      function initializeUpdateQueue(fiber) {
        var queue = {
          baseState: fiber.memoizedState,
          firstBaseUpdate: null,
          lastBaseUpdate: null,
          shared: {
            pending: null,
            interleaved: null,
            lanes: NoLanes
          },
          effects: null
        };
        fiber.updateQueue = queue;
      }
      function cloneUpdateQueue(current2, workInProgress2) {
        var queue = workInProgress2.updateQueue, currentQueue = current2.updateQueue;
        if (queue === currentQueue) {
          var clone = {
            baseState: currentQueue.baseState,
            firstBaseUpdate: currentQueue.firstBaseUpdate,
            lastBaseUpdate: currentQueue.lastBaseUpdate,
            shared: currentQueue.shared,
            effects: currentQueue.effects
          };
          workInProgress2.updateQueue = clone;
        }
      }
      function createUpdate(eventTime, lane) {
        var update = {
          eventTime,
          lane,
          tag: UpdateState,
          payload: null,
          callback: null,
          next: null
        };
        return update;
      }
      function enqueueUpdate(fiber, update, lane) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null)
          return null;
        var sharedQueue = updateQueue.shared;
        if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate && (error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback."), didWarnUpdateInsideUpdate = !0), isUnsafeClassRenderPhaseUpdate()) {
          var pending = sharedQueue.pending;
          return pending === null ? update.next = update : (update.next = pending.next, pending.next = update), sharedQueue.pending = update, unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
        } else
          return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
      }
      function entangleTransitions(root2, fiber, lane) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue !== null) {
          var sharedQueue = updateQueue.shared;
          if (isTransitionLane(lane)) {
            var queueLanes = sharedQueue.lanes;
            queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            sharedQueue.lanes = newQueueLanes, markRootEntangled(root2, newQueueLanes);
          }
        }
      }
      function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
        var queue = workInProgress2.updateQueue, current2 = workInProgress2.alternate;
        if (current2 !== null) {
          var currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var newFirst = null, newLast = null, firstBaseUpdate = queue.firstBaseUpdate;
            if (firstBaseUpdate !== null) {
              var update = firstBaseUpdate;
              do {
                var clone = {
                  eventTime: update.eventTime,
                  lane: update.lane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                newLast === null ? newFirst = newLast = clone : (newLast.next = clone, newLast = clone), update = update.next;
              } while (update !== null);
              newLast === null ? newFirst = newLast = capturedUpdate : (newLast.next = capturedUpdate, newLast = capturedUpdate);
            } else
              newFirst = newLast = capturedUpdate;
            queue = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: newFirst,
              lastBaseUpdate: newLast,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            }, workInProgress2.updateQueue = queue;
            return;
          }
        }
        var lastBaseUpdate = queue.lastBaseUpdate;
        lastBaseUpdate === null ? queue.firstBaseUpdate = capturedUpdate : lastBaseUpdate.next = capturedUpdate, queue.lastBaseUpdate = capturedUpdate;
      }
      function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
        switch (update.tag) {
          case ReplaceState: {
            var payload = update.payload;
            if (typeof payload == "function") {
              enterDisallowedContextReadInDEV();
              var nextState = payload.call(instance, prevState, nextProps);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(!0);
                  try {
                    payload.call(instance, prevState, nextProps);
                  } finally {
                    setIsStrictModeForDevtools(!1);
                  }
                }
                exitDisallowedContextReadInDEV();
              }
              return nextState;
            }
            return payload;
          }
          case CaptureUpdate:
            workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
          case UpdateState: {
            var _payload = update.payload, partialState;
            if (typeof _payload == "function") {
              enterDisallowedContextReadInDEV(), partialState = _payload.call(instance, prevState, nextProps);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(!0);
                  try {
                    _payload.call(instance, prevState, nextProps);
                  } finally {
                    setIsStrictModeForDevtools(!1);
                  }
                }
                exitDisallowedContextReadInDEV();
              }
            } else
              partialState = _payload;
            return partialState == null ? prevState : assign({}, prevState, partialState);
          }
          case ForceUpdate:
            return hasForceUpdate = !0, prevState;
        }
        return prevState;
      }
      function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
        var queue = workInProgress2.updateQueue;
        hasForceUpdate = !1, currentlyProcessingQueue = queue.shared;
        var firstBaseUpdate = queue.firstBaseUpdate, lastBaseUpdate = queue.lastBaseUpdate, pendingQueue = queue.shared.pending;
        if (pendingQueue !== null) {
          queue.shared.pending = null;
          var lastPendingUpdate = pendingQueue, firstPendingUpdate = lastPendingUpdate.next;
          lastPendingUpdate.next = null, lastBaseUpdate === null ? firstBaseUpdate = firstPendingUpdate : lastBaseUpdate.next = firstPendingUpdate, lastBaseUpdate = lastPendingUpdate;
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            var currentQueue = current2.updateQueue, currentLastBaseUpdate = currentQueue.lastBaseUpdate;
            currentLastBaseUpdate !== lastBaseUpdate && (currentLastBaseUpdate === null ? currentQueue.firstBaseUpdate = firstPendingUpdate : currentLastBaseUpdate.next = firstPendingUpdate, currentQueue.lastBaseUpdate = lastPendingUpdate);
          }
        }
        if (firstBaseUpdate !== null) {
          var newState = queue.baseState, newLanes = NoLanes, newBaseState = null, newFirstBaseUpdate = null, newLastBaseUpdate = null, update = firstBaseUpdate;
          do {
            var updateLane = update.lane, updateEventTime = update.eventTime;
            if (isSubsetOfLanes(renderLanes2, updateLane)) {
              if (newLastBaseUpdate !== null) {
                var _clone = {
                  eventTime: updateEventTime,
                  // This update is going to be committed so we never want uncommit
                  // it. Using NoLane works because 0 is a subset of all bitmasks, so
                  // this will never be skipped by the check above.
                  lane: NoLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                newLastBaseUpdate = newLastBaseUpdate.next = _clone;
              }
              newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
              var callback = update.callback;
              if (callback !== null && // If the update was already committed, we should not queue its
              // callback again.
              update.lane !== NoLane) {
                workInProgress2.flags |= Callback;
                var effects = queue.effects;
                effects === null ? queue.effects = [update] : effects.push(update);
              }
            } else {
              var clone = {
                eventTime: updateEventTime,
                lane: updateLane,
                tag: update.tag,
                payload: update.payload,
                callback: update.callback,
                next: null
              };
              newLastBaseUpdate === null ? (newFirstBaseUpdate = newLastBaseUpdate = clone, newBaseState = newState) : newLastBaseUpdate = newLastBaseUpdate.next = clone, newLanes = mergeLanes(newLanes, updateLane);
            }
            if (update = update.next, update === null) {
              if (pendingQueue = queue.shared.pending, pendingQueue === null)
                break;
              var _lastPendingUpdate = pendingQueue, _firstPendingUpdate = _lastPendingUpdate.next;
              _lastPendingUpdate.next = null, update = _firstPendingUpdate, queue.lastBaseUpdate = _lastPendingUpdate, queue.shared.pending = null;
            }
          } while (!0);
          newLastBaseUpdate === null && (newBaseState = newState), queue.baseState = newBaseState, queue.firstBaseUpdate = newFirstBaseUpdate, queue.lastBaseUpdate = newLastBaseUpdate;
          var lastInterleaved = queue.shared.interleaved;
          if (lastInterleaved !== null) {
            var interleaved = lastInterleaved;
            do
              newLanes = mergeLanes(newLanes, interleaved.lane), interleaved = interleaved.next;
            while (interleaved !== lastInterleaved);
          } else
            firstBaseUpdate === null && (queue.shared.lanes = NoLanes);
          markSkippedUpdateLanes(newLanes), workInProgress2.lanes = newLanes, workInProgress2.memoizedState = newState;
        }
        currentlyProcessingQueue = null;
      }
      function callCallback(callback, context) {
        if (typeof callback != "function")
          throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
        callback.call(context);
      }
      function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = !1;
      }
      function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
      }
      function commitUpdateQueue(finishedWork, finishedQueue, instance) {
        var effects = finishedQueue.effects;
        if (finishedQueue.effects = null, effects !== null)
          for (var i = 0; i < effects.length; i++) {
            var effect = effects[i], callback = effect.callback;
            callback !== null && (effect.callback = null, callCallback(callback, instance));
          }
      }
      var NO_CONTEXT = {}, contextStackCursor$1 = createCursor(NO_CONTEXT), contextFiberStackCursor = createCursor(NO_CONTEXT), rootInstanceStackCursor = createCursor(NO_CONTEXT);
      function requiredContext(c) {
        if (c === NO_CONTEXT)
          throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
        return c;
      }
      function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
      }
      function pushHostContainer(fiber, nextRootInstance) {
        push(rootInstanceStackCursor, nextRootInstance, fiber), push(contextFiberStackCursor, fiber, fiber), push(contextStackCursor$1, NO_CONTEXT, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance);
        pop(contextStackCursor$1, fiber), push(contextStackCursor$1, nextRootContext, fiber);
      }
      function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber), pop(contextFiberStackCursor, fiber), pop(rootInstanceStackCursor, fiber);
      }
      function getHostContext() {
        var context = requiredContext(contextStackCursor$1.current);
        return context;
      }
      function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current), context = requiredContext(contextStackCursor$1.current), nextContext = getChildHostContext(context, fiber.type);
        context !== nextContext && (push(contextFiberStackCursor, fiber, fiber), push(contextStackCursor$1, nextContext, fiber));
      }
      function popHostContext(fiber) {
        contextFiberStackCursor.current === fiber && (pop(contextStackCursor$1, fiber), pop(contextFiberStackCursor, fiber));
      }
      var DefaultSuspenseContext = 0, SubtreeSuspenseContextMask = 1, InvisibleParentSuspenseContext = 1, ForceSuspenseFallback = 2, suspenseStackCursor = createCursor(DefaultSuspenseContext);
      function hasSuspenseContext(parentContext, flag) {
        return (parentContext & flag) !== 0;
      }
      function setDefaultShallowSuspenseContext(parentContext) {
        return parentContext & SubtreeSuspenseContextMask;
      }
      function setShallowSuspenseContext(parentContext, shallowContext) {
        return parentContext & SubtreeSuspenseContextMask | shallowContext;
      }
      function addSubtreeSuspenseContext(parentContext, subtreeContext) {
        return parentContext | subtreeContext;
      }
      function pushSuspenseContext(fiber, newContext) {
        push(suspenseStackCursor, newContext, fiber);
      }
      function popSuspenseContext(fiber) {
        pop(suspenseStackCursor, fiber);
      }
      function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
        var nextState = workInProgress2.memoizedState;
        if (nextState !== null)
          return nextState.dehydrated !== null;
        var props = workInProgress2.memoizedProps;
        return !0;
      }
      function findFirstSuspended(row) {
        for (var node = row; node !== null; ) {
          if (node.tag === SuspenseComponent) {
            var state = node.memoizedState;
            if (state !== null) {
              var dehydrated = state.dehydrated;
              if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated))
                return node;
            }
          } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
          // keep track of whether it suspended or not.
          node.memoizedProps.revealOrder !== void 0) {
            var didSuspend = (node.flags & DidCapture) !== NoFlags;
            if (didSuspend)
              return node;
          } else if (node.child !== null) {
            node.child.return = node, node = node.child;
            continue;
          }
          if (node === row)
            return null;
          for (; node.sibling === null; ) {
            if (node.return === null || node.return === row)
              return null;
            node = node.return;
          }
          node.sibling.return = node.return, node = node.sibling;
        }
        return null;
      }
      var NoFlags$1 = (
        /*   */
        0
      ), HasEffect = (
        /* */
        1
      ), Insertion = (
        /*  */
        2
      ), Layout2 = (
        /*    */
        4
      ), Passive$1 = (
        /*   */
        8
      ), workInProgressSources = [];
      function resetWorkInProgressVersions() {
        for (var i = 0; i < workInProgressSources.length; i++) {
          var mutableSource = workInProgressSources[i];
          mutableSource._workInProgressVersionPrimary = null;
        }
        workInProgressSources.length = 0;
      }
      function registerMutableSourceForHydration(root2, mutableSource) {
        var getVersion = mutableSource._getVersion, version = getVersion(mutableSource._source);
        root2.mutableSourceEagerHydrationData == null ? root2.mutableSourceEagerHydrationData = [mutableSource, version] : root2.mutableSourceEagerHydrationData.push(mutableSource, version);
      }
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig, didWarnAboutMismatchedHooksForComponent, didWarnUncachedGetSnapshot;
      didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
      var renderLanes = NoLanes, currentlyRenderingFiber$1 = null, currentHook = null, workInProgressHook = null, didScheduleRenderPhaseUpdate = !1, didScheduleRenderPhaseUpdateDuringThisPass = !1, localIdCounter = 0, globalClientIdCounter = 0, RE_RENDER_LIMIT = 25, currentHookNameInDev = null, hookTypesDev = null, hookTypesUpdateIndexDev = -1, ignorePreviousDependencies = !1;
      function mountHookTypesDev() {
        {
          var hookName = currentHookNameInDev;
          hookTypesDev === null ? hookTypesDev = [hookName] : hookTypesDev.push(hookName);
        }
      }
      function updateHookTypesDev() {
        {
          var hookName = currentHookNameInDev;
          hookTypesDev !== null && (hookTypesUpdateIndexDev++, hookTypesDev[hookTypesUpdateIndexDev] !== hookName && warnOnHookMismatchInDev(hookName));
        }
      }
      function checkDepsAreArrayDev(deps) {
        deps != null && !isArray(deps) && error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
      }
      function warnOnHookMismatchInDev(currentHookName) {
        {
          var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
          if (!didWarnAboutMismatchedHooksForComponent.has(componentName) && (didWarnAboutMismatchedHooksForComponent.add(componentName), hookTypesDev !== null)) {
            for (var table = "", secondColumnStart = 30, i = 0; i <= hookTypesUpdateIndexDev; i++) {
              for (var oldHookName = hookTypesDev[i], newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName, row = i + 1 + ". " + oldHookName; row.length < secondColumnStart; )
                row += " ";
              row += newHookName + `
`, table += row;
            }
            error(`React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks

   Previous render            Next render
   ------------------------------------------------------
%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
`, componentName, table);
          }
        }
      }
      function throwInvalidHookError() {
        throw new Error(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`);
      }
      function areHookInputsEqual(nextDeps, prevDeps) {
        if (ignorePreviousDependencies)
          return !1;
        if (prevDeps === null)
          return error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev), !1;
        nextDeps.length !== prevDeps.length && error(`The final argument passed to %s changed size between renders. The order and size of this array must remain constant.

Previous: %s
Incoming: %s`, currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
        for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++)
          if (!objectIs(nextDeps[i], prevDeps[i]))
            return !1;
        return !0;
      }
      function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
        renderLanes = nextRenderLanes, currentlyRenderingFiber$1 = workInProgress2, hookTypesDev = current2 !== null ? current2._debugHookTypes : null, hookTypesUpdateIndexDev = -1, ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type, workInProgress2.memoizedState = null, workInProgress2.updateQueue = null, workInProgress2.lanes = NoLanes, current2 !== null && current2.memoizedState !== null ? ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV : hookTypesDev !== null ? ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV : ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
        var children = Component(props, secondArg);
        if (didScheduleRenderPhaseUpdateDuringThisPass) {
          var numberOfReRenders = 0;
          do {
            if (didScheduleRenderPhaseUpdateDuringThisPass = !1, localIdCounter = 0, numberOfReRenders >= RE_RENDER_LIMIT)
              throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
            numberOfReRenders += 1, ignorePreviousDependencies = !1, currentHook = null, workInProgressHook = null, workInProgress2.updateQueue = null, hookTypesUpdateIndexDev = -1, ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV, children = Component(props, secondArg);
          } while (didScheduleRenderPhaseUpdateDuringThisPass);
        }
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher, workInProgress2._debugHookTypes = hookTypesDev;
        var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
        if (renderLanes = NoLanes, currentlyRenderingFiber$1 = null, currentHook = null, workInProgressHook = null, currentHookNameInDev = null, hookTypesDev = null, hookTypesUpdateIndexDev = -1, current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
        // and creates false positives. To make this work in legacy mode, we'd
        // need to mark fibers that commit in an incomplete state, somehow. For
        // now I'll disable the warning that most of the bugs that would trigger
        // it are either exclusive to concurrent mode or exist in both.
        (current2.mode & ConcurrentMode) !== NoMode && error("Internal React error: Expected static flag was missing. Please notify the React team."), didScheduleRenderPhaseUpdate = !1, didRenderTooFewHooks)
          throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
        return children;
      }
      function checkDidRenderIdHook() {
        var didRenderIdHook = localIdCounter !== 0;
        return localIdCounter = 0, didRenderIdHook;
      }
      function bailoutHooks(current2, workInProgress2, lanes) {
        workInProgress2.updateQueue = current2.updateQueue, (workInProgress2.mode & StrictEffectsMode) !== NoMode ? workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update) : workInProgress2.flags &= ~(Passive | Update), current2.lanes = removeLanes(current2.lanes, lanes);
      }
      function resetHooksAfterThrow() {
        if (ReactCurrentDispatcher$1.current = ContextOnlyDispatcher, didScheduleRenderPhaseUpdate) {
          for (var hook = currentlyRenderingFiber$1.memoizedState; hook !== null; ) {
            var queue = hook.queue;
            queue !== null && (queue.pending = null), hook = hook.next;
          }
          didScheduleRenderPhaseUpdate = !1;
        }
        renderLanes = NoLanes, currentlyRenderingFiber$1 = null, currentHook = null, workInProgressHook = null, hookTypesDev = null, hookTypesUpdateIndexDev = -1, currentHookNameInDev = null, isUpdatingOpaqueValueInRenderPhase = !1, didScheduleRenderPhaseUpdateDuringThisPass = !1, localIdCounter = 0;
      }
      function mountWorkInProgressHook() {
        var hook = {
          memoizedState: null,
          baseState: null,
          baseQueue: null,
          queue: null,
          next: null
        };
        return workInProgressHook === null ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook : workInProgressHook = workInProgressHook.next = hook, workInProgressHook;
      }
      function updateWorkInProgressHook() {
        var nextCurrentHook;
        if (currentHook === null) {
          var current2 = currentlyRenderingFiber$1.alternate;
          current2 !== null ? nextCurrentHook = current2.memoizedState : nextCurrentHook = null;
        } else
          nextCurrentHook = currentHook.next;
        var nextWorkInProgressHook;
        if (workInProgressHook === null ? nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState : nextWorkInProgressHook = workInProgressHook.next, nextWorkInProgressHook !== null)
          workInProgressHook = nextWorkInProgressHook, nextWorkInProgressHook = workInProgressHook.next, currentHook = nextCurrentHook;
        else {
          if (nextCurrentHook === null)
            throw new Error("Rendered more hooks than during the previous render.");
          currentHook = nextCurrentHook;
          var newHook = {
            memoizedState: currentHook.memoizedState,
            baseState: currentHook.baseState,
            baseQueue: currentHook.baseQueue,
            queue: currentHook.queue,
            next: null
          };
          workInProgressHook === null ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook : workInProgressHook = workInProgressHook.next = newHook;
        }
        return workInProgressHook;
      }
      function createFunctionComponentUpdateQueue() {
        return {
          lastEffect: null,
          stores: null
        };
      }
      function basicStateReducer(state, action8) {
        return typeof action8 == "function" ? action8(state) : action8;
      }
      function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook(), initialState;
        init !== void 0 ? initialState = init(initialArg) : initialState = initialArg, hook.memoizedState = hook.baseState = initialState;
        var queue = {
          pending: null,
          interleaved: null,
          lanes: NoLanes,
          dispatch: null,
          lastRenderedReducer: reducer,
          lastRenderedState: initialState
        };
        hook.queue = queue;
        var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
        return [hook.memoizedState, dispatch];
      }
      function updateReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook(), queue = hook.queue;
        if (queue === null)
          throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        queue.lastRenderedReducer = reducer;
        var current2 = currentHook, baseQueue = current2.baseQueue, pendingQueue = queue.pending;
        if (pendingQueue !== null) {
          if (baseQueue !== null) {
            var baseFirst = baseQueue.next, pendingFirst = pendingQueue.next;
            baseQueue.next = pendingFirst, pendingQueue.next = baseFirst;
          }
          current2.baseQueue !== baseQueue && error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React."), current2.baseQueue = baseQueue = pendingQueue, queue.pending = null;
        }
        if (baseQueue !== null) {
          var first = baseQueue.next, newState = current2.baseState, newBaseState = null, newBaseQueueFirst = null, newBaseQueueLast = null, update = first;
          do {
            var updateLane = update.lane;
            if (isSubsetOfLanes(renderLanes, updateLane)) {
              if (newBaseQueueLast !== null) {
                var _clone = {
                  // This update is going to be committed so we never want uncommit
                  // it. Using NoLane works because 0 is a subset of all bitmasks, so
                  // this will never be skipped by the check above.
                  lane: NoLane,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null
                };
                newBaseQueueLast = newBaseQueueLast.next = _clone;
              }
              if (update.hasEagerState)
                newState = update.eagerState;
              else {
                var action8 = update.action;
                newState = reducer(newState, action8);
              }
            } else {
              var clone = {
                lane: updateLane,
                action: update.action,
                hasEagerState: update.hasEagerState,
                eagerState: update.eagerState,
                next: null
              };
              newBaseQueueLast === null ? (newBaseQueueFirst = newBaseQueueLast = clone, newBaseState = newState) : newBaseQueueLast = newBaseQueueLast.next = clone, currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane), markSkippedUpdateLanes(updateLane);
            }
            update = update.next;
          } while (update !== null && update !== first);
          newBaseQueueLast === null ? newBaseState = newState : newBaseQueueLast.next = newBaseQueueFirst, objectIs(newState, hook.memoizedState) || markWorkInProgressReceivedUpdate(), hook.memoizedState = newState, hook.baseState = newBaseState, hook.baseQueue = newBaseQueueLast, queue.lastRenderedState = newState;
        }
        var lastInterleaved = queue.interleaved;
        if (lastInterleaved !== null) {
          var interleaved = lastInterleaved;
          do {
            var interleavedLane = interleaved.lane;
            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane), markSkippedUpdateLanes(interleavedLane), interleaved = interleaved.next;
          } while (interleaved !== lastInterleaved);
        } else
          baseQueue === null && (queue.lanes = NoLanes);
        var dispatch = queue.dispatch;
        return [hook.memoizedState, dispatch];
      }
      function rerenderReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook(), queue = hook.queue;
        if (queue === null)
          throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        queue.lastRenderedReducer = reducer;
        var dispatch = queue.dispatch, lastRenderPhaseUpdate = queue.pending, newState = hook.memoizedState;
        if (lastRenderPhaseUpdate !== null) {
          queue.pending = null;
          var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next, update = firstRenderPhaseUpdate;
          do {
            var action8 = update.action;
            newState = reducer(newState, action8), update = update.next;
          } while (update !== firstRenderPhaseUpdate);
          objectIs(newState, hook.memoizedState) || markWorkInProgressReceivedUpdate(), hook.memoizedState = newState, hook.baseQueue === null && (hook.baseState = newState), queue.lastRenderedState = newState;
        }
        return [newState, dispatch];
      }
      function mountMutableSource(source, getSnapshot, subscribe) {
      }
      function updateMutableSource(source, getSnapshot, subscribe) {
      }
      function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1, hook = mountWorkInProgressHook(), nextSnapshot, isHydrating2 = getIsHydrating();
        if (isHydrating2) {
          if (getServerSnapshot === void 0)
            throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
          nextSnapshot = getServerSnapshot(), didWarnUncachedGetSnapshot || nextSnapshot !== getServerSnapshot() && (error("The result of getServerSnapshot should be cached to avoid an infinite loop"), didWarnUncachedGetSnapshot = !0);
        } else {
          if (nextSnapshot = getSnapshot(), !didWarnUncachedGetSnapshot) {
            var cachedSnapshot = getSnapshot();
            objectIs(nextSnapshot, cachedSnapshot) || (error("The result of getSnapshot should be cached to avoid an infinite loop"), didWarnUncachedGetSnapshot = !0);
          }
          var root2 = getWorkInProgressRoot();
          if (root2 === null)
            throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
          includesBlockingLane(root2, renderLanes) || pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        }
        hook.memoizedState = nextSnapshot;
        var inst = {
          value: nextSnapshot,
          getSnapshot
        };
        return hook.queue = inst, mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]), fiber.flags |= Passive, pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null), nextSnapshot;
      }
      function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1, hook = updateWorkInProgressHook(), nextSnapshot = getSnapshot();
        if (!didWarnUncachedGetSnapshot) {
          var cachedSnapshot = getSnapshot();
          objectIs(nextSnapshot, cachedSnapshot) || (error("The result of getSnapshot should be cached to avoid an infinite loop"), didWarnUncachedGetSnapshot = !0);
        }
        var prevSnapshot = hook.memoizedState, snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
        snapshotChanged && (hook.memoizedState = nextSnapshot, markWorkInProgressReceivedUpdate());
        var inst = hook.queue;
        if (updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]), inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
        // checking whether we scheduled a subscription effect above.
        workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
          fiber.flags |= Passive, pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
          var root2 = getWorkInProgressRoot();
          if (root2 === null)
            throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
          includesBlockingLane(root2, renderLanes) || pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        }
        return nextSnapshot;
      }
      function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
        fiber.flags |= StoreConsistency;
        var check = {
          getSnapshot,
          value: renderedSnapshot
        }, componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null)
          componentUpdateQueue = createFunctionComponentUpdateQueue(), currentlyRenderingFiber$1.updateQueue = componentUpdateQueue, componentUpdateQueue.stores = [check];
        else {
          var stores = componentUpdateQueue.stores;
          stores === null ? componentUpdateQueue.stores = [check] : stores.push(check);
        }
      }
      function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
        inst.value = nextSnapshot, inst.getSnapshot = getSnapshot, checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
      }
      function subscribeToStore(fiber, inst, subscribe) {
        var handleStoreChange = function() {
          checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
        };
        return subscribe(handleStoreChange);
      }
      function checkIfSnapshotChanged(inst) {
        var latestGetSnapshot = inst.getSnapshot, prevValue = inst.value;
        try {
          var nextValue = latestGetSnapshot();
          return !objectIs(prevValue, nextValue);
        } catch {
          return !0;
        }
      }
      function forceStoreRerender(fiber) {
        var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
        root2 !== null && scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
      }
      function mountState(initialState) {
        var hook = mountWorkInProgressHook();
        typeof initialState == "function" && (initialState = initialState()), hook.memoizedState = hook.baseState = initialState;
        var queue = {
          pending: null,
          interleaved: null,
          lanes: NoLanes,
          dispatch: null,
          lastRenderedReducer: basicStateReducer,
          lastRenderedState: initialState
        };
        hook.queue = queue;
        var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
        return [hook.memoizedState, dispatch];
      }
      function updateState(initialState) {
        return updateReducer(basicStateReducer);
      }
      function rerenderState(initialState) {
        return rerenderReducer(basicStateReducer);
      }
      function pushEffect(tag, create, destroy, deps) {
        var effect = {
          tag,
          create,
          destroy,
          deps,
          // Circular
          next: null
        }, componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null)
          componentUpdateQueue = createFunctionComponentUpdateQueue(), currentlyRenderingFiber$1.updateQueue = componentUpdateQueue, componentUpdateQueue.lastEffect = effect.next = effect;
        else {
          var lastEffect = componentUpdateQueue.lastEffect;
          if (lastEffect === null)
            componentUpdateQueue.lastEffect = effect.next = effect;
          else {
            var firstEffect = lastEffect.next;
            lastEffect.next = effect, effect.next = firstEffect, componentUpdateQueue.lastEffect = effect;
          }
        }
        return effect;
      }
      function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        {
          var _ref2 = {
            current: initialValue
          };
          return hook.memoizedState = _ref2, _ref2;
        }
      }
      function updateRef(initialValue) {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
      }
      function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = mountWorkInProgressHook(), nextDeps = deps === void 0 ? null : deps;
        currentlyRenderingFiber$1.flags |= fiberFlags, hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
      }
      function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = updateWorkInProgressHook(), nextDeps = deps === void 0 ? null : deps, destroy = void 0;
        if (currentHook !== null) {
          var prevEffect = currentHook.memoizedState;
          if (destroy = prevEffect.destroy, nextDeps !== null) {
            var prevDeps = prevEffect.deps;
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
              return;
            }
          }
        }
        currentlyRenderingFiber$1.flags |= fiberFlags, hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
      }
      function mountEffect(create, deps) {
        return (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode ? mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps) : mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
      }
      function updateEffect(create, deps) {
        return updateEffectImpl(Passive, Passive$1, create, deps);
      }
      function mountInsertionEffect(create, deps) {
        return mountEffectImpl(Update, Insertion, create, deps);
      }
      function updateInsertionEffect(create, deps) {
        return updateEffectImpl(Update, Insertion, create, deps);
      }
      function mountLayoutEffect(create, deps) {
        var fiberFlags = Update;
        return fiberFlags |= LayoutStatic, (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode && (fiberFlags |= MountLayoutDev), mountEffectImpl(fiberFlags, Layout2, create, deps);
      }
      function updateLayoutEffect(create, deps) {
        return updateEffectImpl(Update, Layout2, create, deps);
      }
      function imperativeHandleEffect(create, ref) {
        if (typeof ref == "function") {
          var refCallback = ref, _inst = create();
          return refCallback(_inst), function() {
            refCallback(null);
          };
        } else if (ref != null) {
          var refObject = ref;
          refObject.hasOwnProperty("current") || error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
          var _inst2 = create();
          return refObject.current = _inst2, function() {
            refObject.current = null;
          };
        }
      }
      function mountImperativeHandle(ref, create, deps) {
        typeof create != "function" && error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
        var effectDeps = deps != null ? deps.concat([ref]) : null, fiberFlags = Update;
        return fiberFlags |= LayoutStatic, (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode && (fiberFlags |= MountLayoutDev), mountEffectImpl(fiberFlags, Layout2, imperativeHandleEffect.bind(null, create, ref), effectDeps);
      }
      function updateImperativeHandle(ref, create, deps) {
        typeof create != "function" && error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
        var effectDeps = deps != null ? deps.concat([ref]) : null;
        return updateEffectImpl(Update, Layout2, imperativeHandleEffect.bind(null, create, ref), effectDeps);
      }
      function mountDebugValue(value, formatterFn) {
      }
      var updateDebugValue = mountDebugValue;
      function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook(), nextDeps = deps === void 0 ? null : deps;
        return hook.memoizedState = [callback, nextDeps], callback;
      }
      function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook(), nextDeps = deps === void 0 ? null : deps, prevState = hook.memoizedState;
        if (prevState !== null && nextDeps !== null) {
          var prevDeps = prevState[1];
          if (areHookInputsEqual(nextDeps, prevDeps))
            return prevState[0];
        }
        return hook.memoizedState = [callback, nextDeps], callback;
      }
      function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook(), nextDeps = deps === void 0 ? null : deps, nextValue = nextCreate();
        return hook.memoizedState = [nextValue, nextDeps], nextValue;
      }
      function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook(), nextDeps = deps === void 0 ? null : deps, prevState = hook.memoizedState;
        if (prevState !== null && nextDeps !== null) {
          var prevDeps = prevState[1];
          if (areHookInputsEqual(nextDeps, prevDeps))
            return prevState[0];
        }
        var nextValue = nextCreate();
        return hook.memoizedState = [nextValue, nextDeps], nextValue;
      }
      function mountDeferredValue(value) {
        var hook = mountWorkInProgressHook();
        return hook.memoizedState = value, value;
      }
      function updateDeferredValue(value) {
        var hook = updateWorkInProgressHook(), resolvedCurrentHook = currentHook, prevValue = resolvedCurrentHook.memoizedState;
        return updateDeferredValueImpl(hook, prevValue, value);
      }
      function rerenderDeferredValue(value) {
        var hook = updateWorkInProgressHook();
        if (currentHook === null)
          return hook.memoizedState = value, value;
        var prevValue = currentHook.memoizedState;
        return updateDeferredValueImpl(hook, prevValue, value);
      }
      function updateDeferredValueImpl(hook, prevValue, value) {
        var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
        if (shouldDeferValue) {
          if (!objectIs(value, prevValue)) {
            var deferredLane = claimNextTransitionLane();
            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane), markSkippedUpdateLanes(deferredLane), hook.baseState = !0;
          }
          return prevValue;
        } else
          return hook.baseState && (hook.baseState = !1, markWorkInProgressReceivedUpdate()), hook.memoizedState = value, value;
      }
      function startTransition(setPending, callback, options2) {
        var previousPriority = getCurrentUpdatePriority();
        setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority)), setPending(!0);
        var prevTransition = ReactCurrentBatchConfig$2.transition;
        ReactCurrentBatchConfig$2.transition = {};
        var currentTransition = ReactCurrentBatchConfig$2.transition;
        ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
        try {
          setPending(!1), callback();
        } finally {
          if (setCurrentUpdatePriority(previousPriority), ReactCurrentBatchConfig$2.transition = prevTransition, prevTransition === null && currentTransition._updatedFibers) {
            var updatedFibersCount = currentTransition._updatedFibers.size;
            updatedFibersCount > 10 && warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."), currentTransition._updatedFibers.clear();
          }
        }
      }
      function mountTransition() {
        var _mountState = mountState(!1), isPending = _mountState[0], setPending = _mountState[1], start = startTransition.bind(null, setPending), hook = mountWorkInProgressHook();
        return hook.memoizedState = start, [isPending, start];
      }
      function updateTransition() {
        var _updateState = updateState(), isPending = _updateState[0], hook = updateWorkInProgressHook(), start = hook.memoizedState;
        return [isPending, start];
      }
      function rerenderTransition() {
        var _rerenderState = rerenderState(), isPending = _rerenderState[0], hook = updateWorkInProgressHook(), start = hook.memoizedState;
        return [isPending, start];
      }
      var isUpdatingOpaqueValueInRenderPhase = !1;
      function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
        return isUpdatingOpaqueValueInRenderPhase;
      }
      function mountId() {
        var hook = mountWorkInProgressHook(), root2 = getWorkInProgressRoot(), identifierPrefix = root2.identifierPrefix, id;
        if (getIsHydrating()) {
          var treeId = getTreeId();
          id = ":" + identifierPrefix + "R" + treeId;
          var localId = localIdCounter++;
          localId > 0 && (id += "H" + localId.toString(32)), id += ":";
        } else {
          var globalClientId = globalClientIdCounter++;
          id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
        }
        return hook.memoizedState = id, id;
      }
      function updateId() {
        var hook = updateWorkInProgressHook(), id = hook.memoizedState;
        return id;
      }
      function dispatchReducerAction(fiber, queue, action8) {
        typeof arguments[3] == "function" && error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        var lane = requestUpdateLane(fiber), update = {
          lane,
          action: action8,
          hasEagerState: !1,
          eagerState: null,
          next: null
        };
        if (isRenderPhaseUpdate(fiber))
          enqueueRenderPhaseUpdate(queue, update);
        else {
          var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime), entangleTransitionUpdate(root2, queue, lane);
          }
        }
        markUpdateInDevTools(fiber, lane);
      }
      function dispatchSetState(fiber, queue, action8) {
        typeof arguments[3] == "function" && error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        var lane = requestUpdateLane(fiber), update = {
          lane,
          action: action8,
          hasEagerState: !1,
          eagerState: null,
          next: null
        };
        if (isRenderPhaseUpdate(fiber))
          enqueueRenderPhaseUpdate(queue, update);
        else {
          var alternate = fiber.alternate;
          if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
            var lastRenderedReducer = queue.lastRenderedReducer;
            if (lastRenderedReducer !== null) {
              var prevDispatcher;
              prevDispatcher = ReactCurrentDispatcher$1.current, ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                var currentState = queue.lastRenderedState, eagerState = lastRenderedReducer(currentState, action8);
                if (update.hasEagerState = !0, update.eagerState = eagerState, objectIs(eagerState, currentState)) {
                  enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                  return;
                }
              } catch {
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            }
          }
          var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime), entangleTransitionUpdate(root2, queue, lane);
          }
        }
        markUpdateInDevTools(fiber, lane);
      }
      function isRenderPhaseUpdate(fiber) {
        var alternate = fiber.alternate;
        return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
      }
      function enqueueRenderPhaseUpdate(queue, update) {
        didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = !0;
        var pending = queue.pending;
        pending === null ? update.next = update : (update.next = pending.next, pending.next = update), queue.pending = update;
      }
      function entangleTransitionUpdate(root2, queue, lane) {
        if (isTransitionLane(lane)) {
          var queueLanes = queue.lanes;
          queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
          var newQueueLanes = mergeLanes(queueLanes, lane);
          queue.lanes = newQueueLanes, markRootEntangled(root2, newQueueLanes);
        }
      }
      function markUpdateInDevTools(fiber, lane, action8) {
        markStateUpdateScheduled(fiber, lane);
      }
      var ContextOnlyDispatcher = {
        readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useInsertionEffect: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useMutableSource: throwInvalidHookError,
        useSyncExternalStore: throwInvalidHookError,
        useId: throwInvalidHookError,
        unstable_isNewReconciler: enableNewReconciler
      }, HooksDispatcherOnMountInDEV = null, HooksDispatcherOnMountWithHookTypesInDEV = null, HooksDispatcherOnUpdateInDEV = null, HooksDispatcherOnRerenderInDEV = null, InvalidNestedHooksDispatcherOnMountInDEV = null, InvalidNestedHooksDispatcherOnUpdateInDEV = null, InvalidNestedHooksDispatcherOnRerenderInDEV = null;
      {
        var warnInvalidContextAccess = function() {
          error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        }, warnInvalidHookAccess = function() {
          error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
        };
        HooksDispatcherOnMountInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            return currentHookNameInDev = "useCallback", mountHookTypesDev(), checkDepsAreArrayDev(deps), mountCallback(callback, deps);
          },
          useContext: function(context) {
            return currentHookNameInDev = "useContext", mountHookTypesDev(), readContext(context);
          },
          useEffect: function(create, deps) {
            return currentHookNameInDev = "useEffect", mountHookTypesDev(), checkDepsAreArrayDev(deps), mountEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            return currentHookNameInDev = "useImperativeHandle", mountHookTypesDev(), checkDepsAreArrayDev(deps), mountImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            return currentHookNameInDev = "useInsertionEffect", mountHookTypesDev(), checkDepsAreArrayDev(deps), mountInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            return currentHookNameInDev = "useLayoutEffect", mountHookTypesDev(), checkDepsAreArrayDev(deps), mountLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo", mountHookTypesDev(), checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer", mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            return currentHookNameInDev = "useRef", mountHookTypesDev(), mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState", mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            return currentHookNameInDev = "useDebugValue", mountHookTypesDev(), void 0;
          },
          useDeferredValue: function(value) {
            return currentHookNameInDev = "useDeferredValue", mountHookTypesDev(), mountDeferredValue(value);
          },
          useTransition: function() {
            return currentHookNameInDev = "useTransition", mountHookTypesDev(), mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            return currentHookNameInDev = "useMutableSource", mountHookTypesDev(), void 0;
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            return currentHookNameInDev = "useSyncExternalStore", mountHookTypesDev(), mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          },
          useId: function() {
            return currentHookNameInDev = "useId", mountHookTypesDev(), mountId();
          },
          unstable_isNewReconciler: enableNewReconciler
        }, HooksDispatcherOnMountWithHookTypesInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            return currentHookNameInDev = "useCallback", updateHookTypesDev(), mountCallback(callback, deps);
          },
          useContext: function(context) {
            return currentHookNameInDev = "useContext", updateHookTypesDev(), readContext(context);
          },
          useEffect: function(create, deps) {
            return currentHookNameInDev = "useEffect", updateHookTypesDev(), mountEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            return currentHookNameInDev = "useImperativeHandle", updateHookTypesDev(), mountImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            return currentHookNameInDev = "useInsertionEffect", updateHookTypesDev(), mountInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            return currentHookNameInDev = "useLayoutEffect", updateHookTypesDev(), mountLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo", updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer", updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            return currentHookNameInDev = "useRef", updateHookTypesDev(), mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState", updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            return currentHookNameInDev = "useDebugValue", updateHookTypesDev(), void 0;
          },
          useDeferredValue: function(value) {
            return currentHookNameInDev = "useDeferredValue", updateHookTypesDev(), mountDeferredValue(value);
          },
          useTransition: function() {
            return currentHookNameInDev = "useTransition", updateHookTypesDev(), mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            return currentHookNameInDev = "useMutableSource", updateHookTypesDev(), void 0;
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            return currentHookNameInDev = "useSyncExternalStore", updateHookTypesDev(), mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          },
          useId: function() {
            return currentHookNameInDev = "useId", updateHookTypesDev(), mountId();
          },
          unstable_isNewReconciler: enableNewReconciler
        }, HooksDispatcherOnUpdateInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            return currentHookNameInDev = "useCallback", updateHookTypesDev(), updateCallback(callback, deps);
          },
          useContext: function(context) {
            return currentHookNameInDev = "useContext", updateHookTypesDev(), readContext(context);
          },
          useEffect: function(create, deps) {
            return currentHookNameInDev = "useEffect", updateHookTypesDev(), updateEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            return currentHookNameInDev = "useImperativeHandle", updateHookTypesDev(), updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            return currentHookNameInDev = "useInsertionEffect", updateHookTypesDev(), updateInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            return currentHookNameInDev = "useLayoutEffect", updateHookTypesDev(), updateLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo", updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer", updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            return currentHookNameInDev = "useRef", updateHookTypesDev(), updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState", updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            return currentHookNameInDev = "useDebugValue", updateHookTypesDev(), updateDebugValue();
          },
          useDeferredValue: function(value) {
            return currentHookNameInDev = "useDeferredValue", updateHookTypesDev(), updateDeferredValue(value);
          },
          useTransition: function() {
            return currentHookNameInDev = "useTransition", updateHookTypesDev(), updateTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            return currentHookNameInDev = "useMutableSource", updateHookTypesDev(), void 0;
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            return currentHookNameInDev = "useSyncExternalStore", updateHookTypesDev(), updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            return currentHookNameInDev = "useId", updateHookTypesDev(), updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        }, HooksDispatcherOnRerenderInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            return currentHookNameInDev = "useCallback", updateHookTypesDev(), updateCallback(callback, deps);
          },
          useContext: function(context) {
            return currentHookNameInDev = "useContext", updateHookTypesDev(), readContext(context);
          },
          useEffect: function(create, deps) {
            return currentHookNameInDev = "useEffect", updateHookTypesDev(), updateEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            return currentHookNameInDev = "useImperativeHandle", updateHookTypesDev(), updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            return currentHookNameInDev = "useInsertionEffect", updateHookTypesDev(), updateInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            return currentHookNameInDev = "useLayoutEffect", updateHookTypesDev(), updateLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo", updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer", updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return rerenderReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            return currentHookNameInDev = "useRef", updateHookTypesDev(), updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState", updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return rerenderState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            return currentHookNameInDev = "useDebugValue", updateHookTypesDev(), updateDebugValue();
          },
          useDeferredValue: function(value) {
            return currentHookNameInDev = "useDeferredValue", updateHookTypesDev(), rerenderDeferredValue(value);
          },
          useTransition: function() {
            return currentHookNameInDev = "useTransition", updateHookTypesDev(), rerenderTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            return currentHookNameInDev = "useMutableSource", updateHookTypesDev(), void 0;
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            return currentHookNameInDev = "useSyncExternalStore", updateHookTypesDev(), updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            return currentHookNameInDev = "useId", updateHookTypesDev(), updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        }, InvalidNestedHooksDispatcherOnMountInDEV = {
          readContext: function(context) {
            return warnInvalidContextAccess(), readContext(context);
          },
          useCallback: function(callback, deps) {
            return currentHookNameInDev = "useCallback", warnInvalidHookAccess(), mountHookTypesDev(), mountCallback(callback, deps);
          },
          useContext: function(context) {
            return currentHookNameInDev = "useContext", warnInvalidHookAccess(), mountHookTypesDev(), readContext(context);
          },
          useEffect: function(create, deps) {
            return currentHookNameInDev = "useEffect", warnInvalidHookAccess(), mountHookTypesDev(), mountEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            return currentHookNameInDev = "useImperativeHandle", warnInvalidHookAccess(), mountHookTypesDev(), mountImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            return currentHookNameInDev = "useInsertionEffect", warnInvalidHookAccess(), mountHookTypesDev(), mountInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            return currentHookNameInDev = "useLayoutEffect", warnInvalidHookAccess(), mountHookTypesDev(), mountLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo", warnInvalidHookAccess(), mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer", warnInvalidHookAccess(), mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            return currentHookNameInDev = "useRef", warnInvalidHookAccess(), mountHookTypesDev(), mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState", warnInvalidHookAccess(), mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            return currentHookNameInDev = "useDebugValue", warnInvalidHookAccess(), mountHookTypesDev(), void 0;
          },
          useDeferredValue: function(value) {
            return currentHookNameInDev = "useDeferredValue", warnInvalidHookAccess(), mountHookTypesDev(), mountDeferredValue(value);
          },
          useTransition: function() {
            return currentHookNameInDev = "useTransition", warnInvalidHookAccess(), mountHookTypesDev(), mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            return currentHookNameInDev = "useMutableSource", warnInvalidHookAccess(), mountHookTypesDev(), void 0;
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            return currentHookNameInDev = "useSyncExternalStore", warnInvalidHookAccess(), mountHookTypesDev(), mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          },
          useId: function() {
            return currentHookNameInDev = "useId", warnInvalidHookAccess(), mountHookTypesDev(), mountId();
          },
          unstable_isNewReconciler: enableNewReconciler
        }, InvalidNestedHooksDispatcherOnUpdateInDEV = {
          readContext: function(context) {
            return warnInvalidContextAccess(), readContext(context);
          },
          useCallback: function(callback, deps) {
            return currentHookNameInDev = "useCallback", warnInvalidHookAccess(), updateHookTypesDev(), updateCallback(callback, deps);
          },
          useContext: function(context) {
            return currentHookNameInDev = "useContext", warnInvalidHookAccess(), updateHookTypesDev(), readContext(context);
          },
          useEffect: function(create, deps) {
            return currentHookNameInDev = "useEffect", warnInvalidHookAccess(), updateHookTypesDev(), updateEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            return currentHookNameInDev = "useImperativeHandle", warnInvalidHookAccess(), updateHookTypesDev(), updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            return currentHookNameInDev = "useInsertionEffect", warnInvalidHookAccess(), updateHookTypesDev(), updateInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            return currentHookNameInDev = "useLayoutEffect", warnInvalidHookAccess(), updateHookTypesDev(), updateLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo", warnInvalidHookAccess(), updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer", warnInvalidHookAccess(), updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            return currentHookNameInDev = "useRef", warnInvalidHookAccess(), updateHookTypesDev(), updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState", warnInvalidHookAccess(), updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            return currentHookNameInDev = "useDebugValue", warnInvalidHookAccess(), updateHookTypesDev(), updateDebugValue();
          },
          useDeferredValue: function(value) {
            return currentHookNameInDev = "useDeferredValue", warnInvalidHookAccess(), updateHookTypesDev(), updateDeferredValue(value);
          },
          useTransition: function() {
            return currentHookNameInDev = "useTransition", warnInvalidHookAccess(), updateHookTypesDev(), updateTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            return currentHookNameInDev = "useMutableSource", warnInvalidHookAccess(), updateHookTypesDev(), void 0;
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            return currentHookNameInDev = "useSyncExternalStore", warnInvalidHookAccess(), updateHookTypesDev(), updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            return currentHookNameInDev = "useId", warnInvalidHookAccess(), updateHookTypesDev(), updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        }, InvalidNestedHooksDispatcherOnRerenderInDEV = {
          readContext: function(context) {
            return warnInvalidContextAccess(), readContext(context);
          },
          useCallback: function(callback, deps) {
            return currentHookNameInDev = "useCallback", warnInvalidHookAccess(), updateHookTypesDev(), updateCallback(callback, deps);
          },
          useContext: function(context) {
            return currentHookNameInDev = "useContext", warnInvalidHookAccess(), updateHookTypesDev(), readContext(context);
          },
          useEffect: function(create, deps) {
            return currentHookNameInDev = "useEffect", warnInvalidHookAccess(), updateHookTypesDev(), updateEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            return currentHookNameInDev = "useImperativeHandle", warnInvalidHookAccess(), updateHookTypesDev(), updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            return currentHookNameInDev = "useInsertionEffect", warnInvalidHookAccess(), updateHookTypesDev(), updateInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            return currentHookNameInDev = "useLayoutEffect", warnInvalidHookAccess(), updateHookTypesDev(), updateLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo", warnInvalidHookAccess(), updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer", warnInvalidHookAccess(), updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return rerenderReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            return currentHookNameInDev = "useRef", warnInvalidHookAccess(), updateHookTypesDev(), updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState", warnInvalidHookAccess(), updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return rerenderState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            return currentHookNameInDev = "useDebugValue", warnInvalidHookAccess(), updateHookTypesDev(), updateDebugValue();
          },
          useDeferredValue: function(value) {
            return currentHookNameInDev = "useDeferredValue", warnInvalidHookAccess(), updateHookTypesDev(), rerenderDeferredValue(value);
          },
          useTransition: function() {
            return currentHookNameInDev = "useTransition", warnInvalidHookAccess(), updateHookTypesDev(), rerenderTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            return currentHookNameInDev = "useMutableSource", warnInvalidHookAccess(), updateHookTypesDev(), void 0;
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            return currentHookNameInDev = "useSyncExternalStore", warnInvalidHookAccess(), updateHookTypesDev(), updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            return currentHookNameInDev = "useId", warnInvalidHookAccess(), updateHookTypesDev(), updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
      }
      var now$1 = Scheduler.unstable_now, commitTime = 0, layoutEffectStartTime = -1, profilerStartTime = -1, passiveEffectStartTime = -1, currentUpdateIsNested = !1, nestedUpdateScheduled = !1;
      function isCurrentUpdateNested() {
        return currentUpdateIsNested;
      }
      function markNestedUpdateScheduled() {
        nestedUpdateScheduled = !0;
      }
      function resetNestedUpdateFlag() {
        currentUpdateIsNested = !1, nestedUpdateScheduled = !1;
      }
      function syncNestedUpdateFlag() {
        currentUpdateIsNested = nestedUpdateScheduled, nestedUpdateScheduled = !1;
      }
      function getCommitTime() {
        return commitTime;
      }
      function recordCommitTime() {
        commitTime = now$1();
      }
      function startProfilerTimer(fiber) {
        profilerStartTime = now$1(), fiber.actualStartTime < 0 && (fiber.actualStartTime = now$1());
      }
      function stopProfilerTimerIfRunning(fiber) {
        profilerStartTime = -1;
      }
      function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (profilerStartTime >= 0) {
          var elapsedTime = now$1() - profilerStartTime;
          fiber.actualDuration += elapsedTime, overrideBaseTime && (fiber.selfBaseDuration = elapsedTime), profilerStartTime = -1;
        }
      }
      function recordLayoutEffectDuration(fiber) {
        if (layoutEffectStartTime >= 0) {
          var elapsedTime = now$1() - layoutEffectStartTime;
          layoutEffectStartTime = -1;
          for (var parentFiber = fiber.return; parentFiber !== null; ) {
            switch (parentFiber.tag) {
              case HostRoot:
                var root2 = parentFiber.stateNode;
                root2.effectDuration += elapsedTime;
                return;
              case Profiler:
                var parentStateNode = parentFiber.stateNode;
                parentStateNode.effectDuration += elapsedTime;
                return;
            }
            parentFiber = parentFiber.return;
          }
        }
      }
      function recordPassiveEffectDuration(fiber) {
        if (passiveEffectStartTime >= 0) {
          var elapsedTime = now$1() - passiveEffectStartTime;
          passiveEffectStartTime = -1;
          for (var parentFiber = fiber.return; parentFiber !== null; ) {
            switch (parentFiber.tag) {
              case HostRoot:
                var root2 = parentFiber.stateNode;
                root2 !== null && (root2.passiveEffectDuration += elapsedTime);
                return;
              case Profiler:
                var parentStateNode = parentFiber.stateNode;
                parentStateNode !== null && (parentStateNode.passiveEffectDuration += elapsedTime);
                return;
            }
            parentFiber = parentFiber.return;
          }
        }
      }
      function startLayoutEffectTimer() {
        layoutEffectStartTime = now$1();
      }
      function startPassiveEffectTimer() {
        passiveEffectStartTime = now$1();
      }
      function transferActualDuration(fiber) {
        for (var child = fiber.child; child; )
          fiber.actualDuration += child.actualDuration, child = child.sibling;
      }
      function resolveDefaultProps(Component, baseProps) {
        if (Component && Component.defaultProps) {
          var props = assign({}, baseProps), defaultProps = Component.defaultProps;
          for (var propName in defaultProps)
            props[propName] === void 0 && (props[propName] = defaultProps[propName]);
          return props;
        }
        return baseProps;
      }
      var fakeInternalInstance = {}, didWarnAboutStateAssignmentForComponent, didWarnAboutUninitializedState, didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate, didWarnAboutLegacyLifecyclesAndDerivedState, didWarnAboutUndefinedDerivedState, warnOnUndefinedDerivedState, warnOnInvalidCallback, didWarnAboutDirectlyAssigningPropsToState, didWarnAboutContextTypeAndContextTypes, didWarnAboutInvalidateContextType, didWarnAboutLegacyContext$1;
      {
        didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set(), didWarnAboutUninitializedState = /* @__PURE__ */ new Set(), didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set(), didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set(), didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set(), didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set(), didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set(), didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set(), didWarnAboutLegacyContext$1 = /* @__PURE__ */ new Set();
        var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
        warnOnInvalidCallback = function(callback, callerName) {
          if (!(callback === null || typeof callback == "function")) {
            var key = callerName + "_" + callback;
            didWarnOnInvalidCallback.has(key) || (didWarnOnInvalidCallback.add(key), error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback));
          }
        }, warnOnUndefinedDerivedState = function(type, partialState) {
          if (partialState === void 0) {
            var componentName = getComponentNameFromType(type) || "Component";
            didWarnAboutUndefinedDerivedState.has(componentName) || (didWarnAboutUndefinedDerivedState.add(componentName), error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName));
          }
        }, Object.defineProperty(fakeInternalInstance, "_processChildContext", {
          enumerable: !1,
          value: function() {
            throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
          }
        }), Object.freeze(fakeInternalInstance);
      }
      function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress2.memoizedState, partialState = getDerivedStateFromProps(nextProps, prevState);
        {
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(!0);
            try {
              partialState = getDerivedStateFromProps(nextProps, prevState);
            } finally {
              setIsStrictModeForDevtools(!1);
            }
          }
          warnOnUndefinedDerivedState(ctor, partialState);
        }
        var memoizedState = partialState == null ? prevState : assign({}, prevState, partialState);
        if (workInProgress2.memoizedState = memoizedState, workInProgress2.lanes === NoLanes) {
          var updateQueue = workInProgress2.updateQueue;
          updateQueue.baseState = memoizedState;
        }
      }
      var classComponentUpdater = {
        isMounted,
        enqueueSetState: function(inst, payload, callback) {
          var fiber = get(inst), eventTime = requestEventTime(), lane = requestUpdateLane(fiber), update = createUpdate(eventTime, lane);
          update.payload = payload, callback != null && (warnOnInvalidCallback(callback, "setState"), update.callback = callback);
          var root2 = enqueueUpdate(fiber, update, lane);
          root2 !== null && (scheduleUpdateOnFiber(root2, fiber, lane, eventTime), entangleTransitions(root2, fiber, lane)), markStateUpdateScheduled(fiber, lane);
        },
        enqueueReplaceState: function(inst, payload, callback) {
          var fiber = get(inst), eventTime = requestEventTime(), lane = requestUpdateLane(fiber), update = createUpdate(eventTime, lane);
          update.tag = ReplaceState, update.payload = payload, callback != null && (warnOnInvalidCallback(callback, "replaceState"), update.callback = callback);
          var root2 = enqueueUpdate(fiber, update, lane);
          root2 !== null && (scheduleUpdateOnFiber(root2, fiber, lane, eventTime), entangleTransitions(root2, fiber, lane)), markStateUpdateScheduled(fiber, lane);
        },
        enqueueForceUpdate: function(inst, callback) {
          var fiber = get(inst), eventTime = requestEventTime(), lane = requestUpdateLane(fiber), update = createUpdate(eventTime, lane);
          update.tag = ForceUpdate, callback != null && (warnOnInvalidCallback(callback, "forceUpdate"), update.callback = callback);
          var root2 = enqueueUpdate(fiber, update, lane);
          root2 !== null && (scheduleUpdateOnFiber(root2, fiber, lane, eventTime), entangleTransitions(root2, fiber, lane)), markForceUpdateScheduled(fiber, lane);
        }
      };
      function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress2.stateNode;
        if (typeof instance.shouldComponentUpdate == "function") {
          var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(!0);
              try {
                shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              } finally {
                setIsStrictModeForDevtools(!1);
              }
            }
            shouldUpdate === void 0 && error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
          }
          return shouldUpdate;
        }
        return ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : !0;
      }
      function checkClassInstance(workInProgress2, ctor, newProps) {
        var instance = workInProgress2.stateNode;
        {
          var name = getComponentNameFromType(ctor) || "Component", renderPresent = instance.render;
          renderPresent || (ctor.prototype && typeof ctor.prototype.render == "function" ? error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name) : error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name)), instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state && error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name), instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved && error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name), instance.propTypes && error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name), instance.contextType && error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name), ctor.childContextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
          // this one.
          (workInProgress2.mode & StrictLegacyMode) === NoMode && (didWarnAboutLegacyContext$1.add(ctor), error(`%s uses the legacy childContextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() instead

.Learn more about this warning here: https://reactjs.org/link/legacy-context`, name)), ctor.contextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
          // this one.
          (workInProgress2.mode & StrictLegacyMode) === NoMode && (didWarnAboutLegacyContext$1.add(ctor), error(`%s uses the legacy contextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() with static contextType instead.

Learn more about this warning here: https://reactjs.org/link/legacy-context`, name)), instance.contextTypes && error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name), ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor) && (didWarnAboutContextTypeAndContextTypes.add(ctor), error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name)), typeof instance.componentShouldUpdate == "function" && error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name), ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate < "u" && error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component"), typeof instance.componentDidUnmount == "function" && error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name), typeof instance.componentDidReceiveProps == "function" && error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name), typeof instance.componentWillRecieveProps == "function" && error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name), typeof instance.UNSAFE_componentWillRecieveProps == "function" && error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
          var hasMutatedProps = instance.props !== newProps;
          instance.props !== void 0 && hasMutatedProps && error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name), instance.defaultProps && error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name), typeof instance.getSnapshotBeforeUpdate == "function" && typeof instance.componentDidUpdate != "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor) && (didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor), error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor))), typeof instance.getDerivedStateFromProps == "function" && error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name), typeof instance.getDerivedStateFromError == "function" && error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name), typeof ctor.getSnapshotBeforeUpdate == "function" && error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
          var _state = instance.state;
          _state && (typeof _state != "object" || isArray(_state)) && error("%s.state: must be set to an object or null", name), typeof instance.getChildContext == "function" && typeof ctor.childContextTypes != "object" && error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
        }
      }
      function adoptClassInstance(workInProgress2, instance) {
        instance.updater = classComponentUpdater, workInProgress2.stateNode = instance, set(instance, workInProgress2), instance._reactInternalInstance = fakeInternalInstance;
      }
      function constructClassInstance(workInProgress2, ctor, props) {
        var isLegacyContextConsumer = !1, unmaskedContext = emptyContextObject, context = emptyContextObject, contextType = ctor.contextType;
        if ("contextType" in ctor) {
          var isValid = (
            // Allow null for conditional declaration
            contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
          );
          if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
            didWarnAboutInvalidateContextType.add(ctor);
            var addendum = "";
            contextType === void 0 ? addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file." : typeof contextType != "object" ? addendum = " However, it is set to a " + typeof contextType + "." : contextType.$$typeof === REACT_PROVIDER_TYPE ? addendum = " Did you accidentally pass the Context.Provider instead?" : contextType._context !== void 0 ? addendum = " Did you accidentally pass the Context.Consumer instead?" : addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.", error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
          }
        }
        if (typeof contextType == "object" && contextType !== null)
          context = readContext(contextType);
        else {
          unmaskedContext = getUnmaskedContext(workInProgress2, ctor, !0);
          var contextTypes = ctor.contextTypes;
          isLegacyContextConsumer = contextTypes != null, context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
        }
        var instance = new ctor(props, context);
        if (workInProgress2.mode & StrictLegacyMode) {
          setIsStrictModeForDevtools(!0);
          try {
            instance = new ctor(props, context);
          } finally {
            setIsStrictModeForDevtools(!1);
          }
        }
        var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
        adoptClassInstance(workInProgress2, instance);
        {
          if (typeof ctor.getDerivedStateFromProps == "function" && state === null) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            didWarnAboutUninitializedState.has(componentName) || (didWarnAboutUninitializedState.add(componentName), error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName));
          }
          if (typeof ctor.getDerivedStateFromProps == "function" || typeof instance.getSnapshotBeforeUpdate == "function") {
            var foundWillMountName = null, foundWillReceivePropsName = null, foundWillUpdateName = null;
            if (typeof instance.componentWillMount == "function" && instance.componentWillMount.__suppressDeprecationWarning !== !0 ? foundWillMountName = "componentWillMount" : typeof instance.UNSAFE_componentWillMount == "function" && (foundWillMountName = "UNSAFE_componentWillMount"), typeof instance.componentWillReceiveProps == "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== !0 ? foundWillReceivePropsName = "componentWillReceiveProps" : typeof instance.UNSAFE_componentWillReceiveProps == "function" && (foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps"), typeof instance.componentWillUpdate == "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== !0 ? foundWillUpdateName = "componentWillUpdate" : typeof instance.UNSAFE_componentWillUpdate == "function" && (foundWillUpdateName = "UNSAFE_componentWillUpdate"), foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
              var _componentName = getComponentNameFromType(ctor) || "Component", newApiName = typeof ctor.getDerivedStateFromProps == "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
              didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName) || (didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName), error(`Unsafe legacy lifecycles will not be called for components using new component APIs.

%s uses %s but also contains the following legacy lifecycles:%s%s%s

The above lifecycles should be removed. Learn more about this warning here:
https://reactjs.org/link/unsafe-component-lifecycles`, _componentName, newApiName, foundWillMountName !== null ? `
  ` + foundWillMountName : "", foundWillReceivePropsName !== null ? `
  ` + foundWillReceivePropsName : "", foundWillUpdateName !== null ? `
  ` + foundWillUpdateName : ""));
            }
          }
        }
        return isLegacyContextConsumer && cacheContext(workInProgress2, unmaskedContext, context), instance;
      }
      function callComponentWillMount(workInProgress2, instance) {
        var oldState = instance.state;
        typeof instance.componentWillMount == "function" && instance.componentWillMount(), typeof instance.UNSAFE_componentWillMount == "function" && instance.UNSAFE_componentWillMount(), oldState !== instance.state && (error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component"), classComponentUpdater.enqueueReplaceState(instance, instance.state, null));
      }
      function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
        var oldState = instance.state;
        if (typeof instance.componentWillReceiveProps == "function" && instance.componentWillReceiveProps(newProps, nextContext), typeof instance.UNSAFE_componentWillReceiveProps == "function" && instance.UNSAFE_componentWillReceiveProps(newProps, nextContext), instance.state !== oldState) {
          {
            var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
            didWarnAboutStateAssignmentForComponent.has(componentName) || (didWarnAboutStateAssignmentForComponent.add(componentName), error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName));
          }
          classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
      }
      function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
        checkClassInstance(workInProgress2, ctor, newProps);
        var instance = workInProgress2.stateNode;
        instance.props = newProps, instance.state = workInProgress2.memoizedState, instance.refs = {}, initializeUpdateQueue(workInProgress2);
        var contextType = ctor.contextType;
        if (typeof contextType == "object" && contextType !== null)
          instance.context = readContext(contextType);
        else {
          var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, !0);
          instance.context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        {
          if (instance.state === newProps) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            didWarnAboutDirectlyAssigningPropsToState.has(componentName) || (didWarnAboutDirectlyAssigningPropsToState.add(componentName), error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName));
          }
          workInProgress2.mode & StrictLegacyMode && ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance), ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
        }
        instance.state = workInProgress2.memoizedState;
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        if (typeof getDerivedStateFromProps == "function" && (applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps), instance.state = workInProgress2.memoizedState), typeof ctor.getDerivedStateFromProps != "function" && typeof instance.getSnapshotBeforeUpdate != "function" && (typeof instance.UNSAFE_componentWillMount == "function" || typeof instance.componentWillMount == "function") && (callComponentWillMount(workInProgress2, instance), processUpdateQueue(workInProgress2, newProps, instance, renderLanes2), instance.state = workInProgress2.memoizedState), typeof instance.componentDidMount == "function") {
          var fiberFlags = Update;
          fiberFlags |= LayoutStatic, (workInProgress2.mode & StrictEffectsMode) !== NoMode && (fiberFlags |= MountLayoutDev), workInProgress2.flags |= fiberFlags;
        }
      }
      function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
        var instance = workInProgress2.stateNode, oldProps = workInProgress2.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context, contextType = ctor.contextType, nextContext = emptyContextObject;
        if (typeof contextType == "object" && contextType !== null)
          nextContext = readContext(contextType);
        else {
          var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, !0);
          nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps, hasNewLifecycles = typeof getDerivedStateFromProps == "function" || typeof instance.getSnapshotBeforeUpdate == "function";
        !hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps == "function" || typeof instance.componentWillReceiveProps == "function") && (oldProps !== newProps || oldContext !== nextContext) && callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext), resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress2.memoizedState, newState = instance.state = oldState;
        if (processUpdateQueue(workInProgress2, newProps, instance, renderLanes2), newState = workInProgress2.memoizedState, oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
          if (typeof instance.componentDidMount == "function") {
            var fiberFlags = Update;
            fiberFlags |= LayoutStatic, (workInProgress2.mode & StrictEffectsMode) !== NoMode && (fiberFlags |= MountLayoutDev), workInProgress2.flags |= fiberFlags;
          }
          return !1;
        }
        typeof getDerivedStateFromProps == "function" && (applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps), newState = workInProgress2.memoizedState);
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount == "function" || typeof instance.componentWillMount == "function") && (typeof instance.componentWillMount == "function" && instance.componentWillMount(), typeof instance.UNSAFE_componentWillMount == "function" && instance.UNSAFE_componentWillMount()), typeof instance.componentDidMount == "function") {
            var _fiberFlags = Update;
            _fiberFlags |= LayoutStatic, (workInProgress2.mode & StrictEffectsMode) !== NoMode && (_fiberFlags |= MountLayoutDev), workInProgress2.flags |= _fiberFlags;
          }
        } else {
          if (typeof instance.componentDidMount == "function") {
            var _fiberFlags2 = Update;
            _fiberFlags2 |= LayoutStatic, (workInProgress2.mode & StrictEffectsMode) !== NoMode && (_fiberFlags2 |= MountLayoutDev), workInProgress2.flags |= _fiberFlags2;
          }
          workInProgress2.memoizedProps = newProps, workInProgress2.memoizedState = newState;
        }
        return instance.props = newProps, instance.state = newState, instance.context = nextContext, shouldUpdate;
      }
      function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
        var instance = workInProgress2.stateNode;
        cloneUpdateQueue(current2, workInProgress2);
        var unresolvedOldProps = workInProgress2.memoizedProps, oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
        instance.props = oldProps;
        var unresolvedNewProps = workInProgress2.pendingProps, oldContext = instance.context, contextType = ctor.contextType, nextContext = emptyContextObject;
        if (typeof contextType == "object" && contextType !== null)
          nextContext = readContext(contextType);
        else {
          var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, !0);
          nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps, hasNewLifecycles = typeof getDerivedStateFromProps == "function" || typeof instance.getSnapshotBeforeUpdate == "function";
        !hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps == "function" || typeof instance.componentWillReceiveProps == "function") && (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) && callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext), resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress2.memoizedState, newState = instance.state = oldState;
        if (processUpdateQueue(workInProgress2, newProps, instance, renderLanes2), newState = workInProgress2.memoizedState, unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation)
          return typeof instance.componentDidUpdate == "function" && (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) && (workInProgress2.flags |= Update), typeof instance.getSnapshotBeforeUpdate == "function" && (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) && (workInProgress2.flags |= Snapshot), !1;
        typeof getDerivedStateFromProps == "function" && (applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps), newState = workInProgress2.memoizedState);
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
        // both before and after `shouldComponentUpdate` has been called. Not ideal,
        // but I'm loath to refactor this function. This only happens for memoized
        // components so it's not that common.
        enableLazyContextPropagation;
        return shouldUpdate ? (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate == "function" || typeof instance.componentWillUpdate == "function") && (typeof instance.componentWillUpdate == "function" && instance.componentWillUpdate(newProps, newState, nextContext), typeof instance.UNSAFE_componentWillUpdate == "function" && instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext)), typeof instance.componentDidUpdate == "function" && (workInProgress2.flags |= Update), typeof instance.getSnapshotBeforeUpdate == "function" && (workInProgress2.flags |= Snapshot)) : (typeof instance.componentDidUpdate == "function" && (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) && (workInProgress2.flags |= Update), typeof instance.getSnapshotBeforeUpdate == "function" && (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) && (workInProgress2.flags |= Snapshot), workInProgress2.memoizedProps = newProps, workInProgress2.memoizedState = newState), instance.props = newProps, instance.state = newState, instance.context = nextContext, shouldUpdate;
      }
      function createCapturedValueAtFiber(value, source) {
        return {
          value,
          source,
          stack: getStackByFiberInDevAndProd(source),
          digest: null
        };
      }
      function createCapturedValue(value, digest, stack) {
        return {
          value,
          source: null,
          stack: stack ?? null,
          digest: digest ?? null
        };
      }
      function showErrorDialog(boundary, errorInfo) {
        return !0;
      }
      function logCapturedError(boundary, errorInfo) {
        try {
          var logError = showErrorDialog(boundary, errorInfo);
          if (logError === !1)
            return;
          var error2 = errorInfo.value, source = errorInfo.source, stack = errorInfo.stack, componentStack = stack !== null ? stack : "";
          if (error2 != null && error2._suppressLogging) {
            if (boundary.tag === ClassComponent)
              return;
            console.error(error2);
          }
          var componentName = source ? getComponentNameFromFiber(source) : null, componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:", errorBoundaryMessage;
          if (boundary.tag === HostRoot)
            errorBoundaryMessage = `Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.`;
          else {
            var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
            errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
          }
          var combinedMessage = componentNameMessage + `
` + componentStack + `

` + ("" + errorBoundaryMessage);
          console.error(combinedMessage);
        } catch (e) {
          setTimeout(function() {
            throw e;
          });
        }
      }
      var PossiblyWeakMap$1 = typeof WeakMap == "function" ? WeakMap : Map;
      function createRootErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate, update.payload = {
          element: null
        };
        var error2 = errorInfo.value;
        return update.callback = function() {
          onUncaughtError(error2), logCapturedError(fiber, errorInfo);
        }, update;
      }
      function createClassErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if (typeof getDerivedStateFromError == "function") {
          var error$1 = errorInfo.value;
          update.payload = function() {
            return getDerivedStateFromError(error$1);
          }, update.callback = function() {
            markFailedErrorBoundaryForHotReloading(fiber), logCapturedError(fiber, errorInfo);
          };
        }
        var inst = fiber.stateNode;
        return inst !== null && typeof inst.componentDidCatch == "function" && (update.callback = function() {
          markFailedErrorBoundaryForHotReloading(fiber), logCapturedError(fiber, errorInfo), typeof getDerivedStateFromError != "function" && markLegacyErrorBoundaryAsFailed(this);
          var error$12 = errorInfo.value, stack = errorInfo.stack;
          this.componentDidCatch(error$12, {
            componentStack: stack !== null ? stack : ""
          }), typeof getDerivedStateFromError != "function" && (includesSomeLane(fiber.lanes, SyncLane) || error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown"));
        }), update;
      }
      function attachPingListener(root2, wakeable, lanes) {
        var pingCache = root2.pingCache, threadIDs;
        if (pingCache === null ? (pingCache = root2.pingCache = new PossiblyWeakMap$1(), threadIDs = /* @__PURE__ */ new Set(), pingCache.set(wakeable, threadIDs)) : (threadIDs = pingCache.get(wakeable), threadIDs === void 0 && (threadIDs = /* @__PURE__ */ new Set(), pingCache.set(wakeable, threadIDs))), !threadIDs.has(lanes)) {
          threadIDs.add(lanes);
          var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
          isDevToolsPresent && restorePendingUpdaters(root2, lanes), wakeable.then(ping, ping);
        }
      }
      function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
        var wakeables = suspenseBoundary.updateQueue;
        if (wakeables === null) {
          var updateQueue = /* @__PURE__ */ new Set();
          updateQueue.add(wakeable), suspenseBoundary.updateQueue = updateQueue;
        } else
          wakeables.add(wakeable);
      }
      function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
        var tag = sourceFiber.tag;
        if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
          var currentSource = sourceFiber.alternate;
          currentSource ? (sourceFiber.updateQueue = currentSource.updateQueue, sourceFiber.memoizedState = currentSource.memoizedState, sourceFiber.lanes = currentSource.lanes) : (sourceFiber.updateQueue = null, sourceFiber.memoizedState = null);
        }
      }
      function getNearestSuspenseBoundaryToCapture(returnFiber) {
        var node = returnFiber;
        do {
          if (node.tag === SuspenseComponent && shouldCaptureSuspense(node))
            return node;
          node = node.return;
        } while (node !== null);
        return null;
      }
      function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
        if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
          if (suspenseBoundary === returnFiber)
            suspenseBoundary.flags |= ShouldCapture;
          else {
            if (suspenseBoundary.flags |= DidCapture, sourceFiber.flags |= ForceUpdateForLegacySuspense, sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete), sourceFiber.tag === ClassComponent) {
              var currentSourceFiber = sourceFiber.alternate;
              if (currentSourceFiber === null)
                sourceFiber.tag = IncompleteClassComponent;
              else {
                var update = createUpdate(NoTimestamp, SyncLane);
                update.tag = ForceUpdate, enqueueUpdate(sourceFiber, update, SyncLane);
              }
            }
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
          }
          return suspenseBoundary;
        }
        return suspenseBoundary.flags |= ShouldCapture, suspenseBoundary.lanes = rootRenderLanes, suspenseBoundary;
      }
      function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
        if (sourceFiber.flags |= Incomplete, isDevToolsPresent && restorePendingUpdaters(root2, rootRenderLanes), value !== null && typeof value == "object" && typeof value.then == "function") {
          var wakeable = value;
          resetSuspendedComponent(sourceFiber), getIsHydrating() && sourceFiber.mode & ConcurrentMode && markDidThrowWhileHydratingDEV();
          var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
          if (suspenseBoundary !== null) {
            suspenseBoundary.flags &= ~ForceClientRender, markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes), suspenseBoundary.mode & ConcurrentMode && attachPingListener(root2, wakeable, rootRenderLanes), attachRetryListener(suspenseBoundary, root2, wakeable);
            return;
          } else {
            if (!includesSyncLane(rootRenderLanes)) {
              attachPingListener(root2, wakeable, rootRenderLanes), renderDidSuspendDelayIfPossible();
              return;
            }
            var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
            value = uncaughtSuspenseError;
          }
        } else if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
          markDidThrowWhileHydratingDEV();
          var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
          if (_suspenseBoundary !== null) {
            (_suspenseBoundary.flags & ShouldCapture) === NoFlags && (_suspenseBoundary.flags |= ForceClientRender), markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes), queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
            return;
          }
        }
        value = createCapturedValueAtFiber(value, sourceFiber), renderDidError(value);
        var workInProgress2 = returnFiber;
        do {
          switch (workInProgress2.tag) {
            case HostRoot: {
              var _errorInfo = value;
              workInProgress2.flags |= ShouldCapture;
              var lane = pickArbitraryLane(rootRenderLanes);
              workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
              var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
              enqueueCapturedUpdate(workInProgress2, update);
              return;
            }
            case ClassComponent:
              var errorInfo = value, ctor = workInProgress2.type, instance = workInProgress2.stateNode;
              if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError == "function" || instance !== null && typeof instance.componentDidCatch == "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                workInProgress2.flags |= ShouldCapture;
                var _lane = pickArbitraryLane(rootRenderLanes);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                enqueueCapturedUpdate(workInProgress2, _update);
                return;
              }
              break;
          }
          workInProgress2 = workInProgress2.return;
        } while (workInProgress2 !== null);
      }
      function getSuspendedCache() {
        return null;
      }
      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner, didReceiveUpdate = !1, didWarnAboutBadClass, didWarnAboutModulePatternComponent, didWarnAboutContextTypeOnFunctionComponent, didWarnAboutGetDerivedStateOnFunctionComponent, didWarnAboutFunctionRefs, didWarnAboutReassigningProps, didWarnAboutRevealOrder, didWarnAboutTailOptions, didWarnAboutDefaultPropsOnFunctionComponent;
      didWarnAboutBadClass = {}, didWarnAboutModulePatternComponent = {}, didWarnAboutContextTypeOnFunctionComponent = {}, didWarnAboutGetDerivedStateOnFunctionComponent = {}, didWarnAboutFunctionRefs = {}, didWarnAboutReassigningProps = !1, didWarnAboutRevealOrder = {}, didWarnAboutTailOptions = {}, didWarnAboutDefaultPropsOnFunctionComponent = {};
      function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
        current2 === null ? workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2) : workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
      }
      function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
        workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2), workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
      }
      function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
        if (workInProgress2.type !== workInProgress2.elementType) {
          var innerPropTypes = Component.propTypes;
          innerPropTypes && checkPropTypes(
            innerPropTypes,
            nextProps,
            // Resolved props
            "prop",
            getComponentNameFromType(Component)
          );
        }
        var render2 = Component.render, ref = workInProgress2.ref, nextChildren, hasId;
        prepareToReadContext(workInProgress2, renderLanes2), markComponentRenderStarted(workInProgress2);
        {
          if (ReactCurrentOwner$1.current = workInProgress2, setIsRendering(!0), nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2), hasId = checkDidRenderIdHook(), workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(!0);
            try {
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2), hasId = checkDidRenderIdHook();
            } finally {
              setIsStrictModeForDevtools(!1);
            }
          }
          setIsRendering(!1);
        }
        return markComponentRenderStopped(), current2 !== null && !didReceiveUpdate ? (bailoutHooks(current2, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2)) : (getIsHydrating() && hasId && pushMaterializedTreeId(workInProgress2), workInProgress2.flags |= PerformedWork, reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child);
      }
      function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
        if (current2 === null) {
          var type = Component.type;
          if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
          Component.defaultProps === void 0) {
            var resolvedType = type;
            return resolvedType = resolveFunctionForHotReloading(type), workInProgress2.tag = SimpleMemoComponent, workInProgress2.type = resolvedType, validateFunctionComponentInDev(workInProgress2, type), updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
          }
          {
            var innerPropTypes = type.propTypes;
            if (innerPropTypes && checkPropTypes(
              innerPropTypes,
              nextProps,
              // Resolved props
              "prop",
              getComponentNameFromType(type)
            ), Component.defaultProps !== void 0) {
              var componentName = getComponentNameFromType(type) || "Unknown";
              didWarnAboutDefaultPropsOnFunctionComponent[componentName] || (error("%s: Support for defaultProps will be removed from memo components in a future major release. Use JavaScript default parameters instead.", componentName), didWarnAboutDefaultPropsOnFunctionComponent[componentName] = !0);
            }
          }
          var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
          return child.ref = workInProgress2.ref, child.return = workInProgress2, workInProgress2.child = child, child;
        }
        {
          var _type = Component.type, _innerPropTypes = _type.propTypes;
          _innerPropTypes && checkPropTypes(
            _innerPropTypes,
            nextProps,
            // Resolved props
            "prop",
            getComponentNameFromType(_type)
          );
        }
        var currentChild = current2.child, hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
        if (!hasScheduledUpdateOrContext) {
          var prevProps = currentChild.memoizedProps, compare = Component.compare;
          if (compare = compare !== null ? compare : shallowEqual, compare(prevProps, nextProps) && current2.ref === workInProgress2.ref)
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        workInProgress2.flags |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps);
        return newChild.ref = workInProgress2.ref, newChild.return = workInProgress2, workInProgress2.child = newChild, newChild;
      }
      function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
        if (workInProgress2.type !== workInProgress2.elementType) {
          var outerMemoType = workInProgress2.elementType;
          if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
            var lazyComponent = outerMemoType, payload = lazyComponent._payload, init = lazyComponent._init;
            try {
              outerMemoType = init(payload);
            } catch {
              outerMemoType = null;
            }
            var outerPropTypes = outerMemoType && outerMemoType.propTypes;
            outerPropTypes && checkPropTypes(
              outerPropTypes,
              nextProps,
              // Resolved (SimpleMemoComponent has no defaultProps)
              "prop",
              getComponentNameFromType(outerMemoType)
            );
          }
        }
        if (current2 !== null) {
          var prevProps = current2.memoizedProps;
          if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
          workInProgress2.type === current2.type)
            if (didReceiveUpdate = !1, workInProgress2.pendingProps = nextProps = prevProps, checkScheduledUpdateOrContext(current2, renderLanes2))
              (current2.flags & ForceUpdateForLegacySuspense) !== NoFlags && (didReceiveUpdate = !0);
            else
              return workInProgress2.lanes = current2.lanes, bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
      }
      function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps, nextChildren = nextProps.children, prevState = current2 !== null ? current2.memoizedState : null;
        if (nextProps.mode === "hidden" || enableLegacyHidden)
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            var nextState = {
              baseLanes: NoLanes,
              cachePool: null,
              transitions: null
            };
            workInProgress2.memoizedState = nextState, pushRenderLanes(workInProgress2, renderLanes2);
          } else if (includesSomeLane(renderLanes2, OffscreenLane)) {
            var _nextState2 = {
              baseLanes: NoLanes,
              cachePool: null,
              transitions: null
            };
            workInProgress2.memoizedState = _nextState2;
            var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
            pushRenderLanes(workInProgress2, subtreeRenderLanes2);
          } else {
            var spawnedCachePool = null, nextBaseLanes;
            if (prevState !== null) {
              var prevBaseLanes = prevState.baseLanes;
              nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
            } else
              nextBaseLanes = renderLanes2;
            workInProgress2.lanes = workInProgress2.childLanes = OffscreenLane;
            var _nextState = {
              baseLanes: nextBaseLanes,
              cachePool: spawnedCachePool,
              transitions: null
            };
            return workInProgress2.memoizedState = _nextState, workInProgress2.updateQueue = null, pushRenderLanes(workInProgress2, nextBaseLanes), null;
          }
        else {
          var _subtreeRenderLanes;
          prevState !== null ? (_subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2), workInProgress2.memoizedState = null) : _subtreeRenderLanes = renderLanes2, pushRenderLanes(workInProgress2, _subtreeRenderLanes);
        }
        return reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
      }
      function updateFragment(current2, workInProgress2, renderLanes2) {
        var nextChildren = workInProgress2.pendingProps;
        return reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
      }
      function updateMode(current2, workInProgress2, renderLanes2) {
        var nextChildren = workInProgress2.pendingProps.children;
        return reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
      }
      function updateProfiler(current2, workInProgress2, renderLanes2) {
        {
          workInProgress2.flags |= Update;
          {
            var stateNode = workInProgress2.stateNode;
            stateNode.effectDuration = 0, stateNode.passiveEffectDuration = 0;
          }
        }
        var nextProps = workInProgress2.pendingProps, nextChildren = nextProps.children;
        return reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
      }
      function markRef(current2, workInProgress2) {
        var ref = workInProgress2.ref;
        (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) && (workInProgress2.flags |= Ref, workInProgress2.flags |= RefStatic);
      }
      function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
        if (workInProgress2.type !== workInProgress2.elementType) {
          var innerPropTypes = Component.propTypes;
          innerPropTypes && checkPropTypes(
            innerPropTypes,
            nextProps,
            // Resolved props
            "prop",
            getComponentNameFromType(Component)
          );
        }
        var context;
        {
          var unmaskedContext = getUnmaskedContext(workInProgress2, Component, !0);
          context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        var nextChildren, hasId;
        prepareToReadContext(workInProgress2, renderLanes2), markComponentRenderStarted(workInProgress2);
        {
          if (ReactCurrentOwner$1.current = workInProgress2, setIsRendering(!0), nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2), hasId = checkDidRenderIdHook(), workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(!0);
            try {
              nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2), hasId = checkDidRenderIdHook();
            } finally {
              setIsStrictModeForDevtools(!1);
            }
          }
          setIsRendering(!1);
        }
        return markComponentRenderStopped(), current2 !== null && !didReceiveUpdate ? (bailoutHooks(current2, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2)) : (getIsHydrating() && hasId && pushMaterializedTreeId(workInProgress2), workInProgress2.flags |= PerformedWork, reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child);
      }
      function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
        {
          switch (shouldError(workInProgress2)) {
            case !1: {
              var _instance = workInProgress2.stateNode, ctor = workInProgress2.type, tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context), state = tempInstance.state;
              _instance.updater.enqueueSetState(_instance, state, null);
              break;
            }
            case !0: {
              workInProgress2.flags |= DidCapture, workInProgress2.flags |= ShouldCapture;
              var error$1 = new Error("Simulated error coming from DevTools"), lane = pickArbitraryLane(renderLanes2);
              workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
              var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
              enqueueCapturedUpdate(workInProgress2, update);
              break;
            }
          }
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component.propTypes;
            innerPropTypes && checkPropTypes(
              innerPropTypes,
              nextProps,
              // Resolved props
              "prop",
              getComponentNameFromType(Component)
            );
          }
        }
        var hasContext;
        isContextProvider(Component) ? (hasContext = !0, pushContextProvider(workInProgress2)) : hasContext = !1, prepareToReadContext(workInProgress2, renderLanes2);
        var instance = workInProgress2.stateNode, shouldUpdate;
        instance === null ? (resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2), constructClassInstance(workInProgress2, Component, nextProps), mountClassInstance(workInProgress2, Component, nextProps, renderLanes2), shouldUpdate = !0) : current2 === null ? shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2) : shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
        var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
        {
          var inst = workInProgress2.stateNode;
          shouldUpdate && inst.props !== nextProps && (didWarnAboutReassigningProps || error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component"), didWarnAboutReassigningProps = !0);
        }
        return nextUnitOfWork;
      }
      function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
        markRef(current2, workInProgress2);
        var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
        if (!shouldUpdate && !didCaptureError)
          return hasContext && invalidateContextProvider(workInProgress2, Component, !1), bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        var instance = workInProgress2.stateNode;
        ReactCurrentOwner$1.current = workInProgress2;
        var nextChildren;
        if (didCaptureError && typeof Component.getDerivedStateFromError != "function")
          nextChildren = null, stopProfilerTimerIfRunning();
        else {
          markComponentRenderStarted(workInProgress2);
          {
            if (setIsRendering(!0), nextChildren = instance.render(), workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(!0);
              try {
                instance.render();
              } finally {
                setIsStrictModeForDevtools(!1);
              }
            }
            setIsRendering(!1);
          }
          markComponentRenderStopped();
        }
        return workInProgress2.flags |= PerformedWork, current2 !== null && didCaptureError ? forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) : reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.memoizedState = instance.state, hasContext && invalidateContextProvider(workInProgress2, Component, !0), workInProgress2.child;
      }
      function pushHostRootContext(workInProgress2) {
        var root2 = workInProgress2.stateNode;
        root2.pendingContext ? pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context) : root2.context && pushTopLevelContextObject(workInProgress2, root2.context, !1), pushHostContainer(workInProgress2, root2.containerInfo);
      }
      function updateHostRoot(current2, workInProgress2, renderLanes2) {
        if (pushHostRootContext(workInProgress2), current2 === null)
          throw new Error("Should have a current fiber. This is a bug in React.");
        var nextProps = workInProgress2.pendingProps, prevState = workInProgress2.memoizedState, prevChildren = prevState.element;
        cloneUpdateQueue(current2, workInProgress2), processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
        var nextState = workInProgress2.memoizedState, root2 = workInProgress2.stateNode, nextChildren = nextState.element;
        if (prevState.isDehydrated) {
          var overrideState = {
            element: nextChildren,
            isDehydrated: !1,
            cache: nextState.cache,
            pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
            transitions: nextState.transitions
          }, updateQueue = workInProgress2.updateQueue;
          if (updateQueue.baseState = overrideState, workInProgress2.memoizedState = overrideState, workInProgress2.flags & ForceClientRender) {
            var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
            return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
          } else if (nextChildren !== prevChildren) {
            var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
            return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
          } else {
            enterHydrationState(workInProgress2);
            var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            workInProgress2.child = child;
            for (var node = child; node; )
              node.flags = node.flags & ~Placement | Hydrating, node = node.sibling;
          }
        } else {
          if (resetHydrationState(), nextChildren === prevChildren)
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        }
        return workInProgress2.child;
      }
      function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
        return resetHydrationState(), queueHydrationError(recoverableError), workInProgress2.flags |= ForceClientRender, reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
      }
      function updateHostComponent(current2, workInProgress2, renderLanes2) {
        pushHostContext(workInProgress2), current2 === null && tryToClaimNextHydratableInstance(workInProgress2);
        var type = workInProgress2.type, nextProps = workInProgress2.pendingProps, prevProps = current2 !== null ? current2.memoizedProps : null, nextChildren = nextProps.children, isDirectTextChild = shouldSetTextContent(type, nextProps);
        return isDirectTextChild ? nextChildren = null : prevProps !== null && shouldSetTextContent(type, prevProps) && (workInProgress2.flags |= ContentReset), markRef(current2, workInProgress2), reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
      }
      function updateHostText(current2, workInProgress2) {
        return current2 === null && tryToClaimNextHydratableInstance(workInProgress2), null;
      }
      function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
        var props = workInProgress2.pendingProps, lazyComponent = elementType, payload = lazyComponent._payload, init = lazyComponent._init, Component = init(payload);
        workInProgress2.type = Component;
        var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component), resolvedProps = resolveDefaultProps(Component, props), child;
        switch (resolvedTag) {
          case FunctionComponent:
            return validateFunctionComponentInDev(workInProgress2, Component), workInProgress2.type = Component = resolveFunctionForHotReloading(Component), child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2), child;
          case ClassComponent:
            return workInProgress2.type = Component = resolveClassForHotReloading(Component), child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2), child;
          case ForwardRef:
            return workInProgress2.type = Component = resolveForwardRefForHotReloading(Component), child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2), child;
          case MemoComponent: {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerPropTypes = Component.propTypes;
              outerPropTypes && checkPropTypes(
                outerPropTypes,
                resolvedProps,
                // Resolved for outer only
                "prop",
                getComponentNameFromType(Component)
              );
            }
            return child = updateMemoComponent(
              null,
              workInProgress2,
              Component,
              resolveDefaultProps(Component.type, resolvedProps),
              // The inner type can have defaults too
              renderLanes2
            ), child;
          }
        }
        var hint = "";
        throw Component !== null && typeof Component == "object" && Component.$$typeof === REACT_LAZY_TYPE && (hint = " Did you wrap a component in React.lazy() more than once?"), new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
      }
      function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2), workInProgress2.tag = ClassComponent;
        var hasContext;
        return isContextProvider(Component) ? (hasContext = !0, pushContextProvider(workInProgress2)) : hasContext = !1, prepareToReadContext(workInProgress2, renderLanes2), constructClassInstance(workInProgress2, Component, nextProps), mountClassInstance(workInProgress2, Component, nextProps, renderLanes2), finishClassComponent(null, workInProgress2, Component, !0, hasContext, renderLanes2);
      }
      function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
        var props = workInProgress2.pendingProps, context;
        {
          var unmaskedContext = getUnmaskedContext(workInProgress2, Component, !1);
          context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        var value, hasId;
        markComponentRenderStarted(workInProgress2);
        {
          if (Component.prototype && typeof Component.prototype.render == "function") {
            var componentName = getComponentNameFromType(Component) || "Unknown";
            didWarnAboutBadClass[componentName] || (error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName), didWarnAboutBadClass[componentName] = !0);
          }
          workInProgress2.mode & StrictLegacyMode && ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null), setIsRendering(!0), ReactCurrentOwner$1.current = workInProgress2, value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2), hasId = checkDidRenderIdHook(), setIsRendering(!1);
        }
        if (markComponentRenderStopped(), workInProgress2.flags |= PerformedWork, typeof value == "object" && value !== null && typeof value.render == "function" && value.$$typeof === void 0) {
          var _componentName = getComponentNameFromType(Component) || "Unknown";
          didWarnAboutModulePatternComponent[_componentName] || (error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName), didWarnAboutModulePatternComponent[_componentName] = !0);
        }
        if (
          // Run these checks in production only if the flag is off.
          // Eventually we'll delete this branch altogether.
          typeof value == "object" && value !== null && typeof value.render == "function" && value.$$typeof === void 0
        ) {
          {
            var _componentName2 = getComponentNameFromType(Component) || "Unknown";
            didWarnAboutModulePatternComponent[_componentName2] || (error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2), didWarnAboutModulePatternComponent[_componentName2] = !0);
          }
          workInProgress2.tag = ClassComponent, workInProgress2.memoizedState = null, workInProgress2.updateQueue = null;
          var hasContext = !1;
          return isContextProvider(Component) ? (hasContext = !0, pushContextProvider(workInProgress2)) : hasContext = !1, workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null, initializeUpdateQueue(workInProgress2), adoptClassInstance(workInProgress2, value), mountClassInstance(workInProgress2, Component, props, renderLanes2), finishClassComponent(null, workInProgress2, Component, !0, hasContext, renderLanes2);
        } else {
          if (workInProgress2.tag = FunctionComponent, workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(!0);
            try {
              value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2), hasId = checkDidRenderIdHook();
            } finally {
              setIsStrictModeForDevtools(!1);
            }
          }
          return getIsHydrating() && hasId && pushMaterializedTreeId(workInProgress2), reconcileChildren(null, workInProgress2, value, renderLanes2), validateFunctionComponentInDev(workInProgress2, Component), workInProgress2.child;
        }
      }
      function validateFunctionComponentInDev(workInProgress2, Component) {
        {
          if (Component && Component.childContextTypes && error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component"), workInProgress2.ref !== null) {
            var info = "", ownerName = getCurrentFiberOwnerNameInDevOrNull();
            ownerName && (info += `

Check the render method of \`` + ownerName + "`.");
            var warningKey = ownerName || "", debugSource = workInProgress2._debugSource;
            debugSource && (warningKey = debugSource.fileName + ":" + debugSource.lineNumber), didWarnAboutFunctionRefs[warningKey] || (didWarnAboutFunctionRefs[warningKey] = !0, error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info));
          }
          if (Component.defaultProps !== void 0) {
            var componentName = getComponentNameFromType(Component) || "Unknown";
            didWarnAboutDefaultPropsOnFunctionComponent[componentName] || (error("%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", componentName), didWarnAboutDefaultPropsOnFunctionComponent[componentName] = !0);
          }
          if (typeof Component.getDerivedStateFromProps == "function") {
            var _componentName3 = getComponentNameFromType(Component) || "Unknown";
            didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] || (error("%s: Function components do not support getDerivedStateFromProps.", _componentName3), didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = !0);
          }
          if (typeof Component.contextType == "object" && Component.contextType !== null) {
            var _componentName4 = getComponentNameFromType(Component) || "Unknown";
            didWarnAboutContextTypeOnFunctionComponent[_componentName4] || (error("%s: Function components do not support contextType.", _componentName4), didWarnAboutContextTypeOnFunctionComponent[_componentName4] = !0);
          }
        }
      }
      var SUSPENDED_MARKER = {
        dehydrated: null,
        treeContext: null,
        retryLane: NoLane
      };
      function mountSuspenseOffscreenState(renderLanes2) {
        return {
          baseLanes: renderLanes2,
          cachePool: getSuspendedCache(),
          transitions: null
        };
      }
      function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
        var cachePool = null;
        return {
          baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
          cachePool,
          transitions: prevOffscreenState.transitions
        };
      }
      function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
        if (current2 !== null) {
          var suspenseState = current2.memoizedState;
          if (suspenseState === null)
            return !1;
        }
        return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
      }
      function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
        return removeLanes(current2.childLanes, renderLanes2);
      }
      function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps;
        shouldSuspend(workInProgress2) && (workInProgress2.flags |= DidCapture);
        var suspenseContext = suspenseStackCursor.current, showFallback = !1, didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
        if (didSuspend || shouldRemainOnFallback(suspenseContext, current2) ? (showFallback = !0, workInProgress2.flags &= ~DidCapture) : (current2 === null || current2.memoizedState !== null) && (suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext)), suspenseContext = setDefaultShallowSuspenseContext(suspenseContext), pushSuspenseContext(workInProgress2, suspenseContext), current2 === null) {
          tryToClaimNextHydratableInstance(workInProgress2);
          var suspenseState = workInProgress2.memoizedState;
          if (suspenseState !== null) {
            var dehydrated = suspenseState.dehydrated;
            if (dehydrated !== null)
              return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
          }
          var nextPrimaryChildren = nextProps.children, nextFallbackChildren = nextProps.fallback;
          if (showFallback) {
            var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2), primaryChildFragment = workInProgress2.child;
            return primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2), workInProgress2.memoizedState = SUSPENDED_MARKER, fallbackFragment;
          } else
            return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
        } else {
          var prevState = current2.memoizedState;
          if (prevState !== null) {
            var _dehydrated = prevState.dehydrated;
            if (_dehydrated !== null)
              return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
          }
          if (showFallback) {
            var _nextFallbackChildren = nextProps.fallback, _nextPrimaryChildren = nextProps.children, fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2), _primaryChildFragment2 = workInProgress2.child, prevOffscreenState = current2.child.memoizedState;
            return _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2), _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2), workInProgress2.memoizedState = SUSPENDED_MARKER, fallbackChildFragment;
          } else {
            var _nextPrimaryChildren2 = nextProps.children, _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
            return workInProgress2.memoizedState = null, _primaryChildFragment3;
          }
        }
      }
      function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
        var mode2 = workInProgress2.mode, primaryChildProps = {
          mode: "visible",
          children: primaryChildren
        }, primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode2);
        return primaryChildFragment.return = workInProgress2, workInProgress2.child = primaryChildFragment, primaryChildFragment;
      }
      function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var mode2 = workInProgress2.mode, progressedPrimaryFragment = workInProgress2.child, primaryChildProps = {
          mode: "hidden",
          children: primaryChildren
        }, primaryChildFragment, fallbackChildFragment;
        return (mode2 & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null ? (primaryChildFragment = progressedPrimaryFragment, primaryChildFragment.childLanes = NoLanes, primaryChildFragment.pendingProps = primaryChildProps, workInProgress2.mode & ProfileMode && (primaryChildFragment.actualDuration = 0, primaryChildFragment.actualStartTime = -1, primaryChildFragment.selfBaseDuration = 0, primaryChildFragment.treeBaseDuration = 0), fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode2, renderLanes2, null)) : (primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode2), fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode2, renderLanes2, null)), primaryChildFragment.return = workInProgress2, fallbackChildFragment.return = workInProgress2, primaryChildFragment.sibling = fallbackChildFragment, workInProgress2.child = primaryChildFragment, fallbackChildFragment;
      }
      function mountWorkInProgressOffscreenFiber(offscreenProps, mode2, renderLanes2) {
        return createFiberFromOffscreen(offscreenProps, mode2, NoLanes, null);
      }
      function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
        return createWorkInProgress(current2, offscreenProps);
      }
      function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
        var currentPrimaryChildFragment = current2.child, currentFallbackChildFragment = currentPrimaryChildFragment.sibling, primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
          mode: "visible",
          children: primaryChildren
        });
        if ((workInProgress2.mode & ConcurrentMode) === NoMode && (primaryChildFragment.lanes = renderLanes2), primaryChildFragment.return = workInProgress2, primaryChildFragment.sibling = null, currentFallbackChildFragment !== null) {
          var deletions = workInProgress2.deletions;
          deletions === null ? (workInProgress2.deletions = [currentFallbackChildFragment], workInProgress2.flags |= ChildDeletion) : deletions.push(currentFallbackChildFragment);
        }
        return workInProgress2.child = primaryChildFragment, primaryChildFragment;
      }
      function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var mode2 = workInProgress2.mode, currentPrimaryChildFragment = current2.child, currentFallbackChildFragment = currentPrimaryChildFragment.sibling, primaryChildProps = {
          mode: "hidden",
          children: primaryChildren
        }, primaryChildFragment;
        if (
          // In legacy mode, we commit the primary tree as if it successfully
          // completed, even though it's in an inconsistent state.
          (mode2 & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
          // already cloned. In legacy mode, the only case where this isn't true is
          // when DevTools forces us to display a fallback; we skip the first render
          // pass entirely and go straight to rendering the fallback. (In Concurrent
          // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
          // only codepath.)
          workInProgress2.child !== currentPrimaryChildFragment
        ) {
          var progressedPrimaryFragment = workInProgress2.child;
          primaryChildFragment = progressedPrimaryFragment, primaryChildFragment.childLanes = NoLanes, primaryChildFragment.pendingProps = primaryChildProps, workInProgress2.mode & ProfileMode && (primaryChildFragment.actualDuration = 0, primaryChildFragment.actualStartTime = -1, primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration, primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration), workInProgress2.deletions = null;
        } else
          primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps), primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
        var fallbackChildFragment;
        return currentFallbackChildFragment !== null ? fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren) : (fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode2, renderLanes2, null), fallbackChildFragment.flags |= Placement), fallbackChildFragment.return = workInProgress2, primaryChildFragment.return = workInProgress2, primaryChildFragment.sibling = fallbackChildFragment, workInProgress2.child = primaryChildFragment, fallbackChildFragment;
      }
      function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
        recoverableError !== null && queueHydrationError(recoverableError), reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
        var nextProps = workInProgress2.pendingProps, primaryChildren = nextProps.children, primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
        return primaryChildFragment.flags |= Placement, workInProgress2.memoizedState = null, primaryChildFragment;
      }
      function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var fiberMode = workInProgress2.mode, primaryChildProps = {
          mode: "visible",
          children: primaryChildren
        }, primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode), fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
        return fallbackChildFragment.flags |= Placement, primaryChildFragment.return = workInProgress2, fallbackChildFragment.return = workInProgress2, primaryChildFragment.sibling = fallbackChildFragment, workInProgress2.child = primaryChildFragment, (workInProgress2.mode & ConcurrentMode) !== NoMode && reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2), fallbackChildFragment;
      }
      function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
        return (workInProgress2.mode & ConcurrentMode) === NoMode ? (error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components."), workInProgress2.lanes = SyncLane) : isSuspenseInstanceFallback(suspenseInstance) ? workInProgress2.lanes = DefaultHydrationLane : workInProgress2.lanes = OffscreenLane, null;
      }
      function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
        if (didSuspend)
          if (workInProgress2.flags & ForceClientRender) {
            workInProgress2.flags &= ~ForceClientRender;
            var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
          } else {
            if (workInProgress2.memoizedState !== null)
              return workInProgress2.child = current2.child, workInProgress2.flags |= DidCapture, null;
            var nextPrimaryChildren = nextProps.children, nextFallbackChildren = nextProps.fallback, fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2), _primaryChildFragment4 = workInProgress2.child;
            return _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2), workInProgress2.memoizedState = SUSPENDED_MARKER, fallbackChildFragment;
          }
        else {
          if (warnIfHydrating(), (workInProgress2.mode & ConcurrentMode) === NoMode)
            return retrySuspenseComponentWithoutHydrating(
              current2,
              workInProgress2,
              renderLanes2,
              // TODO: When we delete legacy mode, we should make this error argument
              // required — every concurrent mode path that causes hydration to
              // de-opt to client rendering should have an error message.
              null
            );
          if (isSuspenseInstanceFallback(suspenseInstance)) {
            var digest, message, stack;
            {
              var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
              digest = _getSuspenseInstanceF.digest, message = _getSuspenseInstanceF.message, stack = _getSuspenseInstanceF.stack;
            }
            var error2;
            message ? error2 = new Error(message) : error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
            var capturedValue = createCapturedValue(error2, digest, stack);
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
          }
          var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
          if (didReceiveUpdate || hasContextChanged2) {
            var root2 = getWorkInProgressRoot();
            if (root2 !== null) {
              var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
              if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                suspenseState.retryLane = attemptHydrationAtLane;
                var eventTime = NoTimestamp;
                enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane), scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
              }
            }
            renderDidSuspendDelayIfPossible();
            var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
          } else if (isSuspenseInstancePending(suspenseInstance)) {
            workInProgress2.flags |= DidCapture, workInProgress2.child = current2.child;
            var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
            return registerSuspenseInstanceRetry(suspenseInstance, retry), null;
          } else {
            reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
            var primaryChildren = nextProps.children, primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            return primaryChildFragment.flags |= Hydrating, primaryChildFragment;
          }
        }
      }
      function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
        fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
        var alternate = fiber.alternate;
        alternate !== null && (alternate.lanes = mergeLanes(alternate.lanes, renderLanes2)), scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
      }
      function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
        for (var node = firstChild; node !== null; ) {
          if (node.tag === SuspenseComponent) {
            var state = node.memoizedState;
            state !== null && scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
          } else if (node.tag === SuspenseListComponent)
            scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
          else if (node.child !== null) {
            node.child.return = node, node = node.child;
            continue;
          }
          if (node === workInProgress2)
            return;
          for (; node.sibling === null; ) {
            if (node.return === null || node.return === workInProgress2)
              return;
            node = node.return;
          }
          node.sibling.return = node.return, node = node.sibling;
        }
      }
      function findLastContentRow(firstChild) {
        for (var row = firstChild, lastContentRow = null; row !== null; ) {
          var currentRow = row.alternate;
          currentRow !== null && findFirstSuspended(currentRow) === null && (lastContentRow = row), row = row.sibling;
        }
        return lastContentRow;
      }
      function validateRevealOrder(revealOrder) {
        if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder])
          if (didWarnAboutRevealOrder[revealOrder] = !0, typeof revealOrder == "string")
            switch (revealOrder.toLowerCase()) {
              case "together":
              case "forwards":
              case "backwards": {
                error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                break;
              }
              case "forward":
              case "backward": {
                error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                break;
              }
              default:
                error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                break;
            }
          else
            error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
      }
      function validateTailOptions(tailMode, revealOrder) {
        tailMode !== void 0 && !didWarnAboutTailOptions[tailMode] && (tailMode !== "collapsed" && tailMode !== "hidden" ? (didWarnAboutTailOptions[tailMode] = !0, error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode)) : revealOrder !== "forwards" && revealOrder !== "backwards" && (didWarnAboutTailOptions[tailMode] = !0, error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode)));
      }
      function validateSuspenseListNestedChild(childSlot, index2) {
        {
          var isAnArray = isArray(childSlot), isIterable = !isAnArray && typeof getIteratorFn(childSlot) == "function";
          if (isAnArray || isIterable) {
            var type = isAnArray ? "array" : "iterable";
            return error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type), !1;
          }
        }
        return !0;
      }
      function validateSuspenseListChildren(children, revealOrder) {
        if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== !1)
          if (isArray(children)) {
            for (var i = 0; i < children.length; i++)
              if (!validateSuspenseListNestedChild(children[i], i))
                return;
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn == "function") {
              var childrenIterator = iteratorFn.call(children);
              if (childrenIterator)
                for (var step = childrenIterator.next(), _i = 0; !step.done; step = childrenIterator.next()) {
                  if (!validateSuspenseListNestedChild(step.value, _i))
                    return;
                  _i++;
                }
            } else
              error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
          }
      }
      function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
        var renderState = workInProgress2.memoizedState;
        renderState === null ? workInProgress2.memoizedState = {
          isBackwards,
          rendering: null,
          renderingStartTime: 0,
          last: lastContentRow,
          tail,
          tailMode
        } : (renderState.isBackwards = isBackwards, renderState.rendering = null, renderState.renderingStartTime = 0, renderState.last = lastContentRow, renderState.tail = tail, renderState.tailMode = tailMode);
      }
      function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps, revealOrder = nextProps.revealOrder, tailMode = nextProps.tail, newChildren = nextProps.children;
        validateRevealOrder(revealOrder), validateTailOptions(tailMode, revealOrder), validateSuspenseListChildren(newChildren, revealOrder), reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
        var suspenseContext = suspenseStackCursor.current, shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        if (shouldForceFallback)
          suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback), workInProgress2.flags |= DidCapture;
        else {
          var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
          didSuspendBefore && propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2), suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        }
        if (pushSuspenseContext(workInProgress2, suspenseContext), (workInProgress2.mode & ConcurrentMode) === NoMode)
          workInProgress2.memoizedState = null;
        else
          switch (revealOrder) {
            case "forwards": {
              var lastContentRow = findLastContentRow(workInProgress2.child), tail;
              lastContentRow === null ? (tail = workInProgress2.child, workInProgress2.child = null) : (tail = lastContentRow.sibling, lastContentRow.sibling = null), initSuspenseListRenderState(
                workInProgress2,
                !1,
                // isBackwards
                tail,
                lastContentRow,
                tailMode
              );
              break;
            }
            case "backwards": {
              var _tail = null, row = workInProgress2.child;
              for (workInProgress2.child = null; row !== null; ) {
                var currentRow = row.alternate;
                if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                  workInProgress2.child = row;
                  break;
                }
                var nextRow = row.sibling;
                row.sibling = _tail, _tail = row, row = nextRow;
              }
              initSuspenseListRenderState(
                workInProgress2,
                !0,
                // isBackwards
                _tail,
                null,
                // last
                tailMode
              );
              break;
            }
            case "together": {
              initSuspenseListRenderState(
                workInProgress2,
                !1,
                // isBackwards
                null,
                // tail
                null,
                // last
                void 0
              );
              break;
            }
            default:
              workInProgress2.memoizedState = null;
          }
        return workInProgress2.child;
      }
      function updatePortalComponent(current2, workInProgress2, renderLanes2) {
        pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
        var nextChildren = workInProgress2.pendingProps;
        return current2 === null ? workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2) : reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
      }
      var hasWarnedAboutUsingNoValuePropOnContextProvider = !1;
      function updateContextProvider(current2, workInProgress2, renderLanes2) {
        var providerType = workInProgress2.type, context = providerType._context, newProps = workInProgress2.pendingProps, oldProps = workInProgress2.memoizedProps, newValue = newProps.value;
        {
          "value" in newProps || hasWarnedAboutUsingNoValuePropOnContextProvider || (hasWarnedAboutUsingNoValuePropOnContextProvider = !0, error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?"));
          var providerPropTypes = workInProgress2.type.propTypes;
          providerPropTypes && checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
        }
        if (pushProvider(workInProgress2, context, newValue), oldProps !== null) {
          var oldValue = oldProps.value;
          if (objectIs(oldValue, newValue)) {
            if (oldProps.children === newProps.children && !hasContextChanged())
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          } else
            propagateContextChange(workInProgress2, context, renderLanes2);
        }
        var newChildren = newProps.children;
        return reconcileChildren(current2, workInProgress2, newChildren, renderLanes2), workInProgress2.child;
      }
      var hasWarnedAboutUsingContextAsConsumer = !1;
      function updateContextConsumer(current2, workInProgress2, renderLanes2) {
        var context = workInProgress2.type;
        context._context === void 0 ? context !== context.Consumer && (hasWarnedAboutUsingContextAsConsumer || (hasWarnedAboutUsingContextAsConsumer = !0, error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?"))) : context = context._context;
        var newProps = workInProgress2.pendingProps, render2 = newProps.children;
        typeof render2 != "function" && error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."), prepareToReadContext(workInProgress2, renderLanes2);
        var newValue = readContext(context);
        markComponentRenderStarted(workInProgress2);
        var newChildren;
        return ReactCurrentOwner$1.current = workInProgress2, setIsRendering(!0), newChildren = render2(newValue), setIsRendering(!1), markComponentRenderStopped(), workInProgress2.flags |= PerformedWork, reconcileChildren(current2, workInProgress2, newChildren, renderLanes2), workInProgress2.child;
      }
      function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = !0;
      }
      function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
        (workInProgress2.mode & ConcurrentMode) === NoMode && current2 !== null && (current2.alternate = null, workInProgress2.alternate = null, workInProgress2.flags |= Placement);
      }
      function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
        return current2 !== null && (workInProgress2.dependencies = current2.dependencies), stopProfilerTimerIfRunning(), markSkippedUpdateLanes(workInProgress2.lanes), includesSomeLane(renderLanes2, workInProgress2.childLanes) ? (cloneChildFibers(current2, workInProgress2), workInProgress2.child) : null;
      }
      function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
        {
          var returnFiber = oldWorkInProgress.return;
          if (returnFiber === null)
            throw new Error("Cannot swap the root fiber.");
          if (current2.alternate = null, oldWorkInProgress.alternate = null, newWorkInProgress.index = oldWorkInProgress.index, newWorkInProgress.sibling = oldWorkInProgress.sibling, newWorkInProgress.return = oldWorkInProgress.return, newWorkInProgress.ref = oldWorkInProgress.ref, oldWorkInProgress === returnFiber.child)
            returnFiber.child = newWorkInProgress;
          else {
            var prevSibling = returnFiber.child;
            if (prevSibling === null)
              throw new Error("Expected parent to have a child.");
            for (; prevSibling.sibling !== oldWorkInProgress; )
              if (prevSibling = prevSibling.sibling, prevSibling === null)
                throw new Error("Expected to find the previous sibling.");
            prevSibling.sibling = newWorkInProgress;
          }
          var deletions = returnFiber.deletions;
          return deletions === null ? (returnFiber.deletions = [current2], returnFiber.flags |= ChildDeletion) : deletions.push(current2), newWorkInProgress.flags |= Placement, newWorkInProgress;
        }
      }
      function checkScheduledUpdateOrContext(current2, renderLanes2) {
        var updateLanes = current2.lanes;
        return !!includesSomeLane(updateLanes, renderLanes2);
      }
      function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
        switch (workInProgress2.tag) {
          case HostRoot:
            pushHostRootContext(workInProgress2);
            var root2 = workInProgress2.stateNode;
            resetHydrationState();
            break;
          case HostComponent:
            pushHostContext(workInProgress2);
            break;
          case ClassComponent: {
            var Component = workInProgress2.type;
            isContextProvider(Component) && pushContextProvider(workInProgress2);
            break;
          }
          case HostPortal:
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            break;
          case ContextProvider: {
            var newValue = workInProgress2.memoizedProps.value, context = workInProgress2.type._context;
            pushProvider(workInProgress2, context, newValue);
            break;
          }
          case Profiler:
            {
              var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
              hasChildWork && (workInProgress2.flags |= Update);
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0, stateNode.passiveEffectDuration = 0;
              }
            }
            break;
          case SuspenseComponent: {
            var state = workInProgress2.memoizedState;
            if (state !== null) {
              if (state.dehydrated !== null)
                return pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current)), workInProgress2.flags |= DidCapture, null;
              var primaryChildFragment = workInProgress2.child, primaryChildLanes = primaryChildFragment.childLanes;
              if (includesSomeLane(renderLanes2, primaryChildLanes))
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
              var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              return child !== null ? child.sibling : null;
            } else
              pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
            break;
          }
          case SuspenseListComponent: {
            var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags, _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
            if (didSuspendBefore) {
              if (_hasChildWork)
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              workInProgress2.flags |= DidCapture;
            }
            var renderState = workInProgress2.memoizedState;
            if (renderState !== null && (renderState.rendering = null, renderState.tail = null, renderState.lastEffect = null), pushSuspenseContext(workInProgress2, suspenseStackCursor.current), _hasChildWork)
              break;
            return null;
          }
          case OffscreenComponent:
          case LegacyHiddenComponent:
            return workInProgress2.lanes = NoLanes, updateOffscreenComponent(current2, workInProgress2, renderLanes2);
        }
        return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
      }
      function beginWork(current2, workInProgress2, renderLanes2) {
        if (workInProgress2._debugNeedsRemount && current2 !== null)
          return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
        if (current2 !== null) {
          var oldProps = current2.memoizedProps, newProps = workInProgress2.pendingProps;
          if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
          workInProgress2.type !== current2.type)
            didReceiveUpdate = !0;
          else {
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
            // may not be work scheduled on `current`, so we check for this flag.
            (workInProgress2.flags & DidCapture) === NoFlags)
              return didReceiveUpdate = !1, attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
            (current2.flags & ForceUpdateForLegacySuspense) !== NoFlags ? didReceiveUpdate = !0 : didReceiveUpdate = !1;
          }
        } else if (didReceiveUpdate = !1, getIsHydrating() && isForkedChild(workInProgress2)) {
          var slotIndex = workInProgress2.index, numberOfForks = getForksAtLevel();
          pushTreeId(workInProgress2, numberOfForks, slotIndex);
        }
        switch (workInProgress2.lanes = NoLanes, workInProgress2.tag) {
          case IndeterminateComponent:
            return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
          case LazyComponent: {
            var elementType = workInProgress2.elementType;
            return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
          }
          case FunctionComponent: {
            var Component = workInProgress2.type, unresolvedProps = workInProgress2.pendingProps, resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
            return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
          }
          case ClassComponent: {
            var _Component = workInProgress2.type, _unresolvedProps = workInProgress2.pendingProps, _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
            return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
          }
          case HostRoot:
            return updateHostRoot(current2, workInProgress2, renderLanes2);
          case HostComponent:
            return updateHostComponent(current2, workInProgress2, renderLanes2);
          case HostText:
            return updateHostText(current2, workInProgress2);
          case SuspenseComponent:
            return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
          case HostPortal:
            return updatePortalComponent(current2, workInProgress2, renderLanes2);
          case ForwardRef: {
            var type = workInProgress2.type, _unresolvedProps2 = workInProgress2.pendingProps, _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
            return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
          }
          case Fragment3:
            return updateFragment(current2, workInProgress2, renderLanes2);
          case Mode:
            return updateMode(current2, workInProgress2, renderLanes2);
          case Profiler:
            return updateProfiler(current2, workInProgress2, renderLanes2);
          case ContextProvider:
            return updateContextProvider(current2, workInProgress2, renderLanes2);
          case ContextConsumer:
            return updateContextConsumer(current2, workInProgress2, renderLanes2);
          case MemoComponent: {
            var _type2 = workInProgress2.type, _unresolvedProps3 = workInProgress2.pendingProps, _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerPropTypes = _type2.propTypes;
              outerPropTypes && checkPropTypes(
                outerPropTypes,
                _resolvedProps3,
                // Resolved for outer only
                "prop",
                getComponentNameFromType(_type2)
              );
            }
            return _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3), updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
          }
          case SimpleMemoComponent:
            return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
          case IncompleteClassComponent: {
            var _Component2 = workInProgress2.type, _unresolvedProps4 = workInProgress2.pendingProps, _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
            return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
          }
          case SuspenseListComponent:
            return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
          case ScopeComponent:
            break;
          case OffscreenComponent:
            return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
        }
        throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
      }
      function markUpdate(workInProgress2) {
        workInProgress2.flags |= Update;
      }
      function markRef$1(workInProgress2) {
        workInProgress2.flags |= Ref, workInProgress2.flags |= RefStatic;
      }
      var appendAllChildren, updateHostContainer, updateHostComponent$1, updateHostText$1;
      appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
        for (var node = workInProgress2.child; node !== null; ) {
          if (node.tag === HostComponent || node.tag === HostText)
            appendInitialChild(parent, node.stateNode);
          else if (node.tag !== HostPortal) {
            if (node.child !== null) {
              node.child.return = node, node = node.child;
              continue;
            }
          }
          if (node === workInProgress2)
            return;
          for (; node.sibling === null; ) {
            if (node.return === null || node.return === workInProgress2)
              return;
            node = node.return;
          }
          node.sibling.return = node.return, node = node.sibling;
        }
      }, updateHostContainer = function(current2, workInProgress2) {
      }, updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
        var oldProps = current2.memoizedProps;
        if (oldProps !== newProps) {
          var instance = workInProgress2.stateNode, currentHostContext = getHostContext(), updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
          workInProgress2.updateQueue = updatePayload, updatePayload && markUpdate(workInProgress2);
        }
      }, updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
        oldText !== newText && markUpdate(workInProgress2);
      };
      function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        if (!getIsHydrating())
          switch (renderState.tailMode) {
            case "hidden": {
              for (var tailNode = renderState.tail, lastTailNode = null; tailNode !== null; )
                tailNode.alternate !== null && (lastTailNode = tailNode), tailNode = tailNode.sibling;
              lastTailNode === null ? renderState.tail = null : lastTailNode.sibling = null;
              break;
            }
            case "collapsed": {
              for (var _tailNode = renderState.tail, _lastTailNode = null; _tailNode !== null; )
                _tailNode.alternate !== null && (_lastTailNode = _tailNode), _tailNode = _tailNode.sibling;
              _lastTailNode === null ? !hasRenderedATailFallback && renderState.tail !== null ? renderState.tail.sibling = null : renderState.tail = null : _lastTailNode.sibling = null;
              break;
            }
          }
      }
      function bubbleProperties(completedWork) {
        var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child, newChildLanes = NoLanes, subtreeFlags = NoFlags;
        if (didBailout) {
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            for (var _treeBaseDuration = completedWork.selfBaseDuration, _child2 = completedWork.child; _child2 !== null; )
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes)), subtreeFlags |= _child2.subtreeFlags & StaticMask, subtreeFlags |= _child2.flags & StaticMask, _treeBaseDuration += _child2.treeBaseDuration, _child2 = _child2.sibling;
            completedWork.treeBaseDuration = _treeBaseDuration;
          } else
            for (var _child3 = completedWork.child; _child3 !== null; )
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes)), subtreeFlags |= _child3.subtreeFlags & StaticMask, subtreeFlags |= _child3.flags & StaticMask, _child3.return = completedWork, _child3 = _child3.sibling;
          completedWork.subtreeFlags |= subtreeFlags;
        } else {
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            for (var actualDuration = completedWork.actualDuration, treeBaseDuration = completedWork.selfBaseDuration, child = completedWork.child; child !== null; )
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes)), subtreeFlags |= child.subtreeFlags, subtreeFlags |= child.flags, actualDuration += child.actualDuration, treeBaseDuration += child.treeBaseDuration, child = child.sibling;
            completedWork.actualDuration = actualDuration, completedWork.treeBaseDuration = treeBaseDuration;
          } else
            for (var _child = completedWork.child; _child !== null; )
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes)), subtreeFlags |= _child.subtreeFlags, subtreeFlags |= _child.flags, _child.return = completedWork, _child = _child.sibling;
          completedWork.subtreeFlags |= subtreeFlags;
        }
        return completedWork.childLanes = newChildLanes, didBailout;
      }
      function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
        if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags)
          return warnIfUnhydratedTailNodes(workInProgress2), resetHydrationState(), workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture, !1;
        var wasHydrated = popHydrationState(workInProgress2);
        if (nextState !== null && nextState.dehydrated !== null)
          if (current2 === null) {
            if (!wasHydrated)
              throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
            if (prepareToHydrateHostSuspenseInstance(workInProgress2), bubbleProperties(workInProgress2), (workInProgress2.mode & ProfileMode) !== NoMode) {
              var isTimedOutSuspense = nextState !== null;
              if (isTimedOutSuspense) {
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment !== null && (workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration);
              }
            }
            return !1;
          } else {
            if (resetHydrationState(), (workInProgress2.flags & DidCapture) === NoFlags && (workInProgress2.memoizedState = null), workInProgress2.flags |= Update, bubbleProperties(workInProgress2), (workInProgress2.mode & ProfileMode) !== NoMode) {
              var _isTimedOutSuspense = nextState !== null;
              if (_isTimedOutSuspense) {
                var _primaryChildFragment = workInProgress2.child;
                _primaryChildFragment !== null && (workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration);
              }
            }
            return !1;
          }
        else
          return upgradeHydrationErrorsToRecoverable(), !0;
      }
      function completeWork(current2, workInProgress2, renderLanes2) {
        var newProps = workInProgress2.pendingProps;
        switch (popTreeContext(workInProgress2), workInProgress2.tag) {
          case IndeterminateComponent:
          case LazyComponent:
          case SimpleMemoComponent:
          case FunctionComponent:
          case ForwardRef:
          case Fragment3:
          case Mode:
          case Profiler:
          case ContextConsumer:
          case MemoComponent:
            return bubbleProperties(workInProgress2), null;
          case ClassComponent: {
            var Component = workInProgress2.type;
            return isContextProvider(Component) && popContext(workInProgress2), bubbleProperties(workInProgress2), null;
          }
          case HostRoot: {
            var fiberRoot = workInProgress2.stateNode;
            if (popHostContainer(workInProgress2), popTopLevelContextObject(workInProgress2), resetWorkInProgressVersions(), fiberRoot.pendingContext && (fiberRoot.context = fiberRoot.pendingContext, fiberRoot.pendingContext = null), current2 === null || current2.child === null) {
              var wasHydrated = popHydrationState(workInProgress2);
              if (wasHydrated)
                markUpdate(workInProgress2);
              else if (current2 !== null) {
                var prevState = current2.memoizedState;
                // Check if this is a client root
                (!prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                (workInProgress2.flags & ForceClientRender) !== NoFlags) && (workInProgress2.flags |= Snapshot, upgradeHydrationErrorsToRecoverable());
              }
            }
            return updateHostContainer(current2, workInProgress2), bubbleProperties(workInProgress2), null;
          }
          case HostComponent: {
            popHostContext(workInProgress2);
            var rootContainerInstance = getRootHostContainer(), type = workInProgress2.type;
            if (current2 !== null && workInProgress2.stateNode != null)
              updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance), current2.ref !== workInProgress2.ref && markRef$1(workInProgress2);
            else {
              if (!newProps) {
                if (workInProgress2.stateNode === null)
                  throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                return bubbleProperties(workInProgress2), null;
              }
              var currentHostContext = getHostContext(), _wasHydrated = popHydrationState(workInProgress2);
              if (_wasHydrated)
                prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext) && markUpdate(workInProgress2);
              else {
                var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                appendAllChildren(instance, workInProgress2, !1, !1), workInProgress2.stateNode = instance, finalizeInitialChildren(instance, type, newProps, rootContainerInstance) && markUpdate(workInProgress2);
              }
              workInProgress2.ref !== null && markRef$1(workInProgress2);
            }
            return bubbleProperties(workInProgress2), null;
          }
          case HostText: {
            var newText = newProps;
            if (current2 && workInProgress2.stateNode != null) {
              var oldText = current2.memoizedProps;
              updateHostText$1(current2, workInProgress2, oldText, newText);
            } else {
              if (typeof newText != "string" && workInProgress2.stateNode === null)
                throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
              var _rootContainerInstance = getRootHostContainer(), _currentHostContext = getHostContext(), _wasHydrated2 = popHydrationState(workInProgress2);
              _wasHydrated2 ? prepareToHydrateHostTextInstance(workInProgress2) && markUpdate(workInProgress2) : workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
            }
            return bubbleProperties(workInProgress2), null;
          }
          case SuspenseComponent: {
            popSuspenseContext(workInProgress2);
            var nextState = workInProgress2.memoizedState;
            if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
              var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
              if (!fallthroughToNormalSuspensePath)
                return workInProgress2.flags & ShouldCapture ? workInProgress2 : null;
            }
            if ((workInProgress2.flags & DidCapture) !== NoFlags)
              return workInProgress2.lanes = renderLanes2, (workInProgress2.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress2), workInProgress2;
            var nextDidTimeout = nextState !== null, prevDidTimeout = current2 !== null && current2.memoizedState !== null;
            if (nextDidTimeout !== prevDidTimeout && nextDidTimeout) {
              var _offscreenFiber2 = workInProgress2.child;
              if (_offscreenFiber2.flags |= Visibility, (workInProgress2.mode & ConcurrentMode) !== NoMode) {
                var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== !0 || !enableSuspenseAvoidThisFallback);
                hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext) ? renderDidSuspend() : renderDidSuspendDelayIfPossible();
              }
            }
            var wakeables = workInProgress2.updateQueue;
            if (wakeables !== null && (workInProgress2.flags |= Update), bubbleProperties(workInProgress2), (workInProgress2.mode & ProfileMode) !== NoMode && nextDidTimeout) {
              var primaryChildFragment = workInProgress2.child;
              primaryChildFragment !== null && (workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration);
            }
            return null;
          }
          case HostPortal:
            return popHostContainer(workInProgress2), updateHostContainer(current2, workInProgress2), current2 === null && preparePortalMount(workInProgress2.stateNode.containerInfo), bubbleProperties(workInProgress2), null;
          case ContextProvider:
            var context = workInProgress2.type._context;
            return popProvider(context, workInProgress2), bubbleProperties(workInProgress2), null;
          case IncompleteClassComponent: {
            var _Component = workInProgress2.type;
            return isContextProvider(_Component) && popContext(workInProgress2), bubbleProperties(workInProgress2), null;
          }
          case SuspenseListComponent: {
            popSuspenseContext(workInProgress2);
            var renderState = workInProgress2.memoizedState;
            if (renderState === null)
              return bubbleProperties(workInProgress2), null;
            var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags, renderedTail = renderState.rendering;
            if (renderedTail === null)
              if (didSuspendAlready)
                cutOffTailIfNeeded(renderState, !1);
              else {
                var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                if (!cannotBeSuspended)
                  for (var row = workInProgress2.child; row !== null; ) {
                    var suspended = findFirstSuspended(row);
                    if (suspended !== null) {
                      didSuspendAlready = !0, workInProgress2.flags |= DidCapture, cutOffTailIfNeeded(renderState, !1);
                      var newThenables = suspended.updateQueue;
                      return newThenables !== null && (workInProgress2.updateQueue = newThenables, workInProgress2.flags |= Update), workInProgress2.subtreeFlags = NoFlags, resetChildFibers(workInProgress2, renderLanes2), pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback)), workInProgress2.child;
                    }
                    row = row.sibling;
                  }
                renderState.tail !== null && now() > getRenderTargetTime() && (workInProgress2.flags |= DidCapture, didSuspendAlready = !0, cutOffTailIfNeeded(renderState, !1), workInProgress2.lanes = SomeRetryLane);
              }
            else {
              if (!didSuspendAlready) {
                var _suspended = findFirstSuspended(renderedTail);
                if (_suspended !== null) {
                  workInProgress2.flags |= DidCapture, didSuspendAlready = !0;
                  var _newThenables = _suspended.updateQueue;
                  if (_newThenables !== null && (workInProgress2.updateQueue = _newThenables, workInProgress2.flags |= Update), cutOffTailIfNeeded(renderState, !0), renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating())
                    return bubbleProperties(workInProgress2), null;
                } else
                  // The time it took to render last row is greater than the remaining
                  // time we have to render. So rendering one more row would likely
                  // exceed it.
                  now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane && (workInProgress2.flags |= DidCapture, didSuspendAlready = !0, cutOffTailIfNeeded(renderState, !1), workInProgress2.lanes = SomeRetryLane);
              }
              if (renderState.isBackwards)
                renderedTail.sibling = workInProgress2.child, workInProgress2.child = renderedTail;
              else {
                var previousSibling = renderState.last;
                previousSibling !== null ? previousSibling.sibling = renderedTail : workInProgress2.child = renderedTail, renderState.last = renderedTail;
              }
            }
            if (renderState.tail !== null) {
              var next = renderState.tail;
              renderState.rendering = next, renderState.tail = next.sibling, renderState.renderingStartTime = now(), next.sibling = null;
              var suspenseContext = suspenseStackCursor.current;
              return didSuspendAlready ? suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback) : suspenseContext = setDefaultShallowSuspenseContext(suspenseContext), pushSuspenseContext(workInProgress2, suspenseContext), next;
            }
            return bubbleProperties(workInProgress2), null;
          }
          case ScopeComponent:
            break;
          case OffscreenComponent:
          case LegacyHiddenComponent: {
            popRenderLanes(workInProgress2);
            var _nextState = workInProgress2.memoizedState, nextIsHidden = _nextState !== null;
            if (current2 !== null) {
              var _prevState = current2.memoizedState, prevIsHidden = _prevState !== null;
              prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
              !enableLegacyHidden && (workInProgress2.flags |= Visibility);
            }
            return !nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode ? bubbleProperties(workInProgress2) : includesSomeLane(subtreeRenderLanes, OffscreenLane) && (bubbleProperties(workInProgress2), workInProgress2.subtreeFlags & (Placement | Update) && (workInProgress2.flags |= Visibility)), null;
          }
          case CacheComponent:
            return null;
          case TracingMarkerComponent:
            return null;
        }
        throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
      }
      function unwindWork(current2, workInProgress2, renderLanes2) {
        switch (popTreeContext(workInProgress2), workInProgress2.tag) {
          case ClassComponent: {
            var Component = workInProgress2.type;
            isContextProvider(Component) && popContext(workInProgress2);
            var flags = workInProgress2.flags;
            return flags & ShouldCapture ? (workInProgress2.flags = flags & ~ShouldCapture | DidCapture, (workInProgress2.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress2), workInProgress2) : null;
          }
          case HostRoot: {
            var root2 = workInProgress2.stateNode;
            popHostContainer(workInProgress2), popTopLevelContextObject(workInProgress2), resetWorkInProgressVersions();
            var _flags = workInProgress2.flags;
            return (_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags ? (workInProgress2.flags = _flags & ~ShouldCapture | DidCapture, workInProgress2) : null;
          }
          case HostComponent:
            return popHostContext(workInProgress2), null;
          case SuspenseComponent: {
            popSuspenseContext(workInProgress2);
            var suspenseState = workInProgress2.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              if (workInProgress2.alternate === null)
                throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
              resetHydrationState();
            }
            var _flags2 = workInProgress2.flags;
            return _flags2 & ShouldCapture ? (workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture, (workInProgress2.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress2), workInProgress2) : null;
          }
          case SuspenseListComponent:
            return popSuspenseContext(workInProgress2), null;
          case HostPortal:
            return popHostContainer(workInProgress2), null;
          case ContextProvider:
            var context = workInProgress2.type._context;
            return popProvider(context, workInProgress2), null;
          case OffscreenComponent:
          case LegacyHiddenComponent:
            return popRenderLanes(workInProgress2), null;
          case CacheComponent:
            return null;
          default:
            return null;
        }
      }
      function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
        switch (popTreeContext(interruptedWork), interruptedWork.tag) {
          case ClassComponent: {
            var childContextTypes = interruptedWork.type.childContextTypes;
            childContextTypes != null && popContext(interruptedWork);
            break;
          }
          case HostRoot: {
            var root2 = interruptedWork.stateNode;
            popHostContainer(interruptedWork), popTopLevelContextObject(interruptedWork), resetWorkInProgressVersions();
            break;
          }
          case HostComponent: {
            popHostContext(interruptedWork);
            break;
          }
          case HostPortal:
            popHostContainer(interruptedWork);
            break;
          case SuspenseComponent:
            popSuspenseContext(interruptedWork);
            break;
          case SuspenseListComponent:
            popSuspenseContext(interruptedWork);
            break;
          case ContextProvider:
            var context = interruptedWork.type._context;
            popProvider(context, interruptedWork);
            break;
          case OffscreenComponent:
          case LegacyHiddenComponent:
            popRenderLanes(interruptedWork);
            break;
        }
      }
      var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
      didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
      var offscreenSubtreeIsHidden = !1, offscreenSubtreeWasHidden = !1, PossiblyWeakSet = typeof WeakSet == "function" ? WeakSet : Set, nextEffect = null, inProgressLanes = null, inProgressRoot = null;
      function reportUncaughtErrorInDEV(error2) {
        invokeGuardedCallback(null, function() {
          throw error2;
        }), clearCaughtError();
      }
      var callComponentWillUnmountWithTimer = function(current2, instance) {
        if (instance.props = current2.memoizedProps, instance.state = current2.memoizedState, current2.mode & ProfileMode)
          try {
            startLayoutEffectTimer(), instance.componentWillUnmount();
          } finally {
            recordLayoutEffectDuration(current2);
          }
        else
          instance.componentWillUnmount();
      };
      function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
        try {
          commitHookEffectListMount(Layout2, current2);
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
        try {
          callComponentWillUnmountWithTimer(current2, instance);
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
        try {
          instance.componentDidMount();
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyAttachRef(current2, nearestMountedAncestor) {
        try {
          commitAttachRef(current2);
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyDetachRef(current2, nearestMountedAncestor) {
        var ref = current2.ref;
        if (ref !== null)
          if (typeof ref == "function") {
            var retVal;
            try {
              if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode)
                try {
                  startLayoutEffectTimer(), retVal = ref(null);
                } finally {
                  recordLayoutEffectDuration(current2);
                }
              else
                retVal = ref(null);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
            typeof retVal == "function" && error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
          } else
            ref.current = null;
      }
      function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
        try {
          destroy();
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      var focusedInstanceHandle = null, shouldFireAfterActiveInstanceBlur = !1;
      function commitBeforeMutationEffects(root2, firstChild) {
        focusedInstanceHandle = prepareForCommit(root2.containerInfo), nextEffect = firstChild, commitBeforeMutationEffects_begin();
        var shouldFire = shouldFireAfterActiveInstanceBlur;
        return shouldFireAfterActiveInstanceBlur = !1, focusedInstanceHandle = null, shouldFire;
      }
      function commitBeforeMutationEffects_begin() {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect, child = fiber.child;
          (fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null ? (child.return = fiber, nextEffect = child) : commitBeforeMutationEffects_complete();
        }
      }
      function commitBeforeMutationEffects_complete() {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect;
          setCurrentFiber(fiber);
          try {
            commitBeforeMutationEffectsOnFiber(fiber);
          } catch (error2) {
            captureCommitPhaseError(fiber, fiber.return, error2);
          }
          resetCurrentFiber();
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return, nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitBeforeMutationEffectsOnFiber(finishedWork) {
        var current2 = finishedWork.alternate, flags = finishedWork.flags;
        if ((flags & Snapshot) !== NoFlags) {
          switch (setCurrentFiber(finishedWork), finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
              break;
            case ClassComponent: {
              if (current2 !== null) {
                var prevProps = current2.memoizedProps, prevState = current2.memoizedState, instance = finishedWork.stateNode;
                finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps && (instance.props !== finishedWork.memoizedProps && error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance"), instance.state !== finishedWork.memoizedState && error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance"));
                var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                {
                  var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                  snapshot === void 0 && !didWarnSet.has(finishedWork.type) && (didWarnSet.add(finishedWork.type), error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork)));
                }
                instance.__reactInternalSnapshotBeforeUpdate = snapshot;
              }
              break;
            }
            case HostRoot: {
              {
                var root2 = finishedWork.stateNode;
                clearContainer(root2.containerInfo);
              }
              break;
            }
            case HostComponent:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
              break;
            default:
              throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
          }
          resetCurrentFiber();
        }
      }
      function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
        var updateQueue = finishedWork.updateQueue, lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
          var firstEffect = lastEffect.next, effect = firstEffect;
          do {
            if ((effect.tag & flags) === flags) {
              var destroy = effect.destroy;
              effect.destroy = void 0, destroy !== void 0 && ((flags & Passive$1) !== NoFlags$1 ? markComponentPassiveEffectUnmountStarted(finishedWork) : (flags & Layout2) !== NoFlags$1 && markComponentLayoutEffectUnmountStarted(finishedWork), (flags & Insertion) !== NoFlags$1 && setIsRunningInsertionEffect(!0), safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy), (flags & Insertion) !== NoFlags$1 && setIsRunningInsertionEffect(!1), (flags & Passive$1) !== NoFlags$1 ? markComponentPassiveEffectUnmountStopped() : (flags & Layout2) !== NoFlags$1 && markComponentLayoutEffectUnmountStopped());
            }
            effect = effect.next;
          } while (effect !== firstEffect);
        }
      }
      function commitHookEffectListMount(flags, finishedWork) {
        var updateQueue = finishedWork.updateQueue, lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
          var firstEffect = lastEffect.next, effect = firstEffect;
          do {
            if ((effect.tag & flags) === flags) {
              (flags & Passive$1) !== NoFlags$1 ? markComponentPassiveEffectMountStarted(finishedWork) : (flags & Layout2) !== NoFlags$1 && markComponentLayoutEffectMountStarted(finishedWork);
              var create = effect.create;
              (flags & Insertion) !== NoFlags$1 && setIsRunningInsertionEffect(!0), effect.destroy = create(), (flags & Insertion) !== NoFlags$1 && setIsRunningInsertionEffect(!1), (flags & Passive$1) !== NoFlags$1 ? markComponentPassiveEffectMountStopped() : (flags & Layout2) !== NoFlags$1 && markComponentLayoutEffectMountStopped();
              {
                var destroy = effect.destroy;
                if (destroy !== void 0 && typeof destroy != "function") {
                  var hookName = void 0;
                  (effect.tag & Layout2) !== NoFlags ? hookName = "useLayoutEffect" : (effect.tag & Insertion) !== NoFlags ? hookName = "useInsertionEffect" : hookName = "useEffect";
                  var addendum = void 0;
                  destroy === null ? addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing)." : typeof destroy.then == "function" ? addendum = `

It looks like you wrote ` + hookName + `(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:

` + hookName + `(() => {
  async function fetchData() {
    // You can await here
    const response = await MyAPI.getData(someId);
    // ...
  }
  fetchData();
}, [someId]); // Or [] if effect doesn't need props or state

Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching` : addendum = " You returned: " + destroy, error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                }
              }
            }
            effect = effect.next;
          } while (effect !== firstEffect);
        }
      }
      function commitPassiveEffectDurations(finishedRoot, finishedWork) {
        if ((finishedWork.flags & Update) !== NoFlags)
          switch (finishedWork.tag) {
            case Profiler: {
              var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration, _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit, commitTime2 = getCommitTime(), phase = finishedWork.alternate === null ? "mount" : "update";
              isCurrentUpdateNested() && (phase = "nested-update"), typeof onPostCommit == "function" && onPostCommit(id, phase, passiveEffectDuration, commitTime2);
              var parentFiber = finishedWork.return;
              outer:
                for (; parentFiber !== null; ) {
                  switch (parentFiber.tag) {
                    case HostRoot:
                      var root2 = parentFiber.stateNode;
                      root2.passiveEffectDuration += passiveEffectDuration;
                      break outer;
                    case Profiler:
                      var parentStateNode = parentFiber.stateNode;
                      parentStateNode.passiveEffectDuration += passiveEffectDuration;
                      break outer;
                  }
                  parentFiber = parentFiber.return;
                }
              break;
            }
          }
      }
      function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
        if ((finishedWork.flags & LayoutMask) !== NoFlags)
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (!offscreenSubtreeWasHidden)
                if (finishedWork.mode & ProfileMode)
                  try {
                    startLayoutEffectTimer(), commitHookEffectListMount(Layout2 | HasEffect, finishedWork);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                else
                  commitHookEffectListMount(Layout2 | HasEffect, finishedWork);
              break;
            }
            case ClassComponent: {
              var instance = finishedWork.stateNode;
              if (finishedWork.flags & Update && !offscreenSubtreeWasHidden)
                if (current2 === null)
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps && (instance.props !== finishedWork.memoizedProps && error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance"), instance.state !== finishedWork.memoizedState && error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance")), finishedWork.mode & ProfileMode)
                    try {
                      startLayoutEffectTimer(), instance.componentDidMount();
                    } finally {
                      recordLayoutEffectDuration(finishedWork);
                    }
                  else
                    instance.componentDidMount();
                else {
                  var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps), prevState = current2.memoizedState;
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps && (instance.props !== finishedWork.memoizedProps && error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance"), instance.state !== finishedWork.memoizedState && error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance")), finishedWork.mode & ProfileMode)
                    try {
                      startLayoutEffectTimer(), instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    } finally {
                      recordLayoutEffectDuration(finishedWork);
                    }
                  else
                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                }
              var updateQueue = finishedWork.updateQueue;
              updateQueue !== null && (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps && (instance.props !== finishedWork.memoizedProps && error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance"), instance.state !== finishedWork.memoizedState && error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance")), commitUpdateQueue(finishedWork, updateQueue, instance));
              break;
            }
            case HostRoot: {
              var _updateQueue = finishedWork.updateQueue;
              if (_updateQueue !== null) {
                var _instance = null;
                if (finishedWork.child !== null)
                  switch (finishedWork.child.tag) {
                    case HostComponent:
                      _instance = finishedWork.child.stateNode;
                      break;
                    case ClassComponent:
                      _instance = finishedWork.child.stateNode;
                      break;
                  }
                commitUpdateQueue(finishedWork, _updateQueue, _instance);
              }
              break;
            }
            case HostComponent: {
              var _instance2 = finishedWork.stateNode;
              if (current2 === null && finishedWork.flags & Update) {
                var type = finishedWork.type, props = finishedWork.memoizedProps;
                commitMount(_instance2, type, props);
              }
              break;
            }
            case HostText:
              break;
            case HostPortal:
              break;
            case Profiler: {
              {
                var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender, effectDuration = finishedWork.stateNode.effectDuration, commitTime2 = getCommitTime(), phase = current2 === null ? "mount" : "update";
                isCurrentUpdateNested() && (phase = "nested-update"), typeof onRender == "function" && onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                {
                  typeof onCommit == "function" && onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2), enqueuePendingPassiveProfilerEffect(finishedWork);
                  var parentFiber = finishedWork.return;
                  outer:
                    for (; parentFiber !== null; ) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root2 = parentFiber.stateNode;
                          root2.effectDuration += effectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.effectDuration += effectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                }
              }
              break;
            }
            case SuspenseComponent: {
              commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
              break;
            }
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case ScopeComponent:
            case OffscreenComponent:
            case LegacyHiddenComponent:
            case TracingMarkerComponent:
              break;
            default:
              throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
          }
        offscreenSubtreeWasHidden || finishedWork.flags & Ref && commitAttachRef(finishedWork);
      }
      function reappearLayoutEffectsOnFiber(node) {
        switch (node.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (node.mode & ProfileMode)
              try {
                startLayoutEffectTimer(), safelyCallCommitHookLayoutEffectListMount(node, node.return);
              } finally {
                recordLayoutEffectDuration(node);
              }
            else
              safelyCallCommitHookLayoutEffectListMount(node, node.return);
            break;
          }
          case ClassComponent: {
            var instance = node.stateNode;
            typeof instance.componentDidMount == "function" && safelyCallComponentDidMount(node, node.return, instance), safelyAttachRef(node, node.return);
            break;
          }
          case HostComponent: {
            safelyAttachRef(node, node.return);
            break;
          }
        }
      }
      function hideOrUnhideAllChildren(finishedWork, isHidden) {
        for (var hostSubtreeRoot = null, node = finishedWork; ; ) {
          if (node.tag === HostComponent) {
            if (hostSubtreeRoot === null) {
              hostSubtreeRoot = node;
              try {
                var instance = node.stateNode;
                isHidden ? hideInstance(instance) : unhideInstance(node.stateNode, node.memoizedProps);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
            }
          } else if (node.tag === HostText) {
            if (hostSubtreeRoot === null)
              try {
                var _instance3 = node.stateNode;
                isHidden ? hideTextInstance(_instance3) : unhideTextInstance(_instance3, node.memoizedProps);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
          } else if (!((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)) {
            if (node.child !== null) {
              node.child.return = node, node = node.child;
              continue;
            }
          }
          if (node === finishedWork)
            return;
          for (; node.sibling === null; ) {
            if (node.return === null || node.return === finishedWork)
              return;
            hostSubtreeRoot === node && (hostSubtreeRoot = null), node = node.return;
          }
          hostSubtreeRoot === node && (hostSubtreeRoot = null), node.sibling.return = node.return, node = node.sibling;
        }
      }
      function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (ref !== null) {
          var instance = finishedWork.stateNode, instanceToUse;
          switch (finishedWork.tag) {
            case HostComponent:
              instanceToUse = instance;
              break;
            default:
              instanceToUse = instance;
          }
          if (typeof ref == "function") {
            var retVal;
            if (finishedWork.mode & ProfileMode)
              try {
                startLayoutEffectTimer(), retVal = ref(instanceToUse);
              } finally {
                recordLayoutEffectDuration(finishedWork);
              }
            else
              retVal = ref(instanceToUse);
            typeof retVal == "function" && error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
          } else
            ref.hasOwnProperty("current") || error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork)), ref.current = instanceToUse;
        }
      }
      function detachFiberMutation(fiber) {
        var alternate = fiber.alternate;
        alternate !== null && (alternate.return = null), fiber.return = null;
      }
      function detachFiberAfterEffects(fiber) {
        var alternate = fiber.alternate;
        alternate !== null && (fiber.alternate = null, detachFiberAfterEffects(alternate));
        {
          if (fiber.child = null, fiber.deletions = null, fiber.sibling = null, fiber.tag === HostComponent) {
            var hostInstance = fiber.stateNode;
            hostInstance !== null && detachDeletedInstance(hostInstance);
          }
          fiber.stateNode = null, fiber._debugOwner = null, fiber.return = null, fiber.dependencies = null, fiber.memoizedProps = null, fiber.memoizedState = null, fiber.pendingProps = null, fiber.stateNode = null, fiber.updateQueue = null;
        }
      }
      function getHostParentFiber(fiber) {
        for (var parent = fiber.return; parent !== null; ) {
          if (isHostParent(parent))
            return parent;
          parent = parent.return;
        }
        throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
      }
      function isHostParent(fiber) {
        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
      }
      function getHostSibling(fiber) {
        var node = fiber;
        siblings:
          for (; ; ) {
            for (; node.sibling === null; ) {
              if (node.return === null || isHostParent(node.return))
                return null;
              node = node.return;
            }
            for (node.sibling.return = node.return, node = node.sibling; node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment; ) {
              if (node.flags & Placement || node.child === null || node.tag === HostPortal)
                continue siblings;
              node.child.return = node, node = node.child;
            }
            if (!(node.flags & Placement))
              return node.stateNode;
          }
      }
      function commitPlacement(finishedWork) {
        var parentFiber = getHostParentFiber(finishedWork);
        switch (parentFiber.tag) {
          case HostComponent: {
            var parent = parentFiber.stateNode;
            parentFiber.flags & ContentReset && (resetTextContent(parent), parentFiber.flags &= ~ContentReset);
            var before = getHostSibling(finishedWork);
            insertOrAppendPlacementNode(finishedWork, before, parent);
            break;
          }
          case HostRoot:
          case HostPortal: {
            var _parent = parentFiber.stateNode.containerInfo, _before = getHostSibling(finishedWork);
            insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
            break;
          }
          default:
            throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
        var tag = node.tag, isHost = tag === HostComponent || tag === HostText;
        if (isHost) {
          var stateNode = node.stateNode;
          before ? insertInContainerBefore(parent, stateNode, before) : appendChildToContainer(parent, stateNode);
        } else if (tag !== HostPortal) {
          var child = node.child;
          if (child !== null) {
            insertOrAppendPlacementNodeIntoContainer(child, before, parent);
            for (var sibling = child.sibling; sibling !== null; )
              insertOrAppendPlacementNodeIntoContainer(sibling, before, parent), sibling = sibling.sibling;
          }
        }
      }
      function insertOrAppendPlacementNode(node, before, parent) {
        var tag = node.tag, isHost = tag === HostComponent || tag === HostText;
        if (isHost) {
          var stateNode = node.stateNode;
          before ? insertBefore(parent, stateNode, before) : appendChild(parent, stateNode);
        } else if (tag !== HostPortal) {
          var child = node.child;
          if (child !== null) {
            insertOrAppendPlacementNode(child, before, parent);
            for (var sibling = child.sibling; sibling !== null; )
              insertOrAppendPlacementNode(sibling, before, parent), sibling = sibling.sibling;
          }
        }
      }
      var hostParent = null, hostParentIsContainer = !1;
      function commitDeletionEffects(root2, returnFiber, deletedFiber) {
        {
          var parent = returnFiber;
          findParent:
            for (; parent !== null; ) {
              switch (parent.tag) {
                case HostComponent: {
                  hostParent = parent.stateNode, hostParentIsContainer = !1;
                  break findParent;
                }
                case HostRoot: {
                  hostParent = parent.stateNode.containerInfo, hostParentIsContainer = !0;
                  break findParent;
                }
                case HostPortal: {
                  hostParent = parent.stateNode.containerInfo, hostParentIsContainer = !0;
                  break findParent;
                }
              }
              parent = parent.return;
            }
          if (hostParent === null)
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber), hostParent = null, hostParentIsContainer = !1;
        }
        detachFiberMutation(deletedFiber);
      }
      function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
        for (var child = parent.child; child !== null; )
          commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child), child = child.sibling;
      }
      function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
        switch (onCommitUnmount(deletedFiber), deletedFiber.tag) {
          case HostComponent:
            offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
          case HostText: {
            {
              var prevHostParent = hostParent, prevHostParentIsContainer = hostParentIsContainer;
              hostParent = null, recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber), hostParent = prevHostParent, hostParentIsContainer = prevHostParentIsContainer, hostParent !== null && (hostParentIsContainer ? removeChildFromContainer(hostParent, deletedFiber.stateNode) : removeChild(hostParent, deletedFiber.stateNode));
            }
            return;
          }
          case DehydratedFragment: {
            hostParent !== null && (hostParentIsContainer ? clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode) : clearSuspenseBoundary(hostParent, deletedFiber.stateNode));
            return;
          }
          case HostPortal: {
            {
              var _prevHostParent = hostParent, _prevHostParentIsContainer = hostParentIsContainer;
              hostParent = deletedFiber.stateNode.containerInfo, hostParentIsContainer = !0, recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber), hostParent = _prevHostParent, hostParentIsContainer = _prevHostParentIsContainer;
            }
            return;
          }
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent: {
            if (!offscreenSubtreeWasHidden) {
              var updateQueue = deletedFiber.updateQueue;
              if (updateQueue !== null) {
                var lastEffect = updateQueue.lastEffect;
                if (lastEffect !== null) {
                  var firstEffect = lastEffect.next, effect = firstEffect;
                  do {
                    var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                    destroy !== void 0 && ((tag & Insertion) !== NoFlags$1 ? safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy) : (tag & Layout2) !== NoFlags$1 && (markComponentLayoutEffectUnmountStarted(deletedFiber), deletedFiber.mode & ProfileMode ? (startLayoutEffectTimer(), safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy), recordLayoutEffectDuration(deletedFiber)) : safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy), markComponentLayoutEffectUnmountStopped())), effect = effect.next;
                  } while (effect !== firstEffect);
                }
              }
            }
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
          case ClassComponent: {
            if (!offscreenSubtreeWasHidden) {
              safelyDetachRef(deletedFiber, nearestMountedAncestor);
              var instance = deletedFiber.stateNode;
              typeof instance.componentWillUnmount == "function" && safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
            }
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
          case ScopeComponent: {
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
          case OffscreenComponent: {
            if (
              // TODO: Remove this dead flag
              deletedFiber.mode & ConcurrentMode
            ) {
              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null, recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber), offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
            } else
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            break;
          }
          default: {
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
        }
      }
      function commitSuspenseCallback(finishedWork) {
        var newState = finishedWork.memoizedState;
      }
      function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState === null) {
          var current2 = finishedWork.alternate;
          if (current2 !== null) {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              var suspenseInstance = prevState.dehydrated;
              suspenseInstance !== null && commitHydratedSuspenseInstance(suspenseInstance);
            }
          }
        }
      }
      function attachSuspenseRetryListeners(finishedWork) {
        var wakeables = finishedWork.updateQueue;
        if (wakeables !== null) {
          finishedWork.updateQueue = null;
          var retryCache = finishedWork.stateNode;
          retryCache === null && (retryCache = finishedWork.stateNode = new PossiblyWeakSet()), wakeables.forEach(function(wakeable) {
            var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
            if (!retryCache.has(wakeable)) {
              if (retryCache.add(wakeable), isDevToolsPresent)
                if (inProgressLanes !== null && inProgressRoot !== null)
                  restorePendingUpdaters(inProgressRoot, inProgressLanes);
                else
                  throw Error("Expected finished root and lanes to be set. This is a bug in React.");
              wakeable.then(retry, retry);
            }
          });
        }
      }
      function commitMutationEffects(root2, finishedWork, committedLanes) {
        inProgressLanes = committedLanes, inProgressRoot = root2, setCurrentFiber(finishedWork), commitMutationEffectsOnFiber(finishedWork, root2), setCurrentFiber(finishedWork), inProgressLanes = null, inProgressRoot = null;
      }
      function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
        var deletions = parentFiber.deletions;
        if (deletions !== null)
          for (var i = 0; i < deletions.length; i++) {
            var childToDelete = deletions[i];
            try {
              commitDeletionEffects(root2, parentFiber, childToDelete);
            } catch (error2) {
              captureCommitPhaseError(childToDelete, parentFiber, error2);
            }
          }
        var prevDebugFiber = getCurrentFiber();
        if (parentFiber.subtreeFlags & MutationMask)
          for (var child = parentFiber.child; child !== null; )
            setCurrentFiber(child), commitMutationEffectsOnFiber(child, root2), child = child.sibling;
        setCurrentFiber(prevDebugFiber);
      }
      function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
        var current2 = finishedWork.alternate, flags = finishedWork.flags;
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent: {
            if (recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork), flags & Update) {
              try {
                commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return), commitHookEffectListMount(Insertion | HasEffect, finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              if (finishedWork.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer(), commitHookEffectListUnmount(Layout2 | HasEffect, finishedWork, finishedWork.return);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                recordLayoutEffectDuration(finishedWork);
              } else
                try {
                  commitHookEffectListUnmount(Layout2 | HasEffect, finishedWork, finishedWork.return);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
            }
            return;
          }
          case ClassComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork), flags & Ref && current2 !== null && safelyDetachRef(current2, current2.return);
            return;
          }
          case HostComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork), flags & Ref && current2 !== null && safelyDetachRef(current2, current2.return);
            {
              if (finishedWork.flags & ContentReset) {
                var instance = finishedWork.stateNode;
                try {
                  resetTextContent(instance);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
              if (flags & Update) {
                var _instance4 = finishedWork.stateNode;
                if (_instance4 != null) {
                  var newProps = finishedWork.memoizedProps, oldProps = current2 !== null ? current2.memoizedProps : newProps, type = finishedWork.type, updatePayload = finishedWork.updateQueue;
                  if (finishedWork.updateQueue = null, updatePayload !== null)
                    try {
                      commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                }
              }
            }
            return;
          }
          case HostText: {
            if (recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork), flags & Update) {
              if (finishedWork.stateNode === null)
                throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
              var textInstance = finishedWork.stateNode, newText = finishedWork.memoizedProps, oldText = current2 !== null ? current2.memoizedProps : newText;
              try {
                commitTextUpdate(textInstance, oldText, newText);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
            }
            return;
          }
          case HostRoot: {
            if (recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork), flags & Update && current2 !== null) {
              var prevRootState = current2.memoizedState;
              if (prevRootState.isDehydrated)
                try {
                  commitHydratedContainer(root2.containerInfo);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
            }
            return;
          }
          case HostPortal: {
            recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork);
            return;
          }
          case SuspenseComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork);
            var offscreenFiber = finishedWork.child;
            if (offscreenFiber.flags & Visibility) {
              var offscreenInstance = offscreenFiber.stateNode, newState = offscreenFiber.memoizedState, isHidden = newState !== null;
              if (offscreenInstance.isHidden = isHidden, isHidden) {
                var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                wasHidden || markCommitTimeOfFallback();
              }
            }
            if (flags & Update) {
              try {
                commitSuspenseCallback(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              attachSuspenseRetryListeners(finishedWork);
            }
            return;
          }
          case OffscreenComponent: {
            var _wasHidden = current2 !== null && current2.memoizedState !== null;
            if (
              // TODO: Remove this dead flag
              finishedWork.mode & ConcurrentMode
            ) {
              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden, recursivelyTraverseMutationEffects(root2, finishedWork), offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
            } else
              recursivelyTraverseMutationEffects(root2, finishedWork);
            if (commitReconciliationEffects(finishedWork), flags & Visibility) {
              var _offscreenInstance = finishedWork.stateNode, _newState = finishedWork.memoizedState, _isHidden = _newState !== null, offscreenBoundary = finishedWork;
              if (_offscreenInstance.isHidden = _isHidden, _isHidden && !_wasHidden && (offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                nextEffect = offscreenBoundary;
                for (var offscreenChild = offscreenBoundary.child; offscreenChild !== null; )
                  nextEffect = offscreenChild, disappearLayoutEffects_begin(offscreenChild), offscreenChild = offscreenChild.sibling;
              }
              hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
            }
            return;
          }
          case SuspenseListComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork), flags & Update && attachSuspenseRetryListeners(finishedWork);
            return;
          }
          case ScopeComponent:
            return;
          default: {
            recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork);
            return;
          }
        }
      }
      function commitReconciliationEffects(finishedWork) {
        var flags = finishedWork.flags;
        if (flags & Placement) {
          try {
            commitPlacement(finishedWork);
          } catch (error2) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error2);
          }
          finishedWork.flags &= ~Placement;
        }
        flags & Hydrating && (finishedWork.flags &= ~Hydrating);
      }
      function commitLayoutEffects(finishedWork, root2, committedLanes) {
        inProgressLanes = committedLanes, inProgressRoot = root2, nextEffect = finishedWork, commitLayoutEffects_begin(finishedWork, root2, committedLanes), inProgressLanes = null, inProgressRoot = null;
      }
      function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
        for (var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode; nextEffect !== null; ) {
          var fiber = nextEffect, firstChild = fiber.child;
          if (fiber.tag === OffscreenComponent && isModernRoot) {
            var isHidden = fiber.memoizedState !== null, newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
            if (newOffscreenSubtreeIsHidden) {
              commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              continue;
            } else {
              var current2 = fiber.alternate, wasHidden = current2 !== null && current2.memoizedState !== null, newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden, prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden, prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden, offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden, offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden && (nextEffect = fiber, reappearLayoutEffects_begin(fiber));
              for (var child = firstChild; child !== null; )
                nextEffect = child, commitLayoutEffects_begin(
                  child,
                  // New root; bubble back up to here and stop.
                  root2,
                  committedLanes
                ), child = child.sibling;
              nextEffect = fiber, offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden, offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden, commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              continue;
            }
          }
          (fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null ? (firstChild.return = fiber, nextEffect = firstChild) : commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
        }
      }
      function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect;
          if ((fiber.flags & LayoutMask) !== NoFlags) {
            var current2 = fiber.alternate;
            setCurrentFiber(fiber);
            try {
              commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
          }
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return, nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function disappearLayoutEffects_begin(subtreeRoot) {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect, firstChild = fiber.child;
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              if (fiber.mode & ProfileMode)
                try {
                  startLayoutEffectTimer(), commitHookEffectListUnmount(Layout2, fiber, fiber.return);
                } finally {
                  recordLayoutEffectDuration(fiber);
                }
              else
                commitHookEffectListUnmount(Layout2, fiber, fiber.return);
              break;
            }
            case ClassComponent: {
              safelyDetachRef(fiber, fiber.return);
              var instance = fiber.stateNode;
              typeof instance.componentWillUnmount == "function" && safelyCallComponentWillUnmount(fiber, fiber.return, instance);
              break;
            }
            case HostComponent: {
              safelyDetachRef(fiber, fiber.return);
              break;
            }
            case OffscreenComponent: {
              var isHidden = fiber.memoizedState !== null;
              if (isHidden) {
                disappearLayoutEffects_complete(subtreeRoot);
                continue;
              }
              break;
            }
          }
          firstChild !== null ? (firstChild.return = fiber, nextEffect = firstChild) : disappearLayoutEffects_complete(subtreeRoot);
        }
      }
      function disappearLayoutEffects_complete(subtreeRoot) {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect;
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return, nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function reappearLayoutEffects_begin(subtreeRoot) {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect, firstChild = fiber.child;
          if (fiber.tag === OffscreenComponent) {
            var isHidden = fiber.memoizedState !== null;
            if (isHidden) {
              reappearLayoutEffects_complete(subtreeRoot);
              continue;
            }
          }
          firstChild !== null ? (firstChild.return = fiber, nextEffect = firstChild) : reappearLayoutEffects_complete(subtreeRoot);
        }
      }
      function reappearLayoutEffects_complete(subtreeRoot) {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect;
          setCurrentFiber(fiber);
          try {
            reappearLayoutEffectsOnFiber(fiber);
          } catch (error2) {
            captureCommitPhaseError(fiber, fiber.return, error2);
          }
          if (resetCurrentFiber(), fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return, nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
        nextEffect = finishedWork, commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
      }
      function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect, firstChild = fiber.child;
          (fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null ? (firstChild.return = fiber, nextEffect = firstChild) : commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
        }
      }
      function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect;
          if ((fiber.flags & Passive) !== NoFlags) {
            setCurrentFiber(fiber);
            try {
              commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
          }
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return, nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (finishedWork.mode & ProfileMode) {
              startPassiveEffectTimer();
              try {
                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
              } finally {
                recordPassiveEffectDuration(finishedWork);
              }
            } else
              commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
            break;
          }
        }
      }
      function commitPassiveUnmountEffects(firstChild) {
        nextEffect = firstChild, commitPassiveUnmountEffects_begin();
      }
      function commitPassiveUnmountEffects_begin() {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect, child = fiber.child;
          if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
            var deletions = fiber.deletions;
            if (deletions !== null) {
              for (var i = 0; i < deletions.length; i++) {
                var fiberToDelete = deletions[i];
                nextEffect = fiberToDelete, commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
              }
              {
                var previousFiber = fiber.alternate;
                if (previousFiber !== null) {
                  var detachedChild = previousFiber.child;
                  if (detachedChild !== null) {
                    previousFiber.child = null;
                    do {
                      var detachedSibling = detachedChild.sibling;
                      detachedChild.sibling = null, detachedChild = detachedSibling;
                    } while (detachedChild !== null);
                  }
                }
              }
              nextEffect = fiber;
            }
          }
          (fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null ? (child.return = fiber, nextEffect = child) : commitPassiveUnmountEffects_complete();
        }
      }
      function commitPassiveUnmountEffects_complete() {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect;
          (fiber.flags & Passive) !== NoFlags && (setCurrentFiber(fiber), commitPassiveUnmountOnFiber(fiber), resetCurrentFiber());
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return, nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitPassiveUnmountOnFiber(finishedWork) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            finishedWork.mode & ProfileMode ? (startPassiveEffectTimer(), commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return), recordPassiveEffectDuration(finishedWork)) : commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
            break;
          }
        }
      }
      function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect;
          setCurrentFiber(fiber), commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor), resetCurrentFiber();
          var child = fiber.child;
          child !== null ? (child.return = fiber, nextEffect = child) : commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
        }
      }
      function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect, sibling = fiber.sibling, returnFiber = fiber.return;
          if (detachFiberAfterEffects(fiber), fiber === deletedSubtreeRoot) {
            nextEffect = null;
            return;
          }
          if (sibling !== null) {
            sibling.return = returnFiber, nextEffect = sibling;
            return;
          }
          nextEffect = returnFiber;
        }
      }
      function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
        switch (current2.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            current2.mode & ProfileMode ? (startPassiveEffectTimer(), commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor), recordPassiveEffectDuration(current2)) : commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
            break;
          }
        }
      }
      function invokeLayoutEffectMountInDEV(fiber) {
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            try {
              commitHookEffectListMount(Layout2 | HasEffect, fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            break;
          }
          case ClassComponent: {
            var instance = fiber.stateNode;
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            break;
          }
        }
      }
      function invokePassiveEffectMountInDEV(fiber) {
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            try {
              commitHookEffectListMount(Passive$1 | HasEffect, fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            break;
          }
        }
      }
      function invokeLayoutEffectUnmountInDEV(fiber) {
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            try {
              commitHookEffectListUnmount(Layout2 | HasEffect, fiber, fiber.return);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            break;
          }
          case ClassComponent: {
            var instance = fiber.stateNode;
            typeof instance.componentWillUnmount == "function" && safelyCallComponentWillUnmount(fiber, fiber.return, instance);
            break;
          }
        }
      }
      function invokePassiveEffectUnmountInDEV(fiber) {
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent:
            try {
              commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
        }
      }
      var COMPONENT_TYPE = 0, HAS_PSEUDO_CLASS_TYPE = 1, ROLE_TYPE = 2, TEST_NAME_TYPE = 3, TEXT_TYPE = 4;
      if (typeof Symbol == "function" && Symbol.for) {
        var symbolFor = Symbol.for;
        COMPONENT_TYPE = symbolFor("selector.component"), HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class"), ROLE_TYPE = symbolFor("selector.role"), TEST_NAME_TYPE = symbolFor("selector.test_id"), TEXT_TYPE = symbolFor("selector.text");
      }
      var commitHooks = [];
      function onCommitRoot$1() {
        commitHooks.forEach(function(commitHook) {
          return commitHook();
        });
      }
      var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
      function isLegacyActEnvironment(fiber) {
        {
          var isReactActEnvironmentGlobal = (
            // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
            typeof IS_REACT_ACT_ENVIRONMENT < "u" ? IS_REACT_ACT_ENVIRONMENT : void 0
          ), jestIsDefined = typeof jest < "u";
          return jestIsDefined && isReactActEnvironmentGlobal !== !1;
        }
      }
      function isConcurrentActEnvironment() {
        {
          var isReactActEnvironmentGlobal = (
            // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
            typeof IS_REACT_ACT_ENVIRONMENT < "u" ? IS_REACT_ACT_ENVIRONMENT : void 0
          );
          return !isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null && error("The current testing environment is not configured to support act(...)"), isReactActEnvironmentGlobal;
        }
      }
      var ceil = Math.ceil, ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue, NoContext = (
        /*             */
        0
      ), BatchedContext = (
        /*               */
        1
      ), RenderContext = (
        /*                */
        2
      ), CommitContext = (
        /*                */
        4
      ), RootInProgress = 0, RootFatalErrored = 1, RootErrored = 2, RootSuspended = 3, RootSuspendedWithDelay = 4, RootCompleted = 5, RootDidNotComplete = 6, executionContext = NoContext, workInProgressRoot = null, workInProgress = null, workInProgressRootRenderLanes = NoLanes, subtreeRenderLanes = NoLanes, subtreeRenderLanesCursor = createCursor(NoLanes), workInProgressRootExitStatus = RootInProgress, workInProgressRootFatalError = null, workInProgressRootIncludedLanes = NoLanes, workInProgressRootSkippedLanes = NoLanes, workInProgressRootInterleavedUpdatedLanes = NoLanes, workInProgressRootPingedLanes = NoLanes, workInProgressRootConcurrentErrors = null, workInProgressRootRecoverableErrors = null, globalMostRecentFallbackTime = 0, FALLBACK_THROTTLE_MS = 500, workInProgressRootRenderTargetTime = 1 / 0, RENDER_TIMEOUT_MS = 500, workInProgressTransitions = null;
      function resetRenderTimer() {
        workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
      }
      function getRenderTargetTime() {
        return workInProgressRootRenderTargetTime;
      }
      var hasUncaughtError = !1, firstUncaughtError = null, legacyErrorBoundariesThatAlreadyFailed = null, rootDoesHavePassiveEffects = !1, rootWithPendingPassiveEffects = null, pendingPassiveEffectsLanes = NoLanes, pendingPassiveProfilerEffects = [], pendingPassiveTransitions = null, NESTED_UPDATE_LIMIT = 50, nestedUpdateCount = 0, rootWithNestedUpdates = null, isFlushingPassiveEffects = !1, didScheduleUpdateDuringPassiveEffects = !1, NESTED_PASSIVE_UPDATE_LIMIT = 50, nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null, currentEventTime = NoTimestamp, currentEventTransitionLane = NoLanes, isRunningInsertionEffect = !1;
      function getWorkInProgressRoot() {
        return workInProgressRoot;
      }
      function requestEventTime() {
        return (executionContext & (RenderContext | CommitContext)) !== NoContext ? now() : (currentEventTime !== NoTimestamp || (currentEventTime = now()), currentEventTime);
      }
      function requestUpdateLane(fiber) {
        var mode2 = fiber.mode;
        if ((mode2 & ConcurrentMode) === NoMode)
          return SyncLane;
        if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes)
          return pickArbitraryLane(workInProgressRootRenderLanes);
        var isTransition = requestCurrentTransition() !== NoTransition;
        if (isTransition) {
          if (ReactCurrentBatchConfig$3.transition !== null) {
            var transition = ReactCurrentBatchConfig$3.transition;
            transition._updatedFibers || (transition._updatedFibers = /* @__PURE__ */ new Set()), transition._updatedFibers.add(fiber);
          }
          return currentEventTransitionLane === NoLane && (currentEventTransitionLane = claimNextTransitionLane()), currentEventTransitionLane;
        }
        var updateLane = getCurrentUpdatePriority();
        if (updateLane !== NoLane)
          return updateLane;
        var eventLane = getCurrentEventPriority();
        return eventLane;
      }
      function requestRetryLane(fiber) {
        var mode2 = fiber.mode;
        return (mode2 & ConcurrentMode) === NoMode ? SyncLane : claimNextRetryLane();
      }
      function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
        checkForNestedUpdates(), isRunningInsertionEffect && error("useInsertionEffect must not schedule updates."), isFlushingPassiveEffects && (didScheduleUpdateDuringPassiveEffects = !0), markRootUpdated(root2, lane, eventTime), (executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot ? warnAboutRenderPhaseUpdatesInDEV(fiber) : (isDevToolsPresent && addFiberToLanesMap(root2, fiber, lane), warnIfUpdatesNotWrappedWithActDEV(fiber), root2 === workInProgressRoot && ((executionContext & RenderContext) === NoContext && (workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane)), workInProgressRootExitStatus === RootSuspendedWithDelay && markRootSuspended$1(root2, workInProgressRootRenderLanes)), ensureRootIsScheduled(root2, eventTime), lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
        !ReactCurrentActQueue$1.isBatchingLegacy && (resetRenderTimer(), flushSyncCallbacksOnlyInLegacyMode()));
      }
      function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
        var current2 = root2.current;
        current2.lanes = lane, markRootUpdated(root2, lane, eventTime), ensureRootIsScheduled(root2, eventTime);
      }
      function isUnsafeClassRenderPhaseUpdate(fiber) {
        return (
          // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
          // decided not to enable it.
          (executionContext & RenderContext) !== NoContext
        );
      }
      function ensureRootIsScheduled(root2, currentTime) {
        var existingCallbackNode = root2.callbackNode;
        markStarvedLanesAsExpired(root2, currentTime);
        var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (nextLanes === NoLanes) {
          existingCallbackNode !== null && cancelCallback$1(existingCallbackNode), root2.callbackNode = null, root2.callbackPriority = NoLane;
          return;
        }
        var newCallbackPriority = getHighestPriorityLane(nextLanes), existingCallbackPriority = root2.callbackPriority;
        if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
        // Scheduler task, rather than an `act` task, cancel it and re-scheduled
        // on the `act` queue.
        !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
          existingCallbackNode == null && existingCallbackPriority !== SyncLane && error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
          return;
        }
        existingCallbackNode != null && cancelCallback$1(existingCallbackNode);
        var newCallbackNode;
        if (newCallbackPriority === SyncLane)
          root2.tag === LegacyRoot ? (ReactCurrentActQueue$1.isBatchingLegacy !== null && (ReactCurrentActQueue$1.didScheduleLegacyUpdate = !0), scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2))) : scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2)), ReactCurrentActQueue$1.current !== null ? ReactCurrentActQueue$1.current.push(flushSyncCallbacks) : scheduleMicrotask(function() {
            (executionContext & (RenderContext | CommitContext)) === NoContext && flushSyncCallbacks();
          }), newCallbackNode = null;
        else {
          var schedulerPriorityLevel;
          switch (lanesToEventPriority(nextLanes)) {
            case DiscreteEventPriority:
              schedulerPriorityLevel = ImmediatePriority;
              break;
            case ContinuousEventPriority:
              schedulerPriorityLevel = UserBlockingPriority;
              break;
            case DefaultEventPriority:
              schedulerPriorityLevel = NormalPriority;
              break;
            case IdleEventPriority:
              schedulerPriorityLevel = IdlePriority;
              break;
            default:
              schedulerPriorityLevel = NormalPriority;
              break;
          }
          newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
        }
        root2.callbackPriority = newCallbackPriority, root2.callbackNode = newCallbackNode;
      }
      function performConcurrentWorkOnRoot(root2, didTimeout) {
        if (resetNestedUpdateFlag(), currentEventTime = NoTimestamp, currentEventTransitionLane = NoLanes, (executionContext & (RenderContext | CommitContext)) !== NoContext)
          throw new Error("Should not already be working.");
        var originalCallbackNode = root2.callbackNode, didFlushPassiveEffects = flushPassiveEffects();
        if (didFlushPassiveEffects && root2.callbackNode !== originalCallbackNode)
          return null;
        var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (lanes === NoLanes)
          return null;
        var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout, exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
        if (exitStatus !== RootInProgress) {
          if (exitStatus === RootErrored) {
            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
            errorRetryLanes !== NoLanes && (lanes = errorRetryLanes, exitStatus = recoverFromConcurrentError(root2, errorRetryLanes));
          }
          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            throw prepareFreshStack(root2, NoLanes), markRootSuspended$1(root2, lanes), ensureRootIsScheduled(root2, now()), fatalError;
          }
          if (exitStatus === RootDidNotComplete)
            markRootSuspended$1(root2, lanes);
          else {
            var renderWasConcurrent = !includesBlockingLane(root2, lanes), finishedWork = root2.current.alternate;
            if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
              if (exitStatus = renderRootSync(root2, lanes), exitStatus === RootErrored) {
                var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                _errorRetryLanes !== NoLanes && (lanes = _errorRetryLanes, exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes));
              }
              if (exitStatus === RootFatalErrored) {
                var _fatalError = workInProgressRootFatalError;
                throw prepareFreshStack(root2, NoLanes), markRootSuspended$1(root2, lanes), ensureRootIsScheduled(root2, now()), _fatalError;
              }
            }
            root2.finishedWork = finishedWork, root2.finishedLanes = lanes, finishConcurrentRender(root2, exitStatus, lanes);
          }
        }
        return ensureRootIsScheduled(root2, now()), root2.callbackNode === originalCallbackNode ? performConcurrentWorkOnRoot.bind(null, root2) : null;
      }
      function recoverFromConcurrentError(root2, errorRetryLanes) {
        var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
        if (isRootDehydrated(root2)) {
          var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
          rootWorkInProgress.flags |= ForceClientRender, errorHydratingContainer(root2.containerInfo);
        }
        var exitStatus = renderRootSync(root2, errorRetryLanes);
        if (exitStatus !== RootErrored) {
          var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
          workInProgressRootRecoverableErrors = errorsFromFirstAttempt, errorsFromSecondAttempt !== null && queueRecoverableErrors(errorsFromSecondAttempt);
        }
        return exitStatus;
      }
      function queueRecoverableErrors(errors) {
        workInProgressRootRecoverableErrors === null ? workInProgressRootRecoverableErrors = errors : workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
      }
      function finishConcurrentRender(root2, exitStatus, lanes) {
        switch (exitStatus) {
          case RootInProgress:
          case RootFatalErrored:
            throw new Error("Root did not complete. This is a bug in React.");
          case RootErrored: {
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          case RootSuspended: {
            if (markRootSuspended$1(root2, lanes), includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
            !shouldForceFlushFallbacksInDEV()) {
              var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
              if (msUntilTimeout > 10) {
                var nextLanes = getNextLanes(root2, NoLanes);
                if (nextLanes !== NoLanes)
                  break;
                var suspendedLanes = root2.suspendedLanes;
                if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                  var eventTime = requestEventTime();
                  markRootPinged(root2, suspendedLanes);
                  break;
                }
                root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                break;
              }
            }
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          case RootSuspendedWithDelay: {
            if (markRootSuspended$1(root2, lanes), includesOnlyTransitions(lanes))
              break;
            if (!shouldForceFlushFallbacksInDEV()) {
              var mostRecentEventTime = getMostRecentEventTime(root2, lanes), eventTimeMs = mostRecentEventTime, timeElapsedMs = now() - eventTimeMs, _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
              if (_msUntilTimeout > 10) {
                root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                break;
              }
            }
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          case RootCompleted: {
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          default:
            throw new Error("Unknown root exit status.");
        }
      }
      function isRenderConsistentWithExternalStores(finishedWork) {
        for (var node = finishedWork; ; ) {
          if (node.flags & StoreConsistency) {
            var updateQueue = node.updateQueue;
            if (updateQueue !== null) {
              var checks = updateQueue.stores;
              if (checks !== null)
                for (var i = 0; i < checks.length; i++) {
                  var check = checks[i], getSnapshot = check.getSnapshot, renderedValue = check.value;
                  try {
                    if (!objectIs(getSnapshot(), renderedValue))
                      return !1;
                  } catch {
                    return !1;
                  }
                }
            }
          }
          var child = node.child;
          if (node.subtreeFlags & StoreConsistency && child !== null) {
            child.return = node, node = child;
            continue;
          }
          if (node === finishedWork)
            return !0;
          for (; node.sibling === null; ) {
            if (node.return === null || node.return === finishedWork)
              return !0;
            node = node.return;
          }
          node.sibling.return = node.return, node = node.sibling;
        }
        return !0;
      }
      function markRootSuspended$1(root2, suspendedLanes) {
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes), suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes), markRootSuspended(root2, suspendedLanes);
      }
      function performSyncWorkOnRoot(root2) {
        if (syncNestedUpdateFlag(), (executionContext & (RenderContext | CommitContext)) !== NoContext)
          throw new Error("Should not already be working.");
        flushPassiveEffects();
        var lanes = getNextLanes(root2, NoLanes);
        if (!includesSomeLane(lanes, SyncLane))
          return ensureRootIsScheduled(root2, now()), null;
        var exitStatus = renderRootSync(root2, lanes);
        if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
          var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
          errorRetryLanes !== NoLanes && (lanes = errorRetryLanes, exitStatus = recoverFromConcurrentError(root2, errorRetryLanes));
        }
        if (exitStatus === RootFatalErrored) {
          var fatalError = workInProgressRootFatalError;
          throw prepareFreshStack(root2, NoLanes), markRootSuspended$1(root2, lanes), ensureRootIsScheduled(root2, now()), fatalError;
        }
        if (exitStatus === RootDidNotComplete)
          throw new Error("Root did not complete. This is a bug in React.");
        var finishedWork = root2.current.alternate;
        return root2.finishedWork = finishedWork, root2.finishedLanes = lanes, commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions), ensureRootIsScheduled(root2, now()), null;
      }
      function flushRoot(root2, lanes) {
        lanes !== NoLanes && (markRootEntangled(root2, mergeLanes(lanes, SyncLane)), ensureRootIsScheduled(root2, now()), (executionContext & (RenderContext | CommitContext)) === NoContext && (resetRenderTimer(), flushSyncCallbacks()));
      }
      function batchedUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        try {
          return fn(a);
        } finally {
          executionContext = prevExecutionContext, executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
          !ReactCurrentActQueue$1.isBatchingLegacy && (resetRenderTimer(), flushSyncCallbacksOnlyInLegacyMode());
        }
      }
      function discreteUpdates(fn, a, b, c, d) {
        var previousPriority = getCurrentUpdatePriority(), prevTransition = ReactCurrentBatchConfig$3.transition;
        try {
          return ReactCurrentBatchConfig$3.transition = null, setCurrentUpdatePriority(DiscreteEventPriority), fn(a, b, c, d);
        } finally {
          setCurrentUpdatePriority(previousPriority), ReactCurrentBatchConfig$3.transition = prevTransition, executionContext === NoContext && resetRenderTimer();
        }
      }
      function flushSync(fn) {
        rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext && flushPassiveEffects();
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        var prevTransition = ReactCurrentBatchConfig$3.transition, previousPriority = getCurrentUpdatePriority();
        try {
          return ReactCurrentBatchConfig$3.transition = null, setCurrentUpdatePriority(DiscreteEventPriority), fn ? fn() : void 0;
        } finally {
          setCurrentUpdatePriority(previousPriority), ReactCurrentBatchConfig$3.transition = prevTransition, executionContext = prevExecutionContext, (executionContext & (RenderContext | CommitContext)) === NoContext && flushSyncCallbacks();
        }
      }
      function isAlreadyRendering() {
        return (executionContext & (RenderContext | CommitContext)) !== NoContext;
      }
      function pushRenderLanes(fiber, lanes) {
        push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber), subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes), workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
      }
      function popRenderLanes(fiber) {
        subtreeRenderLanes = subtreeRenderLanesCursor.current, pop(subtreeRenderLanesCursor, fiber);
      }
      function prepareFreshStack(root2, lanes) {
        root2.finishedWork = null, root2.finishedLanes = NoLanes;
        var timeoutHandle = root2.timeoutHandle;
        if (timeoutHandle !== noTimeout && (root2.timeoutHandle = noTimeout, cancelTimeout(timeoutHandle)), workInProgress !== null)
          for (var interruptedWork = workInProgress.return; interruptedWork !== null; ) {
            var current2 = interruptedWork.alternate;
            unwindInterruptedWork(current2, interruptedWork), interruptedWork = interruptedWork.return;
          }
        workInProgressRoot = root2;
        var rootWorkInProgress = createWorkInProgress(root2.current, null);
        return workInProgress = rootWorkInProgress, workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes, workInProgressRootExitStatus = RootInProgress, workInProgressRootFatalError = null, workInProgressRootSkippedLanes = NoLanes, workInProgressRootInterleavedUpdatedLanes = NoLanes, workInProgressRootPingedLanes = NoLanes, workInProgressRootConcurrentErrors = null, workInProgressRootRecoverableErrors = null, finishQueueingConcurrentUpdates(), ReactStrictModeWarnings.discardPendingWarnings(), rootWorkInProgress;
      }
      function handleError(root2, thrownValue) {
        do {
          var erroredWork = workInProgress;
          try {
            if (resetContextDependencies(), resetHooksAfterThrow(), resetCurrentFiber(), ReactCurrentOwner$2.current = null, erroredWork === null || erroredWork.return === null) {
              workInProgressRootExitStatus = RootFatalErrored, workInProgressRootFatalError = thrownValue, workInProgress = null;
              return;
            }
            if (enableProfilerTimer && erroredWork.mode & ProfileMode && stopProfilerTimerIfRunningAndRecordDelta(erroredWork, !0), enableSchedulingProfiler)
              if (markComponentRenderStopped(), thrownValue !== null && typeof thrownValue == "object" && typeof thrownValue.then == "function") {
                var wakeable = thrownValue;
                markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
              } else
                markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
            throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes), completeUnitOfWork(erroredWork);
          } catch (yetAnotherThrownValue) {
            thrownValue = yetAnotherThrownValue, workInProgress === erroredWork && erroredWork !== null ? (erroredWork = erroredWork.return, workInProgress = erroredWork) : erroredWork = workInProgress;
            continue;
          }
          return;
        } while (!0);
      }
      function pushDispatcher() {
        var prevDispatcher = ReactCurrentDispatcher$2.current;
        return ReactCurrentDispatcher$2.current = ContextOnlyDispatcher, prevDispatcher === null ? ContextOnlyDispatcher : prevDispatcher;
      }
      function popDispatcher(prevDispatcher) {
        ReactCurrentDispatcher$2.current = prevDispatcher;
      }
      function markCommitTimeOfFallback() {
        globalMostRecentFallbackTime = now();
      }
      function markSkippedUpdateLanes(lane) {
        workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
      }
      function renderDidSuspend() {
        workInProgressRootExitStatus === RootInProgress && (workInProgressRootExitStatus = RootSuspended);
      }
      function renderDidSuspendDelayIfPossible() {
        (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) && (workInProgressRootExitStatus = RootSuspendedWithDelay), workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes)) && markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
      }
      function renderDidError(error2) {
        workInProgressRootExitStatus !== RootSuspendedWithDelay && (workInProgressRootExitStatus = RootErrored), workInProgressRootConcurrentErrors === null ? workInProgressRootConcurrentErrors = [error2] : workInProgressRootConcurrentErrors.push(error2);
      }
      function renderHasNotSuspendedYet() {
        return workInProgressRootExitStatus === RootInProgress;
      }
      function renderRootSync(root2, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();
        if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
          if (isDevToolsPresent) {
            var memoizedUpdaters = root2.memoizedUpdaters;
            memoizedUpdaters.size > 0 && (restorePendingUpdaters(root2, workInProgressRootRenderLanes), memoizedUpdaters.clear()), movePendingFibersToMemoized(root2, lanes);
          }
          workInProgressTransitions = getTransitionsForLanes(), prepareFreshStack(root2, lanes);
        }
        markRenderStarted(lanes);
        do
          try {
            workLoopSync();
            break;
          } catch (thrownValue) {
            handleError(root2, thrownValue);
          }
        while (!0);
        if (resetContextDependencies(), executionContext = prevExecutionContext, popDispatcher(prevDispatcher), workInProgress !== null)
          throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
        return markRenderStopped(), workInProgressRoot = null, workInProgressRootRenderLanes = NoLanes, workInProgressRootExitStatus;
      }
      function workLoopSync() {
        for (; workInProgress !== null; )
          performUnitOfWork(workInProgress);
      }
      function renderRootConcurrent(root2, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();
        if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
          if (isDevToolsPresent) {
            var memoizedUpdaters = root2.memoizedUpdaters;
            memoizedUpdaters.size > 0 && (restorePendingUpdaters(root2, workInProgressRootRenderLanes), memoizedUpdaters.clear()), movePendingFibersToMemoized(root2, lanes);
          }
          workInProgressTransitions = getTransitionsForLanes(), resetRenderTimer(), prepareFreshStack(root2, lanes);
        }
        markRenderStarted(lanes);
        do
          try {
            workLoopConcurrent();
            break;
          } catch (thrownValue) {
            handleError(root2, thrownValue);
          }
        while (!0);
        return resetContextDependencies(), popDispatcher(prevDispatcher), executionContext = prevExecutionContext, workInProgress !== null ? (markRenderYielded(), RootInProgress) : (markRenderStopped(), workInProgressRoot = null, workInProgressRootRenderLanes = NoLanes, workInProgressRootExitStatus);
      }
      function workLoopConcurrent() {
        for (; workInProgress !== null && !shouldYield(); )
          performUnitOfWork(workInProgress);
      }
      function performUnitOfWork(unitOfWork) {
        var current2 = unitOfWork.alternate;
        setCurrentFiber(unitOfWork);
        var next;
        (unitOfWork.mode & ProfileMode) !== NoMode ? (startProfilerTimer(unitOfWork), next = beginWork$1(current2, unitOfWork, subtreeRenderLanes), stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, !0)) : next = beginWork$1(current2, unitOfWork, subtreeRenderLanes), resetCurrentFiber(), unitOfWork.memoizedProps = unitOfWork.pendingProps, next === null ? completeUnitOfWork(unitOfWork) : workInProgress = next, ReactCurrentOwner$2.current = null;
      }
      function completeUnitOfWork(unitOfWork) {
        var completedWork = unitOfWork;
        do {
          var current2 = completedWork.alternate, returnFiber = completedWork.return;
          if ((completedWork.flags & Incomplete) === NoFlags) {
            setCurrentFiber(completedWork);
            var next = void 0;
            if ((completedWork.mode & ProfileMode) === NoMode ? next = completeWork(current2, completedWork, subtreeRenderLanes) : (startProfilerTimer(completedWork), next = completeWork(current2, completedWork, subtreeRenderLanes), stopProfilerTimerIfRunningAndRecordDelta(completedWork, !1)), resetCurrentFiber(), next !== null) {
              workInProgress = next;
              return;
            }
          } else {
            var _next = unwindWork(current2, completedWork);
            if (_next !== null) {
              _next.flags &= HostEffectMask, workInProgress = _next;
              return;
            }
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              stopProfilerTimerIfRunningAndRecordDelta(completedWork, !1);
              for (var actualDuration = completedWork.actualDuration, child = completedWork.child; child !== null; )
                actualDuration += child.actualDuration, child = child.sibling;
              completedWork.actualDuration = actualDuration;
            }
            if (returnFiber !== null)
              returnFiber.flags |= Incomplete, returnFiber.subtreeFlags = NoFlags, returnFiber.deletions = null;
            else {
              workInProgressRootExitStatus = RootDidNotComplete, workInProgress = null;
              return;
            }
          }
          var siblingFiber = completedWork.sibling;
          if (siblingFiber !== null) {
            workInProgress = siblingFiber;
            return;
          }
          completedWork = returnFiber, workInProgress = completedWork;
        } while (completedWork !== null);
        workInProgressRootExitStatus === RootInProgress && (workInProgressRootExitStatus = RootCompleted);
      }
      function commitRoot(root2, recoverableErrors, transitions) {
        var previousUpdateLanePriority = getCurrentUpdatePriority(), prevTransition = ReactCurrentBatchConfig$3.transition;
        try {
          ReactCurrentBatchConfig$3.transition = null, setCurrentUpdatePriority(DiscreteEventPriority), commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
        } finally {
          ReactCurrentBatchConfig$3.transition = prevTransition, setCurrentUpdatePriority(previousUpdateLanePriority);
        }
        return null;
      }
      function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
        do
          flushPassiveEffects();
        while (rootWithPendingPassiveEffects !== null);
        if (flushRenderPhaseStrictModeWarningsInDEV(), (executionContext & (RenderContext | CommitContext)) !== NoContext)
          throw new Error("Should not already be working.");
        var finishedWork = root2.finishedWork, lanes = root2.finishedLanes;
        if (markCommitStarted(lanes), finishedWork === null)
          return markCommitStopped(), null;
        if (lanes === NoLanes && error("root.finishedLanes should not be empty during a commit. This is a bug in React."), root2.finishedWork = null, root2.finishedLanes = NoLanes, finishedWork === root2.current)
          throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
        root2.callbackNode = null, root2.callbackPriority = NoLane;
        var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
        markRootFinished(root2, remainingLanes), root2 === workInProgressRoot && (workInProgressRoot = null, workInProgress = null, workInProgressRootRenderLanes = NoLanes), ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) && (rootDoesHavePassiveEffects || (rootDoesHavePassiveEffects = !0, pendingPassiveTransitions = transitions, scheduleCallback$1(NormalPriority, function() {
          return flushPassiveEffects(), null;
        })));
        var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags, rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
        if (subtreeHasEffects || rootHasEffect) {
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          ReactCurrentBatchConfig$3.transition = null;
          var previousPriority = getCurrentUpdatePriority();
          setCurrentUpdatePriority(DiscreteEventPriority);
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext, ReactCurrentOwner$2.current = null;
          var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
          recordCommitTime(), commitMutationEffects(root2, finishedWork, lanes), resetAfterCommit(root2.containerInfo), root2.current = finishedWork, markLayoutEffectsStarted(lanes), commitLayoutEffects(finishedWork, root2, lanes), markLayoutEffectsStopped(), requestPaint(), executionContext = prevExecutionContext, setCurrentUpdatePriority(previousPriority), ReactCurrentBatchConfig$3.transition = prevTransition;
        } else
          root2.current = finishedWork, recordCommitTime();
        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
        if (rootDoesHavePassiveEffects ? (rootDoesHavePassiveEffects = !1, rootWithPendingPassiveEffects = root2, pendingPassiveEffectsLanes = lanes) : (nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null), remainingLanes = root2.pendingLanes, remainingLanes === NoLanes && (legacyErrorBoundariesThatAlreadyFailed = null), rootDidHavePassiveEffects || commitDoubleInvokeEffectsInDEV(root2.current, !1), onCommitRoot(finishedWork.stateNode, renderPriorityLevel), isDevToolsPresent && root2.memoizedUpdaters.clear(), onCommitRoot$1(), ensureRootIsScheduled(root2, now()), recoverableErrors !== null)
          for (var onRecoverableError = root2.onRecoverableError, i = 0; i < recoverableErrors.length; i++) {
            var recoverableError = recoverableErrors[i], componentStack = recoverableError.stack, digest = recoverableError.digest;
            onRecoverableError(recoverableError.value, {
              componentStack,
              digest
            });
          }
        if (hasUncaughtError) {
          hasUncaughtError = !1;
          var error$1 = firstUncaughtError;
          throw firstUncaughtError = null, error$1;
        }
        return includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot && flushPassiveEffects(), remainingLanes = root2.pendingLanes, includesSomeLane(remainingLanes, SyncLane) ? (markNestedUpdateScheduled(), root2 === rootWithNestedUpdates ? nestedUpdateCount++ : (nestedUpdateCount = 0, rootWithNestedUpdates = root2)) : nestedUpdateCount = 0, flushSyncCallbacks(), markCommitStopped(), null;
      }
      function flushPassiveEffects() {
        if (rootWithPendingPassiveEffects !== null) {
          var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes), priority = lowerEventPriority(DefaultEventPriority, renderPriority), prevTransition = ReactCurrentBatchConfig$3.transition, previousPriority = getCurrentUpdatePriority();
          try {
            return ReactCurrentBatchConfig$3.transition = null, setCurrentUpdatePriority(priority), flushPassiveEffectsImpl();
          } finally {
            setCurrentUpdatePriority(previousPriority), ReactCurrentBatchConfig$3.transition = prevTransition;
          }
        }
        return !1;
      }
      function enqueuePendingPassiveProfilerEffect(fiber) {
        pendingPassiveProfilerEffects.push(fiber), rootDoesHavePassiveEffects || (rootDoesHavePassiveEffects = !0, scheduleCallback$1(NormalPriority, function() {
          return flushPassiveEffects(), null;
        }));
      }
      function flushPassiveEffectsImpl() {
        if (rootWithPendingPassiveEffects === null)
          return !1;
        var transitions = pendingPassiveTransitions;
        pendingPassiveTransitions = null;
        var root2 = rootWithPendingPassiveEffects, lanes = pendingPassiveEffectsLanes;
        if (rootWithPendingPassiveEffects = null, pendingPassiveEffectsLanes = NoLanes, (executionContext & (RenderContext | CommitContext)) !== NoContext)
          throw new Error("Cannot flush passive effects while already rendering.");
        isFlushingPassiveEffects = !0, didScheduleUpdateDuringPassiveEffects = !1, markPassiveEffectsStarted(lanes);
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext, commitPassiveUnmountEffects(root2.current), commitPassiveMountEffects(root2, root2.current, lanes, transitions);
        {
          var profilerEffects = pendingPassiveProfilerEffects;
          pendingPassiveProfilerEffects = [];
          for (var i = 0; i < profilerEffects.length; i++) {
            var _fiber = profilerEffects[i];
            commitPassiveEffectDurations(root2, _fiber);
          }
        }
        markPassiveEffectsStopped(), commitDoubleInvokeEffectsInDEV(root2.current, !0), executionContext = prevExecutionContext, flushSyncCallbacks(), didScheduleUpdateDuringPassiveEffects ? root2 === rootWithPassiveNestedUpdates ? nestedPassiveUpdateCount++ : (nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = root2) : nestedPassiveUpdateCount = 0, isFlushingPassiveEffects = !1, didScheduleUpdateDuringPassiveEffects = !1, onPostCommitRoot(root2);
        {
          var stateNode = root2.current.stateNode;
          stateNode.effectDuration = 0, stateNode.passiveEffectDuration = 0;
        }
        return !0;
      }
      function isAlreadyFailedLegacyErrorBoundary(instance) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
      }
      function markLegacyErrorBoundaryAsFailed(instance) {
        legacyErrorBoundariesThatAlreadyFailed === null ? legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]) : legacyErrorBoundariesThatAlreadyFailed.add(instance);
      }
      function prepareToThrowUncaughtError(error2) {
        hasUncaughtError || (hasUncaughtError = !0, firstUncaughtError = error2);
      }
      var onUncaughtError = prepareToThrowUncaughtError;
      function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
        var errorInfo = createCapturedValueAtFiber(error2, sourceFiber), update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane), root2 = enqueueUpdate(rootFiber, update, SyncLane), eventTime = requestEventTime();
        root2 !== null && (markRootUpdated(root2, SyncLane, eventTime), ensureRootIsScheduled(root2, eventTime));
      }
      function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
        if (reportUncaughtErrorInDEV(error$1), setIsRunningInsertionEffect(!1), sourceFiber.tag === HostRoot) {
          captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
          return;
        }
        var fiber = null;
        for (fiber = nearestMountedAncestor; fiber !== null; ) {
          if (fiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
            return;
          } else if (fiber.tag === ClassComponent) {
            var ctor = fiber.type, instance = fiber.stateNode;
            if (typeof ctor.getDerivedStateFromError == "function" || typeof instance.componentDidCatch == "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
              var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber), update = createClassErrorUpdate(fiber, errorInfo, SyncLane), root2 = enqueueUpdate(fiber, update, SyncLane), eventTime = requestEventTime();
              root2 !== null && (markRootUpdated(root2, SyncLane, eventTime), ensureRootIsScheduled(root2, eventTime));
              return;
            }
          }
          fiber = fiber.return;
        }
        error(`Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.

Error message:

%s`, error$1);
      }
      function pingSuspendedRoot(root2, wakeable, pingedLanes) {
        var pingCache = root2.pingCache;
        pingCache !== null && pingCache.delete(wakeable);
        var eventTime = requestEventTime();
        markRootPinged(root2, pingedLanes), warnIfSuspenseResolutionNotWrappedWithActDEV(root2), workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes) && (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS ? prepareFreshStack(root2, NoLanes) : workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes)), ensureRootIsScheduled(root2, eventTime);
      }
      function retryTimedOutBoundary(boundaryFiber, retryLane) {
        retryLane === NoLane && (retryLane = requestRetryLane(boundaryFiber));
        var eventTime = requestEventTime(), root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
        root2 !== null && (markRootUpdated(root2, retryLane, eventTime), ensureRootIsScheduled(root2, eventTime));
      }
      function retryDehydratedSuspenseBoundary(boundaryFiber) {
        var suspenseState = boundaryFiber.memoizedState, retryLane = NoLane;
        suspenseState !== null && (retryLane = suspenseState.retryLane), retryTimedOutBoundary(boundaryFiber, retryLane);
      }
      function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = NoLane, retryCache;
        switch (boundaryFiber.tag) {
          case SuspenseComponent:
            retryCache = boundaryFiber.stateNode;
            var suspenseState = boundaryFiber.memoizedState;
            suspenseState !== null && (retryLane = suspenseState.retryLane);
            break;
          case SuspenseListComponent:
            retryCache = boundaryFiber.stateNode;
            break;
          default:
            throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
        }
        retryCache !== null && retryCache.delete(wakeable), retryTimedOutBoundary(boundaryFiber, retryLane);
      }
      function jnd(timeElapsed) {
        return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
      }
      function checkForNestedUpdates() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT)
          throw nestedUpdateCount = 0, rootWithNestedUpdates = null, new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
        nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT && (nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null, error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render."));
      }
      function flushRenderPhaseStrictModeWarningsInDEV() {
        ReactStrictModeWarnings.flushLegacyContextWarning(), ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
      }
      function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
        setCurrentFiber(fiber), invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV), hasPassiveEffects && invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV), invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV), hasPassiveEffects && invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV), resetCurrentFiber();
      }
      function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
        for (var current2 = firstChild, subtreeRoot = null; current2 !== null; ) {
          var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
          current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags ? current2 = current2.child : ((current2.flags & fiberFlags) !== NoFlags && invokeEffectFn(current2), current2.sibling !== null ? current2 = current2.sibling : current2 = subtreeRoot = current2.return);
        }
      }
      var didWarnStateUpdateForNotYetMountedComponent = null;
      function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
        {
          if ((executionContext & RenderContext) !== NoContext || !(fiber.mode & ConcurrentMode))
            return;
          var tag = fiber.tag;
          if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent)
            return;
          var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
          if (didWarnStateUpdateForNotYetMountedComponent !== null) {
            if (didWarnStateUpdateForNotYetMountedComponent.has(componentName))
              return;
            didWarnStateUpdateForNotYetMountedComponent.add(componentName);
          } else
            didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
          var previousFiber = current;
          try {
            setCurrentFiber(fiber), error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
          } finally {
            previousFiber ? setCurrentFiber(fiber) : resetCurrentFiber();
          }
        }
      }
      var beginWork$1;
      {
        var dummyFiber = null;
        beginWork$1 = function(current2, unitOfWork, lanes) {
          var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
          try {
            return beginWork(current2, unitOfWork, lanes);
          } catch (originalError) {
            if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError == "object" && typeof originalError.then == "function")
              throw originalError;
            if (resetContextDependencies(), resetHooksAfterThrow(), unwindInterruptedWork(current2, unitOfWork), assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy), unitOfWork.mode & ProfileMode && startProfilerTimer(unitOfWork), invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes), hasCaughtError()) {
              var replayError = clearCaughtError();
              typeof replayError == "object" && replayError !== null && replayError._suppressLogging && typeof originalError == "object" && originalError !== null && !originalError._suppressLogging && (originalError._suppressLogging = !0);
            }
            throw originalError;
          }
        };
      }
      var didWarnAboutUpdateInRender = !1, didWarnAboutUpdateInRenderForAnotherComponent;
      didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
      function warnAboutRenderPhaseUpdatesInDEV(fiber) {
        if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV())
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown", dedupeKey = renderingComponentName;
              if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
              }
              break;
            }
            case ClassComponent: {
              didWarnAboutUpdateInRender || (error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state."), didWarnAboutUpdateInRender = !0);
              break;
            }
          }
      }
      function restorePendingUpdaters(root2, lanes) {
        if (isDevToolsPresent) {
          var memoizedUpdaters = root2.memoizedUpdaters;
          memoizedUpdaters.forEach(function(schedulingFiber) {
            addFiberToLanesMap(root2, schedulingFiber, lanes);
          });
        }
      }
      var fakeActCallbackNode = {};
      function scheduleCallback$1(priorityLevel, callback) {
        {
          var actQueue = ReactCurrentActQueue$1.current;
          return actQueue !== null ? (actQueue.push(callback), fakeActCallbackNode) : scheduleCallback(priorityLevel, callback);
        }
      }
      function cancelCallback$1(callbackNode) {
        if (callbackNode !== fakeActCallbackNode)
          return cancelCallback(callbackNode);
      }
      function shouldForceFlushFallbacksInDEV() {
        return ReactCurrentActQueue$1.current !== null;
      }
      function warnIfUpdatesNotWrappedWithActDEV(fiber) {
        {
          if (fiber.mode & ConcurrentMode) {
            if (!isConcurrentActEnvironment())
              return;
          } else if (!isLegacyActEnvironment() || executionContext !== NoContext || fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent)
            return;
          if (ReactCurrentActQueue$1.current === null) {
            var previousFiber = current;
            try {
              setCurrentFiber(fiber), error(`An update to %s inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act`, getComponentNameFromFiber(fiber));
            } finally {
              previousFiber ? setCurrentFiber(fiber) : resetCurrentFiber();
            }
          }
        }
      }
      function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
        root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null && error(`A suspended resource finished loading inside a test, but the event was not wrapped in act(...).

When testing, code that resolves suspended data should be wrapped into act(...):

act(() => {
  /* finish loading suspended data */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act`);
      }
      function setIsRunningInsertionEffect(isRunning) {
        isRunningInsertionEffect = isRunning;
      }
      var resolveFamily = null, failedBoundaries = null, setRefreshHandler = function(handler) {
        resolveFamily = handler;
      };
      function resolveFunctionForHotReloading(type) {
        {
          if (resolveFamily === null)
            return type;
          var family = resolveFamily(type);
          return family === void 0 ? type : family.current;
        }
      }
      function resolveClassForHotReloading(type) {
        return resolveFunctionForHotReloading(type);
      }
      function resolveForwardRefForHotReloading(type) {
        {
          if (resolveFamily === null)
            return type;
          var family = resolveFamily(type);
          if (family === void 0) {
            if (type != null && typeof type.render == "function") {
              var currentRender = resolveFunctionForHotReloading(type.render);
              if (type.render !== currentRender) {
                var syntheticType = {
                  $$typeof: REACT_FORWARD_REF_TYPE,
                  render: currentRender
                };
                return type.displayName !== void 0 && (syntheticType.displayName = type.displayName), syntheticType;
              }
            }
            return type;
          }
          return family.current;
        }
      }
      function isCompatibleFamilyForHotReloading(fiber, element) {
        {
          if (resolveFamily === null)
            return !1;
          var prevType = fiber.elementType, nextType = element.type, needsCompareFamilies = !1, $$typeofNextType = typeof nextType == "object" && nextType !== null ? nextType.$$typeof : null;
          switch (fiber.tag) {
            case ClassComponent: {
              typeof nextType == "function" && (needsCompareFamilies = !0);
              break;
            }
            case FunctionComponent: {
              (typeof nextType == "function" || $$typeofNextType === REACT_LAZY_TYPE) && (needsCompareFamilies = !0);
              break;
            }
            case ForwardRef: {
              ($$typeofNextType === REACT_FORWARD_REF_TYPE || $$typeofNextType === REACT_LAZY_TYPE) && (needsCompareFamilies = !0);
              break;
            }
            case MemoComponent:
            case SimpleMemoComponent: {
              ($$typeofNextType === REACT_MEMO_TYPE || $$typeofNextType === REACT_LAZY_TYPE) && (needsCompareFamilies = !0);
              break;
            }
            default:
              return !1;
          }
          if (needsCompareFamilies) {
            var prevFamily = resolveFamily(prevType);
            if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType))
              return !0;
          }
          return !1;
        }
      }
      function markFailedErrorBoundaryForHotReloading(fiber) {
        {
          if (resolveFamily === null || typeof WeakSet != "function")
            return;
          failedBoundaries === null && (failedBoundaries = /* @__PURE__ */ new WeakSet()), failedBoundaries.add(fiber);
        }
      }
      var scheduleRefresh = function(root2, update) {
        {
          if (resolveFamily === null)
            return;
          var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
          flushPassiveEffects(), flushSync(function() {
            scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
          });
        }
      }, scheduleRoot = function(root2, element) {
        {
          if (root2.context !== emptyContextObject)
            return;
          flushPassiveEffects(), flushSync(function() {
            updateContainer(element, root2, null, null);
          });
        }
      };
      function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        {
          var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type, candidateType = null;
          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type;
              break;
            case ForwardRef:
              candidateType = type.render;
              break;
          }
          if (resolveFamily === null)
            throw new Error("Expected resolveFamily to be set during hot reload.");
          var needsRender = !1, needsRemount = !1;
          if (candidateType !== null) {
            var family = resolveFamily(candidateType);
            family !== void 0 && (staleFamilies.has(family) ? needsRemount = !0 : updatedFamilies.has(family) && (tag === ClassComponent ? needsRemount = !0 : needsRender = !0));
          }
          if (failedBoundaries !== null && (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) && (needsRemount = !0), needsRemount && (fiber._debugNeedsRemount = !0), needsRemount || needsRender) {
            var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            _root !== null && scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
          }
          child !== null && !needsRemount && scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies), sibling !== null && scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
        }
      }
      var findHostInstancesForRefresh = function(root2, families) {
        {
          var hostInstances = /* @__PURE__ */ new Set(), types = new Set(families.map(function(family) {
            return family.current;
          }));
          return findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances), hostInstances;
        }
      };
      function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
        {
          var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type, candidateType = null;
          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type;
              break;
            case ForwardRef:
              candidateType = type.render;
              break;
          }
          var didMatch = !1;
          candidateType !== null && types.has(candidateType) && (didMatch = !0), didMatch ? findHostInstancesForFiberShallowly(fiber, hostInstances) : child !== null && findHostInstancesForMatchingFibersRecursively(child, types, hostInstances), sibling !== null && findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
        }
      }
      function findHostInstancesForFiberShallowly(fiber, hostInstances) {
        {
          var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
          if (foundHostInstances)
            return;
          for (var node = fiber; ; ) {
            switch (node.tag) {
              case HostComponent:
                hostInstances.add(node.stateNode);
                return;
              case HostPortal:
                hostInstances.add(node.stateNode.containerInfo);
                return;
              case HostRoot:
                hostInstances.add(node.stateNode.containerInfo);
                return;
            }
            if (node.return === null)
              throw new Error("Expected to reach root first.");
            node = node.return;
          }
        }
      }
      function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
        for (var node = fiber, foundHostInstances = !1; ; ) {
          if (node.tag === HostComponent)
            foundHostInstances = !0, hostInstances.add(node.stateNode);
          else if (node.child !== null) {
            node.child.return = node, node = node.child;
            continue;
          }
          if (node === fiber)
            return foundHostInstances;
          for (; node.sibling === null; ) {
            if (node.return === null || node.return === fiber)
              return foundHostInstances;
            node = node.return;
          }
          node.sibling.return = node.return, node = node.sibling;
        }
        return !1;
      }
      var hasBadMapPolyfill;
      {
        hasBadMapPolyfill = !1;
        try {
          var nonExtensibleObject = Object.preventExtensions({});
        } catch {
          hasBadMapPolyfill = !0;
        }
      }
      function FiberNode(tag, pendingProps, key, mode2) {
        this.tag = tag, this.key = key, this.elementType = null, this.type = null, this.stateNode = null, this.return = null, this.child = null, this.sibling = null, this.index = 0, this.ref = null, this.pendingProps = pendingProps, this.memoizedProps = null, this.updateQueue = null, this.memoizedState = null, this.dependencies = null, this.mode = mode2, this.flags = NoFlags, this.subtreeFlags = NoFlags, this.deletions = null, this.lanes = NoLanes, this.childLanes = NoLanes, this.alternate = null, this.actualDuration = Number.NaN, this.actualStartTime = Number.NaN, this.selfBaseDuration = Number.NaN, this.treeBaseDuration = Number.NaN, this.actualDuration = 0, this.actualStartTime = -1, this.selfBaseDuration = 0, this.treeBaseDuration = 0, this._debugSource = null, this._debugOwner = null, this._debugNeedsRemount = !1, this._debugHookTypes = null, !hasBadMapPolyfill && typeof Object.preventExtensions == "function" && Object.preventExtensions(this);
      }
      var createFiber = function(tag, pendingProps, key, mode2) {
        return new FiberNode(tag, pendingProps, key, mode2);
      };
      function shouldConstruct$1(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function isSimpleFunctionComponent(type) {
        return typeof type == "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
      }
      function resolveLazyComponentTag(Component) {
        if (typeof Component == "function")
          return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
        if (Component != null) {
          var $$typeof = Component.$$typeof;
          if ($$typeof === REACT_FORWARD_REF_TYPE)
            return ForwardRef;
          if ($$typeof === REACT_MEMO_TYPE)
            return MemoComponent;
        }
        return IndeterminateComponent;
      }
      function createWorkInProgress(current2, pendingProps) {
        var workInProgress2 = current2.alternate;
        workInProgress2 === null ? (workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode), workInProgress2.elementType = current2.elementType, workInProgress2.type = current2.type, workInProgress2.stateNode = current2.stateNode, workInProgress2._debugSource = current2._debugSource, workInProgress2._debugOwner = current2._debugOwner, workInProgress2._debugHookTypes = current2._debugHookTypes, workInProgress2.alternate = current2, current2.alternate = workInProgress2) : (workInProgress2.pendingProps = pendingProps, workInProgress2.type = current2.type, workInProgress2.flags = NoFlags, workInProgress2.subtreeFlags = NoFlags, workInProgress2.deletions = null, workInProgress2.actualDuration = 0, workInProgress2.actualStartTime = -1), workInProgress2.flags = current2.flags & StaticMask, workInProgress2.childLanes = current2.childLanes, workInProgress2.lanes = current2.lanes, workInProgress2.child = current2.child, workInProgress2.memoizedProps = current2.memoizedProps, workInProgress2.memoizedState = current2.memoizedState, workInProgress2.updateQueue = current2.updateQueue;
        var currentDependencies = current2.dependencies;
        switch (workInProgress2.dependencies = currentDependencies === null ? null : {
          lanes: currentDependencies.lanes,
          firstContext: currentDependencies.firstContext
        }, workInProgress2.sibling = current2.sibling, workInProgress2.index = current2.index, workInProgress2.ref = current2.ref, workInProgress2.selfBaseDuration = current2.selfBaseDuration, workInProgress2.treeBaseDuration = current2.treeBaseDuration, workInProgress2._debugNeedsRemount = current2._debugNeedsRemount, workInProgress2.tag) {
          case IndeterminateComponent:
          case FunctionComponent:
          case SimpleMemoComponent:
            workInProgress2.type = resolveFunctionForHotReloading(current2.type);
            break;
          case ClassComponent:
            workInProgress2.type = resolveClassForHotReloading(current2.type);
            break;
          case ForwardRef:
            workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
            break;
        }
        return workInProgress2;
      }
      function resetWorkInProgress(workInProgress2, renderLanes2) {
        workInProgress2.flags &= StaticMask | Placement;
        var current2 = workInProgress2.alternate;
        if (current2 === null)
          workInProgress2.childLanes = NoLanes, workInProgress2.lanes = renderLanes2, workInProgress2.child = null, workInProgress2.subtreeFlags = NoFlags, workInProgress2.memoizedProps = null, workInProgress2.memoizedState = null, workInProgress2.updateQueue = null, workInProgress2.dependencies = null, workInProgress2.stateNode = null, workInProgress2.selfBaseDuration = 0, workInProgress2.treeBaseDuration = 0;
        else {
          workInProgress2.childLanes = current2.childLanes, workInProgress2.lanes = current2.lanes, workInProgress2.child = current2.child, workInProgress2.subtreeFlags = NoFlags, workInProgress2.deletions = null, workInProgress2.memoizedProps = current2.memoizedProps, workInProgress2.memoizedState = current2.memoizedState, workInProgress2.updateQueue = current2.updateQueue, workInProgress2.type = current2.type;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          }, workInProgress2.selfBaseDuration = current2.selfBaseDuration, workInProgress2.treeBaseDuration = current2.treeBaseDuration;
        }
        return workInProgress2;
      }
      function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
        var mode2;
        return tag === ConcurrentRoot ? (mode2 = ConcurrentMode, isStrictMode === !0 && (mode2 |= StrictLegacyMode, mode2 |= StrictEffectsMode)) : mode2 = NoMode, isDevToolsPresent && (mode2 |= ProfileMode), createFiber(HostRoot, null, null, mode2);
      }
      function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode2, lanes) {
        var fiberTag = IndeterminateComponent, resolvedType = type;
        if (typeof type == "function")
          shouldConstruct$1(type) ? (fiberTag = ClassComponent, resolvedType = resolveClassForHotReloading(resolvedType)) : resolvedType = resolveFunctionForHotReloading(resolvedType);
        else if (typeof type == "string")
          fiberTag = HostComponent;
        else
          getTag:
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode2, lanes, key);
              case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode, mode2 |= StrictLegacyMode, (mode2 & ConcurrentMode) !== NoMode && (mode2 |= StrictEffectsMode);
                break;
              case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode2, lanes, key);
              case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode2, lanes, key);
              case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode2, lanes, key);
              case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode2, lanes, key);
              case REACT_LEGACY_HIDDEN_TYPE:
              case REACT_SCOPE_TYPE:
              case REACT_CACHE_TYPE:
              case REACT_TRACING_MARKER_TYPE:
              case REACT_DEBUG_TRACING_MODE_TYPE:
              default: {
                if (typeof type == "object" && type !== null)
                  switch (type.$$typeof) {
                    case REACT_PROVIDER_TYPE:
                      fiberTag = ContextProvider;
                      break getTag;
                    case REACT_CONTEXT_TYPE:
                      fiberTag = ContextConsumer;
                      break getTag;
                    case REACT_FORWARD_REF_TYPE:
                      fiberTag = ForwardRef, resolvedType = resolveForwardRefForHotReloading(resolvedType);
                      break getTag;
                    case REACT_MEMO_TYPE:
                      fiberTag = MemoComponent;
                      break getTag;
                    case REACT_LAZY_TYPE:
                      fiberTag = LazyComponent, resolvedType = null;
                      break getTag;
                  }
                var info = "";
                {
                  (type === void 0 || typeof type == "object" && type !== null && Object.keys(type).length === 0) && (info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
                  var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                  ownerName && (info += `

Check the render method of \`` + ownerName + "`.");
                }
                throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
              }
            }
        var fiber = createFiber(fiberTag, pendingProps, key, mode2);
        return fiber.elementType = type, fiber.type = resolvedType, fiber.lanes = lanes, fiber._debugOwner = owner, fiber;
      }
      function createFiberFromElement(element, mode2, lanes) {
        var owner = null;
        owner = element._owner;
        var type = element.type, key = element.key, pendingProps = element.props, fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode2, lanes);
        return fiber._debugSource = element._source, fiber._debugOwner = element._owner, fiber;
      }
      function createFiberFromFragment(elements, mode2, lanes, key) {
        var fiber = createFiber(Fragment3, elements, key, mode2);
        return fiber.lanes = lanes, fiber;
      }
      function createFiberFromProfiler(pendingProps, mode2, lanes, key) {
        typeof pendingProps.id != "string" && error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
        var fiber = createFiber(Profiler, pendingProps, key, mode2 | ProfileMode);
        return fiber.elementType = REACT_PROFILER_TYPE, fiber.lanes = lanes, fiber.stateNode = {
          effectDuration: 0,
          passiveEffectDuration: 0
        }, fiber;
      }
      function createFiberFromSuspense(pendingProps, mode2, lanes, key) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode2);
        return fiber.elementType = REACT_SUSPENSE_TYPE, fiber.lanes = lanes, fiber;
      }
      function createFiberFromSuspenseList(pendingProps, mode2, lanes, key) {
        var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode2);
        return fiber.elementType = REACT_SUSPENSE_LIST_TYPE, fiber.lanes = lanes, fiber;
      }
      function createFiberFromOffscreen(pendingProps, mode2, lanes, key) {
        var fiber = createFiber(OffscreenComponent, pendingProps, key, mode2);
        fiber.elementType = REACT_OFFSCREEN_TYPE, fiber.lanes = lanes;
        var primaryChildInstance = {
          isHidden: !1
        };
        return fiber.stateNode = primaryChildInstance, fiber;
      }
      function createFiberFromText(content, mode2, lanes) {
        var fiber = createFiber(HostText, content, null, mode2);
        return fiber.lanes = lanes, fiber;
      }
      function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoMode);
        return fiber.elementType = "DELETED", fiber;
      }
      function createFiberFromDehydratedFragment(dehydratedNode) {
        var fiber = createFiber(DehydratedFragment, null, null, NoMode);
        return fiber.stateNode = dehydratedNode, fiber;
      }
      function createFiberFromPortal(portal, mode2, lanes) {
        var pendingProps = portal.children !== null ? portal.children : [], fiber = createFiber(HostPortal, pendingProps, portal.key, mode2);
        return fiber.lanes = lanes, fiber.stateNode = {
          containerInfo: portal.containerInfo,
          pendingChildren: null,
          // Used by persistent updates
          implementation: portal.implementation
        }, fiber;
      }
      function assignFiberPropertiesInDEV(target, source) {
        return target === null && (target = createFiber(IndeterminateComponent, null, null, NoMode)), target.tag = source.tag, target.key = source.key, target.elementType = source.elementType, target.type = source.type, target.stateNode = source.stateNode, target.return = source.return, target.child = source.child, target.sibling = source.sibling, target.index = source.index, target.ref = source.ref, target.pendingProps = source.pendingProps, target.memoizedProps = source.memoizedProps, target.updateQueue = source.updateQueue, target.memoizedState = source.memoizedState, target.dependencies = source.dependencies, target.mode = source.mode, target.flags = source.flags, target.subtreeFlags = source.subtreeFlags, target.deletions = source.deletions, target.lanes = source.lanes, target.childLanes = source.childLanes, target.alternate = source.alternate, target.actualDuration = source.actualDuration, target.actualStartTime = source.actualStartTime, target.selfBaseDuration = source.selfBaseDuration, target.treeBaseDuration = source.treeBaseDuration, target._debugSource = source._debugSource, target._debugOwner = source._debugOwner, target._debugNeedsRemount = source._debugNeedsRemount, target._debugHookTypes = source._debugHookTypes, target;
      }
      function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
        this.tag = tag, this.containerInfo = containerInfo, this.pendingChildren = null, this.current = null, this.pingCache = null, this.finishedWork = null, this.timeoutHandle = noTimeout, this.context = null, this.pendingContext = null, this.callbackNode = null, this.callbackPriority = NoLane, this.eventTimes = createLaneMap(NoLanes), this.expirationTimes = createLaneMap(NoTimestamp), this.pendingLanes = NoLanes, this.suspendedLanes = NoLanes, this.pingedLanes = NoLanes, this.expiredLanes = NoLanes, this.mutableReadLanes = NoLanes, this.finishedLanes = NoLanes, this.entangledLanes = NoLanes, this.entanglements = createLaneMap(NoLanes), this.identifierPrefix = identifierPrefix, this.onRecoverableError = onRecoverableError, this.mutableSourceEagerHydrationData = null, this.effectDuration = 0, this.passiveEffectDuration = 0;
        {
          this.memoizedUpdaters = /* @__PURE__ */ new Set();
          for (var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [], _i = 0; _i < TotalLanes; _i++)
            pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
        }
        switch (tag) {
          case ConcurrentRoot:
            this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
            break;
          case LegacyRoot:
            this._debugRootType = hydrate2 ? "hydrate()" : "render()";
            break;
        }
      }
      function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError), uninitializedFiber = createHostRootFiber(tag, isStrictMode);
        root2.current = uninitializedFiber, uninitializedFiber.stateNode = root2;
        {
          var _initialState = {
            element: initialChildren,
            isDehydrated: hydrate2,
            cache: null,
            // not enabled yet
            transitions: null,
            pendingSuspenseBoundaries: null
          };
          uninitializedFiber.memoizedState = _initialState;
        }
        return initializeUpdateQueue(uninitializedFiber), root2;
      }
      var ReactVersion = "18.3.1";
      function createPortal(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
        return checkKeyStringCoercion(key), {
          // This tag allow us to uniquely identify this as a React Portal
          $$typeof: REACT_PORTAL_TYPE,
          key: key == null ? null : "" + key,
          children,
          containerInfo,
          implementation
        };
      }
      var didWarnAboutNestedUpdates, didWarnAboutFindNodeInStrictMode;
      didWarnAboutNestedUpdates = !1, didWarnAboutFindNodeInStrictMode = {};
      function getContextForSubtree(parentComponent) {
        if (!parentComponent)
          return emptyContextObject;
        var fiber = get(parentComponent), parentContext = findCurrentUnmaskedContext(fiber);
        if (fiber.tag === ClassComponent) {
          var Component = fiber.type;
          if (isContextProvider(Component))
            return processChildContext(fiber, Component, parentContext);
        }
        return parentContext;
      }
      function findHostInstanceWithWarning(component, methodName) {
        {
          var fiber = get(component);
          if (fiber === void 0) {
            if (typeof component.render == "function")
              throw new Error("Unable to find node on an unmounted component.");
            var keys = Object.keys(component).join(",");
            throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
          }
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null)
            return null;
          if (hostFiber.mode & StrictLegacyMode) {
            var componentName = getComponentNameFromFiber(fiber) || "Component";
            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
              didWarnAboutFindNodeInStrictMode[componentName] = !0;
              var previousFiber = current;
              try {
                setCurrentFiber(hostFiber), fiber.mode & StrictLegacyMode ? error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName) : error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
              } finally {
                previousFiber ? setCurrentFiber(previousFiber) : resetCurrentFiber();
              }
            }
          }
          return hostFiber.stateNode;
        }
      }
      function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var hydrate2 = !1, initialChildren = null;
        return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
      }
      function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var hydrate2 = !0, root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        root2.context = getContextForSubtree(null);
        var current2 = root2.current, eventTime = requestEventTime(), lane = requestUpdateLane(current2), update = createUpdate(eventTime, lane);
        return update.callback = callback ?? null, enqueueUpdate(current2, update, lane), scheduleInitialHydrationOnRoot(root2, lane, eventTime), root2;
      }
      function updateContainer(element, container, parentComponent, callback) {
        onScheduleRoot(container, element);
        var current$1 = container.current, eventTime = requestEventTime(), lane = requestUpdateLane(current$1);
        markRenderScheduled(lane);
        var context = getContextForSubtree(parentComponent);
        container.context === null ? container.context = context : container.pendingContext = context, isRendering && current !== null && !didWarnAboutNestedUpdates && (didWarnAboutNestedUpdates = !0, error(`Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.

Check the render method of %s.`, getComponentNameFromFiber(current) || "Unknown"));
        var update = createUpdate(eventTime, lane);
        update.payload = {
          element
        }, callback = callback === void 0 ? null : callback, callback !== null && (typeof callback != "function" && error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback), update.callback = callback);
        var root2 = enqueueUpdate(current$1, update, lane);
        return root2 !== null && (scheduleUpdateOnFiber(root2, current$1, lane, eventTime), entangleTransitions(root2, current$1, lane)), lane;
      }
      function getPublicRootInstance(container) {
        var containerFiber = container.current;
        if (!containerFiber.child)
          return null;
        switch (containerFiber.child.tag) {
          case HostComponent:
            return containerFiber.child.stateNode;
          default:
            return containerFiber.child.stateNode;
        }
      }
      function attemptSynchronousHydration$1(fiber) {
        switch (fiber.tag) {
          case HostRoot: {
            var root2 = fiber.stateNode;
            if (isRootDehydrated(root2)) {
              var lanes = getHighestPriorityPendingLanes(root2);
              flushRoot(root2, lanes);
            }
            break;
          }
          case SuspenseComponent: {
            flushSync(function() {
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
              }
            });
            var retryLane = SyncLane;
            markRetryLaneIfNotHydrated(fiber, retryLane);
            break;
          }
        }
      }
      function markRetryLaneImpl(fiber, retryLane) {
        var suspenseState = fiber.memoizedState;
        suspenseState !== null && suspenseState.dehydrated !== null && (suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane));
      }
      function markRetryLaneIfNotHydrated(fiber, retryLane) {
        markRetryLaneImpl(fiber, retryLane);
        var alternate = fiber.alternate;
        alternate && markRetryLaneImpl(alternate, retryLane);
      }
      function attemptContinuousHydration$1(fiber) {
        if (fiber.tag === SuspenseComponent) {
          var lane = SelectiveHydrationLane, root2 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
      }
      function attemptHydrationAtCurrentPriority$1(fiber) {
        if (fiber.tag === SuspenseComponent) {
          var lane = requestUpdateLane(fiber), root2 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
      }
      function findHostInstanceWithNoPortals(fiber) {
        var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
        return hostFiber === null ? null : hostFiber.stateNode;
      }
      var shouldErrorImpl = function(fiber) {
        return null;
      };
      function shouldError(fiber) {
        return shouldErrorImpl(fiber);
      }
      var shouldSuspendImpl = function(fiber) {
        return !1;
      };
      function shouldSuspend(fiber) {
        return shouldSuspendImpl(fiber);
      }
      var overrideHookState = null, overrideHookStateDeletePath = null, overrideHookStateRenamePath = null, overrideProps = null, overridePropsDeletePath = null, overridePropsRenamePath = null, scheduleUpdate = null, setErrorHandler = null, setSuspenseHandler = null;
      {
        var copyWithDeleteImpl = function(obj, path, index2) {
          var key = path[index2], updated = isArray(obj) ? obj.slice() : assign({}, obj);
          return index2 + 1 === path.length ? (isArray(updated) ? updated.splice(key, 1) : delete updated[key], updated) : (updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1), updated);
        }, copyWithDelete = function(obj, path) {
          return copyWithDeleteImpl(obj, path, 0);
        }, copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
          var oldKey = oldPath[index2], updated = isArray(obj) ? obj.slice() : assign({}, obj);
          if (index2 + 1 === oldPath.length) {
            var newKey = newPath[index2];
            updated[newKey] = updated[oldKey], isArray(updated) ? updated.splice(oldKey, 1) : delete updated[oldKey];
          } else
            updated[oldKey] = copyWithRenameImpl(
              // $FlowFixMe number or string is fine here
              obj[oldKey],
              oldPath,
              newPath,
              index2 + 1
            );
          return updated;
        }, copyWithRename = function(obj, oldPath, newPath) {
          if (oldPath.length !== newPath.length) {
            warn("copyWithRename() expects paths of the same length");
            return;
          } else
            for (var i = 0; i < newPath.length - 1; i++)
              if (oldPath[i] !== newPath[i]) {
                warn("copyWithRename() expects paths to be the same except for the deepest key");
                return;
              }
          return copyWithRenameImpl(obj, oldPath, newPath, 0);
        }, copyWithSetImpl = function(obj, path, index2, value) {
          if (index2 >= path.length)
            return value;
          var key = path[index2], updated = isArray(obj) ? obj.slice() : assign({}, obj);
          return updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value), updated;
        }, copyWithSet = function(obj, path, value) {
          return copyWithSetImpl(obj, path, 0, value);
        }, findHook = function(fiber, id) {
          for (var currentHook2 = fiber.memoizedState; currentHook2 !== null && id > 0; )
            currentHook2 = currentHook2.next, id--;
          return currentHook2;
        };
        overrideHookState = function(fiber, id, path, value) {
          var hook = findHook(fiber, id);
          if (hook !== null) {
            var newState = copyWithSet(hook.memoizedState, path, value);
            hook.memoizedState = newState, hook.baseState = newState, fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            root2 !== null && scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        }, overrideHookStateDeletePath = function(fiber, id, path) {
          var hook = findHook(fiber, id);
          if (hook !== null) {
            var newState = copyWithDelete(hook.memoizedState, path);
            hook.memoizedState = newState, hook.baseState = newState, fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            root2 !== null && scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        }, overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
          var hook = findHook(fiber, id);
          if (hook !== null) {
            var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
            hook.memoizedState = newState, hook.baseState = newState, fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            root2 !== null && scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        }, overrideProps = function(fiber, path, value) {
          fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value), fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          root2 !== null && scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
        }, overridePropsDeletePath = function(fiber, path) {
          fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path), fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          root2 !== null && scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
        }, overridePropsRenamePath = function(fiber, oldPath, newPath) {
          fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath), fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          root2 !== null && scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
        }, scheduleUpdate = function(fiber) {
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          root2 !== null && scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
        }, setErrorHandler = function(newShouldErrorImpl) {
          shouldErrorImpl = newShouldErrorImpl;
        }, setSuspenseHandler = function(newShouldSuspendImpl) {
          shouldSuspendImpl = newShouldSuspendImpl;
        };
      }
      function findHostInstanceByFiber(fiber) {
        var hostFiber = findCurrentHostFiber(fiber);
        return hostFiber === null ? null : hostFiber.stateNode;
      }
      function emptyFindFiberByHostInstance(instance) {
        return null;
      }
      function getCurrentFiberForDevTools() {
        return current;
      }
      function injectIntoDevTools(devToolsConfig) {
        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance, ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals({
          bundleType: devToolsConfig.bundleType,
          version: devToolsConfig.version,
          rendererPackageName: devToolsConfig.rendererPackageName,
          rendererConfig: devToolsConfig.rendererConfig,
          overrideHookState,
          overrideHookStateDeletePath,
          overrideHookStateRenamePath,
          overrideProps,
          overridePropsDeletePath,
          overridePropsRenamePath,
          setErrorHandler,
          setSuspenseHandler,
          scheduleUpdate,
          currentDispatcherRef: ReactCurrentDispatcher2,
          findHostInstanceByFiber,
          findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
          // React Refresh
          findHostInstancesForRefresh,
          scheduleRefresh,
          scheduleRoot,
          setRefreshHandler,
          // Enables DevTools to append owner stacks to error messages in DEV mode.
          getCurrentFiber: getCurrentFiberForDevTools,
          // Enables DevTools to detect reconciler version rather than renderer version
          // which may not match for third party renderers.
          reconcilerVersion: ReactVersion
        });
      }
      var defaultOnRecoverableError = typeof reportError == "function" ? (
        // In modern browsers, reportError will dispatch an error event,
        // emulating an uncaught JavaScript error.
        reportError
      ) : function(error2) {
        console.error(error2);
      };
      function ReactDOMRoot(internalRoot) {
        this._internalRoot = internalRoot;
      }
      ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
        var root2 = this._internalRoot;
        if (root2 === null)
          throw new Error("Cannot update an unmounted root.");
        {
          typeof arguments[1] == "function" ? error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().") : isValidContainer(arguments[1]) ? error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.") : typeof arguments[1] < "u" && error("You passed a second argument to root.render(...) but it only accepts one argument.");
          var container = root2.containerInfo;
          if (container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(root2.current);
            hostInstance && hostInstance.parentNode !== container && error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
          }
        }
        updateContainer(children, root2, null, null);
      }, ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
        typeof arguments[0] == "function" && error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        var root2 = this._internalRoot;
        if (root2 !== null) {
          this._internalRoot = null;
          var container = root2.containerInfo;
          isAlreadyRendering() && error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition."), flushSync(function() {
            updateContainer(null, root2, null, null);
          }), unmarkContainerAsRoot(container);
        }
      };
      function createRoot(container, options2) {
        if (!isValidContainer(container))
          throw new Error("createRoot(...): Target container is not a DOM element.");
        warnIfReactDOMContainerInDEV(container);
        var isStrictMode = !1, concurrentUpdatesByDefaultOverride = !1, identifierPrefix = "", onRecoverableError = defaultOnRecoverableError, transitionCallbacks = null;
        options2 != null && (options2.hydrate ? warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.") : typeof options2 == "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE && error(`You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:

  let root = createRoot(domContainer);
  root.render(<App />);`), options2.unstable_strictMode === !0 && (isStrictMode = !0), options2.identifierPrefix !== void 0 && (identifierPrefix = options2.identifierPrefix), options2.onRecoverableError !== void 0 && (onRecoverableError = options2.onRecoverableError), options2.transitionCallbacks !== void 0 && (transitionCallbacks = options2.transitionCallbacks));
        var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        markContainerAsRoot(root2.current, container);
        var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        return listenToAllSupportedEvents(rootContainerElement), new ReactDOMRoot(root2);
      }
      function ReactDOMHydrationRoot(internalRoot) {
        this._internalRoot = internalRoot;
      }
      function scheduleHydration(target) {
        target && queueExplicitHydrationTarget(target);
      }
      ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
      function hydrateRoot(container, initialChildren, options2) {
        if (!isValidContainer(container))
          throw new Error("hydrateRoot(...): Target container is not a DOM element.");
        warnIfReactDOMContainerInDEV(container), initialChildren === void 0 && error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
        var hydrationCallbacks = options2 ?? null, mutableSources = options2 != null && options2.hydratedSources || null, isStrictMode = !1, concurrentUpdatesByDefaultOverride = !1, identifierPrefix = "", onRecoverableError = defaultOnRecoverableError;
        options2 != null && (options2.unstable_strictMode === !0 && (isStrictMode = !0), options2.identifierPrefix !== void 0 && (identifierPrefix = options2.identifierPrefix), options2.onRecoverableError !== void 0 && (onRecoverableError = options2.onRecoverableError));
        var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        if (markContainerAsRoot(root2.current, container), listenToAllSupportedEvents(container), mutableSources)
          for (var i = 0; i < mutableSources.length; i++) {
            var mutableSource = mutableSources[i];
            registerMutableSourceForHydration(root2, mutableSource);
          }
        return new ReactDOMHydrationRoot(root2);
      }
      function isValidContainer(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
      }
      function isValidContainerLegacy(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
      }
      function warnIfReactDOMContainerInDEV(container) {
        container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY" && error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app."), isContainerMarkedAsRoot(container) && (container._reactRootContainer ? error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.") : error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it."));
      }
      var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner, topLevelUpdateWarnings;
      topLevelUpdateWarnings = function(container) {
        if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
          var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
          hostInstance && hostInstance.parentNode !== container && error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
        }
        var isRootRenderedBySomeReact = !!container._reactRootContainer, rootEl = getReactRootElementInContainer(container), hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
        hasNonRootReactChild && !isRootRenderedBySomeReact && error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render."), container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY" && error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
      };
      function getReactRootElementInContainer(container) {
        return container ? container.nodeType === DOCUMENT_NODE ? container.documentElement : container.firstChild : null;
      }
      function noopOnRecoverableError() {
      }
      function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
        if (isHydrationContainer) {
          if (typeof callback == "function") {
            var originalCallback = callback;
            callback = function() {
              var instance = getPublicRootInstance(root2);
              originalCallback.call(instance);
            };
          }
          var root2 = createHydrationContainer(
            initialChildren,
            callback,
            container,
            LegacyRoot,
            null,
            // hydrationCallbacks
            !1,
            // isStrictMode
            !1,
            // concurrentUpdatesByDefaultOverride,
            "",
            // identifierPrefix
            noopOnRecoverableError
          );
          container._reactRootContainer = root2, markContainerAsRoot(root2.current, container);
          var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
          return listenToAllSupportedEvents(rootContainerElement), flushSync(), root2;
        } else {
          for (var rootSibling; rootSibling = container.lastChild; )
            container.removeChild(rootSibling);
          if (typeof callback == "function") {
            var _originalCallback = callback;
            callback = function() {
              var instance = getPublicRootInstance(_root);
              _originalCallback.call(instance);
            };
          }
          var _root = createContainer(
            container,
            LegacyRoot,
            null,
            // hydrationCallbacks
            !1,
            // isStrictMode
            !1,
            // concurrentUpdatesByDefaultOverride,
            "",
            // identifierPrefix
            noopOnRecoverableError
          );
          container._reactRootContainer = _root, markContainerAsRoot(_root.current, container);
          var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
          return listenToAllSupportedEvents(_rootContainerElement), flushSync(function() {
            updateContainer(initialChildren, _root, parentComponent, callback);
          }), _root;
        }
      }
      function warnOnInvalidCallback$1(callback, callerName) {
        callback !== null && typeof callback != "function" && error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
      }
      function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
        topLevelUpdateWarnings(container), warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
        var maybeRoot = container._reactRootContainer, root2;
        if (!maybeRoot)
          root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
        else {
          if (root2 = maybeRoot, typeof callback == "function") {
            var originalCallback = callback;
            callback = function() {
              var instance = getPublicRootInstance(root2);
              originalCallback.call(instance);
            };
          }
          updateContainer(children, root2, parentComponent, callback);
        }
        return getPublicRootInstance(root2);
      }
      var didWarnAboutFindDOMNode = !1;
      function findDOMNode(componentOrElement) {
        {
          didWarnAboutFindDOMNode || (didWarnAboutFindDOMNode = !0, error("findDOMNode is deprecated and will be removed in the next major release. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node"));
          var owner = ReactCurrentOwner$3.current;
          if (owner !== null && owner.stateNode !== null) {
            var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
            warnedAboutRefsInRender || error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component"), owner.stateNode._warnedAboutRefsInRender = !0;
          }
        }
        return componentOrElement == null ? null : componentOrElement.nodeType === ELEMENT_NODE ? componentOrElement : findHostInstanceWithWarning(componentOrElement, "findDOMNode");
      }
      function hydrate(element, container, callback) {
        if (error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot"), !isValidContainerLegacy(container))
          throw new Error("Target container is not a DOM element.");
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
          isModernRoot && error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
        }
        return legacyRenderSubtreeIntoContainer(null, element, container, !0, callback);
      }
      function render(element, container, callback) {
        if (error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot"), !isValidContainerLegacy(container))
          throw new Error("Target container is not a DOM element.");
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
          isModernRoot && error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
        }
        return legacyRenderSubtreeIntoContainer(null, element, container, !1, callback);
      }
      function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        if (error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot"), !isValidContainerLegacy(containerNode))
          throw new Error("Target container is not a DOM element.");
        if (parentComponent == null || !has(parentComponent))
          throw new Error("parentComponent must be a valid React Component");
        return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, !1, callback);
      }
      var didWarnAboutUnmountComponentAtNode = !1;
      function unmountComponentAtNode(container) {
        if (didWarnAboutUnmountComponentAtNode || (didWarnAboutUnmountComponentAtNode = !0, error("unmountComponentAtNode is deprecated and will be removed in the next major release. Switch to the createRoot API. Learn more: https://reactjs.org/link/switch-to-createroot")), !isValidContainerLegacy(container))
          throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
          isModernRoot && error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
        }
        if (container._reactRootContainer) {
          {
            var rootEl = getReactRootElementInContainer(container), renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
            renderedByDifferentReact && error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
          }
          return flushSync(function() {
            legacyRenderSubtreeIntoContainer(null, null, container, !1, function() {
              container._reactRootContainer = null, unmarkContainerAsRoot(container);
            });
          }), !0;
        } else {
          {
            var _rootEl = getReactRootElementInContainer(container), hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)), isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
            hasNonRootReactChild && error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
          }
          return !1;
        }
      }
      setAttemptSynchronousHydration(attemptSynchronousHydration$1), setAttemptContinuousHydration(attemptContinuousHydration$1), setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1), setGetCurrentUpdatePriority(getCurrentUpdatePriority), setAttemptHydrationAtPriority(runWithPriority), (typeof Map != "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
      Map.prototype == null || typeof Map.prototype.forEach != "function" || typeof Set != "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
      Set.prototype == null || typeof Set.prototype.clear != "function" || typeof Set.prototype.forEach != "function") && error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"), setRestoreImplementation(restoreControlledState$3), setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
      function createPortal$1(children, container) {
        var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
        if (!isValidContainer(container))
          throw new Error("Target container is not a DOM element.");
        return createPortal(children, container, null, key);
      }
      function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
      }
      var Internals = {
        usingClientEntryPoint: !1,
        // Keep in sync with ReactTestUtils.js.
        // This is an array for better minification.
        Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
      };
      function createRoot$1(container, options2) {
        return Internals.usingClientEntryPoint || error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".'), createRoot(container, options2);
      }
      function hydrateRoot$1(container, initialChildren, options2) {
        return Internals.usingClientEntryPoint || error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".'), hydrateRoot(container, initialChildren, options2);
      }
      function flushSync$1(fn) {
        return isAlreadyRendering() && error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task."), flushSync(fn);
      }
      var foundDevTools = injectIntoDevTools({
        findFiberByHostInstance: getClosestInstanceFromNode,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: "react-dom"
      });
      if (!foundDevTools && canUseDOM && window.top === window.self && (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1)) {
        var protocol = window.location.protocol;
        /^(https?|file):$/.test(protocol) && console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? `
You might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq` : ""), "font-weight:bold");
      }
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals, exports.createPortal = createPortal$1, exports.createRoot = createRoot$1, exports.findDOMNode = findDOMNode, exports.flushSync = flushSync$1, exports.hydrate = hydrate, exports.hydrateRoot = hydrateRoot$1, exports.render = render, exports.unmountComponentAtNode = unmountComponentAtNode, exports.unstable_batchedUpdates = batchedUpdates$1, exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer, exports.version = ReactVersion, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
    })();
  }
});

// node_modules/react-dom/index.js
var require_react_dom = __commonJS({
  "node_modules/react-dom/index.js"(exports, module2) {
    "use strict";
    module2.exports = require_react_dom_development();
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/portals/hooks.js
var require_hooks4 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/portals/hooks.js"(exports) {
    "use strict";
    var React2 = require_react(), context = require_context7();
    function usePortalsManager() {
      let portalsManager = React2.useContext(context.PortalsManagerContext);
      if (!portalsManager)
        throw new Error("No portals manager was provided. Your application must be wrapped in an <AppProvider> component. See https://polaris.shopify.com/components/app-provider for implementation instructions.");
      return portalsManager;
    }
    exports.usePortalsManager = usePortalsManager;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Portal/Portal.js
var require_Portal = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Portal/Portal.js"(exports) {
    "use strict";
    var polarisTokens = require("@shopify/polaris-tokens"), React2 = require_react(), reactDom = require_react_dom(), useTheme = require_use_theme(), hooks = require_hooks4(), ThemeProvider = require_ThemeProvider();
    function Portal({
      children,
      idPrefix = "",
      onPortalCreated = noop
    }) {
      let themeName = useTheme.useThemeName(), {
        container
      } = hooks.usePortalsManager(), uniqueId = React2.useId(), portalId = idPrefix !== "" ? `${idPrefix}-${uniqueId}` : uniqueId;
      return React2.useEffect(() => {
        onPortalCreated();
      }, [onPortalCreated]), container ? /* @__PURE__ */ reactDom.createPortal(/* @__PURE__ */ React2.createElement(ThemeProvider.ThemeProvider, {
        theme: ThemeProvider.isThemeNameLocal(themeName) ? themeName : polarisTokens.themeNameDefault,
        "data-portal-id": portalId
      }, children), container) : null;
    }
    function noop() {
    }
    exports.Portal = Portal;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tooltip/components/TooltipOverlay/TooltipOverlay.css.js
var require_TooltipOverlay_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tooltip/components/TooltipOverlay/TooltipOverlay.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      TooltipOverlay: "Polaris-Tooltip-TooltipOverlay",
      Tail: "Polaris-Tooltip-TooltipOverlay__Tail",
      positionedAbove: "Polaris-Tooltip-TooltipOverlay--positionedAbove",
      measuring: "Polaris-Tooltip-TooltipOverlay--measuring",
      measured: "Polaris-Tooltip-TooltipOverlay--measured",
      instant: "Polaris-Tooltip-TooltipOverlay--instant",
      Content: "Polaris-Tooltip-TooltipOverlay__Content",
      default: "Polaris-Tooltip-TooltipOverlay--default",
      wide: "Polaris-Tooltip-TooltipOverlay--wide"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/PositionedOverlay/utilities/math.js
var require_math = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/PositionedOverlay/utilities/math.js"(exports) {
    "use strict";
    var geometry = require_geometry();
    function calculateVerticalPosition(activatorRect, overlayRect, overlayMargins, scrollableContainerRect, containerRect, preferredPosition, fixed, topBarOffset = 0) {
      let activatorTop = activatorRect.top, activatorBottom = activatorTop + activatorRect.height, spaceAbove = activatorRect.top - topBarOffset, spaceBelow = containerRect.height - activatorRect.top - activatorRect.height, desiredHeight = overlayRect.height, verticalMargins = overlayMargins.activator + overlayMargins.container, minimumSpaceToScroll = overlayMargins.container, distanceToTopScroll = activatorRect.top - Math.max(scrollableContainerRect.top, 0), distanceToBottomScroll = containerRect.top + Math.min(containerRect.height, scrollableContainerRect.top + scrollableContainerRect.height) - (activatorRect.top + activatorRect.height), enoughSpaceFromTopScroll = distanceToTopScroll >= minimumSpaceToScroll, enoughSpaceFromBottomScroll = distanceToBottomScroll >= minimumSpaceToScroll, heightIfAbove = Math.min(spaceAbove, desiredHeight), heightIfBelow = Math.min(spaceBelow, desiredHeight), heightIfAboveCover = Math.min(spaceAbove + activatorRect.height, desiredHeight), heightIfBelowCover = Math.min(spaceBelow + activatorRect.height, desiredHeight), containerRectTop = fixed ? 0 : containerRect.top, positionIfAbove = {
        height: heightIfAbove - verticalMargins,
        top: activatorTop + containerRectTop - heightIfAbove,
        positioning: "above"
      }, positionIfBelow = {
        height: heightIfBelow - verticalMargins,
        top: activatorBottom + containerRectTop,
        positioning: "below"
      }, positionIfCoverBelow = {
        height: heightIfBelowCover - verticalMargins,
        top: activatorTop + containerRectTop,
        positioning: "cover"
      }, positionIfCoverAbove = {
        height: heightIfAboveCover - verticalMargins,
        top: activatorTop + containerRectTop - heightIfAbove + activatorRect.height + verticalMargins,
        positioning: "cover"
      };
      return preferredPosition === "above" ? (enoughSpaceFromTopScroll || distanceToTopScroll >= distanceToBottomScroll && !enoughSpaceFromBottomScroll) && (spaceAbove > desiredHeight || spaceAbove > spaceBelow) ? positionIfAbove : positionIfBelow : preferredPosition === "below" ? (enoughSpaceFromBottomScroll || distanceToBottomScroll >= distanceToTopScroll && !enoughSpaceFromTopScroll) && (spaceBelow > desiredHeight || spaceBelow > spaceAbove) ? positionIfBelow : positionIfAbove : preferredPosition === "cover" ? (enoughSpaceFromBottomScroll || distanceToBottomScroll >= distanceToTopScroll && !enoughSpaceFromTopScroll) && (spaceBelow + activatorRect.height > desiredHeight || spaceBelow > spaceAbove) ? positionIfCoverBelow : positionIfCoverAbove : enoughSpaceFromTopScroll && enoughSpaceFromBottomScroll ? spaceAbove > spaceBelow ? positionIfAbove : positionIfBelow : distanceToTopScroll > minimumSpaceToScroll ? positionIfAbove : positionIfBelow;
    }
    function calculateHorizontalPosition(activatorRect, overlayRect, containerRect, overlayMargins, preferredAlignment) {
      let maximum = containerRect.width - overlayRect.width;
      if (preferredAlignment === "left")
        return Math.min(maximum, Math.max(0, activatorRect.left - overlayMargins.horizontal));
      if (preferredAlignment === "right") {
        let activatorRight = containerRect.width - (activatorRect.left + activatorRect.width);
        return Math.min(maximum, Math.max(0, activatorRight - overlayMargins.horizontal));
      }
      return Math.min(maximum, Math.max(0, activatorRect.center.x - overlayRect.width / 2));
    }
    function rectIsOutsideOfRect(inner, outer) {
      let {
        center
      } = inner;
      return center.y < outer.top || center.y > outer.top + outer.height;
    }
    function intersectionWithViewport(rect, viewport = windowRect()) {
      let top = Math.max(rect.top, 0), left = Math.max(rect.left, 0), bottom = Math.min(rect.top + rect.height, viewport.height), right = Math.min(rect.left + rect.width, viewport.width);
      return new geometry.Rect({
        top,
        left,
        height: bottom - top,
        width: right - left
      });
    }
    function windowRect() {
      return new geometry.Rect({
        top: window.scrollY,
        left: window.scrollX,
        height: window.innerHeight,
        width: document.body.clientWidth
      });
    }
    exports.calculateHorizontalPosition = calculateHorizontalPosition;
    exports.calculateVerticalPosition = calculateVerticalPosition;
    exports.intersectionWithViewport = intersectionWithViewport;
    exports.rectIsOutsideOfRect = rectIsOutsideOfRect;
    exports.windowRect = windowRect;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/PositionedOverlay/PositionedOverlay.css.js
var require_PositionedOverlay_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/PositionedOverlay/PositionedOverlay.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      PositionedOverlay: "Polaris-PositionedOverlay",
      fixed: "Polaris-PositionedOverlay--fixed",
      calculating: "Polaris-PositionedOverlay--calculating",
      preventInteraction: "Polaris-PositionedOverlay--preventInteraction"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-lazy-ref.js
var require_use_lazy_ref = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-lazy-ref.js"(exports) {
    "use strict";
    var React2 = require_react(), UNIQUE_IDENTIFIER = Symbol("unique_identifier");
    function useLazyRef(initialValue) {
      let lazyRef = React2.useRef(UNIQUE_IDENTIFIER);
      return lazyRef.current === UNIQUE_IDENTIFIER && (lazyRef.current = initialValue()), lazyRef;
    }
    exports.useLazyRef = useLazyRef;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-component-did-mount.js
var require_use_component_did_mount = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-component-did-mount.js"(exports) {
    "use strict";
    var React2 = require_react(), useIsAfterInitialMount = require_use_is_after_initial_mount();
    function useComponentDidMount(callback) {
      let isAfterInitialMount = useIsAfterInitialMount.useIsAfterInitialMount(), hasInvokedLifeCycle = React2.useRef(!1);
      if (isAfterInitialMount && !hasInvokedLifeCycle.current)
        return hasInvokedLifeCycle.current = !0, callback();
    }
    exports.useComponentDidMount = useComponentDidMount;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Scrollable/context.js
var require_context10 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Scrollable/context.js"(exports) {
    "use strict";
    var React2 = require_react(), ScrollableContext = /* @__PURE__ */ React2.createContext(void 0);
    exports.ScrollableContext = ScrollableContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Scrollable/Scrollable.css.js
var require_Scrollable_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Scrollable/Scrollable.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Scrollable: "Polaris-Scrollable",
      hasTopShadow: "Polaris-Scrollable--hasTopShadow",
      hasBottomShadow: "Polaris-Scrollable--hasBottomShadow",
      horizontal: "Polaris-Scrollable--horizontal",
      vertical: "Polaris-Scrollable--vertical",
      scrollbarWidthThin: "Polaris-Scrollable--scrollbarWidthThin",
      scrollbarWidthNone: "Polaris-Scrollable--scrollbarWidthNone",
      scrollbarWidthAuto: "Polaris-Scrollable--scrollbarWidthAuto",
      scrollbarGutterStable: "Polaris-Scrollable--scrollbarGutterStable",
      "scrollbarGutterStableboth-edges": "Polaris-Scrollable__scrollbarGutterStableboth--edges"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Scrollable/components/ScrollTo/ScrollTo.js
var require_ScrollTo = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Scrollable/components/ScrollTo/ScrollTo.js"(exports) {
    "use strict";
    var React2 = require_react(), context = require_context10();
    function ScrollTo() {
      let anchorNode = React2.useRef(null), scrollToPosition = React2.useContext(context.ScrollableContext);
      React2.useEffect(() => {
        !scrollToPosition || !anchorNode.current || scrollToPosition(anchorNode.current.offsetTop);
      }, [scrollToPosition]);
      let id = React2.useId();
      return /* @__PURE__ */ React2.createElement("a", {
        id,
        ref: anchorNode
      });
    }
    exports.ScrollTo = ScrollTo;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Scrollable/Scrollable.js
var require_Scrollable = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Scrollable/Scrollable.js"(exports) {
    "use strict";
    var React2 = require_react(), debounce = require_debounce(), css = require_css(), shared = require_shared(), useLazyRef = require_use_lazy_ref(), useComponentDidMount = require_use_component_did_mount(), context = require_context10(), Scrollable_module = require_Scrollable_css(), ScrollTo = require_ScrollTo(), stickyManager = require_sticky_manager(), context$1 = require_context4(), MAX_SCROLL_HINT_DISTANCE = 100, LOW_RES_BUFFER = 2, ScrollableComponent = /* @__PURE__ */ React2.forwardRef(({
      children,
      className,
      horizontal = !0,
      vertical = !0,
      shadow,
      hint,
      focusable,
      scrollbarWidth = "thin",
      scrollbarGutter,
      onScrolledToBottom,
      ...rest
    }, forwardedRef) => {
      let [topShadow, setTopShadow] = React2.useState(!1), [bottomShadow, setBottomShadow] = React2.useState(!1), stickyManager$1 = useLazyRef.useLazyRef(() => new stickyManager.StickyManager()), scrollArea = React2.useRef(null), scrollTo = React2.useCallback((scrollY, options = {}) => {
        let optionsBehavior = options.behavior || "smooth", behavior = prefersReducedMotion() ? "auto" : optionsBehavior;
        scrollArea.current?.scrollTo({
          top: scrollY,
          behavior
        });
      }, []), defaultRef = React2.useRef();
      React2.useImperativeHandle(forwardedRef || defaultRef, () => ({
        scrollTo
      }));
      let handleScroll = React2.useCallback(() => {
        let currentScrollArea = scrollArea.current;
        currentScrollArea && requestAnimationFrame(() => {
          let {
            scrollTop,
            clientHeight,
            scrollHeight
          } = currentScrollArea, canScroll = Boolean(scrollHeight > clientHeight), isBelowTopOfScroll = Boolean(scrollTop > 0), isAtBottomOfScroll = Boolean(scrollTop + clientHeight >= scrollHeight - LOW_RES_BUFFER);
          setTopShadow(isBelowTopOfScroll), setBottomShadow(!isAtBottomOfScroll), canScroll && isAtBottomOfScroll && onScrolledToBottom && onScrolledToBottom();
        });
      }, [onScrolledToBottom]);
      useComponentDidMount.useComponentDidMount(() => {
        handleScroll(), hint && requestAnimationFrame(() => performScrollHint(scrollArea.current));
      }), React2.useEffect(() => {
        let currentScrollArea = scrollArea.current;
        if (!currentScrollArea)
          return;
        let handleResize = debounce.debounce(handleScroll, 50, {
          trailing: !0
        });
        return stickyManager$1.current?.setContainer(currentScrollArea), currentScrollArea.addEventListener("scroll", handleScroll), globalThis.addEventListener("resize", handleResize), () => {
          currentScrollArea.removeEventListener("scroll", handleScroll), globalThis.removeEventListener("resize", handleResize);
        };
      }, [stickyManager$1, handleScroll]);
      let finalClassName = css.classNames(className, Scrollable_module.default.Scrollable, vertical && Scrollable_module.default.vertical, horizontal && Scrollable_module.default.horizontal, shadow && topShadow && Scrollable_module.default.hasTopShadow, shadow && bottomShadow && Scrollable_module.default.hasBottomShadow, scrollbarWidth && Scrollable_module.default[css.variationName("scrollbarWidth", scrollbarWidth)], scrollbarGutter && Scrollable_module.default[css.variationName("scrollbarGutter", scrollbarGutter.replace(" ", ""))]);
      return /* @__PURE__ */ React2.createElement(context.ScrollableContext.Provider, {
        value: scrollTo
      }, /* @__PURE__ */ React2.createElement(context$1.StickyManagerContext.Provider, {
        value: stickyManager$1.current
      }, /* @__PURE__ */ React2.createElement("div", Object.assign({
        className: finalClassName
      }, shared.scrollable.props, rest, {
        ref: scrollArea,
        tabIndex: focusable ? 0 : void 0
      }), children)));
    });
    ScrollableComponent.displayName = "Scrollable";
    function prefersReducedMotion() {
      try {
        return window.matchMedia("(prefers-reduced-motion: reduce)").matches;
      } catch {
        return !1;
      }
    }
    function performScrollHint(elem) {
      if (!elem || prefersReducedMotion())
        return;
      let scrollableDistance = elem.scrollHeight - elem.clientHeight, distanceToPeek = Math.min(MAX_SCROLL_HINT_DISTANCE, scrollableDistance) - LOW_RES_BUFFER, goBackToTop = () => {
        requestAnimationFrame(() => {
          elem.scrollTop >= distanceToPeek && (elem.removeEventListener("scroll", goBackToTop), elem.scrollTo({
            top: 0,
            behavior: "smooth"
          }));
        });
      };
      elem.addEventListener("scroll", goBackToTop), elem.scrollTo({
        top: MAX_SCROLL_HINT_DISTANCE,
        behavior: "smooth"
      });
    }
    var forNode = (node) => {
      let closestElement = node.closest(shared.scrollable.selector);
      return closestElement instanceof HTMLElement ? closestElement : document;
    }, Scrollable = ScrollableComponent;
    Scrollable.ScrollTo = ScrollTo.ScrollTo;
    Scrollable.forNode = forNode;
    exports.Scrollable = Scrollable;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/PositionedOverlay/PositionedOverlay.js
var require_PositionedOverlay = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/PositionedOverlay/PositionedOverlay.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), geometry = require_geometry(), shared = require_shared(), math = require_math(), PositionedOverlay_module = require_PositionedOverlay_css(), Scrollable = require_Scrollable(), EventListener = require_EventListener(), OBSERVER_CONFIG = {
      childList: !0,
      subtree: !0,
      characterData: !0,
      attributeFilter: ["style"]
    }, PositionedOverlay = class extends React2.PureComponent {
      constructor(props) {
        super(props), this.state = {
          measuring: !0,
          activatorRect: geometry.getRectForNode(this.props.activator),
          right: void 0,
          left: void 0,
          top: 0,
          height: 0,
          width: null,
          positioning: "below",
          zIndex: null,
          outsideScrollableContainer: !1,
          lockPosition: !1,
          chevronOffset: 0
        }, this.overlay = null, this.scrollableContainers = [], this.overlayDetails = () => {
          let {
            measuring,
            left,
            right,
            positioning,
            height,
            activatorRect,
            chevronOffset
          } = this.state;
          return {
            measuring,
            left,
            right,
            desiredHeight: height,
            positioning,
            activatorRect,
            chevronOffset
          };
        }, this.setOverlay = (node) => {
          this.overlay = node;
        }, this.setScrollableContainers = () => {
          let containers = [], scrollableContainer = Scrollable.Scrollable.forNode(this.props.activator);
          if (scrollableContainer)
            for (containers.push(scrollableContainer); scrollableContainer?.parentElement; )
              scrollableContainer = Scrollable.Scrollable.forNode(scrollableContainer.parentElement), containers.push(scrollableContainer);
          this.scrollableContainers = containers;
        }, this.registerScrollHandlers = () => {
          this.scrollableContainers.forEach((node) => {
            node.addEventListener("scroll", this.handleMeasurement);
          });
        }, this.unregisterScrollHandlers = () => {
          this.scrollableContainers.forEach((node) => {
            node.removeEventListener("scroll", this.handleMeasurement);
          });
        }, this.handleMeasurement = () => {
          let {
            lockPosition,
            top
          } = this.state;
          this.observer.disconnect(), this.setState(({
            left,
            top: top2,
            right
          }) => ({
            left,
            right,
            top: top2,
            height: 0,
            positioning: "below",
            measuring: !0
          }), () => {
            if (this.overlay == null || this.firstScrollableContainer == null)
              return;
            let {
              activator,
              preferredPosition = "below",
              preferredAlignment = "center",
              onScrollOut,
              fullWidth,
              fixed,
              preferInputActivator = !0
            } = this.props, preferredActivator = preferInputActivator && activator.querySelector("input") || activator, activatorRect = geometry.getRectForNode(preferredActivator), currentOverlayRect = geometry.getRectForNode(this.overlay), scrollableElement = isDocument(this.firstScrollableContainer) ? document.body : this.firstScrollableContainer, scrollableContainerRect = geometry.getRectForNode(scrollableElement), overlayRect = fullWidth || preferredPosition === "cover" ? new geometry.Rect({
              ...currentOverlayRect,
              width: activatorRect.width
            }) : currentOverlayRect;
            scrollableElement === document.body && (scrollableContainerRect.height = document.body.scrollHeight);
            let topBarOffset = 0, topBarElement = scrollableElement.querySelector(`${shared.dataPolarisTopBar.selector}`);
            topBarElement && (topBarOffset = topBarElement.clientHeight);
            let overlayMargins = this.overlay.firstElementChild && this.overlay.firstChild instanceof HTMLElement ? getMarginsForNode(this.overlay.firstElementChild) : {
              activator: 0,
              container: 0,
              horizontal: 0
            }, containerRect = math.windowRect(), zIndexForLayer = getZIndexForLayerFromNode(activator), zIndex = zIndexForLayer == null ? zIndexForLayer : zIndexForLayer + 1, verticalPosition = math.calculateVerticalPosition(activatorRect, overlayRect, overlayMargins, scrollableContainerRect, containerRect, preferredPosition, fixed, topBarOffset), horizontalPosition = math.calculateHorizontalPosition(activatorRect, overlayRect, containerRect, overlayMargins, preferredAlignment), chevronOffset = activatorRect.center.x - horizontalPosition + overlayMargins.horizontal * 2;
            this.setState({
              measuring: !1,
              activatorRect: geometry.getRectForNode(activator),
              left: preferredAlignment !== "right" ? horizontalPosition : void 0,
              right: preferredAlignment === "right" ? horizontalPosition : void 0,
              top: lockPosition ? top : verticalPosition.top,
              lockPosition: Boolean(fixed),
              height: verticalPosition.height || 0,
              width: fullWidth || preferredPosition === "cover" ? overlayRect.width : null,
              positioning: verticalPosition.positioning,
              outsideScrollableContainer: onScrollOut != null && math.rectIsOutsideOfRect(activatorRect, math.intersectionWithViewport(scrollableContainerRect)),
              zIndex,
              chevronOffset
            }, () => {
              this.overlay && (this.observer.observe(this.overlay, OBSERVER_CONFIG), this.observer.observe(activator, OBSERVER_CONFIG));
            });
          });
        }, this.observer = new MutationObserver(this.handleMeasurement);
      }
      componentDidMount() {
        this.setScrollableContainers(), this.scrollableContainers.length && !this.props.fixed && this.registerScrollHandlers(), this.handleMeasurement();
      }
      componentWillUnmount() {
        this.observer.disconnect(), this.scrollableContainers.length && !this.props.fixed && this.unregisterScrollHandlers();
      }
      componentDidUpdate() {
        let {
          outsideScrollableContainer,
          top
        } = this.state, {
          onScrollOut,
          active
        } = this.props;
        active && onScrollOut != null && top !== 0 && outsideScrollableContainer && onScrollOut();
      }
      render() {
        let {
          left,
          right,
          top,
          zIndex,
          width
        } = this.state, {
          render,
          fixed,
          preventInteraction,
          classNames: propClassNames,
          zIndexOverride
        } = this.props, style = {
          top: top == null || isNaN(top) ? void 0 : top,
          left: left == null || isNaN(left) ? void 0 : left,
          right: right == null || isNaN(right) ? void 0 : right,
          width: width == null || isNaN(width) ? void 0 : width,
          zIndex: zIndexOverride || zIndex || void 0
        }, className = css.classNames(PositionedOverlay_module.default.PositionedOverlay, fixed && PositionedOverlay_module.default.fixed, preventInteraction && PositionedOverlay_module.default.preventInteraction, propClassNames);
        return /* @__PURE__ */ React2.createElement("div", {
          className,
          style,
          ref: this.setOverlay
        }, /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
          event: "resize",
          handler: this.handleMeasurement
        }), render(this.overlayDetails()));
      }
      get firstScrollableContainer() {
        return this.scrollableContainers[0] ?? null;
      }
      forceUpdatePosition() {
        requestAnimationFrame(this.handleMeasurement);
      }
    };
    function getMarginsForNode(node) {
      let nodeStyles = window.getComputedStyle(node);
      return {
        activator: parseFloat(nodeStyles.marginTop || "0"),
        container: parseFloat(nodeStyles.marginBottom || "0"),
        horizontal: parseFloat(nodeStyles.marginLeft || "0")
      };
    }
    function getZIndexForLayerFromNode(node) {
      let layerNode = node.closest(shared.layer.selector) || document.body, zIndex = layerNode === document.body ? "auto" : parseInt(window.getComputedStyle(layerNode).zIndex || "0", 10);
      return zIndex === "auto" || isNaN(zIndex) ? null : zIndex;
    }
    function isDocument(node) {
      return node === document;
    }
    exports.PositionedOverlay = PositionedOverlay;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tooltip/components/TooltipOverlay/TooltipOverlay.js
var require_TooltipOverlay = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tooltip/components/TooltipOverlay/TooltipOverlay.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), shared = require_shared(), TooltipOverlay_module = require_TooltipOverlay_css(), PositionedOverlay = require_PositionedOverlay(), hooks = require_hooks2(), tailUpPaths = /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("path", {
      d: "M18.829 8.171 11.862.921A3 3 0 0 0 7.619.838L0 8.171h1.442l6.87-6.612a2 2 0 0 1 2.83.055l6.3 6.557h1.387Z",
      fill: "var(--p-color-tooltip-tail-up-border-experimental)"
    }), /* @__PURE__ */ React2.createElement("path", {
      d: "M17.442 10.171h-16v-2l6.87-6.612a2 2 0 0 1 2.83.055l6.3 6.557v2Z",
      fill: "var(--p-color-bg-surface)"
    })), tailDownPaths = /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("path", {
      d: "m0 2 6.967 7.25a3 3 0 0 0 4.243.083L18.829 2h-1.442l-6.87 6.612a2 2 0 0 1-2.83-.055L1.387 2H0Z",
      fill: "var(--p-color-tooltip-tail-down-border-experimental)"
    }), /* @__PURE__ */ React2.createElement("path", {
      d: "M1.387 0h16v2l-6.87 6.612a2 2 0 0 1-2.83-.055L1.387 2V0Z",
      fill: "var(--p-color-bg-surface)"
    }));
    function TooltipOverlay({
      active,
      activator,
      preferredPosition = "above",
      preventInteraction,
      id,
      children,
      accessibilityLabel,
      width,
      padding,
      borderRadius,
      zIndexOverride,
      instant
    }) {
      let i18n = hooks.useI18n();
      return active ? /* @__PURE__ */ React2.createElement(PositionedOverlay.PositionedOverlay, {
        active,
        activator,
        preferredPosition,
        preventInteraction,
        render: renderTooltip,
        zIndexOverride
      }) : null;
      function renderTooltip(overlayDetails) {
        let {
          measuring,
          desiredHeight,
          positioning,
          chevronOffset
        } = overlayDetails, containerClassName = css.classNames(TooltipOverlay_module.default.TooltipOverlay, measuring && TooltipOverlay_module.default.measuring, !measuring && TooltipOverlay_module.default.measured, instant && TooltipOverlay_module.default.instant, positioning === "above" && TooltipOverlay_module.default.positionedAbove), contentClassName = css.classNames(TooltipOverlay_module.default.Content, width && TooltipOverlay_module.default[width]), contentStyles = measuring ? void 0 : {
          minHeight: desiredHeight
        }, style = {
          "--pc-tooltip-chevron-x-pos": `${chevronOffset}px`,
          "--pc-tooltip-border-radius": borderRadius ? `var(--p-border-radius-${borderRadius})` : void 0,
          "--pc-tooltip-padding": padding && padding === "default" ? "var(--p-space-100) var(--p-space-200)" : `var(--p-space-${padding})`
        };
        return /* @__PURE__ */ React2.createElement("div", Object.assign({
          style,
          className: containerClassName
        }, shared.layer.props), /* @__PURE__ */ React2.createElement("svg", {
          className: TooltipOverlay_module.default.Tail,
          width: "19",
          height: "11",
          fill: "none"
        }, positioning === "above" ? tailDownPaths : tailUpPaths), /* @__PURE__ */ React2.createElement("div", {
          id,
          role: "tooltip",
          className: contentClassName,
          style: {
            ...contentStyles,
            ...style
          },
          "aria-label": accessibilityLabel ? i18n.translate("Polaris.TooltipOverlay.accessibilityLabel", {
            label: accessibilityLabel
          }) : void 0
        }, children));
      }
    }
    exports.TooltipOverlay = TooltipOverlay;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tooltip/Tooltip.js
var require_Tooltip = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tooltip/Tooltip.js"(exports) {
    "use strict";
    var React2 = require_react(), focus = require_focus(), useToggle = require_use_toggle(), css = require_css(), Tooltip_module = require_Tooltip_css(), hooks = require_hooks3(), Portal = require_Portal(), TooltipOverlay = require_TooltipOverlay(), Text3 = require_Text(), HOVER_OUT_TIMEOUT = 150;
    function Tooltip({
      children,
      content,
      dismissOnMouseOut,
      active: originalActive,
      hoverDelay,
      preferredPosition = "above",
      activatorWrapper = "span",
      accessibilityLabel,
      width = "default",
      padding = "default",
      borderRadius: borderRadiusProp,
      zIndexOverride,
      hasUnderline,
      persistOnClick,
      onOpen,
      onClose
    }) {
      let borderRadius = borderRadiusProp || "200", WrapperComponent = activatorWrapper, {
        value: active,
        setTrue: setActiveTrue,
        setFalse: handleBlur
      } = useToggle.useToggle(Boolean(originalActive)), {
        value: persist,
        toggle: togglePersisting
      } = useToggle.useToggle(Boolean(originalActive) && Boolean(persistOnClick)), [activatorNode, setActivatorNode] = React2.useState(null), {
        presenceList,
        addPresence,
        removePresence
      } = hooks.useEphemeralPresenceManager(), id = React2.useId(), activatorContainer = React2.useRef(null), mouseEntered = React2.useRef(!1), [shouldAnimate, setShouldAnimate] = React2.useState(Boolean(!originalActive)), hoverDelayTimeout = React2.useRef(null), hoverOutTimeout = React2.useRef(null), handleFocus = React2.useCallback(() => {
        originalActive !== !1 && setActiveTrue();
      }, [originalActive, setActiveTrue]);
      React2.useEffect(() => {
        let accessibilityNode = (activatorContainer.current ? focus.findFirstFocusableNode(activatorContainer.current) : null) || activatorContainer.current;
        accessibilityNode && (accessibilityNode.tabIndex = 0, accessibilityNode.setAttribute("aria-describedby", id), accessibilityNode.setAttribute("data-polaris-tooltip-activator", "true"));
      }, [id, children]), React2.useEffect(() => () => {
        hoverDelayTimeout.current && clearTimeout(hoverDelayTimeout.current), hoverOutTimeout.current && clearTimeout(hoverOutTimeout.current);
      }, []);
      let handleOpen = React2.useCallback(() => {
        setShouldAnimate(!presenceList.tooltip && !active), onOpen?.(), addPresence("tooltip");
      }, [addPresence, presenceList.tooltip, onOpen, active]), handleClose = React2.useCallback(() => {
        onClose?.(), setShouldAnimate(!1), hoverOutTimeout.current = setTimeout(() => {
          removePresence("tooltip");
        }, HOVER_OUT_TIMEOUT);
      }, [removePresence, onClose]), handleKeyUp = React2.useCallback((event) => {
        event.key === "Escape" && (handleClose?.(), handleBlur(), persistOnClick && togglePersisting());
      }, [handleBlur, handleClose, persistOnClick, togglePersisting]);
      React2.useEffect(() => {
        originalActive === !1 && active && (handleClose(), handleBlur());
      }, [originalActive, active, handleClose, handleBlur]);
      let portal = activatorNode ? /* @__PURE__ */ React2.createElement(Portal.Portal, {
        idPrefix: "tooltip"
      }, /* @__PURE__ */ React2.createElement(TooltipOverlay.TooltipOverlay, {
        id,
        preferredPosition,
        activator: activatorNode,
        active,
        accessibilityLabel,
        onClose: noop,
        preventInteraction: dismissOnMouseOut,
        width,
        padding,
        borderRadius,
        zIndexOverride,
        instant: !shouldAnimate
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "bodyMd"
      }, content))) : null, wrapperClassNames = css.classNames(activatorWrapper === "div" && Tooltip_module.default.TooltipContainer, hasUnderline && Tooltip_module.default.HasUnderline);
      return /* @__PURE__ */ React2.createElement(WrapperComponent, {
        onFocus: () => {
          handleOpen(), handleFocus();
        },
        onBlur: () => {
          handleClose(), handleBlur(), persistOnClick && togglePersisting();
        },
        onMouseLeave: handleMouseLeave,
        onMouseOver: handleMouseEnterFix,
        onMouseDown: persistOnClick ? togglePersisting : void 0,
        ref: setActivator,
        onKeyUp: handleKeyUp,
        className: wrapperClassNames
      }, children, portal);
      function setActivator(node) {
        let activatorContainerRef = activatorContainer;
        if (node == null) {
          activatorContainerRef.current = null, setActivatorNode(null);
          return;
        }
        node.firstElementChild instanceof HTMLElement && setActivatorNode(node.firstElementChild), activatorContainerRef.current = node;
      }
      function handleMouseEnter() {
        mouseEntered.current = !0, hoverDelay && !presenceList.tooltip ? hoverDelayTimeout.current = setTimeout(() => {
          handleOpen(), handleFocus();
        }, hoverDelay) : (handleOpen(), handleFocus());
      }
      function handleMouseLeave() {
        hoverDelayTimeout.current && (clearTimeout(hoverDelayTimeout.current), hoverDelayTimeout.current = null), mouseEntered.current = !1, handleClose(), persist || handleBlur();
      }
      function handleMouseEnterFix() {
        !mouseEntered.current && handleMouseEnter();
      }
    }
    function noop() {
    }
    exports.Tooltip = Tooltip;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionList/components/Item/Item.js
var require_Item = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionList/components/Item/Item.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), ActionList_module = require_ActionList_css(), focus = require_focus(), useIsomorphicLayoutEffect = require_use_isomorphic_layout_effect(), useTheme = require_use_theme(), Badge3 = require_Badge(), Tooltip = require_Tooltip(), Icon2 = require_Icon(), Box3 = require_Box(), Text3 = require_Text(), Scrollable = require_Scrollable(), UnstyledLink = require_UnstyledLink(), InlineStack3 = require_InlineStack();
    function Item({
      id,
      badge,
      content,
      accessibilityLabel,
      helpText,
      url,
      onAction,
      onMouseEnter,
      icon,
      image,
      prefix,
      suffix,
      disabled,
      external,
      destructive,
      ellipsis,
      truncate,
      active,
      role,
      variant = "default"
    }) {
      let className = css.classNames(ActionList_module.default.Item, disabled && ActionList_module.default.disabled, destructive && ActionList_module.default.destructive, active && ActionList_module.default.active, variant === "default" && ActionList_module.default.default, variant === "indented" && ActionList_module.default.indented, variant === "menu" && ActionList_module.default.menu), prefixMarkup = null;
      prefix ? prefixMarkup = /* @__PURE__ */ React2.createElement("span", {
        className: ActionList_module.default.Prefix
      }, prefix) : icon ? prefixMarkup = /* @__PURE__ */ React2.createElement("span", {
        className: ActionList_module.default.Prefix
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: icon
      })) : image && (prefixMarkup = /* @__PURE__ */ React2.createElement("span", {
        role: "presentation",
        className: ActionList_module.default.Prefix,
        style: {
          backgroundImage: `url(${image}`
        }
      }));
      let contentText = content || "";
      truncate && content ? contentText = /* @__PURE__ */ React2.createElement(TruncateText, null, content) : ellipsis && (contentText = `${content}\u2026`);
      let contentMarkup = helpText ? /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(Box3.Box, null, contentText), /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "bodySm",
        tone: active || disabled ? void 0 : "subdued"
      }, helpText)) : /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "bodyMd",
        fontWeight: active ? "semibold" : "regular"
      }, contentText), badgeMarkup = badge && /* @__PURE__ */ React2.createElement("span", {
        className: ActionList_module.default.Suffix
      }, /* @__PURE__ */ React2.createElement(Badge3.Badge, {
        tone: badge.tone
      }, badge.content)), suffixMarkup = suffix && /* @__PURE__ */ React2.createElement(Box3.Box, null, /* @__PURE__ */ React2.createElement("span", {
        className: ActionList_module.default.Suffix
      }, suffix)), textMarkup = /* @__PURE__ */ React2.createElement("span", {
        className: ActionList_module.default.Text
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "bodyMd",
        fontWeight: active ? "semibold" : "regular"
      }, contentMarkup)), contentElement = /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        blockAlign: "center",
        gap: "150",
        wrap: !1
      }, prefixMarkup, textMarkup, badgeMarkup, suffixMarkup), contentWrapper = /* @__PURE__ */ React2.createElement(Box3.Box, {
        width: "100%"
      }, contentElement), scrollMarkup = active ? /* @__PURE__ */ React2.createElement(Scrollable.Scrollable.ScrollTo, null) : null, control = url ? /* @__PURE__ */ React2.createElement(UnstyledLink.UnstyledLink, {
        id,
        url: disabled ? null : url,
        className,
        external,
        "aria-label": accessibilityLabel,
        onClick: disabled ? null : onAction,
        role
      }, contentWrapper) : /* @__PURE__ */ React2.createElement("button", {
        id,
        type: "button",
        className,
        disabled,
        "aria-label": accessibilityLabel,
        onClick: onAction,
        onMouseUp: focus.handleMouseUpByBlurring,
        role,
        onMouseEnter
      }, contentWrapper);
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, scrollMarkup, control);
    }
    var TruncateText = ({
      children
    }) => {
      let theme = useTheme.useTheme(), textRef = React2.useRef(null), [isOverflowing, setIsOverflowing] = React2.useState(!1);
      useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
        textRef.current && setIsOverflowing(textRef.current.scrollWidth > textRef.current.offsetWidth);
      }, [children]);
      let text = /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        truncate: !0
      }, /* @__PURE__ */ React2.createElement(Box3.Box, {
        width: "100%",
        ref: textRef
      }, children));
      return isOverflowing ? /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, {
        zIndexOverride: Number(theme.zIndex["z-index-11"]),
        preferredPosition: "above",
        hoverDelay: 1e3,
        content: children,
        dismissOnMouseOut: !0
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        truncate: !0
      }, children)) : text;
    };
    exports.Item = Item;
    exports.TruncateText = TruncateText;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionList/components/Section/Section.js
var require_Section = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionList/components/Section/Section.js"(exports) {
    "use strict";
    var React2 = require_react(), Item = require_Item(), Box3 = require_Box(), InlineStack3 = require_InlineStack(), Text3 = require_Text(), BlockStack3 = require_BlockStack();
    function Section({
      section,
      hasMultipleSections,
      isFirst,
      actionRole,
      onActionAnyItem
    }) {
      let handleAction = (itemOnAction) => () => {
        itemOnAction && itemOnAction(), onActionAnyItem && onActionAnyItem();
      }, actionMarkup = section.items.map(({
        content,
        helpText,
        onAction,
        ...item
      }, index) => {
        let itemMarkup = /* @__PURE__ */ React2.createElement(Item.Item, Object.assign({
          content,
          helpText,
          role: actionRole,
          onAction: handleAction(onAction)
        }, item));
        return /* @__PURE__ */ React2.createElement(Box3.Box, {
          as: "li",
          key: `${content}-${index}`,
          role: actionRole === "menuitem" ? "presentation" : void 0
        }, /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
          wrap: !1
        }, itemMarkup));
      }), titleMarkup = null;
      section.title && (titleMarkup = typeof section.title == "string" ? /* @__PURE__ */ React2.createElement(Box3.Box, {
        paddingBlockStart: "300",
        paddingBlockEnd: "100",
        paddingInlineStart: "300",
        paddingInlineEnd: "300"
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "p",
        variant: "headingSm"
      }, section.title)) : /* @__PURE__ */ React2.createElement(Box3.Box, {
        padding: "200",
        paddingInlineEnd: "150"
      }, section.title));
      let sectionRole;
      switch (actionRole) {
        case "option":
          sectionRole = "presentation";
          break;
        case "menuitem":
          sectionRole = hasMultipleSections ? "presentation" : "menu";
          break;
        default:
          sectionRole = void 0;
          break;
      }
      let sectionMarkup = /* @__PURE__ */ React2.createElement(React2.Fragment, null, titleMarkup, /* @__PURE__ */ React2.createElement(Box3.Box, Object.assign({
        as: "div",
        padding: "150"
      }, hasMultipleSections && {
        paddingBlockStart: "0"
      }, {
        tabIndex: hasMultipleSections ? void 0 : -1
      }), /* @__PURE__ */ React2.createElement(BlockStack3.BlockStack, Object.assign({
        gap: "050",
        as: "ul"
      }, sectionRole && {
        role: sectionRole
      }), actionMarkup)));
      return hasMultipleSections ? /* @__PURE__ */ React2.createElement(Box3.Box, Object.assign({
        as: "li",
        role: "presentation",
        borderColor: "border-secondary"
      }, !isFirst && {
        borderBlockStartWidth: "025"
      }, !section.title && {
        paddingBlockStart: "150"
      }), sectionMarkup) : sectionMarkup;
    }
    exports.Section = Section;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/KeypressListener/KeypressListener.js
var require_KeypressListener = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/KeypressListener/KeypressListener.js"(exports) {
    "use strict";
    var React2 = require_react(), useIsomorphicLayoutEffect = require_use_isomorphic_layout_effect();
    function KeypressListener({
      keyCode,
      handler,
      keyEvent = "keyup",
      options,
      useCapture
    }) {
      let tracked = React2.useRef({
        handler,
        keyCode
      });
      useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
        tracked.current = {
          handler,
          keyCode
        };
      }, [handler, keyCode]);
      let handleKeyEvent = React2.useCallback((event) => {
        let {
          handler: handler2,
          keyCode: keyCode2
        } = tracked.current;
        event.keyCode === keyCode2 && handler2(event);
      }, []);
      return React2.useEffect(() => (document.addEventListener(keyEvent, handleKeyEvent, useCapture || options), () => {
        document.removeEventListener(keyEvent, handleKeyEvent, useCapture || options);
      }), [keyEvent, handleKeyEvent, useCapture, options]), null;
    }
    exports.KeypressListener = KeypressListener;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TextField/TextField.css.js
var require_TextField_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TextField/TextField.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      TextField: "Polaris-TextField",
      ClearButton: "Polaris-TextField__ClearButton",
      Loading: "Polaris-TextField__Loading",
      disabled: "Polaris-TextField--disabled",
      error: "Polaris-TextField--error",
      readOnly: "Polaris-TextField--readOnly",
      Input: "Polaris-TextField__Input",
      Backdrop: "Polaris-TextField__Backdrop",
      multiline: "Polaris-TextField--multiline",
      hasValue: "Polaris-TextField--hasValue",
      focus: "Polaris-TextField--focus",
      VerticalContent: "Polaris-TextField__VerticalContent",
      InputAndSuffixWrapper: "Polaris-TextField__InputAndSuffixWrapper",
      toneMagic: "Polaris-TextField--toneMagic",
      Prefix: "Polaris-TextField__Prefix",
      Suffix: "Polaris-TextField__Suffix",
      AutoSizeWrapper: "Polaris-TextField__AutoSizeWrapper",
      AutoSizeWrapperWithSuffix: "Polaris-TextField__AutoSizeWrapperWithSuffix",
      suggestion: "Polaris-TextField--suggestion",
      borderless: "Polaris-TextField--borderless",
      slim: "Polaris-TextField--slim",
      "Input-hasClearButton": "Polaris-TextField__Input--hasClearButton",
      "Input-suffixed": "Polaris-TextField__Input--suffixed",
      "Input-alignRight": "Polaris-TextField__Input--alignRight",
      "Input-alignLeft": "Polaris-TextField__Input--alignLeft",
      "Input-alignCenter": "Polaris-TextField__Input--alignCenter",
      "Input-autoSize": "Polaris-TextField__Input--autoSize",
      PrefixIcon: "Polaris-TextField__PrefixIcon",
      CharacterCount: "Polaris-TextField__CharacterCount",
      AlignFieldBottom: "Polaris-TextField__AlignFieldBottom",
      Spinner: "Polaris-TextField__Spinner",
      SpinnerIcon: "Polaris-TextField__SpinnerIcon",
      Resizer: "Polaris-TextField__Resizer",
      DummyInput: "Polaris-TextField__DummyInput",
      Segment: "Polaris-TextField__Segment",
      monospaced: "Polaris-TextField--monospaced"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TextField/components/Spinner/Spinner.js
var require_Spinner2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TextField/components/Spinner/Spinner.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), TextField_module = require_TextField_css(), Icon2 = require_Icon(), Spinner2 = /* @__PURE__ */ React2.forwardRef(function({
      onChange,
      onClick,
      onMouseDown,
      onMouseUp,
      onBlur
    }, ref) {
      function handleStep(step) {
        return () => onChange(step);
      }
      function handleMouseDown(onChange2) {
        return (event) => {
          event.button === 0 && onMouseDown?.(onChange2);
        };
      }
      return /* @__PURE__ */ React2.createElement("div", {
        className: TextField_module.default.Spinner,
        onClick,
        "aria-hidden": !0,
        ref
      }, /* @__PURE__ */ React2.createElement("div", {
        role: "button",
        className: TextField_module.default.Segment,
        tabIndex: -1,
        onClick: handleStep(1),
        onMouseDown: handleMouseDown(handleStep(1)),
        onMouseUp,
        onBlur
      }, /* @__PURE__ */ React2.createElement("div", {
        className: TextField_module.default.SpinnerIcon
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.ChevronUpIcon
      }))), /* @__PURE__ */ React2.createElement("div", {
        role: "button",
        className: TextField_module.default.Segment,
        tabIndex: -1,
        onClick: handleStep(-1),
        onMouseDown: handleMouseDown(handleStep(-1)),
        onMouseUp,
        onBlur
      }, /* @__PURE__ */ React2.createElement("div", {
        className: TextField_module.default.SpinnerIcon
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.ChevronDownIcon
      }))));
    });
    exports.Spinner = Spinner2;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Labelled/Labelled.css.js
var require_Labelled_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Labelled/Labelled.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      hidden: "Polaris-Labelled--hidden",
      LabelWrapper: "Polaris-Labelled__LabelWrapper",
      disabled: "Polaris-Labelled--disabled",
      HelpText: "Polaris-Labelled__HelpText",
      readOnly: "Polaris-Labelled--readOnly",
      Error: "Polaris-Labelled__Error",
      Action: "Polaris-Labelled__Action"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/InlineError/InlineError.css.js
var require_InlineError_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/InlineError/InlineError.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      InlineError: "Polaris-InlineError",
      Icon: "Polaris-InlineError__Icon"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/InlineError/InlineError.js
var require_InlineError = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/InlineError/InlineError.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), InlineError_module = require_InlineError_css(), Icon2 = require_Icon(), Text3 = require_Text();
    function InlineError({
      message,
      fieldID
    }) {
      return message ? /* @__PURE__ */ React2.createElement("div", {
        id: errorTextID(fieldID),
        className: InlineError_module.default.InlineError
      }, /* @__PURE__ */ React2.createElement("div", {
        className: InlineError_module.default.Icon
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.AlertCircleIcon
      })), /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "bodyMd"
      }, message)) : null;
    }
    function errorTextID(id) {
      return `${id}Error`;
    }
    exports.InlineError = InlineError;
    exports.errorTextID = errorTextID;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Label/Label.css.js
var require_Label_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Label/Label.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Label: "Polaris-Label",
      hidden: "Polaris-Label--hidden",
      Text: "Polaris-Label__Text",
      RequiredIndicator: "Polaris-Label__RequiredIndicator"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Label/Label.js
var require_Label = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Label/Label.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Label_module = require_Label_css(), Text3 = require_Text();
    function labelID(id) {
      return `${id}Label`;
    }
    function Label({
      children,
      id,
      hidden,
      requiredIndicator
    }) {
      let className = css.classNames(Label_module.default.Label, hidden && Label_module.default.hidden);
      return /* @__PURE__ */ React2.createElement("div", {
        className
      }, /* @__PURE__ */ React2.createElement("label", {
        id: labelID(id),
        htmlFor: id,
        className: css.classNames(Label_module.default.Text, requiredIndicator && Label_module.default.RequiredIndicator)
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "bodyMd"
      }, children)));
    }
    exports.Label = Label;
    exports.labelID = labelID;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Labelled/Labelled.js
var require_Labelled = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Labelled/Labelled.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Labelled_module = require_Labelled_css(), InlineError = require_InlineError(), Label = require_Label(), utils = require_utils(), Text3 = require_Text();
    function Labelled({
      id,
      label,
      error,
      action: action8,
      helpText,
      children,
      labelHidden,
      requiredIndicator,
      disabled,
      readOnly,
      ...rest
    }) {
      let className = css.classNames(labelHidden && Labelled_module.default.hidden, disabled && Labelled_module.default.disabled, readOnly && Labelled_module.default.readOnly), actionMarkup = action8 ? /* @__PURE__ */ React2.createElement("div", {
        className: Labelled_module.default.Action
      }, utils.buttonFrom(action8, {
        variant: "plain"
      })) : null, helpTextMarkup = helpText ? /* @__PURE__ */ React2.createElement("div", {
        className: Labelled_module.default.HelpText,
        id: helpTextID(id),
        "aria-disabled": disabled
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        tone: "subdued",
        variant: "bodyMd",
        breakWord: !0
      }, helpText)) : null, errorMarkup = error && typeof error != "boolean" && /* @__PURE__ */ React2.createElement("div", {
        className: Labelled_module.default.Error
      }, /* @__PURE__ */ React2.createElement(InlineError.InlineError, {
        message: error,
        fieldID: id
      })), labelMarkup = label ? /* @__PURE__ */ React2.createElement("div", {
        className: Labelled_module.default.LabelWrapper
      }, /* @__PURE__ */ React2.createElement(Label.Label, Object.assign({
        id,
        requiredIndicator
      }, rest, {
        hidden: !1
      }), label), actionMarkup) : null;
      return /* @__PURE__ */ React2.createElement("div", {
        className
      }, labelMarkup, children, errorMarkup, helpTextMarkup);
    }
    function helpTextID(id) {
      return `${id}HelpText`;
    }
    exports.labelID = Label.labelID;
    exports.Labelled = Labelled;
    exports.helpTextID = helpTextID;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Connected/Connected.css.js
var require_Connected_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Connected/Connected.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Connected: "Polaris-Connected",
      Item: "Polaris-Connected__Item",
      "Item-primary": "Polaris-Connected__Item--primary",
      "Item-focused": "Polaris-Connected__Item--focused"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Connected/components/Item/Item.js
var require_Item2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Connected/components/Item/Item.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), useToggle = require_use_toggle(), Connected_module = require_Connected_css();
    function Item({
      children,
      position
    }) {
      let {
        value: focused,
        setTrue: forceTrueFocused,
        setFalse: forceFalseFocused
      } = useToggle.useToggle(!1), className = css.classNames(Connected_module.default.Item, focused && Connected_module.default["Item-focused"], position === "primary" ? Connected_module.default["Item-primary"] : Connected_module.default["Item-connection"]);
      return /* @__PURE__ */ React2.createElement("div", {
        onBlur: forceFalseFocused,
        onFocus: forceTrueFocused,
        className
      }, children);
    }
    exports.Item = Item;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Connected/Connected.js
var require_Connected = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Connected/Connected.js"(exports) {
    "use strict";
    var React2 = require_react(), Connected_module = require_Connected_css(), Item = require_Item2();
    function Connected({
      children,
      left,
      right
    }) {
      let leftConnectionMarkup = left ? /* @__PURE__ */ React2.createElement(Item.Item, {
        position: "left"
      }, left) : null, rightConnectionMarkup = right ? /* @__PURE__ */ React2.createElement(Item.Item, {
        position: "right"
      }, right) : null;
      return /* @__PURE__ */ React2.createElement("div", {
        className: Connected_module.default.Connected
      }, leftConnectionMarkup, /* @__PURE__ */ React2.createElement(Item.Item, {
        position: "primary"
      }, children), rightConnectionMarkup);
    }
    exports.Connected = Connected;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TextField/components/Resizer/Resizer.js
var require_Resizer = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TextField/components/Resizer/Resizer.js"(exports) {
    "use strict";
    var React2 = require_react(), useIsomorphicLayoutEffect = require_use_isomorphic_layout_effect(), TextField_module = require_TextField_css(), EventListener = require_EventListener();
    function Resizer({
      contents,
      currentHeight: currentHeightProp = null,
      minimumLines,
      onHeightChange
    }) {
      let contentNode = React2.useRef(null), minimumLinesNode = React2.useRef(null), animationFrame = React2.useRef(), currentHeight = React2.useRef(currentHeightProp);
      currentHeightProp !== currentHeight.current && (currentHeight.current = currentHeightProp), React2.useEffect(() => () => {
        animationFrame.current && cancelAnimationFrame(animationFrame.current);
      }, []);
      let minimumLinesMarkup = minimumLines ? /* @__PURE__ */ React2.createElement("div", {
        ref: minimumLinesNode,
        className: TextField_module.default.DummyInput,
        dangerouslySetInnerHTML: {
          __html: getContentsForMinimumLines(minimumLines)
        }
      }) : null, handleHeightCheck = React2.useCallback(() => {
        animationFrame.current && cancelAnimationFrame(animationFrame.current), animationFrame.current = requestAnimationFrame(() => {
          if (!contentNode.current || !minimumLinesNode.current)
            return;
          let newHeight = Math.max(contentNode.current.offsetHeight, minimumLinesNode.current.offsetHeight);
          newHeight !== currentHeight.current && onHeightChange(newHeight);
        });
      }, [onHeightChange]);
      return useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
        handleHeightCheck();
      }), /* @__PURE__ */ React2.createElement("div", {
        "aria-hidden": !0,
        className: TextField_module.default.Resizer
      }, /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
        event: "resize",
        handler: handleHeightCheck
      }), /* @__PURE__ */ React2.createElement("div", {
        ref: contentNode,
        className: TextField_module.default.DummyInput,
        dangerouslySetInnerHTML: {
          __html: getFinalContents(contents)
        }
      }), minimumLinesMarkup);
    }
    var ENTITIES_TO_REPLACE = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      "\n": "<br>",
      "\r": ""
    }, REPLACE_REGEX = new RegExp(`[${Object.keys(ENTITIES_TO_REPLACE).join()}]`, "g");
    function replaceEntity(entity) {
      return ENTITIES_TO_REPLACE[entity];
    }
    function getContentsForMinimumLines(minimumLines) {
      let content = "";
      for (let line = 0; line < minimumLines; line++)
        content += "<br>";
      return content;
    }
    function getFinalContents(contents) {
      return contents ? `${contents.replace(REPLACE_REGEX, replaceEntity)}<br>` : "<br>";
    }
    exports.Resizer = Resizer;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TextField/TextField.js
var require_TextField = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TextField/TextField.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), useIsAfterInitialMount = require_use_is_after_initial_mount(), types = require_types(), useEventListener = require_use_event_listener(), TextField_module = require_TextField_css(), Spinner$1 = require_Spinner2(), Labelled = require_Labelled(), Connected = require_Connected(), Resizer = require_Resizer(), Label = require_Label(), hooks = require_hooks2(), Icon2 = require_Icon(), Text3 = require_Text(), Spinner2 = require_Spinner();
    function TextField2({
      prefix,
      suffix,
      verticalContent,
      placeholder,
      value = "",
      helpText,
      label,
      labelAction,
      labelHidden,
      disabled,
      clearButton,
      readOnly,
      autoFocus,
      focused,
      multiline,
      error,
      connectedRight,
      connectedLeft,
      type = "text",
      name,
      id: idProp,
      role,
      step,
      largeStep,
      autoComplete,
      max,
      maxLength,
      maxHeight,
      min,
      minLength,
      pattern,
      inputMode,
      spellCheck,
      ariaOwns,
      ariaControls,
      ariaExpanded,
      ariaActiveDescendant,
      ariaAutocomplete,
      showCharacterCount,
      align,
      requiredIndicator,
      monospaced,
      selectTextOnFocus,
      suggestion,
      variant = "inherit",
      size = "medium",
      onClearButtonClick,
      onChange,
      onSpinnerChange,
      onFocus,
      onBlur,
      tone,
      autoSize,
      loading
    }) {
      let i18n = hooks.useI18n(), [height, setHeight] = React2.useState(null), [focus, setFocus] = React2.useState(Boolean(focused)), isAfterInitial = useIsAfterInitialMount.useIsAfterInitialMount(), uniqId = React2.useId(), id = idProp ?? uniqId, textFieldRef = React2.useRef(null), inputRef = React2.useRef(null), textAreaRef = React2.useRef(null), prefixRef = React2.useRef(null), suffixRef = React2.useRef(null), loadingRef = React2.useRef(null), verticalContentRef = React2.useRef(null), buttonPressTimer = React2.useRef(), spinnerRef = React2.useRef(null), getInputRef = React2.useCallback(() => multiline ? textAreaRef.current : inputRef.current, [multiline]);
      React2.useEffect(() => {
        let input2 = getInputRef();
        !input2 || focused === void 0 || (focused ? input2.focus() : input2.blur());
      }, [focused, verticalContent, getInputRef]), React2.useEffect(() => {
        let input2 = inputRef.current;
        !input2 || !(type === "text" || type === "tel" || type === "search" || type === "url" || type === "password") || !suggestion || input2.setSelectionRange(value.length, suggestion.length);
      }, [focus, value, type, suggestion]);
      let normalizedValue = suggestion || value, normalizedStep = step ?? 1, normalizedMax = max ?? 1 / 0, normalizedMin = min ?? -1 / 0, className = css.classNames(TextField_module.default.TextField, Boolean(normalizedValue) && TextField_module.default.hasValue, disabled && TextField_module.default.disabled, readOnly && TextField_module.default.readOnly, error && TextField_module.default.error, tone && TextField_module.default[css.variationName("tone", tone)], multiline && TextField_module.default.multiline, focus && !disabled && TextField_module.default.focus, variant !== "inherit" && TextField_module.default[variant], size === "slim" && TextField_module.default.slim), inputType = type === "currency" ? "text" : type, isNumericType = type === "number" || type === "integer", iconPrefix = /* @__PURE__ */ React2.isValidElement(prefix) && prefix.type === Icon2.Icon, prefixMarkup = prefix ? /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(TextField_module.default.Prefix, iconPrefix && TextField_module.default.PrefixIcon),
        id: `${id}-Prefix`,
        ref: prefixRef
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "bodyMd"
      }, prefix)) : null, suffixMarkup = suffix ? /* @__PURE__ */ React2.createElement("div", {
        className: TextField_module.default.Suffix,
        id: `${id}-Suffix`,
        ref: suffixRef
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "bodyMd"
      }, suffix)) : null, loadingMarkup = loading ? /* @__PURE__ */ React2.createElement("div", {
        className: TextField_module.default.Loading,
        id: `${id}-Loading`,
        ref: loadingRef
      }, /* @__PURE__ */ React2.createElement(Spinner2.Spinner, {
        size: "small"
      })) : null, characterCountMarkup = null;
      if (showCharacterCount) {
        let characterCount = normalizedValue.length, characterCountLabel = maxLength ? i18n.translate("Polaris.TextField.characterCountWithMaxLength", {
          count: characterCount,
          limit: maxLength
        }) : i18n.translate("Polaris.TextField.characterCount", {
          count: characterCount
        }), characterCountClassName = css.classNames(TextField_module.default.CharacterCount, multiline && TextField_module.default.AlignFieldBottom), characterCountText = maxLength ? `${characterCount}/${maxLength}` : characterCount;
        characterCountMarkup = /* @__PURE__ */ React2.createElement("div", {
          id: `${id}-CharacterCounter`,
          className: characterCountClassName,
          "aria-label": characterCountLabel,
          "aria-live": focus ? "polite" : "off",
          "aria-atomic": "true",
          onClick: handleClickChild
        }, /* @__PURE__ */ React2.createElement(Text3.Text, {
          as: "span",
          variant: "bodyMd"
        }, characterCountText));
      }
      let clearButtonMarkup = clearButton && normalizedValue !== "" ? /* @__PURE__ */ React2.createElement("button", {
        type: "button",
        className: TextField_module.default.ClearButton,
        onClick: handleClearButtonPress,
        disabled
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        visuallyHidden: !0
      }, i18n.translate("Polaris.Common.clear")), /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.XCircleIcon,
        tone: "base"
      })) : null, handleNumberChange = React2.useCallback((steps, stepAmount = normalizedStep) => {
        if (onChange == null && onSpinnerChange == null)
          return;
        let dpl = (num) => (num.toString().split(".")[1] || []).length, numericValue = value ? parseFloat(value) : 0;
        if (isNaN(numericValue))
          return;
        let decimalPlaces = type === "integer" ? 0 : Math.max(dpl(numericValue), dpl(stepAmount)), newValue = Math.min(Number(normalizedMax), Math.max(numericValue + steps * stepAmount, Number(normalizedMin)));
        onSpinnerChange != null ? onSpinnerChange(String(newValue.toFixed(decimalPlaces)), id) : onChange?.(String(newValue.toFixed(decimalPlaces)), id);
      }, [id, normalizedMax, normalizedMin, onChange, onSpinnerChange, normalizedStep, type, value]), handleSpinnerButtonRelease = React2.useCallback(() => {
        clearTimeout(buttonPressTimer.current);
      }, []), handleSpinnerButtonPress = React2.useCallback((onChange2) => {
        let interval = 200, onChangeInterval = () => {
          interval > 50 && (interval -= 10), onChange2(0), buttonPressTimer.current = window.setTimeout(onChangeInterval, interval);
        };
        buttonPressTimer.current = window.setTimeout(onChangeInterval, interval), document.addEventListener("mouseup", handleSpinnerButtonRelease, {
          once: !0
        });
      }, [handleSpinnerButtonRelease]), spinnerMarkup = isNumericType && step !== 0 && !disabled && !readOnly ? /* @__PURE__ */ React2.createElement(Spinner$1.Spinner, {
        onClick: handleClickChild,
        onChange: handleNumberChange,
        onMouseDown: handleSpinnerButtonPress,
        onMouseUp: handleSpinnerButtonRelease,
        ref: spinnerRef,
        onBlur: handleOnBlur
      }) : null, style = multiline && height ? {
        height,
        maxHeight
      } : null, handleExpandingResize = React2.useCallback((height2) => {
        setHeight(height2);
      }, []), resizer = multiline && isAfterInitial ? /* @__PURE__ */ React2.createElement(Resizer.Resizer, {
        contents: normalizedValue || placeholder,
        currentHeight: height,
        minimumLines: typeof multiline == "number" ? multiline : 1,
        onHeightChange: handleExpandingResize
      }) : null, describedBy = [];
      error && describedBy.push(`${id}Error`), helpText && describedBy.push(Labelled.helpTextID(id)), showCharacterCount && describedBy.push(`${id}-CharacterCounter`);
      let labelledBy = [];
      prefix && labelledBy.push(`${id}-Prefix`), suffix && labelledBy.push(`${id}-Suffix`), verticalContent && labelledBy.push(`${id}-VerticalContent`), labelledBy.unshift(Label.labelID(id));
      let inputClassName = css.classNames(TextField_module.default.Input, align && TextField_module.default[css.variationName("Input-align", align)], suffix && TextField_module.default["Input-suffixed"], clearButton && TextField_module.default["Input-hasClearButton"], monospaced && TextField_module.default.monospaced, suggestion && TextField_module.default.suggestion, autoSize && TextField_module.default["Input-autoSize"]), handleOnFocus = (event) => {
        setFocus(!0), selectTextOnFocus && !suggestion && getInputRef()?.select(), onFocus && onFocus(event);
      };
      useEventListener.useEventListener("wheel", handleOnWheel, inputRef);
      function handleOnWheel(event) {
        document.activeElement === event.target && isNumericType && event.stopPropagation();
      }
      let input = /* @__PURE__ */ React2.createElement(multiline ? "textarea" : "input", {
        name,
        id,
        disabled,
        readOnly,
        role,
        autoFocus,
        value: normalizedValue,
        placeholder,
        style,
        autoComplete,
        className: inputClassName,
        ref: multiline ? textAreaRef : inputRef,
        min,
        max,
        step,
        minLength,
        maxLength,
        spellCheck,
        pattern,
        inputMode,
        type: inputType,
        rows: getRows(multiline),
        size: autoSize ? 1 : void 0,
        "aria-describedby": describedBy.length ? describedBy.join(" ") : void 0,
        "aria-labelledby": labelledBy.join(" "),
        "aria-invalid": Boolean(error),
        "aria-owns": ariaOwns,
        "aria-activedescendant": ariaActiveDescendant,
        "aria-autocomplete": ariaAutocomplete,
        "aria-controls": ariaControls,
        "aria-expanded": ariaExpanded,
        "aria-required": requiredIndicator,
        ...normalizeAriaMultiline(multiline),
        onFocus: handleOnFocus,
        onBlur: handleOnBlur,
        onClick: handleClickChild,
        onKeyPress: handleKeyPress,
        onKeyDown: handleKeyDown,
        onChange: suggestion ? void 0 : handleChange,
        onInput: suggestion ? handleChange : void 0,
        // 1Password disable data attribute
        "data-1p-ignore": autoComplete === "off" || void 0,
        // LastPass disable data attribute
        "data-lpignore": autoComplete === "off" || void 0,
        // Dashlane disable data attribute
        "data-form-type": autoComplete === "off" ? "other" : void 0
      }), inputWithVerticalContentMarkup = verticalContent ? /* @__PURE__ */ React2.createElement("div", {
        className: TextField_module.default.VerticalContent,
        id: `${id}-VerticalContent`,
        ref: verticalContentRef,
        onClick: handleClickChild
      }, verticalContent, input) : null, inputMarkup = verticalContent ? inputWithVerticalContentMarkup : input, backdropMarkup = /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(TextField_module.default.Backdrop, connectedLeft && TextField_module.default["Backdrop-connectedLeft"], connectedRight && TextField_module.default["Backdrop-connectedRight"])
      }), inputAndSuffixMarkup = autoSize ? /* @__PURE__ */ React2.createElement("div", {
        className: TextField_module.default.InputAndSuffixWrapper
      }, /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(TextField_module.default.AutoSizeWrapper, suffix && TextField_module.default.AutoSizeWrapperWithSuffix),
        "data-auto-size-value": value || placeholder
      }, inputMarkup), suffixMarkup) : /* @__PURE__ */ React2.createElement(React2.Fragment, null, inputMarkup, suffixMarkup);
      return /* @__PURE__ */ React2.createElement(Labelled.Labelled, {
        label,
        id,
        error,
        action: labelAction,
        labelHidden,
        helpText,
        requiredIndicator,
        disabled,
        readOnly
      }, /* @__PURE__ */ React2.createElement(Connected.Connected, {
        left: connectedLeft,
        right: connectedRight
      }, /* @__PURE__ */ React2.createElement("div", {
        className,
        onClick: handleClick,
        ref: textFieldRef
      }, prefixMarkup, inputAndSuffixMarkup, characterCountMarkup, loadingMarkup, clearButtonMarkup, spinnerMarkup, backdropMarkup, resizer)));
      function handleChange(event) {
        onChange && onChange(event.currentTarget.value, id);
      }
      function handleClick(event) {
        let {
          target
        } = event, inputRefRole = inputRef?.current?.getAttribute("role");
        if (target === inputRef.current && inputRefRole === "combobox") {
          inputRef.current?.focus(), handleOnFocus(event);
          return;
        }
        isPrefixOrSuffix(target) || isVerticalContent(target) || isInput(target) || isSpinner(target) || isLoadingSpinner(target) || focus || getInputRef()?.focus();
      }
      function handleClickChild(event) {
        !isSpinner(event.target) && !isInput(event.target) && event.stopPropagation(), !(isPrefixOrSuffix(event.target) || isVerticalContent(event.target) || isInput(event.target) || isLoadingSpinner(event.target) || focus) && (setFocus(!0), getInputRef()?.focus());
      }
      function handleClearButtonPress() {
        onClearButtonClick && onClearButtonClick(id);
      }
      function handleKeyPress(event) {
        let {
          key,
          which
        } = event, numbersSpec = /[\d.,eE+-]$/, integerSpec = /[\deE+-]$/;
        !isNumericType || which === types.Key.Enter || type === "number" && numbersSpec.test(key) || type === "integer" && integerSpec.test(key) || event.preventDefault();
      }
      function handleKeyDown(event) {
        if (!isNumericType)
          return;
        let {
          key,
          which
        } = event;
        type === "integer" && (key === "ArrowUp" || which === types.Key.UpArrow) && (handleNumberChange(1), event.preventDefault()), type === "integer" && (key === "ArrowDown" || which === types.Key.DownArrow) && (handleNumberChange(-1), event.preventDefault()), (which === types.Key.Home || key === "Home") && min !== void 0 && (onSpinnerChange != null ? onSpinnerChange(String(min), id) : onChange?.(String(min), id)), (which === types.Key.End || key === "End") && max !== void 0 && (onSpinnerChange != null ? onSpinnerChange(String(max), id) : onChange?.(String(max), id)), (which === types.Key.PageUp || key === "PageUp") && largeStep !== void 0 && handleNumberChange(1, largeStep), (which === types.Key.PageDown || key === "PageDown") && largeStep !== void 0 && handleNumberChange(-1, largeStep);
      }
      function handleOnBlur(event) {
        setFocus(!1), !textFieldRef.current?.contains(event?.relatedTarget) && onBlur && onBlur(event);
      }
      function isInput(target) {
        let input2 = getInputRef();
        return target instanceof HTMLElement && input2 && (input2.contains(target) || input2.contains(document.activeElement));
      }
      function isPrefixOrSuffix(target) {
        return target instanceof Element && (prefixRef.current && prefixRef.current.contains(target) || suffixRef.current && suffixRef.current.contains(target));
      }
      function isSpinner(target) {
        return target instanceof Element && spinnerRef.current && spinnerRef.current.contains(target);
      }
      function isLoadingSpinner(target) {
        return target instanceof Element && loadingRef.current && loadingRef.current.contains(target);
      }
      function isVerticalContent(target) {
        return target instanceof Element && verticalContentRef.current && (verticalContentRef.current.contains(target) || verticalContentRef.current.contains(document.activeElement));
      }
    }
    function getRows(multiline) {
      if (multiline)
        return typeof multiline == "number" ? multiline : 1;
    }
    function normalizeAriaMultiline(multiline) {
      if (multiline)
        return Boolean(multiline) || typeof multiline == "number" && multiline > 0 ? {
          "aria-multiline": !0
        } : void 0;
    }
    exports.TextField = TextField2;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionList/ActionList.js
var require_ActionList = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionList/ActionList.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), types = require_types(), focus = require_focus(), FilterActionsProvider = require_FilterActionsProvider(), Section = require_Section(), KeypressListener = require_KeypressListener(), TextField2 = require_TextField(), hooks = require_hooks2(), Box3 = require_Box(), Icon2 = require_Icon(), Item = require_Item(), FILTER_ACTIONS_THRESHOLD = 8;
    function ActionList({
      items,
      sections = [],
      actionRole,
      allowFiltering,
      onActionAnyItem
    }) {
      let i18n = hooks.useI18n(), filterActions = React2.useContext(FilterActionsProvider.FilterActionsContext), finalSections = [], actionListRef = React2.useRef(null), [searchText, setSearchText] = React2.useState("");
      items ? finalSections = [{
        items
      }, ...sections] : sections && (finalSections = sections);
      let isFilterable = finalSections?.some((section) => section.items.some((item) => typeof item.content == "string")), hasMultipleSections = finalSections.length > 1, elementRole = hasMultipleSections && actionRole === "menuitem" ? "menu" : void 0, elementTabIndex = hasMultipleSections && actionRole === "menuitem" ? -1 : void 0, filteredSections = finalSections?.map((section) => ({
        ...section,
        items: section.items.filter(({
          content
        }) => typeof content == "string" ? content?.toLowerCase().includes(searchText.toLowerCase()) : content)
      })), sectionMarkup = filteredSections.map((section, index) => section.items.length > 0 ? /* @__PURE__ */ React2.createElement(Section.Section, {
        key: typeof section.title == "string" ? section.title : index,
        section,
        hasMultipleSections,
        actionRole,
        onActionAnyItem,
        isFirst: index === 0
      }) : null), handleFocusPreviousItem = (evt) => {
        evt.preventDefault(), actionListRef.current && evt.target && actionListRef.current.contains(evt.target) && focus.wrapFocusPreviousFocusableMenuItem(actionListRef.current, evt.target);
      }, handleFocusNextItem = (evt) => {
        evt.preventDefault(), actionListRef.current && evt.target && actionListRef.current.contains(evt.target) && focus.wrapFocusNextFocusableMenuItem(actionListRef.current, evt.target);
      }, listeners = actionRole === "menuitem" ? /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
        keyEvent: "keydown",
        keyCode: types.Key.DownArrow,
        handler: handleFocusNextItem
      }), /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
        keyEvent: "keydown",
        keyCode: types.Key.UpArrow,
        handler: handleFocusPreviousItem
      })) : null, totalFilteredActions = React2.useMemo(() => filteredSections?.reduce((acc, section) => acc + section.items.length, 0) || 0, [filteredSections]), hasManyActions = (finalSections?.reduce((acc, section) => acc + section.items.length, 0) || 0) >= FILTER_ACTIONS_THRESHOLD;
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, (allowFiltering || filterActions) && hasManyActions && isFilterable && /* @__PURE__ */ React2.createElement(Box3.Box, {
        padding: "200",
        paddingBlockEnd: totalFilteredActions > 0 ? "0" : "200"
      }, /* @__PURE__ */ React2.createElement(TextField2.TextField, {
        clearButton: !0,
        labelHidden: !0,
        label: i18n.translate("Polaris.ActionList.SearchField.placeholder"),
        placeholder: i18n.translate("Polaris.ActionList.SearchField.placeholder"),
        autoComplete: "off",
        value: searchText,
        onChange: (value) => setSearchText(value),
        prefix: /* @__PURE__ */ React2.createElement(Icon2.Icon, {
          source: polarisIcons.SearchIcon
        }),
        onClearButtonClick: () => setSearchText("")
      })), /* @__PURE__ */ React2.createElement(Box3.Box, {
        as: hasMultipleSections ? "ul" : "div",
        ref: actionListRef,
        role: elementRole,
        tabIndex: elementTabIndex
      }, listeners, sectionMarkup));
    }
    ActionList.Item = Item.Item;
    exports.ActionList = ActionList;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionMenu/ActionMenu.css.js
var require_ActionMenu_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionMenu/ActionMenu.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ActionMenu: "Polaris-ActionMenu"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/RollupActions/RollupActions.css.js
var require_RollupActions_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/RollupActions/RollupActions.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      RollupActivator: "Polaris-ActionMenu-RollupActions__RollupActivator"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Popover/set-activator-attributes.js
var require_set_activator_attributes = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Popover/set-activator-attributes.js"(exports) {
    "use strict";
    function setActivatorAttributes(activator, {
      id,
      active = !1,
      ariaHaspopup,
      activatorDisabled = !1
    }) {
      activatorDisabled || (activator.tabIndex = activator.tabIndex || 0), activator.setAttribute("aria-controls", id), activator.setAttribute("aria-owns", id), activator.setAttribute("aria-expanded", String(active)), activator.setAttribute("data-state", active ? "open" : "closed"), ariaHaspopup != null && activator.setAttribute("aria-haspopup", String(ariaHaspopup));
    }
    exports.setActivatorAttributes = setActivatorAttributes;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/components.js
var require_components = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/components.js"(exports) {
    "use strict";
    var React2 = require_react();
    function wrapWithComponent(element, Component, props) {
      return element == null ? null : isElementOfType(element, Component) ? element : /* @__PURE__ */ React2.createElement(Component, props, element);
    }
    var isComponent = hotReloadComponentCheck;
    function isElementOfType(element, Component) {
      if (element == null || !/* @__PURE__ */ React2.isValidElement(element) || typeof element.type == "string")
        return !1;
      let {
        type: defaultType
      } = element, type = element.props?.__type__ || defaultType;
      return (Array.isArray(Component) ? Component : [Component]).some((AComponent) => typeof type != "string" && isComponent(AComponent, type));
    }
    function elementChildren(children, predicate = () => !0) {
      return React2.Children.toArray(children).filter((child) => /* @__PURE__ */ React2.isValidElement(child) && predicate(child));
    }
    function ConditionalWrapper({
      condition,
      wrapper,
      children
    }) {
      return condition ? wrapper(children) : children;
    }
    function ConditionalRender({
      condition,
      children
    }) {
      return condition ? children : null;
    }
    function hotReloadComponentCheck(AComponent, AnotherComponent) {
      let componentName = AComponent.name, anotherComponentName = AnotherComponent.displayName;
      return AComponent === AnotherComponent || Boolean(componentName) && componentName === anotherComponentName;
    }
    exports.ConditionalRender = ConditionalRender;
    exports.ConditionalWrapper = ConditionalWrapper;
    exports.elementChildren = elementChildren;
    exports.isElementOfType = isElementOfType;
    exports.wrapWithComponent = wrapWithComponent;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Popover/Popover.css.js
var require_Popover_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Popover/Popover.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Popover: "Polaris-Popover",
      PopoverOverlay: "Polaris-Popover__PopoverOverlay",
      "PopoverOverlay-noAnimation": "Polaris-Popover__PopoverOverlay--noAnimation",
      "PopoverOverlay-entering": "Polaris-Popover__PopoverOverlay--entering",
      "PopoverOverlay-open": "Polaris-Popover__PopoverOverlay--open",
      measuring: "Polaris-Popover--measuring",
      "PopoverOverlay-exiting": "Polaris-Popover__PopoverOverlay--exiting",
      fullWidth: "Polaris-Popover--fullWidth",
      Content: "Polaris-Popover__Content",
      positionedAbove: "Polaris-Popover--positionedAbove",
      positionedCover: "Polaris-Popover--positionedCover",
      ContentContainer: "Polaris-Popover__ContentContainer",
      "Content-fullHeight": "Polaris-Popover__Content--fullHeight",
      "Content-fluidContent": "Polaris-Popover__Content--fluidContent",
      Pane: "Polaris-Popover__Pane",
      "Pane-fixed": "Polaris-Popover__Pane--fixed",
      "Pane-subdued": "Polaris-Popover__Pane--subdued",
      "Pane-captureOverscroll": "Polaris-Popover__Pane--captureOverscroll",
      Section: "Polaris-Popover__Section",
      FocusTracker: "Polaris-Popover__FocusTracker",
      "PopoverOverlay-hideOnPrint": "Polaris-Popover__PopoverOverlay--hideOnPrint"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Popover/components/Section/Section.js
var require_Section2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Popover/components/Section/Section.js"(exports) {
    "use strict";
    var React2 = require_react(), Popover_module = require_Popover_css(), Box3 = require_Box();
    function Section({
      children
    }) {
      return /* @__PURE__ */ React2.createElement("div", {
        className: Popover_module.default.Section
      }, /* @__PURE__ */ React2.createElement(Box3.Box, {
        paddingInlineStart: "300",
        paddingInlineEnd: "300",
        paddingBlockStart: "200",
        paddingBlockEnd: "150"
      }, children));
    }
    exports.Section = Section;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Popover/components/Pane/Pane.js
var require_Pane = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Popover/components/Pane/Pane.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), components = require_components(), Popover_module = require_Popover_css(), Section = require_Section2(), Scrollable = require_Scrollable();
    function Pane({
      captureOverscroll = !1,
      fixed,
      sectioned,
      children,
      height,
      subdued,
      onScrolledToBottom
    }) {
      let className = css.classNames(Popover_module.default.Pane, fixed && Popover_module.default["Pane-fixed"], subdued && Popover_module.default["Pane-subdued"], captureOverscroll && Popover_module.default["Pane-captureOverscroll"]), content = sectioned ? components.wrapWithComponent(children, Section.Section, {}) : children, style = height ? {
        height,
        maxHeight: height,
        minHeight: height
      } : void 0;
      return fixed ? /* @__PURE__ */ React2.createElement("div", {
        style,
        className
      }, content) : /* @__PURE__ */ React2.createElement(Scrollable.Scrollable, {
        shadow: !0,
        className,
        style,
        onScrolledToBottom,
        scrollbarWidth: "thin"
      }, content);
    }
    exports.Pane = Pane;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Popover/components/PopoverOverlay/PopoverOverlay.js
var require_PopoverOverlay = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Popover/components/PopoverOverlay/PopoverOverlay.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisTokens = require("@shopify/polaris-tokens"), focus = require_focus(), css = require_css(), components = require_components(), types = require_types(), shared = require_shared(), Popover_module = require_Popover_css(), Pane = require_Pane(), context = require_context7(), EventListener = require_EventListener(), KeypressListener = require_KeypressListener(), PositionedOverlay = require_PositionedOverlay();
    exports.PopoverCloseSource = void 0;
    (function(PopoverCloseSource) {
      PopoverCloseSource[PopoverCloseSource.Click = 0] = "Click", PopoverCloseSource[PopoverCloseSource.EscapeKeypress = 1] = "EscapeKeypress", PopoverCloseSource[PopoverCloseSource.FocusOut = 2] = "FocusOut", PopoverCloseSource[PopoverCloseSource.ScrollOut = 3] = "ScrollOut";
    })(exports.PopoverCloseSource || (exports.PopoverCloseSource = {}));
    var TransitionStatus;
    (function(TransitionStatus2) {
      TransitionStatus2.Entering = "entering", TransitionStatus2.Entered = "entered", TransitionStatus2.Exiting = "exiting", TransitionStatus2.Exited = "exited";
    })(TransitionStatus || (TransitionStatus = {}));
    var PopoverOverlay = class extends React2.PureComponent {
      constructor(props) {
        super(props), this.state = {
          transitionStatus: this.props.active ? TransitionStatus.Entering : TransitionStatus.Exited
        }, this.contentNode = /* @__PURE__ */ React2.createRef(), this.renderPopover = (overlayDetails) => {
          let {
            measuring,
            desiredHeight,
            positioning
          } = overlayDetails, {
            id,
            children,
            sectioned,
            fullWidth,
            fullHeight,
            fluidContent,
            hideOnPrint,
            autofocusTarget,
            captureOverscroll
          } = this.props, isCovering = positioning === "cover", className = css.classNames(Popover_module.default.Popover, measuring && Popover_module.default.measuring, (fullWidth || isCovering) && Popover_module.default.fullWidth, hideOnPrint && Popover_module.default["PopoverOverlay-hideOnPrint"], positioning && Popover_module.default[css.variationName("positioned", positioning)]), contentStyles = measuring ? void 0 : {
            height: desiredHeight
          }, contentClassNames = css.classNames(Popover_module.default.Content, fullHeight && Popover_module.default["Content-fullHeight"], fluidContent && Popover_module.default["Content-fluidContent"]);
          return /* @__PURE__ */ React2.createElement("div", Object.assign({
            className
          }, shared.overlay.props), /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
            event: "click",
            handler: this.handleClick
          }), /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
            event: "touchstart",
            handler: this.handleClick
          }), /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
            keyCode: types.Key.Escape,
            handler: this.handleEscape
          }), /* @__PURE__ */ React2.createElement("div", {
            className: Popover_module.default.FocusTracker,
            tabIndex: 0,
            onFocus: this.handleFocusFirstItem
          }), /* @__PURE__ */ React2.createElement("div", {
            className: Popover_module.default.ContentContainer
          }, /* @__PURE__ */ React2.createElement("div", {
            id,
            tabIndex: autofocusTarget === "none" ? void 0 : -1,
            className: contentClassNames,
            style: contentStyles,
            ref: this.contentNode
          }, renderPopoverContent(children, {
            captureOverscroll,
            sectioned
          }))), /* @__PURE__ */ React2.createElement("div", {
            className: Popover_module.default.FocusTracker,
            tabIndex: 0,
            onFocus: this.handleFocusLastItem
          }));
        }, this.handleClick = (event) => {
          let target = event.target, {
            contentNode,
            props: {
              activator,
              onClose,
              preventCloseOnChildOverlayClick
            }
          } = this, composedPath = event.composedPath(), wasDescendant = preventCloseOnChildOverlayClick ? wasPolarisPortalDescendant(composedPath, this.context.container) : wasContentNodeDescendant(composedPath, contentNode), isActivatorDescendant = nodeContainsDescendant(activator, target);
          wasDescendant || isActivatorDescendant || this.state.transitionStatus !== TransitionStatus.Entered || onClose(exports.PopoverCloseSource.Click);
        }, this.handleScrollOut = () => {
          this.props.onClose(exports.PopoverCloseSource.ScrollOut);
        }, this.handleEscape = (event) => {
          let target = event.target, {
            contentNode,
            props: {
              activator
            }
          } = this, composedPath = event.composedPath(), wasDescendant = wasContentNodeDescendant(composedPath, contentNode), isActivatorDescendant = nodeContainsDescendant(activator, target);
          (wasDescendant || isActivatorDescendant) && this.props.onClose(exports.PopoverCloseSource.EscapeKeypress);
        }, this.handleFocusFirstItem = () => {
          this.props.onClose(exports.PopoverCloseSource.FocusOut);
        }, this.handleFocusLastItem = () => {
          this.props.onClose(exports.PopoverCloseSource.FocusOut);
        }, this.overlayRef = /* @__PURE__ */ React2.createRef();
      }
      forceUpdatePosition() {
        this.overlayRef.current?.forceUpdatePosition();
      }
      changeTransitionStatus(transitionStatus, cb) {
        this.setState({
          transitionStatus
        }, cb), this.contentNode.current && this.contentNode.current.getBoundingClientRect();
      }
      componentDidMount() {
        this.props.active && (this.focusContent(), this.changeTransitionStatus(TransitionStatus.Entered));
      }
      componentDidUpdate(oldProps) {
        this.props.active && !oldProps.active && (this.focusContent(), this.changeTransitionStatus(TransitionStatus.Entering, () => {
          this.clearTransitionTimeout(), this.enteringTimer = window.setTimeout(() => {
            this.setState({
              transitionStatus: TransitionStatus.Entered
            });
          }, parseInt(polarisTokens.themeDefault.motion["motion-duration-100"], 10));
        })), !this.props.active && oldProps.active && (this.clearTransitionTimeout(), this.setState({
          transitionStatus: TransitionStatus.Exited
        }));
      }
      componentWillUnmount() {
        this.clearTransitionTimeout();
      }
      render() {
        let {
          active,
          activator,
          fullWidth,
          preferredPosition = "below",
          preferredAlignment = "center",
          preferInputActivator = !0,
          fixed,
          zIndexOverride
        } = this.props, {
          transitionStatus
        } = this.state;
        if (transitionStatus === TransitionStatus.Exited && !active)
          return null;
        let className = css.classNames(Popover_module.default.PopoverOverlay, transitionStatus === TransitionStatus.Entering && Popover_module.default["PopoverOverlay-entering"], transitionStatus === TransitionStatus.Entered && Popover_module.default["PopoverOverlay-open"], transitionStatus === TransitionStatus.Exiting && Popover_module.default["PopoverOverlay-exiting"], preferredPosition === "cover" && Popover_module.default["PopoverOverlay-noAnimation"]);
        return /* @__PURE__ */ React2.createElement(PositionedOverlay.PositionedOverlay, {
          ref: this.overlayRef,
          fullWidth,
          active,
          activator,
          preferInputActivator,
          preferredPosition,
          preferredAlignment,
          render: this.renderPopover.bind(this),
          fixed,
          onScrollOut: this.handleScrollOut,
          classNames: className,
          zIndexOverride
        });
      }
      clearTransitionTimeout() {
        this.enteringTimer && window.clearTimeout(this.enteringTimer);
      }
      focusContent() {
        let {
          autofocusTarget = "container"
        } = this.props;
        autofocusTarget === "none" || this.contentNode == null || requestAnimationFrame(() => {
          if (this.contentNode.current == null)
            return;
          let focusableChild = focus.findFirstKeyboardFocusableNode(this.contentNode.current);
          focusableChild && autofocusTarget === "first-node" ? focusableChild.focus({
            preventScroll: !0
          }) : this.contentNode.current.focus({
            preventScroll: !0
          });
        });
      }
      // eslint-disable-next-line @shopify/react-no-multiple-render-methods
    };
    PopoverOverlay.contextType = context.PortalsManagerContext;
    function renderPopoverContent(children, props) {
      let childrenArray = React2.Children.toArray(children);
      return components.isElementOfType(childrenArray[0], Pane.Pane) ? childrenArray : components.wrapWithComponent(childrenArray, Pane.Pane, props);
    }
    function nodeContainsDescendant(rootNode, descendant) {
      if (rootNode === descendant)
        return !0;
      let parent = descendant.parentNode;
      for (; parent != null; ) {
        if (parent === rootNode)
          return !0;
        parent = parent.parentNode;
      }
      return !1;
    }
    function wasContentNodeDescendant(composedPath, contentNode) {
      return contentNode.current != null && composedPath.includes(contentNode.current);
    }
    function wasPolarisPortalDescendant(composedPath, portalsContainerElement) {
      return composedPath.some((eventTarget) => eventTarget instanceof Node && portalsContainerElement?.contains(eventTarget));
    }
    exports.PopoverOverlay = PopoverOverlay;
    exports.nodeContainsDescendant = nodeContainsDescendant;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Popover/Popover.js
var require_Popover = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Popover/Popover.js"(exports) {
    "use strict";
    var React2 = require_react(), focus = require_focus(), shared = require_shared(), setActivatorAttributes = require_set_activator_attributes(), PopoverOverlay = require_PopoverOverlay(), Pane = require_Pane(), Section = require_Section2(), Portal = require_Portal(), PopoverComponent = /* @__PURE__ */ React2.forwardRef(function({
      activatorWrapper = "div",
      children,
      onClose,
      activator,
      preventFocusOnClose,
      active,
      fixed,
      ariaHaspopup,
      preferInputActivator = !0,
      zIndexOverride,
      ...rest
    }, ref) {
      let [activatorNode, setActivatorNode] = React2.useState(), overlayRef = React2.useRef(null), activatorContainer = React2.useRef(null), WrapperComponent = activatorWrapper, id = React2.useId();
      function forceUpdatePosition() {
        overlayRef.current?.forceUpdatePosition();
      }
      React2.useImperativeHandle(ref, () => ({
        forceUpdatePosition
      }));
      let setAccessibilityAttributes = React2.useCallback(() => {
        if (activatorContainer.current == null)
          return;
        let focusableActivator = focus.findFirstFocusableNodeIncludingDisabled(activatorContainer.current) || activatorContainer.current, activatorDisabled = "disabled" in focusableActivator && Boolean(focusableActivator.disabled);
        setActivatorAttributes.setActivatorAttributes(focusableActivator, {
          id,
          active,
          ariaHaspopup,
          activatorDisabled
        });
      }, [id, active, ariaHaspopup]), handleClose = (source) => {
        if (onClose(source), !(activatorContainer.current == null || preventFocusOnClose)) {
          if (source === PopoverOverlay.PopoverCloseSource.FocusOut && activatorNode) {
            let focusableActivator = focus.findFirstFocusableNodeIncludingDisabled(activatorNode) || focus.findFirstFocusableNodeIncludingDisabled(activatorContainer.current) || activatorContainer.current;
            focus.focusNextFocusableNode(focusableActivator, isInPortal) || focusableActivator.focus();
          } else if (source === PopoverOverlay.PopoverCloseSource.EscapeKeypress && activatorNode) {
            let focusableActivator = focus.findFirstFocusableNodeIncludingDisabled(activatorNode) || focus.findFirstFocusableNodeIncludingDisabled(activatorContainer.current) || activatorContainer.current;
            focusableActivator ? focusableActivator.focus() : focus.focusNextFocusableNode(focusableActivator, isInPortal);
          }
        }
      };
      React2.useEffect(() => {
        (!activatorNode && activatorContainer.current || activatorNode && activatorContainer.current && !activatorContainer.current.contains(activatorNode)) && setActivatorNode(activatorContainer.current.firstElementChild), setAccessibilityAttributes();
      }, [activatorNode, setAccessibilityAttributes]), React2.useEffect(() => {
        activatorNode && activatorContainer.current && setActivatorNode(activatorContainer.current.firstElementChild), setAccessibilityAttributes();
      }, [activatorNode, setAccessibilityAttributes]);
      let portal = activatorNode ? /* @__PURE__ */ React2.createElement(Portal.Portal, {
        idPrefix: "popover"
      }, /* @__PURE__ */ React2.createElement(PopoverOverlay.PopoverOverlay, Object.assign({
        ref: overlayRef,
        id,
        activator: activatorNode,
        preferInputActivator,
        onClose: handleClose,
        active,
        fixed,
        zIndexOverride
      }, rest), children)) : null;
      return /* @__PURE__ */ React2.createElement(WrapperComponent, {
        ref: activatorContainer
      }, React2.Children.only(activator), portal);
    });
    function isInPortal(element) {
      let parentElement = element.parentElement;
      for (; parentElement; ) {
        if (parentElement.matches(shared.portal.selector))
          return !1;
        parentElement = parentElement.parentElement;
      }
      return !0;
    }
    var Popover = Object.assign(PopoverComponent, {
      Pane: Pane.Pane,
      Section: Section.Section
    });
    Object.defineProperty(exports, "PopoverCloseSource", {
      enumerable: !0,
      get: function() {
        return PopoverOverlay.PopoverCloseSource;
      }
    });
    exports.Popover = Popover;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/RollupActions/RollupActions.js
var require_RollupActions = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/RollupActions/RollupActions.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), useToggle = require_use_toggle(), RollupActions_module = require_RollupActions_css(), hooks = require_hooks2(), Button3 = require_Button(), Popover = require_Popover(), ActionList = require_ActionList();
    function RollupActions({
      accessibilityLabel,
      items = [],
      sections = []
    }) {
      let i18n = hooks.useI18n(), {
        value: rollupOpen,
        toggle: toggleRollupOpen
      } = useToggle.useToggle(!1);
      if (items.length === 0 && sections.length === 0)
        return null;
      let activatorMarkup = /* @__PURE__ */ React2.createElement("div", {
        className: RollupActions_module.default.RollupActivator
      }, /* @__PURE__ */ React2.createElement(Button3.Button, {
        icon: polarisIcons.MenuHorizontalIcon,
        accessibilityLabel: accessibilityLabel || i18n.translate("Polaris.ActionMenu.RollupActions.rollupButton"),
        onClick: toggleRollupOpen
      }));
      return /* @__PURE__ */ React2.createElement(Popover.Popover, {
        active: rollupOpen,
        activator: activatorMarkup,
        preferredAlignment: "right",
        onClose: toggleRollupOpen,
        hideOnPrint: !0
      }, /* @__PURE__ */ React2.createElement(ActionList.ActionList, {
        items,
        sections,
        onActionAnyItem: toggleRollupOpen
      }));
    }
    exports.RollupActions = RollupActions;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/Actions/Actions.css.js
var require_Actions_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/Actions/Actions.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ActionsLayoutOuter: "Polaris-ActionMenu-Actions__ActionsLayoutOuter",
      ActionsLayout: "Polaris-ActionMenu-Actions__ActionsLayout",
      "ActionsLayout--measuring": "Polaris-ActionMenu-Actions--actionsLayoutMeasuring",
      ActionsLayoutMeasurer: "Polaris-ActionMenu-Actions__ActionsLayoutMeasurer"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/Actions/utilities.js
var require_utilities = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/Actions/utilities.js"(exports) {
    "use strict";
    function getVisibleAndHiddenActionsIndices(actions = [], groups = [], disclosureWidth, actionsWidths, containerWidth) {
      let sumTabWidths = actionsWidths.reduce((sum, width) => sum + width, 0), arrayOfActionsIndices = actions.map((_, index) => index), arrayOfGroupsIndices = groups.map((_, index) => index), visibleActions = [], hiddenActions = [], visibleGroups = [], hiddenGroups = [];
      if (containerWidth > sumTabWidths)
        visibleActions.push(...arrayOfActionsIndices), visibleGroups.push(...arrayOfGroupsIndices);
      else {
        let accumulatedWidth = 0;
        arrayOfActionsIndices.forEach((currentActionsIndex) => {
          let currentActionsWidth = actionsWidths[currentActionsIndex];
          if (accumulatedWidth + currentActionsWidth >= containerWidth - disclosureWidth) {
            hiddenActions.push(currentActionsIndex);
            return;
          }
          visibleActions.push(currentActionsIndex), accumulatedWidth += currentActionsWidth;
        }), arrayOfGroupsIndices.forEach((currentGroupsIndex) => {
          let currentActionsWidth = actionsWidths[currentGroupsIndex + actions.length];
          if (accumulatedWidth + currentActionsWidth >= containerWidth - disclosureWidth) {
            hiddenGroups.push(currentGroupsIndex);
            return;
          }
          visibleGroups.push(currentGroupsIndex), accumulatedWidth += currentActionsWidth;
        });
      }
      return {
        visibleActions,
        hiddenActions,
        visibleGroups,
        hiddenGroups
      };
    }
    exports.getVisibleAndHiddenActionsIndices = getVisibleAndHiddenActionsIndices;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/MenuGroup/MenuGroup.css.js
var require_MenuGroup_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/MenuGroup/MenuGroup.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Details: "Polaris-ActionMenu-MenuGroup__Details"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/SecondaryAction/SecondaryAction.css.js
var require_SecondaryAction_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/SecondaryAction/SecondaryAction.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      SecondaryAction: "Polaris-ActionMenu-SecondaryAction",
      critical: "Polaris-ActionMenu-SecondaryAction--critical"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/SecondaryAction/SecondaryAction.js
var require_SecondaryAction = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/SecondaryAction/SecondaryAction.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), SecondaryAction_module = require_SecondaryAction_css(), Button3 = require_Button(), Tooltip = require_Tooltip();
    function SecondaryAction({
      children,
      tone,
      helpText,
      onAction,
      destructive,
      ...rest
    }) {
      let buttonMarkup = /* @__PURE__ */ React2.createElement(Button3.Button, Object.assign({
        onClick: onAction,
        tone: destructive ? "critical" : void 0
      }, rest), children), actionMarkup = helpText ? /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, {
        preferredPosition: "below",
        content: helpText
      }, buttonMarkup) : buttonMarkup;
      return /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(SecondaryAction_module.default.SecondaryAction, tone === "critical" && SecondaryAction_module.default.critical)
      }, actionMarkup);
    }
    exports.SecondaryAction = SecondaryAction;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/MenuGroup/MenuGroup.js
var require_MenuGroup = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/MenuGroup/MenuGroup.js"(exports) {
    "use strict";
    var React2 = require_react(), MenuGroup_module = require_MenuGroup_css(), Popover = require_Popover(), ActionList = require_ActionList(), SecondaryAction = require_SecondaryAction();
    function MenuGroup({
      accessibilityLabel,
      active,
      actions,
      details,
      title,
      icon,
      disabled,
      onClick,
      onClose,
      onOpen,
      sections
    }) {
      let handleClose = React2.useCallback(() => {
        onClose(title);
      }, [onClose, title]), handleOpen = React2.useCallback(() => {
        onOpen(title);
      }, [onOpen, title]), handleClick = React2.useCallback(() => {
        onClick ? onClick(handleOpen) : handleOpen();
      }, [onClick, handleOpen]), popoverActivator = /* @__PURE__ */ React2.createElement(SecondaryAction.SecondaryAction, {
        disclosure: !0,
        disabled,
        icon,
        accessibilityLabel,
        onClick: handleClick
      }, title);
      return /* @__PURE__ */ React2.createElement(Popover.Popover, {
        active: Boolean(active),
        activator: popoverActivator,
        preferredAlignment: "left",
        onClose: handleClose,
        hideOnPrint: !0
      }, /* @__PURE__ */ React2.createElement(ActionList.ActionList, {
        items: actions,
        sections,
        onActionAnyItem: handleClose
      }), details && /* @__PURE__ */ React2.createElement("div", {
        className: MenuGroup_module.default.Details
      }, details));
    }
    exports.MenuGroup = MenuGroup;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/Actions/components/ActionsMeasurer/ActionsMeasurer.js
var require_ActionsMeasurer = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/Actions/components/ActionsMeasurer/ActionsMeasurer.js"(exports) {
    "use strict";
    var React2 = require_react(), useEventListener = require_use_event_listener(), Actions_module = require_Actions_css(), hooks = require_hooks2(), SecondaryAction = require_SecondaryAction(), ACTION_SPACING = 8;
    function ActionsMeasurer({
      actions = [],
      groups = [],
      handleMeasurement: handleMeasurementProp
    }) {
      let i18n = hooks.useI18n(), containerNode = React2.useRef(null), defaultRollupGroup = {
        title: i18n.translate("Polaris.ActionMenu.Actions.moreActions"),
        actions: []
      }, activator = /* @__PURE__ */ React2.createElement(SecondaryAction.SecondaryAction, {
        disclosure: !0
      }, defaultRollupGroup.title), handleMeasurement = React2.useCallback(() => {
        if (!containerNode.current)
          return;
        let containerWidth = containerNode.current.offsetWidth, hiddenActionNodes = containerNode.current.children, hiddenActionsWidths = Array.from(hiddenActionNodes).map((node) => Math.ceil(node.getBoundingClientRect().width) + ACTION_SPACING), disclosureWidth = hiddenActionsWidths.pop() || 0;
        handleMeasurementProp({
          containerWidth,
          disclosureWidth,
          hiddenActionsWidths
        });
      }, [handleMeasurementProp]);
      React2.useEffect(() => {
        handleMeasurement();
      }, [handleMeasurement, actions, groups]);
      let actionsMarkup = actions.map((action8) => {
        let {
          content,
          onAction,
          ...rest
        } = action8;
        return /* @__PURE__ */ React2.createElement(SecondaryAction.SecondaryAction, Object.assign({
          key: content,
          onClick: onAction
        }, rest), content);
      }), groupsMarkup = groups.map((group) => {
        let {
          title,
          icon
        } = group;
        return /* @__PURE__ */ React2.createElement(SecondaryAction.SecondaryAction, {
          key: title,
          disclosure: !0,
          icon
        }, title);
      });
      return useEventListener.useEventListener("resize", handleMeasurement), /* @__PURE__ */ React2.createElement("div", {
        className: Actions_module.default.ActionsLayoutMeasurer,
        ref: containerNode
      }, actionsMarkup, groupsMarkup, activator);
    }
    exports.ActionsMeasurer = ActionsMeasurer;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/Actions/Actions.js
var require_Actions = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/Actions/Actions.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Actions_module = require_Actions_css(), utilities = require_utilities(), MenuGroup = require_MenuGroup(), ActionsMeasurer = require_ActionsMeasurer(), hooks = require_hooks2(), SecondaryAction = require_SecondaryAction();
    function Actions({
      actions,
      groups,
      onActionRollup
    }) {
      let i18n = hooks.useI18n(), rollupActiveRef = React2.useRef(null), [activeMenuGroup, setActiveMenuGroup] = React2.useState(void 0), [state, setState] = React2.useReducer((data, partialData) => ({
        ...data,
        ...partialData
      }), {
        disclosureWidth: 0,
        containerWidth: 1 / 0,
        actionsWidths: [],
        visibleActions: [],
        hiddenActions: [],
        visibleGroups: [],
        hiddenGroups: [],
        hasMeasured: !1
      }), {
        visibleActions,
        hiddenActions,
        visibleGroups,
        hiddenGroups,
        containerWidth,
        disclosureWidth,
        actionsWidths,
        hasMeasured
      } = state, defaultRollupGroup = {
        title: i18n.translate("Polaris.ActionMenu.Actions.moreActions"),
        actions: []
      }, handleMenuGroupToggle = React2.useCallback((group) => setActiveMenuGroup(activeMenuGroup ? void 0 : group), [activeMenuGroup]), handleMenuGroupClose = React2.useCallback(() => setActiveMenuGroup(void 0), []);
      React2.useEffect(() => {
        if (containerWidth === 0)
          return;
        let {
          visibleActions: visibleActions2,
          visibleGroups: visibleGroups2,
          hiddenActions: hiddenActions2,
          hiddenGroups: hiddenGroups2
        } = utilities.getVisibleAndHiddenActionsIndices(actions, groups, disclosureWidth, actionsWidths, containerWidth);
        setState({
          visibleActions: visibleActions2,
          visibleGroups: visibleGroups2,
          hiddenActions: hiddenActions2,
          hiddenGroups: hiddenGroups2,
          hasMeasured: containerWidth !== 1 / 0
        });
      }, [containerWidth, disclosureWidth, actions, groups, actionsWidths, setState]);
      let actionsOrDefault = React2.useMemo(() => actions ?? [], [actions]), groupsOrDefault = React2.useMemo(() => groups ?? [], [groups]), actionsMarkup = actionsOrDefault.filter((_, index) => !!visibleActions.includes(index)).map((action8) => {
        let {
          content,
          onAction,
          ...rest
        } = action8;
        return /* @__PURE__ */ React2.createElement(SecondaryAction.SecondaryAction, Object.assign({
          key: content,
          onClick: onAction
        }, rest), content);
      }), filteredGroups = (hiddenGroups.length > 0 || hiddenActions.length > 0 ? [...groupsOrDefault, defaultRollupGroup] : [...groupsOrDefault]).filter((group, index) => {
        let hasNoGroupsProp = groupsOrDefault.length === 0, isVisibleGroup = visibleGroups.includes(index), isDefaultGroup = group === defaultRollupGroup;
        return hasNoGroupsProp ? hiddenActions.length > 0 : isDefaultGroup ? !0 : isVisibleGroup;
      }), hiddenActionObjects = hiddenActions.map((index) => actionsOrDefault[index]).filter((action8) => action8 != null), hiddenGroupObjects = hiddenGroups.map((index) => groupsOrDefault[index]).filter((group) => group != null), groupsMarkup = filteredGroups.map((group) => {
        let {
          title,
          actions: groupActions,
          ...rest
        } = group, isDefaultGroup = group === defaultRollupGroup, allHiddenItems = [...hiddenActionObjects, ...hiddenGroupObjects], [finalRolledUpActions, finalRolledUpSectionGroups] = allHiddenItems.reduce(([actions2, sections], action8) => (isMenuGroup(action8) ? sections.push({
          title: action8.title,
          items: action8.actions.map((sectionAction) => ({
            ...sectionAction,
            disabled: action8.disabled || sectionAction.disabled
          }))
        }) : actions2.push(action8), [actions2, sections]), [[], []]);
        return isDefaultGroup ? /* @__PURE__ */ React2.createElement(MenuGroup.MenuGroup, Object.assign({
          key: title,
          title,
          active: title === activeMenuGroup,
          actions: [...finalRolledUpActions, ...groupActions],
          sections: finalRolledUpSectionGroups
        }, rest, {
          onOpen: handleMenuGroupToggle,
          onClose: handleMenuGroupClose
        })) : /* @__PURE__ */ React2.createElement(MenuGroup.MenuGroup, Object.assign({
          key: title,
          title,
          active: title === activeMenuGroup,
          actions: groupActions
        }, rest, {
          onOpen: handleMenuGroupToggle,
          onClose: handleMenuGroupClose
        }));
      }), handleMeasurement = React2.useCallback((measurements) => {
        let {
          hiddenActionsWidths: actionsWidths2,
          containerWidth: containerWidth2,
          disclosureWidth: disclosureWidth2
        } = measurements, {
          visibleActions: visibleActions2,
          hiddenActions: hiddenActions2,
          visibleGroups: visibleGroups2,
          hiddenGroups: hiddenGroups2
        } = utilities.getVisibleAndHiddenActionsIndices(actionsOrDefault, groupsOrDefault, disclosureWidth2, actionsWidths2, containerWidth2);
        if (onActionRollup) {
          let isRollupActive = hiddenActions2.length > 0 || hiddenGroups2.length > 0;
          rollupActiveRef.current !== isRollupActive && (onActionRollup(isRollupActive), rollupActiveRef.current = isRollupActive);
        }
        setState({
          visibleActions: visibleActions2,
          hiddenActions: hiddenActions2,
          visibleGroups: visibleGroups2,
          hiddenGroups: hiddenGroups2,
          actionsWidths: actionsWidths2,
          containerWidth: containerWidth2,
          disclosureWidth: disclosureWidth2,
          hasMeasured: !0
        });
      }, [actionsOrDefault, groupsOrDefault, onActionRollup]), actionsMeasurer = /* @__PURE__ */ React2.createElement(ActionsMeasurer.ActionsMeasurer, {
        actions,
        groups,
        handleMeasurement
      });
      return /* @__PURE__ */ React2.createElement("div", {
        className: Actions_module.default.ActionsLayoutOuter
      }, actionsMeasurer, /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Actions_module.default.ActionsLayout, !hasMeasured && Actions_module.default["ActionsLayout--measuring"])
      }, actionsMarkup, groupsMarkup));
    }
    function isMenuGroup(actionOrMenuGroup) {
      return "title" in actionOrMenuGroup;
    }
    exports.Actions = Actions;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionMenu/ActionMenu.js
var require_ActionMenu = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionMenu/ActionMenu.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), ActionMenu_module = require_ActionMenu_css(), RollupActions = require_RollupActions(), Actions = require_Actions();
    function ActionMenu({
      actions = [],
      groups = [],
      rollup,
      rollupActionsLabel,
      onActionRollup
    }) {
      if (actions.length === 0 && groups.length === 0)
        return null;
      let actionMenuClassNames = css.classNames(ActionMenu_module.default.ActionMenu, rollup && ActionMenu_module.default.rollup), rollupSections = groups.map((group) => convertGroupToSection(group));
      return /* @__PURE__ */ React2.createElement("div", {
        className: actionMenuClassNames
      }, rollup ? /* @__PURE__ */ React2.createElement(RollupActions.RollupActions, {
        accessibilityLabel: rollupActionsLabel,
        items: actions,
        sections: rollupSections
      }) : /* @__PURE__ */ React2.createElement(Actions.Actions, {
        actions,
        groups,
        onActionRollup
      }));
    }
    function hasGroupsWithActions(groups = []) {
      return groups.length === 0 ? !1 : groups.some((group) => group.actions.length > 0);
    }
    function convertGroupToSection({
      title,
      actions,
      disabled
    }) {
      return {
        title,
        items: actions.map((action8) => ({
          ...action8,
          disabled: disabled || action8.disabled
        }))
      };
    }
    exports.ActionMenu = ActionMenu;
    exports.hasGroupsWithActions = hasGroupsWithActions;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/options.js
var require_options = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/options.js"(exports) {
    "use strict";
    function isSection(arr) {
      return typeof arr[0] == "object" && Object.prototype.hasOwnProperty.call(arr[0], "options");
    }
    exports.isSection = isSection;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Autocomplete/Autocomplete.css.js
var require_Autocomplete_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Autocomplete/Autocomplete.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Loading: "Polaris-Autocomplete__Loading",
      SectionWrapper: "Polaris-Autocomplete__SectionWrapper"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Autocomplete/components/MappedOption/MappedOption.css.js
var require_MappedOption_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Autocomplete/components/MappedOption/MappedOption.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Content: "Polaris-Autocomplete-MappedOption__Content",
      Media: "Polaris-Autocomplete-MappedOption__Media",
      singleSelectionMedia: "Polaris-Autocomplete-MappedOption--singleSelectionMedia",
      disabledMedia: "Polaris-Autocomplete-MappedOption--disabledMedia"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/Listbox.css.js
var require_Listbox_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/Listbox.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Listbox: "Polaris-Listbox"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/combobox/context.js
var require_context11 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/combobox/context.js"(exports) {
    "use strict";
    var React2 = require_react(), ComboboxTextFieldContext = /* @__PURE__ */ React2.createContext(void 0), ComboboxListboxContext = /* @__PURE__ */ React2.createContext({}), ComboboxListboxOptionContext = /* @__PURE__ */ React2.createContext({});
    exports.ComboboxListboxContext = ComboboxListboxContext;
    exports.ComboboxListboxOptionContext = ComboboxListboxOptionContext;
    exports.ComboboxTextFieldContext = ComboboxTextFieldContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/combobox/hooks.js
var require_hooks5 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/combobox/hooks.js"(exports) {
    "use strict";
    var React2 = require_react(), context = require_context11();
    function useComboboxTextField() {
      let context$1 = React2.useContext(context.ComboboxTextFieldContext);
      if (!context$1)
        throw new Error("No Combobox was provided. Your component must be wrapped in a <Combobox> component.");
      return context$1;
    }
    function useComboboxListbox() {
      return React2.useContext(context.ComboboxListboxContext);
    }
    exports.useComboboxListbox = useComboboxListbox;
    exports.useComboboxTextField = useComboboxTextField;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/listbox/utilities.js
var require_utilities2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/listbox/utilities.js"(exports) {
    "use strict";
    function scrollOptionIntoView(option, scrollable) {
      let listTop = scrollable.scrollTop, listBottom = listTop + scrollable.clientHeight, {
        offsetHeight: optionHeight
      } = option, {
        offsetTop: optionTop
      } = option, optionBottom = optionTop + optionHeight;
      if (!(optionTop > listTop && optionBottom < listBottom)) {
        let top = 0;
        optionBottom > listBottom ? top = optionBottom + optionHeight * 0.85 - listBottom : optionTop < listTop && (top = optionTop - optionHeight * 0.15 - listTop), requestAnimationFrame(() => {
          scrollable.scrollBy({
            top,
            behavior: "auto"
          });
        });
      }
    }
    exports.scrollOptionIntoView = scrollOptionIntoView;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/listbox/context.js
var require_context12 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/listbox/context.js"(exports) {
    "use strict";
    var React2 = require_react(), ListboxContext = /* @__PURE__ */ React2.createContext(void 0), WithinListboxContext = /* @__PURE__ */ React2.createContext(!1), ActionContext = /* @__PURE__ */ React2.createContext(!1);
    exports.ActionContext = ActionContext;
    exports.ListboxContext = ListboxContext;
    exports.WithinListboxContext = WithinListboxContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/TextOption/TextOption.css.js
var require_TextOption_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/TextOption/TextOption.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      TextOption: "Polaris-Listbox-TextOption",
      allowMultiple: "Polaris-Listbox-TextOption--allowMultiple",
      isAction: "Polaris-Listbox-TextOption--isAction",
      disabled: "Polaris-Listbox-TextOption--disabled",
      selected: "Polaris-Listbox-TextOption--selected",
      Content: "Polaris-Listbox-TextOption__Content",
      Checkbox: "Polaris-Listbox-TextOption__Checkbox"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Checkbox/Checkbox.css.js
var require_Checkbox_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Checkbox/Checkbox.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Checkbox: "Polaris-Checkbox",
      ChoiceLabel: "Polaris-Checkbox__ChoiceLabel",
      Backdrop: "Polaris-Checkbox__Backdrop",
      Input: "Polaris-Checkbox__Input",
      "Input-indeterminate": "Polaris-Checkbox__Input--indeterminate",
      Icon: "Polaris-Checkbox__Icon",
      animated: "Polaris-Checkbox--animated",
      toneMagic: "Polaris-Checkbox--toneMagic",
      hover: "Polaris-Checkbox--hover",
      error: "Polaris-Checkbox--error",
      checked: "Polaris-Checkbox--checked",
      pathAnimation: "Polaris-Checkbox--pathAnimation"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Choice/Choice.css.js
var require_Choice_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Choice/Choice.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Choice: "Polaris-Choice",
      labelHidden: "Polaris-Choice--labelHidden",
      Label: "Polaris-Choice__Label",
      Control: "Polaris-Choice__Control",
      disabled: "Polaris-Choice--disabled",
      toneMagic: "Polaris-Choice--toneMagic",
      Descriptions: "Polaris-Choice__Descriptions",
      HelpText: "Polaris-Choice__HelpText"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Choice/Choice.js
var require_Choice = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Choice/Choice.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Choice_module = require_Choice_css(), Text3 = require_Text(), InlineError = require_InlineError();
    function Choice({
      id,
      label,
      disabled,
      error,
      children,
      labelHidden,
      helpText,
      onClick,
      labelClassName,
      fill,
      bleed,
      bleedBlockStart,
      bleedBlockEnd,
      bleedInlineStart,
      bleedInlineEnd,
      tone
    }) {
      let className = css.classNames(Choice_module.default.Choice, labelHidden && Choice_module.default.labelHidden, disabled && Choice_module.default.disabled, tone && Choice_module.default[css.variationName("tone", tone)], labelClassName), labelStyle = {
        // Pass through overrides for bleed values if they're set by the prop
        ...css.getResponsiveProps("choice", "bleed-block-end", "space", bleedBlockEnd || bleed),
        ...css.getResponsiveProps("choice", "bleed-block-start", "space", bleedBlockStart || bleed),
        ...css.getResponsiveProps("choice", "bleed-inline-start", "space", bleedInlineStart || bleed),
        ...css.getResponsiveProps("choice", "bleed-inline-end", "space", bleedInlineEnd || bleed),
        ...Object.fromEntries(Object.entries(css.getResponsiveValue("choice", "fill", fill)).map(
          // Map "true" => "100%" and "false" => "auto" for use in
          // inline/block-size calc()
          ([key, value]) => [key, value ? "100%" : "auto"]
        ))
      }, labelMarkup = (
        // NOTE: Can't use a Box here for a few reasons:
        // - as="label" fails `Element` typecheck (even though the JS works)
        // - Can't pass hard coded values to padding (forced to tokens)
        // - Can't pass negative values to padding
        // - Can't pass margins at all
        /* @__PURE__ */ React2.createElement("label", {
          className,
          htmlFor: id,
          onClick,
          style: css.sanitizeCustomProperties(labelStyle)
        }, /* @__PURE__ */ React2.createElement("span", {
          className: Choice_module.default.Control
        }, children), /* @__PURE__ */ React2.createElement("span", {
          className: Choice_module.default.Label
        }, /* @__PURE__ */ React2.createElement(Text3.Text, {
          as: "span",
          variant: "bodyMd"
        }, label)))
      ), helpTextMarkup = helpText ? /* @__PURE__ */ React2.createElement("div", {
        className: Choice_module.default.HelpText,
        id: helpTextID(id)
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        tone: disabled ? void 0 : "subdued"
      }, helpText)) : null, errorMarkup = error && typeof error != "boolean" && /* @__PURE__ */ React2.createElement("div", {
        className: Choice_module.default.Error
      }, /* @__PURE__ */ React2.createElement(InlineError.InlineError, {
        message: error,
        fieldID: id
      })), descriptionMarkup = helpTextMarkup || errorMarkup ? /* @__PURE__ */ React2.createElement("div", {
        className: Choice_module.default.Descriptions
      }, errorMarkup, helpTextMarkup) : null;
      return descriptionMarkup ? /* @__PURE__ */ React2.createElement("div", null, labelMarkup, descriptionMarkup) : labelMarkup;
    }
    function helpTextID(id) {
      return `${id}HelpText`;
    }
    exports.Choice = Choice;
    exports.helpTextID = helpTextID;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Checkbox/Checkbox.js
var require_Checkbox = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Checkbox/Checkbox.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), context = require_context12(), Checkbox_module = require_Checkbox_css(), Choice = require_Choice(), InlineError = require_InlineError(), Icon2 = require_Icon(), Checkbox = /* @__PURE__ */ React2.forwardRef(function({
      ariaControls,
      ariaDescribedBy: ariaDescribedByProp,
      label,
      labelHidden,
      checked = !1,
      helpText,
      disabled,
      id: idProp,
      name,
      value,
      error,
      onChange,
      onFocus,
      onBlur,
      labelClassName,
      fill,
      bleed,
      bleedBlockStart,
      bleedBlockEnd,
      bleedInlineStart,
      bleedInlineEnd,
      tone
    }, ref) {
      let inputNode = React2.useRef(null), uniqId = React2.useId(), id = idProp ?? uniqId, isWithinListbox = React2.useContext(context.WithinListboxContext);
      React2.useImperativeHandle(ref, () => ({
        focus: () => {
          inputNode.current && inputNode.current.focus();
        }
      }));
      let handleBlur = () => {
        onBlur && onBlur();
      }, handleOnClick = () => {
        onChange == null || inputNode.current == null || disabled || (onChange(inputNode.current.checked, id), inputNode.current.focus());
      }, describedBy = [];
      error && typeof error != "boolean" && describedBy.push(InlineError.errorTextID(id)), helpText && describedBy.push(Choice.helpTextID(id)), ariaDescribedByProp && describedBy.push(ariaDescribedByProp);
      let ariaDescribedBy = describedBy.length ? describedBy.join(" ") : void 0, wrapperClassName = css.classNames(Checkbox_module.default.Checkbox, error && Checkbox_module.default.error), isIndeterminate = checked === "indeterminate", isChecked = !isIndeterminate && Boolean(checked), indeterminateAttributes = isIndeterminate ? {
        indeterminate: "true",
        "aria-checked": "mixed"
      } : {
        "aria-checked": isChecked
      }, iconSource = /* @__PURE__ */ React2.createElement("svg", {
        viewBox: "0 0 16 16",
        shapeRendering: "geometricPrecision",
        textRendering: "geometricPrecision"
      }, /* @__PURE__ */ React2.createElement("path", {
        className: css.classNames(checked && Checkbox_module.default.checked),
        d: "M1.5,5.5L3.44655,8.22517C3.72862,8.62007,4.30578,8.64717,4.62362,8.28044L10.5,1.5",
        transform: "translate(2 2.980376)",
        opacity: "0",
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        pathLength: "1"
      })), inputClassName = css.classNames(Checkbox_module.default.Input, isIndeterminate && Checkbox_module.default["Input-indeterminate"], tone && Checkbox_module.default[css.variationName("tone", tone)]), extraChoiceProps = {
        helpText,
        error,
        bleed,
        bleedBlockStart,
        bleedBlockEnd,
        bleedInlineStart,
        bleedInlineEnd
      };
      return /* @__PURE__ */ React2.createElement(Choice.Choice, Object.assign({
        id,
        label,
        labelHidden,
        disabled,
        labelClassName: css.classNames(Checkbox_module.default.ChoiceLabel, labelClassName),
        fill,
        tone
      }, extraChoiceProps), /* @__PURE__ */ React2.createElement("span", {
        className: wrapperClassName
      }, /* @__PURE__ */ React2.createElement("input", Object.assign({
        ref: inputNode,
        id,
        name,
        value,
        type: "checkbox",
        checked: isChecked,
        disabled,
        className: inputClassName,
        onBlur: handleBlur,
        onChange: noop,
        onClick: handleOnClick,
        onFocus,
        "aria-invalid": error != null,
        "aria-controls": ariaControls,
        "aria-describedby": ariaDescribedBy,
        role: isWithinListbox ? "presentation" : "checkbox"
      }, indeterminateAttributes)), /* @__PURE__ */ React2.createElement("span", {
        className: Checkbox_module.default.Backdrop,
        onClick: stopPropagation,
        onKeyUp: stopPropagation
      }), /* @__PURE__ */ React2.createElement("span", {
        className: css.classNames(Checkbox_module.default.Icon, !isIndeterminate && Checkbox_module.default.animated)
      }, isIndeterminate ? /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.MinusIcon
      }) : iconSource)));
    });
    function noop() {
    }
    function stopPropagation(event) {
      event.stopPropagation();
    }
    exports.Checkbox = Checkbox;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/TextOption/TextOption.js
var require_TextOption = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/TextOption/TextOption.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), context = require_context11(), context$1 = require_context12(), TextOption_module = require_TextOption_css(), Checkbox = require_Checkbox(), Box3 = require_Box(), InlineStack3 = require_InlineStack(), Icon2 = require_Icon(), TextOption = /* @__PURE__ */ React2.memo(function({
      children,
      selected,
      disabled
    }) {
      let {
        allowMultiple
      } = React2.useContext(context.ComboboxListboxOptionContext), isAction = React2.useContext(context$1.ActionContext), textOptionClassName = css.classNames(TextOption_module.default.TextOption, selected && !allowMultiple && TextOption_module.default.selected, disabled && TextOption_module.default.disabled, allowMultiple && TextOption_module.default.allowMultiple, isAction && TextOption_module.default.isAction), optionMarkup = selected ? /* @__PURE__ */ React2.createElement(Box3.Box, {
        width: "100%"
      }, /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        wrap: !1,
        align: "space-between",
        gap: "200"
      }, children, /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        align: "end"
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.CheckIcon
      })))) : /* @__PURE__ */ React2.createElement(React2.Fragment, null, children);
      return /* @__PURE__ */ React2.createElement("div", {
        className: textOptionClassName
      }, /* @__PURE__ */ React2.createElement("div", {
        className: TextOption_module.default.Content
      }, allowMultiple && !isAction ? /* @__PURE__ */ React2.createElement("div", {
        className: TextOption_module.default.Checkbox
      }, /* @__PURE__ */ React2.createElement(Checkbox.Checkbox, {
        disabled,
        checked: selected,
        label: children
      })) : optionMarkup));
    });
    exports.TextOption = TextOption;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Loading/Loading.css.js
var require_Loading_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Loading/Loading.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ListItem: "Polaris-Listbox-Loading__ListItem",
      Loading: "Polaris-Listbox-Loading"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/listbox/hooks.js
var require_hooks6 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/listbox/hooks.js"(exports) {
    "use strict";
    var React2 = require_react(), context = require_context12();
    function useListbox() {
      let listbox = React2.useContext(context.ListboxContext);
      if (!listbox)
        throw new Error("No Listbox was provided. Listbox components must be wrapped in a Listbox");
      return listbox;
    }
    exports.useListbox = useListbox;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Loading/Loading.js
var require_Loading = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Loading/Loading.js"(exports) {
    "use strict";
    var React2 = require_react(), Loading_module = require_Loading_css(), hooks = require_hooks6(), Spinner2 = require_Spinner(), Loading = /* @__PURE__ */ React2.memo(function({
      children,
      accessibilityLabel: label
    }) {
      let {
        setLoading
      } = hooks.useListbox();
      return React2.useEffect(() => (setLoading(label), () => {
        setLoading(void 0);
      }), [label, setLoading]), /* @__PURE__ */ React2.createElement("li", {
        className: Loading_module.default.ListItem,
        role: "presentation"
      }, children || /* @__PURE__ */ React2.createElement("div", {
        className: Loading_module.default.Loading
      }, /* @__PURE__ */ React2.createElement(Spinner2.Spinner, {
        size: "small",
        accessibilityLabel: label
      })));
    });
    exports.Loading = Loading;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Section/selectors.js
var require_selectors = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Section/selectors.js"(exports) {
    "use strict";
    var listboxSectionDataSelector = {
      props: {
        "data-polaris-listbox-section-item": !0
      },
      selector: "[data-polaris-listbox-section-item]"
    }, listboxWithinSectionDataSelector = {
      attribute: "data-polaris-listbox-within-section-item"
    };
    exports.listboxSectionDataSelector = listboxSectionDataSelector;
    exports.listboxWithinSectionDataSelector = listboxWithinSectionDataSelector;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Section/context.js
var require_context13 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Section/context.js"(exports) {
    "use strict";
    var React2 = require_react(), SectionContext = /* @__PURE__ */ React2.createContext(null);
    exports.SectionContext = SectionContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Section/Section.css.js
var require_Section_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Section/Section.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      SectionGroup: "Polaris-Listbox-Section__SectionGroup",
      noDivider: "Polaris-Listbox-Section--noDivider"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Section/Section.js
var require_Section3 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Section/Section.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), selectors = require_selectors(), context = require_context13(), Section_module = require_Section_css();
    function Section({
      children,
      divider = !0,
      title
    }) {
      let id = React2.useId();
      return /* @__PURE__ */ React2.createElement(context.SectionContext.Provider, {
        value: id
      }, /* @__PURE__ */ React2.createElement("li", Object.assign({
        role: "presentation"
      }, selectors.listboxSectionDataSelector.props), title, /* @__PURE__ */ React2.createElement("ul", {
        role: "group",
        "aria-labelledby": id,
        className: css.classNames(Section_module.default.SectionGroup, !divider && Section_module.default.noDivider)
      }, children)));
    }
    exports.Section = Section;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Section/hooks.js
var require_hooks7 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Section/hooks.js"(exports) {
    "use strict";
    var React2 = require_react(), context = require_context13();
    function useSection() {
      return React2.useContext(context.SectionContext);
    }
    exports.useSection = useSection;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Header/Header.js
var require_Header = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Header/Header.js"(exports) {
    "use strict";
    var React2 = require_react(), hooks = require_hooks7(), Box3 = require_Box(), Text3 = require_Text();
    function Header({
      children
    }) {
      let sectionId = hooks.useSection() || "", content = typeof children == "string" ? /* @__PURE__ */ React2.createElement(Box3.Box, {
        paddingBlockStart: "200",
        paddingInlineStart: "400",
        paddingBlockEnd: "200",
        paddingInlineEnd: "400"
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "headingSm",
        tone: "subdued"
      }, children)) : children;
      return /* @__PURE__ */ React2.createElement("div", {
        "aria-hidden": !0,
        id: sectionId
      }, content);
    }
    exports.Header = Header;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Action/Action.css.js
var require_Action_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Action/Action.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Action: "Polaris-Listbox-Action",
      ActionDivider: "Polaris-Listbox-Action__ActionDivider",
      Icon: "Polaris-Listbox-Action__Icon"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Option/Option.css.js
var require_Option_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Option/Option.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Option: "Polaris-Listbox-Option",
      divider: "Polaris-Listbox-Option--divider"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/autocomplete/context.js
var require_context14 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/autocomplete/context.js"(exports) {
    "use strict";
    var React2 = require_react(), MappedActionContext = /* @__PURE__ */ React2.createContext({});
    exports.MappedActionContext = MappedActionContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Option/Option.js
var require_Option = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Option/Option.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), context = require_context12(), Option_module = require_Option_css(), hooks = require_hooks6(), context$1 = require_context14(), hooks$1 = require_hooks7(), selectors = require_selectors(), TextOption = require_TextOption(), UnstyledLink = require_UnstyledLink(), Option = /* @__PURE__ */ React2.memo(function({
      value,
      children,
      selected,
      disabled = !1,
      accessibilityLabel,
      divider
    }) {
      let {
        onOptionSelect
      } = hooks.useListbox(), isAction = React2.useContext(context.ActionContext), {
        role,
        url,
        external,
        onAction,
        destructive
      } = React2.useContext(context$1.MappedActionContext), listItemRef = React2.useRef(null), domId = React2.useId(), sectionId = hooks$1.useSection(), isWithinSection = Boolean(sectionId), handleOptionSelect = React2.useCallback((event) => {
        event.preventDefault(), event.stopPropagation(), onAction && onAction(), listItemRef.current && !onAction && onOptionSelect({
          domId,
          value,
          element: listItemRef.current,
          disabled
        });
      }, [domId, onOptionSelect, value, disabled, onAction]), handleMouseDown = (event) => {
        event.preventDefault();
      }, content = typeof children == "string" ? /* @__PURE__ */ React2.createElement(TextOption.TextOption, {
        selected,
        disabled
      }, children) : children, sectionAttributes = {
        [selectors.listboxWithinSectionDataSelector.attribute]: isWithinSection
      }, legacyRoleSupport = role || "option", contentMarkup = url ? /* @__PURE__ */ React2.createElement(UnstyledLink.UnstyledLink, {
        url,
        external
      }, content) : content;
      return /* @__PURE__ */ React2.createElement("li", Object.assign({}, sectionAttributes, {
        "data-listbox-option": !0,
        "data-listbox-option-action": isAction,
        "data-listbox-option-value": value,
        "data-listbox-option-destructive": destructive,
        "data-within-section": isWithinSection,
        className: css.classNames(Option_module.default.Option, divider && Option_module.default.divider),
        id: domId,
        ref: listItemRef,
        tabIndex: -1,
        role: legacyRoleSupport,
        "aria-label": accessibilityLabel,
        "aria-selected": selected,
        "aria-disabled": disabled,
        onClick: disabled ? void 0 : handleOptionSelect,
        onKeyDown: disabled ? void 0 : handleOptionSelect,
        onMouseDown: handleMouseDown
      }), contentMarkup);
    });
    exports.Option = Option;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Action/Action.js
var require_Action = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Action/Action.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), context = require_context12(), Action_module = require_Action_css(), Option = require_Option(), TextOption = require_TextOption(), Icon2 = require_Icon();
    function Action(props) {
      let {
        selected,
        disabled,
        children,
        icon,
        divider
      } = props, iconMarkup = icon && /* @__PURE__ */ React2.createElement("div", {
        className: Action_module.default.Icon
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        tone: "subdued",
        source: icon
      })), className = css.classNames(Action_module.default.Action, divider && Action_module.default.ActionDivider);
      return /* @__PURE__ */ React2.createElement(context.ActionContext.Provider, {
        value: !0
      }, /* @__PURE__ */ React2.createElement(Option.Option, props, /* @__PURE__ */ React2.createElement("div", {
        className
      }, /* @__PURE__ */ React2.createElement(TextOption.TextOption, {
        selected,
        disabled
      }, iconMarkup, children))));
    }
    exports.Action = Action;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/Listbox.js
var require_Listbox = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/Listbox.js"(exports) {
    "use strict";
    var React2 = require_react(), debounce = require_debounce(), useToggle = require_use_toggle(), types = require_types(), shared = require_shared(), Listbox_module = require_Listbox_css(), hooks = require_hooks5(), utilities = require_utilities2(), context = require_context12(), TextOption = require_TextOption(), Loading = require_Loading(), Section = require_Section3(), Header = require_Header(), Action = require_Action(), KeypressListener = require_KeypressListener(), Text3 = require_Text(), Option = require_Option();
    exports.AutoSelection = void 0;
    (function(AutoSelection) {
      AutoSelection.FirstSelected = "FIRST_SELECTED", AutoSelection.First = "FIRST", AutoSelection.None = "NONE";
    })(exports.AutoSelection || (exports.AutoSelection = {}));
    var OPTION_SELECTOR = "[data-listbox-option]", OPTION_VALUE_ATTRIBUTE = "data-listbox-option-value", OPTION_ACTION_ATTRIBUTE = "data-listbox-option-action", OPTION_FOCUS_ATTRIBUTE = "data-focused";
    function Listbox({
      children,
      autoSelection = exports.AutoSelection.FirstSelected,
      enableKeyboardControl,
      accessibilityLabel,
      customListId,
      onSelect,
      onActiveOptionChange
    }) {
      let [loading, setLoading] = React2.useState(), [activeOption, setActiveOption] = React2.useState(), [lazyLoading, setLazyLoading] = React2.useState(!1), [currentOptions, setCurrentOptions] = React2.useState([]), {
        value: keyboardEventsEnabled,
        setTrue: enableKeyboardEvents,
        setFalse: disableKeyboardEvents
      } = useToggle.useToggle(Boolean(enableKeyboardControl)), uniqueId = React2.useId(), listId = customListId || uniqueId, scrollableRef = React2.useRef(null), listboxRef = React2.useRef(null), {
        listboxId,
        textFieldLabelId,
        textFieldFocused,
        willLoadMoreOptions,
        setActiveOptionId,
        setListboxId,
        onOptionSelected,
        onKeyToBottom
      } = hooks.useComboboxListbox(), inCombobox = Boolean(setActiveOptionId);
      React2.useEffect(() => {
        setListboxId && !listboxId && setListboxId(listId);
      }, [setListboxId, listboxId, listId]);
      let getNavigableOptions = React2.useCallback(() => listboxRef.current ? [...new Set(listboxRef.current.querySelectorAll(OPTION_SELECTOR))] : [], []), getFirstNavigableOption = React2.useCallback((currentOptions2) => {
        let hasSelectedOptions = currentOptions2.some((option) => option.getAttribute("aria-selected") === "true"), elementIndex = 0, element = currentOptions2.find((option, index) => {
          let isInteractable = option.getAttribute("aria-disabled") !== "true", isFirstNavigableOption;
          return hasSelectedOptions && autoSelection === exports.AutoSelection.FirstSelected ? isFirstNavigableOption = option.getAttribute("aria-selected") === "true" && isInteractable : isFirstNavigableOption = isInteractable, isFirstNavigableOption && (elementIndex = index), isFirstNavigableOption;
        });
        if (element)
          return {
            element,
            index: elementIndex
          };
      }, [autoSelection]), handleScrollIntoView = React2.useCallback((option) => {
        let {
          current: scrollable
        } = scrollableRef;
        scrollable && utilities.scrollOptionIntoView(option.element, scrollable);
      }, []), handleScrollIntoViewDebounced = debounce.debounce(handleScrollIntoView, 50), handleKeyToBottom = React2.useCallback(() => {
        if (onKeyToBottom)
          return setLazyLoading(!0), Promise.resolve(onKeyToBottom());
      }, [onKeyToBottom]), handleChangeActiveOption = React2.useCallback((nextOption) => {
        if (!nextOption)
          return setActiveOption(void 0);
        activeOption?.element.removeAttribute(OPTION_FOCUS_ATTRIBUTE), nextOption.element.setAttribute(OPTION_FOCUS_ATTRIBUTE, "true"), handleScrollIntoViewDebounced(nextOption), setActiveOption(nextOption), setActiveOptionId?.(nextOption.domId), onActiveOptionChange?.(nextOption.value, nextOption.domId);
      }, [activeOption, setActiveOptionId, onActiveOptionChange, handleScrollIntoViewDebounced]), getFormattedOption = React2.useCallback((element, index) => ({
        element,
        index,
        domId: element.id,
        value: element.getAttribute(OPTION_VALUE_ATTRIBUTE) || "",
        disabled: element.getAttribute("aria-disabled") === "true",
        isAction: element.getAttribute(OPTION_ACTION_ATTRIBUTE) === "true"
      }), []), resetActiveOption = React2.useCallback(() => {
        let nextOption, nextOptions = getNavigableOptions(), nextActiveOption = getFirstNavigableOption(nextOptions);
        if (nextOptions.length === 0 && currentOptions.length > 0) {
          setCurrentOptions(nextOptions), handleChangeActiveOption();
          return;
        }
        if (nextActiveOption) {
          let {
            element,
            index
          } = nextActiveOption;
          nextOption = getFormattedOption(element, index);
        }
        let optionIsAlreadyActive = activeOption !== void 0 && nextOption?.domId === activeOption?.domId, actionContentHasUpdated = activeOption?.isAction && nextOption?.isAction && nextOption?.value !== activeOption?.value, currentValues = currentOptions.map((option) => option.getAttribute(OPTION_VALUE_ATTRIBUTE)), nextValues = nextOptions.map((option) => option.getAttribute(OPTION_VALUE_ATTRIBUTE)), listIsUnchanged = nextValues.length === currentValues.length && nextValues.every((value, index) => currentValues[index] === value), listIsAppended = currentValues.length !== 0 && nextValues.length > currentValues.length && currentValues.every((value, index) => nextValues[index] === value);
        if (listIsUnchanged) {
          optionIsAlreadyActive && actionContentHasUpdated && (setCurrentOptions(nextOptions), handleChangeActiveOption(nextOption));
          return;
        }
        if (listIsAppended) {
          setCurrentOptions(nextOptions);
          return;
        }
        if (setCurrentOptions(nextOptions), lazyLoading) {
          setLazyLoading(!1);
          return;
        }
        handleChangeActiveOption(nextOption);
      }, [lazyLoading, currentOptions, activeOption, getFirstNavigableOption, getNavigableOptions, getFormattedOption, handleChangeActiveOption]);
      React2.useEffect(() => {
        autoSelection !== exports.AutoSelection.None && !loading && children && React2.Children.count(children) > 0 && resetActiveOption();
      }, [children, autoSelection, activeOption, loading, resetActiveOption]), React2.useEffect(() => {
        listboxRef.current && (scrollableRef.current = listboxRef.current.closest(shared.scrollable.selector));
      }, []), React2.useEffect(() => {
        enableKeyboardControl && !keyboardEventsEnabled && enableKeyboardEvents();
      }, [enableKeyboardControl, keyboardEventsEnabled, enableKeyboardEvents]);
      let onOptionSelect = React2.useCallback((option) => {
        handleChangeActiveOption(option), onOptionSelected && onOptionSelected(), onSelect && onSelect(option.value);
      }, [handleChangeActiveOption, onSelect, onOptionSelected]), getNextIndex = React2.useCallback((currentIndex, lastIndex, direction) => {
        let nextIndex;
        return direction === "down" ? currentIndex === lastIndex ? nextIndex = willLoadMoreOptions ? currentIndex + 1 : 0 : nextIndex = currentIndex + 1 : nextIndex = currentIndex === 0 ? lastIndex : currentIndex - 1, nextIndex;
      }, [willLoadMoreOptions]), getNextValidOption = React2.useCallback(async (key) => {
        let lastIndex = currentOptions.length - 1, currentIndex = activeOption?.index || 0, nextIndex = 0, element = activeOption?.element, totalOptions = -1;
        if (!activeOption && autoSelection === exports.AutoSelection.None) {
          let nextOptions = getNavigableOptions(), nextActiveOption = getFirstNavigableOption(nextOptions);
          return setCurrentOptions(nextOptions), {
            element: nextActiveOption?.element,
            nextIndex: nextActiveOption?.index || 0
          };
        }
        for (; totalOptions++ < lastIndex; ) {
          nextIndex = getNextIndex(currentIndex, lastIndex, key), element = currentOptions[nextIndex];
          let triggerLazyLoad = nextIndex >= lastIndex, isDisabled = element?.getAttribute("aria-disabled") === "true";
          if (triggerLazyLoad && willLoadMoreOptions && await handleKeyToBottom(), isDisabled) {
            currentIndex = nextIndex, element = void 0;
            continue;
          }
          break;
        }
        return {
          element,
          nextIndex
        };
      }, [autoSelection, currentOptions, activeOption, willLoadMoreOptions, getNextIndex, handleKeyToBottom, getFirstNavigableOption, getNavigableOptions]), handleArrow = React2.useCallback(async (type, event) => {
        event.preventDefault();
        let {
          element,
          nextIndex
        } = await getNextValidOption(type);
        if (!element)
          return;
        let nextOption = getFormattedOption(element, nextIndex);
        handleChangeActiveOption(nextOption);
      }, [getFormattedOption, getNextValidOption, handleChangeActiveOption]), handleDownArrow = React2.useCallback((event) => {
        handleArrow("down", event);
      }, [handleArrow]), handleUpArrow = React2.useCallback((event) => {
        handleArrow("up", event);
      }, [handleArrow]), handleEnter = React2.useCallback((event) => {
        event.preventDefault(), event.stopPropagation(), activeOption && onOptionSelect(activeOption);
      }, [activeOption, onOptionSelect]), handleFocus = React2.useCallback(() => {
        enableKeyboardControl || enableKeyboardEvents();
      }, [enableKeyboardControl, enableKeyboardEvents]), handleBlur = React2.useCallback((event) => {
        if (event.stopPropagation(), keyboardEventsEnabled) {
          let nextActiveOption = getFirstNavigableOption(currentOptions);
          if (nextActiveOption) {
            let {
              element,
              index
            } = nextActiveOption, nextOption = getFormattedOption(element, index);
            handleChangeActiveOption(nextOption);
          }
        }
        enableKeyboardControl || disableKeyboardEvents();
      }, [enableKeyboardControl, currentOptions, keyboardEventsEnabled, disableKeyboardEvents, getFirstNavigableOption, getFormattedOption, handleChangeActiveOption]), listeners = keyboardEventsEnabled || textFieldFocused ? /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
        keyEvent: "keydown",
        keyCode: types.Key.DownArrow,
        handler: handleDownArrow
      }), /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
        keyEvent: "keydown",
        keyCode: types.Key.UpArrow,
        handler: handleUpArrow
      }), /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
        keyEvent: "keydown",
        keyCode: types.Key.Enter,
        handler: handleEnter
      })) : null, listboxContext = React2.useMemo(() => ({
        onOptionSelect,
        setLoading
      }), [onOptionSelect]);
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, listeners, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        visuallyHidden: !0
      }, /* @__PURE__ */ React2.createElement("div", {
        "aria-live": "polite"
      }, loading || null)), /* @__PURE__ */ React2.createElement(context.ListboxContext.Provider, {
        value: listboxContext
      }, /* @__PURE__ */ React2.createElement(context.WithinListboxContext.Provider, {
        value: !0
      }, children ? /* @__PURE__ */ React2.createElement("ul", {
        tabIndex: 0,
        role: "listbox",
        className: Listbox_module.default.Listbox,
        "aria-label": inCombobox ? void 0 : accessibilityLabel,
        "aria-labelledby": textFieldLabelId,
        "aria-busy": Boolean(loading),
        "aria-activedescendant": activeOption && activeOption.domId,
        id: listId,
        onFocus: inCombobox ? void 0 : handleFocus,
        onBlur: inCombobox ? void 0 : handleBlur,
        ref: listboxRef
      }, children) : null)));
    }
    Listbox.Option = Option.Option;
    Listbox.TextOption = TextOption.TextOption;
    Listbox.Loading = Loading.Loading;
    Listbox.Section = Section.Section;
    Listbox.Header = Header.Header;
    Listbox.Action = Action.Action;
    exports.Listbox = Listbox;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Autocomplete/components/MappedOption/MappedOption.js
var require_MappedOption = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Autocomplete/components/MappedOption/MappedOption.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), MappedOption_module = require_MappedOption_css(), Listbox = require_Listbox(), MappedOption = /* @__PURE__ */ React2.memo(function({
      label,
      value,
      disabled,
      media,
      selected,
      singleSelection
    }) {
      let mediaClassNames = css.classNames(MappedOption_module.default.Media, disabled && MappedOption_module.default.disabledMedia, singleSelection && MappedOption_module.default.singleSelectionMedia), mediaMarkup = media ? /* @__PURE__ */ React2.createElement("div", {
        className: mediaClassNames
      }, media) : null, accessibilityLabel = typeof label == "string" ? label : void 0;
      return /* @__PURE__ */ React2.createElement(Listbox.Listbox.Option, {
        accessibilityLabel,
        key: value,
        selected,
        value,
        disabled
      }, /* @__PURE__ */ React2.createElement(Listbox.Listbox.TextOption, {
        selected,
        disabled
      }, /* @__PURE__ */ React2.createElement("div", {
        className: MappedOption_module.default.Content
      }, mediaMarkup, label)));
    });
    exports.MappedOption = MappedOption;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Combobox/Combobox.css.js
var require_Combobox_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Combobox/Combobox.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Listbox: "Polaris-Combobox__Listbox"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Combobox/components/TextField/TextField.js
var require_TextField2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Combobox/components/TextField/TextField.js"(exports) {
    "use strict";
    var React2 = require_react(), hooks = require_hooks5(), Label = require_Label(), TextField$1 = require_TextField();
    function TextField2({
      value,
      id: idProp,
      type = "text",
      ariaAutocomplete = "list",
      onFocus,
      onBlur,
      onChange,
      ...rest
    }) {
      let comboboxTextFieldContext = hooks.useComboboxTextField(), {
        activeOptionId,
        listboxId,
        expanded,
        setTextFieldFocused,
        setTextFieldLabelId,
        onTextFieldFocus,
        onTextFieldChange,
        onTextFieldBlur
      } = comboboxTextFieldContext, uniqueId = React2.useId(), textFieldId = React2.useMemo(() => idProp || uniqueId, [uniqueId, idProp]), labelId = React2.useMemo(() => Label.labelID(idProp || uniqueId), [uniqueId, idProp]);
      React2.useEffect(() => {
        setTextFieldLabelId && setTextFieldLabelId(labelId);
      }, [labelId, setTextFieldLabelId]);
      let handleFocus = React2.useCallback((event) => {
        onFocus && onFocus(event), onTextFieldFocus && onTextFieldFocus(), setTextFieldFocused && setTextFieldFocused(!0);
      }, [onFocus, onTextFieldFocus, setTextFieldFocused]), handleBlur = React2.useCallback((event) => {
        onBlur && onBlur(event), onTextFieldBlur && onTextFieldBlur(), setTextFieldFocused && setTextFieldFocused(!1);
      }, [onBlur, onTextFieldBlur, setTextFieldFocused]), handleChange = React2.useCallback((value2, id) => {
        onChange && onChange(value2, id), onTextFieldChange && onTextFieldChange(value2);
      }, [onChange, onTextFieldChange]);
      return /* @__PURE__ */ React2.createElement(TextField$1.TextField, Object.assign({}, rest, {
        value,
        id: textFieldId,
        type,
        ariaAutocomplete,
        "aria-haspopup": "listbox",
        ariaActiveDescendant: activeOptionId,
        ariaControls: listboxId,
        role: "combobox",
        ariaExpanded: expanded,
        onFocus: handleFocus,
        onBlur: handleBlur,
        onChange: handleChange
      }));
    }
    exports.TextField = TextField2;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Combobox/Combobox.js
var require_Combobox = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Combobox/Combobox.js"(exports) {
    "use strict";
    var React2 = require_react(), Combobox_module = require_Combobox_css(), context = require_context11(), TextField2 = require_TextField2(), Popover = require_Popover();
    function Combobox({
      activator,
      allowMultiple,
      children,
      preferredPosition = "below",
      willLoadMoreOptions,
      height,
      onScrolledToBottom,
      onClose
    }) {
      let [popoverActive, setPopoverActive] = React2.useState(!1), [activeOptionId, setActiveOptionId] = React2.useState(), [textFieldLabelId, setTextFieldLabelId] = React2.useState(), [listboxId, setListboxId] = React2.useState(), [textFieldFocused, setTextFieldFocused] = React2.useState(!1), shouldOpen = !popoverActive, popoverActiveWithChildren = popoverActive && React2.Children.count(children) > 0, ref = React2.useRef(null), handleClose = React2.useCallback(() => {
        setPopoverActive(!1), onClose?.(), setActiveOptionId(void 0);
      }, [onClose]), handleOpen = React2.useCallback(() => {
        setPopoverActive(!0), setActiveOptionId(void 0);
      }, []), onOptionSelected = React2.useCallback(() => {
        if (!allowMultiple) {
          handleClose(), setActiveOptionId(void 0);
          return;
        }
        ref.current?.forceUpdatePosition();
      }, [allowMultiple, handleClose]), handleFocus = React2.useCallback(() => {
        shouldOpen && handleOpen();
      }, [shouldOpen, handleOpen]), handleChange = React2.useCallback(() => {
        shouldOpen && handleOpen();
      }, [shouldOpen, handleOpen]), handleBlur = React2.useCallback(() => {
        popoverActive && handleClose();
      }, [popoverActive, handleClose]), textFieldContextValue = React2.useMemo(() => ({
        activeOptionId,
        expanded: popoverActive,
        listboxId,
        setTextFieldFocused,
        setTextFieldLabelId,
        onTextFieldFocus: handleFocus,
        onTextFieldChange: handleChange,
        onTextFieldBlur: handleBlur
      }), [activeOptionId, popoverActive, listboxId, setTextFieldFocused, setTextFieldLabelId, handleFocus, handleChange, handleBlur]), listboxOptionContextValue = React2.useMemo(() => ({
        allowMultiple
      }), [allowMultiple]), listboxContextValue = React2.useMemo(() => ({
        listboxId,
        textFieldLabelId,
        textFieldFocused,
        willLoadMoreOptions,
        onOptionSelected,
        setActiveOptionId,
        setListboxId,
        onKeyToBottom: onScrolledToBottom
      }), [listboxId, textFieldLabelId, textFieldFocused, willLoadMoreOptions, onOptionSelected, setActiveOptionId, setListboxId, onScrolledToBottom]);
      return /* @__PURE__ */ React2.createElement(Popover.Popover, {
        ref,
        active: popoverActiveWithChildren,
        activator: /* @__PURE__ */ React2.createElement(context.ComboboxTextFieldContext.Provider, {
          value: textFieldContextValue
        }, activator),
        autofocusTarget: "none",
        preventFocusOnClose: !0,
        fullWidth: !0,
        preferInputActivator: !1,
        preferredPosition,
        onClose: handleClose
      }, React2.Children.count(children) > 0 ? /* @__PURE__ */ React2.createElement(Popover.Popover.Pane, {
        onScrolledToBottom,
        height
      }, /* @__PURE__ */ React2.createElement(context.ComboboxListboxContext.Provider, {
        value: listboxContextValue
      }, /* @__PURE__ */ React2.createElement(context.ComboboxListboxOptionContext.Provider, {
        value: listboxOptionContextValue
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Combobox_module.default.Listbox
      }, children)))) : null);
    }
    Combobox.TextField = TextField2.TextField;
    exports.Combobox = Combobox;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Autocomplete/components/MappedAction/MappedAction.css.js
var require_MappedAction_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Autocomplete/components/MappedAction/MappedAction.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ActionContainer: "Polaris-Autocomplete-MappedAction__ActionContainer",
      Action: "Polaris-Autocomplete-MappedAction__Action",
      destructive: "Polaris-Autocomplete-MappedAction--destructive",
      selected: "Polaris-Autocomplete-MappedAction--selected",
      disabled: "Polaris-Autocomplete-MappedAction--disabled",
      Prefix: "Polaris-Autocomplete-MappedAction__Prefix",
      Suffix: "Polaris-Autocomplete-MappedAction__Suffix",
      Content: "Polaris-Autocomplete-MappedAction__Content",
      Text: "Polaris-Autocomplete-MappedAction__Text"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Autocomplete/components/MappedAction/MappedAction.js
var require_MappedAction = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Autocomplete/components/MappedAction/MappedAction.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), MappedAction_module = require_MappedAction_css(), hooks = require_hooks2(), Icon2 = require_Icon(), Badge3 = require_Badge(), Text3 = require_Text(), context = require_context14(), Listbox = require_Listbox();
    function MappedAction({
      active,
      content,
      disabled,
      icon,
      image,
      prefix,
      suffix,
      ellipsis,
      role,
      url,
      external,
      onAction,
      destructive,
      badge,
      helpText,
      wrapOverflow = !1
    }) {
      let i18n = hooks.useI18n(), prefixMarkup = null;
      prefix ? prefixMarkup = /* @__PURE__ */ React2.createElement("div", {
        className: MappedAction_module.default.Prefix
      }, prefix) : icon ? prefixMarkup = /* @__PURE__ */ React2.createElement("div", {
        className: MappedAction_module.default.Prefix
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: icon
      })) : image && (prefixMarkup = /* @__PURE__ */ React2.createElement("div", {
        role: "presentation",
        className: MappedAction_module.default.Prefix,
        style: {
          backgroundImage: `url(${image}`
        }
      }));
      let badgeMarkup = badge && /* @__PURE__ */ React2.createElement("span", {
        className: MappedAction_module.default.Suffix
      }, /* @__PURE__ */ React2.createElement(Badge3.Badge, {
        tone: badge.tone
      }, badge.content)), suffixMarkup = suffix && /* @__PURE__ */ React2.createElement("span", {
        className: MappedAction_module.default.Suffix
      }, suffix), contentText = ellipsis && content ? i18n.translate("Polaris.Autocomplete.ellipsis", {
        content
      }) : content, contentMarkup = /* @__PURE__ */ React2.createElement("div", {
        className: MappedAction_module.default.Text
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "p",
        variant: "bodyMd",
        breakWord: wrapOverflow
      }, contentText), helpText ? /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "p",
        variant: "bodyMd",
        tone: "subdued"
      }, helpText) : null), context$1 = React2.useMemo(() => ({
        role,
        url,
        external,
        onAction,
        destructive
      }), [role, url, external, onAction, destructive]), actionClassNames = css.classNames(MappedAction_module.default.Action, disabled && MappedAction_module.default.disabled, destructive && MappedAction_module.default.destructive, active && MappedAction_module.default.selected);
      return /* @__PURE__ */ React2.createElement(context.MappedActionContext.Provider, {
        value: context$1
      }, /* @__PURE__ */ React2.createElement("div", {
        className: MappedAction_module.default.ActionContainer
      }, /* @__PURE__ */ React2.createElement(Listbox.Listbox.Action, {
        selected: active,
        disabled,
        value: content || ""
      }, /* @__PURE__ */ React2.createElement("div", {
        className: actionClassNames
      }, /* @__PURE__ */ React2.createElement("div", {
        className: MappedAction_module.default.Content
      }, prefixMarkup, contentMarkup, badgeMarkup, suffixMarkup)))));
    }
    exports.MappedAction = MappedAction;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Autocomplete/Autocomplete.js
var require_Autocomplete = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Autocomplete/Autocomplete.js"(exports) {
    "use strict";
    var React2 = require_react(), options = require_options(), Autocomplete_module = require_Autocomplete_css(), MappedOption = require_MappedOption(), Listbox = require_Listbox(), Combobox = require_Combobox(), MappedAction = require_MappedAction(), hooks = require_hooks2(), Autocomplete = function({
      options: options$1,
      selected,
      textField,
      preferredPosition,
      listTitle,
      allowMultiple,
      loading,
      actionBefore,
      willLoadMoreResults,
      emptyState,
      onSelect,
      onLoadMoreResults
    }) {
      let i18n = hooks.useI18n(), buildMappedOptionFromOption = React2.useCallback((options2) => options2.map((option) => /* @__PURE__ */ React2.createElement(MappedOption.MappedOption, Object.assign({
        key: option.id || option.value
      }, option, {
        selected: selected.includes(option.value),
        singleSelection: !allowMultiple
      }))), [selected, allowMultiple]), optionsMarkup = React2.useMemo(() => {
        let conditionalOptions = loading && !willLoadMoreResults ? [] : options$1;
        if (options.isSection(conditionalOptions)) {
          if (conditionalOptions.every(({
            options: options2
          }) => options2.length === 0))
            return null;
          let optionsMarkup2 = conditionalOptions.map(({
            options: options2,
            title
          }) => {
            if (options2.length === 0)
              return null;
            let optionMarkup = buildMappedOptionFromOption(options2);
            return /* @__PURE__ */ React2.createElement(Listbox.Listbox.Section, {
              divider: !1,
              title: /* @__PURE__ */ React2.createElement(Listbox.Listbox.Header, null, title),
              key: title
            }, optionMarkup);
          });
          return /* @__PURE__ */ React2.createElement("div", {
            className: Autocomplete_module.default.SectionWrapper
          }, optionsMarkup2);
        }
        let optionList = conditionalOptions.length > 0 ? buildMappedOptionFromOption(conditionalOptions) : null;
        return listTitle ? /* @__PURE__ */ React2.createElement(Listbox.Listbox.Section, {
          divider: !1,
          title: /* @__PURE__ */ React2.createElement(Listbox.Listbox.Header, null, listTitle)
        }, optionList) : optionList;
      }, [listTitle, loading, options$1, willLoadMoreResults, buildMappedOptionFromOption]), loadingMarkup = loading ? /* @__PURE__ */ React2.createElement(Listbox.Listbox.Loading, {
        accessibilityLabel: i18n.translate("Polaris.Autocomplete.spinnerAccessibilityLabel")
      }) : null, updateSelection = React2.useCallback((newSelection) => {
        if (actionBefore && newSelection === actionBefore.content) {
          actionBefore.onAction && actionBefore.onAction();
          return;
        }
        allowMultiple ? selected.includes(newSelection) ? onSelect(selected.filter((option) => option !== newSelection)) : onSelect([...selected, newSelection]) : onSelect([newSelection]);
      }, [allowMultiple, onSelect, selected, actionBefore]), actionMarkup = actionBefore && /* @__PURE__ */ React2.createElement(MappedAction.MappedAction, actionBefore), emptyStateMarkup = emptyState && options$1.length < 1 && !loading && /* @__PURE__ */ React2.createElement("div", {
        role: "status"
      }, emptyState), autoSelection = actionBefore ? Listbox.AutoSelection.First : void 0;
      return /* @__PURE__ */ React2.createElement(Combobox.Combobox, {
        activator: textField,
        allowMultiple,
        onScrolledToBottom: onLoadMoreResults,
        preferredPosition,
        willLoadMoreOptions: willLoadMoreResults
      }, actionMarkup || optionsMarkup || loadingMarkup || emptyStateMarkup ? /* @__PURE__ */ React2.createElement(Listbox.Listbox, {
        autoSelection,
        onSelect: updateSelection
      }, actionMarkup, optionsMarkup && (!loading || willLoadMoreResults) ? optionsMarkup : null, loadingMarkup, emptyStateMarkup) : null);
    };
    Autocomplete.TextField = Combobox.Combobox.TextField;
    exports.Autocomplete = Autocomplete;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Backdrop/Backdrop.css.js
var require_Backdrop_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Backdrop/Backdrop.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Backdrop: "Polaris-Backdrop",
      transparent: "Polaris-Backdrop--transparent",
      belowNavigation: "Polaris-Backdrop--belowNavigation"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ScrollLock/ScrollLock.css.js
var require_ScrollLock_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ScrollLock/ScrollLock.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var ScrollLock_module = {};
    exports.default = ScrollLock_module;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/scroll-lock-manager/hooks.js
var require_hooks8 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/scroll-lock-manager/hooks.js"(exports) {
    "use strict";
    var React2 = require_react(), errors = require_errors(), context = require_context3();
    function useScrollLockManager() {
      let scrollLockManager = React2.useContext(context.ScrollLockManagerContext);
      if (!scrollLockManager)
        throw new errors.MissingAppProviderError("No ScrollLockManager was provided.");
      return scrollLockManager;
    }
    exports.useScrollLockManager = useScrollLockManager;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ScrollLock/ScrollLock.js
var require_ScrollLock = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ScrollLock/ScrollLock.js"(exports) {
    "use strict";
    var React2 = require_react();
    require_ScrollLock_css();
    var hooks = require_hooks8();
    function ScrollLock(_) {
      let scrollLockManager = hooks.useScrollLockManager();
      return React2.useEffect(() => (scrollLockManager.registerScrollLock(), () => {
        scrollLockManager.unregisterScrollLock();
      }), [scrollLockManager]), null;
    }
    exports.ScrollLock = ScrollLock;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Backdrop/Backdrop.js
var require_Backdrop = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Backdrop/Backdrop.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Backdrop_module = require_Backdrop_css(), ScrollLock = require_ScrollLock();
    function Backdrop(props) {
      let {
        onClick,
        onTouchStart,
        belowNavigation,
        transparent,
        setClosing
      } = props, className = css.classNames(Backdrop_module.default.Backdrop, belowNavigation && Backdrop_module.default.belowNavigation, transparent && Backdrop_module.default.transparent), handleMouseDown = () => {
        setClosing && setClosing(!0);
      }, handleClick = () => {
        setClosing && setClosing(!1), onClick && onClick();
      };
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(ScrollLock.ScrollLock, null), /* @__PURE__ */ React2.createElement("div", {
        className,
        onClick: handleClick,
        onTouchStart,
        onMouseDown: handleMouseDown
      }));
    }
    exports.Backdrop = Backdrop;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/banner-context.js
var require_banner_context = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/banner-context.js"(exports) {
    "use strict";
    var React2 = require_react(), BannerContext = /* @__PURE__ */ React2.createContext(!1);
    exports.BannerContext = BannerContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Banner/Banner.css.js
var require_Banner_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Banner/Banner.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Banner: "Polaris-Banner",
      keyFocused: "Polaris-Banner--keyFocused",
      withinContentContainer: "Polaris-Banner--withinContentContainer",
      withinPage: "Polaris-Banner--withinPage",
      DismissIcon: "Polaris-Banner__DismissIcon",
      "text-success-on-bg-fill": "Polaris-Banner--textSuccessOnBgFill",
      "text-success": "Polaris-Banner__text--success",
      "text-warning-on-bg-fill": "Polaris-Banner--textWarningOnBgFill",
      "text-warning": "Polaris-Banner__text--warning",
      "text-critical-on-bg-fill": "Polaris-Banner--textCriticalOnBgFill",
      "text-critical": "Polaris-Banner__text--critical",
      "text-info-on-bg-fill": "Polaris-Banner--textInfoOnBgFill",
      "text-info": "Polaris-Banner__text--info",
      "icon-secondary": "Polaris-Banner__icon--secondary"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Banner/utilities.js
var require_utilities3 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Banner/utilities.js"(exports) {
    "use strict";
    var polarisIcons = require("@shopify/polaris-icons"), React2 = require_react(), bannerAttributes = {
      success: {
        withinPage: {
          background: "bg-fill-success",
          text: "text-success-on-bg-fill",
          icon: "text-success-on-bg-fill"
        },
        withinContentContainer: {
          background: "bg-surface-success",
          text: "text-success",
          icon: "text-success"
        },
        icon: polarisIcons.CheckIcon
      },
      warning: {
        withinPage: {
          background: "bg-fill-warning",
          text: "text-warning-on-bg-fill",
          icon: "text-warning-on-bg-fill"
        },
        withinContentContainer: {
          background: "bg-surface-warning",
          text: "text-warning",
          icon: "text-warning"
        },
        icon: polarisIcons.AlertTriangleIcon
      },
      critical: {
        withinPage: {
          background: "bg-fill-critical",
          text: "text-critical-on-bg-fill",
          icon: "text-critical-on-bg-fill"
        },
        withinContentContainer: {
          background: "bg-surface-critical",
          text: "text-critical",
          icon: "text-critical"
        },
        icon: polarisIcons.AlertDiamondIcon
      },
      info: {
        withinPage: {
          background: "bg-fill-info",
          text: "text-info-on-bg-fill",
          icon: "text-info-on-bg-fill"
        },
        withinContentContainer: {
          background: "bg-surface-info",
          text: "text-info",
          icon: "text-info"
        },
        icon: polarisIcons.InfoIcon
      }
    };
    function useBannerFocus(bannerRef) {
      let wrapperRef = React2.useRef(null), [shouldShowFocus, setShouldShowFocus] = React2.useState(!1);
      return React2.useImperativeHandle(bannerRef, () => ({
        focus: () => {
          wrapperRef.current?.focus(), setShouldShowFocus(!0);
        }
      }), []), {
        wrapperRef,
        handleKeyUp: (event) => {
          event.target === wrapperRef.current && setShouldShowFocus(!0);
        },
        handleBlur: () => setShouldShowFocus(!1),
        handleMouseUp: (event) => {
          event.currentTarget.blur(), setShouldShowFocus(!1);
        },
        shouldShowFocus
      };
    }
    exports.bannerAttributes = bannerAttributes;
    exports.useBannerFocus = useBannerFocus;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ButtonGroup/ButtonGroup.css.js
var require_ButtonGroup_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ButtonGroup/ButtonGroup.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ButtonGroup: "Polaris-ButtonGroup",
      Item: "Polaris-ButtonGroup__Item",
      "Item-plain": "Polaris-ButtonGroup__Item--plain",
      variantSegmented: "Polaris-ButtonGroup--variantSegmented",
      "Item-focused": "Polaris-ButtonGroup__Item--focused",
      fullWidth: "Polaris-ButtonGroup--fullWidth",
      extraTight: "Polaris-ButtonGroup--extraTight",
      tight: "Polaris-ButtonGroup--tight",
      loose: "Polaris-ButtonGroup--loose",
      noWrap: "Polaris-ButtonGroup--noWrap"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ButtonGroup/components/Item/Item.js
var require_Item3 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ButtonGroup/components/Item/Item.js"(exports) {
    "use strict";
    var React2 = require_react(), useToggle = require_use_toggle(), css = require_css(), ButtonGroup_module = require_ButtonGroup_css();
    function Item({
      button
    }) {
      let {
        value: focused,
        setTrue: forceTrueFocused,
        setFalse: forceFalseFocused
      } = useToggle.useToggle(!1), className = css.classNames(ButtonGroup_module.default.Item, focused && ButtonGroup_module.default["Item-focused"], button.props.variant === "plain" && ButtonGroup_module.default["Item-plain"]);
      return /* @__PURE__ */ React2.createElement("div", {
        className,
        onFocus: forceTrueFocused,
        onBlur: forceFalseFocused
      }, button);
    }
    exports.Item = Item;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ButtonGroup/ButtonGroup.js
var require_ButtonGroup = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ButtonGroup/ButtonGroup.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), components = require_components(), ButtonGroup_module = require_ButtonGroup_css(), Item = require_Item3();
    function ButtonGroup({
      children,
      gap,
      variant,
      fullWidth,
      connectedTop,
      noWrap
    }) {
      let className = css.classNames(ButtonGroup_module.default.ButtonGroup, gap && ButtonGroup_module.default[gap], variant && ButtonGroup_module.default[css.variationName("variant", variant)], fullWidth && ButtonGroup_module.default.fullWidth, noWrap && ButtonGroup_module.default.noWrap), contents = components.elementChildren(children).map((child, index) => /* @__PURE__ */ React2.createElement(Item.Item, {
        button: child,
        key: index
      }));
      return /* @__PURE__ */ React2.createElement("div", {
        className,
        "data-buttongroup-variant": variant,
        "data-buttongroup-connected-top": connectedTop,
        "data-buttongroup-full-width": fullWidth,
        "data-buttongroup-no-wrap": noWrap
      }, contents);
    }
    exports.ButtonGroup = ButtonGroup;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Banner/Banner.js
var require_Banner = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Banner/Banner.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), bannerContext = require_banner_context(), withinContentContext = require_within_content_context(), css = require_css(), breakpoints = require_breakpoints(), useEventListener = require_use_event_listener(), Banner_module = require_Banner_css(), utilities = require_utilities3(), ButtonGroup = require_ButtonGroup(), hooks = require_hooks2(), Text3 = require_Text(), Icon2 = require_Icon(), Button3 = require_Button(), Box3 = require_Box(), BlockStack3 = require_BlockStack(), InlineStack3 = require_InlineStack(), Banner2 = /* @__PURE__ */ React2.forwardRef(function(props, bannerRef) {
      let {
        tone,
        stopAnnouncements
      } = props, withinContentContainer = React2.useContext(withinContentContext.WithinContentContext), {
        wrapperRef,
        handleKeyUp,
        handleBlur,
        handleMouseUp,
        shouldShowFocus
      } = utilities.useBannerFocus(bannerRef), className = css.classNames(Banner_module.default.Banner, shouldShowFocus && Banner_module.default.keyFocused, withinContentContainer ? Banner_module.default.withinContentContainer : Banner_module.default.withinPage);
      return /* @__PURE__ */ React2.createElement(bannerContext.BannerContext.Provider, {
        value: !0
      }, /* @__PURE__ */ React2.createElement("div", {
        className,
        tabIndex: 0,
        ref: wrapperRef,
        role: tone === "warning" || tone === "critical" ? "alert" : "status",
        "aria-live": stopAnnouncements ? "off" : "polite",
        onMouseUp: handleMouseUp,
        onKeyUp: handleKeyUp,
        onBlur: handleBlur
      }, /* @__PURE__ */ React2.createElement(BannerLayout, props)));
    });
    function BannerLayout({
      tone = "info",
      icon,
      hideIcon,
      onDismiss,
      action: action8,
      secondaryAction,
      title,
      children
    }) {
      let i18n = hooks.useI18n(), withinContentContainer = React2.useContext(withinContentContext.WithinContentContext), isInlineIconBanner = !title && !withinContentContainer, bannerTone = Object.keys(utilities.bannerAttributes).includes(tone) ? tone : "info", bannerColors = utilities.bannerAttributes[bannerTone][withinContentContainer ? "withinContentContainer" : "withinPage"], sharedBannerProps = {
        backgroundColor: bannerColors.background,
        textColor: bannerColors.text,
        bannerTitle: title ? /* @__PURE__ */ React2.createElement(Text3.Text, {
          as: "h2",
          variant: "headingSm",
          breakWord: !0
        }, title) : null,
        bannerIcon: hideIcon ? null : /* @__PURE__ */ React2.createElement("span", {
          className: Banner_module.default[bannerColors.icon]
        }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
          source: icon ?? utilities.bannerAttributes[bannerTone].icon
        })),
        actionButtons: action8 || secondaryAction ? /* @__PURE__ */ React2.createElement(ButtonGroup.ButtonGroup, null, action8 && /* @__PURE__ */ React2.createElement(Button3.Button, Object.assign({
          onClick: action8.onAction
        }, action8), action8.content), secondaryAction && /* @__PURE__ */ React2.createElement(Button3.Button, Object.assign({
          onClick: secondaryAction.onAction
        }, secondaryAction), secondaryAction.content)) : null,
        dismissButton: onDismiss ? /* @__PURE__ */ React2.createElement(Button3.Button, {
          variant: "tertiary",
          icon: /* @__PURE__ */ React2.createElement("span", {
            className: Banner_module.default[isInlineIconBanner ? "icon-secondary" : bannerColors.icon]
          }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
            source: polarisIcons.XIcon
          })),
          onClick: onDismiss,
          accessibilityLabel: i18n.translate("Polaris.Banner.dismissButton")
        }) : null
      }, childrenMarkup = children ? /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "bodyMd"
      }, children) : null;
      return withinContentContainer ? /* @__PURE__ */ React2.createElement(WithinContentContainerBanner, sharedBannerProps, childrenMarkup) : isInlineIconBanner ? /* @__PURE__ */ React2.createElement(InlineIconBanner, sharedBannerProps, childrenMarkup) : /* @__PURE__ */ React2.createElement(DefaultBanner, sharedBannerProps, childrenMarkup);
    }
    function DefaultBanner({
      backgroundColor,
      textColor,
      bannerTitle,
      bannerIcon,
      actionButtons,
      dismissButton,
      children
    }) {
      let {
        smUp
      } = breakpoints.useBreakpoints(), hasContent = children || actionButtons;
      return /* @__PURE__ */ React2.createElement(Box3.Box, {
        width: "100%"
      }, /* @__PURE__ */ React2.createElement(BlockStack3.BlockStack, {
        align: "space-between"
      }, /* @__PURE__ */ React2.createElement(Box3.Box, {
        background: backgroundColor,
        color: textColor,
        borderStartStartRadius: smUp ? "300" : void 0,
        borderStartEndRadius: smUp ? "300" : void 0,
        borderEndStartRadius: !hasContent && smUp ? "300" : void 0,
        borderEndEndRadius: !hasContent && smUp ? "300" : void 0,
        padding: "300"
      }, /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        align: "space-between",
        blockAlign: "center",
        gap: "200",
        wrap: !1
      }, /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        gap: "100",
        wrap: !1
      }, bannerIcon, bannerTitle), dismissButton)), hasContent && /* @__PURE__ */ React2.createElement(Box3.Box, {
        padding: {
          xs: "300",
          md: "400"
        },
        paddingBlockStart: "300"
      }, /* @__PURE__ */ React2.createElement(BlockStack3.BlockStack, {
        gap: "200"
      }, /* @__PURE__ */ React2.createElement("div", null, children), actionButtons))));
    }
    function InlineIconBanner({
      backgroundColor,
      bannerIcon,
      actionButtons,
      dismissButton,
      children
    }) {
      let [blockAlign, setBlockAlign] = React2.useState("center"), contentNode = React2.useRef(null), iconNode = React2.useRef(null), dismissIconNode = React2.useRef(null), handleResize = React2.useCallback(() => {
        let contentHeight = contentNode.current?.offsetHeight, iconBoxHeight = iconNode.current?.offsetHeight || dismissIconNode.current?.offsetHeight;
        !contentHeight || !iconBoxHeight || (contentHeight > iconBoxHeight ? setBlockAlign("start") : setBlockAlign("center"));
      }, []);
      return React2.useEffect(() => handleResize(), [handleResize]), useEventListener.useEventListener("resize", handleResize), /* @__PURE__ */ React2.createElement(Box3.Box, {
        width: "100%",
        padding: "300",
        borderRadius: "300"
      }, /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        align: "space-between",
        blockAlign,
        wrap: !1
      }, /* @__PURE__ */ React2.createElement(Box3.Box, {
        width: "100%"
      }, /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        gap: "200",
        wrap: !1,
        blockAlign
      }, bannerIcon ? /* @__PURE__ */ React2.createElement("div", {
        ref: iconNode
      }, /* @__PURE__ */ React2.createElement(Box3.Box, {
        background: backgroundColor,
        borderRadius: "200",
        padding: "100"
      }, bannerIcon)) : null, /* @__PURE__ */ React2.createElement(Box3.Box, {
        ref: contentNode,
        width: "100%"
      }, /* @__PURE__ */ React2.createElement(BlockStack3.BlockStack, {
        gap: "200"
      }, /* @__PURE__ */ React2.createElement("div", null, children), actionButtons)))), /* @__PURE__ */ React2.createElement("div", {
        ref: dismissIconNode,
        className: Banner_module.default.DismissIcon
      }, dismissButton)));
    }
    function WithinContentContainerBanner({
      backgroundColor,
      textColor,
      bannerTitle,
      bannerIcon,
      actionButtons,
      dismissButton,
      children
    }) {
      return /* @__PURE__ */ React2.createElement(Box3.Box, {
        width: "100%",
        background: backgroundColor,
        padding: "200",
        borderRadius: "200",
        color: textColor
      }, /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        align: "space-between",
        blockAlign: "start",
        wrap: !1,
        gap: "200"
      }, /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        gap: "150",
        wrap: !1
      }, bannerIcon, /* @__PURE__ */ React2.createElement(Box3.Box, {
        width: "100%"
      }, /* @__PURE__ */ React2.createElement(BlockStack3.BlockStack, {
        gap: "200"
      }, /* @__PURE__ */ React2.createElement(BlockStack3.BlockStack, {
        gap: "050"
      }, bannerTitle, /* @__PURE__ */ React2.createElement("div", null, children)), actionButtons))), dismissButton));
    }
    exports.Banner = Banner2;
    exports.BannerLayout = BannerLayout;
    exports.DefaultBanner = DefaultBanner;
    exports.InlineIconBanner = InlineIconBanner;
    exports.WithinContentContainerBanner = WithinContentContainerBanner;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Bleed/Bleed.css.js
var require_Bleed_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Bleed/Bleed.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Bleed: "Polaris-Bleed"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Bleed/Bleed.js
var require_Bleed = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Bleed/Bleed.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Bleed_module = require_Bleed_css(), Bleed = ({
      marginInline,
      marginBlock,
      marginBlockStart,
      marginBlockEnd,
      marginInlineStart,
      marginInlineEnd,
      children
    }) => {
      let getNegativeMargins = (direction) => {
        let xAxis = ["marginInlineStart", "marginInlineEnd"], yAxis = ["marginBlockStart", "marginBlockEnd"], directionValues = {
          marginBlockStart,
          marginBlockEnd,
          marginInlineStart,
          marginInlineEnd,
          marginInline,
          marginBlock
        };
        if (directionValues[direction])
          return directionValues[direction];
        if (xAxis.includes(direction) && marginInline)
          return directionValues.marginInline;
        if (yAxis.includes(direction) && marginBlock)
          return directionValues.marginBlock;
      }, negativeMarginBlockStart = getNegativeMargins("marginBlockStart"), negativeMarginBlockEnd = getNegativeMargins("marginBlockEnd"), negativeMarginInlineStart = getNegativeMargins("marginInlineStart"), negativeMarginInlineEnd = getNegativeMargins("marginInlineEnd"), style = {
        ...css.getResponsiveProps("bleed", "margin-block-start", "space", negativeMarginBlockStart),
        ...css.getResponsiveProps("bleed", "margin-block-end", "space", negativeMarginBlockEnd),
        ...css.getResponsiveProps("bleed", "margin-inline-start", "space", negativeMarginInlineStart),
        ...css.getResponsiveProps("bleed", "margin-inline-end", "space", negativeMarginInlineEnd)
      };
      return /* @__PURE__ */ React2.createElement("div", {
        className: Bleed_module.default.Bleed,
        style: css.sanitizeCustomProperties(style)
      }, children);
    };
    exports.Bleed = Bleed;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Breadcrumbs/Breadcrumbs.js
var require_Breadcrumbs = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Breadcrumbs/Breadcrumbs.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), focus = require_focus(), Button3 = require_Button();
    function Breadcrumbs({
      backAction
    }) {
      let {
        content
      } = backAction;
      return /* @__PURE__ */ React2.createElement(Button3.Button, {
        key: content,
        url: "url" in backAction ? backAction.url : void 0,
        onClick: "onAction" in backAction ? backAction.onAction : void 0,
        onPointerDown: focus.handleMouseUpByBlurring,
        icon: polarisIcons.ArrowLeftIcon,
        accessibilityLabel: backAction.accessibilityLabel ?? content
      });
    }
    exports.Breadcrumbs = Breadcrumbs;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/BulkActions/utilities.js
var require_utilities4 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/BulkActions/utilities.js"(exports) {
    "use strict";
    function getVisibleAndHiddenActionsIndices(promotedActions = [], disclosureWidth, actionsWidths, containerWidth) {
      let sumTabWidths = actionsWidths.reduce((sum, width) => sum + width, 0), arrayOfPromotedActionsIndices = promotedActions.map((_, index) => index), visiblePromotedActions = [], hiddenPromotedActions = [];
      if (containerWidth > sumTabWidths)
        visiblePromotedActions.push(...arrayOfPromotedActionsIndices);
      else {
        let accumulatedWidth = 0, hasReturned = !1;
        arrayOfPromotedActionsIndices.forEach((currentPromotedActionsIndex) => {
          let currentActionsWidth = actionsWidths[currentPromotedActionsIndex];
          if (accumulatedWidth + currentActionsWidth >= containerWidth - disclosureWidth || hasReturned) {
            hiddenPromotedActions.push(currentPromotedActionsIndex), hasReturned = !0;
            return;
          }
          visiblePromotedActions.push(currentPromotedActionsIndex), accumulatedWidth += currentActionsWidth;
        });
      }
      return {
        visiblePromotedActions,
        hiddenPromotedActions
      };
    }
    function instanceOfBulkActionListSectionArray(actions) {
      let validList = actions.filter((action8) => action8.items);
      return actions.length === validList.length;
    }
    function instanceOfBulkActionArray(actions) {
      let validList = actions.filter((action8) => !action8.items);
      return actions.length === validList.length;
    }
    function instanceOfMenuGroupDescriptor(action8) {
      return "title" in action8 && "actions" in action8;
    }
    function instanceOfBulkActionListSection(action8) {
      return "items" in action8;
    }
    function getActionSections(actions) {
      if (!(!actions || actions.length === 0)) {
        if (instanceOfBulkActionListSectionArray(actions))
          return actions;
        if (instanceOfBulkActionArray(actions))
          return [{
            items: actions
          }];
      }
    }
    function isNewBadgeInBadgeActions(actionSections) {
      if (!actionSections)
        return !1;
      for (let action8 of actionSections)
        for (let item of action8.items)
          if (item.badge?.tone === "new")
            return !0;
      return !1;
    }
    exports.getActionSections = getActionSections;
    exports.getVisibleAndHiddenActionsIndices = getVisibleAndHiddenActionsIndices;
    exports.instanceOfBulkActionArray = instanceOfBulkActionArray;
    exports.instanceOfBulkActionListSection = instanceOfBulkActionListSection;
    exports.instanceOfBulkActionListSectionArray = instanceOfBulkActionListSectionArray;
    exports.instanceOfMenuGroupDescriptor = instanceOfMenuGroupDescriptor;
    exports.isNewBadgeInBadgeActions = isNewBadgeInBadgeActions;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/BulkActions/BulkActions.css.js
var require_BulkActions_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/BulkActions/BulkActions.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      BulkActionsOuterLayout: "Polaris-BulkActions__BulkActionsOuterLayout",
      BulkActionsSelectAllWrapper: "Polaris-BulkActions__BulkActionsSelectAllWrapper",
      BulkActionsPromotedActionsWrapper: "Polaris-BulkActions__BulkActionsPromotedActionsWrapper",
      BulkActionsLayout: "Polaris-BulkActions__BulkActionsLayout",
      "BulkActionsLayout--measuring": "Polaris-BulkActions--bulkActionsLayoutMeasuring",
      BulkActionsMeasurerLayout: "Polaris-BulkActions__BulkActionsMeasurerLayout",
      BulkActionButton: "Polaris-BulkActions__BulkActionButton",
      disabled: "Polaris-BulkActions--disabled",
      AllAction: "Polaris-BulkActions__AllAction"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Indicator/Indicator.css.js
var require_Indicator_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Indicator/Indicator.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Indicator: "Polaris-Indicator",
      pulseIndicator: "Polaris-Indicator--pulseIndicator"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Indicator/Indicator.js
var require_Indicator = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Indicator/Indicator.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Indicator_module = require_Indicator_css();
    function Indicator({
      pulse = !0
    }) {
      let className = css.classNames(Indicator_module.default.Indicator, pulse && Indicator_module.default.pulseIndicator);
      return /* @__PURE__ */ React2.createElement("span", {
        className
      });
    }
    exports.Indicator = Indicator;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/BulkActions/components/BulkActionButton/BulkActionButton.js
var require_BulkActionButton = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/BulkActions/components/BulkActionButton/BulkActionButton.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), useComponentDidMount = require_use_component_did_mount(), BulkActions_module = require_BulkActions_css(), Indicator = require_Indicator(), Tooltip = require_Tooltip(), Button3 = require_Button(), Icon2 = require_Icon();
    function BulkActionButton({
      handleMeasurement,
      url,
      external,
      onAction,
      content,
      disclosure,
      accessibilityLabel,
      disabled,
      destructive,
      indicator,
      showContentInButton,
      size
    }) {
      let bulkActionButton = React2.useRef(null);
      useComponentDidMount.useComponentDidMount(() => {
        if (handleMeasurement && bulkActionButton.current) {
          let width = bulkActionButton.current.getBoundingClientRect().width;
          handleMeasurement(width);
        }
      });
      let isActivatorForMoreActionsPopover = disclosure && !showContentInButton, buttonContent = isActivatorForMoreActionsPopover ? void 0 : content, buttonMarkup = /* @__PURE__ */ React2.createElement(Button3.Button, {
        external,
        url,
        accessibilityLabel: isActivatorForMoreActionsPopover ? content : accessibilityLabel,
        tone: destructive ? "critical" : void 0,
        disclosure: disclosure && showContentInButton,
        onClick: onAction,
        disabled,
        size,
        icon: isActivatorForMoreActionsPopover ? /* @__PURE__ */ React2.createElement(Icon2.Icon, {
          source: polarisIcons.MenuHorizontalIcon,
          tone: "base"
        }) : void 0
      }, buttonContent);
      return /* @__PURE__ */ React2.createElement("div", {
        className: BulkActions_module.default.BulkActionButton,
        ref: bulkActionButton
      }, isActivatorForMoreActionsPopover ? /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, {
        content,
        preferredPosition: "below"
      }, buttonMarkup) : buttonMarkup, indicator && /* @__PURE__ */ React2.createElement(Indicator.Indicator, null));
    }
    exports.BulkActionButton = BulkActionButton;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/BulkActions/components/BulkActionMenu/BulkActionMenu.js
var require_BulkActionMenu = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/BulkActions/components/BulkActionMenu/BulkActionMenu.js"(exports) {
    "use strict";
    var React2 = require_react(), useToggle = require_use_toggle(), BulkActionButton = require_BulkActionButton(), Popover = require_Popover(), ActionList = require_ActionList();
    function BulkActionMenu({
      title,
      actions,
      isNewBadgeInBadgeActions,
      size
    }) {
      let {
        value: isVisible,
        toggle: toggleMenuVisibility
      } = useToggle.useToggle(!1);
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(Popover.Popover, {
        active: isVisible,
        activator: /* @__PURE__ */ React2.createElement(BulkActionButton.BulkActionButton, {
          disclosure: !0,
          showContentInButton: !0,
          onAction: toggleMenuVisibility,
          content: title,
          indicator: isNewBadgeInBadgeActions,
          size
        }),
        onClose: toggleMenuVisibility,
        preferInputActivator: !0
      }, /* @__PURE__ */ React2.createElement(ActionList.ActionList, {
        items: actions,
        onActionAnyItem: toggleMenuVisibility
      })));
    }
    exports.BulkActionMenu = BulkActionMenu;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/CheckableButton/CheckableButton.css.js
var require_CheckableButton_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/CheckableButton/CheckableButton.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      CheckableButton: "Polaris-CheckableButton",
      Checkbox: "Polaris-CheckableButton__Checkbox",
      Label: "Polaris-CheckableButton__Label"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/CheckableButton/CheckableButton.js
var require_CheckableButton = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/CheckableButton/CheckableButton.js"(exports) {
    "use strict";
    var React2 = require_react(), CheckableButton_module = require_CheckableButton_css(), Checkbox = require_Checkbox(), Text3 = require_Text(), CheckableButton = /* @__PURE__ */ React2.forwardRef(function({
      accessibilityLabel,
      label = "",
      onToggleAll,
      selected,
      disabled,
      ariaLive
    }, ref) {
      let checkBoxRef = React2.useRef(null);
      function focus() {
        checkBoxRef?.current?.focus();
      }
      return React2.useImperativeHandle(ref, () => ({
        focus
      })), /* @__PURE__ */ React2.createElement("div", {
        className: CheckableButton_module.default.CheckableButton,
        onClick: onToggleAll
      }, /* @__PURE__ */ React2.createElement("div", {
        className: CheckableButton_module.default.Checkbox
      }, /* @__PURE__ */ React2.createElement(Checkbox.Checkbox, {
        label: accessibilityLabel,
        labelHidden: !0,
        checked: selected,
        disabled,
        onChange: onToggleAll,
        ref: checkBoxRef
      })), label ? /* @__PURE__ */ React2.createElement("span", {
        className: CheckableButton_module.default.Label,
        "aria-live": ariaLive
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "bodySm",
        fontWeight: "medium"
      }, label)) : null);
    });
    exports.CheckableButton = CheckableButton;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/BulkActions/components/BulkActionsMeasurer/BulkActionsMeasurer.js
var require_BulkActionsMeasurer = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/BulkActions/components/BulkActionsMeasurer/BulkActionsMeasurer.js"(exports) {
    "use strict";
    var React2 = require_react(), useEventListener = require_use_event_listener(), BulkActions_module = require_BulkActions_css(), utilities = require_utilities4(), hooks = require_hooks2(), BulkActionButton = require_BulkActionButton(), ACTION_SPACING = 4;
    function BulkActionsMeasurer({
      promotedActions = [],
      disabled,
      buttonSize,
      handleMeasurement: handleMeasurementProp
    }) {
      let i18n = hooks.useI18n(), containerNode = React2.useRef(null), activatorLabel = i18n.translate("Polaris.ResourceList.BulkActions.moreActionsActivatorLabel"), activator = /* @__PURE__ */ React2.createElement(BulkActionButton.BulkActionButton, {
        disclosure: !0,
        content: activatorLabel
      }), handleMeasurement = React2.useCallback(() => {
        if (!containerNode.current)
          return;
        let containerWidth = containerNode.current.offsetWidth, hiddenActionNodes = containerNode.current.children, hiddenActionsWidths = Array.from(hiddenActionNodes).map((node) => Math.ceil(node.getBoundingClientRect().width) + ACTION_SPACING), disclosureWidth = hiddenActionsWidths.pop() || 0;
        handleMeasurementProp({
          containerWidth,
          disclosureWidth,
          hiddenActionsWidths
        });
      }, [handleMeasurementProp]);
      React2.useEffect(() => {
        handleMeasurement();
      }, [handleMeasurement, promotedActions]);
      let promotedActionsMarkup = promotedActions.map((action8, index) => utilities.instanceOfMenuGroupDescriptor(action8) ? /* @__PURE__ */ React2.createElement(BulkActionButton.BulkActionButton, {
        key: index,
        disclosure: !0,
        showContentInButton: !0,
        content: action8.title,
        size: buttonSize
      }) : /* @__PURE__ */ React2.createElement(BulkActionButton.BulkActionButton, Object.assign({
        key: index,
        disabled
      }, action8, {
        size: buttonSize
      })));
      return useEventListener.useEventListener("resize", handleMeasurement), /* @__PURE__ */ React2.createElement("div", {
        className: BulkActions_module.default.BulkActionsMeasurerLayout,
        ref: containerNode
      }, promotedActionsMarkup, activator);
    }
    exports.BulkActionsMeasurer = BulkActionsMeasurer;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/BulkActions/BulkActions.js
var require_BulkActions = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/BulkActions/BulkActions.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), utilities = require_utilities4(), BulkActions_module = require_BulkActions_css(), BulkActionMenu = require_BulkActionMenu(), CheckableButton = require_CheckableButton(), BulkActionsMeasurer = require_BulkActionsMeasurer(), hooks = require_hooks2(), UnstyledButton = require_UnstyledButton(), Text3 = require_Text(), BulkActionButton = require_BulkActionButton(), Popover = require_Popover(), ActionList = require_ActionList(), InlineStack3 = require_InlineStack(), BulkActions = /* @__PURE__ */ React2.forwardRef(function({
      promotedActions,
      actions,
      disabled,
      buttonSize,
      paginatedSelectAllAction,
      paginatedSelectAllText,
      label,
      accessibilityLabel,
      selected,
      onToggleAll,
      onMoreActionPopoverToggle,
      width,
      selectMode
    }, ref) {
      let i18n = hooks.useI18n(), [popoverActive, setPopoverActive] = React2.useState(!1), [state, setState] = React2.useReducer((data, partialData) => ({
        ...data,
        ...partialData
      }), {
        disclosureWidth: 0,
        containerWidth: 1 / 0,
        actionsWidths: [],
        visiblePromotedActions: [],
        hiddenPromotedActions: [],
        hasMeasured: !1
      }), {
        visiblePromotedActions,
        hiddenPromotedActions,
        containerWidth,
        disclosureWidth,
        actionsWidths,
        hasMeasured
      } = state;
      React2.useEffect(() => {
        if (containerWidth === 0 || !promotedActions || promotedActions.length === 0)
          return;
        let {
          visiblePromotedActions: visiblePromotedActions2,
          hiddenPromotedActions: hiddenPromotedActions2
        } = utilities.getVisibleAndHiddenActionsIndices(promotedActions, disclosureWidth, actionsWidths, containerWidth);
        setState({
          visiblePromotedActions: visiblePromotedActions2,
          hiddenPromotedActions: hiddenPromotedActions2,
          hasMeasured: containerWidth !== 1 / 0
        });
      }, [containerWidth, disclosureWidth, promotedActions, actionsWidths]);
      let activatorLabel = !promotedActions || promotedActions && visiblePromotedActions.length === 0 ? i18n.translate("Polaris.ResourceList.BulkActions.actionsActivatorLabel") : i18n.translate("Polaris.ResourceList.BulkActions.moreActionsActivatorLabel"), paginatedSelectAllMarkup = paginatedSelectAllAction ? /* @__PURE__ */ React2.createElement(UnstyledButton.UnstyledButton, {
        className: BulkActions_module.default.AllAction,
        onClick: paginatedSelectAllAction.onAction,
        size: "slim",
        disabled
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "bodySm",
        fontWeight: "medium"
      }, paginatedSelectAllAction.content)) : null, hasTextAndAction = paginatedSelectAllText && paginatedSelectAllAction, checkableButtonProps = {
        accessibilityLabel,
        label: hasTextAndAction ? paginatedSelectAllText : label,
        selected,
        onToggleAll,
        disabled,
        ariaLive: hasTextAndAction ? "polite" : void 0,
        ref
      }, togglePopover = React2.useCallback(() => {
        onMoreActionPopoverToggle?.(popoverActive), setPopoverActive((popoverActive2) => !popoverActive2);
      }, [onMoreActionPopoverToggle, popoverActive]), handleMeasurement = React2.useCallback((measurements) => {
        let {
          hiddenActionsWidths: actionsWidths2,
          containerWidth: containerWidth2,
          disclosureWidth: disclosureWidth2
        } = measurements;
        if (!promotedActions || promotedActions.length === 0)
          return;
        let {
          visiblePromotedActions: visiblePromotedActions2,
          hiddenPromotedActions: hiddenPromotedActions2
        } = utilities.getVisibleAndHiddenActionsIndices(promotedActions, disclosureWidth2, actionsWidths2, containerWidth2);
        setState({
          visiblePromotedActions: visiblePromotedActions2,
          hiddenPromotedActions: hiddenPromotedActions2,
          actionsWidths: actionsWidths2,
          containerWidth: containerWidth2,
          disclosureWidth: disclosureWidth2,
          hasMeasured: !0
        });
      }, [promotedActions]), actionSections = utilities.getActionSections(actions), promotedActionsMarkup = promotedActions ? promotedActions.filter((_, index) => !!visiblePromotedActions.includes(index)).map((action8, index) => utilities.instanceOfMenuGroupDescriptor(action8) ? /* @__PURE__ */ React2.createElement(BulkActionMenu.BulkActionMenu, Object.assign({
        key: index
      }, action8, {
        isNewBadgeInBadgeActions: utilities.isNewBadgeInBadgeActions(actionSections),
        size: buttonSize
      })) : /* @__PURE__ */ React2.createElement(BulkActionButton.BulkActionButton, Object.assign({
        key: index,
        disabled
      }, action8, {
        size: buttonSize
      }))) : null, hiddenPromotedSection = {
        items: hiddenPromotedActions.map((index) => promotedActions?.[index]).reduce((memo, action8) => action8 ? utilities.instanceOfMenuGroupDescriptor(action8) ? memo.concat(action8.actions) : memo.concat(action8) : memo, [])
      }, allHiddenActions = React2.useMemo(() => {
        if (actionSections)
          return actionSections;
        if (!actions)
          return [];
        let isAFlatArray = !0;
        return actions.filter((action8) => action8).reduce((memo, action8) => {
          if (utilities.instanceOfBulkActionListSection(action8))
            return isAFlatArray = !1, memo.concat(action8);
          if (isAFlatArray) {
            if (memo.length === 0)
              return [{
                items: [action8]
              }];
            let lastItem = memo[memo.length - 1];
            return memo.splice(memo.length - 1, 1, {
              items: [...lastItem.items, action8]
            }), memo;
          }
          return isAFlatArray = !0, memo.concat({
            items: [action8]
          });
        }, []);
      }, [actions, actionSections]), activator = /* @__PURE__ */ React2.createElement(BulkActionButton.BulkActionButton, {
        disclosure: !0,
        showContentInButton: !promotedActionsMarkup,
        onAction: togglePopover,
        content: activatorLabel,
        disabled,
        indicator: utilities.isNewBadgeInBadgeActions(actionSections),
        size: buttonSize
      }), actionsMarkup = allHiddenActions.length > 0 ? /* @__PURE__ */ React2.createElement(Popover.Popover, {
        active: popoverActive,
        activator,
        preferredAlignment: "right",
        onClose: togglePopover
      }, /* @__PURE__ */ React2.createElement(ActionList.ActionList, {
        sections: hiddenPromotedSection.items.length > 0 ? [hiddenPromotedSection, ...allHiddenActions] : allHiddenActions,
        onActionAnyItem: togglePopover
      })) : null, measurerMarkup = /* @__PURE__ */ React2.createElement(BulkActionsMeasurer.BulkActionsMeasurer, {
        promotedActions,
        disabled,
        buttonSize,
        handleMeasurement
      });
      return /* @__PURE__ */ React2.createElement("div", {
        className: BulkActions_module.default.BulkActions,
        style: width ? {
          width
        } : void 0
      }, /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        gap: "400",
        blockAlign: "center"
      }, /* @__PURE__ */ React2.createElement("div", {
        className: BulkActions_module.default.BulkActionsSelectAllWrapper
      }, /* @__PURE__ */ React2.createElement(CheckableButton.CheckableButton, checkableButtonProps), paginatedSelectAllMarkup), selectMode ? /* @__PURE__ */ React2.createElement("div", {
        className: BulkActions_module.default.BulkActionsPromotedActionsWrapper
      }, /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        gap: "100",
        blockAlign: "center"
      }, /* @__PURE__ */ React2.createElement("div", {
        className: BulkActions_module.default.BulkActionsOuterLayout
      }, measurerMarkup, /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(BulkActions_module.default.BulkActionsLayout, !hasMeasured && BulkActions_module.default["BulkActionsLayout--measuring"])
      }, promotedActionsMarkup)), actionsMarkup)) : null));
    });
    exports.BulkActions = BulkActions;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/CalloutCard/CalloutCard.css.js
var require_CalloutCard_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/CalloutCard/CalloutCard.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      CalloutCard: "Polaris-CalloutCard",
      Image: "Polaris-CalloutCard__Image",
      DismissImage: "Polaris-CalloutCard__DismissImage",
      Content: "Polaris-CalloutCard__Content",
      Title: "Polaris-CalloutCard__Title",
      Buttons: "Polaris-CalloutCard__Buttons",
      Container: "Polaris-CalloutCard__Container",
      Dismiss: "Polaris-CalloutCard__Dismiss",
      hasDismiss: "Polaris-CalloutCard--hasDismiss"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyCard/LegacyCard.css.js
var require_LegacyCard_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyCard/LegacyCard.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      LegacyCard: "Polaris-LegacyCard",
      Section: "Polaris-LegacyCard__Section",
      subdued: "Polaris-LegacyCard--subdued",
      "Section-hideOnPrint": "Polaris-LegacyCard__Section--hideOnPrint",
      hideOnPrint: "Polaris-LegacyCard--hideOnPrint",
      Header: "Polaris-LegacyCard__Header",
      "Section-fullWidth": "Polaris-LegacyCard__Section--fullWidth",
      "Section-flush": "Polaris-LegacyCard__Section--flush",
      "Section-subdued": "Polaris-LegacyCard__Section--subdued",
      SectionHeader: "Polaris-LegacyCard__SectionHeader",
      Subsection: "Polaris-LegacyCard__Subsection",
      Footer: "Polaris-LegacyCard__Footer",
      LeftJustified: "Polaris-LegacyCard__LeftJustified",
      FirstSectionPadding: "Polaris-LegacyCard__FirstSectionPadding",
      LastSectionPadding: "Polaris-LegacyCard__LastSectionPadding"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyCard/components/Header/Header.js
var require_Header2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyCard/components/Header/Header.js"(exports) {
    "use strict";
    var React2 = require_react(), LegacyCard_module = require_LegacyCard_css(), utils = require_utils(), ButtonGroup = require_ButtonGroup(), InlineStack3 = require_InlineStack(), Text3 = require_Text();
    function Header({
      children,
      title,
      actions
    }) {
      let actionMarkup = actions ? /* @__PURE__ */ React2.createElement(ButtonGroup.ButtonGroup, null, utils.buttonsFrom(actions, {
        variant: "plain"
      })) : null, titleMarkup = /* @__PURE__ */ React2.isValidElement(title) ? title : /* @__PURE__ */ React2.createElement(Text3.Text, {
        variant: "headingSm",
        as: "h2"
      }, title), headingMarkup = actionMarkup || children ? /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        wrap: !1,
        gap: "200",
        align: "space-between",
        blockAlign: "center"
      }, titleMarkup, /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        wrap: !1,
        gap: "400",
        blockAlign: "center"
      }, actionMarkup, children)) : titleMarkup;
      return /* @__PURE__ */ React2.createElement("div", {
        className: LegacyCard_module.default.Header
      }, headingMarkup);
    }
    exports.Header = Header;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyStack/LegacyStack.css.js
var require_LegacyStack_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyStack/LegacyStack.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      LegacyStack: "Polaris-LegacyStack",
      Item: "Polaris-LegacyStack__Item",
      noWrap: "Polaris-LegacyStack--noWrap",
      spacingNone: "Polaris-LegacyStack--spacingNone",
      spacingExtraTight: "Polaris-LegacyStack--spacingExtraTight",
      spacingTight: "Polaris-LegacyStack--spacingTight",
      spacingBaseTight: "Polaris-LegacyStack--spacingBaseTight",
      spacingLoose: "Polaris-LegacyStack--spacingLoose",
      spacingExtraLoose: "Polaris-LegacyStack--spacingExtraLoose",
      distributionLeading: "Polaris-LegacyStack--distributionLeading",
      distributionTrailing: "Polaris-LegacyStack--distributionTrailing",
      distributionCenter: "Polaris-LegacyStack--distributionCenter",
      distributionEqualSpacing: "Polaris-LegacyStack--distributionEqualSpacing",
      distributionFill: "Polaris-LegacyStack--distributionFill",
      distributionFillEvenly: "Polaris-LegacyStack--distributionFillEvenly",
      alignmentLeading: "Polaris-LegacyStack--alignmentLeading",
      alignmentTrailing: "Polaris-LegacyStack--alignmentTrailing",
      alignmentCenter: "Polaris-LegacyStack--alignmentCenter",
      alignmentFill: "Polaris-LegacyStack--alignmentFill",
      alignmentBaseline: "Polaris-LegacyStack--alignmentBaseline",
      vertical: "Polaris-LegacyStack--vertical",
      "Item-fill": "Polaris-LegacyStack__Item--fill"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyStack/components/Item/Item.js
var require_Item4 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyStack/components/Item/Item.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), LegacyStack_module = require_LegacyStack_css();
    function Item({
      children,
      fill
    }) {
      let className = css.classNames(LegacyStack_module.default.Item, fill && LegacyStack_module.default["Item-fill"]);
      return /* @__PURE__ */ React2.createElement("div", {
        className
      }, children);
    }
    exports.Item = Item;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyStack/LegacyStack.js
var require_LegacyStack = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyStack/LegacyStack.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), components = require_components(), LegacyStack_module = require_LegacyStack_css(), Item = require_Item4(), LegacyStack = /* @__PURE__ */ React2.memo(function({
      children,
      vertical,
      spacing,
      distribution,
      alignment,
      wrap
    }) {
      let className = css.classNames(LegacyStack_module.default.LegacyStack, vertical && LegacyStack_module.default.vertical, spacing && LegacyStack_module.default[css.variationName("spacing", spacing)], distribution && LegacyStack_module.default[css.variationName("distribution", distribution)], alignment && LegacyStack_module.default[css.variationName("alignment", alignment)], wrap === !1 && LegacyStack_module.default.noWrap), itemMarkup = components.elementChildren(children).map((child, index) => {
        let props = {
          key: index
        };
        return components.wrapWithComponent(child, Item.Item, props);
      });
      return /* @__PURE__ */ React2.createElement("div", {
        className
      }, itemMarkup);
    });
    LegacyStack.Item = Item.Item;
    exports.LegacyStack = LegacyStack;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyCard/components/Section/Section.js
var require_Section4 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyCard/components/Section/Section.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), LegacyCard_module = require_LegacyCard_css(), LegacyStack = require_LegacyStack(), ButtonGroup = require_ButtonGroup(), utils = require_utils(), Text3 = require_Text();
    function Section({
      children,
      title,
      subdued,
      flush,
      fullWidth,
      actions,
      hideOnPrint
    }) {
      let className = css.classNames(LegacyCard_module.default.Section, flush && LegacyCard_module.default["Section-flush"], subdued && LegacyCard_module.default["Section-subdued"], fullWidth && LegacyCard_module.default["Section-fullWidth"], hideOnPrint && LegacyCard_module.default["Section-hideOnPrint"]), actionMarkup = actions ? /* @__PURE__ */ React2.createElement(ButtonGroup.ButtonGroup, null, utils.buttonsFrom(actions, {
        variant: "plain"
      })) : null, titleMarkup = typeof title == "string" ? /* @__PURE__ */ React2.createElement(Text3.Text, {
        variant: "headingSm",
        as: "h3",
        fontWeight: "medium"
      }, title) : title, titleAreaMarkup = titleMarkup || actionMarkup ? /* @__PURE__ */ React2.createElement("div", {
        className: LegacyCard_module.default.SectionHeader
      }, actionMarkup ? /* @__PURE__ */ React2.createElement(LegacyStack.LegacyStack, {
        alignment: "baseline"
      }, /* @__PURE__ */ React2.createElement(LegacyStack.LegacyStack.Item, {
        fill: !0
      }, titleMarkup), actionMarkup) : titleMarkup) : null;
      return /* @__PURE__ */ React2.createElement("div", {
        className
      }, titleAreaMarkup, children);
    }
    exports.Section = Section;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyCard/components/Subsection/Subsection.js
var require_Subsection = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyCard/components/Subsection/Subsection.js"(exports) {
    "use strict";
    var React2 = require_react(), LegacyCard_module = require_LegacyCard_css();
    function Subsection({
      children
    }) {
      return /* @__PURE__ */ React2.createElement("div", {
        className: LegacyCard_module.default.Subsection
      }, children);
    }
    exports.Subsection = Subsection;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyCard/LegacyCard.js
var require_LegacyCard = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyCard/LegacyCard.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), useToggle = require_use_toggle(), withinContentContext = require_within_content_context(), LegacyCard_module = require_LegacyCard_css(), Header = require_Header2(), Section = require_Section4(), Subsection = require_Subsection(), hooks = require_hooks2(), utils = require_utils(), Popover = require_Popover(), Button3 = require_Button(), ActionList = require_ActionList(), ButtonGroup = require_ButtonGroup(), LegacyCard = function({
      children,
      hideOnPrint,
      title,
      subdued,
      sectioned,
      actions,
      primaryFooterAction,
      secondaryFooterActions,
      secondaryFooterActionsDisclosureText,
      footerActionAlignment = "right"
    }) {
      let i18n = hooks.useI18n(), {
        value: secondaryActionsPopoverOpen,
        toggle: toggleSecondaryActionsPopoverOpen
      } = useToggle.useToggle(!1), legacyCard = useLegacyCardPaddingObserverRef(), className = css.classNames(LegacyCard_module.default.LegacyCard, subdued && LegacyCard_module.default.subdued, hideOnPrint && LegacyCard_module.default.hideOnPrint), headerMarkup = title || actions ? /* @__PURE__ */ React2.createElement(Header.Header, {
        actions,
        title
      }) : null, content = sectioned ? /* @__PURE__ */ React2.createElement(Section.Section, null, children) : children, primaryFooterActionMarkup = primaryFooterAction ? utils.buttonFrom(primaryFooterAction, {
        variant: "primary"
      }) : null, secondaryFooterActionsMarkup = null;
      secondaryFooterActions && secondaryFooterActions.length && (secondaryFooterActions.length === 1 ? secondaryFooterActionsMarkup = utils.buttonFrom(secondaryFooterActions[0]) : secondaryFooterActionsMarkup = /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(Popover.Popover, {
        active: secondaryActionsPopoverOpen,
        activator: /* @__PURE__ */ React2.createElement(Button3.Button, {
          disclosure: !0,
          onClick: toggleSecondaryActionsPopoverOpen
        }, secondaryFooterActionsDisclosureText || i18n.translate("Polaris.Common.more")),
        onClose: toggleSecondaryActionsPopoverOpen
      }, /* @__PURE__ */ React2.createElement(ActionList.ActionList, {
        items: secondaryFooterActions
      }))));
      let footerMarkup = primaryFooterActionMarkup || secondaryFooterActionsMarkup ? /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(LegacyCard_module.default.Footer, footerActionAlignment === "left" && LegacyCard_module.default.LeftJustified)
      }, footerActionAlignment === "right" ? /* @__PURE__ */ React2.createElement(ButtonGroup.ButtonGroup, null, secondaryFooterActionsMarkup, primaryFooterActionMarkup) : /* @__PURE__ */ React2.createElement(ButtonGroup.ButtonGroup, null, primaryFooterActionMarkup, secondaryFooterActionsMarkup)) : null;
      return /* @__PURE__ */ React2.createElement(withinContentContext.WithinContentContext.Provider, {
        value: !0
      }, /* @__PURE__ */ React2.createElement("div", {
        className,
        ref: legacyCard
      }, headerMarkup, content, footerMarkup));
    };
    LegacyCard.Header = Header.Header;
    LegacyCard.Section = Section.Section;
    LegacyCard.Subsection = Subsection.Subsection;
    function useLegacyCardPaddingObserverRef() {
      let legacyCard = React2.useRef(null);
      return React2.useEffect(() => {
        let legacyCardNode = legacyCard.current, firstSection, lastSection;
        if (legacyCardNode) {
          let updateFirstAndLastSectionPadding = () => {
            updatePadding(firstSection, "top", !1), updatePadding(lastSection, "bottom", !1);
            let currentElements = legacyCardNode.querySelectorAll(`.${LegacyCard_module.default.Section}, .${LegacyCard_module.default.Header}, .${LegacyCard_module.default.Footer}`);
            if (!currentElements?.length)
              return;
            let firstElement = currentElements[0], lastElement = getMostSeniorLastElement(currentElements);
            legacyCardNode.firstChild?.contains(firstElement) && (firstSection = firstElement, updatePadding(firstSection, "top", !0)), legacyCardNode.lastChild?.contains(lastElement) && (lastSection = lastElement, updatePadding(lastSection, "bottom", !0));
          };
          updateFirstAndLastSectionPadding();
          let observer = new MutationObserver(updateFirstAndLastSectionPadding);
          return observer.observe(legacyCardNode, {
            childList: !0,
            subtree: !0
          }), () => {
            updatePadding(firstSection, "top", !1), updatePadding(lastSection, "bottom", !1), observer.disconnect();
          };
        }
      }, []), legacyCard;
    }
    function updatePadding(element, area, add) {
      if (!(!element || element.className.includes(LegacyCard_module.default["Section-flush"])))
        switch (area) {
          case "top":
            element.classList.toggle(LegacyCard_module.default.FirstSectionPadding, add);
            return;
          case "bottom":
            element.classList.toggle(LegacyCard_module.default.LastSectionPadding, add);
        }
    }
    function getMostSeniorLastElement(elements) {
      let lastElement = elements[0];
      return elements.forEach((element) => {
        lastElement.contains(element) || (lastElement = element);
      }), lastElement;
    }
    exports.LegacyCard = LegacyCard;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/CalloutCard/CalloutCard.js
var require_CalloutCard = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/CalloutCard/CalloutCard.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), CalloutCard_module = require_CalloutCard_css(), LegacyCard = require_LegacyCard(), utils = require_utils(), Button3 = require_Button(), Text3 = require_Text(), BlockStack3 = require_BlockStack(), Image = require_Image(), ButtonGroup = require_ButtonGroup();
    function CalloutCard({
      title,
      children,
      illustration,
      primaryAction,
      secondaryAction,
      onDismiss
    }) {
      let primaryActionMarkup = utils.buttonFrom(primaryAction), secondaryActionMarkup = secondaryAction ? utils.buttonFrom(secondaryAction, {
        variant: secondaryAction.variant ?? "tertiary"
      }) : null, buttonMarkup = secondaryActionMarkup ? /* @__PURE__ */ React2.createElement(ButtonGroup.ButtonGroup, null, primaryActionMarkup, secondaryActionMarkup) : primaryActionMarkup, dismissButton = onDismiss ? /* @__PURE__ */ React2.createElement("div", {
        className: CalloutCard_module.default.Dismiss
      }, /* @__PURE__ */ React2.createElement(Button3.Button, {
        variant: "plain",
        icon: polarisIcons.XSmallIcon,
        onClick: onDismiss,
        accessibilityLabel: "Dismiss card"
      })) : null, imageClassName = css.classNames(CalloutCard_module.default.Image, onDismiss && CalloutCard_module.default.DismissImage), containerClassName = css.classNames(CalloutCard_module.default.Container, onDismiss && CalloutCard_module.default.hasDismiss);
      return /* @__PURE__ */ React2.createElement(LegacyCard.LegacyCard, null, /* @__PURE__ */ React2.createElement("div", {
        className: containerClassName
      }, dismissButton, /* @__PURE__ */ React2.createElement(LegacyCard.LegacyCard.Section, null, /* @__PURE__ */ React2.createElement("div", {
        className: CalloutCard_module.default.CalloutCard
      }, /* @__PURE__ */ React2.createElement("div", {
        className: CalloutCard_module.default.Content
      }, /* @__PURE__ */ React2.createElement("div", {
        className: CalloutCard_module.default.Title
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        variant: "headingSm",
        as: "h2"
      }, title)), /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "bodyMd"
      }, /* @__PURE__ */ React2.createElement(BlockStack3.BlockStack, null, children)), /* @__PURE__ */ React2.createElement("div", {
        className: CalloutCard_module.default.Buttons
      }, buttonMarkup)), /* @__PURE__ */ React2.createElement(Image.Image, {
        alt: "",
        className: imageClassName,
        source: illustration
      })))));
    }
    exports.CalloutCard = CalloutCard;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ChoiceList/ChoiceList.css.js
var require_ChoiceList_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ChoiceList/ChoiceList.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ChoiceChildren: "Polaris-ChoiceList__ChoiceChildren"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/RadioButton/RadioButton.css.js
var require_RadioButton_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/RadioButton/RadioButton.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      RadioButton: "Polaris-RadioButton",
      Input: "Polaris-RadioButton__Input",
      Backdrop: "Polaris-RadioButton__Backdrop",
      ChoiceLabel: "Polaris-RadioButton__ChoiceLabel",
      toneMagic: "Polaris-RadioButton--toneMagic"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/RadioButton/RadioButton.js
var require_RadioButton = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/RadioButton/RadioButton.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), RadioButton_module = require_RadioButton_css(), Choice = require_Choice();
    function RadioButton({
      ariaDescribedBy: ariaDescribedByProp,
      label,
      labelHidden,
      helpText,
      checked,
      disabled,
      onChange,
      onFocus,
      onBlur,
      id: idProp,
      name: nameProp,
      value,
      fill,
      bleed,
      bleedBlockStart,
      bleedBlockEnd,
      bleedInlineStart,
      bleedInlineEnd,
      tone
    }) {
      let uniqId = React2.useId(), id = idProp ?? uniqId, name = nameProp || id, inputNode = React2.useRef(null), handleBlur = () => {
        onBlur && onBlur();
      };
      function handleChange({
        currentTarget
      }) {
        onChange && onChange(currentTarget.checked, id);
      }
      let describedBy = [];
      helpText && describedBy.push(Choice.helpTextID(id)), ariaDescribedByProp && describedBy.push(ariaDescribedByProp);
      let ariaDescribedBy = describedBy.length ? describedBy.join(" ") : void 0, inputClassName = css.classNames(RadioButton_module.default.Input, tone && RadioButton_module.default[css.variationName("tone", tone)]), extraChoiceProps = {
        helpText,
        bleed,
        bleedBlockStart,
        bleedBlockEnd,
        bleedInlineStart,
        bleedInlineEnd
      };
      return /* @__PURE__ */ React2.createElement(Choice.Choice, Object.assign({
        label,
        labelHidden,
        disabled,
        id,
        labelClassName: RadioButton_module.default.ChoiceLabel,
        fill
      }, extraChoiceProps, checked ? {
        tone
      } : {}), /* @__PURE__ */ React2.createElement("span", {
        className: RadioButton_module.default.RadioButton
      }, /* @__PURE__ */ React2.createElement("input", {
        id,
        name,
        value,
        type: "radio",
        checked,
        disabled,
        className: inputClassName,
        onChange: handleChange,
        onFocus,
        onBlur: handleBlur,
        "aria-describedby": ariaDescribedBy,
        ref: inputNode
      }), /* @__PURE__ */ React2.createElement("span", {
        className: RadioButton_module.default.Backdrop
      })));
    }
    exports.RadioButton = RadioButton;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ChoiceList/ChoiceList.js
var require_ChoiceList = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ChoiceList/ChoiceList.js"(exports) {
    "use strict";
    var React2 = require_react(), ChoiceList_module = require_ChoiceList_css(), Bleed = require_Bleed(), RadioButton = require_RadioButton(), Box3 = require_Box(), InlineError = require_InlineError(), BlockStack3 = require_BlockStack(), Checkbox = require_Checkbox(), Text3 = require_Text();
    function ChoiceList({
      title,
      titleHidden,
      allowMultiple,
      choices,
      selected,
      onChange = noop,
      error,
      disabled = !1,
      name: nameProp,
      tone
    }) {
      let ControlComponent = allowMultiple ? Checkbox.Checkbox : RadioButton.RadioButton, uniqName = React2.useId(), name = nameProp ?? uniqName, finalName = allowMultiple ? `${name}[]` : name, titleMarkup = title ? /* @__PURE__ */ React2.createElement(Box3.Box, {
        as: "legend",
        paddingBlockEnd: {
          xs: "0",
          md: "100"
        }
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "bodyMd",
        visuallyHidden: titleHidden
      }, title)) : null, choicesMarkup = choices.map((choice) => {
        let {
          value,
          id,
          label,
          helpText,
          disabled: choiceDisabled,
          describedByError
        } = choice;
        function handleChange(checked) {
          onChange(updateSelectedChoices(choice, checked, selected, allowMultiple), name);
        }
        let isSelected = choiceIsSelected(choice, selected), renderedChildren = choice.renderChildren ? choice.renderChildren(isSelected) : null, children = renderedChildren ? /* @__PURE__ */ React2.createElement("div", {
          className: ChoiceList_module.default.ChoiceChildren
        }, /* @__PURE__ */ React2.createElement(Box3.Box, {
          paddingBlockStart: {
            xs: "400",
            md: "0"
          }
        }, renderedChildren)) : null;
        return /* @__PURE__ */ React2.createElement("li", {
          key: value
        }, /* @__PURE__ */ React2.createElement(Bleed.Bleed, {
          marginBlockEnd: helpText ? {
            xs: "100",
            md: "0"
          } : {
            xs: "0"
          }
        }, /* @__PURE__ */ React2.createElement(ControlComponent, {
          name: finalName,
          value,
          id,
          label,
          disabled: choiceDisabled || disabled,
          fill: {
            xs: !0,
            sm: !1
          },
          checked: choiceIsSelected(choice, selected),
          helpText,
          onChange: handleChange,
          ariaDescribedBy: error && describedByError ? InlineError.errorTextID(finalName) : null,
          tone
        }), children));
      }), errorMarkup = error && /* @__PURE__ */ React2.createElement(Box3.Box, {
        paddingBlockStart: {
          xs: "0",
          md: "100"
        },
        paddingBlockEnd: "200"
      }, /* @__PURE__ */ React2.createElement(InlineError.InlineError, {
        message: error,
        fieldID: finalName
      }));
      return /* @__PURE__ */ React2.createElement(BlockStack3.BlockStack, {
        as: "fieldset",
        gap: {
          xs: "400",
          md: "0"
        },
        "aria-invalid": error != null,
        id: finalName
      }, titleMarkup, /* @__PURE__ */ React2.createElement(BlockStack3.BlockStack, {
        as: "ul",
        gap: {
          xs: "400",
          md: "0"
        }
      }, choicesMarkup), errorMarkup);
    }
    function noop() {
    }
    function choiceIsSelected({
      value
    }, selected) {
      return selected.includes(value);
    }
    function updateSelectedChoices({
      value
    }, checked, selected, allowMultiple = !1) {
      return checked ? allowMultiple ? [...selected, value] : [value] : selected.filter((selectedChoice) => selectedChoice !== value);
    }
    exports.ChoiceList = ChoiceList;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Collapsible/Collapsible.css.js
var require_Collapsible_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Collapsible/Collapsible.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Collapsible: "Polaris-Collapsible",
      isFullyClosed: "Polaris-Collapsible--isFullyClosed",
      expandOnPrint: "Polaris-Collapsible--expandOnPrint"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Collapsible/Collapsible.js
var require_Collapsible = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Collapsible/Collapsible.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Collapsible_module = require_Collapsible_css();
    function Collapsible2({
      id,
      expandOnPrint,
      open,
      transition = !0,
      children,
      onAnimationEnd
    }) {
      let [height, setHeight] = React2.useState(0), [isOpen, setIsOpen] = React2.useState(open), [animationState, setAnimationState] = React2.useState("idle"), collapsibleContainer = React2.useRef(null), isFullyOpen = animationState === "idle" && open && isOpen, isFullyClosed = animationState === "idle" && !open && !isOpen, content = expandOnPrint || !isFullyClosed ? children : null, wrapperClassName = css.classNames(Collapsible_module.default.Collapsible, isFullyClosed && Collapsible_module.default.isFullyClosed, expandOnPrint && Collapsible_module.default.expandOnPrint), transitionDisabled = isTransitionDisabled(transition), collapsibleStyles = {
        ...typeof transition == "object" && {
          transitionDuration: transition.duration,
          transitionTimingFunction: transition.timingFunction
        },
        maxHeight: isFullyOpen ? "none" : `${height}px`,
        overflow: isFullyOpen ? "visible" : "hidden"
      }, handleCompleteAnimation = React2.useCallback(({
        target
      }) => {
        target === collapsibleContainer.current && (setAnimationState("idle"), setIsOpen(open), onAnimationEnd && onAnimationEnd());
      }, [onAnimationEnd, open]), startAnimation = React2.useCallback(() => {
        transitionDisabled ? (setIsOpen(open), setAnimationState("idle"), open && collapsibleContainer.current ? setHeight(collapsibleContainer.current.scrollHeight) : setHeight(0)) : setAnimationState("measuring");
      }, [open, transitionDisabled]);
      return React2.useEffect(() => {
        open !== isOpen && startAnimation();
      }, [open, isOpen]), React2.useEffect(() => {
        !open || !collapsibleContainer.current || setHeight(collapsibleContainer.current.scrollHeight);
      }, []), React2.useEffect(() => {
        if (collapsibleContainer.current)
          switch (animationState) {
            case "idle":
              break;
            case "measuring":
              setHeight(collapsibleContainer.current.scrollHeight), setAnimationState("animating");
              break;
            case "animating":
              setHeight(open ? collapsibleContainer.current.scrollHeight : 0);
          }
      }, [animationState, open, isOpen]), /* @__PURE__ */ React2.createElement("div", {
        id,
        style: collapsibleStyles,
        ref: collapsibleContainer,
        className: wrapperClassName,
        onTransitionEnd: handleCompleteAnimation,
        "aria-hidden": !open
      }, content);
    }
    var zeroDurationRegex = /^0(ms|s)$/;
    function isTransitionDisabled(transitionProp) {
      if (typeof transitionProp == "boolean")
        return !transitionProp;
      let {
        duration
      } = transitionProp;
      return !!(duration && zeroDurationRegex.test(duration.trim()));
    }
    exports.Collapsible = Collapsible2;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ColorPicker/ColorPicker.css.js
var require_ColorPicker_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ColorPicker/ColorPicker.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ColorPicker: "Polaris-ColorPicker",
      MainColor: "Polaris-ColorPicker__MainColor",
      fullWidth: "Polaris-ColorPicker--fullWidth",
      Dragger: "Polaris-ColorPicker__Dragger",
      ColorLayer: "Polaris-ColorPicker__ColorLayer",
      HuePicker: "Polaris-ColorPicker__HuePicker",
      AlphaPicker: "Polaris-ColorPicker__AlphaPicker",
      Slidable: "Polaris-ColorPicker__Slidable"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ColorPicker/components/AlphaPicker/utilities.js
var require_utilities5 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ColorPicker/components/AlphaPicker/utilities.js"(exports) {
    "use strict";
    var clamp = require_clamp(), VERTICAL_PADDING = 13;
    function calculateDraggerY(alpha, sliderHeight, draggerHeight) {
      let offset = offsetForAlpha(alpha, sliderHeight, draggerHeight);
      return clamp.clamp(offset, 0, sliderHeight);
    }
    function alphaForDraggerY(y, sliderHeight) {
      let offsetY = clamp.clamp(y, 0, sliderHeight);
      return alphaForOffset(offsetY, sliderHeight);
    }
    function alphaForOffset(offset, sliderHeight) {
      let selectionHeight = offset - VERTICAL_PADDING, slidableArea = sliderHeight - VERTICAL_PADDING * 2;
      return clamp.clamp(1 - selectionHeight / slidableArea, 0, 1);
    }
    function offsetForAlpha(alpha, sliderHeight, draggerHeight) {
      let slidableArea = sliderHeight - (draggerHeight + VERTICAL_PADDING);
      return clamp.clamp((1 - alpha) * slidableArea + VERTICAL_PADDING, 0, sliderHeight - draggerHeight);
    }
    exports.alphaForDraggerY = alphaForDraggerY;
    exports.alphaForOffset = alphaForOffset;
    exports.calculateDraggerY = calculateDraggerY;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ColorPicker/components/Slidable/Slidable.js
var require_Slidable = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ColorPicker/components/Slidable/Slidable.js"(exports) {
    "use strict";
    var React2 = require_react(), target = require_target(), ColorPicker_module = require_ColorPicker_css(), EventListener = require_EventListener(), isDragging = !1;
    target.isServer || window.addEventListener("touchmove", (event) => {
      isDragging && event.preventDefault();
    }, {
      passive: !1
    });
    var Slidable = class extends React2.PureComponent {
      constructor(...args) {
        super(...args), this.state = {
          dragging: !1
        }, this.node = null, this.draggerNode = null, this.setDraggerNode = (node) => {
          this.draggerNode = node;
        }, this.setNode = (node) => {
          this.node = node;
        }, this.startDrag = (event) => {
          isMouseDownEvent(event) && this.handleDraggerMove(event.clientX, event.clientY), isDragging = !0, this.setState({
            dragging: !0
          });
        }, this.handleDragEnd = () => {
          isDragging = !1, this.setState({
            dragging: !1
          });
        }, this.handleMove = (event) => {
          if (event.stopImmediatePropagation(), event.stopPropagation(), event.cancelable && event.preventDefault(), isMouseMoveEvent(event)) {
            this.handleDraggerMove(event.clientX, event.clientY);
            return;
          }
          this.handleDraggerMove(event.touches[0].clientX, event.touches[0].clientY);
        }, this.handleDraggerMove = (x, y) => {
          if (this.node == null)
            return;
          let {
            onChange
          } = this.props, rect = this.node.getBoundingClientRect(), offsetX = x - rect.left, offsetY = y - rect.top;
          onChange({
            x: offsetX,
            y: offsetY
          });
        };
      }
      componentDidMount() {
        let {
          onDraggerHeight
        } = this.props;
        if (onDraggerHeight == null)
          return;
        let {
          draggerNode
        } = this;
        draggerNode != null && (onDraggerHeight(draggerNode.clientWidth), setTimeout(() => {
          onDraggerHeight(draggerNode.clientWidth);
        }, 0));
      }
      render() {
        let {
          dragging
        } = this.state, {
          draggerX = 0,
          draggerY = 0
        } = this.props, draggerPositioning = {
          transform: `translate3d(${draggerX}px, ${draggerY}px, 0)`
        }, moveListener = dragging ? /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
          event: "mousemove",
          handler: this.handleMove,
          passive: !1
        }) : null, touchMoveListener = dragging ? /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
          event: "touchmove",
          handler: this.handleMove,
          passive: !1
        }) : null, endDragListener = dragging ? /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
          event: "mouseup",
          handler: this.handleDragEnd
        }) : null, touchEndListener = dragging ? /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
          event: "touchend",
          handler: this.handleDragEnd
        }) : null, touchCancelListener = dragging ? /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
          event: "touchcancel",
          handler: this.handleDragEnd
        }) : null;
        return /* @__PURE__ */ React2.createElement("div", {
          ref: this.setNode,
          className: ColorPicker_module.default.Slidable,
          onMouseDown: this.startDrag,
          onTouchStart: this.startDrag
        }, endDragListener, moveListener, touchMoveListener, touchEndListener, touchCancelListener, /* @__PURE__ */ React2.createElement("div", {
          style: draggerPositioning,
          className: ColorPicker_module.default.Dragger,
          ref: this.setDraggerNode
        }));
      }
    };
    function isMouseMoveEvent(event) {
      return event.type === "mousemove";
    }
    function isMouseDownEvent(event) {
      return event.type === "mousedown";
    }
    exports.Slidable = Slidable;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ColorPicker/components/AlphaPicker/AlphaPicker.js
var require_AlphaPicker = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ColorPicker/components/AlphaPicker/AlphaPicker.js"(exports) {
    "use strict";
    var React2 = require_react(), colorTransformers = require_color_transformers(), ColorPicker_module = require_ColorPicker_css(), utilities = require_utilities5(), Slidable = require_Slidable(), AlphaPicker = class extends React2.PureComponent {
      constructor(...args) {
        super(...args), this.state = {
          sliderHeight: 0,
          draggerHeight: 0
        }, this.setSliderHeight = (node) => {
          node != null && (this.setState({
            sliderHeight: node.clientHeight
          }), setTimeout(() => {
            this.setState({
              sliderHeight: node.clientHeight
            });
          }, 0));
        }, this.setDraggerHeight = (height) => {
          this.setState({
            draggerHeight: height
          });
        }, this.handleChange = ({
          y
        }) => {
          let {
            onChange
          } = this.props, {
            sliderHeight
          } = this.state, alpha = utilities.alphaForDraggerY(y, sliderHeight);
          onChange(alpha);
        };
      }
      render() {
        let {
          color,
          alpha
        } = this.props, {
          sliderHeight,
          draggerHeight
        } = this.state, draggerY = utilities.calculateDraggerY(alpha, sliderHeight, draggerHeight), background = alphaGradientForColor(color);
        return /* @__PURE__ */ React2.createElement("div", {
          className: ColorPicker_module.default.AlphaPicker,
          ref: this.setSliderHeight
        }, /* @__PURE__ */ React2.createElement("div", {
          className: ColorPicker_module.default.ColorLayer,
          style: {
            background
          }
        }), /* @__PURE__ */ React2.createElement(Slidable.Slidable, {
          draggerY,
          draggerX: 0,
          onChange: this.handleChange,
          onDraggerHeight: this.setDraggerHeight
        }));
      }
    };
    function alphaGradientForColor(color) {
      let {
        red,
        green,
        blue
      } = colorTransformers.hsbToRgb(color), rgb = `${red}, ${green}, ${blue}`;
      return `linear-gradient(to top, rgba(${rgb}, 0) 18px, rgba(${rgb}, 1) calc(100% - 18px))`;
    }
    exports.AlphaPicker = AlphaPicker;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ColorPicker/components/HuePicker/utilities.js
var require_utilities6 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ColorPicker/components/HuePicker/utilities.js"(exports) {
    "use strict";
    var clamp = require_clamp(), VERTICAL_PADDING = 13;
    function calculateDraggerY(hue, sliderHeight, draggerHeight) {
      let offset = offsetForHue(hue, sliderHeight, draggerHeight);
      return clamp.clamp(offset, 0, sliderHeight);
    }
    function hueForDraggerY(y, sliderHeight) {
      let offsetY = clamp.clamp(y, 0, sliderHeight);
      return hueForOffset(offsetY, sliderHeight);
    }
    function hueForOffset(offset, sliderHeight) {
      let selectionHeight = offset - VERTICAL_PADDING, slidableArea = sliderHeight - VERTICAL_PADDING * 2;
      return clamp.clamp(selectionHeight / slidableArea * 360, 0, 360);
    }
    function offsetForHue(hue, sliderHeight, draggerHeight) {
      let slidableArea = sliderHeight - (draggerHeight + VERTICAL_PADDING);
      return clamp.clamp(hue / 360 * slidableArea + VERTICAL_PADDING, 0, sliderHeight - draggerHeight);
    }
    exports.calculateDraggerY = calculateDraggerY;
    exports.hueForDraggerY = hueForDraggerY;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ColorPicker/components/HuePicker/HuePicker.js
var require_HuePicker = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ColorPicker/components/HuePicker/HuePicker.js"(exports) {
    "use strict";
    var React2 = require_react(), ColorPicker_module = require_ColorPicker_css(), utilities = require_utilities6(), Slidable = require_Slidable(), HuePicker = class extends React2.PureComponent {
      constructor(...args) {
        super(...args), this.state = {
          sliderHeight: 0,
          draggerHeight: 0
        }, this.setSliderHeight = (node) => {
          node != null && (this.setState({
            sliderHeight: node.clientHeight
          }), setTimeout(() => {
            this.setState({
              sliderHeight: node.clientHeight
            });
          }, 0));
        }, this.setDraggerHeight = (height) => {
          this.setState({
            draggerHeight: height
          });
        }, this.handleChange = ({
          y
        }) => {
          let {
            onChange
          } = this.props, {
            sliderHeight
          } = this.state, hue = utilities.hueForDraggerY(y, sliderHeight);
          onChange(hue);
        };
      }
      render() {
        let {
          hue
        } = this.props, {
          sliderHeight,
          draggerHeight
        } = this.state, draggerY = utilities.calculateDraggerY(hue, sliderHeight, draggerHeight);
        return /* @__PURE__ */ React2.createElement("div", {
          className: ColorPicker_module.default.HuePicker,
          ref: this.setSliderHeight
        }, /* @__PURE__ */ React2.createElement(Slidable.Slidable, {
          draggerY,
          draggerX: 0,
          onChange: this.handleChange,
          onDraggerHeight: this.setDraggerHeight
        }));
      }
    };
    exports.HuePicker = HuePicker;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ColorPicker/ColorPicker.js
var require_ColorPicker = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ColorPicker/ColorPicker.js"(exports) {
    "use strict";
    var React2 = require_react(), debounce = require_debounce(), clamp = require_clamp(), css = require_css(), colorTransformers = require_color_transformers(), ColorPicker_module = require_ColorPicker_css(), AlphaPicker = require_AlphaPicker(), HuePicker = require_HuePicker(), Slidable = require_Slidable(), EventListener = require_EventListener(), RESIZE_DEBOUNCE_TIME_MS = 200, ColorPicker = class extends React2.PureComponent {
      constructor(...args) {
        super(...args), this.state = {
          pickerSize: {
            width: 0,
            height: 0
          }
        }, this.colorNode = null, this.handleResize = debounce.debounce(() => {
          let {
            colorNode
          } = this;
          colorNode != null && this.setState({
            pickerSize: {
              width: colorNode.clientWidth,
              height: colorNode.clientHeight
            }
          });
        }, RESIZE_DEBOUNCE_TIME_MS, {
          leading: !0,
          trailing: !0,
          maxWait: RESIZE_DEBOUNCE_TIME_MS
        }), this.setColorNode = (node) => {
          this.colorNode = node;
        }, this.handleHueChange = (hue) => {
          let {
            color: {
              brightness,
              saturation,
              alpha = 1
            },
            onChange
          } = this.props;
          onChange({
            hue,
            brightness,
            saturation,
            alpha
          });
        }, this.handleAlphaChange = (alpha) => {
          let {
            color: {
              hue,
              brightness,
              saturation
            },
            onChange
          } = this.props;
          onChange({
            hue,
            brightness,
            saturation,
            alpha
          });
        }, this.handleDraggerMove = ({
          x,
          y
        }) => {
          let {
            pickerSize
          } = this.state, {
            color: {
              hue,
              alpha = 1
            },
            onChange
          } = this.props, saturation = clamp.clamp(x / pickerSize.width, 0, 1), brightness = clamp.clamp(1 - y / pickerSize.height, 0, 1);
          onChange({
            hue,
            saturation,
            brightness,
            alpha
          });
        }, this.handlePickerDrag = (event) => {
          event.preventDefault();
        };
      }
      componentDidMount() {
        let {
          colorNode
        } = this;
        colorNode != null && (this.setState({
          pickerSize: {
            width: colorNode.clientWidth,
            height: colorNode.clientHeight
          }
        }), setTimeout(() => {
          this.setState({
            pickerSize: {
              width: colorNode.clientWidth,
              height: colorNode.clientHeight
            }
          });
        }, 0));
      }
      render() {
        let {
          id,
          color,
          allowAlpha,
          fullWidth
        } = this.props, {
          hue,
          saturation,
          brightness,
          alpha: providedAlpha
        } = color, {
          pickerSize
        } = this.state, alpha = providedAlpha != null && allowAlpha ? providedAlpha : 1, {
          red,
          green,
          blue
        } = colorTransformers.hsbToRgb({
          hue,
          saturation: 1,
          brightness: 1
        }), colorString = `rgba(${red}, ${green}, ${blue}, ${alpha})`, draggerX = clamp.clamp(saturation * pickerSize.width, 0, pickerSize.width), draggerY = clamp.clamp(pickerSize.height - brightness * pickerSize.height, 0, pickerSize.height), alphaSliderMarkup = allowAlpha ? /* @__PURE__ */ React2.createElement(AlphaPicker.AlphaPicker, {
          alpha,
          color,
          onChange: this.handleAlphaChange
        }) : null, className = css.classNames(ColorPicker_module.default.ColorPicker, fullWidth && ColorPicker_module.default.fullWidth);
        return /* @__PURE__ */ React2.createElement("div", {
          className,
          id,
          onMouseDown: this.handlePickerDrag
        }, /* @__PURE__ */ React2.createElement("div", {
          ref: this.setColorNode,
          className: ColorPicker_module.default.MainColor
        }, /* @__PURE__ */ React2.createElement("div", {
          className: ColorPicker_module.default.ColorLayer,
          style: {
            backgroundColor: colorString
          }
        }), /* @__PURE__ */ React2.createElement(Slidable.Slidable, {
          onChange: this.handleDraggerMove,
          draggerX,
          draggerY
        })), /* @__PURE__ */ React2.createElement(HuePicker.HuePicker, {
          hue,
          onChange: this.handleHueChange
        }), alphaSliderMarkup, /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
          event: "resize",
          handler: this.handleResize
        }));
      }
    };
    exports.ColorPicker = ColorPicker;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/InlineGrid/InlineGrid.css.js
var require_InlineGrid_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/InlineGrid/InlineGrid.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      InlineGrid: "Polaris-InlineGrid"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/InlineGrid/InlineGrid.js
var require_InlineGrid = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/InlineGrid/InlineGrid.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), InlineGrid_module = require_InlineGrid_css();
    function InlineGrid({
      children,
      columns,
      gap,
      alignItems
    }) {
      let style = {
        ...css.getResponsiveValue("inline-grid", "grid-template-columns", formatInlineGrid(columns)),
        ...css.getResponsiveProps("inline-grid", "gap", "space", gap),
        "--pc-inline-grid-align-items": alignItems
      };
      return /* @__PURE__ */ React2.createElement("div", {
        className: InlineGrid_module.default.InlineGrid,
        style: css.sanitizeCustomProperties(style)
      }, children);
    }
    function formatInlineGrid(columns) {
      return typeof columns == "object" && columns !== null && !Array.isArray(columns) ? Object.fromEntries(Object.entries(columns).map(([breakpointAlias, breakpointInlineGrid]) => [breakpointAlias, getColumnValue(breakpointInlineGrid)])) : getColumnValue(columns);
    }
    function getColumnValue(columns) {
      if (columns)
        return typeof columns == "number" || !isNaN(Number(columns)) ? `repeat(${Number(columns)}, minmax(0, 1fr))` : typeof columns == "string" ? columns : columns.map((column) => {
          switch (column) {
            case "oneThird":
              return "minmax(0, 1fr)";
            case "oneHalf":
              return "minmax(0, 1fr)";
            case "twoThirds":
              return "minmax(0, 2fr)";
          }
        }).join(" ");
    }
    exports.InlineGrid = InlineGrid;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/frame/context.js
var require_context15 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/frame/context.js"(exports) {
    "use strict";
    var React2 = require_react(), FrameContext = /* @__PURE__ */ React2.createContext(void 0);
    exports.FrameContext = FrameContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/frame/hooks.js
var require_hooks9 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/frame/hooks.js"(exports) {
    "use strict";
    var React2 = require_react(), context = require_context15();
    function useFrame() {
      let frame = React2.useContext(context.FrameContext);
      if (!frame)
        throw new Error("No Frame context was provided. Your component must be wrapped in a <Frame> component. See https://polaris.shopify.com/components/internal-only/frame for implementation instructions.");
      return frame;
    }
    exports.useFrame = useFrame;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ContextualSaveBar/ContextualSaveBar.js
var require_ContextualSaveBar = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ContextualSaveBar/ContextualSaveBar.js"(exports) {
    "use strict";
    var React2 = require_react(), hooks = require_hooks9(), ContextualSaveBar = /* @__PURE__ */ React2.memo(function({
      message,
      saveAction,
      discardAction,
      alignContentFlush,
      fullWidth,
      contextControl,
      secondaryMenu
    }) {
      let {
        setContextualSaveBar,
        removeContextualSaveBar
      } = hooks.useFrame();
      return React2.useEffect(() => {
        setContextualSaveBar({
          message,
          saveAction,
          discardAction,
          alignContentFlush,
          fullWidth,
          contextControl,
          secondaryMenu
        });
      }, [message, saveAction, discardAction, alignContentFlush, setContextualSaveBar, fullWidth, contextControl, secondaryMenu]), React2.useEffect(() => removeContextualSaveBar, [removeContextualSaveBar]), null;
    });
    exports.ContextualSaveBar = ContextualSaveBar;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DataTable/utilities.js
var require_utilities7 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DataTable/utilities.js"(exports) {
    "use strict";
    function measureColumn(tableData) {
      return function(column, index) {
        let {
          firstVisibleColumnIndex,
          tableLeftVisibleEdge: tableStart,
          tableRightVisibleEdge: tableEnd
        } = tableData, leftEdge = column.offsetLeft, rightEdge = leftEdge + column.offsetWidth, isVisibleLeft = isEdgeVisible(leftEdge, tableStart, tableEnd, "left"), isVisibleRight = isEdgeVisible(rightEdge, tableStart, tableEnd, "right"), isVisible = isVisibleLeft || isVisibleRight, width = column.offsetWidth;
        return isVisible && (tableData.firstVisibleColumnIndex = Math.min(firstVisibleColumnIndex, index)), {
          leftEdge,
          rightEdge,
          isVisible,
          width,
          index
        };
      };
    }
    function isEdgeVisible(position, start, end, edgeType) {
      return position >= start + (edgeType === "left" ? 0 : 30) && position <= end - 30;
    }
    function getPrevAndCurrentColumns(tableData, columnData) {
      let {
        firstVisibleColumnIndex
      } = tableData, previousColumnIndex = Math.max(firstVisibleColumnIndex - 1, 0), previousColumn = columnData[previousColumnIndex], currentColumn = columnData[firstVisibleColumnIndex];
      return {
        previousColumn,
        currentColumn
      };
    }
    exports.getPrevAndCurrentColumns = getPrevAndCurrentColumns;
    exports.isEdgeVisible = isEdgeVisible;
    exports.measureColumn = measureColumn;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DataTable/DataTable.css.js
var require_DataTable_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DataTable/DataTable.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      DataTable: "Polaris-DataTable",
      condensed: "Polaris-DataTable--condensed",
      Navigation: "Polaris-DataTable__Navigation",
      Pip: "Polaris-DataTable__Pip",
      "Pip-visible": "Polaris-DataTable__Pip--visible",
      ScrollContainer: "Polaris-DataTable__ScrollContainer",
      Table: "Polaris-DataTable__Table",
      TableRow: "Polaris-DataTable__TableRow",
      Cell: "Polaris-DataTable__Cell",
      IncreasedTableDensity: "Polaris-DataTable__IncreasedTableDensity",
      ZebraStripingOnData: "Polaris-DataTable__ZebraStripingOnData",
      RowCountIsEven: "Polaris-DataTable__RowCountIsEven",
      ShowTotalsInFooter: "Polaris-DataTable__ShowTotalsInFooter",
      "Cell-separate": "Polaris-DataTable__Cell--separate",
      "Cell-firstColumn": "Polaris-DataTable__Cell--firstColumn",
      "Cell-numeric": "Polaris-DataTable__Cell--numeric",
      "Cell-truncated": "Polaris-DataTable__Cell--truncated",
      "Cell-header": "Polaris-DataTable__Cell--header",
      "Cell-sortable": "Polaris-DataTable__Cell--sortable",
      "Heading-left": "Polaris-DataTable__Heading--left",
      "Cell-verticalAlignTop": "Polaris-DataTable__Cell--verticalAlignTop",
      "Cell-verticalAlignBottom": "Polaris-DataTable__Cell--verticalAlignBottom",
      "Cell-verticalAlignMiddle": "Polaris-DataTable__Cell--verticalAlignMiddle",
      "Cell-verticalAlignBaseline": "Polaris-DataTable__Cell--verticalAlignBaseline",
      hoverable: "Polaris-DataTable--hoverable",
      "Cell-hovered": "Polaris-DataTable__Cell--hovered",
      Icon: "Polaris-DataTable__Icon",
      Heading: "Polaris-DataTable__Heading",
      StickyHeaderEnabled: "Polaris-DataTable__StickyHeaderEnabled",
      StickyHeaderWrapper: "Polaris-DataTable__StickyHeaderWrapper",
      "Cell-sorted": "Polaris-DataTable__Cell--sorted",
      "Cell-total": "Polaris-DataTable__Cell--total",
      ShowTotals: "Polaris-DataTable__ShowTotals",
      "Cell-total-footer": "Polaris-DataTable--cellTotalFooter",
      Footer: "Polaris-DataTable__Footer",
      StickyHeaderInner: "Polaris-DataTable__StickyHeaderInner",
      "StickyHeaderInner-isSticky": "Polaris-DataTable__StickyHeaderInner--isSticky",
      StickyHeaderTable: "Polaris-DataTable__StickyHeaderTable",
      FixedFirstColumn: "Polaris-DataTable__FixedFirstColumn",
      StickyTableHeadingsRow: "Polaris-DataTable__StickyTableHeadingsRow",
      TooltipContent: "Polaris-DataTable__TooltipContent"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DataTable/components/Cell/Cell.js
var require_Cell = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DataTable/components/Cell/Cell.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), shared = require_shared(), DataTable_module = require_DataTable_css(), hooks = require_hooks2(), Tooltip = require_Tooltip(), Icon2 = require_Icon();
    function Cell({
      content,
      contentType,
      nthColumn,
      firstColumn,
      truncate,
      header,
      total,
      totalInFooter,
      sorted,
      sortable,
      sortDirection,
      inFixedNthColumn,
      verticalAlign = "top",
      defaultSortDirection = "ascending",
      onSort,
      colSpan,
      setRef = () => {
      },
      stickyHeadingCell = !1,
      stickyCellWidth,
      hovered = !1,
      handleFocus = () => {
      },
      hasFixedNthColumn = !1,
      fixedCellVisible = !1,
      firstColumnMinWidth,
      style,
      lastFixedFirstColumn
    }) {
      let i18n = hooks.useI18n(), numeric = contentType === "numeric", className = css.classNames(DataTable_module.default.Cell, DataTable_module.default[`Cell-${css.variationName("verticalAlign", verticalAlign)}`], firstColumn && DataTable_module.default["Cell-firstColumn"], truncate && DataTable_module.default["Cell-truncated"], header && DataTable_module.default["Cell-header"], total && DataTable_module.default["Cell-total"], totalInFooter && DataTable_module.default["Cell-total-footer"], numeric && DataTable_module.default["Cell-numeric"], sortable && DataTable_module.default["Cell-sortable"], sorted && DataTable_module.default["Cell-sorted"], stickyHeadingCell && DataTable_module.default.StickyHeaderCell, hovered && DataTable_module.default["Cell-hovered"], lastFixedFirstColumn && inFixedNthColumn && fixedCellVisible && DataTable_module.default["Cell-separate"], nthColumn && inFixedNthColumn && stickyHeadingCell && DataTable_module.default.FixedFirstColumn), headerClassName = css.classNames(header && DataTable_module.default.Heading, header && contentType === "text" && DataTable_module.default["Heading-left"]), iconClassName = css.classNames(sortable && DataTable_module.default.Icon), direction = sorted && sortDirection ? sortDirection : defaultSortDirection, source = direction === "descending" ? polarisIcons.SortDescendingIcon : polarisIcons.SortAscendingIcon, oppositeDirection = sortDirection === "ascending" ? "descending" : "ascending", sortAccessibilityLabel = i18n.translate("Polaris.DataTable.sortAccessibilityLabel", {
        direction: sorted ? oppositeDirection : direction
      }), iconMarkup = /* @__PURE__ */ React2.createElement("span", {
        className: iconClassName
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source,
        accessibilityLabel: sortAccessibilityLabel
      })), focusable = !(stickyHeadingCell && hasFixedNthColumn && nthColumn && !inFixedNthColumn), columnHeadingContent = sortable ? /* @__PURE__ */ React2.createElement("button", {
        className: headerClassName,
        onClick: onSort,
        onFocus: handleFocus,
        tabIndex: focusable ? 0 : -1
      }, iconMarkup, content) : content, colSpanProp = colSpan && colSpan > 1 ? {
        colSpan
      } : {}, minWidthStyles = nthColumn && firstColumnMinWidth ? {
        minWidth: firstColumnMinWidth
      } : {
        minWidth: stickyCellWidth
      }, stickyHeading = /* @__PURE__ */ React2.createElement("th", Object.assign({
        ref: setRef
      }, shared.headerCell.props, colSpanProp, {
        className,
        "aria-sort": sortDirection,
        style: {
          ...style,
          ...minWidthStyles
        },
        "data-index-table-sticky-heading": !0
      }), columnHeadingContent), headingMarkup = header ? /* @__PURE__ */ React2.createElement("th", Object.assign({}, shared.headerCell.props, {
        "aria-sort": sortDirection
      }, colSpanProp, {
        ref: setRef,
        className,
        scope: "col",
        style: {
          ...minWidthStyles
        }
      }), columnHeadingContent) : /* @__PURE__ */ React2.createElement("th", Object.assign({}, colSpanProp, {
        ref: setRef,
        className,
        scope: "row",
        style: {
          ...minWidthStyles
        }
      }), truncate ? /* @__PURE__ */ React2.createElement(TruncatedText, {
        className: DataTable_module.default.TooltipContent
      }, content) : content), cellMarkup = header || firstColumn || nthColumn ? headingMarkup : /* @__PURE__ */ React2.createElement("td", Object.assign({
        className
      }, colSpanProp), content);
      return stickyHeadingCell ? stickyHeading : cellMarkup;
    }
    var TruncatedText = ({
      children,
      className = ""
    }) => {
      let textRef = React2.useRef(null), {
        current
      } = textRef, text = /* @__PURE__ */ React2.createElement("span", {
        ref: textRef,
        className
      }, children);
      return current?.scrollWidth > current?.offsetWidth ? /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, {
        content: textRef.current.innerText
      }, text) : text;
    };
    exports.Cell = Cell;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/is-input-focused.js
var require_is_input_focused = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/is-input-focused.js"(exports) {
    "use strict";
    var EditableTarget;
    (function(EditableTarget2) {
      EditableTarget2.Input = "INPUT", EditableTarget2.Textarea = "TEXTAREA", EditableTarget2.Select = "SELECT", EditableTarget2.ContentEditable = "contenteditable";
    })(EditableTarget || (EditableTarget = {}));
    function isInputFocused() {
      if (document == null || document.activeElement == null)
        return !1;
      let {
        tagName
      } = document.activeElement;
      return tagName === EditableTarget.Input || tagName === EditableTarget.Textarea || tagName === EditableTarget.Select || document.activeElement.hasAttribute(EditableTarget.ContentEditable);
    }
    exports.isInputFocused = isInputFocused;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Pagination/Pagination.css.js
var require_Pagination_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Pagination/Pagination.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Pagination: "Polaris-Pagination",
      table: "Polaris-Pagination--table",
      TablePaginationActions: "Polaris-Pagination__TablePaginationActions"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Pagination/Pagination.js
var require_Pagination = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Pagination/Pagination.js"(exports) {
    "use strict";
    var polarisIcons = require("@shopify/polaris-icons"), React2 = require_react(), isInputFocused = require_is_input_focused(), css = require_css(), Pagination_module = require_Pagination_css(), hooks = require_hooks2(), KeypressListener = require_KeypressListener(), Box3 = require_Box(), InlineStack3 = require_InlineStack(), ButtonGroup = require_ButtonGroup(), Tooltip = require_Tooltip(), Text3 = require_Text(), Button3 = require_Button();
    function Pagination({
      hasNext,
      hasPrevious,
      nextURL,
      previousURL,
      onNext,
      onPrevious,
      nextTooltip,
      previousTooltip,
      nextKeys,
      previousKeys,
      accessibilityLabel,
      accessibilityLabels,
      label,
      type = "page"
    }) {
      let i18n = hooks.useI18n(), node = /* @__PURE__ */ React2.createRef(), navLabel = accessibilityLabel || i18n.translate("Polaris.Pagination.pagination"), previousLabel = accessibilityLabels?.previous || i18n.translate("Polaris.Pagination.previous"), nextLabel = accessibilityLabels?.next || i18n.translate("Polaris.Pagination.next"), prev = /* @__PURE__ */ React2.createElement(Button3.Button, {
        icon: polarisIcons.ChevronLeftIcon,
        accessibilityLabel: previousLabel,
        url: previousURL,
        onClick: onPrevious,
        disabled: !hasPrevious,
        id: "previousURL"
      }), constructedPrevious = previousTooltip && hasPrevious ? /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, {
        activatorWrapper: "span",
        content: previousTooltip,
        preferredPosition: "below"
      }, prev) : prev, next = /* @__PURE__ */ React2.createElement(Button3.Button, {
        icon: polarisIcons.ChevronRightIcon,
        accessibilityLabel: nextLabel,
        url: nextURL,
        onClick: onNext,
        disabled: !hasNext,
        id: "nextURL"
      }), constructedNext = nextTooltip && hasNext ? /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, {
        activatorWrapper: "span",
        content: nextTooltip,
        preferredPosition: "below"
      }, next) : next, previousHandler = onPrevious || noop, previousButtonEvents = previousKeys && (previousURL || onPrevious) && hasPrevious && previousKeys.map((key) => /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
        key,
        keyCode: key,
        handler: handleCallback(previousURL ? clickPaginationLink("previousURL", node) : previousHandler)
      })), nextHandler = onNext || noop, nextButtonEvents = nextKeys && (nextURL || onNext) && hasNext && nextKeys.map((key) => /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
        key,
        keyCode: key,
        handler: handleCallback(nextURL ? clickPaginationLink("nextURL", node) : nextHandler)
      }));
      if (type === "table") {
        let labelMarkup2 = label ? /* @__PURE__ */ React2.createElement(Box3.Box, {
          padding: "300",
          paddingBlockStart: "0",
          paddingBlockEnd: "0"
        }, /* @__PURE__ */ React2.createElement(Text3.Text, {
          as: "span",
          variant: "bodySm",
          fontWeight: "medium"
        }, label)) : null;
        return /* @__PURE__ */ React2.createElement("nav", {
          "aria-label": navLabel,
          ref: node,
          className: css.classNames(Pagination_module.default.Pagination, Pagination_module.default.table)
        }, previousButtonEvents, nextButtonEvents, /* @__PURE__ */ React2.createElement(Box3.Box, {
          background: "bg-surface-secondary",
          paddingBlockStart: "150",
          paddingBlockEnd: "150",
          paddingInlineStart: "300",
          paddingInlineEnd: "200"
        }, /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
          align: "center",
          blockAlign: "center"
        }, /* @__PURE__ */ React2.createElement("div", {
          className: Pagination_module.default.TablePaginationActions,
          "data-buttongroup-variant": "segmented"
        }, /* @__PURE__ */ React2.createElement("div", null, constructedPrevious), labelMarkup2, /* @__PURE__ */ React2.createElement("div", null, constructedNext)))));
      }
      let labelTextMarkup = hasNext && hasPrevious ? /* @__PURE__ */ React2.createElement("span", null, label) : /* @__PURE__ */ React2.createElement(Text3.Text, {
        tone: "subdued",
        as: "span"
      }, label), labelMarkup = label ? /* @__PURE__ */ React2.createElement(Box3.Box, {
        padding: "300",
        paddingBlockStart: "0",
        paddingBlockEnd: "0"
      }, /* @__PURE__ */ React2.createElement("div", {
        "aria-live": "polite"
      }, labelTextMarkup)) : null;
      return /* @__PURE__ */ React2.createElement("nav", {
        "aria-label": navLabel,
        ref: node,
        className: Pagination_module.default.Pagination
      }, previousButtonEvents, nextButtonEvents, /* @__PURE__ */ React2.createElement(ButtonGroup.ButtonGroup, {
        variant: "segmented"
      }, constructedPrevious, labelMarkup, constructedNext));
    }
    function clickPaginationLink(id, node) {
      return () => {
        if (node.current == null)
          return;
        let link = node.current.querySelector(`#${id}`);
        link && link.click();
      };
    }
    function handleCallback(fn) {
      return () => {
        isInputFocused.isInputFocused() || fn();
      };
    }
    function noop() {
    }
    exports.Pagination = Pagination;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/AfterInitialMount/AfterInitialMount.js
var require_AfterInitialMount = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/AfterInitialMount/AfterInitialMount.js"(exports) {
    "use strict";
    var React2 = require_react(), useIsAfterInitialMount = require_use_is_after_initial_mount();
    function AfterInitialMount({
      children,
      onMount,
      fallback = null
    }) {
      let isMounted = useIsAfterInitialMount.useIsAfterInitialMount(), content = isMounted ? children : fallback;
      return React2.useEffect(() => {
        isMounted && onMount && onMount();
      }, [isMounted, onMount]), /* @__PURE__ */ React2.createElement(React2.Fragment, null, content);
    }
    exports.AfterInitialMount = AfterInitialMount;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/sticky-manager/hooks.js
var require_hooks10 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/sticky-manager/hooks.js"(exports) {
    "use strict";
    var React2 = require_react(), errors = require_errors(), context = require_context4();
    function useStickyManager() {
      let stickyManager = React2.useContext(context.StickyManagerContext);
      if (!stickyManager)
        throw new errors.MissingAppProviderError("No StickyManager was provided.");
      return stickyManager;
    }
    exports.useStickyManager = useStickyManager;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Sticky/Sticky.js
var require_Sticky = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Sticky/Sticky.js"(exports) {
    "use strict";
    var React2 = require_react(), geometry = require_geometry(), hooks = require_hooks10(), StickyInner = class extends React2.Component {
      constructor(...args) {
        super(...args), this.state = {
          isSticky: !1,
          style: {}
        }, this.placeHolderNode = null, this.stickyNode = null, this.setPlaceHolderNode = (node) => {
          this.placeHolderNode = node;
        }, this.setStickyNode = (node) => {
          this.stickyNode = node;
        }, this.handlePositioning = (stick, top = 0, left = 0, width = 0) => {
          let {
            isSticky
          } = this.state;
          (stick && !isSticky || !stick && isSticky) && (this.adjustPlaceHolderNode(stick), this.setState({
            isSticky: !isSticky
          }, () => {
            if (this.props.onStickyChange == null || (this.props.onStickyChange(!isSticky), this.props.boundingElement == null))
              return null;
            this.props.boundingElement.toggleAttribute("data-sticky-active");
          }));
          let style = stick ? {
            position: "fixed",
            top,
            left,
            width
          } : {};
          this.setState({
            style
          });
        }, this.adjustPlaceHolderNode = (add) => {
          this.placeHolderNode && this.stickyNode && (this.placeHolderNode.style.paddingBottom = add ? `${geometry.getRectForNode(this.stickyNode).height}px` : "0px");
        };
      }
      componentDidMount() {
        let {
          boundingElement,
          offset = !1,
          disableWhenStacked = !1,
          stickyManager
        } = this.props;
        !this.stickyNode || !this.placeHolderNode || stickyManager.registerStickyItem({
          stickyNode: this.stickyNode,
          placeHolderNode: this.placeHolderNode,
          handlePositioning: this.handlePositioning,
          offset,
          boundingElement,
          disableWhenStacked
        });
      }
      componentWillUnmount() {
        let {
          stickyManager
        } = this.props;
        this.stickyNode && stickyManager.unregisterStickyItem(this.stickyNode);
      }
      render() {
        let {
          style,
          isSticky
        } = this.state, {
          children
        } = this.props, childrenContent = isFunction(children) ? children(isSticky) : children;
        return /* @__PURE__ */ React2.createElement("div", null, /* @__PURE__ */ React2.createElement("div", {
          ref: this.setPlaceHolderNode
        }), /* @__PURE__ */ React2.createElement("div", {
          ref: this.setStickyNode,
          style
        }, childrenContent));
      }
    };
    function isFunction(arg) {
      return typeof arg == "function";
    }
    function Sticky(props) {
      let stickyManager = hooks.useStickyManager();
      return /* @__PURE__ */ React2.createElement(StickyInner, Object.assign({}, props, {
        stickyManager
      }));
    }
    exports.Sticky = Sticky;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DataTable/components/Navigation/Navigation.js
var require_Navigation = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DataTable/components/Navigation/Navigation.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), DataTable_module = require_DataTable_css(), hooks = require_hooks2(), Button3 = require_Button();
    function Navigation({
      columnVisibilityData,
      isScrolledFarthestLeft,
      isScrolledFarthestRight,
      navigateTableLeft,
      navigateTableRight,
      fixedFirstColumns,
      setRef = () => {
      }
    }) {
      let i18n = hooks.useI18n(), pipMarkup = columnVisibilityData.map((column, index) => {
        if (index < fixedFirstColumns)
          return;
        let className = css.classNames(DataTable_module.default.Pip, column.isVisible && DataTable_module.default["Pip-visible"]);
        return /* @__PURE__ */ React2.createElement("div", {
          className,
          key: `pip-${index}`
        });
      }), leftA11yLabel = i18n.translate("Polaris.DataTable.navAccessibilityLabel", {
        direction: "left"
      }), rightA11yLabel = i18n.translate("Polaris.DataTable.navAccessibilityLabel", {
        direction: "right"
      });
      return /* @__PURE__ */ React2.createElement("div", {
        className: DataTable_module.default.Navigation,
        ref: setRef
      }, /* @__PURE__ */ React2.createElement(Button3.Button, {
        variant: "tertiary",
        icon: polarisIcons.ChevronLeftIcon,
        disabled: isScrolledFarthestLeft,
        accessibilityLabel: leftA11yLabel,
        onClick: navigateTableLeft
      }), pipMarkup, /* @__PURE__ */ React2.createElement(Button3.Button, {
        variant: "tertiary",
        icon: polarisIcons.ChevronRightIcon,
        disabled: isScrolledFarthestRight,
        accessibilityLabel: rightA11yLabel,
        onClick: navigateTableRight
      }));
    }
    exports.Navigation = Navigation;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DataTable/DataTable.js
var require_DataTable = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DataTable/DataTable.js"(exports) {
    "use strict";
    var React2 = require_react(), isEqual = require("react-fast-compare"), debounce = require_debounce(), css = require_css(), shared = require_shared(), utilities = require_utilities7(), DataTable_module = require_DataTable_css(), Cell = require_Cell(), Pagination = require_Pagination(), AfterInitialMount = require_AfterInitialMount(), Sticky = require_Sticky(), Navigation = require_Navigation(), hooks = require_hooks2(), EventListener = require_EventListener(), getRowClientHeights = (rows) => {
      let heights = [];
      return rows && rows.forEach((row) => {
        heights.push(row.clientHeight);
      }), heights;
    }, DataTableInner = class extends React2.PureComponent {
      constructor(...args) {
        super(...args), this.state = {
          condensed: !1,
          columnVisibilityData: [],
          isScrolledFarthestLeft: !0,
          isScrolledFarthestRight: !1,
          rowHovered: void 0
        }, this.dataTable = /* @__PURE__ */ React2.createRef(), this.scrollContainer = /* @__PURE__ */ React2.createRef(), this.table = /* @__PURE__ */ React2.createRef(), this.stickyTable = /* @__PURE__ */ React2.createRef(), this.stickyNav = null, this.headerNav = null, this.tableHeadings = [], this.stickyHeadings = [], this.tableHeadingWidths = [], this.stickyHeaderActive = !1, this.scrollStopTimer = null, this.handleResize = debounce.debounce(() => {
          let {
            table: {
              current: table
            },
            scrollContainer: {
              current: scrollContainer
            }
          } = this, condensed = !1;
          table && scrollContainer && (condensed = table.scrollWidth > scrollContainer.clientWidth + 1), this.setState({
            condensed,
            ...this.calculateColumnVisibilityData(condensed)
          });
        }), this.setCellRef = ({
          ref,
          index,
          inStickyHeader
        }) => {
          if (ref != null)
            if (inStickyHeader) {
              this.stickyHeadings[index] = ref;
              let button = ref.querySelector("button");
              if (button == null)
                return;
              button.addEventListener("focus", this.handleHeaderButtonFocus);
            } else
              this.tableHeadings[index] = ref, this.tableHeadingWidths[index] = ref.clientWidth;
        }, this.changeHeadingFocus = () => {
          let {
            tableHeadings,
            stickyHeadings,
            stickyNav,
            headerNav
          } = this, stickyFocusedItemIndex = stickyHeadings.findIndex((item) => item === document.activeElement?.parentElement), tableFocusedItemIndex = tableHeadings.findIndex((item) => item === document.activeElement?.parentElement), arrowsInStickyNav = stickyNav?.querySelectorAll("button"), arrowsInHeaderNav = headerNav?.querySelectorAll("button"), stickyFocusedNavIndex = -1;
          arrowsInStickyNav?.forEach((item, index) => {
            item === document.activeElement && (stickyFocusedNavIndex = index);
          });
          let headerFocusedNavIndex = -1;
          if (arrowsInHeaderNav?.forEach((item, index) => {
            item === document.activeElement && (headerFocusedNavIndex = index);
          }), stickyFocusedItemIndex < 0 && tableFocusedItemIndex < 0 && stickyFocusedNavIndex < 0 && headerFocusedNavIndex < 0)
            return null;
          let button;
          if (stickyFocusedItemIndex >= 0 ? button = tableHeadings[stickyFocusedItemIndex].querySelector("button") : tableFocusedItemIndex >= 0 && (button = stickyHeadings[tableFocusedItemIndex].querySelector("button")), stickyFocusedNavIndex >= 0 ? button = arrowsInHeaderNav?.[stickyFocusedNavIndex] : headerFocusedNavIndex >= 0 && (button = arrowsInStickyNav?.[headerFocusedNavIndex]), button == null)
            return null;
          button.style.visibility = "visible", button.focus(), button.style.removeProperty("visibility");
        }, this.calculateColumnVisibilityData = (condensed) => {
          let fixedFirstColumns = this.fixedFirstColumns(), {
            table: {
              current: table
            },
            scrollContainer: {
              current: scrollContainer
            },
            dataTable: {
              current: dataTable
            }
          } = this, {
            stickyHeader
          } = this.props;
          if ((stickyHeader || condensed) && table && scrollContainer && dataTable) {
            let headerCells = table.querySelectorAll(shared.headerCell.selector), rightMostHeader = headerCells[fixedFirstColumns - 1], nthColumnWidth = fixedFirstColumns ? rightMostHeader.offsetLeft + rightMostHeader.offsetWidth : 0;
            if (headerCells.length > 0) {
              let firstVisibleColumnIndex = headerCells.length - 1, tableLeftVisibleEdge = scrollContainer.scrollLeft + nthColumnWidth, tableRightVisibleEdge = scrollContainer.scrollLeft + dataTable.offsetWidth, tableData = {
                firstVisibleColumnIndex,
                tableLeftVisibleEdge,
                tableRightVisibleEdge
              }, columnVisibilityData = [...headerCells].map(utilities.measureColumn(tableData)), lastColumn = columnVisibilityData[columnVisibilityData.length - 1], isScrolledFarthestLeft = fixedFirstColumns ? tableLeftVisibleEdge === nthColumnWidth : tableLeftVisibleEdge === 0;
              return {
                columnVisibilityData,
                ...utilities.getPrevAndCurrentColumns(tableData, columnVisibilityData),
                isScrolledFarthestLeft,
                isScrolledFarthestRight: lastColumn.rightEdge <= tableRightVisibleEdge
              };
            }
          }
          return {
            columnVisibilityData: [],
            previousColumn: void 0,
            currentColumn: void 0
          };
        }, this.handleHeaderButtonFocus = (event) => {
          let fixedFirstColumns = this.fixedFirstColumns();
          if (this.scrollContainer.current == null || event.target == null || this.state.columnVisibilityData.length === 0)
            return;
          let currentCell = event.target.parentNode, tableScrollLeft = this.scrollContainer.current.scrollLeft, tableViewableWidth = this.scrollContainer.current.offsetWidth, tableRightEdge = tableScrollLeft + tableViewableWidth, nthColumnWidth = this.state.columnVisibilityData.length > 0 ? this.state.columnVisibilityData[fixedFirstColumns]?.rightEdge : 0, currentColumnLeftEdge = currentCell.offsetLeft, currentColumnRightEdge = currentCell.offsetLeft + currentCell.offsetWidth;
          tableScrollLeft > currentColumnLeftEdge - nthColumnWidth && (this.scrollContainer.current.scrollLeft = currentColumnLeftEdge - nthColumnWidth), currentColumnRightEdge > tableRightEdge && (this.scrollContainer.current.scrollLeft = currentColumnRightEdge - tableViewableWidth);
        }, this.stickyHeaderScrolling = () => {
          let {
            current: stickyTable
          } = this.stickyTable, {
            current: scrollContainer
          } = this.scrollContainer;
          stickyTable == null || scrollContainer == null || (stickyTable.scrollLeft = scrollContainer.scrollLeft);
        }, this.scrollListener = () => {
          this.scrollStopTimer && clearTimeout(this.scrollStopTimer), this.scrollStopTimer = setTimeout(() => {
            this.setState((prevState) => ({
              ...this.calculateColumnVisibilityData(prevState.condensed)
            }));
          }, 100), this.setState({
            isScrolledFarthestLeft: this.scrollContainer.current?.scrollLeft === 0
          }), this.props.stickyHeader && this.stickyHeaderActive && this.stickyHeaderScrolling();
        }, this.handleHover = (row) => () => {
          this.setState({
            rowHovered: row
          });
        }, this.handleFocus = (event) => {
          let fixedFirstColumns = this.fixedFirstColumns();
          if (this.scrollContainer.current == null || event.target == null)
            return;
          let currentCell = event.target.parentNode, nthColumnWidth = this.props ? this.state.columnVisibilityData[fixedFirstColumns]?.rightEdge : 0, desiredScrollLeft = currentCell.offsetLeft - nthColumnWidth;
          this.scrollContainer.current.scrollLeft > desiredScrollLeft && (this.scrollContainer.current.scrollLeft = desiredScrollLeft);
        }, this.navigateTable = (direction) => {
          let fixedFirstColumns = this.fixedFirstColumns(), {
            currentColumn,
            previousColumn
          } = this.state, nthColumnWidth = this.state.columnVisibilityData[fixedFirstColumns - 1]?.rightEdge;
          if (!currentColumn || !previousColumn)
            return;
          let prevWidths = 0;
          for (let index = 0; index < currentColumn.index; index++)
            prevWidths += this.state.columnVisibilityData[index].width;
          let {
            current: scrollContainer
          } = this.scrollContainer;
          return () => {
            let newScrollLeft = 0;
            fixedFirstColumns ? newScrollLeft = direction === "right" ? prevWidths - nthColumnWidth + currentColumn.width : prevWidths - previousColumn.width - nthColumnWidth : newScrollLeft = direction === "right" ? currentColumn.rightEdge : previousColumn.leftEdge, scrollContainer && (scrollContainer.scrollLeft = newScrollLeft, requestAnimationFrame(() => {
              this.setState((prevState) => ({
                ...this.calculateColumnVisibilityData(prevState.condensed)
              }));
            }));
          };
        }, this.renderHeading = ({
          heading,
          headingIndex,
          inFixedNthColumn,
          inStickyHeader
        }) => {
          let {
            sortable,
            truncate = !1,
            columnContentTypes,
            defaultSortDirection,
            initialSortColumnIndex = 0,
            verticalAlign,
            firstColumnMinWidth
          } = this.props, fixedFirstColumns = this.fixedFirstColumns(), {
            sortDirection = defaultSortDirection,
            sortedColumnIndex = initialSortColumnIndex,
            isScrolledFarthestLeft
          } = this.state, sortableHeadingProps, headingCellId = `heading-cell-${headingIndex}`, stickyHeaderId = `stickyheader-${headingIndex}`, id = inStickyHeader ? stickyHeaderId : headingCellId;
          if (sortable) {
            let isSortable = sortable[headingIndex], isSorted = isSortable && sortedColumnIndex === headingIndex;
            sortableHeadingProps = {
              defaultSortDirection,
              sorted: isSorted,
              sortable: isSortable,
              sortDirection: isSorted ? sortDirection : "none",
              onSort: this.defaultOnSort(headingIndex),
              fixedNthColumn: fixedFirstColumns,
              inFixedNthColumn: fixedFirstColumns
            };
          }
          let stickyCellWidth = inStickyHeader ? this.tableHeadingWidths[headingIndex] : void 0, fixedCellVisible = !isScrolledFarthestLeft, cellProps = {
            header: !0,
            stickyHeadingCell: inStickyHeader,
            content: heading,
            contentType: columnContentTypes[headingIndex],
            nthColumn: headingIndex < fixedFirstColumns,
            fixedFirstColumns,
            truncate,
            headingIndex,
            ...sortableHeadingProps,
            verticalAlign,
            handleFocus: this.handleFocus,
            stickyCellWidth,
            fixedCellVisible,
            firstColumnMinWidth
          };
          return inFixedNthColumn && inStickyHeader ? [/* @__PURE__ */ React2.createElement(Cell.Cell, Object.assign({
            key: id
          }, cellProps, {
            setRef: (ref) => {
              this.setCellRef({
                ref,
                index: headingIndex,
                inStickyHeader
              });
            },
            inFixedNthColumn: !1
          })), /* @__PURE__ */ React2.createElement(Cell.Cell, Object.assign({
            key: `${id}-sticky`
          }, cellProps, {
            setRef: (ref) => {
              this.setCellRef({
                ref,
                index: headingIndex,
                inStickyHeader
              });
            },
            inFixedNthColumn: Boolean(fixedFirstColumns),
            lastFixedFirstColumn: headingIndex === fixedFirstColumns - 1,
            style: {
              left: this.state.columnVisibilityData[headingIndex]?.leftEdge
            }
          }))] : /* @__PURE__ */ React2.createElement(Cell.Cell, Object.assign({
            key: id
          }, cellProps, {
            setRef: (ref) => {
              this.setCellRef({
                ref,
                index: headingIndex,
                inStickyHeader
              });
            },
            lastFixedFirstColumn: headingIndex === fixedFirstColumns - 1,
            inFixedNthColumn
          }));
        }, this.totalsRowHeading = () => {
          let {
            i18n,
            totals,
            totalsName
          } = this.props, totalsLabel = totalsName || {
            singular: i18n.translate("Polaris.DataTable.totalRowHeading"),
            plural: i18n.translate("Polaris.DataTable.totalsRowHeading")
          };
          return totals && totals.filter((total) => total !== "").length > 1 ? totalsLabel.plural : totalsLabel.singular;
        }, this.renderTotals = ({
          total,
          index
        }) => {
          let fixedFirstColumns = this.fixedFirstColumns(), id = `totals-cell-${index}`, {
            truncate = !1,
            verticalAlign,
            columnContentTypes
          } = this.props, content, contentType;
          index === 0 && (content = this.totalsRowHeading()), total !== "" && index > 0 && (contentType = columnContentTypes[index], content = total);
          let totalInFooter = this.props.showTotalsInFooter;
          return /* @__PURE__ */ React2.createElement(Cell.Cell, {
            total: !0,
            totalInFooter,
            nthColumn: index <= fixedFirstColumns - 1,
            firstColumn: index === 0,
            key: id,
            content,
            contentType,
            truncate,
            verticalAlign
          });
        }, this.getColSpan = (rowLength, headingsLength, contentTypesLength, cellIndex) => {
          if (this.fixedFirstColumns())
            return 1;
          let rowLen = rowLength || 1, colLen = headingsLength || contentTypesLength, colSpan = Math.floor(colLen / rowLen), remainder = colLen % rowLen;
          return cellIndex === 0 ? colSpan + remainder : colSpan;
        }, this.defaultRenderRow = ({
          row,
          index,
          inFixedNthColumn,
          rowHeights
        }) => {
          let {
            columnContentTypes,
            truncate = !1,
            verticalAlign,
            hoverable = !0,
            headings
          } = this.props, {
            condensed
          } = this.state, fixedFirstColumns = this.fixedFirstColumns(), className = css.classNames(DataTable_module.default.TableRow, hoverable && DataTable_module.default.hoverable);
          return /* @__PURE__ */ React2.createElement("tr", {
            key: `row-${index}`,
            className,
            onMouseEnter: this.handleHover(index),
            onMouseLeave: this.handleHover()
          }, row.map((content, cellIndex) => {
            let hovered = index === this.state.rowHovered, id = `cell-${cellIndex}-row-${index}`, colSpan = this.getColSpan(row.length, headings.length, columnContentTypes.length, cellIndex);
            return /* @__PURE__ */ React2.createElement(Cell.Cell, {
              key: id,
              content,
              contentType: columnContentTypes[cellIndex],
              nthColumn: cellIndex <= fixedFirstColumns - 1,
              firstColumn: cellIndex === 0,
              truncate,
              verticalAlign,
              colSpan,
              hovered,
              style: rowHeights ? {
                height: `${rowHeights[index]}px`
              } : {},
              inFixedNthColumn: condensed && inFixedNthColumn
            });
          }));
        }, this.defaultOnSort = (headingIndex) => {
          let {
            onSort,
            defaultSortDirection = "ascending",
            initialSortColumnIndex
          } = this.props, {
            sortDirection = defaultSortDirection,
            sortedColumnIndex = initialSortColumnIndex
          } = this.state, newSortDirection = defaultSortDirection;
          return sortedColumnIndex === headingIndex && (newSortDirection = sortDirection === "ascending" ? "descending" : "ascending"), () => {
            this.setState({
              sortDirection: newSortDirection,
              sortedColumnIndex: headingIndex
            }, () => {
              onSort && onSort(headingIndex, newSortDirection);
            });
          };
        };
      }
      componentDidMount() {
        setTimeout(() => {
          this.handleResize();
        }, 10);
      }
      componentDidUpdate(prevProps) {
        isEqual(prevProps, this.props) || this.handleResize();
      }
      componentWillUnmount() {
        this.handleResize.cancel();
      }
      render() {
        let {
          headings,
          totals,
          showTotalsInFooter,
          rows,
          footerContent,
          hideScrollIndicator = !1,
          increasedTableDensity = !1,
          hasZebraStripingOnData = !1,
          stickyHeader = !1,
          hasFixedFirstColumn: fixedFirstColumn = !1,
          pagination
        } = this.props, {
          condensed,
          columnVisibilityData,
          isScrolledFarthestLeft,
          isScrolledFarthestRight
        } = this.state;
        fixedFirstColumn && console.warn("Deprecation: The `hasFixedFirstColumn` prop on the `DataTable` has been deprecated. Use fixedFirstColumns={n} instead.");
        let fixedFirstColumns = this.fixedFirstColumns(), rowCountIsEven = rows.length % 2 === 0, className = css.classNames(DataTable_module.default.DataTable, condensed && DataTable_module.default.condensed, totals && DataTable_module.default.ShowTotals, showTotalsInFooter && DataTable_module.default.ShowTotalsInFooter, hasZebraStripingOnData && DataTable_module.default.ZebraStripingOnData, hasZebraStripingOnData && rowCountIsEven && DataTable_module.default.RowCountIsEven), wrapperClassName = css.classNames(DataTable_module.default.TableWrapper, condensed && DataTable_module.default.condensed, increasedTableDensity && DataTable_module.default.IncreasedTableDensity, stickyHeader && DataTable_module.default.StickyHeaderEnabled), headingMarkup = /* @__PURE__ */ React2.createElement("tr", null, headings.map((heading, index) => this.renderHeading({
          heading,
          headingIndex: index,
          inFixedNthColumn: !1,
          inStickyHeader: !1
        }))), totalsMarkup = totals ? /* @__PURE__ */ React2.createElement("tr", null, totals.map((total, index) => this.renderTotals({
          total,
          index
        }))) : null, nthColumns = rows.map((row) => row.slice(0, fixedFirstColumns)), nthHeadings = headings.slice(0, fixedFirstColumns), nthTotals = totals?.slice(0, fixedFirstColumns), tableHeaderRows = this.table.current?.children[0].childNodes, tableBodyRows = this.table.current?.children[1].childNodes, headerRowHeights = getRowClientHeights(tableHeaderRows), bodyRowHeights = getRowClientHeights(tableBodyRows), fixedNthColumnMarkup = condensed && fixedFirstColumns !== 0 && /* @__PURE__ */ React2.createElement("table", {
          className: css.classNames(DataTable_module.default.FixedFirstColumn, !isScrolledFarthestLeft && DataTable_module.default.separate),
          style: {
            width: `${columnVisibilityData[fixedFirstColumns - 1]?.rightEdge}px`
          }
        }, /* @__PURE__ */ React2.createElement("thead", null, /* @__PURE__ */ React2.createElement("tr", {
          style: {
            height: `${headerRowHeights[0]}px`
          }
        }, nthHeadings.map((heading, index) => this.renderHeading({
          heading,
          headingIndex: index,
          inFixedNthColumn: !0,
          inStickyHeader: !1
        }))), totals && !showTotalsInFooter && /* @__PURE__ */ React2.createElement("tr", {
          style: {
            height: `${headerRowHeights[1]}px`
          }
        }, nthTotals?.map((total, index) => this.renderTotals({
          total,
          index
        })))), /* @__PURE__ */ React2.createElement("tbody", null, nthColumns.map((row, index) => this.defaultRenderRow({
          row,
          index,
          inFixedNthColumn: !0,
          rowHeights: bodyRowHeights
        }))), totals && showTotalsInFooter && /* @__PURE__ */ React2.createElement("tfoot", null, /* @__PURE__ */ React2.createElement("tr", null, nthTotals?.map((total, index) => this.renderTotals({
          total,
          index
        }))))), bodyMarkup = rows.map((row, index) => this.defaultRenderRow({
          row,
          index,
          inFixedNthColumn: !1
        })), footerMarkup = footerContent ? /* @__PURE__ */ React2.createElement("div", {
          className: DataTable_module.default.Footer
        }, footerContent) : null, paginationMarkup = pagination ? /* @__PURE__ */ React2.createElement(Pagination.Pagination, Object.assign({
          type: "table"
        }, pagination)) : null, headerTotalsMarkup = showTotalsInFooter ? null : totalsMarkup, footerTotalsMarkup = showTotalsInFooter ? /* @__PURE__ */ React2.createElement("tfoot", null, totalsMarkup) : null, navigationMarkup = (location) => hideScrollIndicator ? null : /* @__PURE__ */ React2.createElement(Navigation.Navigation, {
          columnVisibilityData,
          isScrolledFarthestLeft,
          isScrolledFarthestRight,
          navigateTableLeft: this.navigateTable("left"),
          navigateTableRight: this.navigateTable("right"),
          fixedFirstColumns,
          setRef: (ref) => {
            location === "header" ? this.headerNav = ref : location === "sticky" && (this.stickyNav = ref);
          }
        }), stickyHeaderMarkup = stickyHeader ? /* @__PURE__ */ React2.createElement(AfterInitialMount.AfterInitialMount, null, /* @__PURE__ */ React2.createElement("div", {
          className: DataTable_module.default.StickyHeaderWrapper,
          role: "presentation"
        }, /* @__PURE__ */ React2.createElement(Sticky.Sticky, {
          boundingElement: this.dataTable.current,
          onStickyChange: (isSticky) => {
            this.changeHeadingFocus(), this.stickyHeaderActive = isSticky;
          }
        }, (isSticky) => {
          let stickyHeaderInnerClassNames = css.classNames(DataTable_module.default.StickyHeaderInner, isSticky && DataTable_module.default["StickyHeaderInner-isSticky"]), stickyHeaderTableClassNames = css.classNames(DataTable_module.default.StickyHeaderTable, !isScrolledFarthestLeft && DataTable_module.default.separate);
          return /* @__PURE__ */ React2.createElement("div", {
            className: stickyHeaderInnerClassNames
          }, /* @__PURE__ */ React2.createElement("div", null, navigationMarkup("sticky")), /* @__PURE__ */ React2.createElement("table", {
            className: stickyHeaderTableClassNames,
            ref: this.stickyTable
          }, /* @__PURE__ */ React2.createElement("thead", null, /* @__PURE__ */ React2.createElement("tr", {
            className: DataTable_module.default.StickyTableHeadingsRow
          }, headings.map((heading, index) => this.renderHeading({
            heading,
            headingIndex: index,
            inFixedNthColumn: Boolean(index <= fixedFirstColumns - 1 && fixedFirstColumns),
            inStickyHeader: !0
          }))))));
        }))) : null;
        return /* @__PURE__ */ React2.createElement("div", {
          className: wrapperClassName,
          ref: this.dataTable
        }, stickyHeaderMarkup, navigationMarkup("header"), /* @__PURE__ */ React2.createElement("div", {
          className
        }, /* @__PURE__ */ React2.createElement("div", {
          className: DataTable_module.default.ScrollContainer,
          ref: this.scrollContainer
        }, /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
          event: "resize",
          handler: this.handleResize
        }), /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
          capture: !0,
          passive: !0,
          event: "scroll",
          handler: this.scrollListener
        }), fixedNthColumnMarkup, /* @__PURE__ */ React2.createElement("table", {
          className: DataTable_module.default.Table,
          ref: this.table
        }, /* @__PURE__ */ React2.createElement("thead", null, headingMarkup, headerTotalsMarkup), /* @__PURE__ */ React2.createElement("tbody", null, bodyMarkup), footerTotalsMarkup)), paginationMarkup, footerMarkup));
      }
      fixedFirstColumns() {
        let {
          hasFixedFirstColumn,
          fixedFirstColumns = 0,
          headings
        } = this.props, numberOfFixedFirstColumns = hasFixedFirstColumn && !fixedFirstColumns ? 1 : fixedFirstColumns;
        return numberOfFixedFirstColumns >= headings.length ? 0 : numberOfFixedFirstColumns;
      }
      // eslint-disable-next-line @shopify/react-no-multiple-render-methods
      // eslint-disable-next-line @shopify/react-no-multiple-render-methods
    };
    function DataTable3(props) {
      let i18n = hooks.useI18n();
      return /* @__PURE__ */ React2.createElement(DataTableInner, Object.assign({}, props, {
        i18n
      }));
    }
    exports.DataTable = DataTable3;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/dates.js
var require_dates = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/dates.js"(exports) {
    "use strict";
    function getWeeksForMonth(month, year, weekStartsOn = 0) {
      let firstOfMonth = new Date(year, month, 1), firstDayOfWeek = firstOfMonth.getDay(), weeks = [[]], currentWeek = weeks[0], currentDate = firstOfMonth, orderedWeekday = getOrderedWeekdays(weekStartsOn);
      for (let i = 0; i < orderedWeekday.indexOf(firstDayOfWeek); i++)
        currentWeek.push(null);
      for (; currentDate.getMonth() === month; )
        currentWeek.length === 7 && (currentWeek = [], weeks.push(currentWeek)), currentWeek.push(currentDate), currentDate = new Date(year, month, currentDate.getDate() + 1);
      for (; currentWeek.length < 7; )
        currentWeek.push(null);
      return weeks;
    }
    function dateIsInRange(day, range) {
      if (day == null)
        return !1;
      let {
        start,
        end
      } = range;
      return Boolean(start && day > start && end && day < end);
    }
    function dateIsSelected(day, range) {
      if (day == null)
        return !1;
      let {
        start,
        end
      } = range;
      return Boolean(start && isSameDay(start, day) || end && isSameDay(end, day));
    }
    function isSameDay(day1, day2) {
      return day1.getDate() === day2.getDate() && day1.getMonth() === day2.getMonth() && day1.getFullYear() === day2.getFullYear();
    }
    function getNewRange(range, selected) {
      if (range == null)
        return {
          start: selected,
          end: selected
        };
      let {
        start,
        end
      } = range;
      return end && (isDateAfter(start, end) || isDateBefore(start, end)) ? {
        start: selected,
        end: selected
      } : start ? isDateBefore(selected, start) ? {
        start: selected,
        end: selected
      } : {
        start,
        end: selected
      } : end ? isDateBefore(selected, end) ? {
        start: selected,
        end
      } : {
        start: start || end,
        end: selected
      } : {
        start: selected,
        end: selected
      };
    }
    function getNextDisplayMonth(month) {
      return month === 11 ? 0 : month + 1;
    }
    function getNextDisplayYear(month, year) {
      return month === 11 ? year + 1 : year;
    }
    function getPreviousDisplayMonth(month) {
      return month === 0 ? 11 : month - 1;
    }
    function getPreviousDisplayYear(month, year) {
      return month === 0 ? year - 1 : year;
    }
    function isDateAfter(date, dateToCompare) {
      return date.getTime() > dateToCompare.getTime();
    }
    function isDateBefore(date, dateToCompare) {
      return date.getTime() < dateToCompare.getTime();
    }
    function isDateDisabled(date, datesToCompare) {
      return datesToCompare.some((dateToCompare) => date.getTime() === dateToCompare.getTime());
    }
    var WEEKDAYS = [0, 1, 2, 3, 4, 5, 6];
    function getOrderedWeekdays(weekStartsOn) {
      let weekDays = [...WEEKDAYS];
      return [...weekDays.splice(weekStartsOn), ...weekDays];
    }
    exports.dateIsInRange = dateIsInRange;
    exports.dateIsSelected = dateIsSelected;
    exports.getNewRange = getNewRange;
    exports.getNextDisplayMonth = getNextDisplayMonth;
    exports.getNextDisplayYear = getNextDisplayYear;
    exports.getOrderedWeekdays = getOrderedWeekdays;
    exports.getPreviousDisplayMonth = getPreviousDisplayMonth;
    exports.getPreviousDisplayYear = getPreviousDisplayYear;
    exports.getWeeksForMonth = getWeeksForMonth;
    exports.isDateAfter = isDateAfter;
    exports.isDateBefore = isDateBefore;
    exports.isDateDisabled = isDateDisabled;
    exports.isSameDay = isSameDay;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DatePicker/utilities.js
var require_utilities8 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DatePicker/utilities.js"(exports) {
    "use strict";
    function monthName(month) {
      switch (month) {
        case 0:
          return "january";
        case 1:
          return "february";
        case 2:
          return "march";
        case 3:
          return "april";
        case 4:
          return "may";
        case 5:
          return "june";
        case 6:
          return "july";
        case 7:
          return "august";
        case 8:
          return "september";
        case 9:
          return "october";
        case 10:
          return "november";
        case 11:
          return "december";
      }
    }
    function weekdayName(weekday) {
      switch (weekday) {
        case 0:
          return "sunday";
        case 1:
          return "monday";
        case 2:
          return "tuesday";
        case 3:
          return "wednesday";
        case 4:
          return "thursday";
        case 5:
          return "friday";
        case 6:
          return "saturday";
      }
    }
    exports.monthName = monthName;
    exports.weekdayName = weekdayName;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DatePicker/DatePicker.css.js
var require_DatePicker_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DatePicker/DatePicker.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      DatePicker: "Polaris-DatePicker",
      MonthLayout: "Polaris-DatePicker__MonthLayout",
      MonthContainer: "Polaris-DatePicker__MonthContainer",
      Month: "Polaris-DatePicker__Month",
      DayCell: "Polaris-DatePicker__DayCell",
      "DayCell-inRange": "Polaris-DatePicker__DayCell--inRange",
      Day: "Polaris-DatePicker__Day",
      "Day-inRange": "Polaris-DatePicker__Day--inRange",
      "Day-selected": "Polaris-DatePicker__Day--selected",
      "Day-disabled": "Polaris-DatePicker__Day--disabled",
      EmptyDayCell: "Polaris-DatePicker__EmptyDayCell",
      Weekday: "Polaris-DatePicker__Weekday",
      Header: "Polaris-DatePicker__Header",
      Title: "Polaris-DatePicker__Title",
      "Day-firstInRange": "Polaris-DatePicker__Day--firstInRange",
      "Day-hasRange": "Polaris-DatePicker__Day--hasRange",
      "Day-hoverRight": "Polaris-DatePicker__Day--hoverRight",
      "Day-lastInRange": "Polaris-DatePicker__Day--lastInRange",
      Week: "Polaris-DatePicker__Week"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DatePicker/components/Weekday/Weekday.js
var require_Weekday = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DatePicker/components/Weekday/Weekday.js"(exports) {
    "use strict";
    var React2 = require_react(), DatePicker_module = require_DatePicker_css(), Text3 = require_Text(), Weekday = /* @__PURE__ */ React2.memo(function({
      label,
      title,
      current
    }) {
      return /* @__PURE__ */ React2.createElement("th", {
        "aria-label": label,
        scope: "col",
        className: DatePicker_module.default.Weekday
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "bodySm",
        alignment: "center",
        fontWeight: current ? "bold" : "regular",
        tone: current ? void 0 : "subdued"
      }, title));
    });
    exports.Weekday = Weekday;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DatePicker/components/Day/Day.js
var require_Day = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DatePicker/components/Day/Day.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), dates = require_dates(), utilities = require_utilities8(), DatePicker_module = require_DatePicker_css(), hooks = require_hooks2(), Text3 = require_Text(), Day = /* @__PURE__ */ React2.memo(function({
      day,
      focused,
      onClick,
      onHover = noop,
      onFocus = noop,
      selected,
      inRange,
      inHoveringRange,
      disabled,
      lastDayOfMonth,
      isLastSelectedDay,
      isFirstSelectedDay,
      isHoveringRight,
      rangeIsDifferent,
      weekday,
      selectedAccessibilityLabelPrefix
    }) {
      let i18n = hooks.useI18n(), dayNode = React2.useRef(null), hoverValue = lastDayOfMonth || day;
      if (React2.useEffect(() => {
        focused && dayNode.current && dayNode.current.focus();
      }, [focused]), !day)
        return /* @__PURE__ */ React2.createElement("td", {
          className: DatePicker_module.default.EmptyDayCell,
          onMouseOver: () => onHover(hoverValue)
        });
      let handleClick = onClick && !disabled ? onClick.bind(null, day) : noop, today = dates.isSameDay(/* @__PURE__ */ new Date(), day), dayCellClassName = css.classNames(DatePicker_module.default.DayCell, selected && DatePicker_module.default["DayCell-selected"], (inRange || inHoveringRange) && !disabled && DatePicker_module.default["DayCell-inRange"], isLastSelectedDay && DatePicker_module.default["DayCell-lastInRange"], isFirstSelectedDay && DatePicker_module.default["DayCell-firstInRange"], isHoveringRight && DatePicker_module.default["DayCell-hoverRight"], rangeIsDifferent && DatePicker_module.default["DayCell-hasRange"]), dayClassName = css.classNames(DatePicker_module.default.Day, selected && DatePicker_module.default["Day-selected"], disabled && DatePicker_module.default["Day-disabled"], (inRange || inHoveringRange) && !disabled && DatePicker_module.default["Day-inRange"], isLastSelectedDay && DatePicker_module.default["Day-lastInRange"], isFirstSelectedDay && DatePicker_module.default["Day-firstInRange"], isHoveringRight && DatePicker_module.default["Day-hoverRight"], rangeIsDifferent && DatePicker_module.default["Day-hasRange"]), date = day.getDate(), tabIndex = (focused || selected || today || date === 1) && !disabled ? 0 : -1, ariaLabel = [selected && selectedAccessibilityLabelPrefix ? `${selectedAccessibilityLabelPrefix} ` : "", `${today ? i18n.translate("Polaris.DatePicker.today") : ""}`, `${weekday || ""} `, `${i18n.translate(`Polaris.DatePicker.months.${utilities.monthName(day.getMonth())}`)} `, `${date} `, `${day.getFullYear()}`].join("");
      return /* @__PURE__ */ React2.createElement("td", {
        className: dayCellClassName
      }, /* @__PURE__ */ React2.createElement("button", {
        onFocus: () => onFocus(day),
        type: "button",
        ref: dayNode,
        tabIndex,
        className: dayClassName,
        onMouseOver: () => onHover(hoverValue),
        onClick: handleClick,
        "aria-label": ariaLabel,
        "aria-disabled": disabled,
        "aria-pressed": selected
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "bodySm",
        alignment: "center",
        fontWeight: today ? "bold" : "regular"
      }, date)));
    });
    function noop() {
    }
    exports.Day = Day;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DatePicker/components/Month/Month.js
var require_Month = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DatePicker/components/Month/Month.js"(exports) {
    "use strict";
    var React2 = require_react(), dates = require_dates(), DatePicker_module = require_DatePicker_css(), utilities = require_utilities8(), Weekday = require_Weekday(), Day = require_Day(), hooks = require_hooks2(), Text3 = require_Text();
    function Month({
      focusedDate,
      selected,
      hoverDate,
      disableDatesBefore,
      disableDatesAfter,
      disableSpecificDates,
      allowRange,
      onChange = noop,
      onHover = noop,
      onFocus = noop,
      month,
      year,
      weekStartsOn,
      accessibilityLabelPrefixes
    }) {
      let i18n = hooks.useI18n(), isInHoveringRange = allowRange ? hoveringDateIsInRange : () => !1, now = /* @__PURE__ */ new Date(), current = now.getMonth() === month && now.getFullYear() === year, weeks = React2.useMemo(() => dates.getWeeksForMonth(month, year, weekStartsOn), [month, weekStartsOn, year]), weekdays = dates.getOrderedWeekdays(weekStartsOn).map((weekday) => /* @__PURE__ */ React2.createElement(Weekday.Weekday, {
        key: weekday,
        title: i18n.translate(`Polaris.DatePicker.daysAbbreviated.${utilities.weekdayName(weekday)}`),
        label: weekdayLabel(weekday),
        current: current && (/* @__PURE__ */ new Date()).getDay() === weekday
      })), handleDateClick = React2.useCallback((selectedDate) => {
        onChange(dates.getNewRange(allowRange ? selected : void 0, selectedDate));
      }, [allowRange, onChange, selected]), lastDayOfMonth = React2.useMemo(() => new Date(year, month + 1, 0), [month, year]);
      function renderWeek(day, dayIndex) {
        if (day == null)
          return /* @__PURE__ */ React2.createElement(Day.Day, {
            key: dayIndex,
            onHover,
            lastDayOfMonth
          });
        let disabled = disableDatesBefore && dates.isDateBefore(day, disableDatesBefore) || disableDatesAfter && dates.isDateAfter(day, disableDatesAfter) || disableSpecificDates && dates.isDateDisabled(day, disableSpecificDates), isFirstSelectedDay = allowRange && selected && isDateStart(day, selected), isLastSelectedDay = allowRange && selected && (!dates.isSameDay(selected.start, selected.end) && isDateEnd(day, selected) || hoverDate && dates.isSameDay(selected.start, selected.end) && dates.isDateAfter(hoverDate, selected.start) && dates.isSameDay(day, hoverDate) && !isFirstSelectedDay), rangeIsDifferent = !(selected && dates.isSameDay(selected.start, selected.end)), isHoveringRight = hoverDate && dates.isDateBefore(day, hoverDate), [firstAccessibilityLabelPrefix, lastAccessibilityLabelPrefix] = accessibilityLabelPrefixes, accessibilityLabelPrefix;
        return allowRange && isFirstSelectedDay || !allowRange && firstAccessibilityLabelPrefix ? accessibilityLabelPrefix = firstAccessibilityLabelPrefix : allowRange && isLastSelectedDay && (accessibilityLabelPrefix = lastAccessibilityLabelPrefix), /* @__PURE__ */ React2.createElement(Day.Day, {
          selectedAccessibilityLabelPrefix: accessibilityLabelPrefix,
          weekday: weekdayLabel(dayIndex),
          focused: focusedDate != null && dates.isSameDay(day, focusedDate),
          day,
          key: dayIndex,
          onFocus,
          onClick: handleDateClick,
          onHover,
          selected: selected != null && dates.dateIsSelected(day, selected),
          inRange: selected != null && dates.dateIsInRange(day, selected),
          disabled,
          inHoveringRange: selected != null && hoverDate != null && isInHoveringRange(day, selected, hoverDate),
          isLastSelectedDay,
          isFirstSelectedDay,
          isHoveringRight,
          rangeIsDifferent
        });
      }
      let weeksMarkup = weeks.map((week, index) => /* @__PURE__ */ React2.createElement("tr", {
        className: DatePicker_module.default.Week,
        key: index
      }, week.map(renderWeek)));
      return /* @__PURE__ */ React2.createElement("div", {
        className: DatePicker_module.default.MonthContainer
      }, /* @__PURE__ */ React2.createElement("table", {
        role: "grid",
        className: DatePicker_module.default.Month
      }, /* @__PURE__ */ React2.createElement("caption", {
        className: DatePicker_module.default.Title
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "bodyMd",
        alignment: "center",
        fontWeight: current ? "bold" : "medium"
      }, i18n.translate(`Polaris.DatePicker.months.${utilities.monthName(month)}`), " ", year)), /* @__PURE__ */ React2.createElement("thead", null, /* @__PURE__ */ React2.createElement("tr", {
        className: DatePicker_module.default.WeekHeadings
      }, weekdays)), /* @__PURE__ */ React2.createElement("tbody", null, weeksMarkup)));
      function weekdayLabel(weekday) {
        return i18n.translate(`Polaris.DatePicker.days.${utilities.weekdayName(weekday)}`);
      }
    }
    function noop() {
    }
    function hoveringDateIsInRange(day, range, hoverEndDate) {
      if (day == null)
        return !1;
      let {
        start,
        end
      } = range;
      return Boolean(dates.isSameDay(start, end) && day > start && day <= hoverEndDate);
    }
    function isDateEnd(day, range) {
      if (day == null)
        return !1;
      let {
        end
      } = range;
      return Boolean(end && dates.isSameDay(end, day));
    }
    function isDateStart(day, range) {
      if (day == null)
        return !1;
      let {
        start
      } = range;
      return Boolean(start && dates.isSameDay(start, day));
    }
    exports.Month = Month;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DatePicker/DatePicker.js
var require_DatePicker = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DatePicker/DatePicker.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), dates = require_dates(), utilities = require_utilities8(), DatePicker_module = require_DatePicker_css(), Month = require_Month(), hooks = require_hooks2(), Button3 = require_Button();
    function DatePicker({
      id,
      selected,
      month,
      year,
      allowRange,
      multiMonth,
      disableDatesBefore,
      disableDatesAfter,
      disableSpecificDates,
      weekStartsOn = 0,
      dayAccessibilityLabelPrefix,
      onMonthChange,
      onChange = noop
    }) {
      let i18n = hooks.useI18n(), [hoverDate, setHoverDate] = React2.useState(void 0), [focusDate, setFocusDate] = React2.useState(void 0);
      React2.useEffect(() => {
        setFocusDate(void 0);
      }, [selected]);
      let handleFocus = React2.useCallback((date) => {
        setFocusDate(date);
      }, []), setFocusDateAndHandleMonthChange = React2.useCallback((date) => {
        onMonthChange && onMonthChange(date.getMonth(), date.getFullYear()), setHoverDate(date), setFocusDate(date);
      }, [onMonthChange]), handleDateSelection = React2.useCallback((range) => {
        let {
          end
        } = range;
        setHoverDate(end), setFocusDate(new Date(end)), onChange(range);
      }, [onChange]), handleMonthChangeClick = React2.useCallback((month2, year2) => {
        onMonthChange && (setFocusDate(void 0), onMonthChange(month2, year2));
      }, [onMonthChange]), handleHover = React2.useCallback((date) => {
        setHoverDate(date);
      }, []), handleKeyUp = React2.useCallback((event) => {
        let {
          key
        } = event, range = deriveRange(selected), focusedDate = focusDate || range && range.start;
        if (focusedDate != null) {
          if (key === "ArrowUp") {
            let previousWeek = new Date(focusedDate);
            previousWeek.setDate(focusedDate.getDate() - 7), disableDatesBefore && dates.isDateBefore(previousWeek, disableDatesBefore) || disableSpecificDates && dates.isDateDisabled(previousWeek, disableSpecificDates) || setFocusDateAndHandleMonthChange(previousWeek);
          }
          if (key === "ArrowDown") {
            let nextWeek = new Date(focusedDate);
            nextWeek.setDate(focusedDate.getDate() + 7), disableDatesAfter && dates.isDateAfter(nextWeek, disableDatesAfter) || disableSpecificDates && dates.isDateDisabled(nextWeek, disableSpecificDates) || setFocusDateAndHandleMonthChange(nextWeek);
          }
          if (key === "ArrowRight") {
            let tomorrow = new Date(focusedDate);
            tomorrow.setDate(focusedDate.getDate() + 1), disableDatesAfter && dates.isDateAfter(tomorrow, disableDatesAfter) || disableSpecificDates && dates.isDateDisabled(tomorrow, disableSpecificDates) || setFocusDateAndHandleMonthChange(tomorrow);
          }
          if (key === "ArrowLeft") {
            let yesterday = new Date(focusedDate);
            yesterday.setDate(focusedDate.getDate() - 1), disableDatesBefore && dates.isDateBefore(yesterday, disableDatesBefore) || disableSpecificDates && dates.isDateDisabled(yesterday, disableSpecificDates) || setFocusDateAndHandleMonthChange(yesterday);
          }
        }
      }, [disableDatesAfter, disableDatesBefore, disableSpecificDates, focusDate, selected, setFocusDateAndHandleMonthChange]), showNextYear = dates.getNextDisplayYear(month, year), showNextMonth = dates.getNextDisplayMonth(month), showNextToNextYear = dates.getNextDisplayYear(showNextMonth, showNextYear), showNextToNextMonth = dates.getNextDisplayMonth(showNextMonth), showPreviousYear = dates.getPreviousDisplayYear(month, year), showPreviousMonth = dates.getPreviousDisplayMonth(month), previousMonthName = i18n.translate(`Polaris.DatePicker.months.${utilities.monthName(showPreviousMonth)}`), nextMonth = multiMonth ? i18n.translate(`Polaris.DatePicker.months.${utilities.monthName(showNextToNextMonth)}`) : i18n.translate(`Polaris.DatePicker.months.${utilities.monthName(showNextMonth)}`), nextYear = multiMonth ? showNextToNextYear : showNextYear, monthIsSelected = React2.useMemo(() => deriveRange(selected), [selected]), firstDatePickerAccessibilityLabelPrefix = allowRange ? i18n.translate("Polaris.DatePicker.start") : dayAccessibilityLabelPrefix, secondDatePickerAccessibilityLabelPrefix = i18n.translate("Polaris.DatePicker.end"), accessibilityLabelPrefixes = [firstDatePickerAccessibilityLabelPrefix, secondDatePickerAccessibilityLabelPrefix], secondDatePicker = multiMonth ? /* @__PURE__ */ React2.createElement(Month.Month, {
        onFocus: handleFocus,
        focusedDate: focusDate,
        month: showNextMonth,
        year: showNextYear,
        selected: monthIsSelected,
        hoverDate,
        onChange: handleDateSelection,
        onHover: handleHover,
        disableDatesBefore,
        disableDatesAfter,
        disableSpecificDates,
        allowRange,
        weekStartsOn,
        accessibilityLabelPrefixes
      }) : null, datePickerClassName = css.classNames(DatePicker_module.default.DatePicker);
      return /* @__PURE__ */ React2.createElement("div", {
        id,
        className: datePickerClassName,
        onKeyDown: handleKeyDown,
        onKeyUp: handleKeyUp
      }, /* @__PURE__ */ React2.createElement("div", {
        className: DatePicker_module.default.Header
      }, /* @__PURE__ */ React2.createElement(Button3.Button, {
        variant: "tertiary",
        icon: polarisIcons.ArrowLeftIcon,
        accessibilityLabel: i18n.translate("Polaris.DatePicker.previousMonth", {
          previousMonthName,
          showPreviousYear
        }),
        onClick: () => handleMonthChangeClick(showPreviousMonth, showPreviousYear)
      }), /* @__PURE__ */ React2.createElement(Button3.Button, {
        variant: "tertiary",
        icon: polarisIcons.ArrowRightIcon,
        accessibilityLabel: i18n.translate("Polaris.DatePicker.nextMonth", {
          nextMonth,
          nextYear
        }),
        onClick: () => handleMonthChangeClick(showNextMonth, showNextYear)
      })), /* @__PURE__ */ React2.createElement("div", {
        className: DatePicker_module.default.MonthLayout
      }, /* @__PURE__ */ React2.createElement(Month.Month, {
        onFocus: handleFocus,
        focusedDate: focusDate,
        month,
        year,
        selected: deriveRange(selected),
        hoverDate,
        onChange: handleDateSelection,
        onHover: handleHover,
        disableDatesBefore,
        disableDatesAfter,
        disableSpecificDates,
        allowRange,
        weekStartsOn,
        accessibilityLabelPrefixes
      }), secondDatePicker));
    }
    function noop() {
    }
    function handleKeyDown(event) {
      let {
        key
      } = event;
      (key === "ArrowUp" || key === "ArrowDown" || key === "ArrowLeft" || key === "ArrowRight") && (event.preventDefault(), event.stopPropagation());
    }
    function deriveRange(selected) {
      return selected instanceof Date ? {
        start: selected,
        end: selected
      } : selected;
    }
    exports.DatePicker = DatePicker;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DescriptionList/DescriptionList.css.js
var require_DescriptionList_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DescriptionList/DescriptionList.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      DescriptionList: "Polaris-DescriptionList",
      Term: "Polaris-DescriptionList__Term",
      spacingTight: "Polaris-DescriptionList--spacingTight",
      Description: "Polaris-DescriptionList__Description"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DescriptionList/DescriptionList.js
var require_DescriptionList = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DescriptionList/DescriptionList.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), DescriptionList_module = require_DescriptionList_css(), Text3 = require_Text();
    function DescriptionList({
      items,
      gap = "loose"
    }) {
      let terms = items.reduce((allTerms, {
        term,
        description
      }, index) => [...allTerms, /* @__PURE__ */ React2.createElement("dt", {
        key: `dt${index}`,
        className: DescriptionList_module.default.Term
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "headingSm"
      }, term)), /* @__PURE__ */ React2.createElement("dd", {
        key: `dd${index}`,
        className: DescriptionList_module.default.Description
      }, description)], []), className = css.classNames(DescriptionList_module.default.DescriptionList, gap === "tight" && DescriptionList_module.default.spacingTight);
      return /* @__PURE__ */ React2.createElement("dl", {
        className
      }, terms);
    }
    exports.DescriptionList = DescriptionList;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Divider/Divider.css.js
var require_Divider_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Divider/Divider.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Divider: "Polaris-Divider"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Divider/Divider.js
var require_Divider = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Divider/Divider.js"(exports) {
    "use strict";
    var React2 = require_react(), Divider_module = require_Divider_css(), Divider2 = ({
      borderColor = "border-secondary",
      borderWidth = "025"
    }) => {
      let borderColorValue = borderColor === "transparent" ? borderColor : `var(--p-color-${borderColor})`;
      return /* @__PURE__ */ React2.createElement("hr", {
        className: Divider_module.default.Divider,
        style: {
          borderBlockStart: `var(--p-border-width-${borderWidth}) solid ${borderColorValue}`
        }
      });
    };
    exports.Divider = Divider2;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/capitalize.js
var require_capitalize = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/capitalize.js"(exports) {
    "use strict";
    function capitalize(word = "") {
      let wordLower = word.toLowerCase();
      return wordLower.charAt(0).toUpperCase() + wordLower.slice(1);
    }
    exports.capitalize = capitalize;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DropZone/utils/index.js
var require_utils3 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DropZone/utils/index.js"(exports) {
    "use strict";
    var dragEvents = ["dragover", "dragenter", "drop"];
    function fileAccepted(file, accept) {
      return file.type === "application/x-moz-file" || accepts(file, accept);
    }
    function getDataTransferFiles(event) {
      if (isDragEvent(event) && event.dataTransfer) {
        let dt = event.dataTransfer;
        if (dt.files && dt.files.length)
          return Array.from(dt.files);
        if (dt.items && dt.items.length)
          return Array.from(dt.items);
      } else if (isChangeEvent(event) && event.target.files)
        return Array.from(event.target.files);
      return [];
    }
    function accepts(file, acceptedFiles) {
      if (file && acceptedFiles) {
        let fileName = file.name || "", mimeType = file.type || "", baseMimeType = mimeType.replace(/\/.*$/, "");
        return (Array.isArray(acceptedFiles) ? acceptedFiles : acceptedFiles.split(",")).some((type) => {
          let validType = type.trim();
          return validType.startsWith(".") ? fileName.toLowerCase().endsWith(validType.toLowerCase()) : validType.endsWith("/*") ? baseMimeType === validType.replace(/\/.*$/, "") : mimeType === validType;
        });
      }
      return !0;
    }
    function isDragEvent(event) {
      return dragEvents.indexOf(event.type) > 0;
    }
    function isChangeEvent(event) {
      return Object.prototype.hasOwnProperty.call(event, "target");
    }
    var defaultAllowMultiple = !0;
    function createAllowMultipleKey(allowMultiple) {
      return allowMultiple ? "allowMultiple" : "single";
    }
    exports.createAllowMultipleKey = createAllowMultipleKey;
    exports.defaultAllowMultiple = defaultAllowMultiple;
    exports.fileAccepted = fileAccepted;
    exports.getDataTransferFiles = getDataTransferFiles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DropZone/context.js
var require_context16 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DropZone/context.js"(exports) {
    "use strict";
    var React2 = require_react(), index = require_utils3(), DropZoneContext = /* @__PURE__ */ React2.createContext({
      disabled: !1,
      focused: !1,
      size: "extraLarge",
      type: "file",
      measuring: !1,
      allowMultiple: index.defaultAllowMultiple
    });
    exports.DropZoneContext = DropZoneContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DropZone/DropZone.css.js
var require_DropZone_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DropZone/DropZone.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      DropZone: "Polaris-DropZone",
      focused: "Polaris-DropZone--focused",
      noOutline: "Polaris-DropZone--noOutline",
      hasOutline: "Polaris-DropZone--hasOutline",
      isDisabled: "Polaris-DropZone--isDisabled",
      isDragging: "Polaris-DropZone--isDragging",
      sizeLarge: "Polaris-DropZone--sizeLarge",
      sizeMedium: "Polaris-DropZone--sizeMedium",
      sizeSmall: "Polaris-DropZone--sizeSmall",
      measuring: "Polaris-DropZone--measuring",
      Container: "Polaris-DropZone__Container",
      Overlay: "Polaris-DropZone__Overlay",
      hasError: "Polaris-DropZone--hasError"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DropZone/components/FileUpload/FileUpload.css.js
var require_FileUpload_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DropZone/components/FileUpload/FileUpload.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      FileUpload: "Polaris-DropZone-FileUpload",
      large: "Polaris-DropZone-FileUpload--large",
      small: "Polaris-DropZone-FileUpload--small",
      ActionTitle: "Polaris-DropZone-FileUpload__ActionTitle",
      "ActionTitle-disabled": "Polaris-DropZone-FileUpload__ActionTitle--disabled",
      "ActionTitle-focused": "Polaris-DropZone-FileUpload__ActionTitle--focused",
      UploadIcon: "Polaris-DropZone-FileUpload__UploadIcon",
      disabled: "Polaris-DropZone-FileUpload--disabled"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DropZone/components/FileUpload/FileUpload.js
var require_FileUpload = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DropZone/components/FileUpload/FileUpload.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), capitalize = require_capitalize(), context = require_context16(), index = require_utils3(), FileUpload_module = require_FileUpload_css(), hooks = require_hooks2(), Icon2 = require_Icon(), BlockStack3 = require_BlockStack(), Button3 = require_Button(), Text3 = require_Text();
    function FileUpload(props) {
      let i18n = hooks.useI18n(), {
        size,
        measuring,
        type,
        disabled,
        allowMultiple
      } = React2.useContext(context.DropZoneContext), typeSuffix = capitalize.capitalize(type), allowMultipleKey = index.createAllowMultipleKey(allowMultiple), {
        actionTitle = i18n.translate(`Polaris.DropZone.${allowMultipleKey}.actionTitle${typeSuffix}`),
        actionHint
      } = props, actionMarkup = /* @__PURE__ */ React2.createElement(Button3.Button, {
        disabled
      }, actionTitle), fileUploadClassName = css.classNames(FileUpload_module.default.FileUpload, measuring && FileUpload_module.default.measuring, size === "large" && FileUpload_module.default.large, size === "small" && FileUpload_module.default.small), actionHintMarkup = actionHint && /* @__PURE__ */ React2.createElement(Text3.Text, {
        variant: "bodySm",
        as: "p",
        tone: "subdued"
      }, actionHint), viewMarkup;
      switch (size) {
        case "large":
        case "medium":
          viewMarkup = /* @__PURE__ */ React2.createElement(BlockStack3.BlockStack, {
            inlineAlign: "center",
            gap: "200"
          }, actionMarkup, actionHintMarkup);
          break;
        case "small":
          viewMarkup = /* @__PURE__ */ React2.createElement("div", {
            className: css.classNames(FileUpload_module.default.UploadIcon, disabled && FileUpload_module.default.disabled)
          }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
            source: polarisIcons.UploadIcon
          }));
          break;
      }
      return /* @__PURE__ */ React2.createElement("div", {
        className: fileUploadClassName
      }, viewMarkup);
    }
    exports.FileUpload = FileUpload;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DropZone/DropZone.js
var require_DropZone = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DropZone/DropZone.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), debounce = require_debounce(), css = require_css(), capitalize = require_capitalize(), target = require_target(), useComponentDidMount = require_use_component_did_mount(), useToggle = require_use_toggle(), useEventListener = require_use_event_listener(), context = require_context16(), index = require_utils3(), DropZone_module = require_DropZone_css(), FileUpload = require_FileUpload(), hooks = require_hooks2(), BlockStack3 = require_BlockStack(), Icon2 = require_Icon(), Text3 = require_Text(), Labelled = require_Labelled(), DropZone = function({
      dropOnPage,
      label,
      labelAction,
      labelHidden,
      children,
      disabled = !1,
      outline = !0,
      accept,
      active,
      overlay = !0,
      allowMultiple = index.defaultAllowMultiple,
      overlayText,
      errorOverlayText,
      id: idProp,
      type = "file",
      onClick,
      error,
      openFileDialog,
      variableHeight,
      onFileDialogClose,
      customValidator,
      onDrop,
      onDropAccepted,
      onDropRejected,
      onDragEnter,
      onDragOver,
      onDragLeave
    }) {
      let node = React2.useRef(null), inputRef = React2.useRef(null), dragTargets = React2.useRef([]), adjustSize = React2.useCallback(debounce.debounce(() => {
        if (!node.current)
          return;
        if (variableHeight) {
          setMeasuring(!1);
          return;
        }
        let size2 = "large", width = node.current.getBoundingClientRect().width;
        width < 100 ? size2 = "small" : width < 160 && (size2 = "medium"), setSize(size2), measuring && setMeasuring(!1);
      }, 50, {
        trailing: !0
      }), []), [dragging, setDragging] = React2.useState(!1), [internalError, setInternalError] = React2.useState(!1), {
        value: focused,
        setTrue: handleFocus,
        setFalse: handleBlur
      } = useToggle.useToggle(!1), [size, setSize] = React2.useState("large"), [measuring, setMeasuring] = React2.useState(!0), i18n = hooks.useI18n(), getValidatedFiles = React2.useCallback((files) => {
        let acceptedFiles = [], rejectedFiles = [];
        return Array.from(files).forEach((file) => {
          !index.fileAccepted(file, accept) || customValidator && !customValidator(file) ? rejectedFiles.push(file) : acceptedFiles.push(file);
        }), allowMultiple || (acceptedFiles.splice(1, acceptedFiles.length), rejectedFiles.push(...acceptedFiles.slice(1))), {
          files,
          acceptedFiles,
          rejectedFiles
        };
      }, [accept, allowMultiple, customValidator]), handleDrop = React2.useCallback((event) => {
        if (stopEvent(event), disabled)
          return;
        let fileList = index.getDataTransferFiles(event), {
          files,
          acceptedFiles,
          rejectedFiles
        } = getValidatedFiles(fileList);
        dragTargets.current = [], setDragging(!1), setInternalError(rejectedFiles.length > 0), onDrop && onDrop(files, acceptedFiles, rejectedFiles), onDropAccepted && acceptedFiles.length && onDropAccepted(acceptedFiles), onDropRejected && rejectedFiles.length && onDropRejected(rejectedFiles), event.target && "value" in event.target && (event.target.value = "");
      }, [disabled, getValidatedFiles, onDrop, onDropAccepted, onDropRejected]), handleDragEnter = React2.useCallback((event) => {
        if (stopEvent(event), disabled)
          return;
        let fileList = index.getDataTransferFiles(event);
        if (event.target && !dragTargets.current.includes(event.target) && dragTargets.current.push(event.target), dragging)
          return;
        let {
          rejectedFiles
        } = getValidatedFiles(fileList);
        setDragging(!0), setInternalError(rejectedFiles.length > 0), onDragEnter && onDragEnter();
      }, [disabled, dragging, getValidatedFiles, onDragEnter]), handleDragOver = React2.useCallback((event) => {
        stopEvent(event), !disabled && onDragOver && onDragOver();
      }, [disabled, onDragOver]), handleDragLeave = React2.useCallback((event) => {
        event.preventDefault(), !disabled && (dragTargets.current = dragTargets.current.filter((el) => {
          let compareNode = dropOnPage && !target.isServer ? document : node.current;
          return el !== event.target && compareNode && compareNode.contains(el);
        }), !(dragTargets.current.length > 0) && (setDragging(!1), setInternalError(!1), onDragLeave && onDragLeave()));
      }, [dropOnPage, disabled, onDragLeave]), dropNode = dropOnPage && !target.isServer ? document : node.current;
      useEventListener.useEventListener("drop", handleDrop, dropNode), useEventListener.useEventListener("dragover", handleDragOver, dropNode), useEventListener.useEventListener("dragenter", handleDragEnter, dropNode), useEventListener.useEventListener("dragleave", handleDragLeave, dropNode), useEventListener.useEventListener("resize", adjustSize, target.isServer ? null : window), useComponentDidMount.useComponentDidMount(() => {
        adjustSize();
      });
      let uniqId = React2.useId(), id = idProp ?? uniqId, typeSuffix = capitalize.capitalize(type), allowMultipleKey = index.createAllowMultipleKey(allowMultiple), overlayTextWithDefault = overlayText === void 0 ? i18n.translate(`Polaris.DropZone.${allowMultipleKey}.overlayText${typeSuffix}`) : overlayText, errorOverlayTextWithDefault = errorOverlayText === void 0 ? i18n.translate(`Polaris.DropZone.errorOverlayText${typeSuffix}`) : errorOverlayText, labelValue = label || i18n.translate(`Polaris.DropZone.${allowMultipleKey}.label${typeSuffix}`), labelHiddenValue = label ? labelHidden : !0, classes = css.classNames(DropZone_module.default.DropZone, outline && DropZone_module.default.hasOutline, !outline && DropZone_module.default.noOutline, focused && DropZone_module.default.focused, (active || dragging) && DropZone_module.default.isDragging, disabled && DropZone_module.default.isDisabled, (internalError || error) && DropZone_module.default.hasError, !variableHeight && DropZone_module.default[css.variationName("size", size)], measuring && DropZone_module.default.measuring), dragOverlay = (active || dragging) && !internalError && !error && overlay && overlayMarkup(polarisIcons.UploadIcon, overlayTextWithDefault), dragErrorOverlay = dragging && (internalError || error) && overlayMarkup(polarisIcons.AlertCircleIcon, errorOverlayTextWithDefault, "critical"), context$1 = React2.useMemo(() => ({
        disabled,
        focused,
        size,
        type: type || "file",
        measuring,
        allowMultiple
      }), [disabled, focused, measuring, size, type, allowMultiple]), open = React2.useCallback(() => {
        inputRef.current && inputRef.current.click();
      }, [inputRef]), triggerFileDialog = React2.useCallback(() => {
        open(), onFileDialogClose?.();
      }, [open, onFileDialogClose]);
      function overlayMarkup(icon, text, color) {
        return /* @__PURE__ */ React2.createElement("div", {
          className: DropZone_module.default.Overlay
        }, /* @__PURE__ */ React2.createElement(BlockStack3.BlockStack, {
          gap: "200",
          inlineAlign: "center"
        }, size === "small" && /* @__PURE__ */ React2.createElement(Icon2.Icon, {
          source: icon,
          tone: color
        }), (size === "medium" || size === "large") && /* @__PURE__ */ React2.createElement(Text3.Text, {
          variant: "bodySm",
          as: "p",
          fontWeight: "bold"
        }, text)));
      }
      function handleClick(event) {
        if (!disabled)
          return onClick ? onClick(event) : open();
      }
      return React2.useEffect(() => {
        openFileDialog && triggerFileDialog();
      }, [openFileDialog, triggerFileDialog]), /* @__PURE__ */ React2.createElement(context.DropZoneContext.Provider, {
        value: context$1
      }, /* @__PURE__ */ React2.createElement(Labelled.Labelled, {
        id,
        label: labelValue,
        action: labelAction,
        labelHidden: labelHiddenValue
      }, /* @__PURE__ */ React2.createElement("div", {
        ref: node,
        className: classes,
        "aria-disabled": disabled,
        onClick: handleClick,
        onDragStart: stopEvent
      }, dragOverlay, dragErrorOverlay, /* @__PURE__ */ React2.createElement(Text3.Text, {
        variant: "bodySm",
        as: "span",
        visuallyHidden: !0
      }, /* @__PURE__ */ React2.createElement("input", {
        id,
        accept,
        disabled,
        multiple: allowMultiple,
        onChange: handleDrop,
        onFocus: handleFocus,
        onBlur: handleBlur,
        type: "file",
        ref: inputRef,
        autoComplete: "off"
      })), /* @__PURE__ */ React2.createElement("div", {
        className: DropZone_module.default.Container
      }, children))));
    };
    function stopEvent(event) {
      event.preventDefault(), event.stopPropagation();
    }
    DropZone.FileUpload = FileUpload.FileUpload;
    exports.DropZone = DropZone;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/EmptySearchResult/illustrations/empty-search.svg.js
var require_empty_search_svg = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/EmptySearchResult/illustrations/empty-search.svg.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var img = "data:image/svg+xml,%3csvg width='60' height='60' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill-rule='evenodd' d='M41.87 24a17.87 17.87 0 11-35.74 0 17.87 17.87 0 0135.74 0zm-3.15 18.96a24 24 0 114.24-4.24L59.04 54.8a3 3 0 11-4.24 4.24L38.72 42.96z' fill='%238C9196'/%3e%3c/svg%3e", emptySearch = img;
    exports.default = emptySearch;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/EmptySearchResult/EmptySearchResult.js
var require_EmptySearchResult = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/EmptySearchResult/EmptySearchResult.js"(exports) {
    "use strict";
    var React2 = require_react(), emptySearch = require_empty_search_svg(), hooks = require_hooks2(), LegacyStack = require_LegacyStack(), Text3 = require_Text(), Image = require_Image();
    function EmptySearchResult({
      title,
      description,
      withIllustration
    }) {
      let altText = hooks.useI18n().translate("Polaris.EmptySearchResult.altText"), descriptionMarkup = description ? /* @__PURE__ */ React2.createElement("p", null, description) : null, illustrationMarkup = withIllustration ? /* @__PURE__ */ React2.createElement(Image.Image, {
        alt: altText,
        source: emptySearch.default,
        draggable: !1
      }) : null;
      return /* @__PURE__ */ React2.createElement(LegacyStack.LegacyStack, {
        alignment: "center",
        vertical: !0
      }, illustrationMarkup, /* @__PURE__ */ React2.createElement(Text3.Text, {
        variant: "headingLg",
        as: "p"
      }, title), /* @__PURE__ */ React2.createElement(Text3.Text, {
        tone: "subdued",
        as: "span"
      }, descriptionMarkup));
    }
    exports.EmptySearchResult = EmptySearchResult;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/EmptyState/EmptyState.css.js
var require_EmptyState_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/EmptyState/EmptyState.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ImageContainer: "Polaris-EmptyState__ImageContainer",
      Image: "Polaris-EmptyState__Image",
      loaded: "Polaris-EmptyState--loaded",
      imageContained: "Polaris-EmptyState--imageContained",
      SkeletonImageContainer: "Polaris-EmptyState__SkeletonImageContainer",
      SkeletonImage: "Polaris-EmptyState__SkeletonImage"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/EmptyState/EmptyState.js
var require_EmptyState = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/EmptyState/EmptyState.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), EmptyState_module = require_EmptyState_css(), utils = require_utils(), Box3 = require_Box(), BlockStack3 = require_BlockStack(), Image = require_Image(), Text3 = require_Text(), InlineStack3 = require_InlineStack();
    function EmptyState({
      children,
      heading,
      image,
      largeImage,
      imageContained,
      fullWidth = !1,
      action: action8,
      secondaryAction,
      footerContent
    }) {
      let [imageLoaded, setImageLoaded] = React2.useState(!1), handleLoad = React2.useCallback(() => {
        setImageLoaded(!0);
      }, []), imageClassNames = css.classNames(EmptyState_module.default.Image, imageLoaded && EmptyState_module.default.loaded, imageContained && EmptyState_module.default.imageContained), loadedImageMarkup = largeImage ? /* @__PURE__ */ React2.createElement(Image.Image, {
        alt: "",
        role: "presentation",
        source: largeImage,
        className: imageClassNames,
        sourceSet: [{
          source: image,
          descriptor: "568w"
        }, {
          source: largeImage,
          descriptor: "1136w"
        }],
        sizes: "(max-width: 568px) 60vw",
        onLoad: handleLoad
      }) : /* @__PURE__ */ React2.createElement(Image.Image, {
        alt: "",
        role: "presentation",
        className: imageClassNames,
        source: image,
        onLoad: handleLoad
      }), skeletonImageClassNames = css.classNames(EmptyState_module.default.SkeletonImage, imageLoaded && EmptyState_module.default.loaded), imageContainerClassNames = css.classNames(EmptyState_module.default.ImageContainer, !imageLoaded && EmptyState_module.default.SkeletonImageContainer), imageMarkup = /* @__PURE__ */ React2.createElement("div", {
        className: imageContainerClassNames
      }, loadedImageMarkup, /* @__PURE__ */ React2.createElement("div", {
        className: skeletonImageClassNames
      })), secondaryActionMarkup = secondaryAction ? utils.buttonFrom(secondaryAction, {}) : null, footerContentMarkup = footerContent ? /* @__PURE__ */ React2.createElement(Box3.Box, {
        paddingBlockStart: "400"
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        alignment: "center",
        variant: "bodySm"
      }, footerContent)) : null, primaryActionMarkup = action8 ? utils.buttonFrom(action8, {
        variant: "primary",
        size: "medium"
      }) : null, headingMarkup = heading ? /* @__PURE__ */ React2.createElement(Box3.Box, {
        paddingBlockEnd: "150"
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        variant: "headingMd",
        as: "p",
        alignment: "center"
      }, heading)) : null, childrenMarkup = children ? /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        alignment: "center",
        variant: "bodySm"
      }, children) : null, textContentMarkup = headingMarkup || children ? /* @__PURE__ */ React2.createElement(Box3.Box, {
        paddingBlockEnd: "400"
      }, headingMarkup, childrenMarkup) : null, actionsMarkup = primaryActionMarkup || secondaryActionMarkup ? /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        align: "center",
        gap: "200"
      }, secondaryActionMarkup, primaryActionMarkup) : null, detailsMarkup = textContentMarkup || actionsMarkup || footerContentMarkup ? /* @__PURE__ */ React2.createElement(Box3.Box, {
        maxWidth: fullWidth ? "100%" : "400px"
      }, /* @__PURE__ */ React2.createElement(BlockStack3.BlockStack, {
        inlineAlign: "center"
      }, textContentMarkup, actionsMarkup, footerContentMarkup)) : null;
      return /* @__PURE__ */ React2.createElement(Box3.Box, {
        paddingInlineStart: "0",
        paddingInlineEnd: "0",
        paddingBlockStart: "500",
        paddingBlockEnd: "1600"
      }, /* @__PURE__ */ React2.createElement(BlockStack3.BlockStack, {
        inlineAlign: "center"
      }, imageMarkup, detailsMarkup));
    }
    exports.EmptyState = EmptyState;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ExceptionList/ExceptionList.css.js
var require_ExceptionList_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ExceptionList/ExceptionList.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ExceptionList: "Polaris-ExceptionList",
      Item: "Polaris-ExceptionList__Item",
      Icon: "Polaris-ExceptionList__Icon",
      statusWarning: "Polaris-ExceptionList--statusWarning",
      statusCritical: "Polaris-ExceptionList--statusCritical",
      Bullet: "Polaris-ExceptionList__Bullet",
      Title: "Polaris-ExceptionList__Title",
      Description: "Polaris-ExceptionList__Description"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Truncate/Truncate.css.js
var require_Truncate_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Truncate/Truncate.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Truncate: "Polaris-Truncate"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Truncate/Truncate.js
var require_Truncate = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Truncate/Truncate.js"(exports) {
    "use strict";
    var React2 = require_react(), Truncate_module = require_Truncate_css();
    function Truncate({
      children
    }) {
      return /* @__PURE__ */ React2.createElement("span", {
        className: Truncate_module.default.Truncate
      }, children);
    }
    exports.Truncate = Truncate;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ExceptionList/ExceptionList.js
var require_ExceptionList = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ExceptionList/ExceptionList.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), ExceptionList_module = require_ExceptionList_css(), Truncate = require_Truncate(), Icon2 = require_Icon();
    function ExceptionList({
      items: itemsList
    }) {
      let items = itemsList.map((item, index) => {
        let {
          status,
          icon,
          title,
          description,
          truncate = !1
        } = item, itemClasses = css.classNames(ExceptionList_module.default.Item, status && ExceptionList_module.default[css.variationName("status", status)]), iconMarkup = icon ? /* @__PURE__ */ React2.createElement(Icon2.Icon, {
          source: icon
        }) : /* @__PURE__ */ React2.createElement("span", {
          className: ExceptionList_module.default.Bullet
        }), titleMarkup = title && /* @__PURE__ */ React2.createElement("span", {
          className: ExceptionList_module.default.Title
        }, title), descriptionMarkup = description && /* @__PURE__ */ React2.createElement("span", {
          className: ExceptionList_module.default.Description
        }, description), Element2 = truncate ? Truncate.Truncate : React2.Fragment;
        return /* @__PURE__ */ React2.createElement("li", {
          className: itemClasses,
          key: index
        }, /* @__PURE__ */ React2.createElement("span", {
          className: ExceptionList_module.default.Icon
        }, iconMarkup), /* @__PURE__ */ React2.createElement(Element2, null, titleMarkup, descriptionMarkup));
      });
      return /* @__PURE__ */ React2.createElement("ul", {
        className: ExceptionList_module.default.ExceptionList
      }, items);
    }
    exports.ExceptionList = ExceptionList;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Filters/Filters.css.js
var require_Filters_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Filters/Filters.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Container: "Polaris-Filters__Container",
      SearchField: "Polaris-Filters__SearchField",
      FiltersWrapper: "Polaris-Filters__FiltersWrapper",
      hideQueryField: "Polaris-Filters--hideQueryField",
      FiltersInner: "Polaris-Filters__FiltersInner",
      AddFilter: "Polaris-Filters__AddFilter",
      FiltersWrapperWithAddButton: "Polaris-Filters__FiltersWrapperWithAddButton",
      AddFilterActivatorMultiple: "Polaris-Filters__AddFilterActivatorMultiple",
      FiltersStickyArea: "Polaris-Filters__FiltersStickyArea",
      ClearAll: "Polaris-Filters__ClearAll",
      MultiplePinnedFilterClearAll: "Polaris-Filters__MultiplePinnedFilterClearAll"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Filters/components/SearchField/SearchField.js
var require_SearchField = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Filters/components/SearchField/SearchField.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), breakpoints = require_breakpoints(), hooks = require_hooks2(), Text3 = require_Text(), TextField2 = require_TextField(), Icon2 = require_Icon();
    function SearchField({
      onChange,
      onClear,
      onFocus,
      onBlur,
      focused,
      value,
      placeholder,
      disabled,
      borderlessQueryField,
      loading,
      selectedViewName
    }) {
      let i18n = hooks.useI18n(), id = React2.useId(), {
        mdUp
      } = breakpoints.useBreakpoints(), suffix = value && selectedViewName && mdUp ? /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "bodyMd",
        tone: "subdued"
      }, i18n.translate("Polaris.Filters.searchInView", {
        viewName: selectedViewName
      })) : null;
      function handleChange(eventValue) {
        onChange(eventValue ?? value);
      }
      function handleClear() {
        onClear ? onClear() : onChange("");
      }
      return /* @__PURE__ */ React2.createElement(TextField2.TextField, {
        id,
        value,
        onChange: handleChange,
        onFocus,
        onBlur,
        onClearButtonClick: handleClear,
        autoComplete: "off",
        placeholder,
        disabled,
        variant: borderlessQueryField ? "borderless" : "inherit",
        size: "slim",
        prefix: mdUp ? /* @__PURE__ */ React2.createElement(Icon2.Icon, {
          source: polarisIcons.SearchIcon
        }) : void 0,
        suffix,
        focused,
        label: placeholder,
        labelHidden: !0,
        clearButton: !0,
        autoSize: Boolean(suffix),
        loading
      });
    }
    exports.SearchField = SearchField;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-on-value-change.js
var require_use_on_value_change = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-on-value-change.js"(exports) {
    "use strict";
    var React2 = require_react();
    function useOnValueChange(value, onChange) {
      let tracked = React2.useRef(value);
      React2.useEffect(() => {
        let oldValue = tracked.current;
        value !== tracked.current && (tracked.current = value, onChange(value, oldValue));
      }, [value, onChange]);
    }
    exports.useOnValueChange = useOnValueChange;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Filters/components/FilterPill/FilterPill.css.js
var require_FilterPill_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Filters/components/FilterPill/FilterPill.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      FilterButton: "Polaris-Filters-FilterPill__FilterButton",
      focusedFilterButton: "Polaris-Filters-FilterPill--focusedFilterButton",
      ActiveFilterButton: "Polaris-Filters-FilterPill__ActiveFilterButton",
      PlainButton: "Polaris-Filters-FilterPill__PlainButton",
      ToggleButton: "Polaris-Filters-FilterPill__ToggleButton",
      clearButton: "Polaris-Filters-FilterPill--clearButton",
      IconWrapper: "Polaris-Filters-FilterPill__IconWrapper",
      PopoverWrapper: "Polaris-Filters-FilterPill__PopoverWrapper",
      ClearButtonWrapper: "Polaris-Filters-FilterPill__ClearButtonWrapper"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Filters/components/FilterPill/FilterPill.js
var require_FilterPill = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Filters/components/FilterPill/FilterPill.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), useToggle = require_use_toggle(), css = require_css(), FilterPill_module = require_FilterPill_css(), hooks = require_hooks2(), Icon2 = require_Icon(), UnstyledButton = require_UnstyledButton(), InlineStack3 = require_InlineStack(), Button3 = require_Button(), Popover = require_Popover(), BlockStack3 = require_BlockStack(), Box3 = require_Box(), Text3 = require_Text();
    function FilterPill({
      unsavedChanges = !1,
      filterKey,
      label,
      filter,
      disabled,
      hideClearButton,
      selected,
      initialActive,
      closeOnChildOverlayClick,
      onRemove,
      onClick
    }) {
      let i18n = hooks.useI18n(), elementRef = React2.useRef(null), {
        value: focused,
        setTrue: setFocusedTrue,
        setFalse: setFocusedFalse
      } = useToggle.useToggle(!1), [popoverActive, setPopoverActive] = React2.useState(initialActive);
      React2.useEffect(() => {
        let node = elementRef.current;
        if (!node || !popoverActive)
          return;
        let parent = node.parentElement?.parentElement;
        parent && parent.scroll?.({
          left: node.offsetLeft
        });
      }, [elementRef, popoverActive]);
      let togglePopoverActive = React2.useCallback(() => {
        filter && setPopoverActive((popoverActive2) => !popoverActive2), onClick && onClick(filterKey);
      }, [filter, filterKey, onClick]), handlePopoverClose = React2.useCallback(() => {
        togglePopoverActive(), selected || onRemove?.(filterKey);
      }, [onRemove, selected, filterKey, togglePopoverActive]), handleClear = () => {
        onRemove && onRemove(filterKey), setPopoverActive(!1);
      }, buttonClasses = css.classNames(FilterPill_module.default.FilterButton, selected && FilterPill_module.default.ActiveFilterButton, popoverActive && FilterPill_module.default.FocusFilterButton, focused && FilterPill_module.default.focusedFilterButton), clearButtonClassNames = css.classNames(FilterPill_module.default.PlainButton, FilterPill_module.default.clearButton), toggleButtonClassNames = css.classNames(FilterPill_module.default.PlainButton, FilterPill_module.default.ToggleButton), disclosureMarkup = selected ? null : /* @__PURE__ */ React2.createElement("div", {
        className: FilterPill_module.default.IconWrapper
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.ChevronDownIcon,
        tone: "base"
      })), labelMarkup = /* @__PURE__ */ React2.createElement(Box3.Box, {
        paddingInlineStart: unsavedChanges ? "0" : "050"
      }, /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, null, /* @__PURE__ */ React2.createElement(Text3.Text, {
        variant: "bodySm",
        as: "span"
      }, label))), unsavedPip = unsavedChanges ? /* @__PURE__ */ React2.createElement(Box3.Box, {
        paddingInlineEnd: "150"
      }, /* @__PURE__ */ React2.createElement(Box3.Box, {
        background: "bg-fill-emphasis",
        borderRadius: "050",
        width: "6px",
        minHeight: "6px"
      })) : null, removeFilterButtonMarkup = selected ? /* @__PURE__ */ React2.createElement(UnstyledButton.UnstyledButton, {
        onClick: handleClear,
        className: clearButtonClassNames,
        type: "button",
        "aria-label": i18n.translate("Polaris.FilterPill.clear")
      }, /* @__PURE__ */ React2.createElement("div", {
        className: FilterPill_module.default.IconWrapper
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.XSmallIcon,
        tone: "base"
      }))) : null, activator = /* @__PURE__ */ React2.createElement("div", {
        className: buttonClasses
      }, /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        gap: "0",
        wrap: !1
      }, /* @__PURE__ */ React2.createElement(UnstyledButton.UnstyledButton, {
        onFocus: setFocusedTrue,
        onBlur: setFocusedFalse,
        onClick: togglePopoverActive,
        className: toggleButtonClassNames,
        type: "button",
        accessibilityLabel: unsavedChanges ? i18n.translate("Polaris.FilterPill.unsavedChanges", {
          label
        }) : label
      }, /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        wrap: !1,
        align: "center",
        blockAlign: "center",
        gap: "0"
      }, unsavedPip, labelMarkup, disclosureMarkup)), removeFilterButtonMarkup)), clearButtonMarkup = !hideClearButton && /* @__PURE__ */ React2.createElement("div", {
        className: FilterPill_module.default.ClearButtonWrapper
      }, /* @__PURE__ */ React2.createElement(Button3.Button, {
        onClick: handleClear,
        variant: "plain",
        disabled: !selected,
        textAlign: "left"
      }, i18n.translate("Polaris.FilterPill.clear")));
      return disabled ? null : /* @__PURE__ */ React2.createElement("div", {
        ref: elementRef
      }, /* @__PURE__ */ React2.createElement(Popover.Popover, {
        active: popoverActive,
        activator,
        key: filterKey,
        onClose: handlePopoverClose,
        preferredAlignment: "left",
        preventCloseOnChildOverlayClick: !closeOnChildOverlayClick
      }, /* @__PURE__ */ React2.createElement("div", {
        className: FilterPill_module.default.PopoverWrapper
      }, /* @__PURE__ */ React2.createElement(Popover.Popover.Section, null, /* @__PURE__ */ React2.createElement(BlockStack3.BlockStack, {
        gap: "100"
      }, filter, clearButtonMarkup)))));
    }
    exports.FilterPill = FilterPill;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Filters/components/FiltersBar/FiltersBar.js
var require_FiltersBar = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Filters/components/FiltersBar/FiltersBar.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), useOnValueChange = require_use_on_value_change(), css = require_css(), Filters_module = require_Filters_css(), FilterPill = require_FilterPill(), hooks = require_hooks2(), UnstyledButton = require_UnstyledButton(), Text3 = require_Text(), Popover = require_Popover(), ActionList = require_ActionList(), Button3 = require_Button(), Box3 = require_Box(), InlineStack3 = require_InlineStack();
    function FiltersBar({
      filters,
      appliedFilters,
      onClearAll,
      disabled,
      hideQueryField,
      disableFilters,
      mountedStateStyles,
      onAddFilterClick,
      closeOnChildOverlayClick,
      children
    }) {
      let i18n = hooks.useI18n(), [popoverActive, setPopoverActive] = React2.useState(!1), hasMounted = React2.useRef(!1);
      React2.useEffect(() => {
        hasMounted.current = !0;
      });
      let togglePopoverActive = () => setPopoverActive((popoverActive2) => !popoverActive2), handleAddFilterClick = () => {
        onAddFilterClick?.(), togglePopoverActive();
      }, appliedFilterKeys = appliedFilters?.map(({
        key
      }) => key), pinnedFromPropsKeys = filters.filter(({
        pinned
      }) => pinned).map(({
        key
      }) => key), pinnedFiltersFromPropsAndAppliedFilters = filters.filter(({
        pinned,
        key
      }) => Boolean(pinned) || appliedFilterKeys?.includes(key)), [localPinnedFilters, setLocalPinnedFilters] = React2.useState(pinnedFiltersFromPropsAndAppliedFilters.map(({
        key
      }) => key));
      useOnValueChange.useOnValueChange(filters.length, () => {
        setLocalPinnedFilters(pinnedFiltersFromPropsAndAppliedFilters.map(({
          key
        }) => key));
      });
      let pinnedFilters = localPinnedFilters.map((key) => filters.find((filter) => filter.key === key)).reduce((acc, filter) => filter ? [...acc, filter] : acc, []), onFilterClick = ({
        key,
        onAction
      }) => () => {
        setTimeout(() => {
          setLocalPinnedFilters((currentLocalPinnedFilters) => [.../* @__PURE__ */ new Set([...currentLocalPinnedFilters, key])]), onAction?.(), togglePopoverActive();
        }, 0);
      }, filterToActionItem = (filter) => ({
        ...filter,
        content: filter.label,
        onAction: onFilterClick(filter)
      }), unpinnedFilters = filters.filter((filter) => !pinnedFilters.some(({
        key
      }) => key === filter.key)), unsectionedFilters = unpinnedFilters.filter((filter) => !filter.section && !filter.hidden).map(filterToActionItem), sectionedFilters = unpinnedFilters.filter((filter) => filter.section).reduce((acc, filter) => {
        let filterActionItem = filterToActionItem(filter), sectionIndex = acc.findIndex((section) => section.title === filter.section);
        return sectionIndex === -1 ? acc.push({
          title: filter.section,
          items: [filterActionItem]
        }) : acc[sectionIndex].items.push(filterActionItem), acc;
      }, []), hasOneOrMorePinnedFilters = pinnedFilters.length >= 1, addFilterActivator = /* @__PURE__ */ React2.createElement("div", null, /* @__PURE__ */ React2.createElement(UnstyledButton.UnstyledButton, {
        type: "button",
        className: Filters_module.default.AddFilter,
        onClick: handleAddFilterClick,
        "aria-label": i18n.translate("Polaris.Filters.addFilter"),
        disabled: disabled || unsectionedFilters.length === 0 && sectionedFilters.length === 0 || disableFilters
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "bodySm",
        tone: disabled ? "disabled" : "base"
      }, i18n.translate("Polaris.Filters.addFilter"), " "), /* @__PURE__ */ React2.createElement(polarisIcons.PlusIcon, null))), handleClearAllFilters = () => {
        setLocalPinnedFilters(pinnedFromPropsKeys), onClearAll?.();
      }, shouldShowAddButton = filters.some((filter) => !filter.pinned) || filters.length !== localPinnedFilters.length, pinnedFiltersMarkup = pinnedFilters.map(({
        key: filterKey,
        ...pinnedFilter
      }) => {
        let appliedFilter = appliedFilters?.find(({
          key
        }) => key === filterKey), handleFilterPillRemove = () => {
          setLocalPinnedFilters((currentLocalPinnedFilters) => currentLocalPinnedFilters.filter((key) => {
            let isMatchedFilters = key === filterKey, isPinnedFilterFromProps = pinnedFromPropsKeys.includes(key);
            return !isMatchedFilters || isPinnedFilterFromProps;
          })), appliedFilter?.onRemove(filterKey);
        };
        return /* @__PURE__ */ React2.createElement(FilterPill.FilterPill, Object.assign({
          key: filterKey
        }, pinnedFilter, {
          initialActive: hasMounted.current && !pinnedFilter.pinned && !appliedFilter,
          unsavedChanges: appliedFilter?.unsavedChanges,
          label: appliedFilter?.label || pinnedFilter.label,
          filterKey,
          selected: appliedFilterKeys?.includes(filterKey),
          onRemove: handleFilterPillRemove,
          disabled: pinnedFilter.disabled || disableFilters,
          closeOnChildOverlayClick
        }));
      }), addButton = shouldShowAddButton ? /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Filters_module.default.AddFilterActivator, hasOneOrMorePinnedFilters && Filters_module.default.AddFilterActivatorMultiple)
      }, /* @__PURE__ */ React2.createElement(Popover.Popover, {
        active: popoverActive && !disabled,
        activator: addFilterActivator,
        onClose: togglePopoverActive
      }, /* @__PURE__ */ React2.createElement(ActionList.ActionList, {
        actionRole: "menuitem",
        items: unsectionedFilters,
        sections: sectionedFilters
      }))) : null, clearAllMarkup = appliedFilters?.length ? /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Filters_module.default.ClearAll, hasOneOrMorePinnedFilters && shouldShowAddButton && Filters_module.default.MultiplePinnedFilterClearAll)
      }, /* @__PURE__ */ React2.createElement(Button3.Button, {
        size: "micro",
        onClick: handleClearAllFilters,
        variant: "monochromePlain"
      }, i18n.translate("Polaris.Filters.clearFilters"))) : null;
      return /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Filters_module.default.FiltersWrapper, shouldShowAddButton && hasOneOrMorePinnedFilters && Filters_module.default.FiltersWrapperWithAddButton),
        "aria-live": "polite",
        style: mountedStateStyles
      }, /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Filters_module.default.FiltersInner)
      }, /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Filters_module.default.FiltersStickyArea)
      }, pinnedFiltersMarkup, addButton, clearAllMarkup)), hideQueryField ? /* @__PURE__ */ React2.createElement(Box3.Box, {
        paddingInlineEnd: "300",
        paddingBlockStart: "200",
        paddingBlockEnd: "200"
      }, /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        align: "start",
        blockAlign: "center",
        gap: {
          xs: "400",
          md: "300"
        }
      }, children)) : null);
    }
    exports.FiltersBar = FiltersBar;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Filters/Filters.js
var require_Filters = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Filters/Filters.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Filters_module = require_Filters_css(), SearchField = require_SearchField(), FiltersBar = require_FiltersBar(), Box3 = require_Box(), InlineStack3 = require_InlineStack(), TRANSITION_DURATION = "var(--p-motion-duration-150)", TRANSITION_MARGIN = "-36px", defaultStyle = {
      transition: `opacity ${TRANSITION_DURATION} var(--p-motion-ease)`,
      opacity: 0
    }, transitionStyles = {
      entering: {
        opacity: 1
      },
      entered: {
        opacity: 1
      },
      exiting: {
        opacity: 0
      },
      exited: {
        opacity: 0
      },
      unmounted: {
        opacity: 0
      }
    }, defaultFilterStyles = {
      transition: `opacity ${TRANSITION_DURATION} var(--p-motion-ease), margin ${TRANSITION_DURATION} var(--p-motion-ease)`,
      opacity: 0,
      marginTop: TRANSITION_MARGIN
    }, transitionFilterStyles = {
      entering: {
        opacity: 1,
        marginTop: 0
      },
      entered: {
        opacity: 1,
        marginTop: 0
      },
      exiting: {
        opacity: 0,
        marginTop: TRANSITION_MARGIN
      },
      exited: {
        opacity: 0,
        marginTop: TRANSITION_MARGIN
      },
      unmounted: {
        opacity: 0,
        marginTop: TRANSITION_MARGIN
      }
    };
    function Filters({
      queryValue,
      queryPlaceholder,
      focused,
      filters,
      appliedFilters,
      onQueryChange,
      onQueryClear,
      onQueryBlur,
      onQueryFocus,
      onClearAll,
      children,
      disabled,
      hideFilters,
      hideQueryField,
      disableQueryField,
      borderlessQueryField,
      loading,
      disableFilters,
      mountedState,
      onAddFilterClick,
      closeOnChildOverlayClick,
      selectedViewName
    }) {
      let hideFilterBar = hideFilters || filters.length === 0, queryFieldMarkup = hideQueryField ? null : /* @__PURE__ */ React2.createElement("div", {
        className: Filters_module.default.Container
      }, /* @__PURE__ */ React2.createElement(Box3.Box, {
        padding: "200"
      }, /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        align: "start",
        blockAlign: "center",
        gap: {
          xs: "400",
          md: "300"
        }
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Filters_module.default.SearchField,
        style: mountedState ? {
          ...defaultStyle,
          ...transitionStyles[mountedState]
        } : void 0
      }, /* @__PURE__ */ React2.createElement(SearchField.SearchField, {
        onChange: onQueryChange,
        onFocus: onQueryFocus,
        onBlur: onQueryBlur,
        onClear: onQueryClear,
        value: queryValue,
        placeholder: queryPlaceholder,
        focused,
        disabled: disabled || disableQueryField,
        borderlessQueryField,
        loading,
        selectedViewName
      })), children))), mountedStateStyles = mountedState && !hideQueryField ? {
        ...defaultFilterStyles,
        ...transitionFilterStyles[mountedState]
      } : void 0, filtersMarkup = hideFilterBar ? null : /* @__PURE__ */ React2.createElement(FiltersBar.FiltersBar, {
        filters,
        appliedFilters,
        onClearAll,
        disabled,
        hideQueryField,
        disableFilters,
        onAddFilterClick,
        closeOnChildOverlayClick,
        mountedStateStyles
      }, children);
      return /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Filters_module.default.Filters, hideQueryField && Filters_module.default.hideQueryField)
      }, queryFieldMarkup, filtersMarkup);
    }
    exports.Filters = Filters;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Focus/Focus.js
var require_Focus = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Focus/Focus.js"(exports) {
    "use strict";
    var React2 = require_react(), focus = require_focus(), Focus = /* @__PURE__ */ React2.memo(function({
      children,
      disabled,
      root
    }) {
      return React2.useEffect(() => {
        if (disabled || !root)
          return;
        let node = isRef(root) ? root.current : root;
        !node || node.querySelector("[autofocus]") || focus.focusFirstFocusableNode(node, !1);
      }, [disabled, root]), /* @__PURE__ */ React2.createElement(React2.Fragment, null, children);
    });
    function isRef(ref) {
      return ref.current !== void 0;
    }
    exports.Focus = Focus;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/FooterHelp/FooterHelp.css.js
var require_FooterHelp_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/FooterHelp/FooterHelp.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      FooterHelp: "Polaris-FooterHelp"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/FooterHelp/FooterHelp.js
var require_FooterHelp = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/FooterHelp/FooterHelp.js"(exports) {
    "use strict";
    var React2 = require_react(), FooterHelp_module = require_FooterHelp_css(), Text3 = require_Text();
    function FooterHelp({
      children,
      align = "center"
    }) {
      let style = {
        "--pc-footer-help-align": align
      };
      return /* @__PURE__ */ React2.createElement("div", {
        className: FooterHelp_module.default.FooterHelp,
        style
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "p",
        variant: "bodyLg"
      }, children));
    }
    exports.FooterHelp = FooterHelp;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Form/Form.js
var require_Form = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Form/Form.js"(exports) {
    "use strict";
    var React2 = require_react(), hooks = require_hooks2(), Text3 = require_Text();
    function Form({
      acceptCharset,
      action: action8,
      autoComplete,
      children,
      encType,
      implicitSubmit = !0,
      method = "post",
      name,
      noValidate,
      preventDefault = !0,
      target,
      onSubmit
    }) {
      let i18n = hooks.useI18n(), handleSubmit = React2.useCallback((event) => {
        preventDefault && (event.preventDefault(), onSubmit(event));
      }, [onSubmit, preventDefault]), autoCompleteInputs = normalizeAutoComplete(autoComplete), submitMarkup = implicitSubmit ? /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        visuallyHidden: !0
      }, /* @__PURE__ */ React2.createElement("button", {
        type: "submit",
        "aria-hidden": "true",
        tabIndex: -1
      }, i18n.translate("Polaris.Common.submit"))) : null;
      return /* @__PURE__ */ React2.createElement("form", {
        acceptCharset,
        action: action8,
        autoComplete: autoCompleteInputs,
        encType,
        method,
        name,
        noValidate,
        target,
        onSubmit: handleSubmit
      }, submitMarkup, children);
    }
    function normalizeAutoComplete(autoComplete) {
      return autoComplete == null ? autoComplete : autoComplete ? "on" : "off";
    }
    exports.Form = Form;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/FormLayout/FormLayout.css.js
var require_FormLayout_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/FormLayout/FormLayout.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Item: "Polaris-FormLayout__Item",
      grouped: "Polaris-FormLayout--grouped",
      condensed: "Polaris-FormLayout--condensed"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/FormLayout/components/Item/Item.js
var require_Item5 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/FormLayout/components/Item/Item.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), FormLayout_module = require_FormLayout_css();
    function Item({
      children,
      condensed = !1
    }) {
      let className = css.classNames(FormLayout_module.default.Item, condensed ? FormLayout_module.default.condensed : FormLayout_module.default.grouped);
      return children ? /* @__PURE__ */ React2.createElement("div", {
        className
      }, children) : null;
    }
    exports.Item = Item;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/FormLayout/components/Group/Group.js
var require_Group = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/FormLayout/components/Group/Group.js"(exports) {
    "use strict";
    var React2 = require_react(), components = require_components(), Item = require_Item5(), BlockStack3 = require_BlockStack(), InlineStack3 = require_InlineStack(), Box3 = require_Box(), Text3 = require_Text();
    function Group({
      children,
      condensed,
      title,
      helpText
    }) {
      let id = React2.useId(), helpTextElement = null, helpTextId, titleElement = null, titleId;
      helpText && (helpTextId = `${id}HelpText`, helpTextElement = /* @__PURE__ */ React2.createElement(Box3.Box, {
        id: helpTextId,
        color: "text-secondary"
      }, helpText)), title && (titleId = `${id}Title`, titleElement = /* @__PURE__ */ React2.createElement(Text3.Text, {
        id: titleId,
        as: "p"
      }, title));
      let itemsMarkup = React2.Children.map(children, (child) => components.wrapWithComponent(child, Item.Item, {
        condensed
      }));
      return /* @__PURE__ */ React2.createElement(BlockStack3.BlockStack, {
        role: "group",
        gap: "200",
        "aria-labelledby": titleId,
        "aria-describedby": helpTextId
      }, titleElement, /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        gap: "300"
      }, itemsMarkup), helpTextElement);
    }
    exports.Group = Group;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/FormLayout/FormLayout.js
var require_FormLayout = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/FormLayout/FormLayout.js"(exports) {
    "use strict";
    var React2 = require_react(), components = require_components(), Group = require_Group(), BlockStack3 = require_BlockStack(), Item = require_Item5(), FormLayout = /* @__PURE__ */ React2.memo(function({
      children
    }) {
      return /* @__PURE__ */ React2.createElement(BlockStack3.BlockStack, {
        gap: "400"
      }, React2.Children.map(children, wrapChildren));
    });
    FormLayout.Group = Group.Group;
    function wrapChildren(child, index) {
      if (components.isElementOfType(child, Group.Group))
        return child;
      let props = {
        key: index
      };
      return components.wrapWithComponent(child, Item.Item, props);
    }
    exports.FormLayout = FormLayout;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/set-root-property.js
var require_set_root_property = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/set-root-property.js"(exports) {
    "use strict";
    function setRootProperty(name, value, node) {
      if (!document)
        return;
      (node || document.documentElement).style.setProperty(name, value);
    }
    exports.setRootProperty = setRootProperty;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/Frame.css.js
var require_Frame_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/Frame.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Frame: "Polaris-Frame",
      Navigation: "Polaris-Frame__Navigation",
      hasTopBar: "Polaris-Frame--hasTopBar",
      "Navigation-enter": "Polaris-Frame__Navigation--enter",
      "Navigation-enterActive": "Polaris-Frame__Navigation--enterActive",
      "Navigation-exit": "Polaris-Frame__Navigation--exit",
      "Navigation-exitActive": "Polaris-Frame__Navigation--exitActive",
      NavigationDismiss: "Polaris-Frame__NavigationDismiss",
      "Navigation-visible": "Polaris-Frame__Navigation--visible",
      TopBar: "Polaris-Frame__TopBar",
      ContextualSaveBar: "Polaris-Frame__ContextualSaveBar",
      Main: "Polaris-Frame__Main",
      hasNav: "Polaris-Frame--hasNav",
      Content: "Polaris-Frame__Content",
      hasSidebar: "Polaris-Frame--hasSidebar",
      GlobalRibbonContainer: "Polaris-Frame__GlobalRibbonContainer",
      LoadingBar: "Polaris-Frame__LoadingBar",
      Skip: "Polaris-Frame__Skip",
      focused: "Polaris-Frame--focused",
      pressed: "Polaris-Frame--pressed"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/media-query/hooks.js
var require_hooks11 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/media-query/hooks.js"(exports) {
    "use strict";
    var React2 = require_react(), context = require_context6();
    function useMediaQuery() {
      let mediaQuery = React2.useContext(context.MediaQueryContext);
      if (!mediaQuery)
        throw new Error("No mediaQuery was provided. Your application must be wrapped in an <AppProvider> component. See https://polaris.shopify.com/components/app-provider for implementation instructions.");
      return mediaQuery;
    }
    exports.useMediaQuery = useMediaQuery;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-is-mounted-ref.js
var require_use_is_mounted_ref = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-is-mounted-ref.js"(exports) {
    "use strict";
    var React2 = require_react();
    function useIsMountedRef() {
      let isMounted = React2.useRef(!1);
      return React2.useEffect(() => (isMounted.current = !0, () => {
        isMounted.current = !1;
      }), []), isMounted;
    }
    exports.useIsMountedRef = useIsMountedRef;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/components/Loading/Loading.css.js
var require_Loading_css2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/components/Loading/Loading.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Loading: "Polaris-Frame-Loading",
      Level: "Polaris-Frame-Loading__Level"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/components/Loading/Loading.js
var require_Loading2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/components/Loading/Loading.js"(exports) {
    "use strict";
    var React2 = require_react(), useIsMountedRef = require_use_is_mounted_ref(), Loading_module = require_Loading_css2(), hooks = require_hooks2(), STUCK_THRESHOLD = 99;
    function Loading() {
      let i18n = hooks.useI18n(), isMountedRef = useIsMountedRef.useIsMountedRef(), [progress, setProgress] = React2.useState(0), [animating, setAnimating] = React2.useState(!1);
      React2.useEffect(() => {
        progress >= STUCK_THRESHOLD || animating || requestAnimationFrame(() => {
          if (!isMountedRef.current)
            return;
          let step = Math.max((STUCK_THRESHOLD - progress) / 10, 1);
          setAnimating(!0), setProgress(progress + step);
        });
      }, [progress, animating, isMountedRef]);
      let customStyles = {
        transform: `scaleX(${Math.floor(progress) / 100})`
      };
      return /* @__PURE__ */ React2.createElement("div", {
        className: Loading_module.default.Loading,
        "aria-valuenow": progress,
        "aria-valuemin": 0,
        "aria-valuemax": 100,
        role: "progressbar",
        "aria-label": i18n.translate("Polaris.Loading.label")
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Loading_module.default.Level,
        style: customStyles,
        onTransitionEnd: () => setAnimating(!1)
      }));
    }
    exports.Loading = Loading;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/components/CSSAnimation/CSSAnimation.css.js
var require_CSSAnimation_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/components/CSSAnimation/CSSAnimation.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      startFade: "Polaris-Frame-CSSAnimation--startFade",
      endFade: "Polaris-Frame-CSSAnimation--endFade"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/components/CSSAnimation/CSSAnimation.js
var require_CSSAnimation = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/components/CSSAnimation/CSSAnimation.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), CSSAnimation_module = require_CSSAnimation_css(), TransitionStatus;
    (function(TransitionStatus2) {
      TransitionStatus2.Entering = "entering", TransitionStatus2.Entered = "entered", TransitionStatus2.Exiting = "exiting", TransitionStatus2.Exited = "exited";
    })(TransitionStatus || (TransitionStatus = {}));
    function CSSAnimation({
      in: inProp,
      className,
      type,
      children
    }) {
      let [transitionStatus, setTransitionStatus] = React2.useState(inProp ? TransitionStatus.Entering : TransitionStatus.Exited), isMounted = React2.useRef(!1), node = React2.useRef(null);
      React2.useEffect(() => {
        isMounted.current && transitionStatus === TransitionStatus.Entering && changeTransitionStatus(TransitionStatus.Entered);
      }, [transitionStatus]), React2.useEffect(() => {
        isMounted.current && (inProp && changeTransitionStatus(TransitionStatus.Entering), !inProp && changeTransitionStatus(TransitionStatus.Exiting));
      }, [inProp]), React2.useEffect(() => {
        isMounted.current = !0;
      }, []);
      let wrapperClassName = css.classNames(className, CSSAnimation_module.default[css.variationName("start", type)], inProp && CSSAnimation_module.default[css.variationName("end", type)]), content = transitionStatus === TransitionStatus.Exited && !inProp ? null : children;
      return /* @__PURE__ */ React2.createElement("div", {
        className: wrapperClassName,
        ref: node,
        onTransitionEnd: handleTransitionEnd
      }, content);
      function handleTransitionEnd() {
        transitionStatus === TransitionStatus.Exiting && changeTransitionStatus(TransitionStatus.Exited);
      }
      function changeTransitionStatus(transitionStatus2) {
        setTransitionStatus(transitionStatus2), transitionStatus2 === TransitionStatus.Entering && node.current && node.current.getBoundingClientRect();
      }
    }
    exports.CSSAnimation = CSSAnimation;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/pluck-deep.js
var require_pluck_deep = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/pluck-deep.js"(exports) {
    "use strict";
    var isObject = require_is_object();
    function pluckDeep(obj, key) {
      if (!obj)
        return null;
      let keys = Object.keys(obj);
      for (let currKey of keys) {
        if (currKey === key)
          return obj[key];
        if (isObject.isObject(obj[currKey])) {
          let plucked = pluckDeep(obj[currKey], key);
          if (plucked)
            return plucked;
        }
      }
      return null;
    }
    exports.pluckDeep = pluckDeep;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/get-width.js
var require_get_width = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/get-width.js"(exports) {
    "use strict";
    var pluckDeep = require_pluck_deep();
    function getWidth(value = {}, defaultWidth = 0, key = "width") {
      let width = typeof value == "number" ? value : pluckDeep.pluckDeep(value, key);
      return width ? `${width}px` : `${defaultWidth}px`;
    }
    exports.getWidth = getWidth;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/components/ContextualSaveBar/ContextualSaveBar.css.js
var require_ContextualSaveBar_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/components/ContextualSaveBar/ContextualSaveBar.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ContextualSaveBar: "Polaris-Frame-ContextualSaveBar",
      LogoContainer: "Polaris-Frame-ContextualSaveBar__LogoContainer",
      ContextControl: "Polaris-Frame-ContextualSaveBar__ContextControl",
      Contents: "Polaris-Frame-ContextualSaveBar__Contents",
      fullWidth: "Polaris-Frame-ContextualSaveBar--fullWidth",
      MessageContainer: "Polaris-Frame-ContextualSaveBar__MessageContainer",
      ActionContainer: "Polaris-Frame-ContextualSaveBar__ActionContainer",
      Action: "Polaris-Frame-ContextualSaveBar__Action"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Modal/Modal.css.js
var require_Modal_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Modal/Modal.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Body: "Polaris-Modal__Body",
      NoScrollBody: "Polaris-Modal__NoScrollBody",
      IFrame: "Polaris-Modal__IFrame"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Modal/components/Section/Section.css.js
var require_Section_css2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Modal/components/Section/Section.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Section: "Polaris-Modal-Section",
      titleHidden: "Polaris-Modal-Section--titleHidden"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Modal/components/Section/Section.js
var require_Section5 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Modal/components/Section/Section.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Section_module = require_Section_css2(), Box3 = require_Box();
    function Section({
      children,
      flush = !1,
      subdued = !1,
      titleHidden = !1
    }) {
      let className = css.classNames(Section_module.default.Section, titleHidden && Section_module.default.titleHidden);
      return /* @__PURE__ */ React2.createElement("div", {
        className
      }, /* @__PURE__ */ React2.createElement(Box3.Box, Object.assign({
        as: "section",
        padding: flush ? "0" : "400"
      }, titleHidden && {
        paddingInlineEnd: "0"
      }, subdued && {
        background: "bg-surface-tertiary"
      }), children));
    }
    exports.Section = Section;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Modal/components/Dialog/Dialog.css.js
var require_Dialog_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Modal/components/Dialog/Dialog.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Container: "Polaris-Modal-Dialog__Container",
      Dialog: "Polaris-Modal-Dialog",
      Modal: "Polaris-Modal-Dialog__Modal",
      limitHeight: "Polaris-Modal-Dialog--limitHeight",
      sizeSmall: "Polaris-Modal-Dialog--sizeSmall",
      sizeLarge: "Polaris-Modal-Dialog--sizeLarge",
      sizeFullScreen: "Polaris-Modal-Dialog--sizeFullScreen",
      animateFadeUp: "Polaris-Modal-Dialog--animateFadeUp",
      entering: "Polaris-Modal-Dialog--entering",
      exiting: "Polaris-Modal-Dialog--exiting",
      exited: "Polaris-Modal-Dialog--exited",
      entered: "Polaris-Modal-Dialog--entered"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/focus-manager/hooks.js
var require_hooks12 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/focus-manager/hooks.js"(exports) {
    "use strict";
    var React2 = require_react(), errors = require_errors(), context = require_context8();
    function useFocusManager({
      trapping
    }) {
      let focusManager = React2.useContext(context.FocusManagerContext), id = React2.useId();
      if (!focusManager)
        throw new errors.MissingAppProviderError("No FocusManager was provided.");
      let {
        trapFocusList,
        add: addFocusItem,
        remove: removeFocusItem
      } = focusManager, canSafelyFocus = trapFocusList[0] === id, value = React2.useMemo(() => ({
        canSafelyFocus
      }), [canSafelyFocus]);
      return React2.useEffect(() => {
        if (trapping)
          return addFocusItem(id), () => {
            removeFocusItem(id);
          };
      }, [addFocusItem, id, removeFocusItem, trapping]), value;
    }
    exports.useFocusManager = useFocusManager;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TrapFocus/TrapFocus.js
var require_TrapFocus = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TrapFocus/TrapFocus.js"(exports) {
    "use strict";
    var React2 = require_react(), types = require_types(), focus = require_focus(), shared = require_shared(), hooks = require_hooks12(), Focus = require_Focus(), EventListener = require_EventListener(), KeypressListener = require_KeypressListener();
    function TrapFocus({
      trapping = !0,
      children
    }) {
      let {
        canSafelyFocus
      } = hooks.useFocusManager({
        trapping
      }), focusTrapWrapper = React2.useRef(null), [disableFocus, setDisableFocus] = React2.useState(!0);
      React2.useEffect(() => {
        let disable = canSafelyFocus && !(focusTrapWrapper.current && focusTrapWrapper.current.contains(document.activeElement)) ? !trapping : !0;
        setDisableFocus(disable);
      }, [canSafelyFocus, trapping]);
      let handleFocusIn = (event) => {
        let containerContentsHaveFocus = focusTrapWrapper.current && focusTrapWrapper.current.contains(document.activeElement);
        trapping === !1 || !focusTrapWrapper.current || containerContentsHaveFocus || event.target instanceof Element && event.target.matches(`${shared.portal.selector} *`) || canSafelyFocus && event.target instanceof HTMLElement && focusTrapWrapper.current !== event.target && !focusTrapWrapper.current.contains(event.target) && focus.focusFirstFocusableNode(focusTrapWrapper.current);
      }, handleTab = (event) => {
        if (trapping === !1 || !focusTrapWrapper.current)
          return;
        let firstFocusableNode = focus.findFirstKeyboardFocusableNode(focusTrapWrapper.current), lastFocusableNode = focus.findLastKeyboardFocusableNode(focusTrapWrapper.current);
        event.target === lastFocusableNode && !event.shiftKey && (event.preventDefault(), focus.focusFirstKeyboardFocusableNode(focusTrapWrapper.current)), event.target === firstFocusableNode && event.shiftKey && (event.preventDefault(), focus.focusLastKeyboardFocusableNode(focusTrapWrapper.current));
      };
      return /* @__PURE__ */ React2.createElement(Focus.Focus, {
        disabled: disableFocus,
        root: focusTrapWrapper.current
      }, /* @__PURE__ */ React2.createElement("div", {
        ref: focusTrapWrapper
      }, /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
        event: "focusin",
        handler: handleFocusIn
      }), /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
        keyCode: types.Key.Tab,
        keyEvent: "keydown",
        handler: handleTab
      }), children));
    }
    exports.TrapFocus = TrapFocus;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Modal/components/Dialog/Dialog.js
var require_Dialog = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Modal/components/Dialog/Dialog.js"(exports) {
    "use strict";
    var React2 = require_react(), reactTransitionGroup = require("react-transition-group"), css = require_css(), focus = require_focus(), types = require_types(), useTheme = require_use_theme(), Dialog_module = require_Dialog_css(), context = require_context15(), TrapFocus = require_TrapFocus(), Text3 = require_Text(), KeypressListener = require_KeypressListener();
    function Dialog({
      instant,
      labelledBy,
      children,
      limitHeight,
      size,
      onClose,
      onExited,
      onEntered,
      setClosing,
      hasToasts,
      ...props
    }) {
      let theme = useTheme.useTheme(), containerNode = React2.useRef(null), frameContext = React2.useContext(context.FrameContext), toastMessages;
      frameContext && (toastMessages = frameContext.toastMessages);
      let classes = css.classNames(Dialog_module.default.Modal, size && Dialog_module.default[css.variationName("size", size)], limitHeight && Dialog_module.default.limitHeight), TransitionChild = instant ? reactTransitionGroup.Transition : FadeUp;
      React2.useEffect(() => {
        containerNode.current && !containerNode.current.contains(document.activeElement) && focus.focusFirstFocusableNode(containerNode.current);
      }, []);
      let handleKeyDown = () => {
        setClosing && setClosing(!0);
      }, handleKeyUp = () => {
        setClosing && setClosing(!1), onClose();
      }, ariaLiveAnnouncements = /* @__PURE__ */ React2.createElement("div", {
        "aria-live": "assertive"
      }, toastMessages ? toastMessages.map((toastMessage) => /* @__PURE__ */ React2.createElement(Text3.Text, {
        visuallyHidden: !0,
        as: "p",
        key: toastMessage.id
      }, toastMessage.content)) : null);
      return /* @__PURE__ */ React2.createElement(TransitionChild, Object.assign({}, props, {
        nodeRef: containerNode,
        mountOnEnter: !0,
        unmountOnExit: !0,
        timeout: parseInt(theme.motion["motion-duration-200"], 10),
        onEntered,
        onExited
      }), /* @__PURE__ */ React2.createElement("div", {
        className: Dialog_module.default.Container,
        "data-polaris-layer": !0,
        "data-polaris-overlay": !0,
        ref: containerNode
      }, /* @__PURE__ */ React2.createElement(TrapFocus.TrapFocus, null, /* @__PURE__ */ React2.createElement("div", {
        role: "dialog",
        "aria-modal": !0,
        "aria-label": labelledBy,
        "aria-labelledby": labelledBy,
        tabIndex: -1,
        className: Dialog_module.default.Dialog
      }, /* @__PURE__ */ React2.createElement("div", {
        className: classes
      }, /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
        keyCode: types.Key.Escape,
        keyEvent: "keydown",
        handler: handleKeyDown
      }), /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
        keyCode: types.Key.Escape,
        handler: handleKeyUp
      }), children), ariaLiveAnnouncements))));
    }
    var fadeUpClasses = {
      appear: css.classNames(Dialog_module.default.animateFadeUp, Dialog_module.default.entering),
      appearActive: css.classNames(Dialog_module.default.animateFadeUp, Dialog_module.default.entered),
      enter: css.classNames(Dialog_module.default.animateFadeUp, Dialog_module.default.entering),
      enterActive: css.classNames(Dialog_module.default.animateFadeUp, Dialog_module.default.entered),
      exit: css.classNames(Dialog_module.default.animateFadeUp, Dialog_module.default.exiting),
      exitActive: css.classNames(Dialog_module.default.animateFadeUp, Dialog_module.default.exited)
    };
    function FadeUp({
      children,
      ...props
    }) {
      return /* @__PURE__ */ React2.createElement(reactTransitionGroup.CSSTransition, Object.assign({}, props, {
        classNames: fadeUpClasses
      }), children);
    }
    exports.Dialog = Dialog;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Modal/components/CloseButton/CloseButton.js
var require_CloseButton = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Modal/components/CloseButton/CloseButton.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), hooks = require_hooks2(), Button3 = require_Button();
    function CloseButton({
      pressed,
      onClick
    }) {
      let i18n = hooks.useI18n();
      return /* @__PURE__ */ React2.createElement(Button3.Button, {
        variant: "tertiary",
        pressed,
        icon: polarisIcons.XIcon,
        onClick,
        accessibilityLabel: i18n.translate("Polaris.Common.close")
      });
    }
    exports.CloseButton = CloseButton;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Modal/components/Header/Header.js
var require_Header3 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Modal/components/Header/Header.js"(exports) {
    "use strict";
    var React2 = require_react(), CloseButton = require_CloseButton(), InlineGrid = require_InlineGrid(), Box3 = require_Box(), InlineStack3 = require_InlineStack(), Text3 = require_Text();
    function Header({
      id,
      children,
      closing,
      titleHidden,
      onClose
    }) {
      let headerPaddingInline = "400", headerPaddingBlock = "400";
      return titleHidden || !children ? /* @__PURE__ */ React2.createElement(Box3.Box, {
        position: "absolute",
        insetInlineEnd: headerPaddingInline,
        insetBlockStart: headerPaddingBlock,
        zIndex: "1"
      }, /* @__PURE__ */ React2.createElement(CloseButton.CloseButton, {
        onClick: onClose
      })) : /* @__PURE__ */ React2.createElement(Box3.Box, {
        paddingBlockStart: "400",
        paddingBlockEnd: "400",
        paddingInlineStart: headerPaddingInline,
        paddingInlineEnd: headerPaddingInline,
        borderBlockEndWidth: "025",
        borderColor: "border",
        background: "bg-surface-tertiary"
      }, /* @__PURE__ */ React2.createElement(InlineGrid.InlineGrid, {
        columns: {
          xs: "1fr auto"
        },
        gap: "400"
      }, /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        gap: "400",
        blockAlign: "center"
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        id,
        as: "h2",
        variant: "headingMd",
        breakWord: !0
      }, children)), /* @__PURE__ */ React2.createElement(CloseButton.CloseButton, {
        pressed: closing,
        onClick: onClose
      })));
    }
    exports.Header = Header;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Modal/components/Footer/Footer.js
var require_Footer = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Modal/components/Footer/Footer.js"(exports) {
    "use strict";
    var React2 = require_react(), utils = require_utils(), InlineStack3 = require_InlineStack(), Box3 = require_Box();
    function Footer({
      primaryAction,
      secondaryActions,
      children
    }) {
      let primaryActionButton = primaryAction && utils.buttonsFrom(primaryAction, {
        variant: "primary"
      }) || null, secondaryActionButtons = secondaryActions && utils.buttonsFrom(secondaryActions) || null, actions = primaryActionButton || secondaryActionButtons ? /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        gap: "200"
      }, secondaryActionButtons, primaryActionButton) : null;
      return /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        gap: "400",
        blockAlign: "center"
      }, /* @__PURE__ */ React2.createElement(Box3.Box, {
        borderColor: "border",
        borderBlockStartWidth: "025",
        padding: "400",
        width: "100%"
      }, /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        gap: "400",
        blockAlign: "center",
        align: "space-between"
      }, /* @__PURE__ */ React2.createElement(Box3.Box, null, children), actions)));
    }
    exports.Footer = Footer;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Modal/Modal.js
var require_Modal = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Modal/Modal.js"(exports) {
    "use strict";
    var React2 = require_react(), reactTransitionGroup = require("react-transition-group"), focus = require_focus(), withinContentContext = require_within_content_context(), components = require_components(), Modal_module = require_Modal_css(), Section = require_Section5(), Dialog = require_Dialog(), Header = require_Header3(), Backdrop = require_Backdrop(), Footer = require_Footer(), hooks = require_hooks2(), Box3 = require_Box(), Scrollable = require_Scrollable(), Portal = require_Portal(), InlineStack3 = require_InlineStack(), Spinner2 = require_Spinner(), IFRAME_LOADING_HEIGHT = 200, DEFAULT_IFRAME_CONTENT_HEIGHT = 400, Modal3 = function({
      children,
      title,
      titleHidden = !1,
      src,
      iFrameName,
      open,
      instant,
      sectioned,
      loading,
      size,
      limitHeight,
      footer,
      primaryAction,
      secondaryActions,
      onScrolledToBottom,
      activator,
      activatorWrapper = "div",
      onClose,
      onIFrameLoad,
      onTransitionEnd,
      noScroll
    }) {
      let [iframeHeight, setIframeHeight] = React2.useState(IFRAME_LOADING_HEIGHT), [closing, setClosing] = React2.useState(!1), headerId = React2.useId(), activatorRef = React2.useRef(null), iframeTitle = hooks.useI18n().translate("Polaris.Modal.iFrameTitle"), dialog, backdrop, handleEntered = React2.useCallback(() => {
        onTransitionEnd && onTransitionEnd();
      }, [onTransitionEnd]), handleExited = React2.useCallback(() => {
        setIframeHeight(IFRAME_LOADING_HEIGHT);
        let activatorElement = activator && isRef(activator) ? activator && activator.current : activatorRef.current;
        activatorElement && requestAnimationFrame(() => focus.focusFirstFocusableNode(activatorElement));
      }, [activator]), handleIFrameLoad = React2.useCallback((evt) => {
        let iframe = evt.target;
        if (iframe && iframe.contentWindow)
          try {
            setIframeHeight(iframe.contentWindow.document.body.scrollHeight);
          } catch {
            setIframeHeight(DEFAULT_IFRAME_CONTENT_HEIGHT);
          }
        onIFrameLoad?.(evt);
      }, [onIFrameLoad]);
      if (open) {
        let footerMarkup = !footer && !primaryAction && !secondaryActions ? null : /* @__PURE__ */ React2.createElement(Footer.Footer, {
          primaryAction,
          secondaryActions
        }, footer), content = sectioned ? components.wrapWithComponent(children, Section.Section, {
          titleHidden
        }) : children, body = loading ? /* @__PURE__ */ React2.createElement(Box3.Box, {
          padding: "400"
        }, /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
          gap: "400",
          align: "center",
          blockAlign: "center"
        }, /* @__PURE__ */ React2.createElement(Spinner2.Spinner, null))) : content, scrollContainerMarkup = noScroll ? /* @__PURE__ */ React2.createElement("div", {
          className: Modal_module.default.NoScrollBody
        }, /* @__PURE__ */ React2.createElement(Box3.Box, {
          width: "100%",
          overflowX: "hidden",
          overflowY: "hidden"
        }, body)) : /* @__PURE__ */ React2.createElement(Scrollable.Scrollable, {
          shadow: !0,
          className: Modal_module.default.Body,
          onScrolledToBottom
        }, body), bodyMarkup = src ? /* @__PURE__ */ React2.createElement("iframe", {
          name: iFrameName,
          title: iframeTitle,
          src,
          className: Modal_module.default.IFrame,
          onLoad: handleIFrameLoad,
          style: {
            height: `${iframeHeight}px`
          }
        }) : scrollContainerMarkup;
        dialog = /* @__PURE__ */ React2.createElement(Dialog.Dialog, {
          instant,
          labelledBy: headerId,
          onClose,
          onEntered: handleEntered,
          onExited: handleExited,
          size,
          limitHeight,
          setClosing
        }, /* @__PURE__ */ React2.createElement(Header.Header, {
          titleHidden,
          id: headerId,
          closing,
          onClose
        }, title), bodyMarkup, footerMarkup), backdrop = /* @__PURE__ */ React2.createElement(Backdrop.Backdrop, {
          setClosing,
          onClick: onClose
        });
      }
      let animated = !instant, activatorMarkup = activator && !isRef(activator) ? /* @__PURE__ */ React2.createElement(Box3.Box, {
        ref: activatorRef,
        as: activatorWrapper
      }, activator) : null;
      return /* @__PURE__ */ React2.createElement(withinContentContext.WithinContentContext.Provider, {
        value: !0
      }, activatorMarkup, /* @__PURE__ */ React2.createElement(Portal.Portal, {
        idPrefix: "modal"
      }, /* @__PURE__ */ React2.createElement(reactTransitionGroup.TransitionGroup, {
        appear: animated,
        enter: animated,
        exit: animated
      }, dialog), backdrop));
    };
    function isRef(ref) {
      return Object.prototype.hasOwnProperty.call(ref, "current");
    }
    Modal3.Section = Section.Section;
    exports.Modal = Modal3;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/components/ContextualSaveBar/components/DiscardConfirmationModal/DiscardConfirmationModal.js
var require_DiscardConfirmationModal = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/components/ContextualSaveBar/components/DiscardConfirmationModal/DiscardConfirmationModal.js"(exports) {
    "use strict";
    var React2 = require_react(), Modal3 = require_Modal(), hooks = require_hooks2();
    function DiscardConfirmationModal({
      open,
      onDiscard,
      onCancel
    }) {
      let i18n = hooks.useI18n();
      return /* @__PURE__ */ React2.createElement(Modal3.Modal, {
        title: i18n.translate("Polaris.DiscardConfirmationModal.title"),
        open,
        onClose: onCancel,
        primaryAction: {
          content: i18n.translate("Polaris.DiscardConfirmationModal.primaryAction"),
          destructive: !0,
          onAction: onDiscard
        },
        secondaryActions: [{
          content: i18n.translate("Polaris.DiscardConfirmationModal.secondaryAction"),
          onAction: onCancel
        }],
        sectioned: !0
      }, i18n.translate("Polaris.DiscardConfirmationModal.message"));
    }
    exports.DiscardConfirmationModal = DiscardConfirmationModal;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/components/ContextualSaveBar/ContextualSaveBar.js
var require_ContextualSaveBar2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/components/ContextualSaveBar/ContextualSaveBar.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), getWidth = require_get_width(), useToggle = require_use_toggle(), ContextualSaveBar_module = require_ContextualSaveBar_css(), DiscardConfirmationModal = require_DiscardConfirmationModal(), hooks = require_hooks2(), hooks$1 = require_hooks9(), Button3 = require_Button(), Image = require_Image(), Icon2 = require_Icon(), Text3 = require_Text(), LegacyStack = require_LegacyStack();
    function ContextualSaveBar({
      alignContentFlush,
      message,
      saveAction,
      discardAction,
      fullWidth,
      contextControl,
      secondaryMenu
    }) {
      let i18n = hooks.useI18n(), {
        logo
      } = hooks$1.useFrame(), {
        value: discardConfirmationModalVisible,
        toggle: toggleDiscardConfirmationModal,
        setFalse: closeDiscardConfirmationModal
      } = useToggle.useToggle(!1), handleDiscardAction = React2.useCallback(() => {
        discardAction && discardAction.onAction && discardAction.onAction(), closeDiscardConfirmationModal();
      }, [closeDiscardConfirmationModal, discardAction]), discardActionContent = discardAction && discardAction.content ? discardAction.content : i18n.translate("Polaris.ContextualSaveBar.discard"), discardActionHandler;
      discardAction && discardAction.discardConfirmationModal ? discardActionHandler = toggleDiscardConfirmationModal : discardAction && (discardActionHandler = discardAction.onAction);
      let discardConfirmationModalMarkup = discardAction && discardAction.onAction && discardAction.discardConfirmationModal && /* @__PURE__ */ React2.createElement(DiscardConfirmationModal.DiscardConfirmationModal, {
        open: discardConfirmationModalVisible,
        onCancel: toggleDiscardConfirmationModal,
        onDiscard: handleDiscardAction
      }), discardActionMarkup = discardAction && /* @__PURE__ */ React2.createElement(Button3.Button, {
        variant: "tertiary",
        size: "large",
        url: discardAction.url,
        onClick: discardActionHandler,
        loading: discardAction.loading,
        disabled: discardAction.disabled,
        accessibilityLabel: discardAction.content
      }, discardActionContent), saveActionContent = saveAction && saveAction.content ? saveAction.content : i18n.translate("Polaris.ContextualSaveBar.save"), saveActionMarkup = saveAction && /* @__PURE__ */ React2.createElement(Button3.Button, {
        variant: "primary",
        tone: "success",
        size: "large",
        url: saveAction.url,
        onClick: saveAction.onAction,
        loading: saveAction.loading,
        disabled: saveAction.disabled,
        accessibilityLabel: saveAction.content
      }, saveActionContent), width = getWidth.getWidth(logo, 104), imageMarkup = logo && /* @__PURE__ */ React2.createElement(Image.Image, {
        style: {
          width
        },
        source: logo.contextualSaveBarSource || "",
        alt: ""
      }), logoMarkup = alignContentFlush || contextControl ? null : /* @__PURE__ */ React2.createElement("div", {
        className: ContextualSaveBar_module.default.LogoContainer,
        style: {
          width
        }
      }, imageMarkup), contextControlMarkup = contextControl ? /* @__PURE__ */ React2.createElement("div", {
        className: ContextualSaveBar_module.default.ContextControl
      }, contextControl) : null, contentsClassName = css.classNames(ContextualSaveBar_module.default.Contents, fullWidth && ContextualSaveBar_module.default.fullWidth);
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("div", {
        className: ContextualSaveBar_module.default.ContextualSaveBar
      }, contextControlMarkup, logoMarkup, /* @__PURE__ */ React2.createElement("div", {
        className: contentsClassName
      }, /* @__PURE__ */ React2.createElement("div", {
        className: ContextualSaveBar_module.default.MessageContainer
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.AlertTriangleIcon
      }), message && /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "h2",
        variant: "headingMd",
        tone: "text-inverse",
        truncate: !0
      }, message)), /* @__PURE__ */ React2.createElement("div", {
        className: ContextualSaveBar_module.default.ActionContainer
      }, /* @__PURE__ */ React2.createElement(LegacyStack.LegacyStack, {
        spacing: "tight",
        wrap: !1
      }, secondaryMenu, discardActionMarkup, saveActionMarkup)))), discardConfirmationModalMarkup);
    }
    exports.ContextualSaveBar = ContextualSaveBar;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-deep-compare-ref.js
var require_use_deep_compare_ref = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-deep-compare-ref.js"(exports) {
    "use strict";
    var React2 = require_react(), isEqual = require("react-fast-compare");
    function useDeepCompareRef(dependencies, comparator = isEqual) {
      let dependencyList = React2.useRef(dependencies);
      return comparator(dependencyList.current, dependencies) || (dependencyList.current = dependencies), dependencyList.current;
    }
    exports.useDeepCompareRef = useDeepCompareRef;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-deep-effect.js
var require_use_deep_effect = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-deep-effect.js"(exports) {
    "use strict";
    var React2 = require_react(), useDeepCompareRef = require_use_deep_compare_ref();
    function useDeepEffect(callback, dependencies, customCompare) {
      React2.useEffect(callback, useDeepCompareRef.useDeepCompareRef(dependencies, customCompare));
    }
    exports.useDeepEffect = useDeepEffect;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-deep-callback.js
var require_use_deep_callback = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-deep-callback.js"(exports) {
    "use strict";
    var React2 = require_react(), useDeepCompareRef = require_use_deep_compare_ref();
    function useDeepCallback(callback, dependencies, customCompare) {
      return React2.useCallback(callback, useDeepCompareRef.useDeepCompareRef(dependencies, customCompare));
    }
    exports.useDeepCallback = useDeepCallback;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/components/ToastManager/ToastManager.css.js
var require_ToastManager_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/components/ToastManager/ToastManager.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ToastManager: "Polaris-Frame-ToastManager",
      ToastWrapper: "Polaris-Frame-ToastManager__ToastWrapper",
      "ToastWrapper-enter": "Polaris-Frame-ToastManager__ToastWrapper--enter",
      "ToastWrapper-exit": "Polaris-Frame-ToastManager__ToastWrapper--exit",
      "ToastWrapper-enter-done": "Polaris-Frame-ToastManager--toastWrapperEnterDone",
      "ToastWrapper--hoverable": "Polaris-Frame-ToastManager--toastWrapperHoverable"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/components/Toast/Toast.css.js
var require_Toast_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/components/Toast/Toast.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Toast: "Polaris-Frame-Toast",
      Action: "Polaris-Frame-Toast__Action",
      error: "Polaris-Frame-Toast--error",
      CloseButton: "Polaris-Frame-Toast__CloseButton",
      LeadingIcon: "Polaris-Frame-Toast__LeadingIcon",
      toneMagic: "Polaris-Frame-Toast--toneMagic",
      WithActionOnComponent: "Polaris-Frame-Toast__WithActionOnComponent"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/components/Toast/Toast.js
var require_Toast = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/components/Toast/Toast.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), types = require_types(), Toast_module = require_Toast_css(), Icon2 = require_Icon(), Button3 = require_Button(), KeypressListener = require_KeypressListener(), InlineStack3 = require_InlineStack(), Text3 = require_Text(), DEFAULT_TOAST_DURATION = 5e3, DEFAULT_TOAST_DURATION_WITH_ACTION = 1e4;
    function Toast3({
      content,
      onDismiss,
      duration,
      error,
      action: action8,
      tone,
      onClick,
      icon,
      isHovered
    }) {
      let defaultDuration = action8 && !duration ? DEFAULT_TOAST_DURATION_WITH_ACTION : duration || DEFAULT_TOAST_DURATION, durationRemaining = React2.useRef(defaultDuration), timeoutStart = React2.useRef(null), timer = React2.useRef(null);
      React2.useEffect(() => {
        function resume() {
          timeoutStart.current = Date.now(), timer.current = setTimeout(() => {
            onDismiss();
          }, durationRemaining.current);
        }
        function pause() {
          timeoutStart.current && (durationRemaining.current -= Date.now() - timeoutStart.current), timer.current && clearTimeout(timer.current), timer.current = null;
        }
        return isHovered ? pause() : resume(), () => {
          timer.current && clearTimeout(timer.current);
        };
      }, [isHovered, onDismiss]), React2.useEffect(() => {
        action8 && duration && duration < DEFAULT_TOAST_DURATION_WITH_ACTION && console.log("Toast with action should persist for at least 10,000 milliseconds to give the merchant enough time to act on it.");
      }, [action8, duration]);
      let dismissMarkup = /* @__PURE__ */ React2.createElement("button", {
        type: "button",
        className: Toast_module.default.CloseButton,
        onClick: onDismiss
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.XSmallIcon,
        tone: "inherit"
      })), actionMarkup = action8 ? /* @__PURE__ */ React2.createElement("div", {
        className: Toast_module.default.Action
      }, /* @__PURE__ */ React2.createElement(Button3.Button, {
        variant: "monochromePlain",
        removeUnderline: !0,
        size: "slim",
        onClick: action8.onAction
      }, action8.content)) : null, leadingIconMarkup = null;
      error ? leadingIconMarkup = /* @__PURE__ */ React2.createElement("div", {
        className: Toast_module.default.LeadingIcon
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.AlertCircleIcon,
        tone: "inherit"
      })) : icon && (leadingIconMarkup = /* @__PURE__ */ React2.createElement("div", {
        className: Toast_module.default.LeadingIcon
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: icon,
        tone: "inherit"
      })));
      let className = css.classNames(Toast_module.default.Toast, error && Toast_module.default.error, tone && Toast_module.default[css.variationName("tone", tone)]);
      return !action8 && onClick ? /* @__PURE__ */ React2.createElement("button", {
        "aria-live": "assertive",
        className: css.classNames(className, Toast_module.default.WithActionOnComponent),
        type: "button",
        onClick
      }, /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
        keyCode: types.Key.Escape,
        handler: onDismiss
      }), leadingIconMarkup, /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        gap: "400",
        blockAlign: "center"
      }, /* @__PURE__ */ React2.createElement(Text3.Text, Object.assign({
        as: "span",
        variant: "bodyMd",
        fontWeight: "medium"
      }, tone === "magic" && {
        tone: "magic"
      }), content))) : /* @__PURE__ */ React2.createElement("div", {
        className,
        "aria-live": "assertive"
      }, /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
        keyCode: types.Key.Escape,
        handler: onDismiss
      }), leadingIconMarkup, /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        gap: "400",
        blockAlign: "center"
      }, /* @__PURE__ */ React2.createElement(Text3.Text, Object.assign({
        as: "span",
        variant: "bodyMd",
        fontWeight: "medium"
      }, tone === "magic" && {
        tone: "magic"
      }), content)), actionMarkup, dismissMarkup);
    }
    exports.DEFAULT_TOAST_DURATION = DEFAULT_TOAST_DURATION;
    exports.DEFAULT_TOAST_DURATION_WITH_ACTION = DEFAULT_TOAST_DURATION_WITH_ACTION;
    exports.Toast = Toast3;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/components/ToastManager/ToastManager.js
var require_ToastManager = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/components/ToastManager/ToastManager.js"(exports) {
    "use strict";
    var React2 = require_react(), reactTransitionGroup = require("react-transition-group"), css = require_css(), useDeepEffect = require_use_deep_effect(), useDeepCallback = require_use_deep_callback(), ToastManager_module = require_ToastManager_css(), Toast3 = require_Toast(), Portal = require_Portal(), EventListener = require_EventListener(), ADDITIONAL_TOAST_BASE_MOVEMENT = 10, TOAST_TRANSITION_DELAY = 30;
    function generateAdditionalVerticalMovement(index) {
      let getAmountToRemove = (idx) => (idx - 1) * idx / 2;
      return index * ADDITIONAL_TOAST_BASE_MOVEMENT - getAmountToRemove(index);
    }
    var ToastManager = /* @__PURE__ */ React2.memo(function({
      toastMessages
    }) {
      let toastNodes = [], [shouldExpand, setShouldExpand] = React2.useState(!1), isFullyExpanded = React2.useRef(!1), fullyExpandedTimeout = React2.useRef(null), firstToast = React2.useRef(null), updateToasts = useDeepCallback.useDeepCallback(() => {
        let zeroIndexTotalMessages = toastMessages.length - 1;
        toastMessages.forEach((_, index) => {
          let reversedOrder = zeroIndexTotalMessages - index, currentToast = toastNodes[index];
          if (!currentToast.current)
            return;
          let toastHeight = currentToast.current.clientHeight, scale = shouldExpand ? 1 : 0.9 ** reversedOrder, additionalVerticalMovement = generateAdditionalVerticalMovement(reversedOrder), targetInPos = shouldExpand ? toastHeight + (toastHeight - 8) * reversedOrder : toastHeight + additionalVerticalMovement;
          currentToast.current.style.setProperty("--pc-toast-manager-translate-y-in", `-${targetInPos}px`), currentToast.current.style.setProperty("--pc-toast-manager-scale-in", `${scale}`), currentToast.current.style.setProperty("--pc-toast-manager-blur-in", shouldExpand ? "0" : `${reversedOrder * 0.5}px`), currentToast.current.style.setProperty("--pc-toast-manager-transition-delay-in", `${shouldExpand ? reversedOrder * TOAST_TRANSITION_DELAY : 0}ms`), currentToast.current.style.setProperty("--pc-toast-manager-scale-out", `${reversedOrder === 0 ? 0.85 : scale ** 2}`), currentToast.current.style.setProperty("--pc-toast-manager-translate-y-out", `${-targetInPos}px`);
        });
      }, [toastMessages, toastNodes, shouldExpand]);
      useDeepEffect.useDeepEffect(() => {
        updateToasts(), toastMessages.length === 0 && setShouldExpand(!1), shouldExpand ? fullyExpandedTimeout.current = setTimeout(() => {
          isFullyExpanded.current = !0;
        }, toastMessages.length * TOAST_TRANSITION_DELAY + 400) : fullyExpandedTimeout.current && (clearTimeout(fullyExpandedTimeout.current), isFullyExpanded.current = !1);
      }, [toastMessages, shouldExpand]);
      let toastsMarkup = toastMessages.map((toast, index) => {
        let reverseOrderIndex = toastMessages.length - index - 1, toastNode = /* @__PURE__ */ React2.createRef();
        toastNodes[index] = toastNode;
        function handleMouseEnter() {
          setShouldExpand(!0);
        }
        function handleMouseEnterFirstToast() {
          isFullyExpanded.current && setShouldExpand(!1);
        }
        return /* @__PURE__ */ React2.createElement(reactTransitionGroup.CSSTransition, {
          nodeRef: toastNodes[index],
          key: toast.id,
          timeout: {
            enter: 0,
            exit: 200
          },
          classNames: toastClasses
        }, /* @__PURE__ */ React2.createElement("div", {
          ref: toastNode,
          onMouseEnter: reverseOrderIndex > 0 ? handleMouseEnter : handleMouseEnterFirstToast
        }, /* @__PURE__ */ React2.createElement("div", {
          ref: (node) => reverseOrderIndex === 0 ? firstToast.current = node : null
        }, /* @__PURE__ */ React2.createElement(Toast3.Toast, Object.assign({}, toast, {
          isHovered: shouldExpand
        })))));
      });
      return /* @__PURE__ */ React2.createElement(Portal.Portal, {
        idPrefix: "toast"
      }, /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
        event: "resize",
        handler: updateToasts
      }), /* @__PURE__ */ React2.createElement("div", {
        className: ToastManager_module.default.ToastManager,
        "aria-live": "assertive",
        onMouseEnter: function(event) {
          let target = event.target, isInFirstToast = firstToast.current?.contains(target);
          setShouldExpand(!isInFirstToast);
        },
        onMouseLeave: function() {
          setShouldExpand(!1);
        }
      }, /* @__PURE__ */ React2.createElement(reactTransitionGroup.TransitionGroup, {
        component: null
      }, toastsMarkup)));
    }), toastClasses = {
      enter: css.classNames(ToastManager_module.default.ToastWrapper, ToastManager_module.default["ToastWrapper-enter"]),
      enterDone: css.classNames(ToastManager_module.default.ToastWrapper, ToastManager_module.default["ToastWrapper-enter-done"]),
      exit: css.classNames(ToastManager_module.default.ToastWrapper, ToastManager_module.default["ToastWrapper-exit"])
    };
    exports.ToastManager = ToastManager;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/Frame.js
var require_Frame = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/Frame.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), reactTransitionGroup = require("react-transition-group"), css = require_css(), shared = require_shared(), setRootProperty = require_set_root_property(), useTheme = require_use_theme(), Frame_module = require_Frame_css(), hooks$1 = require_hooks11(), Loading = require_Loading2(), CSSAnimation = require_CSSAnimation(), ContextualSaveBar = require_ContextualSaveBar2(), ToastManager = require_ToastManager(), hooks = require_hooks2(), Text3 = require_Text(), Backdrop = require_Backdrop(), context = require_context15(), EventListener = require_EventListener(), TrapFocus = require_TrapFocus(), Icon2 = require_Icon(), APP_FRAME_MAIN = "AppFrameMain", APP_FRAME_NAV = "AppFrameNav", APP_FRAME_TOP_BAR = "AppFrameTopBar", APP_FRAME_LOADING_BAR = "AppFrameLoadingBar", FrameInner = class extends React2.PureComponent {
      constructor(...args) {
        super(...args), this.state = {
          skipFocused: !1,
          globalRibbonHeight: 0,
          loadingStack: 0,
          toastMessages: [],
          showContextualSaveBar: !1
        }, this.contextualSaveBar = null, this.globalRibbonContainer = null, this.navigationNode = /* @__PURE__ */ React2.createRef(), this.setGlobalRibbonHeight = () => {
          let {
            globalRibbonContainer
          } = this;
          globalRibbonContainer && this.setState({
            globalRibbonHeight: globalRibbonContainer.offsetHeight
          }, this.setGlobalRibbonRootProperty);
        }, this.setOffset = () => {
          let {
            offset = "0px"
          } = this.props;
          setRootProperty.setRootProperty("--pc-frame-offset", offset);
        }, this.setGlobalRibbonRootProperty = () => {
          let {
            globalRibbonHeight
          } = this.state;
          setRootProperty.setRootProperty("--pc-frame-global-ribbon-height", `${globalRibbonHeight}px`);
        }, this.showToast = (toast) => {
          this.setState(({
            toastMessages
          }) => ({
            toastMessages: toastMessages.find(({
              id
            }) => id === toast.id) != null ? toastMessages : [...toastMessages, toast]
          }));
        }, this.hideToast = ({
          id
        }) => {
          this.setState(({
            toastMessages
          }) => ({
            toastMessages: toastMessages.filter(({
              id: toastId
            }) => id !== toastId)
          }));
        }, this.setContextualSaveBar = (props) => {
          let {
            showContextualSaveBar
          } = this.state;
          this.contextualSaveBar = {
            ...props
          }, showContextualSaveBar === !0 ? this.forceUpdate() : this.setState({
            showContextualSaveBar: !0
          });
        }, this.removeContextualSaveBar = () => {
          this.contextualSaveBar = null, this.setState({
            showContextualSaveBar: !1
          });
        }, this.startLoading = () => {
          this.setState(({
            loadingStack
          }) => ({
            loadingStack: loadingStack + 1
          }));
        }, this.stopLoading = () => {
          this.setState(({
            loadingStack
          }) => ({
            loadingStack: Math.max(0, loadingStack - 1)
          }));
        }, this.handleResize = () => {
          this.props.globalRibbon && this.setGlobalRibbonHeight();
        }, this.handleFocus = () => {
          this.setState({
            skipFocused: !0
          });
        }, this.handleBlur = () => {
          this.setState({
            skipFocused: !1
          });
        }, this.handleClick = (event) => {
          let {
            skipToContentTarget
          } = this.props;
          skipToContentTarget && skipToContentTarget.current && (skipToContentTarget.current.focus(), event?.preventDefault());
        }, this.handleNavigationDismiss = () => {
          let {
            onNavigationDismiss
          } = this.props;
          onNavigationDismiss?.();
        }, this.setGlobalRibbonContainer = (node) => {
          this.globalRibbonContainer = node;
        }, this.handleNavKeydown = (event) => {
          let {
            key
          } = event, {
            mediaQuery: {
              isNavigationCollapsed
            },
            showMobileNavigation
          } = this.props;
          isNavigationCollapsed && showMobileNavigation && key === "Escape" && this.handleNavigationDismiss();
        };
      }
      componentDidMount() {
        this.handleResize(), !this.props.globalRibbon && (this.setGlobalRibbonRootProperty(), this.setOffset());
      }
      componentDidUpdate(prevProps) {
        this.props.globalRibbon !== prevProps.globalRibbon && this.setGlobalRibbonHeight(), this.setOffset();
      }
      render() {
        let {
          skipFocused,
          loadingStack,
          toastMessages,
          showContextualSaveBar
        } = this.state, {
          logo,
          children,
          navigation,
          topBar,
          globalRibbon,
          showMobileNavigation = !1,
          skipToContentTarget,
          i18n,
          sidebar,
          mediaQuery: {
            isNavigationCollapsed
          }
        } = this.props, navClassName = css.classNames(Frame_module.default.Navigation, showMobileNavigation && Frame_module.default["Navigation-visible"]), mobileNavHidden = isNavigationCollapsed && !showMobileNavigation, mobileNavShowing = isNavigationCollapsed && showMobileNavigation, tabIndex = mobileNavShowing ? 0 : -1, mobileNavAttributes = {
          ...mobileNavShowing && {
            "aria-modal": !0,
            role: "dialog"
          }
        }, navigationMarkup = navigation ? /* @__PURE__ */ React2.createElement(useTheme.UseTheme, null, (theme) => /* @__PURE__ */ React2.createElement(TrapFocus.TrapFocus, {
          trapping: mobileNavShowing
        }, /* @__PURE__ */ React2.createElement(reactTransitionGroup.CSSTransition, {
          nodeRef: this.navigationNode,
          appear: isNavigationCollapsed,
          exit: isNavigationCollapsed,
          in: showMobileNavigation,
          timeout: parseInt(theme.motion["motion-duration-300"], 10),
          classNames: navTransitionClasses
        }, /* @__PURE__ */ React2.createElement("div", Object.assign({
          key: "NavContent"
        }, mobileNavAttributes, {
          "aria-label": i18n.translate("Polaris.Frame.navigationLabel"),
          ref: this.navigationNode,
          className: navClassName,
          onKeyDown: this.handleNavKeydown,
          id: APP_FRAME_NAV,
          hidden: mobileNavHidden
        }), navigation, /* @__PURE__ */ React2.createElement("button", {
          type: "button",
          className: Frame_module.default.NavigationDismiss,
          onClick: this.handleNavigationDismiss,
          "aria-hidden": mobileNavHidden || !isNavigationCollapsed && !showMobileNavigation,
          "aria-label": i18n.translate("Polaris.Frame.Navigation.closeMobileNavigationLabel"),
          tabIndex
        }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
          source: polarisIcons.XIcon
        })))))) : null, loadingMarkup = loadingStack > 0 ? /* @__PURE__ */ React2.createElement("div", {
          className: Frame_module.default.LoadingBar,
          id: APP_FRAME_LOADING_BAR
        }, /* @__PURE__ */ React2.createElement(Loading.Loading, null)) : null, topBarMarkup = topBar ? /* @__PURE__ */ React2.createElement("div", Object.assign({
          className: Frame_module.default.TopBar
        }, shared.layer.props, shared.dataPolarisTopBar.props, {
          id: APP_FRAME_TOP_BAR
        }), topBar) : null, globalRibbonMarkup = globalRibbon ? /* @__PURE__ */ React2.createElement("div", {
          className: Frame_module.default.GlobalRibbonContainer,
          ref: this.setGlobalRibbonContainer
        }, globalRibbon) : null, skipClassName = css.classNames(Frame_module.default.Skip, skipFocused && Frame_module.default.focused), skipTarget = skipToContentTarget?.current ? skipToContentTarget.current.id : APP_FRAME_MAIN, skipMarkup = /* @__PURE__ */ React2.createElement("div", {
          className: skipClassName
        }, /* @__PURE__ */ React2.createElement("a", {
          href: `#${skipTarget}`,
          onFocus: this.handleFocus,
          onBlur: this.handleBlur,
          onClick: this.handleClick
        }, /* @__PURE__ */ React2.createElement(Text3.Text, {
          as: "span",
          variant: "bodyLg",
          fontWeight: "medium"
        }, i18n.translate("Polaris.Frame.skipToContent")))), navigationAttributes = navigation ? {
          "data-has-navigation": !0
        } : {}, frameClassName = css.classNames(Frame_module.default.Frame, navigation && Frame_module.default.hasNav, topBar && Frame_module.default.hasTopBar, sidebar && Frame_module.default.hasSidebar), contextualSaveBarMarkup = /* @__PURE__ */ React2.createElement(CSSAnimation.CSSAnimation, {
          in: showContextualSaveBar,
          className: Frame_module.default.ContextualSaveBar,
          type: "fade"
        }, /* @__PURE__ */ React2.createElement(ContextualSaveBar.ContextualSaveBar, this.contextualSaveBar)), navigationOverlayMarkup = showMobileNavigation && isNavigationCollapsed ? /* @__PURE__ */ React2.createElement(Backdrop.Backdrop, {
          belowNavigation: !0,
          onClick: this.handleNavigationDismiss,
          onTouchStart: this.handleNavigationDismiss
        }) : null, context$1 = {
          logo,
          showToast: this.showToast,
          hideToast: this.hideToast,
          toastMessages,
          startLoading: this.startLoading,
          stopLoading: this.stopLoading,
          setContextualSaveBar: this.setContextualSaveBar,
          removeContextualSaveBar: this.removeContextualSaveBar
        };
        return /* @__PURE__ */ React2.createElement(context.FrameContext.Provider, {
          value: context$1
        }, /* @__PURE__ */ React2.createElement("div", Object.assign({
          className: frameClassName
        }, shared.layer.props, navigationAttributes), skipMarkup, topBarMarkup, navigationMarkup, contextualSaveBarMarkup, loadingMarkup, navigationOverlayMarkup, /* @__PURE__ */ React2.createElement("main", {
          className: Frame_module.default.Main,
          id: APP_FRAME_MAIN,
          "data-has-global-ribbon": Boolean(globalRibbon)
        }, /* @__PURE__ */ React2.createElement("div", {
          className: Frame_module.default.Content
        }, children)), /* @__PURE__ */ React2.createElement(ToastManager.ToastManager, {
          toastMessages
        }), globalRibbonMarkup, /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
          event: "resize",
          handler: this.handleResize
        })));
      }
    }, navTransitionClasses = {
      enter: css.classNames(Frame_module.default["Navigation-enter"]),
      enterActive: css.classNames(Frame_module.default["Navigation-enterActive"]),
      enterDone: css.classNames(Frame_module.default["Navigation-enterActive"]),
      exit: css.classNames(Frame_module.default["Navigation-exit"]),
      exitActive: css.classNames(Frame_module.default["Navigation-exitActive"])
    };
    function Frame(props) {
      let i18n = hooks.useI18n(), mediaQuery = hooks$1.useMediaQuery();
      return /* @__PURE__ */ React2.createElement(FrameInner, Object.assign({}, props, {
        i18n,
        mediaQuery
      }));
    }
    exports.Frame = Frame;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/FullscreenBar/FullscreenBar.css.js
var require_FullscreenBar_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/FullscreenBar/FullscreenBar.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      FullscreenBar: "Polaris-FullscreenBar",
      BackAction: "Polaris-FullscreenBar__BackAction"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/FullscreenBar/FullscreenBar.js
var require_FullscreenBar = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/FullscreenBar/FullscreenBar.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), FullscreenBar_module = require_FullscreenBar_css(), hooks = require_hooks2(), Text3 = require_Text(), Icon2 = require_Icon();
    function FullscreenBar({
      onAction,
      children
    }) {
      let i18n = hooks.useI18n(), backButtonMarkup = /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "bodyLg"
      }, i18n.translate("Polaris.FullscreenBar.back"));
      return /* @__PURE__ */ React2.createElement("div", {
        className: FullscreenBar_module.default.FullscreenBar
      }, /* @__PURE__ */ React2.createElement("button", {
        className: FullscreenBar_module.default.BackAction,
        onClick: onAction,
        "aria-label": i18n.translate("Polaris.FullscreenBar.accessibilityLabel")
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.ExitIcon
      }), backButtonMarkup), children);
    }
    exports.FullscreenBar = FullscreenBar;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Grid/Grid.css.js
var require_Grid_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Grid/Grid.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Grid: "Polaris-Grid"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Grid/components/Cell/Cell.css.js
var require_Cell_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Grid/components/Cell/Cell.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Cell: "Polaris-Grid-Cell",
      "Cell-1-column-xs": "Polaris-Grid-Cell--cell_1ColumnXs",
      "Cell-2-column-xs": "Polaris-Grid-Cell--cell_2ColumnXs",
      "Cell-3-column-xs": "Polaris-Grid-Cell--cell_3ColumnXs",
      "Cell-4-column-xs": "Polaris-Grid-Cell--cell_4ColumnXs",
      "Cell-5-column-xs": "Polaris-Grid-Cell--cell_5ColumnXs",
      "Cell-6-column-xs": "Polaris-Grid-Cell--cell_6ColumnXs",
      "Cell-1-column-sm": "Polaris-Grid-Cell--cell_1ColumnSm",
      "Cell-2-column-sm": "Polaris-Grid-Cell--cell_2ColumnSm",
      "Cell-3-column-sm": "Polaris-Grid-Cell--cell_3ColumnSm",
      "Cell-4-column-sm": "Polaris-Grid-Cell--cell_4ColumnSm",
      "Cell-5-column-sm": "Polaris-Grid-Cell--cell_5ColumnSm",
      "Cell-6-column-sm": "Polaris-Grid-Cell--cell_6ColumnSm",
      "Cell-1-column-md": "Polaris-Grid-Cell--cell_1ColumnMd",
      "Cell-2-column-md": "Polaris-Grid-Cell--cell_2ColumnMd",
      "Cell-3-column-md": "Polaris-Grid-Cell--cell_3ColumnMd",
      "Cell-4-column-md": "Polaris-Grid-Cell--cell_4ColumnMd",
      "Cell-5-column-md": "Polaris-Grid-Cell--cell_5ColumnMd",
      "Cell-6-column-md": "Polaris-Grid-Cell--cell_6ColumnMd",
      "Cell-1-column-lg": "Polaris-Grid-Cell--cell_1ColumnLg",
      "Cell-2-column-lg": "Polaris-Grid-Cell--cell_2ColumnLg",
      "Cell-3-column-lg": "Polaris-Grid-Cell--cell_3ColumnLg",
      "Cell-4-column-lg": "Polaris-Grid-Cell--cell_4ColumnLg",
      "Cell-5-column-lg": "Polaris-Grid-Cell--cell_5ColumnLg",
      "Cell-6-column-lg": "Polaris-Grid-Cell--cell_6ColumnLg",
      "Cell-7-column-lg": "Polaris-Grid-Cell--cell_7ColumnLg",
      "Cell-8-column-lg": "Polaris-Grid-Cell--cell_8ColumnLg",
      "Cell-9-column-lg": "Polaris-Grid-Cell--cell_9ColumnLg",
      "Cell-10-column-lg": "Polaris-Grid-Cell--cell_10ColumnLg",
      "Cell-11-column-lg": "Polaris-Grid-Cell--cell_11ColumnLg",
      "Cell-12-column-lg": "Polaris-Grid-Cell--cell_12ColumnLg",
      "Cell-1-column-xl": "Polaris-Grid-Cell--cell_1ColumnXl",
      "Cell-2-column-xl": "Polaris-Grid-Cell--cell_2ColumnXl",
      "Cell-3-column-xl": "Polaris-Grid-Cell--cell_3ColumnXl",
      "Cell-4-column-xl": "Polaris-Grid-Cell--cell_4ColumnXl",
      "Cell-5-column-xl": "Polaris-Grid-Cell--cell_5ColumnXl",
      "Cell-6-column-xl": "Polaris-Grid-Cell--cell_6ColumnXl",
      "Cell-7-column-xl": "Polaris-Grid-Cell--cell_7ColumnXl",
      "Cell-8-column-xl": "Polaris-Grid-Cell--cell_8ColumnXl",
      "Cell-9-column-xl": "Polaris-Grid-Cell--cell_9ColumnXl",
      "Cell-10-column-xl": "Polaris-Grid-Cell--cell_10ColumnXl",
      "Cell-11-column-xl": "Polaris-Grid-Cell--cell_11ColumnXl",
      "Cell-12-column-xl": "Polaris-Grid-Cell--cell_12ColumnXl"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Grid/components/Cell/Cell.js
var require_Cell2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Grid/components/Cell/Cell.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Cell_module = require_Cell_css();
    function Cell({
      area: gridArea,
      column,
      columnSpan,
      row,
      children
    }) {
      let className = css.classNames(Cell_module.default.Cell, columnSpan?.xs && Cell_module.default[`Cell-${columnSpan.xs}-column-xs`], columnSpan?.sm && Cell_module.default[`Cell-${columnSpan.sm}-column-sm`], columnSpan?.md && Cell_module.default[`Cell-${columnSpan.md}-column-md`], columnSpan?.lg && Cell_module.default[`Cell-${columnSpan.lg}-column-lg`], columnSpan?.xl && Cell_module.default[`Cell-${columnSpan.xl}-column-xl`]), style = {
        gridArea,
        "--pc-column-xs": column?.xs,
        "--pc-column-sm": column?.sm,
        "--pc-column-md": column?.md,
        "--pc-column-lg": column?.lg,
        "--pc-column-xl": column?.xl,
        "--pc-row-xs": row?.xs,
        "--pc-row-sm": row?.sm,
        "--pc-row-md": row?.md,
        "--pc-row-lg": row?.lg,
        "--pc-row-xl": row?.xl
      };
      return /* @__PURE__ */ React2.createElement("div", {
        className,
        style
      }, children);
    }
    exports.Cell = Cell;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Grid/Grid.js
var require_Grid = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Grid/Grid.js"(exports) {
    "use strict";
    var React2 = require_react(), Grid_module = require_Grid_css(), Cell = require_Cell2(), Grid = function({
      gap,
      areas,
      children,
      columns
    }) {
      let style = {
        "--pc-grid-gap-xs": gap?.xs,
        "--pc-grid-gap-sm": gap?.sm,
        "--pc-grid-gap-md": gap?.md,
        "--pc-grid-gap-lg": gap?.lg,
        "--pc-grid-gap-xl": gap?.xl,
        "--pc-grid-columns-xs": columns?.xs,
        "--pc-grid-columns-sm": columns?.sm,
        "--pc-grid-columns-md": columns?.md,
        "--pc-grid-columns-lg": columns?.lg,
        "--pc-grid-columns-xl": columns?.xl,
        "--pc-grid-areas-xs": formatAreas(areas?.xs),
        "--pc-grid-areas-sm": formatAreas(areas?.sm),
        "--pc-grid-areas-md": formatAreas(areas?.md),
        "--pc-grid-areas-lg": formatAreas(areas?.lg),
        "--pc-grid-areas-xl": formatAreas(areas?.xl)
      };
      return /* @__PURE__ */ React2.createElement("div", {
        className: Grid_module.default.Grid,
        style
      }, children);
    };
    function formatAreas(areas) {
      if (areas)
        return `'${areas?.join("' '")}'`;
    }
    Grid.Cell = Cell.Cell;
    exports.Grid = Grid;
    exports.formatAreas = formatAreas;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/types.js
var require_types3 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/types.js"(exports) {
    "use strict";
    exports.IndexFiltersMode = void 0;
    (function(IndexFiltersMode) {
      IndexFiltersMode.Default = "DEFAULT", IndexFiltersMode.Filtering = "FILTERING", IndexFiltersMode.EditingColumns = "EDITING_COLUMNS";
    })(exports.IndexFiltersMode || (exports.IndexFiltersMode = {}));
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/IndexFilters.css.js
var require_IndexFilters_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/IndexFilters.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      IndexFiltersWrapper: "Polaris-IndexFilters__IndexFiltersWrapper",
      IndexFilters: "Polaris-IndexFilters",
      IndexFiltersSticky: "Polaris-IndexFilters__IndexFiltersSticky",
      IndexFiltersStickyFlush: "Polaris-IndexFilters__IndexFiltersStickyFlush",
      TabsWrapper: "Polaris-IndexFilters__TabsWrapper",
      SmallScreenTabsWrapper: "Polaris-IndexFilters__SmallScreenTabsWrapper",
      TabsWrapperLoading: "Polaris-IndexFilters__TabsWrapperLoading",
      DesktopLoading: "Polaris-IndexFilters__DesktopLoading",
      TabsLoading: "Polaris-IndexFilters__TabsLoading",
      ActionWrap: "Polaris-IndexFilters__ActionWrap",
      Spinner: "Polaris-IndexFilters__Spinner",
      ButtonWrap: "Polaris-IndexFilters__ButtonWrap"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/hooks/useIsSticky/useIsSticky.js
var require_useIsSticky = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/hooks/useIsSticky/useIsSticky.js"(exports) {
    "use strict";
    var React2 = require_react(), debounce = require_debounce(), DEBOUNCE_PERIOD = 250;
    function useIsSticky(mode2, disabled, isFlushWhenSticky) {
      let hasIOSupport = typeof window < "u" && Boolean(window.IntersectionObserver), options = {
        root: null,
        rootMargin: `${isFlushWhenSticky ? "0px" : "-56px"} 0px 0px 0px`,
        threshold: 0
      }, [indexFilteringHeight, setIndexFiltersHeight] = React2.useState(0), [isSticky, setIsSticky] = React2.useState(!1), measurerRef = React2.useRef(null), intersectionRef = React2.useRef(null), handleIntersect = (entries) => {
        entries.forEach((entry2) => {
          setIsSticky(!entry2.isIntersecting);
        });
      }, observerRef = React2.useRef(hasIOSupport ? new IntersectionObserver(handleIntersect, options) : null);
      return React2.useEffect(() => {
        function computeDimensions() {
          let node = measurerRef.current;
          if (!node)
            return {
              height: 0
            };
          let height = node.getBoundingClientRect().height;
          setIndexFiltersHeight(height);
        }
        computeDimensions();
        let debouncedComputeDimensions = debounce.debounce(computeDimensions, DEBOUNCE_PERIOD, {
          trailing: !0
        });
        return window.addEventListener("resize", debouncedComputeDimensions), () => window.removeEventListener("resize", debouncedComputeDimensions);
      }, [measurerRef, mode2]), React2.useEffect(() => {
        let observer = observerRef.current;
        if (!observer)
          return;
        let node = intersectionRef.current;
        return node && observer.observe(node), () => {
          observer?.disconnect();
        };
      }, [intersectionRef]), {
        intersectionRef,
        measurerRef,
        isSticky: isSticky && !disabled,
        indexFilteringHeight
      };
    }
    exports.useIsSticky = useIsSticky;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-is-touch-device.js
var require_use_is_touch_device = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-is-touch-device.js"(exports) {
    "use strict";
    var React2 = require_react(), useEventListener = require_use_event_listener();
    function useIsTouchDevice() {
      let [isTouchDevice, setIsTouchDevice] = React2.useState(!1), handleTouchStart = React2.useCallback(() => setIsTouchDevice(!0), []);
      return useEventListener.useEventListener("touchstart", handleTouchStart), isTouchDevice;
    }
    exports.useIsTouchDevice = useIsTouchDevice;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/UpdateButtons/UpdateButtons.js
var require_UpdateButtons = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/UpdateButtons/UpdateButtons.js"(exports) {
    "use strict";
    var React2 = require_react(), focus = require_focus(), useIsTouchDevice = require_use_is_touch_device(), hooks = require_hooks2(), Button3 = require_Button(), InlineStack3 = require_InlineStack(), Modal3 = require_Modal(), Form = require_Form(), FormLayout = require_FormLayout(), TextField2 = require_TextField(), MAX_VIEW_NAME_LENGTH = 40;
    function UpdateButtons({
      primaryAction,
      cancelAction,
      viewNames,
      disabled
    }) {
      let i18n = hooks.useI18n(), [savedViewName, setSavedViewName] = React2.useState(""), [savedViewModalOpen, setSavedViewModalOpen] = React2.useState(!1), container = React2.useRef(null), isTouchDevice = useIsTouchDevice.useIsTouchDevice();
      React2.useEffect(() => {
        !container.current || isTouchDevice || savedViewModalOpen && focus.focusFirstFocusableNode(container.current);
      }, [savedViewModalOpen, isTouchDevice]);
      async function handleClickSaveButton() {
        primaryAction?.type === "save-as" ? handleOpenModal() : await primaryAction?.onAction("");
      }
      function handleOpenModal() {
        setSavedViewModalOpen(!0);
      }
      function handleCloseModal() {
        setSavedViewModalOpen(!1);
      }
      function handleChange(value) {
        setSavedViewName(value);
      }
      async function handlePrimaryAction() {
        isPrimaryActionDisabled || (await primaryAction?.onAction(savedViewName), handleCloseModal());
      }
      let buttonText = React2.useMemo(() => {
        switch (primaryAction?.type) {
          case "save":
            return i18n.translate("Polaris.IndexFilters.UpdateButtons.save");
          case "save-as":
          default:
            return i18n.translate("Polaris.IndexFilters.UpdateButtons.saveAs");
        }
      }, [primaryAction?.type, i18n]), saveButton = /* @__PURE__ */ React2.createElement(Button3.Button, {
        size: "micro",
        onClick: handleClickSaveButton,
        disabled: primaryAction?.disabled || disabled
      }, buttonText), hasSameNameError = viewNames.some((name) => name.trim().toLowerCase() === savedViewName.trim().toLowerCase()), isPrimaryActionDisabled = hasSameNameError || !savedViewName || primaryAction?.loading || savedViewName.length > MAX_VIEW_NAME_LENGTH, cancelButtonMarkup = cancelAction ? /* @__PURE__ */ React2.createElement(Button3.Button, {
        variant: "tertiary",
        size: "micro",
        onClick: cancelAction.onAction,
        disabled
      }, i18n.translate("Polaris.IndexFilters.UpdateButtons.cancel")) : null;
      return primaryAction ? /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        align: "start",
        blockAlign: "center",
        gap: "100"
      }, cancelButtonMarkup, primaryAction.type === "save-as" ? /* @__PURE__ */ React2.createElement(Modal3.Modal, {
        activator: /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, null, saveButton),
        open: savedViewModalOpen,
        title: i18n.translate("Polaris.IndexFilters.UpdateButtons.modal.title"),
        onClose: handleCloseModal,
        primaryAction: {
          onAction: handlePrimaryAction,
          content: i18n.translate("Polaris.IndexFilters.UpdateButtons.modal.save"),
          disabled: isPrimaryActionDisabled
        },
        secondaryActions: [{
          onAction: handleCloseModal,
          content: i18n.translate("Polaris.IndexFilters.UpdateButtons.modal.cancel")
        }]
      }, /* @__PURE__ */ React2.createElement(Modal3.Modal.Section, null, /* @__PURE__ */ React2.createElement(Form.Form, {
        onSubmit: handlePrimaryAction
      }, /* @__PURE__ */ React2.createElement(FormLayout.FormLayout, null, /* @__PURE__ */ React2.createElement("div", {
        ref: container
      }, /* @__PURE__ */ React2.createElement(TextField2.TextField, {
        label: i18n.translate("Polaris.IndexFilters.UpdateButtons.modal.label"),
        value: savedViewName,
        onChange: handleChange,
        autoComplete: "off",
        maxLength: MAX_VIEW_NAME_LENGTH,
        showCharacterCount: !0,
        error: hasSameNameError ? i18n.translate("Polaris.IndexFilters.UpdateButtons.modal.sameName", {
          name: savedViewName
        }) : void 0
      })))))) : saveButton) : cancelButtonMarkup;
    }
    exports.UpdateButtons = UpdateButtons;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/SortButton/components/DirectionButton/DirectionButton.css.js
var require_DirectionButton_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/SortButton/components/DirectionButton/DirectionButton.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      DirectionButton: "Polaris-SortButton-DirectionButton",
      "DirectionButton-active": "Polaris-SortButton-DirectionButton__DirectionButton--active"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/SortButton/components/DirectionButton/DirectionButton.js
var require_DirectionButton = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/SortButton/components/DirectionButton/DirectionButton.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), DirectionButton_module = require_DirectionButton_css(), UnstyledButton = require_UnstyledButton(), Icon2 = require_Icon(), Text3 = require_Text();
    function DirectionButton({
      onClick,
      active,
      children,
      direction,
      value
    }) {
      let classes = css.classNames(DirectionButton_module.default.DirectionButton, active && DirectionButton_module.default["DirectionButton-active"]);
      function handleClick() {
        onClick([value]);
      }
      return /* @__PURE__ */ React2.createElement(UnstyledButton.UnstyledButton, {
        className: classes,
        onClick: handleClick
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: direction === "asc" ? polarisIcons.ArrowUpIcon : polarisIcons.ArrowDownIcon,
        tone: "base"
      }), /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "bodySm",
        fontWeight: "medium"
      }, children));
    }
    exports.DirectionButton = DirectionButton;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/SortButton/SortButton.js
var require_SortButton = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/SortButton/SortButton.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), ChoiceList = require_ChoiceList(), DirectionButton = require_DirectionButton(), hooks = require_hooks2(), Tooltip = require_Tooltip(), Button3 = require_Button(), Popover = require_Popover(), Box3 = require_Box();
    exports.SortButtonDirection = void 0;
    (function(SortButtonDirection) {
      SortButtonDirection.Asc = "asc", SortButtonDirection.Desc = "desc";
    })(exports.SortButtonDirection || (exports.SortButtonDirection = {}));
    function SortButton({
      choices,
      selected,
      onChange,
      disabled,
      onChangeKey,
      onChangeDirection
    }) {
      let i18n = hooks.useI18n(), [active, setActive] = React2.useState(!1), [selectedValueKey, selectedDirection] = selected[0].split(" ");
      function handleClick() {
        setActive((pastActive) => !pastActive);
      }
      function handleClose() {
        setActive(!1);
      }
      function handleChangeChoiceList(sel) {
        if (onChangeKey) {
          let [key] = sel[0].split(" ");
          onChangeKey(key);
        } else
          onChange(sel);
      }
      function handleChangeDirection(sel) {
        if (onChangeDirection) {
          let [, direction] = sel[0].split(" ");
          onChangeDirection(direction);
        } else
          onChange(sel);
      }
      let choiceListChoices = React2.useMemo(() => choices.reduce((acc, curr) => {
        let alreadyExists = acc.some((option) => option.label === curr.label), [, currentValueDirection] = curr.value.split(" "), isSameDirection = currentValueDirection === selectedDirection;
        return alreadyExists ? isSameDirection ? acc.map((option) => option.label === curr.label ? curr : option) : acc : [...acc, curr];
      }, []), [choices, selectedDirection]), selectedChoices = choices.filter((choice) => {
        let [currentKey] = choice.value.split(" ");
        return currentKey === selectedValueKey;
      }), sortButton = /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, {
        content: i18n.translate("Polaris.IndexFilters.SortButton.tooltip"),
        preferredPosition: "above",
        hoverDelay: 400
      }, /* @__PURE__ */ React2.createElement(Button3.Button, {
        size: "slim",
        icon: polarisIcons.SortIcon,
        onClick: handleClick,
        disabled,
        accessibilityLabel: i18n.translate("Polaris.IndexFilters.SortButton.ariaLabel")
      }));
      return /* @__PURE__ */ React2.createElement(Popover.Popover, {
        active: active && !disabled,
        activator: sortButton,
        autofocusTarget: "first-node",
        onClose: handleClose,
        preferredAlignment: "right",
        fluidContent: !0
      }, /* @__PURE__ */ React2.createElement(Box3.Box, {
        minWidth: "148px",
        paddingInlineStart: "300",
        paddingInlineEnd: "300",
        paddingBlockStart: "200",
        paddingBlockEnd: "200",
        borderBlockEndWidth: "025",
        borderColor: "border-secondary"
      }, /* @__PURE__ */ React2.createElement(ChoiceList.ChoiceList, {
        title: i18n.translate("Polaris.IndexFilters.SortButton.title"),
        choices: choiceListChoices,
        selected,
        onChange: handleChangeChoiceList
      })), /* @__PURE__ */ React2.createElement(Box3.Box, {
        paddingInlineStart: "150",
        paddingInlineEnd: "150",
        paddingBlockStart: "200",
        paddingBlockEnd: "200"
      }, /* @__PURE__ */ React2.createElement(DirectionButton.DirectionButton, {
        direction: "asc",
        active: selectedDirection === exports.SortButtonDirection.Asc,
        onClick: handleChangeDirection,
        value: selectedChoices?.[0]?.value
      }, selectedChoices?.[0]?.directionLabel), /* @__PURE__ */ React2.createElement(DirectionButton.DirectionButton, {
        direction: "desc",
        active: selectedDirection === exports.SortButtonDirection.Desc,
        onClick: handleChangeDirection,
        value: selectedChoices?.[1]?.value
      }, selectedChoices?.[1]?.directionLabel)));
    }
    exports.SortButton = SortButton;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/Container/Container.css.js
var require_Container_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/Container/Container.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Container: "Polaris-IndexFilters-Container"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/Container/Container.js
var require_Container = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/Container/Container.js"(exports) {
    "use strict";
    var React2 = require_react(), Container_module = require_Container_css(), Container = ({
      children
    }) => /* @__PURE__ */ React2.createElement("div", {
      className: Container_module.default.Container
    }, children);
    exports.Container = Container;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-previous.js
var require_use_previous = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-previous.js"(exports) {
    "use strict";
    var React2 = require_react();
    function usePrevious(value) {
      let ref = React2.useRef();
      return React2.useEffect(() => {
        ref.current = value;
      }, [value]), ref.current;
    }
    exports.usePrevious = usePrevious;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tabs/utilities.js
var require_utilities9 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tabs/utilities.js"(exports) {
    "use strict";
    function getVisibleAndHiddenTabIndices(tabs, selected, disclosureWidth, tabWidths, containerWidth) {
      let sumTabWidths = tabWidths.reduce((sum, width) => sum + width, 0), arrayOfTabIndices = tabs.map((_, index) => index), visibleTabs = [], hiddenTabs = [];
      if (containerWidth > sumTabWidths)
        visibleTabs.push(...arrayOfTabIndices);
      else {
        visibleTabs.push(selected);
        let tabListWidth = tabWidths[selected];
        arrayOfTabIndices.forEach((currentTabIndex) => {
          if (currentTabIndex !== selected) {
            let currentTabWidth = tabWidths[currentTabIndex];
            if (tabListWidth + currentTabWidth >= containerWidth - disclosureWidth) {
              hiddenTabs.push(currentTabIndex);
              return;
            }
            visibleTabs.push(currentTabIndex), tabListWidth += currentTabWidth;
          }
        });
      }
      return {
        visibleTabs,
        hiddenTabs
      };
    }
    exports.getVisibleAndHiddenTabIndices = getVisibleAndHiddenTabIndices;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tabs/Tabs.css.js
var require_Tabs_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tabs/Tabs.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Outer: "Polaris-Tabs__Outer",
      Wrapper: "Polaris-Tabs__Wrapper",
      WrapperWithNewButton: "Polaris-Tabs__WrapperWithNewButton",
      ButtonWrapper: "Polaris-Tabs__ButtonWrapper",
      Tabs: "Polaris-Tabs",
      Tab: "Polaris-Tabs__Tab",
      "Tab-active": "Polaris-Tabs__Tab--active",
      "Tab-hasActions": "Polaris-Tabs__Tab--hasActions",
      "Tab-iconOnly": "Polaris-Tabs__Tab--iconOnly",
      fillSpace: "Polaris-Tabs--fillSpace",
      TabContainer: "Polaris-Tabs__TabContainer",
      fitted: "Polaris-Tabs--fitted",
      titleWithIcon: "Polaris-Tabs--titleWithIcon",
      List: "Polaris-Tabs__List",
      Item: "Polaris-Tabs__Item",
      DisclosureTab: "Polaris-Tabs__DisclosureTab",
      "DisclosureTab-visible": "Polaris-Tabs__DisclosureTab--visible",
      DisclosureActivator: "Polaris-Tabs__DisclosureActivator",
      TabsMeasurer: "Polaris-Tabs__TabsMeasurer",
      NewTab: "Polaris-Tabs__NewTab",
      ActionListWrap: "Polaris-Tabs__ActionListWrap",
      Panel: "Polaris-Tabs__Panel",
      "Panel-hidden": "Polaris-Tabs__Panel--hidden"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tabs/components/Tab/components/DuplicateModal/DuplicateModal.js
var require_DuplicateModal = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tabs/components/Tab/components/DuplicateModal/DuplicateModal.js"(exports) {
    "use strict";
    var React2 = require_react(), focus = require_focus(), hooks = require_hooks2(), Modal3 = require_Modal(), Form = require_Form(), FormLayout = require_FormLayout(), TextField2 = require_TextField(), MAX_VIEW_NAME_LENGTH = 40;
    function DuplicateModal({
      open,
      isModalLoading,
      name,
      onClose,
      onClickPrimaryAction,
      onClickSecondaryAction,
      helpText,
      viewNames
    }) {
      let i18n = hooks.useI18n(), [value, setValue] = React2.useState(name), container = React2.useRef(null), hasSameNameError = viewNames?.some((viewName) => viewName.trim().toLowerCase() === value.trim().toLowerCase()), isPrimaryActionDisabled = isModalLoading || hasSameNameError || !value || value.length > MAX_VIEW_NAME_LENGTH;
      React2.useEffect(() => {
        container.current && open && focus.focusFirstFocusableNode(container.current);
      }, [open]), React2.useEffect(() => {
        open && setValue(name.slice(0, MAX_VIEW_NAME_LENGTH));
      }, [name, open]);
      let handleChange = React2.useCallback((newValue) => {
        setValue(newValue);
      }, []);
      async function handlePrimaryAction() {
        isPrimaryActionDisabled || (await onClickPrimaryAction(value), setValue(""), onClose());
      }
      function handleSecondaryAction() {
        onClickSecondaryAction?.(), setValue(name), onClose();
      }
      return /* @__PURE__ */ React2.createElement(Modal3.Modal, {
        open,
        onClose,
        title: i18n.translate("Polaris.Tabs.DuplicateModal.title"),
        primaryAction: {
          content: i18n.translate("Polaris.Tabs.DuplicateModal.create"),
          onAction: handlePrimaryAction,
          disabled: isPrimaryActionDisabled
        },
        secondaryActions: [{
          content: i18n.translate("Polaris.Tabs.DuplicateModal.cancel"),
          onAction: handleSecondaryAction
        }],
        instant: !0
      }, /* @__PURE__ */ React2.createElement(Modal3.Modal.Section, null, /* @__PURE__ */ React2.createElement(Form.Form, {
        onSubmit: handlePrimaryAction
      }, /* @__PURE__ */ React2.createElement(FormLayout.FormLayout, null, /* @__PURE__ */ React2.createElement("div", {
        ref: container
      }, /* @__PURE__ */ React2.createElement(TextField2.TextField, {
        label: i18n.translate("Polaris.Tabs.DuplicateModal.label"),
        value,
        onChange: handleChange,
        autoComplete: "off",
        helpText,
        maxLength: MAX_VIEW_NAME_LENGTH,
        showCharacterCount: !0,
        error: hasSameNameError ? i18n.translate("Polaris.Tabs.DuplicateModal.errors.sameName", {
          name: value
        }) : void 0
      }))))));
    }
    exports.DuplicateModal = DuplicateModal;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tabs/components/Tab/components/RenameModal/RenameModal.js
var require_RenameModal = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tabs/components/Tab/components/RenameModal/RenameModal.js"(exports) {
    "use strict";
    var React2 = require_react(), focus = require_focus(), Form = require_Form(), FormLayout = require_FormLayout(), hooks = require_hooks2(), Modal3 = require_Modal(), TextField2 = require_TextField();
    function RenameModal({
      open,
      isModalLoading,
      name,
      onClose,
      onClickPrimaryAction,
      onClickSecondaryAction,
      helpText,
      viewNames
    }) {
      let i18n = hooks.useI18n(), [value, setValue] = React2.useState(name), container = React2.useRef(null), hasSameNameError = viewNames?.filter((viewName) => viewName !== name).some((viewName) => viewName.trim().toLowerCase() === value.trim().toLowerCase()), isPrimaryActionDisabled = isModalLoading || hasSameNameError || value === name || !value;
      React2.useEffect(() => {
        container.current && open && focus.focusFirstFocusableNode(container.current);
      }, [open]), React2.useEffect(() => {
        open && setValue(name);
      }, [name, open]);
      let handleChange = React2.useCallback((newValue) => {
        setValue(newValue);
      }, []);
      async function handlePrimaryAction() {
        isPrimaryActionDisabled || (await onClickPrimaryAction(value), setValue(""), onClose());
      }
      function handleSecondaryAction() {
        onClickSecondaryAction?.(), setValue(name), onClose();
      }
      return /* @__PURE__ */ React2.createElement(Modal3.Modal, {
        open,
        onClose,
        title: i18n.translate("Polaris.Tabs.RenameModal.title"),
        primaryAction: {
          content: i18n.translate("Polaris.Tabs.RenameModal.create"),
          onAction: handlePrimaryAction,
          disabled: isPrimaryActionDisabled
        },
        secondaryActions: [{
          content: i18n.translate("Polaris.Tabs.RenameModal.cancel"),
          onAction: handleSecondaryAction
        }],
        instant: !0
      }, /* @__PURE__ */ React2.createElement(Modal3.Modal.Section, null, /* @__PURE__ */ React2.createElement(Form.Form, {
        onSubmit: handlePrimaryAction
      }, /* @__PURE__ */ React2.createElement(FormLayout.FormLayout, null, /* @__PURE__ */ React2.createElement("div", {
        ref: container
      }, /* @__PURE__ */ React2.createElement(TextField2.TextField, {
        label: i18n.translate("Polaris.Tabs.RenameModal.label"),
        value,
        onChange: handleChange,
        autoComplete: "off",
        helpText,
        maxLength: 40,
        showCharacterCount: !0,
        error: hasSameNameError ? i18n.translate("Polaris.Tabs.RenameModal.errors.sameName", {
          name: value
        }) : void 0
      }))))));
    }
    exports.RenameModal = RenameModal;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tabs/components/Tab/Tab.js
var require_Tab = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tabs/components/Tab/Tab.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), focus = require_focus(), Tabs_module = require_Tabs_css(), DuplicateModal = require_DuplicateModal(), RenameModal = require_RenameModal(), hooks = require_hooks2(), Icon2 = require_Icon(), Modal3 = require_Modal(), Popover = require_Popover(), ActionList = require_ActionList(), InlineStack3 = require_InlineStack(), Text3 = require_Text(), UnstyledLink = require_UnstyledLink(), UnstyledButton = require_UnstyledButton(), Badge3 = require_Badge(), Tab = /* @__PURE__ */ React2.forwardRef(({
      content,
      accessibilityLabel,
      badge,
      id,
      panelID,
      url,
      onAction,
      actions,
      disabled,
      isModalLoading,
      icon,
      siblingTabHasFocus,
      measuring,
      focused,
      selected,
      onToggleModal,
      onTogglePopover,
      viewNames,
      tabIndexOverride,
      onFocus
    }, ref) => {
      let i18n = hooks.useI18n(), [popoverActive, setPopoverActive] = React2.useState(!1), [activeModalType, setActiveModalType] = React2.useState(null), wasSelected = React2.useRef(selected), panelFocused = React2.useRef(!1), node = React2.useRef(null);
      React2.useEffect(() => {
        onTogglePopover(popoverActive);
      }, [popoverActive, onTogglePopover]), React2.useEffect(() => {
        onToggleModal(Boolean(activeModalType));
      }, [activeModalType, onToggleModal]), React2.useEffect(() => () => {
        onToggleModal(!1), onTogglePopover(!1);
      }, [onToggleModal, onTogglePopover]), React2.useEffect(() => {
        if (measuring)
          return;
        (focused || document.activeElement && document.activeElement.id === id) && selected && panelID != null && !panelFocused.current && (focusPanelID(panelID), panelFocused.current = !0), selected && !wasSelected.current && panelID != null ? focusPanelID(panelID) : focused && node.current != null && activeModalType == null && !disabled && focus.focusFirstFocusableNode(node.current), wasSelected.current = selected;
      }, [focused, id, content, measuring, panelID, selected, activeModalType, disabled]);
      let tabIndex;
      selected && !siblingTabHasFocus && !measuring || focused && !measuring ? tabIndex = 0 : tabIndex = -1, tabIndexOverride != null && (tabIndex = tabIndexOverride);
      let renameAction = actions?.find((action8) => action8.type === "rename"), duplicateAction = actions?.find((action8) => action8.type === "duplicate"), deleteAction = actions?.find((action8) => action8.type === "delete"), togglePopoverActive = React2.useCallback(() => {
        actions?.length && setPopoverActive((popoverActive2) => !popoverActive2);
      }, [actions]), handleClick = React2.useCallback(() => {
        disabled || (selected ? togglePopoverActive() : onAction?.());
      }, [selected, onAction, togglePopoverActive, disabled]), handleModalOpen = (type) => {
        setActiveModalType(type);
      }, handleModalClose = () => {
        setActiveModalType(null);
      }, handleSaveRenameModal = React2.useCallback(async (value) => {
        await renameAction?.onPrimaryAction?.(value), setTimeout(() => {
          node.current && focus.focusFirstFocusableNode(node.current);
        }, 250);
      }, [renameAction]), handleConfirmDeleteView = React2.useCallback(async () => {
        await deleteAction?.onPrimaryAction?.(content), handleModalClose();
      }, [deleteAction, content]), handleSaveDuplicateModal = React2.useCallback(async (duplicateName) => {
        await duplicateAction?.onPrimaryAction?.(duplicateName);
      }, [duplicateAction]), actionContent = {
        rename: {
          icon: polarisIcons.InfoIcon,
          content: i18n.translate("Polaris.Tabs.Tab.rename")
        },
        duplicate: {
          icon: polarisIcons.DuplicateIcon,
          content: i18n.translate("Polaris.Tabs.Tab.duplicate")
        },
        edit: {
          icon: polarisIcons.EditIcon,
          content: i18n.translate("Polaris.Tabs.Tab.edit")
        },
        "edit-columns": {
          icon: polarisIcons.LayoutColumns3Icon,
          content: i18n.translate("Polaris.Tabs.Tab.editColumns")
        },
        delete: {
          icon: polarisIcons.DeleteIcon,
          content: i18n.translate("Polaris.Tabs.Tab.delete"),
          destructive: !0
        }
      }, formattedActions = actions?.map(({
        type,
        onAction: onAction2,
        onPrimaryAction,
        ...additionalOptions
      }) => {
        let isModalActivator = !type.includes("edit");
        return {
          ...actionContent[type],
          ...additionalOptions,
          onAction: () => {
            onAction2?.(content), togglePopoverActive(), isModalActivator && handleModalOpen(type);
          }
        };
      }), handleKeyDown = React2.useCallback((event) => {
        event.key === " " && (event.preventDefault(), handleClick());
      }, [handleClick]), tabContainerClassNames = css.classNames(Tabs_module.default.TabContainer, selected && Tabs_module.default.Underline), urlIfNotDisabledOrSelected = disabled || selected ? void 0 : url, BaseComponent = urlIfNotDisabledOrSelected ? UnstyledLink.UnstyledLink : UnstyledButton.UnstyledButton, tabClassName = css.classNames(Tabs_module.default.Tab, icon && Tabs_module.default["Tab-iconOnly"], popoverActive && Tabs_module.default["Tab-popoverActive"], selected && Tabs_module.default["Tab-active"], selected && actions?.length && Tabs_module.default["Tab-hasActions"]), badgeMarkup = badge ? /* @__PURE__ */ React2.createElement(Badge3.Badge, {
        tone: selected ? void 0 : "new"
      }, badge) : null, disclosureMarkup = selected && actions?.length ? /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Tabs_module.default.IconWrap)
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.ChevronDownIcon
      })) : null, activator = /* @__PURE__ */ React2.createElement(BaseComponent, {
        id,
        className: tabClassName,
        tabIndex,
        "aria-selected": selected,
        "aria-controls": panelID,
        "aria-label": accessibilityLabel,
        role: tabIndexOverride == null ? "tab" : void 0,
        disabled,
        url: urlIfNotDisabledOrSelected,
        onFocus,
        onMouseUp: focus.handleMouseUpByBlurring,
        onClick: handleClick,
        onKeyDown: handleKeyDown
      }, /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        gap: "200",
        align: "center",
        blockAlign: "center",
        wrap: !1
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "bodySm",
        fontWeight: "medium"
      }, icon ?? content), badgeMarkup), disclosureMarkup), isPlainButton = !selected || !actions?.length, renameModal = renameAction ? /* @__PURE__ */ React2.createElement(RenameModal.RenameModal, {
        name: content,
        open: activeModalType === "rename",
        onClose: handleModalClose,
        onClickPrimaryAction: handleSaveRenameModal,
        isModalLoading,
        viewNames
      }) : null, duplicateModal = duplicateAction ? /* @__PURE__ */ React2.createElement(DuplicateModal.DuplicateModal, {
        open: activeModalType === "duplicate",
        name: i18n.translate("Polaris.Tabs.Tab.copy", {
          name: content
        }),
        onClose: handleModalClose,
        onClickPrimaryAction: handleSaveDuplicateModal,
        isModalLoading,
        viewNames: viewNames || []
      }) : null, deleteModal = deleteAction ? /* @__PURE__ */ React2.createElement(Modal3.Modal, {
        open: activeModalType === "delete",
        onClose: handleModalClose,
        primaryAction: {
          content: i18n.translate("Polaris.Tabs.Tab.deleteModal.delete"),
          onAction: handleConfirmDeleteView,
          destructive: !0,
          disabled: isModalLoading
        },
        secondaryActions: [{
          content: i18n.translate("Polaris.Tabs.Tab.deleteModal.cancel"),
          onAction: handleModalClose
        }],
        title: i18n.translate("Polaris.Tabs.Tab.deleteModal.title"),
        instant: !0
      }, /* @__PURE__ */ React2.createElement(Modal3.Modal.Section, null, i18n.translate("Polaris.Tabs.Tab.deleteModal.description", {
        viewName: content
      }))) : null, markup = isPlainButton || disabled ? activator : /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(Popover.Popover, {
        active: popoverActive,
        activator,
        autofocusTarget: "first-node",
        onClose: togglePopoverActive
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Tabs_module.default.ActionListWrap
      }, /* @__PURE__ */ React2.createElement(ActionList.ActionList, {
        actionRole: "menuitem",
        items: formattedActions
      }))), renameModal, duplicateModal, deleteModal);
      return icon ? markup : /* @__PURE__ */ React2.createElement("li", {
        className: tabContainerClassNames,
        ref: mergeRefs([node, ref]),
        role: "presentation"
      }, markup);
    });
    Tab.displayName = "Tab";
    function focusPanelID(panelID) {
      let panel = document.getElementById(panelID);
      panel && panel.focus({
        preventScroll: !0
      });
    }
    function mergeRefs(refs) {
      return (node) => {
        for (let ref of refs)
          ref != null && (ref.current = node);
      };
    }
    exports.Tab = Tab;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tabs/components/TabMeasurer/TabMeasurer.js
var require_TabMeasurer = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tabs/components/TabMeasurer/TabMeasurer.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), useComponentDidMount = require_use_component_did_mount(), useEventListener = require_use_event_listener(), Tabs_module = require_Tabs_css(), Tab = require_Tab(), TabMeasurer = /* @__PURE__ */ React2.memo(function({
      selected,
      tabs,
      activator,
      tabToFocus,
      siblingTabHasFocus,
      handleMeasurement: handleMeasurementProp
    }) {
      let containerNode = React2.useRef(null), animationFrame = React2.useRef(null), handleMeasurement = React2.useCallback(() => {
        animationFrame.current && cancelAnimationFrame(animationFrame.current), animationFrame.current = requestAnimationFrame(() => {
          if (!containerNode.current)
            return;
          let containerWidth = containerNode.current.offsetWidth - 20 - 28, hiddenTabNodes = containerNode.current.children, hiddenTabWidths = Array.from(hiddenTabNodes).map((node) => Math.ceil(node.getBoundingClientRect().width) + 4), disclosureWidth = hiddenTabWidths.pop() || 0;
          handleMeasurementProp({
            containerWidth,
            disclosureWidth,
            hiddenTabWidths
          });
        });
      }, [handleMeasurementProp]);
      React2.useEffect(() => {
        handleMeasurement();
      }, [handleMeasurement, tabs]), useComponentDidMount.useComponentDidMount(() => {
        setTimeout(handleMeasurement, 0);
      });
      let tabsMarkup = tabs.map((tab, index) => /* @__PURE__ */ React2.createElement(Tab.Tab, {
        measuring: !0,
        key: `$${tab.id}Hidden`,
        id: `${tab.id}Measurer`,
        siblingTabHasFocus,
        focused: index === tabToFocus,
        selected: index === selected,
        url: tab.url,
        content: tab.content,
        onTogglePopover: noop,
        onToggleModal: noop
      })), classname = css.classNames(Tabs_module.default.Tabs, Tabs_module.default.TabsMeasurer);
      return useEventListener.useEventListener("resize", handleMeasurement), /* @__PURE__ */ React2.createElement("div", {
        className: classname,
        ref: containerNode
      }, tabsMarkup, activator);
    });
    function noop() {
    }
    exports.TabMeasurer = TabMeasurer;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tabs/components/Panel/Panel.js
var require_Panel = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tabs/components/Panel/Panel.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Tabs_module = require_Tabs_css();
    function Panel({
      hidden,
      id,
      tabID,
      children
    }) {
      let className = css.classNames(Tabs_module.default.Panel, hidden && Tabs_module.default["Panel-hidden"]);
      return /* @__PURE__ */ React2.createElement("div", {
        className,
        id,
        role: "tabpanel",
        "aria-labelledby": tabID,
        tabIndex: -1
      }, children);
    }
    exports.Panel = Panel;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tabs/components/Item/Item.js
var require_Item6 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tabs/components/Item/Item.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Tabs_module = require_Tabs_css(), UnstyledLink = require_UnstyledLink(), Item = /* @__PURE__ */ React2.memo(function({
      id,
      focused,
      children,
      url,
      accessibilityLabel,
      onClick = noop
    }) {
      let focusedNode = React2.useRef(null);
      React2.useEffect(() => {
        focusedNode.current && focusedNode.current instanceof HTMLElement && focused && focusedNode.current.focus();
      }, [focusedNode, focused]);
      let classname = css.classNames(Tabs_module.default.Item), sharedProps = {
        id,
        ref: focusedNode,
        onClick,
        className: classname,
        "aria-selected": !1,
        "aria-label": accessibilityLabel
      }, markup = url ? /* @__PURE__ */ React2.createElement(UnstyledLink.UnstyledLink, Object.assign({}, sharedProps, {
        url
      }), children) : /* @__PURE__ */ React2.createElement("button", Object.assign({}, sharedProps, {
        ref: focusedNode,
        type: "button"
      }), children);
      return /* @__PURE__ */ React2.createElement("li", null, markup);
    });
    function noop() {
    }
    exports.Item = Item;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tabs/components/List/List.js
var require_List = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tabs/components/List/List.js"(exports) {
    "use strict";
    var React2 = require_react(), Tabs_module = require_Tabs_css(), Item = require_Item6();
    function List({
      focusIndex,
      disclosureTabs,
      onClick = noop,
      onKeyPress = noop
    }) {
      let tabs = disclosureTabs.map(({
        id,
        content,
        ...tabProps
      }, index) => /* @__PURE__ */ React2.createElement(Item.Item, Object.assign({
        key: id
      }, tabProps, {
        id,
        focused: index === focusIndex,
        onClick: onClick.bind(null, id)
      }), content));
      return /* @__PURE__ */ React2.createElement("ul", {
        className: Tabs_module.default.List,
        onKeyDown: handleKeyDown,
        onKeyUp: onKeyPress
      }, tabs);
    }
    function noop() {
    }
    function handleKeyDown(event) {
      let {
        key
      } = event;
      (key === "ArrowLeft" || key === "ArrowRight") && (event.preventDefault(), event.stopPropagation());
    }
    exports.List = List;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tabs/components/CreateViewModal/CreateViewModal.js
var require_CreateViewModal = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tabs/components/CreateViewModal/CreateViewModal.js"(exports) {
    "use strict";
    var React2 = require_react(), useIsTouchDevice = require_use_is_touch_device(), focus = require_focus(), hooks = require_hooks2(), Modal3 = require_Modal(), Form = require_Form(), FormLayout = require_FormLayout(), TextField2 = require_TextField(), MAX_VIEW_NAME_LENGTH = 40;
    function CreateViewModal({
      activator,
      open,
      onClose,
      onClickPrimaryAction,
      onClickSecondaryAction,
      viewNames
    }) {
      let i18n = hooks.useI18n(), [value, setValue] = React2.useState(""), [loading, setLoading] = React2.useState(!1), container = React2.useRef(null), isTouchDevice = useIsTouchDevice.useIsTouchDevice(), hasSameNameError = viewNames.some((viewName) => viewName.trim().toLowerCase() === value.trim().toLowerCase()), isPrimaryActionDisabled = !value || hasSameNameError || loading || value.length > MAX_VIEW_NAME_LENGTH;
      React2.useEffect(() => {
        if (!(!container.current || isTouchDevice) && open) {
          focus.focusFirstFocusableNode(container.current);
          let timeout = setTimeout(() => {
            container.current && focus.focusFirstFocusableNode(container.current);
          }, 50);
          return () => clearTimeout(timeout);
        }
      }, [open, isTouchDevice]);
      let handleChange = React2.useCallback((newValue) => {
        setValue(newValue);
      }, []);
      async function handlePrimaryAction() {
        hasSameNameError || isPrimaryActionDisabled || (setLoading(!0), await onClickPrimaryAction(value), setLoading(!1), setValue(""), onClose());
      }
      function handleSecondaryAction() {
        onClickSecondaryAction?.(), setValue(""), onClose();
      }
      return /* @__PURE__ */ React2.createElement(Modal3.Modal, {
        activator,
        open,
        onClose,
        title: i18n.translate("Polaris.Tabs.CreateViewModal.title"),
        primaryAction: {
          content: i18n.translate("Polaris.Tabs.CreateViewModal.create"),
          onAction: handlePrimaryAction,
          disabled: isPrimaryActionDisabled
        },
        secondaryActions: [{
          content: i18n.translate("Polaris.Tabs.CreateViewModal.cancel"),
          onAction: handleSecondaryAction
        }]
      }, /* @__PURE__ */ React2.createElement(Modal3.Modal.Section, null, /* @__PURE__ */ React2.createElement(Form.Form, {
        onSubmit: handlePrimaryAction
      }, /* @__PURE__ */ React2.createElement(FormLayout.FormLayout, null, /* @__PURE__ */ React2.createElement("div", {
        ref: container
      }, /* @__PURE__ */ React2.createElement(TextField2.TextField, {
        label: i18n.translate("Polaris.Tabs.CreateViewModal.label"),
        value,
        onChange: handleChange,
        autoComplete: "off",
        maxLength: MAX_VIEW_NAME_LENGTH,
        showCharacterCount: !0,
        error: hasSameNameError ? i18n.translate("Polaris.Tabs.CreateViewModal.errors.sameName", {
          name: value
        }) : void 0
      }))))));
    }
    exports.CreateViewModal = CreateViewModal;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tabs/Tabs.js
var require_Tabs = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tabs/Tabs.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), breakpoints = require_breakpoints(), usePrevious = require_use_previous(), utilities = require_utilities9(), Tabs_module = require_Tabs_css(), Tab = require_Tab(), TabMeasurer = require_TabMeasurer(), Panel = require_Panel(), List = require_List(), CreateViewModal = require_CreateViewModal(), hooks = require_hooks2(), Text3 = require_Text(), Icon2 = require_Icon(), UnstyledButton = require_UnstyledButton(), Box3 = require_Box(), Popover = require_Popover(), Tooltip = require_Tooltip(), CREATE_NEW_VIEW_ID = "create-new-view", Tabs = ({
      tabs,
      children,
      selected,
      newViewAccessibilityLabel,
      canCreateNewView,
      disabled,
      onCreateNewView,
      onSelect,
      fitted,
      disclosureText
    }) => {
      let i18n = hooks.useI18n(), {
        mdDown
      } = breakpoints.useBreakpoints(), scrollRef = React2.useRef(null), wrapRef = React2.useRef(null), selectedTabRef = React2.useRef(null), [state, setState] = React2.useReducer((data, partialData) => ({
        ...data,
        ...partialData
      }), {
        disclosureWidth: 0,
        containerWidth: 1 / 0,
        tabWidths: [],
        visibleTabs: [],
        hiddenTabs: [],
        showDisclosure: !1,
        tabToFocus: -1,
        isNewViewModalActive: !1,
        modalSubmitted: !1,
        isTabsFocused: !1,
        isTabPopoverOpen: !1,
        isTabModalOpen: !1
      }), {
        tabToFocus,
        visibleTabs,
        hiddenTabs,
        showDisclosure,
        isNewViewModalActive,
        modalSubmitted,
        disclosureWidth,
        tabWidths,
        containerWidth,
        isTabsFocused,
        isTabModalOpen,
        isTabPopoverOpen
      } = state, prevModalOpen = usePrevious.usePrevious(isTabModalOpen), prevPopoverOpen = usePrevious.usePrevious(isTabPopoverOpen);
      React2.useEffect(() => {
        prevModalOpen && !isTabModalOpen ? setState({
          isTabsFocused: !0,
          tabToFocus: selected
        }) : prevPopoverOpen && !isTabPopoverOpen && !isTabModalOpen && setState({
          isTabsFocused: !0,
          tabToFocus: selected
        });
      }, [prevPopoverOpen, isTabPopoverOpen, prevModalOpen, isTabModalOpen, selected, tabToFocus]);
      let handleTogglePopover = React2.useCallback((isOpen) => setState({
        isTabPopoverOpen: isOpen
      }), []), handleToggleModal = React2.useCallback((isOpen) => setState({
        isTabModalOpen: isOpen
      }), []), handleCloseNewViewModal = () => {
        setState({
          isNewViewModalActive: !1
        });
      }, handleSaveNewViewModal = async (value) => {
        if (!onCreateNewView)
          return !1;
        let hasExecuted = await onCreateNewView?.(value);
        return hasExecuted && setState({
          modalSubmitted: !0
        }), hasExecuted;
      }, handleClickNewTab = () => {
        setState({
          isNewViewModalActive: !0
        });
      }, handleTabClick = React2.useCallback((id) => {
        let tab = tabs.find((aTab) => aTab.id === id);
        if (tab == null)
          return null;
        let selectedIndex = tabs.indexOf(tab);
        onSelect?.(selectedIndex);
      }, [tabs, onSelect]), renderTabMarkup = React2.useCallback((tab, index) => {
        let handleClick = () => {
          handleTabClick(tab.id), tab.onAction?.();
        }, viewNames2 = tabs.map(({
          content
        }) => content), tabPanelID = tab.panelID || `${tab.id}-panel`;
        return /* @__PURE__ */ React2.createElement(Tab.Tab, Object.assign({}, tab, {
          key: `${index}-${tab.id}`,
          id: tab.id,
          panelID: children ? tabPanelID : void 0,
          disabled: disabled || tab.disabled,
          siblingTabHasFocus: tabToFocus > -1,
          focused: index === tabToFocus,
          selected: index === selected,
          onAction: handleClick,
          accessibilityLabel: tab.accessibilityLabel,
          url: tab.url,
          content: tab.content,
          onToggleModal: handleToggleModal,
          onTogglePopover: handleTogglePopover,
          viewNames: viewNames2,
          ref: index === selected ? selectedTabRef : null
        }));
      }, [disabled, handleTabClick, tabs, children, selected, tabToFocus, handleToggleModal, handleTogglePopover]), handleFocus = React2.useCallback((event) => {
        let target = event.target, isItem = target.classList.contains(Tabs_module.default.Item), isInNaturalDOMOrder = target.closest("[data-tabs-focus-catchment]") || isItem;
        target.classList.contains(Tabs_module.default.DisclosureActivator) || !isInNaturalDOMOrder || setState({
          isTabsFocused: !0
        });
      }, []), handleBlur = React2.useCallback((event) => {
        let target = event.target, relatedTarget = event.relatedTarget, isInNaturalDOMOrder = relatedTarget?.closest?.(`.${Tabs_module.default.Tabs}`), targetIsATab = target?.classList?.contains?.(Tabs_module.default.Tab), focusReceiverIsAnItem = relatedTarget?.classList.contains(Tabs_module.default.Item);
        if (!relatedTarget && !isTabModalOpen && !targetIsATab && !focusReceiverIsAnItem) {
          setState({
            tabToFocus: -1
          });
          return;
        }
        if (!isInNaturalDOMOrder && !isTabModalOpen && !targetIsATab && !focusReceiverIsAnItem) {
          setState({
            tabToFocus: -1
          });
          return;
        }
        setState({
          isTabsFocused: !1
        });
      }, [isTabModalOpen]), handleKeyDown = (event) => {
        if (isTabPopoverOpen || isTabModalOpen || isNewViewModalActive)
          return;
        let {
          key
        } = event;
        (key === "ArrowLeft" || key === "ArrowRight") && (event.preventDefault(), event.stopPropagation());
      };
      React2.useEffect(() => {
        let {
          visibleTabs: visibleTabs2,
          hiddenTabs: hiddenTabs2
        } = utilities.getVisibleAndHiddenTabIndices(tabs, selected, disclosureWidth, tabWidths, containerWidth);
        setState({
          visibleTabs: visibleTabs2,
          hiddenTabs: hiddenTabs2
        });
      }, [containerWidth, disclosureWidth, tabs, selected, tabWidths, setState]);
      let moveToSelectedTab = React2.useCallback(() => {
        let activeButton = selectedTabRef.current?.querySelector(`.${Tabs_module.default["Tab-active"]}`);
        activeButton && moveToActiveTab(activeButton.offsetLeft);
      }, []);
      React2.useEffect(() => {
        mdDown && moveToSelectedTab();
      }, [moveToSelectedTab, selected, mdDown]), React2.useEffect(() => {
        isTabsFocused && !showDisclosure && setState({
          tabToFocus: selected
        });
      }, [isTabsFocused, selected, setState, showDisclosure]);
      let handleKeyPress = (event) => {
        let {
          showDisclosure: showDisclosure2,
          visibleTabs: visibleTabs2,
          hiddenTabs: hiddenTabs2,
          tabToFocus: tabToFocus2,
          isNewViewModalActive: isNewViewModalActive2
        } = state;
        if (isTabModalOpen || isTabPopoverOpen || isNewViewModalActive2)
          return;
        let key = event.key, tabsArrayInOrder = showDisclosure2 || mdDown ? visibleTabs2.concat(hiddenTabs2) : [...visibleTabs2], newFocus = tabsArrayInOrder.indexOf(tabToFocus2);
        key === "ArrowRight" && (newFocus += 1, newFocus === tabsArrayInOrder.length && (newFocus = 0)), key === "ArrowLeft" && (newFocus === -1 || newFocus === 0 ? newFocus = tabsArrayInOrder.length - 1 : newFocus -= 1);
        let buttonToFocus = tabsArrayInOrder[newFocus];
        buttonToFocus != null && setState({
          tabToFocus: buttonToFocus
        });
      }, handleDisclosureActivatorClick = () => {
        setState({
          showDisclosure: !showDisclosure,
          tabToFocus: hiddenTabs[0]
        });
      }, handleClose = () => {
        setState({
          showDisclosure: !1
        });
      }, handleMeasurement = React2.useCallback((measurements) => {
        let {
          hiddenTabWidths: tabWidths2,
          containerWidth: containerWidth2,
          disclosureWidth: disclosureWidth2
        } = measurements, {
          visibleTabs: visibleTabs2,
          hiddenTabs: hiddenTabs2
        } = utilities.getVisibleAndHiddenTabIndices(tabs, selected, disclosureWidth2, tabWidths2, containerWidth2);
        setState({
          visibleTabs: visibleTabs2,
          hiddenTabs: hiddenTabs2,
          disclosureWidth: disclosureWidth2,
          containerWidth: containerWidth2,
          tabWidths: tabWidths2
        });
      }, [tabs, selected, setState]), handleListTabClick = (id) => {
        handleTabClick(id), handleClose(), setState({
          isTabsFocused: !0
        });
      }, moveToActiveTab = (offsetLeft) => {
        setTimeout(() => {
          if (scrollRef.current && typeof scrollRef.current.scroll == "function") {
            let scrollRefOffset = wrapRef?.current?.offsetLeft || 0;
            scrollRef?.current?.scroll({
              left: offsetLeft - scrollRefOffset
            });
          }
        }, 0);
      }, createViewA11yLabel = newViewAccessibilityLabel || i18n.translate("Polaris.Tabs.newViewAccessibilityLabel"), tabsToShow = mdDown ? [...visibleTabs, ...hiddenTabs] : visibleTabs, tabsMarkup = tabsToShow.sort((tabA, tabB) => tabA - tabB).filter((tabIndex) => tabs[tabIndex]).map((tabIndex) => renderTabMarkup(tabs[tabIndex], tabIndex)), disclosureActivatorVisible = visibleTabs.length < tabs.length && !mdDown, classname = css.classNames(Tabs_module.default.Tabs, fitted && Tabs_module.default.fitted, disclosureActivatorVisible && Tabs_module.default.fillSpace), wrapperClassNames = css.classNames(Tabs_module.default.Wrapper, canCreateNewView && Tabs_module.default.WrapperWithNewButton), disclosureTabClassName = css.classNames(Tabs_module.default.DisclosureTab, disclosureActivatorVisible && Tabs_module.default["DisclosureTab-visible"]), disclosureButtonClassName = css.classNames(Tabs_module.default.DisclosureActivator), disclosureButtonContent = /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "bodySm",
        fontWeight: "medium"
      }, disclosureText ?? i18n.translate("Polaris.Tabs.toggleTabsLabel")), /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Tabs_module.default.IconWrap, disclosureActivatorVisible && showDisclosure && Tabs_module.default["IconWrap-open"])
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.ChevronDownIcon,
        tone: "subdued"
      }))), activator = /* @__PURE__ */ React2.createElement(UnstyledButton.UnstyledButton, {
        type: "button",
        className: disclosureButtonClassName,
        onClick: handleDisclosureActivatorClick,
        "aria-label": disclosureText ?? i18n.translate("Polaris.Tabs.toggleTabsLabel"),
        disabled
      }, disclosureButtonContent), disclosureTabs = hiddenTabs.map((tabIndex) => tabs[tabIndex]), viewNames = tabs.map(({
        content
      }) => content), tabMeasurer = /* @__PURE__ */ React2.createElement(TabMeasurer.TabMeasurer, {
        tabToFocus,
        activator,
        selected,
        tabs,
        siblingTabHasFocus: tabToFocus > -1,
        handleMeasurement
      }), newTab = /* @__PURE__ */ React2.createElement(Tab.Tab, {
        id: CREATE_NEW_VIEW_ID,
        content: createViewA11yLabel,
        actions: [],
        onAction: handleClickNewTab,
        onFocus: () => {
          modalSubmitted && setState({
            tabToFocus: selected,
            modalSubmitted: !1
          });
        },
        icon: /* @__PURE__ */ React2.createElement(Icon2.Icon, {
          source: polarisIcons.PlusIcon,
          accessibilityLabel: createViewA11yLabel
        }),
        disabled,
        onTogglePopover: handleTogglePopover,
        onToggleModal: handleToggleModal,
        tabIndexOverride: 0
      }), panelMarkup = children ? tabs.map((_tab, index) => selected === index ? /* @__PURE__ */ React2.createElement(Panel.Panel, {
        id: tabs[index].panelID || `${tabs[index].id}-panel`,
        tabID: tabs[index].id,
        key: tabs[index].id
      }, children) : /* @__PURE__ */ React2.createElement(Panel.Panel, {
        id: tabs[index].panelID || `${tabs[index].id}-panel`,
        tabID: tabs[index].id,
        key: tabs[index].id,
        hidden: !0
      })) : null;
      return /* @__PURE__ */ React2.createElement("div", {
        className: Tabs_module.default.Outer
      }, /* @__PURE__ */ React2.createElement(Box3.Box, {
        padding: {
          md: "200"
        }
      }, tabMeasurer, /* @__PURE__ */ React2.createElement("div", {
        className: wrapperClassNames,
        ref: scrollRef
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Tabs_module.default.ButtonWrapper,
        ref: wrapRef
      }, /* @__PURE__ */ React2.createElement("ul", {
        role: tabsMarkup.length > 0 ? "tablist" : void 0,
        className: classname,
        onFocus: handleFocus,
        onBlur: handleBlur,
        onKeyDown: handleKeyDown,
        onKeyUp: handleKeyPress,
        "data-tabs-focus-catchment": !0
      }, tabsMarkup, mdDown || tabsToShow.length === 0 ? null : /* @__PURE__ */ React2.createElement("li", {
        className: disclosureTabClassName,
        role: "presentation"
      }, /* @__PURE__ */ React2.createElement(Popover.Popover, {
        preferredPosition: "below",
        preferredAlignment: "left",
        activator,
        active: disclosureActivatorVisible && showDisclosure,
        onClose: handleClose,
        autofocusTarget: "first-node"
      }, /* @__PURE__ */ React2.createElement(List.List, {
        focusIndex: hiddenTabs.indexOf(tabToFocus),
        disclosureTabs,
        onClick: handleListTabClick,
        onKeyPress: handleKeyPress
      })))), canCreateNewView && tabsToShow.length > 0 ? /* @__PURE__ */ React2.createElement("div", {
        className: Tabs_module.default.NewTab
      }, /* @__PURE__ */ React2.createElement(CreateViewModal.CreateViewModal, {
        open: isNewViewModalActive,
        onClose: handleCloseNewViewModal,
        onClickPrimaryAction: handleSaveNewViewModal,
        viewNames,
        activator: disabled ? newTab : /* @__PURE__ */ React2.createElement("div", null, /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, {
          content: i18n.translate("Polaris.Tabs.newViewTooltip"),
          preferredPosition: "above",
          hoverDelay: 400
        }, newTab))
      })) : null))), panelMarkup);
    };
    exports.Tabs = Tabs;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/SearchFilterButton/SearchFilterButton.js
var require_SearchFilterButton = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/SearchFilterButton/SearchFilterButton.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), Tooltip = require_Tooltip(), Button3 = require_Button(), Text3 = require_Text(), InlineStack3 = require_InlineStack(), Icon2 = require_Icon();
    function SearchFilterButton({
      onClick,
      label,
      disabled,
      tooltipContent,
      style,
      hideFilters,
      hideQueryField
    }) {
      let iconMarkup = /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        gap: "0"
      }, hideQueryField ? null : /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.SearchIcon,
        tone: "base"
      }), hideFilters ? null : /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.FilterIcon,
        tone: "base"
      })), activator = /* @__PURE__ */ React2.createElement("div", {
        style
      }, /* @__PURE__ */ React2.createElement(Button3.Button, {
        size: "slim",
        onClick,
        disabled,
        icon: iconMarkup,
        accessibilityLabel: label
      })), content = /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "bodyMd",
        alignment: "center"
      }, tooltipContent);
      return /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, {
        content,
        preferredPosition: "above",
        hoverDelay: 400
      }, activator);
    }
    exports.SearchFilterButton = SearchFilterButton;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/EditColumnsButton/EditColumnsButton.js
var require_EditColumnsButton = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/EditColumnsButton/EditColumnsButton.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), hooks = require_hooks2(), Text3 = require_Text(), Tooltip = require_Tooltip(), Button3 = require_Button();
    function EditColumnsButton({
      onClick,
      disabled
    }) {
      let i18n = hooks.useI18n(), tooltipContent = /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "bodyMd",
        alignment: "center"
      }, i18n.translate("Polaris.IndexFilters.EditColumnsButton.tooltip"));
      return /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, {
        content: tooltipContent,
        preferredPosition: "above",
        hoverDelay: 400
      }, /* @__PURE__ */ React2.createElement(Button3.Button, {
        size: "slim",
        onClick,
        disabled,
        icon: polarisIcons.LayoutColumns3Icon,
        accessibilityLabel: i18n.translate("Polaris.IndexFilters.EditColumnsButton.accessibilityLabel")
      }));
    }
    exports.EditColumnsButton = EditColumnsButton;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/IndexFilters.js
var require_IndexFilters = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/IndexFilters.js"(exports) {
    "use strict";
    var React2 = require_react(), reactTransitionGroup = require("react-transition-group"), css = require_css(), useEventListener = require_use_event_listener(), useToggle = require_use_toggle(), useOnValueChange = require_use_on_value_change(), breakpoints = require_breakpoints(), types = require_types3(), IndexFilters_module = require_IndexFilters_css(), useIsSticky = require_useIsSticky(), UpdateButtons = require_UpdateButtons(), SortButton = require_SortButton(), Container = require_Container(), Tabs = require_Tabs(), SearchFilterButton = require_SearchFilterButton(), Filters = require_Filters(), EditColumnsButton = require_EditColumnsButton(), hooks = require_hooks2(), InlineStack3 = require_InlineStack(), Spinner2 = require_Spinner(), DEFAULT_IGNORED_TAGS = ["INPUT", "SELECT", "TEXTAREA"], TRANSITION_DURATION = 150, defaultStyle = {
      transition: `opacity ${TRANSITION_DURATION}ms var(--p-motion-ease)`,
      opacity: 0
    }, transitionStyles = {
      entering: {
        opacity: 1
      },
      entered: {
        opacity: 1
      },
      exiting: {
        opacity: 0
      },
      exited: {
        opacity: 0
      },
      unmounted: {
        opacity: 0
      }
    };
    function IndexFilters({
      tabs,
      selected,
      onSelect,
      onSort,
      onSortKeyChange,
      onSortDirectionChange,
      onAddFilterClick,
      sortOptions,
      sortSelected,
      queryValue = "",
      queryPlaceholder,
      primaryAction,
      cancelAction,
      filters,
      appliedFilters,
      onClearAll,
      onQueryChange,
      onQueryFocus,
      onQueryClear,
      onEditStart,
      disabled,
      disableQueryField,
      hideFilters,
      loading,
      mode: mode2,
      setMode,
      disableStickyMode,
      isFlushWhenSticky = !1,
      canCreateNewView = !0,
      onCreateNewView,
      filteringAccessibilityLabel,
      filteringAccessibilityTooltip,
      hideQueryField,
      closeOnChildOverlayClick,
      disableKeyboardShortcuts,
      showEditColumnsButton,
      autoFocusSearchField = !0
    }) {
      let i18n = hooks.useI18n(), {
        mdDown
      } = breakpoints.useBreakpoints(), defaultRef = React2.useRef(null), filteringRef = React2.useRef(null), {
        value: filtersFocused,
        setFalse: setFiltersUnFocused,
        setTrue: setFiltersFocused
      } = useToggle.useToggle(mode2 === types.IndexFiltersMode.Filtering && autoFocusSearchField), handleModeChange = (newMode) => {
        newMode === types.IndexFiltersMode.Filtering && autoFocusSearchField ? setFiltersFocused() : setFiltersUnFocused();
      };
      useOnValueChange.useOnValueChange(mode2, handleModeChange), useEventListener.useEventListener("keydown", (event) => {
        if (disableKeyboardShortcuts || hideQueryField && hideFilters)
          return;
        let {
          key
        } = event, tag = document?.activeElement?.tagName;
        if (mode2 !== types.IndexFiltersMode.Default && event.key === "Escape" && onPressEscape(), key === "f" && mode2 === types.IndexFiltersMode.Default) {
          if (tag && DEFAULT_IGNORED_TAGS.includes(tag))
            return;
          onPressF(), event.preventDefault();
        }
      });
      let {
        intersectionRef,
        measurerRef,
        indexFilteringHeight,
        isSticky
      } = useIsSticky.useIsSticky(mode2, Boolean(disableStickyMode), isFlushWhenSticky), viewNames = tabs.map(({
        content
      }) => content), handleChangeSortButton = React2.useCallback((value) => {
        onSort?.(value);
      }, [onSort]), handleChangeSearch = React2.useCallback((value) => {
        onQueryChange(value);
      }, [onQueryChange]), onExecutedPrimaryAction = ((action8, afterEffect) => React2.useCallback(async (name) => {
        await action8?.(name) && (setMode(types.IndexFiltersMode.Default), afterEffect?.());
      }, [action8, afterEffect]))(primaryAction?.onAction), onExecutedCancelAction = React2.useCallback(() => {
        cancelAction?.onAction?.(), setMode(types.IndexFiltersMode.Default);
      }, [cancelAction, setMode]), enhancedPrimaryAction = React2.useMemo(() => primaryAction ? {
        ...primaryAction,
        onAction: onExecutedPrimaryAction
      } : void 0, [onExecutedPrimaryAction, primaryAction]), enhancedCancelAction = React2.useMemo(() => cancelAction ? {
        ...cancelAction,
        onAction: onExecutedCancelAction
      } : void 0, [cancelAction, onExecutedCancelAction]), beginEdit = React2.useCallback((mode3) => {
        setMode(mode3), onEditStart?.(mode3);
      }, [onEditStart, setMode]), updateButtonsMarkup = React2.useMemo(() => enhancedCancelAction || enhancedPrimaryAction ? /* @__PURE__ */ React2.createElement(UpdateButtons.UpdateButtons, {
        primaryAction: enhancedPrimaryAction,
        cancelAction: enhancedCancelAction,
        viewNames,
        disabled
      }) : null, [enhancedPrimaryAction, enhancedCancelAction, disabled, viewNames]), sortMarkup = React2.useMemo(() => sortOptions?.length ? /* @__PURE__ */ React2.createElement(SortButton.SortButton, {
        choices: sortOptions,
        selected: sortSelected,
        onChange: handleChangeSortButton,
        onChangeKey: onSortKeyChange,
        onChangeDirection: onSortDirectionChange,
        disabled
      }) : null, [handleChangeSortButton, onSortDirectionChange, onSortKeyChange, sortOptions, sortSelected, disabled]);
      function handleClickEditColumnsButton() {
        beginEdit(types.IndexFiltersMode.EditingColumns);
      }
      let editColumnsMarkup = showEditColumnsButton ? /* @__PURE__ */ React2.createElement(EditColumnsButton.EditColumnsButton, {
        onClick: handleClickEditColumnsButton,
        disabled
      }) : null, isActionLoading = primaryAction?.loading || cancelAction?.loading;
      function handleClickFilterButton() {
        beginEdit(types.IndexFiltersMode.Filtering);
      }
      let searchFilterTooltipLabelId = disableKeyboardShortcuts ? "Polaris.IndexFilters.searchFilterTooltip" : "Polaris.IndexFilters.searchFilterTooltipWithShortcut", searchFilterTooltip = filteringAccessibilityTooltip || i18n.translate(searchFilterTooltipLabelId), searchFilterAriaLabel = filteringAccessibilityLabel || i18n.translate("Polaris.IndexFilters.searchFilterAccessibilityLabel"), isLoading = loading || isActionLoading;
      function onPressEscape() {
        cancelAction?.onAction(), setMode(types.IndexFiltersMode.Default);
      }
      function handleClearSearch() {
        onQueryClear?.();
      }
      function handleQueryBlur() {
        setFiltersUnFocused();
      }
      function handleQueryFocus() {
        setFiltersFocused(), onQueryFocus?.();
      }
      function onPressF() {
        mode2 === types.IndexFiltersMode.Default && beginEdit(types.IndexFiltersMode.Filtering);
      }
      return /* @__PURE__ */ React2.createElement("div", {
        className: IndexFilters_module.default.IndexFiltersWrapper,
        style: {
          height: indexFilteringHeight
        }
      }, /* @__PURE__ */ React2.createElement("div", {
        ref: intersectionRef
      }), /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(IndexFilters_module.default.IndexFilters, isSticky && IndexFilters_module.default.IndexFiltersSticky, isSticky && isFlushWhenSticky && IndexFilters_module.default.IndexFiltersStickyFlush),
        ref: measurerRef
      }, /* @__PURE__ */ React2.createElement(reactTransitionGroup.Transition, {
        nodeRef: defaultRef,
        in: mode2 !== types.IndexFiltersMode.Filtering,
        timeout: TRANSITION_DURATION
      }, (state) => /* @__PURE__ */ React2.createElement("div", {
        ref: defaultRef
      }, mode2 !== types.IndexFiltersMode.Filtering ? /* @__PURE__ */ React2.createElement(Container.Container, null, /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        align: "start",
        blockAlign: "center",
        gap: {
          xs: "0",
          md: "200"
        },
        wrap: !1
      }, /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(IndexFilters_module.default.TabsWrapper, mdDown && IndexFilters_module.default.SmallScreenTabsWrapper, isLoading && IndexFilters_module.default.TabsWrapperLoading)
      }, /* @__PURE__ */ React2.createElement("div", {
        className: IndexFilters_module.default.TabsInner,
        style: {
          ...defaultStyle,
          ...transitionStyles[state]
        }
      }, /* @__PURE__ */ React2.createElement(Tabs.Tabs, {
        tabs,
        selected,
        onSelect,
        disabled: Boolean(mode2 !== types.IndexFiltersMode.Default || disabled),
        canCreateNewView,
        onCreateNewView
      })), isLoading && mdDown && /* @__PURE__ */ React2.createElement("div", {
        className: IndexFilters_module.default.TabsLoading
      }, /* @__PURE__ */ React2.createElement(Spinner2.Spinner, {
        size: "small"
      }))), /* @__PURE__ */ React2.createElement("div", {
        className: IndexFilters_module.default.ActionWrap
      }, isLoading && !mdDown && /* @__PURE__ */ React2.createElement("div", {
        className: IndexFilters_module.default.DesktopLoading
      }, isLoading ? /* @__PURE__ */ React2.createElement(Spinner2.Spinner, {
        size: "small"
      }) : null), mode2 === types.IndexFiltersMode.Default ? /* @__PURE__ */ React2.createElement(React2.Fragment, null, hideFilters && hideQueryField ? null : /* @__PURE__ */ React2.createElement(SearchFilterButton.SearchFilterButton, {
        onClick: handleClickFilterButton,
        label: searchFilterAriaLabel,
        tooltipContent: searchFilterTooltip,
        disabled,
        hideFilters,
        hideQueryField,
        style: {
          ...defaultStyle,
          ...transitionStyles[state]
        }
      }), editColumnsMarkup, sortMarkup) : null, mode2 === types.IndexFiltersMode.EditingColumns ? updateButtonsMarkup : null))) : null)), /* @__PURE__ */ React2.createElement(reactTransitionGroup.Transition, {
        nodeRef: filteringRef,
        in: mode2 === types.IndexFiltersMode.Filtering,
        timeout: TRANSITION_DURATION
      }, (state) => /* @__PURE__ */ React2.createElement("div", {
        ref: filteringRef
      }, mode2 === types.IndexFiltersMode.Filtering ? /* @__PURE__ */ React2.createElement(Filters.Filters, {
        queryValue,
        queryPlaceholder,
        onQueryChange: handleChangeSearch,
        onQueryClear: handleClearSearch,
        onQueryFocus: handleQueryFocus,
        onQueryBlur: handleQueryBlur,
        onAddFilterClick,
        filters,
        appliedFilters,
        onClearAll,
        disableFilters: disabled,
        hideFilters,
        hideQueryField,
        disableQueryField: disabled || disableQueryField,
        loading: loading || isActionLoading,
        focused: filtersFocused,
        mountedState: mdDown ? void 0 : state,
        borderlessQueryField: !0,
        closeOnChildOverlayClick
      }, /* @__PURE__ */ React2.createElement("div", {
        className: IndexFilters_module.default.ButtonWrap
      }, /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        gap: "200",
        align: "start",
        blockAlign: "center"
      }, /* @__PURE__ */ React2.createElement("div", {
        style: {
          ...defaultStyle,
          ...transitionStyles[state]
        }
      }, updateButtonsMarkup), sortMarkup))) : null))));
    }
    exports.IndexFilters = IndexFilters;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/hooks/useSetIndexFiltersMode/useSetIndexFiltersMode.js
var require_useSetIndexFiltersMode = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/hooks/useSetIndexFiltersMode/useSetIndexFiltersMode.js"(exports) {
    "use strict";
    var React2 = require_react(), types = require_types3();
    function useSetIndexFiltersMode(defaultMode = types.IndexFiltersMode.Default) {
      let [mode2, setMode] = React2.useState(defaultMode);
      return {
        mode: mode2,
        setMode
      };
    }
    exports.useSetIndexFiltersMode = useSetIndexFiltersMode;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexTable/IndexTable.css.js
var require_IndexTable_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexTable/IndexTable.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      IndexTable: "Polaris-IndexTable",
      IndexTableWrapper: "Polaris-IndexTable__IndexTableWrapper",
      "IndexTableWrapper-scrollBarHidden": "Polaris-IndexTable__IndexTableWrapper--scrollBarHidden",
      IndexTableWrapperWithSelectAllActions: "Polaris-IndexTable__IndexTableWrapperWithSelectAllActions",
      "LoadingContainer-enter": "Polaris-IndexTable__LoadingContainer--enter",
      "LoadingContainer-enter-active": "Polaris-IndexTable--loadingContainerEnterActive",
      "LoadingContainer-exit": "Polaris-IndexTable__LoadingContainer--exit",
      "LoadingContainer-exit-active": "Polaris-IndexTable--loadingContainerExitActive",
      LoadingPanel: "Polaris-IndexTable__LoadingPanel",
      LoadingPanelRow: "Polaris-IndexTable__LoadingPanelRow",
      LoadingPanelText: "Polaris-IndexTable__LoadingPanelText",
      Table: "Polaris-IndexTable__Table",
      "Table-scrolling": "Polaris-IndexTable__Table--scrolling",
      "TableCell-first": "Polaris-IndexTable__TableCell--first",
      "StickyTable-scrolling": "Polaris-IndexTable__StickyTable--scrolling",
      TableCell: "Polaris-IndexTable__TableCell",
      "TableHeading-first": "Polaris-IndexTable__TableHeading--first",
      "TableHeading-second": "Polaris-IndexTable__TableHeading--second",
      "Table-sticky": "Polaris-IndexTable__Table--sticky",
      StickyTable: "Polaris-IndexTable__StickyTable",
      "Table-unselectable": "Polaris-IndexTable__Table--unselectable",
      TableRow: "Polaris-IndexTable__TableRow",
      "TableRow-unclickable": "Polaris-IndexTable__TableRow--unclickable",
      toneSuccess: "Polaris-IndexTable--toneSuccess",
      "TableRow-child": "Polaris-IndexTable__TableRow--child",
      toneWarning: "Polaris-IndexTable--toneWarning",
      toneCritical: "Polaris-IndexTable--toneCritical",
      toneSubdued: "Polaris-IndexTable--toneSubdued",
      "TableRow-subheader": "Polaris-IndexTable__TableRow--subheader",
      "TableRow-selected": "Polaris-IndexTable__TableRow--selected",
      "TableRow-hovered": "Polaris-IndexTable__TableRow--hovered",
      "TableRow-disabled": "Polaris-IndexTable__TableRow--disabled",
      ZebraStriping: "Polaris-IndexTable__ZebraStriping",
      TableHeading: "Polaris-IndexTable__TableHeading",
      "TableHeading-flush": "Polaris-IndexTable__TableHeading--flush",
      "TableHeading-align-center": "Polaris-IndexTable--tableHeadingAlignCenter",
      "TableHeading-align-end": "Polaris-IndexTable--tableHeadingAlignEnd",
      "TableHeading-extra-padding-right": "Polaris-IndexTable--tableHeadingExtraPaddingRight",
      "TableHeading-sortable": "Polaris-IndexTable__TableHeading--sortable",
      TableHeadingSortButton: "Polaris-IndexTable__TableHeadingSortButton",
      TableHeadingSortIcon: "Polaris-IndexTable__TableHeadingSortIcon",
      "TableHeadingSortButton-heading-align-end": "Polaris-IndexTable--tableHeadingSortButtonHeadingAlignEnd",
      "TableHeadingSortButton-heading-align-end-currently-sorted": "Polaris-IndexTable--tableHeadingSortButtonHeadingAlignEndCurrentlySorted",
      "TableHeadingSortIcon-heading-align-end": "Polaris-IndexTable--tableHeadingSortIconHeadingAlignEnd",
      "TableHeadingSortButton-heading-align-end-previously-sorted": "Polaris-IndexTable--tableHeadingSortButtonHeadingAlignEndPreviouslySorted",
      "right-aligned-sort-button-slide-out": "Polaris-IndexTable--rightAlignedSortButtonSlideOut",
      "reveal-right-aligned-sort-button-icon": "Polaris-IndexTable--revealRightAlignedSortButtonIcon",
      TableHeadingUnderline: "Polaris-IndexTable__TableHeadingUnderline",
      TableHeadingTooltipUnderlinePlaceholder: "Polaris-IndexTable__TableHeadingTooltipUnderlinePlaceholder",
      "TableHeadingSortIcon-visible": "Polaris-IndexTable__TableHeadingSortIcon--visible",
      TableHeadingSortSvg: "Polaris-IndexTable__TableHeadingSortSvg",
      SortableTableHeadingWithCustomMarkup: "Polaris-IndexTable__SortableTableHeadingWithCustomMarkup",
      SortableTableHeaderWrapper: "Polaris-IndexTable__SortableTableHeaderWrapper",
      ColumnHeaderCheckboxWrapper: "Polaris-IndexTable__ColumnHeaderCheckboxWrapper",
      FirstStickyHeaderElement: "Polaris-IndexTable__FirstStickyHeaderElement",
      "TableHeading-unselectable": "Polaris-IndexTable__TableHeading--unselectable",
      "TableCell-flush": "Polaris-IndexTable__TableCell--flush",
      "Table-sticky-scrolling": "Polaris-IndexTable--tableStickyScrolling",
      "StickyTableHeader-sticky-scrolling": "Polaris-IndexTable--stickyTableHeaderStickyScrolling",
      "TableHeading-last": "Polaris-IndexTable__TableHeading--last",
      "Table-sticky-last": "Polaris-IndexTable--tableStickyLast",
      "StickyTableHeader-sticky-last": "Polaris-IndexTable--stickyTableHeaderStickyLast",
      "Table-sortable": "Polaris-IndexTable__Table--sortable",
      StickyTableHeader: "Polaris-IndexTable__StickyTableHeader",
      "StickyTableHeader-isSticky": "Polaris-IndexTable__StickyTableHeader--isSticky",
      StickyTableHeadings: "Polaris-IndexTable__StickyTableHeadings",
      "StickyTableHeading-second": "Polaris-IndexTable__StickyTableHeading--second",
      unselectable: "Polaris-IndexTable--unselectable",
      "StickyTableHeading-second-scrolling": "Polaris-IndexTable--stickyTableHeadingSecondScrolling",
      ScrollLeft: "Polaris-IndexTable__ScrollLeft",
      ScrollRight: "Polaris-IndexTable__ScrollRight",
      "ScrollRight-onboarding": "Polaris-IndexTable__ScrollRight--onboarding",
      SelectAllActionsWrapper: "Polaris-IndexTable__SelectAllActionsWrapper",
      SelectAllActionsWrapperWithPagination: "Polaris-IndexTable__SelectAllActionsWrapperWithPagination",
      SelectAllActionsWrapperSticky: "Polaris-IndexTable__SelectAllActionsWrapperSticky",
      SelectAllActionsWrapperAtEnd: "Polaris-IndexTable__SelectAllActionsWrapperAtEnd",
      SelectAllActionsWrapperAtEndAppear: "Polaris-IndexTable__SelectAllActionsWrapperAtEndAppear",
      BulkActionsWrapper: "Polaris-IndexTable__BulkActionsWrapper",
      BulkActionsWrapperVisible: "Polaris-IndexTable__BulkActionsWrapperVisible",
      PaginationWrapper: "Polaris-IndexTable__PaginationWrapper",
      PaginationWrapperScrolledPastTop: "Polaris-IndexTable__PaginationWrapperScrolledPastTop",
      ScrollBarContainer: "Polaris-IndexTable__ScrollBarContainer",
      ScrollBarContainerWithPagination: "Polaris-IndexTable__ScrollBarContainerWithPagination",
      ScrollBarContainerScrolledPastTop: "Polaris-IndexTable__ScrollBarContainerScrolledPastTop",
      ScrollBarContainerWithSelectAllActions: "Polaris-IndexTable__ScrollBarContainerWithSelectAllActions",
      ScrollBarContainerSelectAllActionsSticky: "Polaris-IndexTable__ScrollBarContainerSelectAllActionsSticky",
      scrollBarContainerCondensed: "Polaris-IndexTable--scrollBarContainerCondensed",
      scrollBarContainerHidden: "Polaris-IndexTable--scrollBarContainerHidden",
      ScrollBar: "Polaris-IndexTable__ScrollBar",
      disableTextSelection: "Polaris-IndexTable--disableTextSelection",
      EmptySearchResultWrapper: "Polaris-IndexTable__EmptySearchResultWrapper",
      condensedRow: "Polaris-IndexTable--condensedRow",
      CondensedList: "Polaris-IndexTable__CondensedList",
      HeaderWrapper: "Polaris-IndexTable__HeaderWrapper",
      "StickyTable-condensed": "Polaris-IndexTable__StickyTable--condensed",
      "StickyTableHeader-condensed": "Polaris-IndexTable__StickyTableHeader--condensed",
      ScrollBarContent: "Polaris-IndexTable__ScrollBarContent"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/index-provider/types.js
var require_types4 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/index-provider/types.js"(exports) {
    "use strict";
    var SELECT_ALL_ITEMS = "All";
    exports.SelectionType = void 0;
    (function(SelectionType) {
      SelectionType.All = "all", SelectionType.Page = "page", SelectionType.Multi = "multi", SelectionType.Single = "single", SelectionType.Range = "range";
    })(exports.SelectionType || (exports.SelectionType = {}));
    exports.SELECT_ALL_ITEMS = SELECT_ALL_ITEMS;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/index-provider/context.js
var require_context17 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/index-provider/context.js"(exports) {
    "use strict";
    var React2 = require_react(), IndexContext = /* @__PURE__ */ React2.createContext(void 0), IndexSelectionChangeContext = /* @__PURE__ */ React2.createContext(void 0), IndexRowContext = /* @__PURE__ */ React2.createContext(void 0);
    exports.IndexContext = IndexContext;
    exports.IndexRowContext = IndexRowContext;
    exports.IndexSelectionChangeContext = IndexSelectionChangeContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/index-provider/hooks.js
var require_hooks13 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/index-provider/hooks.js"(exports) {
    "use strict";
    var React2 = require_react(), types = require_types4(), context = require_context17(), hooks = require_hooks2();
    function useIndexSelectionChange() {
      let onSelectionChange = React2.useContext(context.IndexSelectionChangeContext);
      if (!onSelectionChange)
        throw new Error("Missing IndexProvider context");
      return onSelectionChange;
    }
    function useIndexRow() {
      let indexRow = React2.useContext(context.IndexRowContext);
      if (!indexRow)
        throw new Error("Missing IndexProvider context");
      return indexRow;
    }
    function useIndexValue() {
      let index = React2.useContext(context.IndexContext);
      if (!index)
        throw new Error("Missing IndexProvider context");
      return index;
    }
    function useBulkSelectionData({
      selectedItemsCount,
      itemCount,
      hasMoreItems,
      resourceName: passedResourceName,
      defaultPaginatedSelectAllText
    }) {
      let i18n = hooks.useI18n(), selectable = Boolean(selectedItemsCount), selectMode = selectedItemsCount === "All" || selectedItemsCount > 0, defaultResourceName = {
        singular: i18n.translate("Polaris.IndexProvider.defaultItemSingular"),
        plural: i18n.translate("Polaris.IndexProvider.defaultItemPlural")
      }, resourceName = passedResourceName || defaultResourceName, paginatedSelectAllText = getPaginatedSelectAllText(), bulkActionsLabel = getBulkActionsLabel(), bulkActionsAccessibilityLabel = getBulkActionsAccessibilityLabel(), bulkSelectState = "indeterminate";
      return !selectedItemsCount || selectedItemsCount === 0 ? bulkSelectState = void 0 : (selectedItemsCount === types.SELECT_ALL_ITEMS || selectedItemsCount === itemCount) && (bulkSelectState = !0), {
        paginatedSelectAllText,
        bulkActionsLabel,
        bulkActionsAccessibilityLabel,
        resourceName,
        selectMode,
        bulkSelectState,
        selectable
      };
      function getPaginatedSelectAllText() {
        if (!(!selectable || !hasMoreItems) && selectedItemsCount === types.SELECT_ALL_ITEMS)
          return defaultPaginatedSelectAllText || i18n.translate("Polaris.IndexProvider.allItemsSelected", {
            itemsLength: itemCount,
            resourceNamePlural: resourceName.plural.toLocaleLowerCase()
          });
      }
      function getBulkActionsLabel() {
        let selectedItemsCountLabel = selectedItemsCount === types.SELECT_ALL_ITEMS ? `${itemCount}+` : selectedItemsCount;
        return i18n.translate("Polaris.IndexProvider.selected", {
          selectedItemsCount: selectedItemsCountLabel
        });
      }
      function getBulkActionsAccessibilityLabel() {
        let totalItemsCount = itemCount, allSelected = selectedItemsCount === totalItemsCount;
        return totalItemsCount === 1 && allSelected ? i18n.translate("Polaris.IndexProvider.a11yCheckboxDeselectAllSingle", {
          resourceNameSingular: resourceName.singular
        }) : totalItemsCount === 1 ? i18n.translate("Polaris.IndexProvider.a11yCheckboxSelectAllSingle", {
          resourceNameSingular: resourceName.singular
        }) : allSelected ? i18n.translate("Polaris.IndexProvider.a11yCheckboxDeselectAllMultiple", {
          itemsLength: itemCount,
          resourceNamePlural: resourceName.plural
        }) : i18n.translate("Polaris.IndexProvider.a11yCheckboxSelectAllMultiple", {
          itemsLength: itemCount,
          resourceNamePlural: resourceName.plural
        });
      }
    }
    function useHandleBulkSelection({
      onSelectionChange = () => {
      }
    }) {
      let lastSelected = React2.useRef(null);
      return React2.useCallback((selectionType, toggleType, selection, sortOrder) => {
        let prevSelected = lastSelected.current;
        if (types.SelectionType.Multi && typeof sortOrder == "number" && (lastSelected.current = sortOrder), selectionType === types.SelectionType.Single || selectionType === types.SelectionType.Multi && (typeof prevSelected != "number" || typeof sortOrder != "number"))
          onSelectionChange(types.SelectionType.Single, toggleType, selection);
        else if (selectionType === types.SelectionType.Multi) {
          let min = Math.min(prevSelected, sortOrder), max = Math.max(prevSelected, sortOrder);
          onSelectionChange(selectionType, toggleType, [min, max]);
        } else
          selectionType === types.SelectionType.Page || selectionType === types.SelectionType.All ? onSelectionChange(selectionType, toggleType) : selectionType === types.SelectionType.Range && onSelectionChange(types.SelectionType.Range, toggleType, selection);
      }, [onSelectionChange]);
    }
    exports.useBulkSelectionData = useBulkSelectionData;
    exports.useHandleBulkSelection = useHandleBulkSelection;
    exports.useIndexRow = useIndexRow;
    exports.useIndexSelectionChange = useIndexSelectionChange;
    exports.useIndexValue = useIndexValue;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexProvider/IndexProvider.js
var require_IndexProvider = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexProvider/IndexProvider.js"(exports) {
    "use strict";
    var React2 = require_react(), hooks = require_hooks13(), context = require_context17();
    function IndexProvider({
      children,
      resourceName: passedResourceName,
      loading,
      onSelectionChange,
      selectedItemsCount = 0,
      itemCount,
      hasMoreItems,
      condensed,
      selectable: isSelectableIndex = !0,
      paginatedSelectAllText: defaultPaginatedSelectAllText
    }) {
      let {
        paginatedSelectAllText,
        bulkActionsLabel,
        bulkActionsAccessibilityLabel,
        resourceName,
        selectMode,
        bulkSelectState
      } = hooks.useBulkSelectionData({
        selectedItemsCount,
        itemCount,
        hasMoreItems,
        resourceName: passedResourceName,
        defaultPaginatedSelectAllText
      }), handleSelectionChange = hooks.useHandleBulkSelection({
        onSelectionChange
      }), contextValue = React2.useMemo(() => ({
        itemCount,
        selectMode: selectMode && isSelectableIndex,
        selectable: isSelectableIndex,
        resourceName,
        loading,
        paginatedSelectAllText,
        hasMoreItems,
        bulkActionsLabel,
        bulkActionsAccessibilityLabel,
        bulkSelectState,
        selectedItemsCount,
        condensed
      }), [itemCount, selectMode, isSelectableIndex, resourceName, loading, paginatedSelectAllText, hasMoreItems, bulkActionsLabel, bulkActionsAccessibilityLabel, bulkSelectState, selectedItemsCount, condensed]), rowContextValue = React2.useMemo(() => ({
        selectable: isSelectableIndex,
        selectMode: selectMode && isSelectableIndex,
        condensed
      }), [condensed, selectMode, isSelectableIndex]);
      return /* @__PURE__ */ React2.createElement(context.IndexContext.Provider, {
        value: contextValue
      }, /* @__PURE__ */ React2.createElement(context.IndexRowContext.Provider, {
        value: rowContextValue
      }, /* @__PURE__ */ React2.createElement(context.IndexSelectionChangeContext.Provider, {
        value: handleSelectionChange
      }, children)));
    }
    exports.IndexProvider = IndexProvider;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexTable/components/Cell/Cell.js
var require_Cell3 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexTable/components/Cell/Cell.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), IndexTable_module = require_IndexTable_css(), Cell = /* @__PURE__ */ React2.memo(function({
      children,
      className: customClassName,
      flush,
      colSpan,
      headers,
      scope,
      as = "td",
      id
    }) {
      let className = css.classNames(customClassName, IndexTable_module.default.TableCell, flush && IndexTable_module.default["TableCell-flush"]);
      return /* @__PURE__ */ React2.createElement(as, {
        id,
        colSpan,
        headers,
        scope,
        className
      }, children);
    });
    exports.Cell = Cell;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexTable/components/Checkbox/Checkbox.css.js
var require_Checkbox_css2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexTable/components/Checkbox/Checkbox.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      TableCellContentContainer: "Polaris-IndexTable-Checkbox__TableCellContentContainer",
      Wrapper: "Polaris-IndexTable-Checkbox__Wrapper"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/index-table/context.js
var require_context18 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/index-table/context.js"(exports) {
    "use strict";
    var React2 = require_react(), RowContext = /* @__PURE__ */ React2.createContext({}), RowHoveredContext = /* @__PURE__ */ React2.createContext(void 0), scrollDefaultContext = {
      scrollableContainer: null,
      canScrollLeft: !1,
      canScrollRight: !1
    }, ScrollContext = /* @__PURE__ */ React2.createContext(scrollDefaultContext);
    exports.RowContext = RowContext;
    exports.RowHoveredContext = RowHoveredContext;
    exports.ScrollContext = ScrollContext;
    exports.scrollDefaultContext = scrollDefaultContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexTable/components/Checkbox/Checkbox.js
var require_Checkbox2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexTable/components/Checkbox/Checkbox.js"(exports) {
    "use strict";
    var React2 = require_react(), debounce = require_debounce(), css = require_css(), setRootProperty = require_set_root_property(), IndexTable_module = require_IndexTable_css(), Checkbox_module = require_Checkbox_css2(), hooks$1 = require_hooks13(), context = require_context18(), hooks = require_hooks2(), Checkbox$1 = require_Checkbox(), Checkbox = /* @__PURE__ */ React2.memo(function({
      accessibilityLabel
    }) {
      let i18n = hooks.useI18n(), {
        resourceName
      } = hooks$1.useIndexValue(), {
        itemId,
        selected,
        disabled,
        onInteraction
      } = React2.useContext(context.RowContext), label = accessibilityLabel || i18n.translate("Polaris.IndexTable.selectItem", {
        resourceName: resourceName.singular
      });
      return /* @__PURE__ */ React2.createElement(CheckboxWrapper, null, /* @__PURE__ */ React2.createElement("div", {
        className: Checkbox_module.default.TableCellContentContainer
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Checkbox_module.default.Wrapper,
        onClick: onInteraction,
        onKeyUp: noop
      }, /* @__PURE__ */ React2.createElement(Checkbox$1.Checkbox, {
        id: `Select-${itemId}`,
        label,
        labelHidden: !0,
        checked: selected,
        disabled
      }))));
    });
    function CheckboxWrapper({
      children
    }) {
      let {
        position
      } = React2.useContext(context.RowContext), checkboxNode = React2.useRef(null), handleResize = React2.useCallback(debounce.debounce(() => {
        if (position !== 0 || !checkboxNode.current)
          return;
        let {
          width
        } = checkboxNode.current.getBoundingClientRect();
        setRootProperty.setRootProperty("--pc-checkbox-offset", `${width}px`);
      }), [position]);
      React2.useEffect(() => {
        handleResize();
      }, [handleResize]), React2.useEffect(() => {
        if (checkboxNode.current)
          return window.addEventListener("resize", handleResize), () => {
            window.removeEventListener("resize", handleResize);
          };
      }, [handleResize]);
      let checkboxClassName = css.classNames(IndexTable_module.default.TableCell, IndexTable_module.default["TableCell-first"]);
      return /* @__PURE__ */ React2.createElement("td", {
        className: checkboxClassName,
        ref: checkboxNode
      }, children);
    }
    function noop() {
    }
    exports.Checkbox = Checkbox;
    exports.CheckboxWrapper = CheckboxWrapper;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexTable/components/Row/Row.js
var require_Row = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexTable/components/Row/Row.js"(exports) {
    "use strict";
    var React2 = require_react(), useToggle = require_use_toggle(), css = require_css(), IndexTable_module = require_IndexTable_css(), hooks = require_hooks13(), types = require_types4(), Checkbox = require_Checkbox2(), context = require_context18(), Row = /* @__PURE__ */ React2.memo(function({
      children,
      selected,
      id,
      position,
      tone,
      disabled,
      selectionRange,
      rowType = "data",
      accessibilityLabel,
      onNavigation,
      onClick
    }) {
      let {
        selectable,
        selectMode,
        condensed
      } = hooks.useIndexRow(), onSelectionChange = hooks.useIndexSelectionChange(), {
        value: hovered,
        setTrue: setHoverIn,
        setFalse: setHoverOut
      } = useToggle.useToggle(!1), handleInteraction = React2.useCallback((event) => {
        event.stopPropagation();
        let selectionType = types.SelectionType.Single;
        if ("key" in event && event.key !== " " || !onSelectionChange)
          return;
        event.nativeEvent.shiftKey ? selectionType = types.SelectionType.Multi : selectionRange && (selectionType = types.SelectionType.Range), onSelectionChange(selectionType, !selected, selectionRange ?? id, position);
      }, [id, onSelectionChange, selected, selectionRange, position]), contextValue = React2.useMemo(() => ({
        itemId: id,
        selected,
        position,
        onInteraction: handleInteraction,
        disabled
      }), [id, selected, disabled, position, handleInteraction]), primaryLinkElement = React2.useRef(null), isNavigating = React2.useRef(!1), tableRowRef = React2.useRef(null), tableRowCallbackRef = React2.useCallback((node) => {
        tableRowRef.current = node;
        let el = node?.querySelector("[data-primary-link]");
        el && (primaryLinkElement.current = el);
      }, []), rowClassName = css.classNames(IndexTable_module.default.TableRow, rowType === "subheader" && IndexTable_module.default["TableRow-subheader"], rowType === "child" && IndexTable_module.default["TableRow-child"], selectable && condensed && IndexTable_module.default.condensedRow, selected && IndexTable_module.default["TableRow-selected"], hovered && !condensed && IndexTable_module.default["TableRow-hovered"], disabled && IndexTable_module.default["TableRow-disabled"], tone && IndexTable_module.default[css.variationName("tone", tone)], !selectable && !onClick && !primaryLinkElement.current && IndexTable_module.default["TableRow-unclickable"]), handleRowClick;
      (!disabled && selectable || onClick || primaryLinkElement.current) && (handleRowClick = (event) => {
        if (rowType !== "subheader" && !(!tableRowRef.current || isNavigating.current)) {
          if (event.stopPropagation(), event.preventDefault(), onClick) {
            onClick();
            return;
          }
          if (primaryLinkElement.current && !selectMode) {
            isNavigating.current = !0;
            let {
              ctrlKey,
              metaKey
            } = event.nativeEvent;
            if (onNavigation && onNavigation(id), (ctrlKey || metaKey) && primaryLinkElement.current instanceof HTMLAnchorElement) {
              isNavigating.current = !1, window.open(primaryLinkElement.current.href, "_blank");
              return;
            }
            primaryLinkElement.current.dispatchEvent(new MouseEvent(event.type, event.nativeEvent));
          } else
            isNavigating.current = !1, handleInteraction(event);
        }
      });
      let RowWrapper = condensed ? "li" : "tr", checkboxMarkup = selectable ? /* @__PURE__ */ React2.createElement(Checkbox.Checkbox, {
        accessibilityLabel
      }) : null;
      return /* @__PURE__ */ React2.createElement(context.RowContext.Provider, {
        value: contextValue
      }, /* @__PURE__ */ React2.createElement(context.RowHoveredContext.Provider, {
        value: hovered
      }, /* @__PURE__ */ React2.createElement(RowWrapper, {
        key: id,
        id,
        className: rowClassName,
        onMouseEnter: setHoverIn,
        onMouseLeave: setHoverOut,
        onClick: handleRowClick,
        ref: tableRowCallbackRef
      }, checkboxMarkup, children)));
    });
    exports.Row = Row;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexTable/utilities/utilities.js
var require_utilities10 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexTable/utilities/utilities.js"(exports) {
    "use strict";
    function getTableHeadingsBySelector(wrapperElement, selector) {
      return wrapperElement ? Array.from(wrapperElement.querySelectorAll(selector)) : [];
    }
    exports.getTableHeadingsBySelector = getTableHeadingsBySelector;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexTable/components/ScrollContainer/ScrollContainer.css.js
var require_ScrollContainer_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexTable/components/ScrollContainer/ScrollContainer.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ScrollContainer: "Polaris-IndexTable-ScrollContainer"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexTable/components/ScrollContainer/ScrollContainer.js
var require_ScrollContainer = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexTable/components/ScrollContainer/ScrollContainer.js"(exports) {
    "use strict";
    var React2 = require_react(), debounce = require_debounce(), ScrollContainer_module = require_ScrollContainer_css(), context = require_context18();
    function ScrollContainer({
      children,
      scrollableContainerRef,
      onScroll
    }) {
      React2.useEffect(() => {
        scrollableContainerRef.current && scrollableContainerRef.current.dispatchEvent(new Event("scroll"));
      }, [scrollableContainerRef]);
      let [containerScroll, setContainerScroll] = React2.useState(context.scrollDefaultContext), handleScroll = React2.useCallback(debounce.debounce(() => {
        if (!scrollableContainerRef.current)
          return;
        let availableScrollAmount = scrollableContainerRef.current.scrollWidth - scrollableContainerRef.current.offsetWidth, canScrollLeft = scrollableContainerRef.current.scrollLeft > 0, canScrollRight = scrollableContainerRef.current.scrollLeft < availableScrollAmount;
        onScroll(canScrollLeft, canScrollRight), setContainerScroll({
          scrollableContainer: scrollableContainerRef.current,
          canScrollLeft,
          canScrollRight
        });
      }, 40, {
        trailing: !0,
        leading: !0,
        maxWait: 40
      }), [onScroll, scrollableContainerRef]);
      return /* @__PURE__ */ React2.createElement(context.ScrollContext.Provider, {
        value: containerScroll
      }, /* @__PURE__ */ React2.createElement("div", {
        className: ScrollContainer_module.default.ScrollContainer,
        ref: scrollableContainerRef,
        onScroll: handleScroll
      }, children));
    }
    exports.ScrollContainer = ScrollContainer;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexTable/IndexTable.js
var require_IndexTable = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexTable/IndexTable.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), reactTransitionGroup = require("react-transition-group"), debounce = require_debounce(), useToggle = require_use_toggle(), css = require_css(), useTheme = require_use_theme(), IndexTable_module = require_IndexTable_css(), IndexProvider = require_IndexProvider(), Cell = require_Cell3(), Row = require_Row(), types = require_types4(), utilities = require_utilities10(), EmptySearchResult = require_EmptySearchResult(), ScrollContainer = require_ScrollContainer(), BulkActions = require_BulkActions(), hooks = require_hooks13(), hooks$1 = require_hooks2(), Spinner2 = require_Spinner(), AfterInitialMount = require_AfterInitialMount(), EventListener = require_EventListener(), Pagination = require_Pagination(), Checkbox = require_Checkbox(), Text3 = require_Text(), LegacyStack = require_LegacyStack(), Badge3 = require_Badge(), UnstyledButton = require_UnstyledButton(), Tooltip = require_Tooltip(), Sticky = require_Sticky(), SCROLL_BAR_PADDING = 16, SCROLL_BAR_DEBOUNCE_PERIOD = 300;
    function IndexTableBase({
      headings,
      bulkActions = [],
      promotedBulkActions = [],
      children,
      emptyState,
      sort,
      paginatedSelectAllActionText,
      lastColumnSticky = !1,
      sortable,
      sortDirection,
      defaultSortDirection = "descending",
      sortColumnIndex,
      onSort,
      sortToggleLabels,
      hasZebraStriping,
      pagination,
      ...restProps
    }) {
      let theme = useTheme.useTheme(), {
        loading,
        bulkSelectState,
        resourceName,
        bulkActionsAccessibilityLabel,
        selectMode,
        selectable = restProps.selectable,
        paginatedSelectAllText,
        itemCount,
        hasMoreItems,
        selectedItemsCount,
        condensed
      } = hooks.useIndexValue(), handleSelectionChange = hooks.useIndexSelectionChange(), i18n = hooks$1.useI18n(), {
        value: hasMoreLeftColumns,
        toggle: toggleHasMoreLeftColumns
      } = useToggle.useToggle(!1), tablePosition = React2.useRef({
        top: 0,
        left: 0
      }), tableHeadingRects = React2.useRef([]), scrollableContainerElement = React2.useRef(null), tableElement = React2.useRef(null), tableBodyElement = React2.useRef(null), condensedListElement = React2.useRef(null), loadingElement = React2.useRef(null), [tableInitialized, setTableInitialized] = React2.useState(!1), [stickyWrapper, setStickyWrapper] = React2.useState(null), [hideScrollContainer, setHideScrollContainer] = React2.useState(!0), tableHeadings = React2.useRef([]), stickyTableHeadings = React2.useRef([]), stickyHeaderWrapperElement = React2.useRef(null), firstStickyHeaderElement = React2.useRef(null), stickyHeaderElement = React2.useRef(null), scrollBarElement = React2.useRef(null), scrollContainerElement = React2.useRef(null), scrollingWithBar = React2.useRef(!1), scrollingContainer = React2.useRef(!1), lastSortedColumnIndex = React2.useRef(sortColumnIndex), renderAfterSelectEvent = React2.useRef(!1), lastSelectedItemsCount = React2.useRef(0), hasSelected = React2.useRef(!1);
      selectedItemsCount !== lastSelectedItemsCount.current && (renderAfterSelectEvent.current = !0, lastSelectedItemsCount.current = selectedItemsCount), !hasSelected.current && selectedItemsCount !== 0 && (hasSelected.current = !0);
      let tableBodyRef = React2.useCallback((node) => {
        node !== null && !tableInitialized && setTableInitialized(!0), tableBodyElement.current = node;
      }, [tableInitialized]), handleSelectAllItemsInStore = React2.useCallback(() => {
        handleSelectionChange(selectedItemsCount === types.SELECT_ALL_ITEMS ? types.SelectionType.Page : types.SelectionType.All, !0);
      }, [handleSelectionChange, selectedItemsCount]), resizeTableHeadings = React2.useMemo(() => debounce.debounce(() => {
        if (!tableElement.current || !scrollableContainerElement.current)
          return;
        let boundingRect = scrollableContainerElement.current.getBoundingClientRect();
        tablePosition.current = {
          top: boundingRect.top,
          left: boundingRect.left
        }, tableHeadingRects.current = tableHeadings.current.map((heading) => ({
          offsetWidth: heading.offsetWidth || 0,
          offsetLeft: heading.offsetLeft || 0
        })), tableHeadings.current.length !== 0 && (selectable && tableHeadings.current.length > 1 && (tableHeadings.current[1].style.left = `${tableHeadingRects.current[0].offsetWidth}px`, stickyTableHeadings.current?.length && (stickyTableHeadings.current[1].style.left = `${tableHeadingRects.current[0].offsetWidth}px`)), stickyTableHeadings.current?.length && stickyTableHeadings.current.forEach((heading, index) => {
          heading.style.minWidth = `${tableHeadingRects.current[index]?.offsetWidth || 0}px`;
        }));
      }), [selectable]), resizeTableScrollBar = React2.useCallback(() => {
        scrollBarElement.current && tableElement.current && tableInitialized && (scrollBarElement.current.style.setProperty("--pc-index-table-scroll-bar-content-width", `${tableElement.current.offsetWidth - SCROLL_BAR_PADDING}px`), setHideScrollContainer(scrollContainerElement.current?.offsetWidth === tableElement.current?.offsetWidth));
      }, [tableInitialized]), debounceResizeTableScrollbar = React2.useCallback(debounce.debounce(resizeTableScrollBar, SCROLL_BAR_DEBOUNCE_PERIOD, {
        trailing: !0
      }), [resizeTableScrollBar]), [canScrollRight, setCanScrollRight] = React2.useState(!0), handleCanScrollRight = React2.useCallback(debounce.debounce(() => {
        if (!lastColumnSticky || !tableElement.current || !scrollableContainerElement.current)
          return;
        let tableRect = tableElement.current.getBoundingClientRect(), scrollableRect = scrollableContainerElement.current.getBoundingClientRect();
        setCanScrollRight(tableRect.width > scrollableRect.width);
      }), [lastColumnSticky]);
      React2.useEffect(() => {
        handleCanScrollRight();
      }, [handleCanScrollRight]);
      let [canFitStickyColumn, setCanFitStickyColumn] = React2.useState(!0), handleCanFitStickyColumn = React2.useCallback(() => {
        if (!scrollableContainerElement.current || !tableHeadings.current.length)
          return;
        let scrollableRect = scrollableContainerElement.current.getBoundingClientRect(), checkboxColumnWidth = selectable ? tableHeadings.current[0].getBoundingClientRect().width : 0, firstStickyColumnWidth = tableHeadings.current[selectable ? 1 : 0].getBoundingClientRect().width, lastColumnIsNotTheFirst = selectable ? tableHeadings.current.length > 2 : 1, lastStickyColumnWidth = lastColumnSticky && lastColumnIsNotTheFirst ? tableHeadings.current[tableHeadings.current.length - 1].getBoundingClientRect().width : 0, restOfContentMinWidth = 100;
        setCanFitStickyColumn(scrollableRect.width > firstStickyColumnWidth + checkboxColumnWidth + lastStickyColumnWidth + restOfContentMinWidth);
      }, [lastColumnSticky, selectable]);
      React2.useEffect(() => {
        tableInitialized && handleCanFitStickyColumn();
      }, [handleCanFitStickyColumn, tableInitialized]);
      let handleResize = React2.useCallback(() => {
        scrollBarElement.current?.style.setProperty("--pc-index-table-scroll-bar-content-width", "0px"), resizeTableHeadings(), debounceResizeTableScrollbar(), handleCanScrollRight(), handleCanFitStickyColumn();
      }, [resizeTableHeadings, debounceResizeTableScrollbar, handleCanScrollRight, handleCanFitStickyColumn]), handleScrollContainerScroll = React2.useCallback((canScrollLeft, canScrollRight2) => {
        !scrollableContainerElement.current || !scrollBarElement.current || (scrollingWithBar.current || (scrollingContainer.current = !0, scrollBarElement.current.scrollLeft = scrollableContainerElement.current.scrollLeft), scrollingWithBar.current = !1, stickyHeaderElement.current && (stickyHeaderElement.current.scrollLeft = scrollableContainerElement.current.scrollLeft), (canScrollLeft && !hasMoreLeftColumns || !canScrollLeft && hasMoreLeftColumns) && toggleHasMoreLeftColumns(), setCanScrollRight(canScrollRight2));
      }, [hasMoreLeftColumns, toggleHasMoreLeftColumns]), handleScrollBarScroll = React2.useCallback(() => {
        !scrollableContainerElement.current || !scrollBarElement.current || (scrollingContainer.current || (scrollingWithBar.current = !0, scrollableContainerElement.current.scrollLeft = scrollBarElement.current.scrollLeft), scrollingContainer.current = !1);
      }, []);
      React2.useLayoutEffect(() => {
        tableHeadings.current = utilities.getTableHeadingsBySelector(tableElement.current, "[data-index-table-heading]"), stickyTableHeadings.current = utilities.getTableHeadingsBySelector(stickyHeaderWrapperElement.current, "[data-index-table-sticky-heading]"), resizeTableHeadings();
      }, [headings, resizeTableHeadings, firstStickyHeaderElement, tableInitialized]), React2.useEffect(() => {
        resizeTableScrollBar(), setStickyWrapper(condensed ? condensedListElement.current : tableElement.current);
      }, [tableInitialized, resizeTableScrollBar, condensed]);
      let headingsMarkup = headings.map((heading, index) => renderHeading(heading, index, "th", {
        "data-index-table-heading": !0
      }, heading.id)), stickyHeadingsMarkup = headings.map((heading, index) => (
        // NOTE: No id since it would be a duplicate of the non-sticky header's id
        renderHeading(heading, index, "div", {
          "data-index-table-sticky-heading": !0
        })
      )), [selectedItemsCountValue, setSelectedItemsCountValue] = React2.useState(selectedItemsCount === types.SELECT_ALL_ITEMS ? `${itemCount}+` : selectedItemsCount);
      React2.useEffect(() => {
        (selectedItemsCount === types.SELECT_ALL_ITEMS || selectedItemsCount > 0) && setSelectedItemsCountValue(selectedItemsCount === types.SELECT_ALL_ITEMS ? `${itemCount}+` : selectedItemsCount);
      }, [selectedItemsCount, itemCount]);
      let selectAllActionsLabel = i18n.translate("Polaris.IndexTable.selected", {
        selectedItemsCount: selectedItemsCountValue
      }), handleTogglePage = React2.useCallback(() => {
        handleSelectionChange(types.SelectionType.Page, Boolean(!bulkSelectState || bulkSelectState === "indeterminate"));
      }, [bulkSelectState, handleSelectionChange]), paginatedSelectAllAction = getPaginatedSelectAllAction(), loadingTransitionClassNames = {
        enter: IndexTable_module.default["LoadingContainer-enter"],
        enterActive: IndexTable_module.default["LoadingContainer-enter-active"],
        exit: IndexTable_module.default["LoadingContainer-exit"],
        exitActive: IndexTable_module.default["LoadingContainer-exit-active"]
      }, loadingMarkup = /* @__PURE__ */ React2.createElement(reactTransitionGroup.CSSTransition, {
        in: loading,
        classNames: loadingTransitionClassNames,
        timeout: parseInt(theme.motion["motion-duration-100"], 10),
        nodeRef: loadingElement,
        appear: !0,
        unmountOnExit: !0
      }, /* @__PURE__ */ React2.createElement("div", {
        className: IndexTable_module.default.LoadingPanel,
        ref: loadingElement
      }, /* @__PURE__ */ React2.createElement("div", {
        className: IndexTable_module.default.LoadingPanelRow
      }, /* @__PURE__ */ React2.createElement(Spinner2.Spinner, {
        size: "small"
      }), /* @__PURE__ */ React2.createElement("span", {
        className: IndexTable_module.default.LoadingPanelText
      }, i18n.translate("Polaris.IndexTable.resourceLoadingAccessibilityLabel", {
        resourceNamePlural: resourceName.plural.toLocaleLowerCase()
      }))))), stickyTableClassNames = css.classNames(IndexTable_module.default.StickyTable, hasMoreLeftColumns && IndexTable_module.default["StickyTable-scrolling"], condensed && IndexTable_module.default["StickyTable-condensed"]), shouldShowActions = !condensed || selectedItemsCount, promotedActions = shouldShowActions ? promotedBulkActions : [], actions = shouldShowActions ? bulkActions : [], stickyHeaderMarkup = /* @__PURE__ */ React2.createElement("div", {
        className: stickyTableClassNames,
        role: "presentation"
      }, /* @__PURE__ */ React2.createElement(Sticky.Sticky, {
        boundingElement: stickyWrapper
      }, (isSticky) => {
        let stickyHeaderClassNames = css.classNames(
          IndexTable_module.default.StickyTableHeader,
          isSticky && IndexTable_module.default["StickyTableHeader-isSticky"],
          // Has a sticky left column enabled
          canFitStickyColumn && IndexTable_module.default["StickyTableHeader-sticky"],
          // ie; is scrolled to the right
          hasMoreLeftColumns && IndexTable_module.default["StickyTableHeader-scrolling"],
          // Has a sticky right column enabled
          canFitStickyColumn && lastColumnSticky && IndexTable_module.default["StickyTableHeader-sticky-last"],
          // ie; is scrolled to the left
          canFitStickyColumn && lastColumnSticky && canScrollRight && IndexTable_module.default["StickyTableHeader-sticky-scrolling"]
        ), bulkActionsClassName = css.classNames(IndexTable_module.default.BulkActionsWrapper, selectMode && IndexTable_module.default.BulkActionsWrapperVisible, condensed && IndexTable_module.default["StickyTableHeader-condensed"], isSticky && IndexTable_module.default["StickyTableHeader-isSticky"]), bulkActionsMarkup = shouldShowActions && !condensed ? /* @__PURE__ */ React2.createElement("div", {
          className: bulkActionsClassName
        }, /* @__PURE__ */ React2.createElement(BulkActions.BulkActions, {
          selectMode,
          onToggleAll: handleTogglePage,
          paginatedSelectAllText,
          paginatedSelectAllAction,
          accessibilityLabel: bulkActionsAccessibilityLabel,
          selected: bulkSelectState,
          promotedActions,
          actions,
          onSelectModeToggle: condensed ? handleSelectModeToggle : void 0,
          label: selectAllActionsLabel,
          buttonSize: "micro"
        })) : null, headerMarkup = condensed ? /* @__PURE__ */ React2.createElement("div", {
          className: css.classNames(IndexTable_module.default.HeaderWrapper, (!selectable || condensed) && IndexTable_module.default.unselectable)
        }, loadingMarkup, sort) : /* @__PURE__ */ React2.createElement("div", {
          className: stickyHeaderClassNames,
          ref: stickyHeaderWrapperElement
        }, loadingMarkup, /* @__PURE__ */ React2.createElement("div", {
          className: IndexTable_module.default.StickyTableHeadings,
          ref: stickyHeaderElement
        }, stickyHeadingsMarkup));
        return /* @__PURE__ */ React2.createElement(React2.Fragment, null, headerMarkup, bulkActionsMarkup);
      })), scrollBarWrapperClassNames = css.classNames(IndexTable_module.default.ScrollBarContainer, pagination && IndexTable_module.default.ScrollBarContainerWithPagination, condensed && IndexTable_module.default.scrollBarContainerCondensed, hideScrollContainer && IndexTable_module.default.scrollBarContainerHidden), scrollBarClassNames = css.classNames(tableElement.current && tableInitialized && IndexTable_module.default.ScrollBarContent), scrollBarMarkup = itemCount > 0 ? /* @__PURE__ */ React2.createElement(AfterInitialMount.AfterInitialMount, {
        onMount: resizeTableScrollBar
      }, /* @__PURE__ */ React2.createElement("div", {
        className: scrollBarWrapperClassNames,
        ref: scrollContainerElement
      }, /* @__PURE__ */ React2.createElement("div", {
        onScroll: handleScrollBarScroll,
        className: IndexTable_module.default.ScrollBar,
        ref: scrollBarElement
      }, /* @__PURE__ */ React2.createElement("div", {
        className: scrollBarClassNames
      })))) : null, isSortable = sortable?.some((value) => value), tableClassNames = css.classNames(IndexTable_module.default.Table, hasMoreLeftColumns && IndexTable_module.default["Table-scrolling"], selectMode && IndexTable_module.default.disableTextSelection, !selectable && IndexTable_module.default["Table-unselectable"], canFitStickyColumn && IndexTable_module.default["Table-sticky"], isSortable && IndexTable_module.default["Table-sortable"], canFitStickyColumn && lastColumnSticky && IndexTable_module.default["Table-sticky-last"], canFitStickyColumn && lastColumnSticky && canScrollRight && IndexTable_module.default["Table-sticky-scrolling"], hasZebraStriping && IndexTable_module.default.ZebraStriping), emptyStateMarkup = emptyState || /* @__PURE__ */ React2.createElement(EmptySearchResult.EmptySearchResult, {
        title: i18n.translate("Polaris.IndexTable.emptySearchTitle", {
          resourceNamePlural: resourceName.plural
        }),
        description: i18n.translate("Polaris.IndexTable.emptySearchDescription"),
        withIllustration: !0
      }), sharedMarkup = /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
        event: "resize",
        handler: handleResize
      }), stickyHeaderMarkup), condensedClassNames = css.classNames(IndexTable_module.default.CondensedList, hasZebraStriping && IndexTable_module.default.ZebraStriping), bodyMarkup = condensed ? /* @__PURE__ */ React2.createElement(React2.Fragment, null, sharedMarkup, /* @__PURE__ */ React2.createElement("ul", {
        "data-selectmode": Boolean(selectMode),
        className: condensedClassNames,
        ref: condensedListElement
      }, children)) : /* @__PURE__ */ React2.createElement(React2.Fragment, null, sharedMarkup, /* @__PURE__ */ React2.createElement(ScrollContainer.ScrollContainer, {
        scrollableContainerRef: scrollableContainerElement,
        onScroll: handleScrollContainerScroll
      }, /* @__PURE__ */ React2.createElement("table", {
        ref: tableElement,
        className: tableClassNames
      }, /* @__PURE__ */ React2.createElement("thead", null, /* @__PURE__ */ React2.createElement("tr", {
        className: IndexTable_module.default.HeadingRow
      }, headingsMarkup)), /* @__PURE__ */ React2.createElement("tbody", {
        ref: tableBodyRef
      }, children)))), tableContentMarkup = itemCount > 0 ? bodyMarkup : /* @__PURE__ */ React2.createElement("div", {
        className: IndexTable_module.default.EmptySearchResultWrapper
      }, emptyStateMarkup), paginationMarkup = pagination ? /* @__PURE__ */ React2.createElement("div", {
        className: IndexTable_module.default.PaginationWrapper
      }, /* @__PURE__ */ React2.createElement(Pagination.Pagination, Object.assign({
        type: "table"
      }, pagination))) : null;
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("div", {
        className: IndexTable_module.default.IndexTable
      }, /* @__PURE__ */ React2.createElement("div", {
        className: IndexTable_module.default.IndexTableWrapper
      }, !condensed && loadingMarkup, tableContentMarkup, scrollBarMarkup, paginationMarkup)));
      function renderHeading(heading, index, Tag, tagProps, id) {
        let isSecond = index === 0, isLast = index === headings.length - 1, hasSortable = sortable?.some((value) => value === !0), headingAlignment = heading.alignment || "start", headingContentClassName = css.classNames(IndexTable_module.default.TableHeading, headingAlignment === "center" && IndexTable_module.default["TableHeading-align-center"], headingAlignment === "end" && IndexTable_module.default["TableHeading-align-end"], hasSortable && IndexTable_module.default["TableHeading-sortable"], isSecond && IndexTable_module.default["TableHeading-second"], isLast && !heading.hidden && IndexTable_module.default["TableHeading-last"], !selectable && IndexTable_module.default["TableHeading-unselectable"], heading.flush && IndexTable_module.default["TableHeading-flush"]), stickyPositioningStyle = selectable !== !1 && isSecond && tableHeadingRects.current && tableHeadingRects.current.length > 0 ? {
          left: tableHeadingRects.current[0].offsetWidth
        } : void 0, headingContent = /* @__PURE__ */ React2.createElement(Tag, Object.assign({
          id,
          className: headingContentClassName,
          key: getHeadingKey(heading),
          style: stickyPositioningStyle
        }, tagProps), renderHeadingContent(heading, index));
        if (index !== 0 || !selectable)
          return headingContent;
        let checkboxClassName = css.classNames(IndexTable_module.default.TableHeading, hasSortable && IndexTable_module.default["TableHeading-sortable"], index === 0 && IndexTable_module.default["TableHeading-first"]);
        return [/* @__PURE__ */ React2.createElement(Tag, Object.assign({
          className: checkboxClassName,
          key: `${heading}-${index}`
        }, tagProps), renderCheckboxContent()), headingContent];
      }
      function renderCheckboxContent() {
        return /* @__PURE__ */ React2.createElement("div", {
          className: IndexTable_module.default.ColumnHeaderCheckboxWrapper
        }, /* @__PURE__ */ React2.createElement(Checkbox.Checkbox, {
          label: i18n.translate("Polaris.IndexTable.selectAllLabel", {
            resourceNamePlural: resourceName.plural
          }),
          labelHidden: !0,
          onChange: handleSelectPage,
          checked: bulkSelectState
        }));
      }
      function handleSortHeadingClick(index, direction) {
        renderAfterSelectEvent.current = !1, hasSelected.current = !1, lastSortedColumnIndex.current = sortColumnIndex, onSort?.(index, direction);
      }
      function renderHeadingContent(heading, index) {
        let headingContent, defaultTooltipProps = {
          width: heading.tooltipWidth ?? "default",
          activatorWrapper: "div",
          dismissOnMouseOut: !0,
          persistOnClick: heading.tooltipPersistsOnClick
        }, defaultHeaderTooltipProps = {
          ...defaultTooltipProps,
          padding: "400",
          borderRadius: "200",
          content: heading.tooltipContent,
          preferredPosition: "above"
        }, headingTitle = /* @__PURE__ */ React2.createElement(Text3.Text, {
          as: "span",
          variant: "bodySm",
          fontWeight: "medium",
          visuallyHidden: heading.hidden
        }, heading.title);
        heading.new ? headingContent = /* @__PURE__ */ React2.createElement(LegacyStack.LegacyStack, {
          wrap: !1,
          alignment: "center"
        }, headingTitle, /* @__PURE__ */ React2.createElement(Badge3.Badge, {
          tone: "new"
        }, i18n.translate("Polaris.IndexTable.onboardingBadgeText"))) : headingContent = headingTitle;
        let style = {
          "--pc-index-table-heading-extra-padding-right": heading.paddingBlockEnd ? `var(--p-space-${heading.paddingBlockEnd})` : "0"
        };
        if (sortable?.[index]) {
          let isCurrentlySorted = index === sortColumnIndex, isPreviouslySorted = !isCurrentlySorted && index === lastSortedColumnIndex.current, isRenderAfterSelectEvent = renderAfterSelectEvent.current || !hasSelected.current && selectedItemsCount !== 0, isAscending = sortDirection === "ascending", newDirection = heading.defaultSortDirection ?? defaultSortDirection, SourceComponent = newDirection === "ascending" ? polarisIcons.SortAscendingIcon : polarisIcons.SortDescendingIcon;
          isCurrentlySorted && (newDirection = isAscending ? "descending" : "ascending", SourceComponent = sortDirection === "ascending" ? polarisIcons.SortAscendingIcon : polarisIcons.SortDescendingIcon);
          let iconMarkup = /* @__PURE__ */ React2.createElement("span", {
            className: css.classNames(IndexTable_module.default.TableHeadingSortIcon, heading?.alignment === "end" && IndexTable_module.default["TableHeadingSortIcon-heading-align-end"], isCurrentlySorted && IndexTable_module.default["TableHeadingSortIcon-visible"])
          }, /* @__PURE__ */ React2.createElement(SourceComponent, {
            focusable: "false",
            "aria-hidden": "true",
            className: IndexTable_module.default.TableHeadingSortSvg
          })), defaultSortButtonProps = {
            onClick: () => handleSortHeadingClick(index, newDirection),
            className: css.classNames(IndexTable_module.default.TableHeadingSortButton, !isCurrentlySorted && heading?.alignment === "end" && IndexTable_module.default["TableHeadingSortButton-heading-align-end"], isCurrentlySorted && heading?.alignment === "end" && IndexTable_module.default["TableHeadingSortButton-heading-align-end-currently-sorted"], isPreviouslySorted && !isRenderAfterSelectEvent && heading?.alignment === "end" && IndexTable_module.default["TableHeadingSortButton-heading-align-end-previously-sorted"]),
            tabIndex: selectMode ? -1 : 0
          }, sortMarkup = /* @__PURE__ */ React2.createElement(UnstyledButton.UnstyledButton, defaultSortButtonProps, iconMarkup, /* @__PURE__ */ React2.createElement("span", {
            className: css.classNames(sortToggleLabels && selectMode && heading.tooltipContent && IndexTable_module.default.TableHeadingTooltipUnderlinePlaceholder)
          }, headingContent));
          if (!sortToggleLabels || selectMode)
            return /* @__PURE__ */ React2.createElement("div", {
              className: IndexTable_module.default.SortableTableHeadingWithCustomMarkup
            }, sortMarkup);
          let tooltipDirection = isCurrentlySorted ? sortDirection : newDirection, sortTooltipContent = sortToggleLabels[index][tooltipDirection];
          if (!heading.tooltipContent)
            return (
              // Regular header with sort icon and sort direction tooltip
              /* @__PURE__ */ React2.createElement("div", {
                style,
                className: css.classNames(heading.paddingBlockEnd && IndexTable_module.default["TableHeading-extra-padding-right"])
              }, /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, Object.assign({}, defaultTooltipProps, {
                content: sortTooltipContent,
                preferredPosition: "above"
              }), sortMarkup))
            );
          if (heading.tooltipContent)
            return (
              // Header text and sort icon have separate tooltips
              /* @__PURE__ */ React2.createElement("div", {
                className: css.classNames(IndexTable_module.default.SortableTableHeadingWithCustomMarkup, heading.paddingBlockEnd && IndexTable_module.default["TableHeading-extra-padding-right"]),
                style
              }, /* @__PURE__ */ React2.createElement(UnstyledButton.UnstyledButton, defaultSortButtonProps, /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, defaultHeaderTooltipProps, /* @__PURE__ */ React2.createElement("span", {
                className: IndexTable_module.default.TableHeadingUnderline
              }, headingContent)), /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, Object.assign({}, defaultTooltipProps, {
                content: sortTooltipContent,
                preferredPosition: "above"
              }), iconMarkup)))
            );
        }
        return heading.tooltipContent ? (
          // Non-sortable header with tooltip
          /* @__PURE__ */ React2.createElement("div", {
            style,
            className: css.classNames(heading.paddingBlockEnd && IndexTable_module.default["TableHeading-extra-padding-right"])
          }, /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, Object.assign({}, defaultHeaderTooltipProps, {
            activatorWrapper: "span"
          }), /* @__PURE__ */ React2.createElement("span", {
            className: css.classNames(IndexTable_module.default.TableHeadingUnderline, IndexTable_module.default.SortableTableHeaderWrapper)
          }, headingContent)))
        ) : /* @__PURE__ */ React2.createElement("div", {
          style,
          className: css.classNames(heading.paddingBlockEnd && IndexTable_module.default["TableHeading-extra-padding-right"])
        }, headingContent);
      }
      function handleSelectPage(checked) {
        handleSelectionChange(types.SelectionType.Page, checked);
      }
      function getPaginatedSelectAllAction() {
        if (!selectable || !hasMoreItems)
          return;
        let customActionText = paginatedSelectAllActionText ?? i18n.translate("Polaris.IndexTable.selectAllItems", {
          itemsLength: itemCount,
          resourceNamePlural: resourceName.plural.toLocaleLowerCase()
        });
        return {
          content: selectedItemsCount === types.SELECT_ALL_ITEMS ? i18n.translate("Polaris.IndexTable.undo") : customActionText,
          onAction: handleSelectAllItemsInStore
        };
      }
      function handleSelectModeToggle() {
        handleSelectionChange(types.SelectionType.All, !1);
      }
    }
    function getHeadingKey(heading) {
      return heading.id ? heading.id : typeof heading.title == "string" ? heading.title : "";
    }
    function IndexTable({
      children,
      selectable = !0,
      itemCount,
      selectedItemsCount = 0,
      resourceName: passedResourceName,
      loading,
      hasMoreItems,
      condensed,
      onSelectionChange,
      paginatedSelectAllText,
      ...indexTableBaseProps
    }) {
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(IndexProvider.IndexProvider, {
        selectable: selectable && !condensed,
        itemCount,
        selectedItemsCount,
        resourceName: passedResourceName,
        loading,
        hasMoreItems,
        condensed,
        onSelectionChange,
        paginatedSelectAllText
      }, /* @__PURE__ */ React2.createElement(IndexTableBase, indexTableBaseProps, children)));
    }
    IndexTable.Cell = Cell.Cell;
    IndexTable.Row = Row.Row;
    exports.IndexTable = IndexTable;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/InlineCode/InlineCode.css.js
var require_InlineCode_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/InlineCode/InlineCode.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Code: "Polaris-InlineCode__Code"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/InlineCode/InlineCode.js
var require_InlineCode = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/InlineCode/InlineCode.js"(exports) {
    "use strict";
    var React2 = require_react(), InlineCode_module = require_InlineCode_css(), InlineCode = ({
      children
    }) => /* @__PURE__ */ React2.createElement("code", {
      className: InlineCode_module.default.Code
    }, children);
    exports.InlineCode = InlineCode;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/KeyboardKey/KeyboardKey.css.js
var require_KeyboardKey_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/KeyboardKey/KeyboardKey.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      KeyboardKey: "Polaris-KeyboardKey",
      small: "Polaris-KeyboardKey--small"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/KeyboardKey/KeyboardKey.js
var require_KeyboardKey = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/KeyboardKey/KeyboardKey.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), KeyboardKey_module = require_KeyboardKey_css();
    function KeyboardKey({
      children = "",
      size
    }) {
      let key = !size && children.length > 1 ? children.toLowerCase() : children.toUpperCase(), className = css.classNames(KeyboardKey_module.default.KeyboardKey, size && KeyboardKey_module.default[size]);
      return /* @__PURE__ */ React2.createElement("kbd", {
        className
      }, key);
    }
    exports.KeyboardKey = KeyboardKey;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Layout/Layout.css.js
var require_Layout_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Layout/Layout.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Layout: "Polaris-Layout",
      Section: "Polaris-Layout__Section",
      "Section-fullWidth": "Polaris-Layout__Section--fullWidth",
      "Section-oneHalf": "Polaris-Layout__Section--oneHalf",
      "Section-oneThird": "Polaris-Layout__Section--oneThird",
      AnnotatedSection: "Polaris-Layout__AnnotatedSection",
      AnnotationWrapper: "Polaris-Layout__AnnotationWrapper",
      AnnotationContent: "Polaris-Layout__AnnotationContent",
      Annotation: "Polaris-Layout__Annotation"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TextContainer/TextContainer.css.js
var require_TextContainer_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TextContainer/TextContainer.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      TextContainer: "Polaris-TextContainer",
      spacingTight: "Polaris-TextContainer--spacingTight",
      spacingLoose: "Polaris-TextContainer--spacingLoose"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TextContainer/TextContainer.js
var require_TextContainer = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TextContainer/TextContainer.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), TextContainer_module = require_TextContainer_css();
    function TextContainer({
      spacing,
      children
    }) {
      let className = css.classNames(TextContainer_module.default.TextContainer, spacing && TextContainer_module.default[css.variationName("spacing", spacing)]);
      return /* @__PURE__ */ React2.createElement("div", {
        className
      }, children);
    }
    exports.TextContainer = TextContainer;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Layout/components/AnnotatedSection/AnnotatedSection.js
var require_AnnotatedSection = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Layout/components/AnnotatedSection/AnnotatedSection.js"(exports) {
    "use strict";
    var React2 = require_react(), Layout_module = require_Layout_css(), TextContainer = require_TextContainer(), Text3 = require_Text(), Box3 = require_Box();
    function AnnotatedSection({
      children,
      title,
      description,
      id
    }) {
      let descriptionMarkup = typeof description == "string" ? /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "p",
        variant: "bodyMd"
      }, description) : description;
      return /* @__PURE__ */ React2.createElement("div", {
        className: Layout_module.default.AnnotatedSection
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Layout_module.default.AnnotationWrapper
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Layout_module.default.Annotation
      }, /* @__PURE__ */ React2.createElement(TextContainer.TextContainer, {
        spacing: "tight"
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        id,
        variant: "headingMd",
        as: "h2"
      }, title), descriptionMarkup && /* @__PURE__ */ React2.createElement(Box3.Box, {
        color: "text-secondary"
      }, descriptionMarkup))), /* @__PURE__ */ React2.createElement("div", {
        className: Layout_module.default.AnnotationContent
      }, children)));
    }
    exports.AnnotatedSection = AnnotatedSection;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Layout/components/Section/Section.js
var require_Section6 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Layout/components/Section/Section.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Layout_module = require_Layout_css();
    function Section({
      children,
      variant
    }) {
      let className = css.classNames(Layout_module.default.Section, Layout_module.default[`Section-${variant}`]);
      return /* @__PURE__ */ React2.createElement("div", {
        className
      }, children);
    }
    exports.Section = Section;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Layout/Layout.js
var require_Layout = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Layout/Layout.js"(exports) {
    "use strict";
    var React2 = require_react(), Layout_module = require_Layout_css(), AnnotatedSection = require_AnnotatedSection(), Section = require_Section6(), Layout2 = function({
      sectioned,
      children
    }) {
      let content = sectioned ? /* @__PURE__ */ React2.createElement(Section.Section, null, children) : children;
      return /* @__PURE__ */ React2.createElement("div", {
        className: Layout_module.default.Layout
      }, content);
    };
    Layout2.AnnotatedSection = AnnotatedSection.AnnotatedSection;
    Layout2.Section = Section.Section;
    exports.Layout = Layout2;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyFilters/LegacyFilters.css.js
var require_LegacyFilters_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyFilters/LegacyFilters.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      LegacyFilters: "Polaris-LegacyFilters",
      LegacyFiltersContainer: "Polaris-LegacyFilters__LegacyFiltersContainer",
      LegacyFiltersContainerHeader: "Polaris-LegacyFilters__LegacyFiltersContainerHeader",
      LegacyFiltersDesktopContainerContent: "Polaris-LegacyFilters__LegacyFiltersDesktopContainerContent",
      LegacyFiltersMobileContainerContent: "Polaris-LegacyFilters__LegacyFiltersMobileContainerContent",
      LegacyFiltersContainerFooter: "Polaris-LegacyFilters__LegacyFiltersContainerFooter",
      LegacyFiltersMobileContainerFooter: "Polaris-LegacyFilters__LegacyFiltersMobileContainerFooter",
      EmptyFooterState: "Polaris-LegacyFilters__EmptyFooterState",
      FilterTriggerContainer: "Polaris-LegacyFilters__FilterTriggerContainer",
      FilterTrigger: "Polaris-LegacyFilters__FilterTrigger",
      FilterTriggerTitle: "Polaris-LegacyFilters__FilterTriggerTitle",
      AppliedFilterBadgeContainer: "Polaris-LegacyFilters__AppliedFilterBadgeContainer",
      open: "Polaris-LegacyFilters--open",
      FilterTriggerLabelContainer: "Polaris-LegacyFilters__FilterTriggerLabelContainer",
      first: "Polaris-LegacyFilters--first",
      last: "Polaris-LegacyFilters--last",
      FilterNodeContainer: "Polaris-LegacyFilters__FilterNodeContainer",
      SearchIcon: "Polaris-LegacyFilters__SearchIcon",
      Backdrop: "Polaris-LegacyFilters__Backdrop",
      HelpText: "Polaris-LegacyFilters__HelpText",
      TagsContainer: "Polaris-LegacyFilters__TagsContainer"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/resource-list/context.js
var require_context19 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/resource-list/context.js"(exports) {
    "use strict";
    var React2 = require_react(), ResourceListContext = /* @__PURE__ */ React2.createContext({});
    exports.ResourceListContext = ResourceListContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyFilters/components/ConnectedFilterControl/ConnectedFilterControl.css.js
var require_ConnectedFilterControl_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyFilters/components/ConnectedFilterControl/ConnectedFilterControl.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ConnectedFilterControl: "Polaris-LegacyFilters-ConnectedFilterControl",
      CenterContainer: "Polaris-LegacyFilters-ConnectedFilterControl__CenterContainer",
      right: "Polaris-LegacyFilters-ConnectedFilterControl--right",
      Item: "Polaris-LegacyFilters-ConnectedFilterControl__Item",
      "Item-focused": "Polaris-LegacyFilters-ConnectedFilterControl__Item--focused",
      ProxyButtonContainer: "Polaris-LegacyFilters-ConnectedFilterControl__ProxyButtonContainer",
      RightContainer: "Polaris-LegacyFilters-ConnectedFilterControl__RightContainer",
      MoreFiltersButtonContainer: "Polaris-LegacyFilters-ConnectedFilterControl__MoreFiltersButtonContainer",
      queryFieldHidden: "Polaris-LegacyFilters-ConnectedFilterControl--queryFieldHidden",
      RightContainerWithoutMoreFilters: "Polaris-LegacyFilters-ConnectedFilterControl__RightContainerWithoutMoreFilters",
      onlyButtonVisible: "Polaris-LegacyFilters-ConnectedFilterControl--onlyButtonVisible",
      Wrapper: "Polaris-LegacyFilters-ConnectedFilterControl__Wrapper",
      AuxiliaryContainer: "Polaris-LegacyFilters-ConnectedFilterControl__AuxiliaryContainer"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyFilters/components/ConnectedFilterControl/components/Item/Item.js
var require_Item7 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyFilters/components/ConnectedFilterControl/components/Item/Item.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), useToggle = require_use_toggle(), ConnectedFilterControl_module = require_ConnectedFilterControl_css();
    function Item({
      children
    }) {
      let {
        value: focused,
        setTrue: forceTrueFocused,
        setFalse: forceFalseFocused
      } = useToggle.useToggle(!1), className = css.classNames(ConnectedFilterControl_module.default.Item, focused && ConnectedFilterControl_module.default["Item-focused"]);
      return /* @__PURE__ */ React2.createElement("div", {
        onBlur: forceFalseFocused,
        onFocus: forceTrueFocused,
        className
      }, children);
    }
    exports.Item = Item;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyFilters/components/ConnectedFilterControl/ConnectedFilterControl.js
var require_ConnectedFilterControl = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyFilters/components/ConnectedFilterControl/ConnectedFilterControl.js"(exports) {
    "use strict";
    var React2 = require_react(), debounce = require_debounce(), css = require_css(), ConnectedFilterControl_module = require_ConnectedFilterControl_css(), Item = require_Item7(), EventListener = require_EventListener(), Button3 = require_Button(), Popover = require_Popover(), FILTER_FIELD_MIN_WIDTH = 150, ConnectedFilterControl = class extends React2.Component {
      constructor(...args) {
        super(...args), this.state = {
          availableWidth: 0,
          proxyButtonsWidth: {}
        }, this.container = /* @__PURE__ */ React2.createRef(), this.proxyButtonContainer = /* @__PURE__ */ React2.createRef(), this.moreFiltersButtonContainer = /* @__PURE__ */ React2.createRef(), this.handleResize = debounce.debounce(() => {
          this.measureProxyButtons(), this.measureAvailableWidth();
        }, 40, {
          leading: !0,
          trailing: !0,
          maxWait: 40
        });
      }
      componentDidMount() {
        this.handleResize();
      }
      render() {
        let {
          children,
          rightPopoverableActions,
          rightAction,
          auxiliary,
          forceShowMorefiltersButton = !0,
          queryFieldHidden
        } = this.props, actionsToRender = rightPopoverableActions != null ? this.getActionsToRender(rightPopoverableActions) : [], className = css.classNames(ConnectedFilterControl_module.default.ConnectedFilterControl, rightPopoverableActions && ConnectedFilterControl_module.default.right), shouldRenderMoreFiltersButton = forceShowMorefiltersButton || rightPopoverableActions && rightPopoverableActions.length !== actionsToRender.length, RightContainerClassName = css.classNames(ConnectedFilterControl_module.default.RightContainer, !shouldRenderMoreFiltersButton && ConnectedFilterControl_module.default.RightContainerWithoutMoreFilters, queryFieldHidden && ConnectedFilterControl_module.default.queryFieldHidden), rightMarkup = actionsToRender.length > 0 ? /* @__PURE__ */ React2.createElement("div", {
          className: RightContainerClassName
        }, this.popoverFrom(actionsToRender)) : null, moreFiltersButtonContainerClassname = css.classNames(ConnectedFilterControl_module.default.MoreFiltersButtonContainer, actionsToRender.length === 0 && ConnectedFilterControl_module.default.onlyButtonVisible), rightActionMarkup = rightAction ? /* @__PURE__ */ React2.createElement("div", {
          ref: this.moreFiltersButtonContainer,
          className: moreFiltersButtonContainerClassname
        }, shouldRenderMoreFiltersButton && /* @__PURE__ */ React2.createElement(Item.Item, null, rightAction)) : null, proxyButtonMarkup = rightPopoverableActions ? /* @__PURE__ */ React2.createElement("div", {
          className: ConnectedFilterControl_module.default.ProxyButtonContainer,
          ref: this.proxyButtonContainer,
          "aria-hidden": !0
        }, rightPopoverableActions.map((action8) => /* @__PURE__ */ React2.createElement("div", {
          key: action8.key,
          "data-key": action8.key
        }, this.activatorButtonFrom(action8, {
          proxy: !0
        })))) : null, auxMarkup = auxiliary ? /* @__PURE__ */ React2.createElement("div", {
          className: ConnectedFilterControl_module.default.AuxiliaryContainer
        }, auxiliary) : null;
        return /* @__PURE__ */ React2.createElement(React2.Fragment, null, proxyButtonMarkup, /* @__PURE__ */ React2.createElement("div", {
          className: ConnectedFilterControl_module.default.Wrapper
        }, /* @__PURE__ */ React2.createElement("div", {
          className,
          ref: this.container
        }, children ? /* @__PURE__ */ React2.createElement("div", {
          className: ConnectedFilterControl_module.default.CenterContainer
        }, /* @__PURE__ */ React2.createElement(Item.Item, null, children)) : null, rightMarkup, rightActionMarkup, /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
          event: "resize",
          handler: this.handleResize
        })), auxMarkup));
      }
      measureProxyButtons() {
        if (this.proxyButtonContainer.current) {
          let proxyButtonsWidth = {};
          this.proxyButtonContainer.current && Array.from(this.proxyButtonContainer.current.children).forEach((element) => {
            let buttonWidth = element.getBoundingClientRect().width + 78, buttonKey = element instanceof HTMLElement && element.dataset.key;
            buttonKey && (proxyButtonsWidth[buttonKey] = buttonWidth);
          }), this.setState({
            proxyButtonsWidth
          });
        }
      }
      measureAvailableWidth() {
        if (this.container.current && this.moreFiltersButtonContainer.current) {
          let containerWidth = this.container.current.getBoundingClientRect().width, moreFiltersButtonWidth = this.moreFiltersButtonContainer.current.getBoundingClientRect().width, filtersActionWidth = 0, filterFieldMinWidth = this.props.queryFieldHidden ? 0 : FILTER_FIELD_MIN_WIDTH, availableWidth = containerWidth - filterFieldMinWidth - moreFiltersButtonWidth - filtersActionWidth;
          this.setState({
            availableWidth
          });
        }
      }
      getActionsToRender(actions) {
        let remainingWidth = this.state.availableWidth, actionsToReturn = [];
        for (let i = 0; remainingWidth > 0 && i < actions.length; i++) {
          let action8 = actions[i], actionWidth = this.state.proxyButtonsWidth[action8.key];
          if (actionWidth <= remainingWidth)
            actionsToReturn.push(action8), remainingWidth -= actionWidth;
          else
            break;
        }
        return actionsToReturn;
      }
      activatorButtonFrom(action8, options) {
        let id = options?.proxy ? void 0 : `Activator-${action8.key}`;
        return /* @__PURE__ */ React2.createElement(Button3.Button, {
          onClick: action8.onAction,
          disclosure: !0,
          disabled: this.props.disabled || action8.disabled,
          id,
          size: "large"
        }, action8.content);
      }
      popoverFrom(actions) {
        return actions.map((action8) => /* @__PURE__ */ React2.createElement(Item.Item, {
          key: action8.key
        }, /* @__PURE__ */ React2.createElement(Popover.Popover, {
          active: action8.popoverOpen,
          activator: this.activatorButtonFrom(action8),
          onClose: action8.onAction,
          preferredAlignment: "left",
          sectioned: !0
        }, action8.popoverContent)));
      }
    };
    exports.ConnectedFilterControl = ConnectedFilterControl;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyFilters/components/TagsWrapper/TagsWrapper.js
var require_TagsWrapper = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyFilters/components/TagsWrapper/TagsWrapper.js"(exports) {
    "use strict";
    var React2 = require_react(), Text3 = require_Text();
    function TagsWrapper({
      children,
      hidden
    }) {
      return hidden ? /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        visuallyHidden: !0
      }, children) : /* @__PURE__ */ React2.createElement(React2.Fragment, null, children);
    }
    exports.TagsWrapper = TagsWrapper;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tag/Tag.css.js
var require_Tag_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tag/Tag.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Tag: "Polaris-Tag",
      disabled: "Polaris-Tag--disabled",
      clickable: "Polaris-Tag--clickable",
      linkable: "Polaris-Tag--linkable",
      removable: "Polaris-Tag--removable",
      Button: "Polaris-Tag__Button",
      Link: "Polaris-Tag__Link",
      segmented: "Polaris-Tag--segmented",
      Text: "Polaris-Tag__Text",
      sizeLarge: "Polaris-Tag--sizeLarge",
      overlay: "Polaris-Tag--overlay"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tag/Tag.js
var require_Tag = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tag/Tag.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), focus = require_focus(), Tag_module = require_Tag_css(), hooks = require_hooks2(), Text3 = require_Text(), Icon2 = require_Icon();
    function Tag({
      children,
      disabled = !1,
      onClick,
      onRemove,
      accessibilityLabel,
      url,
      size
    }) {
      let i18n = hooks.useI18n(), segmented = onRemove && url, className = css.classNames(Tag_module.default.Tag, disabled && Tag_module.default.disabled, onClick && Tag_module.default.clickable, onRemove && Tag_module.default.removable, url && !disabled && Tag_module.default.linkable, segmented && Tag_module.default.segmented, size && Tag_module.default[css.variationName("size", size)]), tagTitle = accessibilityLabel;
      tagTitle || (tagTitle = typeof children == "string" ? children : void 0);
      let tagText = /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "bodySm",
        truncate: !0
      }, /* @__PURE__ */ React2.createElement("span", {
        title: tagTitle,
        className: Tag_module.default.Text
      }, children));
      if (onClick)
        return /* @__PURE__ */ React2.createElement("button", {
          type: "button",
          disabled,
          className,
          onClick
        }, tagText);
      let ariaLabel = i18n.translate("Polaris.Tag.ariaLabel", {
        children: tagTitle || ""
      }), removeButton = onRemove ? /* @__PURE__ */ React2.createElement("button", {
        type: "button",
        "aria-label": ariaLabel,
        className: css.classNames(Tag_module.default.Button, segmented && Tag_module.default.segmented),
        onClick: onRemove,
        onMouseUp: focus.handleMouseUpByBlurring,
        disabled
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.XSmallIcon
      })) : null, tagContent = url && !disabled ? /* @__PURE__ */ React2.createElement("a", {
        className: css.classNames(Tag_module.default.Link, segmented && Tag_module.default.segmented),
        href: url
      }, tagText) : tagText;
      return /* @__PURE__ */ React2.createElement("span", {
        className,
        "aria-disabled": disabled
      }, tagContent, size === "large" && /* @__PURE__ */ React2.createElement("span", {
        className: Tag_module.default.overlay
      }), removeButton);
    }
    exports.Tag = Tag;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Sheet/Sheet.css.js
var require_Sheet_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Sheet/Sheet.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Sheet: "Polaris-Sheet",
      Container: "Polaris-Sheet__Container",
      Bottom: "Polaris-Sheet__Bottom",
      enterBottom: "Polaris-Sheet--enterBottom",
      enterBottomActive: "Polaris-Sheet--enterBottomActive",
      exitBottom: "Polaris-Sheet--exitBottom",
      exitBottomActive: "Polaris-Sheet--exitBottomActive",
      Right: "Polaris-Sheet__Right",
      enterRight: "Polaris-Sheet--enterRight",
      enterRightActive: "Polaris-Sheet--enterRightActive",
      exitRight: "Polaris-Sheet--exitRight",
      exitRightActive: "Polaris-Sheet--exitRightActive"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Sheet/Sheet.js
var require_Sheet = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Sheet/Sheet.js"(exports) {
    "use strict";
    var React2 = require_react(), reactTransitionGroup = require("react-transition-group"), focus = require_focus(), css = require_css(), types = require_types(), shared = require_shared(), useTheme = require_use_theme(), Sheet_module = require_Sheet_css(), hooks = require_hooks11(), Portal = require_Portal(), TrapFocus = require_TrapFocus(), KeypressListener = require_KeypressListener(), Backdrop = require_Backdrop(), BOTTOM_CLASS_NAMES = {
      enter: css.classNames(Sheet_module.default.Bottom, Sheet_module.default.enterBottom),
      enterActive: css.classNames(Sheet_module.default.Bottom, Sheet_module.default.enterBottomActive),
      exit: css.classNames(Sheet_module.default.Bottom, Sheet_module.default.exitBottom),
      exitActive: css.classNames(Sheet_module.default.Bottom, Sheet_module.default.exitBottomActive)
    }, RIGHT_CLASS_NAMES = {
      enter: css.classNames(Sheet_module.default.Right, Sheet_module.default.enterRight),
      enterActive: css.classNames(Sheet_module.default.Right, Sheet_module.default.enterRightActive),
      exit: css.classNames(Sheet_module.default.Right, Sheet_module.default.exitRight),
      exitActive: css.classNames(Sheet_module.default.Right, Sheet_module.default.exitRightActive)
    };
    function Sheet({
      children,
      open,
      onClose,
      onEntered,
      onExit,
      accessibilityLabel,
      activator
    }) {
      let theme = useTheme.useTheme(), {
        isNavigationCollapsed
      } = hooks.useMediaQuery(), container = React2.useRef(null), activatorRef = React2.useRef(null), handleClose = React2.useCallback(() => {
        onClose();
        let activatorElement = activator && isRef(activator) ? activator && activator.current : activatorRef.current;
        activatorElement && requestAnimationFrame(() => focus.focusFirstFocusableNode(activatorElement));
      }, [activator, onClose]);
      React2.useEffect(() => {
        console.warn("Deprecation: <Sheet /> is deprecated. This component might be removed in a future major version of Polaris. Use <Modal /> instead or avoid modal patterns all together.");
      }, []);
      let activatorMarkup = activator && !isRef(activator) ? /* @__PURE__ */ React2.createElement("div", {
        ref: activatorRef
      }, activator) : null;
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, activatorMarkup, /* @__PURE__ */ React2.createElement(Portal.Portal, {
        idPrefix: "sheet"
      }, /* @__PURE__ */ React2.createElement(reactTransitionGroup.CSSTransition, {
        nodeRef: container,
        classNames: isNavigationCollapsed ? BOTTOM_CLASS_NAMES : RIGHT_CLASS_NAMES,
        timeout: parseInt(theme.motion["motion-duration-300"], 10),
        in: open,
        mountOnEnter: !0,
        unmountOnExit: !0,
        onEntered,
        onExit
      }, /* @__PURE__ */ React2.createElement("div", Object.assign({
        className: Sheet_module.default.Container
      }, shared.layer.props, shared.overlay.props, {
        ref: container
      }), /* @__PURE__ */ React2.createElement(TrapFocus.TrapFocus, {
        trapping: open
      }, /* @__PURE__ */ React2.createElement("div", {
        role: "dialog",
        "aria-modal": !0,
        tabIndex: -1,
        className: Sheet_module.default.Sheet,
        "aria-label": accessibilityLabel
      }, children)))), /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
        keyCode: types.Key.Escape,
        handler: handleClose
      }), open && /* @__PURE__ */ React2.createElement(Backdrop.Backdrop, {
        transparent: !0,
        onClick: handleClose
      })));
    }
    function isRef(ref) {
      return Object.prototype.hasOwnProperty.call(ref, "current");
    }
    exports.Sheet = Sheet;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyFilters/LegacyFilters.js
var require_LegacyFilters = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyFilters/LegacyFilters.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), focus = require_focus(), withinFilterContext = require_within_filter_context(), types = require_types(), LegacyFilters_module = require_LegacyFilters_css(), context = require_context19(), Collapsible2 = require_Collapsible(), ConnectedFilterControl = require_ConnectedFilterControl(), TagsWrapper = require_TagsWrapper(), Tag = require_Tag(), Sheet = require_Sheet(), hooks = require_hooks2(), hooks$1 = require_hooks11(), ScrollLock = require_ScrollLock(), Badge3 = require_Badge(), Text3 = require_Text(), Icon2 = require_Icon(), Focus = require_Focus(), Button3 = require_Button(), TextField2 = require_TextField(), Scrollable = require_Scrollable(), KeypressListener = require_KeypressListener(), LegacyStack = require_LegacyStack(), Suffix;
    (function(Suffix2) {
      Suffix2.Filter = "Filter", Suffix2.Shortcut = "Shortcut";
    })(Suffix || (Suffix = {}));
    var LegacyFiltersInner = class extends React2.Component {
      constructor(...args) {
        super(...args), this.state = {
          open: !1,
          readyForFocus: !1
        }, this.moreFiltersButtonContainer = /* @__PURE__ */ React2.createRef(), this.moreFiltersDoneButtonContainer = /* @__PURE__ */ React2.createRef(), this.focusNode = /* @__PURE__ */ React2.createRef(), this.closeFilters = () => {
          this.setState({
            open: !1
          }, () => {
            this.moreFiltersButtonContainer.current && focus.focusFirstFocusableNode(this.moreFiltersButtonContainer.current, !1);
          });
        }, this.toggleFilters = () => {
          this.state.open === !0 ? this.closeFilters() : this.openFilters();
        }, this.setReadyForFocus = (newState) => () => {
          this.setState({
            readyForFocus: newState
          });
        }, this.handleClearAll = () => {
          this.props.onClearAll(), this.moreFiltersDoneButtonContainer.current && focus.focusFirstFocusableNode(this.moreFiltersDoneButtonContainer.current, !1);
        };
      }
      render() {
        let {
          filters,
          queryValue,
          onQueryBlur,
          onQueryChange,
          onQueryFocus,
          focused,
          onClearAll,
          appliedFilters,
          onQueryClear,
          queryPlaceholder,
          children,
          disabled = !1,
          helpText,
          hideTags,
          hideQueryField,
          disableQueryField = !1,
          i18n,
          mediaQuery: {
            isNavigationCollapsed
          }
        } = this.props, {
          resourceName
        } = this.context, {
          open,
          readyForFocus
        } = this.state, backdropMarkup = open ? /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(ScrollLock.ScrollLock, null), /* @__PURE__ */ React2.createElement("div", {
          className: LegacyFilters_module.default.Backdrop,
          onClick: this.closeFilters
        })) : null, filtersContentMarkup = filters.map((filter, index) => {
          let filterIsOpen = this.state[`${filter.key}${Suffix.Filter}`] === !0, icon = filterIsOpen ? polarisIcons.ChevronUpIcon : polarisIcons.ChevronDownIcon, className = css.classNames(LegacyFilters_module.default.FilterTriggerContainer, filterIsOpen && LegacyFilters_module.default.open, index === 0 && LegacyFilters_module.default.first, filters.length !== 1 && index === filters.length - 1 && LegacyFilters_module.default.last), appliedFilterContent = this.getAppliedFilterContent(filter.key), appliedFilterBadgeMarkup = appliedFilterContent ? /* @__PURE__ */ React2.createElement("div", {
            className: LegacyFilters_module.default.AppliedFilterBadgeContainer
          }, /* @__PURE__ */ React2.createElement(Badge3.Badge, {
            tone: "new"
          }, appliedFilterContent)) : null, collapsibleID = `${filter.key}Collapsible`, buttonClassName = css.classNames(LegacyFilters_module.default.FilterTrigger);
          return /* @__PURE__ */ React2.createElement("div", {
            key: filter.key,
            className
          }, /* @__PURE__ */ React2.createElement("button", {
            onClick: () => this.toggleFilter(filter.key),
            className: buttonClassName,
            id: `${filter.key}ToggleButton`,
            type: "button",
            "aria-controls": collapsibleID,
            "aria-expanded": filterIsOpen
          }, /* @__PURE__ */ React2.createElement("div", {
            className: LegacyFilters_module.default.FilterTriggerLabelContainer
          }, /* @__PURE__ */ React2.createElement("h3", {
            className: LegacyFilters_module.default.FilterTriggerTitle
          }, /* @__PURE__ */ React2.createElement(Text3.Text, {
            as: "span",
            tone: this.props.disabled || filter.disabled ? "subdued" : void 0
          }, filter.label)), /* @__PURE__ */ React2.createElement("span", {
            className: LegacyFilters_module.default.FilterTriggerIcon
          }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
            source: icon,
            tone: "base"
          }))), appliedFilterBadgeMarkup), /* @__PURE__ */ React2.createElement(Collapsible2.Collapsible, {
            id: collapsibleID,
            open: filterIsOpen,
            onAnimationEnd: this.setReadyForFocus(!0)
          }, /* @__PURE__ */ React2.createElement("div", {
            className: LegacyFilters_module.default.FilterNodeContainer
          }, /* @__PURE__ */ React2.createElement(Focus.Focus, {
            disabled: !filterIsOpen || !readyForFocus || !open,
            root: this.focusNode
          }, this.generateFilterMarkup(filter)))));
        }), appliedFiltersCount = appliedFilters ? appliedFilters.length : 0, moreFiltersLabel = hideTags && appliedFiltersCount > 0 ? i18n.translate("Polaris.Filters.moreFiltersWithCount", {
          count: appliedFiltersCount
        }) : i18n.translate("Polaris.Filters.moreFilters"), rightActionMarkup = filters.length ? /* @__PURE__ */ React2.createElement("div", {
          ref: this.moreFiltersButtonContainer
        }, /* @__PURE__ */ React2.createElement(Button3.Button, {
          onClick: this.toggleFilters,
          disabled,
          size: "large"
        }, moreFiltersLabel)) : null, filterResourceName = resourceName || {
          singular: i18n.translate("Polaris.ResourceList.defaultItemSingular"),
          plural: i18n.translate("Polaris.ResourceList.defaultItemPlural")
        }, transformedFilters = this.transformFilters(filters), filtersControlMarkup = /* @__PURE__ */ React2.createElement(ConnectedFilterControl.ConnectedFilterControl, {
          rightPopoverableActions: transformedFilters,
          rightAction: rightActionMarkup,
          auxiliary: children,
          disabled,
          forceShowMorefiltersButton: filters.length > transformedFilters.length,
          queryFieldHidden: hideQueryField
        }, hideQueryField ? null : /* @__PURE__ */ React2.createElement(TextField2.TextField, {
          placeholder: queryPlaceholder || i18n.translate("Polaris.Filters.filter", {
            resourceName: filterResourceName.plural
          }),
          onChange: onQueryChange,
          onBlur: onQueryBlur,
          onFocus: onQueryFocus,
          value: queryValue,
          focused,
          label: queryPlaceholder || i18n.translate("Polaris.Filters.filter", {
            resourceName: filterResourceName.plural
          }),
          labelHidden: !0,
          prefix: /* @__PURE__ */ React2.createElement("span", {
            className: LegacyFilters_module.default.SearchIcon
          }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
            source: polarisIcons.SearchIcon
          })),
          clearButton: !0,
          onClearButtonClick: onQueryClear,
          disabled: disabled || disableQueryField,
          autoComplete: "off"
        })), filtersContainerHeaderClassname = css.classNames(LegacyFilters_module.default.LegacyFiltersContainerHeader), filtersDesktopHeaderMarkup = /* @__PURE__ */ React2.createElement("div", {
          className: filtersContainerHeaderClassname
        }, /* @__PURE__ */ React2.createElement(Text3.Text, {
          variant: "headingLg",
          as: "h3"
        }, moreFiltersLabel), /* @__PURE__ */ React2.createElement(Button3.Button, {
          icon: polarisIcons.XSmallIcon,
          variant: "plain",
          accessibilityLabel: i18n.translate("Polaris.Filters.cancel"),
          onClick: this.closeFilters
        })), filtersMobileHeaderMarkup = /* @__PURE__ */ React2.createElement("div", {
          className: filtersContainerHeaderClassname
        }, /* @__PURE__ */ React2.createElement(Button3.Button, {
          icon: polarisIcons.XSmallIcon,
          variant: "plain",
          accessibilityLabel: i18n.translate("Polaris.Filters.cancel"),
          onClick: this.closeFilters
        }), /* @__PURE__ */ React2.createElement(Text3.Text, {
          variant: "headingLg",
          as: "h3"
        }, moreFiltersLabel), /* @__PURE__ */ React2.createElement(Button3.Button, {
          onClick: this.closeFilters,
          variant: "primary"
        }, i18n.translate("Polaris.Filters.done"))), filtersDesktopFooterClassname = css.classNames(LegacyFilters_module.default.LegacyFiltersContainerFooter), filtersDesktopFooterMarkup = /* @__PURE__ */ React2.createElement("div", {
          className: filtersDesktopFooterClassname
        }, /* @__PURE__ */ React2.createElement(Button3.Button, {
          onClick: this.handleClearAll,
          disabled: !this.hasAppliedFilters()
        }, i18n.translate("Polaris.Filters.clearAllFilters")), /* @__PURE__ */ React2.createElement("div", {
          ref: this.moreFiltersDoneButtonContainer
        }, /* @__PURE__ */ React2.createElement(Button3.Button, {
          onClick: this.closeFilters,
          variant: "primary"
        }, i18n.translate("Polaris.Filters.done")))), filtersMobileFooterMarkup = /* @__PURE__ */ React2.createElement("div", {
          className: LegacyFilters_module.default.LegacyFiltersMobileContainerFooter
        }, this.hasAppliedFilters() ? /* @__PURE__ */ React2.createElement(Button3.Button, {
          onClick: onClearAll,
          fullWidth: !0
        }, i18n.translate("Polaris.Filters.clearAllFilters")) : /* @__PURE__ */ React2.createElement("div", {
          className: LegacyFilters_module.default.EmptyFooterState
        }, /* @__PURE__ */ React2.createElement(Text3.Text, {
          tone: "subdued",
          as: "span"
        }, /* @__PURE__ */ React2.createElement("p", null, i18n.translate("Polaris.Filters.noFiltersApplied"))))), shouldHideTagsContainer = !appliedFilters || appliedFilters.length < 1, tagsMarkup = hideTags ? null : /* @__PURE__ */ React2.createElement(TagsWrapper.TagsWrapper, {
          hidden: shouldHideTagsContainer
        }, /* @__PURE__ */ React2.createElement("div", {
          className: LegacyFilters_module.default.TagsContainer,
          "aria-live": "polite"
        }, (appliedFilters || []).map((filter) => /* @__PURE__ */ React2.createElement(Tag.Tag, {
          key: filter.key,
          onRemove: () => {
            filter.onRemove(filter.key);
          },
          disabled
        }, filter.label)))), filtersMobileContainerContentClassName = css.classNames(LegacyFilters_module.default.LegacyFiltersMobileContainerContent), filtersDesktopContainerContentClassName = css.classNames(LegacyFilters_module.default.LegacyFiltersDesktopContainerContent), filtersContainerMarkup = isNavigationCollapsed ? /* @__PURE__ */ React2.createElement(Sheet.Sheet, {
          accessibilityLabel: moreFiltersLabel,
          open,
          onClose: this.closeFilters,
          onEntered: this.setReadyForFocus(!0),
          onExit: this.setReadyForFocus(!1)
        }, filtersMobileHeaderMarkup, /* @__PURE__ */ React2.createElement(Scrollable.Scrollable, {
          className: filtersMobileContainerContentClassName,
          shadow: !0
        }, filtersContentMarkup, filtersMobileFooterMarkup)) : /* @__PURE__ */ React2.createElement(Sheet.Sheet, {
          accessibilityLabel: moreFiltersLabel,
          open,
          onClose: this.closeFilters,
          onEntered: this.setReadyForFocus(!0),
          onExit: this.setReadyForFocus(!1)
        }, /* @__PURE__ */ React2.createElement("div", {
          className: LegacyFilters_module.default.LegacyFiltersContainer
        }, filtersDesktopHeaderMarkup, /* @__PURE__ */ React2.createElement(Scrollable.Scrollable, {
          className: filtersDesktopContainerContentClassName,
          shadow: !0
        }, filtersContentMarkup), filtersDesktopFooterMarkup)), helpTextMarkup = helpText ? /* @__PURE__ */ React2.createElement("div", {
          id: "FiltersHelpText",
          className: LegacyFilters_module.default.HelpText
        }, /* @__PURE__ */ React2.createElement(Text3.Text, {
          tone: "subdued",
          as: "span"
        }, helpText)) : null;
        return /* @__PURE__ */ React2.createElement(withinFilterContext.WithinFilterContext.Provider, {
          value: !0
        }, /* @__PURE__ */ React2.createElement("div", {
          className: LegacyFilters_module.default.LegacyFilters
        }, filtersControlMarkup, filtersContainerMarkup, tagsMarkup, helpTextMarkup, backdropMarkup, /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
          keyCode: types.Key.Escape,
          handler: this.closeFilters
        })));
      }
      hasAppliedFilters() {
        let {
          appliedFilters,
          queryValue
        } = this.props, filtersApplied = Boolean(appliedFilters && appliedFilters.length > 0), queryApplied = Boolean(queryValue && queryValue !== "");
        return filtersApplied || queryApplied;
      }
      getAppliedFilterContent(key) {
        let {
          appliedFilters
        } = this.props;
        if (!appliedFilters)
          return;
        let filter = appliedFilters.find((filter2) => filter2.key === key);
        return filter?.label;
      }
      getAppliedFilterRemoveHandler(key) {
        let {
          appliedFilters
        } = this.props;
        if (!appliedFilters)
          return;
        let filter = appliedFilters.find((filter2) => filter2.key === key);
        return filter?.onRemove;
      }
      openFilters() {
        this.setState({
          open: !0
        });
      }
      toggleFilter(key) {
        this.state[`${key}${Suffix.Filter}`] === !0 ? this.setState({
          readyForFocus: !1,
          [`${key}${Suffix.Filter}`]: !1
        }) : this.setState({
          readyForFocus: !1,
          [`${key}${Suffix.Filter}`]: !0
        });
      }
      openFilterShortcut(key) {
        this.setState({
          [`${key}${Suffix.Shortcut}`]: !0
        });
      }
      closeFilterShortcut(key) {
        this.setState({
          [`${key}${Suffix.Shortcut}`]: !1
        });
      }
      toggleFilterShortcut(key) {
        this.state[`${key}${Suffix.Shortcut}`] === !0 ? this.closeFilterShortcut(key) : this.openFilterShortcut(key);
      }
      transformFilters(filters) {
        let transformedActions = [];
        return getShortcutFilters(filters).forEach((filter) => {
          let {
            key,
            label,
            disabled
          } = filter;
          transformedActions.push({
            popoverContent: this.generateFilterMarkup(filter),
            popoverOpen: Boolean(this.state[`${key}${Suffix.Shortcut}`]),
            key,
            content: label,
            disabled,
            onAction: () => this.toggleFilterShortcut(key)
          });
        }), transformedActions;
      }
      generateFilterMarkup(filter) {
        let i18n = this.props.i18n, removeCallback = this.getAppliedFilterRemoveHandler(filter.key), removeHandler = removeCallback == null ? void 0 : () => {
          removeCallback(filter.key);
        }, clearButtonMarkup = !filter.hideClearButton && /* @__PURE__ */ React2.createElement(Button3.Button, {
          variant: "plain",
          disabled: removeHandler == null,
          onClick: removeHandler,
          accessibilityLabel: i18n.translate("Polaris.Filters.clearLabel", {
            filterName: filter.label
          })
        }, i18n.translate("Polaris.Filters.clear"));
        return /* @__PURE__ */ React2.createElement("div", {
          ref: this.focusNode
        }, /* @__PURE__ */ React2.createElement(LegacyStack.LegacyStack, {
          vertical: !0,
          spacing: "tight"
        }, filter.filter, clearButtonMarkup));
      }
    };
    LegacyFiltersInner.contextType = context.ResourceListContext;
    function getShortcutFilters(filters) {
      return filters.filter((filter) => filter.shortcut === !0);
    }
    function LegacyFilters(props) {
      let i18n = hooks.useI18n(), mediaQuery = hooks$1.useMediaQuery();
      return /* @__PURE__ */ React2.createElement(LegacyFiltersInner, Object.assign({}, props, {
        i18n,
        mediaQuery
      }));
    }
    exports.LegacyFilters = LegacyFilters;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/utilities.js
var require_utilities11 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/utilities.js"(exports) {
    "use strict";
    function getVisibleAndHiddenTabIndices(tabs, selected, disclosureWidth, tabWidths, containerWidth) {
      let sumTabWidths = tabWidths.reduce((sum, width) => sum + width, 0), arrayOfTabIndices = tabs.map((_, index) => index), visibleTabs = [], hiddenTabs = [];
      if (containerWidth > sumTabWidths)
        visibleTabs.push(...arrayOfTabIndices);
      else {
        visibleTabs.push(selected);
        let tabListWidth = tabWidths[selected];
        arrayOfTabIndices.forEach((currentTabIndex) => {
          if (currentTabIndex !== selected) {
            let currentTabWidth = tabWidths[currentTabIndex];
            if (tabListWidth + currentTabWidth >= containerWidth - disclosureWidth) {
              hiddenTabs.push(currentTabIndex);
              return;
            }
            visibleTabs.push(currentTabIndex), tabListWidth += currentTabWidth;
          }
        });
      }
      return {
        visibleTabs,
        hiddenTabs
      };
    }
    exports.getVisibleAndHiddenTabIndices = getVisibleAndHiddenTabIndices;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/LegacyTabs.css.js
var require_LegacyTabs_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/LegacyTabs.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      LegacyTabs: "Polaris-LegacyTabs",
      fitted: "Polaris-LegacyTabs--fitted",
      TabContainer: "Polaris-LegacyTabs__TabContainer",
      Title: "Polaris-LegacyTabs__Title",
      fillSpace: "Polaris-LegacyTabs--fillSpace",
      Tab: "Polaris-LegacyTabs__Tab",
      "Tab-selected": "Polaris-LegacyTabs__Tab--selected",
      titleWithIcon: "Polaris-LegacyTabs--titleWithIcon",
      Panel: "Polaris-LegacyTabs__Panel",
      "Panel-hidden": "Polaris-LegacyTabs__Panel--hidden",
      Item: "Polaris-LegacyTabs__Item",
      DisclosureTab: "Polaris-LegacyTabs__DisclosureTab",
      "DisclosureTab-visible": "Polaris-LegacyTabs__DisclosureTab--visible",
      DisclosureActivator: "Polaris-LegacyTabs__DisclosureActivator",
      TabMeasurer: "Polaris-LegacyTabs__TabMeasurer"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/components/Panel/Panel.js
var require_Panel2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/components/Panel/Panel.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), LegacyTabs_module = require_LegacyTabs_css();
    function Panel({
      hidden,
      id,
      tabID,
      children
    }) {
      let className = css.classNames(LegacyTabs_module.default.Panel, hidden && LegacyTabs_module.default["Panel-hidden"]);
      return /* @__PURE__ */ React2.createElement("div", {
        className,
        id,
        role: "tabpanel",
        "aria-labelledby": tabID,
        tabIndex: -1
      }, children);
    }
    exports.Panel = Panel;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/components/Tab/Tab.js
var require_Tab2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/components/Tab/Tab.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), focus = require_focus(), LegacyTabs_module = require_LegacyTabs_css(), UnstyledLink = require_UnstyledLink(), Text3 = require_Text();
    function Tab({
      id,
      focused,
      siblingTabHasFocus,
      children,
      onClick,
      selected,
      url,
      panelID,
      measuring,
      accessibilityLabel
    }) {
      let wasSelected = React2.useRef(selected), panelFocused = React2.useRef(!1), node = React2.useRef(null);
      React2.useEffect(() => {
        if (measuring)
          return;
        (focused || document.activeElement && document.activeElement.id === id) && selected && panelID != null && !panelFocused.current && (focusPanelID(panelID), panelFocused.current = !0), selected && !wasSelected.current && panelID != null ? focusPanelID(panelID) : focused && node.current != null && focus.focusFirstFocusableNode(node.current), wasSelected.current = selected;
      }, [focused, id, measuring, panelID, selected]);
      let handleClick = onClick && onClick.bind(null, id), className = css.classNames(LegacyTabs_module.default.Tab, selected && LegacyTabs_module.default["Tab-selected"]), tabIndex;
      selected && !siblingTabHasFocus && !measuring || focused && !measuring ? tabIndex = 0 : tabIndex = -1;
      let tabContainerClassNames = css.classNames(LegacyTabs_module.default.TabContainer, selected && LegacyTabs_module.default.Underline), markup = url ? /* @__PURE__ */ React2.createElement(UnstyledLink.UnstyledLink, {
        id,
        url,
        role: "tab",
        tabIndex,
        onClick: handleClick,
        className,
        "aria-selected": selected,
        "aria-controls": panelID,
        "aria-label": accessibilityLabel,
        onMouseUp: focus.handleMouseUpByBlurring
      }, /* @__PURE__ */ React2.createElement("span", {
        className: LegacyTabs_module.default.Title
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "bodyMd",
        fontWeight: "semibold"
      }, children))) : /* @__PURE__ */ React2.createElement("button", {
        id,
        role: "tab",
        type: "button",
        tabIndex,
        className,
        onClick: handleClick,
        "aria-selected": selected,
        "aria-controls": panelID,
        "aria-label": accessibilityLabel,
        onMouseUp: focus.handleMouseUpByBlurring
      }, /* @__PURE__ */ React2.createElement("span", {
        className: LegacyTabs_module.default.Title
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "bodyMd",
        fontWeight: "semibold"
      }, children)));
      return /* @__PURE__ */ React2.createElement("li", {
        className: tabContainerClassNames,
        ref: node,
        role: "presentation"
      }, markup);
    }
    function focusPanelID(panelID) {
      let panel = document.getElementById(panelID);
      panel && panel.focus({
        preventScroll: !0
      });
    }
    exports.Tab = Tab;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/components/TabMeasurer/TabMeasurer.js
var require_TabMeasurer2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/components/TabMeasurer/TabMeasurer.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), useComponentDidMount = require_use_component_did_mount(), LegacyTabs_module = require_LegacyTabs_css(), Tab = require_Tab2(), EventListener = require_EventListener(), TabMeasurer = /* @__PURE__ */ React2.memo(function({
      selected,
      tabs,
      activator,
      tabToFocus,
      siblingTabHasFocus,
      handleMeasurement: handleMeasurementProp
    }) {
      let containerNode = React2.useRef(null), animationFrame = React2.useRef(null), handleMeasurement = React2.useCallback(() => {
        animationFrame.current && cancelAnimationFrame(animationFrame.current), animationFrame.current = requestAnimationFrame(() => {
          if (!containerNode.current)
            return;
          let containerWidth = containerNode.current.offsetWidth, hiddenTabNodes = containerNode.current.children, hiddenTabWidths = Array.from(hiddenTabNodes).map((node) => Math.ceil(node.getBoundingClientRect().width)), disclosureWidth = hiddenTabWidths.pop() || 0;
          handleMeasurementProp({
            containerWidth,
            disclosureWidth,
            hiddenTabWidths
          });
        });
      }, [handleMeasurementProp]);
      React2.useEffect(() => {
        handleMeasurement();
      }, [handleMeasurement, tabs]), useComponentDidMount.useComponentDidMount(() => {
        setTimeout(handleMeasurement, 0);
      });
      let tabsMarkup = tabs.map((tab, index) => /* @__PURE__ */ React2.createElement(Tab.Tab, {
        measuring: !0,
        key: `${index}${tab.id}Hidden`,
        id: `${tab.id}Measurer`,
        siblingTabHasFocus,
        focused: index === tabToFocus,
        selected: index === selected,
        onClick: noop,
        url: tab.url
      }, tab.content)), classname = css.classNames(LegacyTabs_module.default.LegacyTabs, LegacyTabs_module.default.TabMeasurer);
      return /* @__PURE__ */ React2.createElement("div", {
        className: classname,
        ref: containerNode
      }, /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
        event: "resize",
        handler: handleMeasurement
      }), tabsMarkup, activator);
    });
    function noop() {
    }
    exports.TabMeasurer = TabMeasurer;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/components/Item/Item.js
var require_Item8 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/components/Item/Item.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), LegacyTabs_module = require_LegacyTabs_css(), UnstyledLink = require_UnstyledLink(), context = require_context(), Item = class extends React2.PureComponent {
      constructor(...args) {
        super(...args), this.focusedNode = null, this.setFocusedNode = (node) => {
          this.focusedNode = node;
        };
      }
      componentDidMount() {
        let {
          focusedNode
        } = this, {
          focused
        } = this.props;
        focusedNode && focusedNode instanceof HTMLElement && focused && focusedNode.focus();
      }
      componentDidUpdate() {
        let {
          focusedNode
        } = this, {
          focused
        } = this.props;
        focusedNode && focusedNode instanceof HTMLElement && focused && focusedNode.focus();
      }
      render() {
        let {
          id,
          panelID,
          children,
          url,
          accessibilityLabel,
          onClick = noop
        } = this.props, classname = css.classNames(LegacyTabs_module.default.Item), sharedProps = {
          id,
          ref: this.setFocusedNode,
          onClick,
          className: classname,
          "aria-controls": panelID,
          "aria-selected": !1,
          "aria-label": accessibilityLabel
        }, markup = url ? /* @__PURE__ */ React2.createElement(UnstyledLink.UnstyledLink, Object.assign({}, sharedProps, {
          url
        }), children) : /* @__PURE__ */ React2.createElement("button", Object.assign({}, sharedProps, {
          type: "button"
        }), children);
        return /* @__PURE__ */ React2.createElement("li", null, markup);
      }
    };
    Item.contextType = context.FeaturesContext;
    function noop() {
    }
    exports.Item = Item;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/components/List/List.js
var require_List2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/components/List/List.js"(exports) {
    "use strict";
    var React2 = require_react(), Item = require_Item8(), Box3 = require_Box();
    function List({
      focusIndex,
      disclosureTabs,
      onClick = noop,
      onKeyPress = noop
    }) {
      let tabs = disclosureTabs.map(({
        id,
        content,
        ...tabProps
      }, index) => /* @__PURE__ */ React2.createElement(Item.Item, Object.assign({
        key: id
      }, tabProps, {
        id,
        focused: index === focusIndex,
        onClick: onClick.bind(null, id)
      }), content));
      return /* @__PURE__ */ React2.createElement("div", {
        onKeyDown: handleKeyDown,
        onKeyUp: onKeyPress
      }, /* @__PURE__ */ React2.createElement(Box3.Box, {
        as: "ul",
        padding: "200"
      }, tabs));
    }
    function noop() {
    }
    function handleKeyDown(event) {
      let {
        key
      } = event;
      (key === "ArrowLeft" || key === "ArrowRight") && (event.preventDefault(), event.stopPropagation());
    }
    exports.List = List;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/LegacyTabs.js
var require_LegacyTabs = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/LegacyTabs.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), utilities = require_utilities11(), LegacyTabs_module = require_LegacyTabs_css(), Panel = require_Panel2(), TabMeasurer = require_TabMeasurer2(), List = require_List2(), hooks = require_hooks2(), Tab = require_Tab2(), Icon2 = require_Icon(), Box3 = require_Box(), Popover = require_Popover(), TabsInner = class extends React2.PureComponent {
      constructor(...args) {
        super(...args), this.state = {
          disclosureWidth: 0,
          containerWidth: 1 / 0,
          tabWidths: [],
          visibleTabs: [],
          hiddenTabs: [],
          showDisclosure: !1,
          tabToFocus: -1
        }, this.handleKeyPress = (event) => {
          let {
            tabToFocus,
            visibleTabs,
            hiddenTabs,
            showDisclosure
          } = this.state, key = event.key, tabsArrayInOrder = showDisclosure ? visibleTabs.concat(hiddenTabs) : [...visibleTabs], newFocus = tabsArrayInOrder.indexOf(tabToFocus);
          key === "ArrowRight" && (newFocus += 1, newFocus === tabsArrayInOrder.length && (newFocus = 0)), key === "ArrowLeft" && (newFocus === -1 || newFocus === 0 ? newFocus = tabsArrayInOrder.length - 1 : newFocus -= 1), this.setState({
            tabToFocus: tabsArrayInOrder[newFocus]
          });
        }, this.renderTabMarkup = (tab, index) => {
          let {
            selected,
            children
          } = this.props, {
            tabToFocus
          } = this.state, tabPanelID = tab.panelID || `${tab.id}-panel`;
          return /* @__PURE__ */ React2.createElement(Tab.Tab, {
            key: `${index}-${tab.id}`,
            id: tab.id,
            siblingTabHasFocus: tabToFocus > -1,
            focused: index === tabToFocus,
            selected: index === selected,
            onClick: this.handleTabClick,
            panelID: children ? tabPanelID : void 0,
            accessibilityLabel: tab.accessibilityLabel,
            url: tab.url
          }, tab.content);
        }, this.handleFocus = (event) => {
          let {
            selected,
            tabs
          } = this.props, target = event.target;
          if (target.classList.contains(LegacyTabs_module.default.Tab) || target.classList.contains(LegacyTabs_module.default.Item)) {
            let tabToFocus = -1;
            tabs.every((tab, index) => tab.id === target.id ? (tabToFocus = index, !1) : !0), this.setState({
              tabToFocus
            });
            return;
          }
          if (target.classList.contains(LegacyTabs_module.default.DisclosureActivator))
            return;
          if (!event.relatedTarget) {
            this.setState({
              tabToFocus: selected
            });
            return;
          }
          let relatedTarget = event.relatedTarget;
          relatedTarget instanceof HTMLElement && !relatedTarget.classList.contains(LegacyTabs_module.default.Tab) && !relatedTarget.classList.contains(LegacyTabs_module.default.Item) && !relatedTarget.classList.contains(LegacyTabs_module.default.DisclosureActivator) && this.setState({
            tabToFocus: selected
          });
        }, this.handleBlur = (event) => {
          if (event.relatedTarget == null) {
            this.setState({
              tabToFocus: -1
            });
            return;
          }
          let target = event.relatedTarget;
          target instanceof HTMLElement && !target.classList.contains(LegacyTabs_module.default.Tab) && !target.classList.contains(LegacyTabs_module.default.Item) && this.setState({
            tabToFocus: -1
          });
        }, this.handleDisclosureActivatorClick = () => {
          this.setState(({
            showDisclosure
          }) => ({
            showDisclosure: !showDisclosure
          }));
        }, this.handleClose = () => {
          this.setState({
            showDisclosure: !1
          });
        }, this.handleMeasurement = (measurements) => {
          let {
            tabs,
            selected
          } = this.props, {
            tabToFocus
          } = this.state, {
            hiddenTabWidths: tabWidths,
            containerWidth,
            disclosureWidth
          } = measurements, {
            visibleTabs,
            hiddenTabs
          } = utilities.getVisibleAndHiddenTabIndices(tabs, selected, disclosureWidth, tabWidths, containerWidth);
          this.setState({
            tabToFocus: tabToFocus === -1 ? -1 : selected,
            visibleTabs,
            hiddenTabs,
            disclosureWidth,
            containerWidth,
            tabWidths
          });
        }, this.handleTabClick = (id) => {
          let {
            tabs,
            onSelect = noop
          } = this.props, tab = tabs.find((aTab) => aTab.id === id);
          if (tab == null)
            return;
          let selectedIndex = tabs.indexOf(tab);
          onSelect(selectedIndex);
        };
      }
      static getDerivedStateFromProps(nextProps, prevState) {
        let {
          disclosureWidth,
          tabWidths,
          containerWidth
        } = prevState, {
          visibleTabs,
          hiddenTabs
        } = utilities.getVisibleAndHiddenTabIndices(nextProps.tabs, nextProps.selected, disclosureWidth, tabWidths, containerWidth);
        return {
          visibleTabs,
          hiddenTabs,
          selected: nextProps.selected
        };
      }
      render() {
        let {
          tabs,
          selected,
          fitted,
          children,
          i18n,
          disclosureText
        } = this.props, {
          tabToFocus,
          visibleTabs,
          hiddenTabs,
          showDisclosure
        } = this.state, disclosureTabs = hiddenTabs.map((tabIndex) => tabs[tabIndex]), panelMarkup = children ? tabs.map((_tab, index) => selected === index ? /* @__PURE__ */ React2.createElement(Panel.Panel, {
          id: tabs[index].panelID || `${tabs[index].id}-panel`,
          tabID: tabs[index].id,
          key: tabs[index].id
        }, children) : /* @__PURE__ */ React2.createElement(Panel.Panel, {
          id: tabs[index].panelID || `${tabs[index].id}-panel`,
          tabID: tabs[index].id,
          key: tabs[index].id,
          hidden: !0
        })) : null, tabsMarkup = visibleTabs.sort((tabA, tabB) => tabA - tabB).map((tabIndex) => this.renderTabMarkup(tabs[tabIndex], tabIndex)), disclosureActivatorVisible = visibleTabs.length < tabs.length, hasCustomDisclosure = Boolean(disclosureText), classname = css.classNames(LegacyTabs_module.default.LegacyTabs, fitted && LegacyTabs_module.default.fitted, disclosureActivatorVisible && LegacyTabs_module.default.fillSpace), disclosureTabClassName = css.classNames(LegacyTabs_module.default.DisclosureTab, disclosureActivatorVisible && LegacyTabs_module.default["DisclosureTab-visible"]), disclosureButtonClassName = css.classNames(LegacyTabs_module.default.DisclosureActivator, hasCustomDisclosure && LegacyTabs_module.default.Tab), disclosureButtonContentWrapperClassName = css.classNames(LegacyTabs_module.default.Title, hasCustomDisclosure && LegacyTabs_module.default.titleWithIcon), disclosureButtonContent = hasCustomDisclosure ? /* @__PURE__ */ React2.createElement(React2.Fragment, null, disclosureText, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
          source: polarisIcons.ChevronDownIcon,
          tone: "subdued"
        })) : /* @__PURE__ */ React2.createElement(Icon2.Icon, {
          source: polarisIcons.MenuHorizontalIcon,
          tone: "subdued"
        }), disclosureButton = /* @__PURE__ */ React2.createElement("button", {
          type: "button",
          className: disclosureButtonClassName,
          onClick: this.handleDisclosureActivatorClick,
          "aria-label": i18n.translate("Polaris.Tabs.toggleTabsLabel")
        }, /* @__PURE__ */ React2.createElement("span", {
          className: disclosureButtonContentWrapperClassName
        }, disclosureButtonContent)), activator = disclosureText ? /* @__PURE__ */ React2.createElement("div", {
          className: LegacyTabs_module.default.TabContainer
        }, disclosureButton) : disclosureButton;
        return /* @__PURE__ */ React2.createElement("div", null, /* @__PURE__ */ React2.createElement(Box3.Box, {
          borderBlockEndWidth: "025",
          borderColor: "border-secondary",
          paddingInlineStart: "200",
          paddingInlineEnd: "200"
        }, /* @__PURE__ */ React2.createElement(TabMeasurer.TabMeasurer, {
          tabToFocus,
          activator,
          selected,
          tabs,
          siblingTabHasFocus: tabToFocus > -1,
          handleMeasurement: this.handleMeasurement
        }), /* @__PURE__ */ React2.createElement("ul", {
          role: "tablist",
          className: classname,
          onFocus: this.handleFocus,
          onBlur: this.handleBlur,
          onKeyDown: handleKeyDown,
          onKeyUp: this.handleKeyPress
        }, tabsMarkup, /* @__PURE__ */ React2.createElement("li", {
          className: disclosureTabClassName,
          role: "presentation"
        }, /* @__PURE__ */ React2.createElement(Popover.Popover, {
          preferredPosition: "below",
          activator,
          active: disclosureActivatorVisible && showDisclosure,
          onClose: this.handleClose,
          autofocusTarget: "first-node"
        }, /* @__PURE__ */ React2.createElement(List.List, {
          focusIndex: hiddenTabs.indexOf(tabToFocus),
          disclosureTabs,
          onClick: this.handleTabClick,
          onKeyPress: this.handleKeyPress
        }))))), panelMarkup);
      }
      // eslint-disable-next-line @shopify/react-no-multiple-render-methods
    };
    function noop() {
    }
    function handleKeyDown(event) {
      let {
        key
      } = event;
      (key === "ArrowLeft" || key === "ArrowRight") && (event.preventDefault(), event.stopPropagation());
    }
    function LegacyTabs(props) {
      let i18n = hooks.useI18n();
      return /* @__PURE__ */ React2.createElement(TabsInner, Object.assign({}, props, {
        i18n
      }));
    }
    exports.LegacyTabs = LegacyTabs;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Link/Link.css.js
var require_Link_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Link/Link.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Link: "Polaris-Link",
      monochrome: "Polaris-Link--monochrome",
      removeUnderline: "Polaris-Link--removeUnderline"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Link/Link.js
var require_Link = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Link/Link.js"(exports) {
    "use strict";
    var React2 = require_react(), bannerContext = require_banner_context(), css = require_css(), Link_module = require_Link_css(), UnstyledLink = require_UnstyledLink();
    function Link({
      url,
      children,
      onClick,
      external,
      target,
      id,
      monochrome,
      removeUnderline,
      accessibilityLabel,
      dataPrimaryLink
    }) {
      return /* @__PURE__ */ React2.createElement(bannerContext.BannerContext.Consumer, null, (BannerContext) => {
        let shouldBeMonochrome = monochrome || BannerContext, className = css.classNames(Link_module.default.Link, shouldBeMonochrome && Link_module.default.monochrome, removeUnderline && Link_module.default.removeUnderline);
        return url ? /* @__PURE__ */ React2.createElement(UnstyledLink.UnstyledLink, {
          onClick,
          className,
          url,
          external,
          target,
          id,
          "aria-label": accessibilityLabel,
          "data-primary-link": dataPrimaryLink
        }, children) : /* @__PURE__ */ React2.createElement("button", {
          type: "button",
          onClick,
          className,
          id,
          "aria-label": accessibilityLabel,
          "data-primary-link": dataPrimaryLink
        }, children);
      });
    }
    exports.Link = Link;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/List/List.css.js
var require_List_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/List/List.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      List: "Polaris-List",
      typeNumber: "Polaris-List--typeNumber",
      Item: "Polaris-List__Item",
      spacingLoose: "Polaris-List--spacingLoose"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/List/components/Item/Item.js
var require_Item9 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/List/components/Item/Item.js"(exports) {
    "use strict";
    var React2 = require_react(), List_module = require_List_css();
    function Item({
      children
    }) {
      return /* @__PURE__ */ React2.createElement("li", {
        className: List_module.default.Item
      }, children);
    }
    exports.Item = Item;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/List/List.js
var require_List3 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/List/List.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), List_module = require_List_css(), Item = require_Item9(), List = function({
      children,
      gap = "loose",
      type = "bullet"
    }) {
      let className = css.classNames(List_module.default.List, gap && List_module.default[css.variationName("spacing", gap)], type && List_module.default[css.variationName("type", type)]), ListElement = type === "bullet" ? "ul" : "ol";
      return /* @__PURE__ */ React2.createElement(ListElement, {
        className
      }, children);
    };
    List.Item = Item.Item;
    exports.List = List;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Loading/Loading.js
var require_Loading3 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Loading/Loading.js"(exports) {
    "use strict";
    var React2 = require_react(), hooks = require_hooks9(), Loading = /* @__PURE__ */ React2.memo(function() {
      let {
        startLoading,
        stopLoading
      } = hooks.useFrame();
      return React2.useEffect(() => (startLoading(), () => {
        stopLoading();
      }), [startLoading, stopLoading]), null;
    });
    exports.Loading = Loading;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/MediaCard/MediaCard.css.js
var require_MediaCard_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/MediaCard/MediaCard.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      MediaCard: "Polaris-MediaCard",
      portrait: "Polaris-MediaCard--portrait",
      MediaContainer: "Polaris-MediaCard__MediaContainer",
      sizeSmall: "Polaris-MediaCard--sizeSmall",
      InfoContainer: "Polaris-MediaCard__InfoContainer",
      ActionContainer: "Polaris-MediaCard__ActionContainer"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/MediaCard/MediaCard.js
var require_MediaCard = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/MediaCard/MediaCard.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), useToggle = require_use_toggle(), css = require_css(), MediaCard_module = require_MediaCard_css(), hooks = require_hooks2(), Button3 = require_Button(), InlineStack3 = require_InlineStack(), Popover = require_Popover(), ActionList = require_ActionList(), utils = require_utils(), LegacyCard = require_LegacyCard(), Box3 = require_Box(), BlockStack3 = require_BlockStack(), Text3 = require_Text(), ButtonGroup = require_ButtonGroup();
    function MediaCard({
      title,
      children,
      primaryAction,
      secondaryAction,
      description,
      popoverActions = [],
      portrait = !1,
      size = "medium",
      onDismiss
    }) {
      let i18n = hooks.useI18n(), {
        value: popoverActive,
        toggle: togglePopoverActive
      } = useToggle.useToggle(!1), headerMarkup = null;
      if (title) {
        let headerContent = typeof title == "string" ? /* @__PURE__ */ React2.createElement(Text3.Text, {
          variant: "headingSm",
          as: "h2"
        }, title) : title;
        headerMarkup = /* @__PURE__ */ React2.createElement("div", null, headerContent);
      }
      let dismissButtonMarkup = onDismiss ? /* @__PURE__ */ React2.createElement(Button3.Button, {
        icon: polarisIcons.XIcon,
        onClick: onDismiss,
        size: "slim",
        accessibilityLabel: i18n.translate("Polaris.MediaCard.dismissButton"),
        variant: "tertiary"
      }) : null, popoverActivator = /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        blockAlign: "center"
      }, /* @__PURE__ */ React2.createElement(Button3.Button, {
        icon: polarisIcons.MenuHorizontalIcon,
        onClick: togglePopoverActive,
        size: "slim",
        accessibilityLabel: i18n.translate("Polaris.MediaCard.popoverButton"),
        variant: "tertiary"
      })), popoverActionsMarkup = popoverActions.length > 0 ? /* @__PURE__ */ React2.createElement(Popover.Popover, {
        active: popoverActive,
        activator: popoverActivator,
        onClose: togglePopoverActive,
        preferredAlignment: "left",
        preferredPosition: "below"
      }, /* @__PURE__ */ React2.createElement(ActionList.ActionList, {
        items: popoverActions,
        onActionAnyItem: togglePopoverActive
      })) : null, primaryActionMarkup = primaryAction ? /* @__PURE__ */ React2.createElement("div", null, utils.buttonFrom(primaryAction)) : null, secondaryActionMarkup = secondaryAction ? /* @__PURE__ */ React2.createElement("div", null, utils.buttonFrom(secondaryAction)) : null, actionClassName = css.classNames(MediaCard_module.default.ActionContainer, portrait && MediaCard_module.default.portrait), actionMarkup = primaryActionMarkup || secondaryActionMarkup ? /* @__PURE__ */ React2.createElement("div", {
        className: actionClassName
      }, /* @__PURE__ */ React2.createElement(ButtonGroup.ButtonGroup, null, primaryActionMarkup, secondaryActionMarkup)) : null, mediaCardClassName = css.classNames(MediaCard_module.default.MediaCard, portrait && MediaCard_module.default.portrait), mediaContainerClassName = css.classNames(MediaCard_module.default.MediaContainer, portrait && MediaCard_module.default.portrait, size === "small" && MediaCard_module.default.sizeSmall), infoContainerClassName = css.classNames(MediaCard_module.default.InfoContainer, portrait && MediaCard_module.default.portrait, size === "small" && MediaCard_module.default.sizeSmall), popoverOrDismissMarkup = popoverActionsMarkup || dismissButtonMarkup ? /* @__PURE__ */ React2.createElement(Box3.Box, {
        position: "absolute",
        insetInlineEnd: "500",
        zIndex: "var(--p-z-index-2)"
      }, /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        gap: "100",
        wrap: !1
      }, popoverActionsMarkup, dismissButtonMarkup)) : null;
      return /* @__PURE__ */ React2.createElement(LegacyCard.LegacyCard, null, /* @__PURE__ */ React2.createElement("div", {
        className: mediaCardClassName
      }, /* @__PURE__ */ React2.createElement("div", {
        className: mediaContainerClassName
      }, children), /* @__PURE__ */ React2.createElement("div", {
        className: infoContainerClassName
      }, /* @__PURE__ */ React2.createElement(Box3.Box, {
        padding: "500"
      }, /* @__PURE__ */ React2.createElement(BlockStack3.BlockStack, {
        gap: "200"
      }, /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        wrap: !1,
        align: "space-between",
        gap: "200"
      }, headerMarkup, popoverOrDismissMarkup), /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "p",
        variant: "bodySm"
      }, description), actionMarkup)))));
    }
    exports.MediaCard = MediaCard;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Navigation/context.js
var require_context20 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Navigation/context.js"(exports) {
    "use strict";
    var React2 = require_react(), NavigationContext = /* @__PURE__ */ React2.createContext({
      location: ""
    });
    exports.NavigationContext = NavigationContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Navigation/Navigation.css.js
var require_Navigation_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Navigation/Navigation.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Navigation: "Polaris-Navigation",
      UserMenu: "Polaris-Navigation__UserMenu",
      ContextControl: "Polaris-Navigation__ContextControl",
      PrimaryNavigation: "Polaris-Navigation__PrimaryNavigation",
      LogoContainer: "Polaris-Navigation__LogoContainer",
      hasLogoSuffix: "Polaris-Navigation--hasLogoSuffix",
      Logo: "Polaris-Navigation__Logo",
      LogoLink: "Polaris-Navigation__LogoLink",
      Item: "Polaris-Navigation__Item",
      "Icon-resized": "Polaris-Navigation__Icon--resized",
      Badge: "Polaris-Navigation__Badge",
      ItemInnerWrapper: "Polaris-Navigation__ItemInnerWrapper",
      ItemWrapper: "Polaris-Navigation__ItemWrapper",
      ItemInnerDisabled: "Polaris-Navigation__ItemInnerDisabled",
      "ItemInnerWrapper-display-actions-on-hover": "Polaris-Navigation--itemInnerWrapperDisplayActionsOnHover",
      SecondaryActions: "Polaris-Navigation__SecondaryActions",
      "ItemInnerWrapper-selected": "Polaris-Navigation__ItemInnerWrapper--selected",
      Text: "Polaris-Navigation__Text",
      "ItemInnerWrapper-open": "Polaris-Navigation__ItemInnerWrapper--open",
      "Item-selected": "Polaris-Navigation__Item--selected",
      "Item-child-active": "Polaris-Navigation--itemChildActive",
      "Item-disabled": "Polaris-Navigation__Item--disabled",
      Icon: "Polaris-Navigation__Icon",
      "ListItem-hasAction": "Polaris-Navigation__ListItem--hasAction",
      subNavigationActive: "Polaris-Navigation--subNavigationActive",
      ListItem: "Polaris-Navigation__ListItem",
      RollupSection: "Polaris-Navigation__RollupSection",
      SecondaryNavigation: "Polaris-Navigation__SecondaryNavigation",
      "Text-truncated": "Polaris-Navigation__Text--truncated",
      ItemWithFloatingActions: "Polaris-Navigation__ItemWithFloatingActions",
      SecondaryAction: "Polaris-Navigation__SecondaryAction",
      List: "Polaris-Navigation__List",
      "Item-line": "Polaris-Navigation__Item--line",
      "Item-hover-line": "Polaris-Navigation--itemHoverLine",
      "Item-line-pointer": "Polaris-Navigation--itemLinePointer",
      "Item-hover-pointer": "Polaris-Navigation--itemHoverPointer",
      "SecondaryNavigation-noIcon": "Polaris-Navigation__SecondaryNavigation--noIcon",
      Section: "Polaris-Navigation__Section",
      "Section-fill": "Polaris-Navigation__Section--fill",
      "Section-withSeparator": "Polaris-Navigation__Section--withSeparator",
      SectionHeading: "Polaris-Navigation__SectionHeading",
      Action: "Polaris-Navigation__Action",
      RollupToggle: "Polaris-Navigation__RollupToggle",
      Indicator: "Polaris-Navigation__Indicator",
      SecondaryNavigationOpen: "Polaris-Navigation__SecondaryNavigationOpen",
      "snappy-grow": "Polaris-Navigation__snappy--grow"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Navigation/types.js
var require_types5 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Navigation/types.js"(exports) {
    "use strict";
    exports.MatchState = void 0;
    (function(MatchState) {
      MatchState[MatchState.MatchForced = 0] = "MatchForced", MatchState[MatchState.MatchUrl = 1] = "MatchUrl", MatchState[MatchState.MatchPaths = 2] = "MatchPaths", MatchState[MatchState.Excluded = 3] = "Excluded", MatchState[MatchState.NoMatch = 4] = "NoMatch";
    })(exports.MatchState || (exports.MatchState = {}));
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Navigation/components/Item/components/SecondaryNavigation/SecondaryNavigation.js
var require_SecondaryNavigation = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Navigation/components/Item/components/SecondaryNavigation/SecondaryNavigation.js"(exports) {
    "use strict";
    var React2 = require_react(), isEqual = require("react-fast-compare"), css = require_css(), context = require_context20(), Navigation_module = require_Navigation_css(), Collapsible2 = require_Collapsible();
    function SecondaryNavigation({
      ItemComponent,
      icon,
      longestMatch,
      subNavigationItems,
      showExpanded,
      truncateText,
      secondaryNavigationId
    }) {
      let uid = React2.useId(), {
        onNavigationDismiss
      } = React2.useContext(context.NavigationContext), [hoveredItem, setHoveredItem] = React2.useState(), matchedItemPosition = subNavigationItems.findIndex((item) => isEqual(item, longestMatch)), hoveredItemPosition = subNavigationItems.findIndex((item) => isEqual(item, hoveredItem));
      return /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Navigation_module.default.SecondaryNavigation, showExpanded && Navigation_module.default.SecondaryNavigationOpen, !icon && Navigation_module.default["SecondaryNavigation-noIcon"])
      }, /* @__PURE__ */ React2.createElement(Collapsible2.Collapsible, {
        id: secondaryNavigationId || uid,
        open: showExpanded,
        transition: !1
      }, /* @__PURE__ */ React2.createElement("ul", {
        className: Navigation_module.default.List
      }, subNavigationItems.map((item, index) => {
        let {
          label,
          ...rest
        } = item, onClick = () => {
          onNavigationDismiss?.(), item.onClick && item.onClick !== onNavigationDismiss && item.onClick();
        }, shouldShowVerticalLine = index < matchedItemPosition;
        return /* @__PURE__ */ React2.createElement(ItemComponent, Object.assign({
          key: label
        }, rest, {
          label,
          showVerticalLine: shouldShowVerticalLine,
          showVerticalHoverPointer: index === hoveredItemPosition,
          level: 1,
          onMouseEnter: item.disabled ? void 0 : () => setHoveredItem(item),
          onMouseLeave: item.disabled ? void 0 : () => setHoveredItem(void 0),
          matches: isEqual(item, longestMatch),
          onClick,
          truncateText
        }));
      }))));
    }
    exports.SecondaryNavigation = SecondaryNavigation;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Navigation/components/Item/Item.js
var require_Item10 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Navigation/components/Item/Item.js"(exports) {
    "use strict";
    var React2 = require_react(), useIsomorphicLayoutEffect = require_use_isomorphic_layout_effect(), css = require_css(), context = require_context20(), Navigation_module = require_Navigation_css(), types = require_types5(), SecondaryNavigation = require_SecondaryNavigation(), hooks = require_hooks2(), hooks$1 = require_hooks11(), Indicator = require_Indicator(), Icon2 = require_Icon(), Badge3 = require_Badge(), Text3 = require_Text(), UnstyledLink = require_UnstyledLink(), UnstyledButton = require_UnstyledButton(), Tooltip = require_Tooltip(), MAX_SECONDARY_ACTIONS = 2, TOOLTIP_HOVER_DELAY = 1e3;
    function Item({
      url,
      icon: baseIcon,
      matchedItemIcon,
      label,
      subNavigationItems = [],
      secondaryAction,
      secondaryActions,
      displayActionsOnHover,
      disabled,
      onClick,
      accessibilityLabel,
      selected: selectedOverride,
      badge,
      new: isNew,
      matches,
      exactMatch,
      matchPaths,
      excludePaths,
      external,
      onToggleExpandedState,
      expanded,
      shouldResizeIcon,
      truncateText,
      showVerticalLine,
      showVerticalHoverPointer,
      level = 0,
      onMouseEnter,
      onMouseLeave
    }) {
      let i18n = hooks.useI18n(), {
        isNavigationCollapsed
      } = hooks$1.useMediaQuery(), secondaryNavigationId = React2.useId(), {
        location,
        onNavigationDismiss
      } = React2.useContext(context.NavigationContext), navTextRef = React2.useRef(null), [isTruncated, setIsTruncated] = React2.useState(!1);
      React2.useEffect(() => {
        !isNavigationCollapsed && expanded && onToggleExpandedState?.();
      }, [expanded, isNavigationCollapsed, onToggleExpandedState]), useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
        let navTextNode = navTextRef.current;
        truncateText && navTextNode && setIsTruncated(navTextNode.scrollHeight > navTextNode.clientHeight);
      }, [truncateText]);
      let tabIndex = disabled ? -1 : 0, indicatorMarkup = subNavigationItems.filter((subNavigationItem) => subNavigationItem.new).length > 0 ? /* @__PURE__ */ React2.createElement("span", {
        className: Navigation_module.default.Indicator
      }, /* @__PURE__ */ React2.createElement(Indicator.Indicator, {
        pulse: !0
      })) : null, matchState = matchStateForItem({
        url,
        matches,
        exactMatch,
        matchPaths,
        excludePaths
      }, location), matchingSubNavigationItems = subNavigationItems.filter((item) => {
        let subMatchState = matchStateForItem(item, location);
        return subMatchState === types.MatchState.MatchForced || subMatchState === types.MatchState.MatchUrl || subMatchState === types.MatchState.MatchPaths;
      }), childIsActive = matchingSubNavigationItems.length > 0, selected = selectedOverride ?? (matchState === types.MatchState.MatchForced || matchState === types.MatchState.MatchUrl || matchState === types.MatchState.MatchPaths), icon = selected || childIsActive ? matchedItemIcon ?? baseIcon : baseIcon, iconMarkup = icon ? /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Navigation_module.default.Icon, shouldResizeIcon && Navigation_module.default["Icon-resized"])
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: icon
      })) : null, badgeMarkup = null;
      isNew ? badgeMarkup = /* @__PURE__ */ React2.createElement(Badge3.Badge, {
        tone: "new"
      }, i18n.translate("Polaris.Badge.TONE_LABELS.new")) : typeof badge == "string" ? badgeMarkup = /* @__PURE__ */ React2.createElement(Badge3.Badge, {
        tone: "new"
      }, badge) : badgeMarkup = badge;
      let wrappedBadgeMarkup = badgeMarkup == null ? null : /* @__PURE__ */ React2.createElement("div", {
        className: Navigation_module.default.Badge
      }, badgeMarkup), tone = !showVerticalHoverPointer && !matches && level !== 0 ? "subdued" : void 0, fontWeight = "regular";
      (matches || selected) && !childIsActive ? fontWeight = "semibold" : (level === 0 || showVerticalHoverPointer) && (fontWeight = "medium");
      let itemLabelMarkup = /* @__PURE__ */ React2.createElement("span", {
        className: css.classNames(Navigation_module.default.Text, truncateText && Navigation_module.default["Text-truncated"]),
        ref: navTextRef
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "bodyMd",
        tone,
        fontWeight
      }, label), indicatorMarkup);
      if (url == null) {
        let className2 = css.classNames(Navigation_module.default.Item, disabled && Navigation_module.default["Item-disabled"], selectedOverride && Navigation_module.default["Item-selected"]);
        return /* @__PURE__ */ React2.createElement("li", {
          className: Navigation_module.default.ListItem
        }, /* @__PURE__ */ React2.createElement("div", {
          className: Navigation_module.default.ItemWrapper
        }, /* @__PURE__ */ React2.createElement("div", {
          className: css.classNames(Navigation_module.default.ItemInnerWrapper, disabled && Navigation_module.default.ItemInnerDisabled, selectedOverride && Navigation_module.default["ItemInnerWrapper-selected"])
        }, /* @__PURE__ */ React2.createElement("button", {
          type: "button",
          className: className2,
          disabled,
          "aria-disabled": disabled,
          "aria-label": accessibilityLabel,
          onClick: getClickHandler(onClick)
        }, iconMarkup, itemLabelMarkup, wrappedBadgeMarkup))));
      }
      secondaryAction && console.warn("Deprecation: The `secondaryAction` prop on the `Navigation.Item` has been deprecated. Use `secondaryActions` instead.");
      let actions = secondaryActions || secondaryAction && [secondaryAction];
      actions && actions.length > MAX_SECONDARY_ACTIONS && (actions.length = MAX_SECONDARY_ACTIONS, console.warn(`secondaryActions must have a maximum of ${MAX_SECONDARY_ACTIONS} actions. Only the first ${MAX_SECONDARY_ACTIONS} actions will be rendered.`));
      let secondaryActionMarkup = actions?.length ? /* @__PURE__ */ React2.createElement("span", {
        className: Navigation_module.default.SecondaryActions
      }, actions.map((action8) => /* @__PURE__ */ React2.createElement(ItemSecondaryAction, Object.assign({
        key: action8.accessibilityLabel
      }, action8, {
        tabIndex,
        disabled
      })))) : null, itemContentMarkup = /* @__PURE__ */ React2.createElement(React2.Fragment, null, iconMarkup, itemLabelMarkup, secondaryActionMarkup ? null : wrappedBadgeMarkup), outerContentMarkup = /* @__PURE__ */ React2.createElement(React2.Fragment, null, secondaryActionMarkup ? wrappedBadgeMarkup : null), showExpanded = selected || expanded || childIsActive, itemClassName = css.classNames(Navigation_module.default.Item, disabled && Navigation_module.default["Item-disabled"], (selected || childIsActive) && Navigation_module.default["Item-selected"], showExpanded && Navigation_module.default.subNavigationActive, childIsActive && Navigation_module.default["Item-child-active"], showVerticalLine && Navigation_module.default["Item-line"], matches && Navigation_module.default["Item-line-pointer"], showVerticalHoverPointer && Navigation_module.default["Item-hover-pointer"]), secondaryNavigationMarkup = null;
      if (subNavigationItems.length > 0) {
        let longestMatch = matchingSubNavigationItems.sort(({
          url: firstUrl
        }, {
          url: secondUrl
        }) => secondUrl.length - firstUrl.length)[0];
        secondaryNavigationMarkup = /* @__PURE__ */ React2.createElement(SecondaryNavigation.SecondaryNavigation, {
          ItemComponent: Item,
          icon,
          longestMatch,
          subNavigationItems,
          showExpanded,
          truncateText,
          secondaryNavigationId
        });
      }
      let className = css.classNames(Navigation_module.default.ListItem, Boolean(actions && actions.length) && Navigation_module.default["ListItem-hasAction"]), itemLinkMarkup = () => {
        let linkMarkup = /* @__PURE__ */ React2.createElement(UnstyledLink.UnstyledLink, Object.assign({
          url,
          className: itemClassName,
          external,
          tabIndex,
          "aria-disabled": disabled,
          "aria-label": accessibilityLabel,
          onClick: getClickHandler(onClick)
        }, normalizeAriaAttributes(secondaryNavigationId, subNavigationItems.length > 0, showExpanded)), itemContentMarkup);
        return isTruncated ? /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, {
          hoverDelay: TOOLTIP_HOVER_DELAY,
          content: label,
          preferredPosition: "above"
        }, linkMarkup) : linkMarkup;
      };
      return /* @__PURE__ */ React2.createElement("li", {
        className,
        onMouseEnter: () => {
          onMouseEnter?.(label);
        },
        onMouseLeave
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Navigation_module.default.ItemWrapper
      }, /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Navigation_module.default.ItemInnerWrapper, selected && childIsActive && Navigation_module.default["ItemInnerWrapper-open"] || selected && !childIsActive && Navigation_module.default["ItemInnerWrapper-selected"], displayActionsOnHover && Navigation_module.default["ItemInnerWrapper-display-actions-on-hover"], disabled && Navigation_module.default.ItemInnerDisabled)
      }, displayActionsOnHover && secondaryActionMarkup && wrappedBadgeMarkup ? /* @__PURE__ */ React2.createElement("span", {
        className: Navigation_module.default.ItemWithFloatingActions
      }, itemLinkMarkup(), secondaryActionMarkup) : /* @__PURE__ */ React2.createElement(React2.Fragment, null, itemLinkMarkup(), secondaryActionMarkup), outerContentMarkup)), secondaryNavigationMarkup);
      function getClickHandler(onClick2) {
        return (event) => {
          let {
            currentTarget
          } = event;
          if (currentTarget.getAttribute("href") === location && event.preventDefault(), subNavigationItems && subNavigationItems.length > 0 && isNavigationCollapsed)
            event.preventDefault(), onToggleExpandedState?.();
          else if (onNavigationDismiss) {
            onNavigationDismiss(), onClick2 && onClick2 !== onNavigationDismiss && onClick2();
            return;
          }
          onClick2 && onClick2();
        };
      }
    }
    function ItemSecondaryAction({
      url,
      icon,
      accessibilityLabel,
      tooltip,
      onClick,
      disabled,
      tabIndex
    }) {
      let markup = url ? /* @__PURE__ */ React2.createElement(UnstyledLink.UnstyledLink, {
        external: !0,
        url,
        className: Navigation_module.default.SecondaryAction,
        tabIndex,
        "aria-disabled": disabled,
        "aria-label": accessibilityLabel,
        onClick
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: icon
      })) : /* @__PURE__ */ React2.createElement(UnstyledButton.UnstyledButton, {
        className: Navigation_module.default.SecondaryAction,
        tabIndex,
        disabled,
        accessibilityLabel,
        onClick
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: icon
      }));
      return tooltip ? /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, tooltip, " ", markup, " ") : markup;
    }
    function isNavigationItemActive(navigationItem, currentPath) {
      let matchState = matchStateForItem(navigationItem, currentPath), matchingSubNavigationItems = navigationItem.subNavigationItems && navigationItem.subNavigationItems.filter((item) => {
        let subMatchState = matchStateForItem(item, currentPath);
        return subMatchState === types.MatchState.MatchForced || subMatchState === types.MatchState.MatchUrl || subMatchState === types.MatchState.MatchPaths;
      }), childIsActive = matchingSubNavigationItems && matchingSubNavigationItems.length > 0;
      return matchState === types.MatchState.MatchForced || matchState === types.MatchState.MatchUrl || matchState === types.MatchState.MatchPaths || childIsActive;
    }
    function normalizePathname(pathname) {
      let barePathname = pathname.split("?")[0].split("#")[0];
      return barePathname.endsWith("/") ? barePathname : `${barePathname}/`;
    }
    function safeEqual(location, path) {
      return normalizePathname(location) === normalizePathname(path);
    }
    function safeStartsWith(location, path) {
      return normalizePathname(location).startsWith(normalizePathname(path));
    }
    function matchStateForItem({
      url,
      matches,
      exactMatch,
      matchPaths,
      excludePaths
    }, location) {
      return url == null ? types.MatchState.NoMatch : matches ? types.MatchState.MatchForced : matches === !1 || excludePaths && excludePaths.some((path) => safeStartsWith(location, path)) ? types.MatchState.Excluded : matchPaths && matchPaths.some((path) => safeStartsWith(location, path)) ? types.MatchState.MatchPaths : (exactMatch ? safeEqual(location, url) : safeStartsWith(location, url)) ? types.MatchState.MatchUrl : types.MatchState.NoMatch;
    }
    function normalizeAriaAttributes(controlId, hasSubMenu, expanded) {
      return hasSubMenu ? {
        "aria-expanded": expanded,
        "aria-controls": controlId
      } : void 0;
    }
    exports.Item = Item;
    exports.ItemSecondaryAction = ItemSecondaryAction;
    exports.MAX_SECONDARY_ACTIONS = MAX_SECONDARY_ACTIONS;
    exports.isNavigationItemActive = isNavigationItemActive;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Navigation/components/Section/Section.js
var require_Section7 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Navigation/components/Section/Section.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), useToggle = require_use_toggle(), Navigation_module = require_Navigation_css(), Item = require_Item10(), hooks = require_hooks11(), Icon2 = require_Icon(), Tooltip = require_Tooltip(), Text3 = require_Text(), Collapsible2 = require_Collapsible();
    function Section({
      title,
      fill,
      action: action8,
      items,
      rollup,
      separator
    }) {
      let {
        value: expanded,
        toggle: toggleExpanded,
        setFalse: setExpandedFalse
      } = useToggle.useToggle(!1), animationFrame = React2.useRef(null), {
        isNavigationCollapsed
      } = hooks.useMediaQuery(), [expandedIndex, setExpandedIndex] = React2.useState(), handleClick = (onClick, hasSubNavItems) => () => {
        onClick && onClick(), animationFrame.current && cancelAnimationFrame(animationFrame.current), (!hasSubNavItems || !isNavigationCollapsed) && (animationFrame.current = requestAnimationFrame(setExpandedFalse));
      };
      React2.useEffect(() => () => {
        animationFrame.current && cancelAnimationFrame(animationFrame.current);
      });
      let className = css.classNames(Navigation_module.default.Section, separator && Navigation_module.default["Section-withSeparator"], fill && Navigation_module.default["Section-fill"]), buttonMarkup = action8 && /* @__PURE__ */ React2.createElement("button", {
        type: "button",
        className: Navigation_module.default.Action,
        "aria-label": action8.accessibilityLabel,
        onClick: action8.onClick
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: action8.icon
      })), actionMarkup = action8 && (action8.tooltip ? /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, action8.tooltip, buttonMarkup) : buttonMarkup), sectionHeadingMarkup = title && /* @__PURE__ */ React2.createElement("li", {
        className: Navigation_module.default.SectionHeading
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "bodySm",
        fontWeight: "medium",
        tone: "subdued"
      }, title), actionMarkup), itemsMarkup = items.map((item, index) => {
        let {
          onClick,
          label,
          subNavigationItems,
          ...rest
        } = item, hasSubNavItems = subNavigationItems != null && subNavigationItems.length > 0, handleToggleExpandedState = () => {
          setExpandedIndex(expandedIndex === index ? -1 : index);
        };
        return /* @__PURE__ */ React2.createElement(Item.Item, Object.assign({
          key: label
        }, rest, {
          label,
          subNavigationItems,
          onClick: handleClick(onClick, hasSubNavItems),
          onToggleExpandedState: handleToggleExpandedState,
          expanded: expandedIndex === index
        }));
      }), toggleClassName = css.classNames(Navigation_module.default.Item, Navigation_module.default.RollupToggle), ariaLabel = rollup && (expanded ? rollup.hide : rollup.view), toggleRollup = rollup && items.length > rollup.after && /* @__PURE__ */ React2.createElement("div", {
        className: Navigation_module.default.ListItem,
        key: "List Item"
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Navigation_module.default.ItemWrapper
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Navigation_module.default.ItemInnerWrapper
      }, /* @__PURE__ */ React2.createElement("button", {
        type: "button",
        className: toggleClassName,
        onClick: toggleExpanded,
        "aria-label": ariaLabel
      }, /* @__PURE__ */ React2.createElement("span", {
        className: Navigation_module.default.Icon
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.MenuHorizontalIcon
      })))))), activeItemIndex = items.findIndex((item) => rollup ? rollup.activePath === item.url || item.url && rollup.activePath.startsWith(item.url) || (item.subNavigationItems ? item.subNavigationItems.some(({
        url: itemUrl
      }) => rollup.activePath.startsWith(itemUrl)) : !1) : !1), sectionItems = rollup ? itemsMarkup.slice(0, rollup.after) : itemsMarkup, additionalItems = rollup ? itemsMarkup.slice(rollup.after) : [];
      rollup && activeItemIndex !== -1 && activeItemIndex > rollup.after - 1 && sectionItems.push(...additionalItems.splice(activeItemIndex - rollup.after, 1));
      let additionalItemsId = React2.useId(), activeItemsMarkup = rollup && additionalItems.length > 0 && /* @__PURE__ */ React2.createElement("li", {
        className: Navigation_module.default.RollupSection
      }, /* @__PURE__ */ React2.createElement(Collapsible2.Collapsible, {
        id: additionalItemsId,
        open: expanded
      }, /* @__PURE__ */ React2.createElement("ul", {
        className: Navigation_module.default.List
      }, additionalItems)), toggleRollup);
      return /* @__PURE__ */ React2.createElement("ul", {
        className
      }, sectionHeadingMarkup, sectionItems, activeItemsMarkup);
    }
    exports.Section = Section;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Navigation/Navigation.js
var require_Navigation2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Navigation/Navigation.js"(exports) {
    "use strict";
    var React2 = require_react(), withinContentContext = require_within_content_context(), css = require_css(), getWidth = require_get_width(), context = require_context20(), Navigation_module = require_Navigation_css(), Section = require_Section7(), hooks = require_hooks9(), UnstyledLink = require_UnstyledLink(), Image = require_Image(), Scrollable = require_Scrollable(), Item = require_Item10(), Navigation = function({
      children,
      contextControl,
      location,
      onDismiss,
      ariaLabelledBy,
      logoSuffix
    }) {
      let {
        logo
      } = hooks.useFrame(), width = getWidth.getWidth(logo, 104), logoMarkup = logo ? /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Navigation_module.default.LogoContainer, logoSuffix && Navigation_module.default.hasLogoSuffix)
      }, /* @__PURE__ */ React2.createElement(UnstyledLink.UnstyledLink, {
        url: logo.url || "",
        className: Navigation_module.default.LogoLink,
        style: {
          width
        }
      }, /* @__PURE__ */ React2.createElement(Image.Image, {
        source: logo.topBarSource || "",
        alt: logo.accessibilityLabel || "",
        className: Navigation_module.default.Logo,
        style: {
          width
        }
      })), logoSuffix) : null, mediaMarkup = contextControl ? /* @__PURE__ */ React2.createElement("div", {
        className: Navigation_module.default.ContextControl
      }, contextControl) : logoMarkup, context$1 = React2.useMemo(() => ({
        location,
        onNavigationDismiss: onDismiss
      }), [location, onDismiss]);
      return /* @__PURE__ */ React2.createElement(context.NavigationContext.Provider, {
        value: context$1
      }, /* @__PURE__ */ React2.createElement(withinContentContext.WithinContentContext.Provider, {
        value: !0
      }, /* @__PURE__ */ React2.createElement("nav", {
        className: Navigation_module.default.Navigation,
        "aria-labelledby": ariaLabelledBy
      }, mediaMarkup, /* @__PURE__ */ React2.createElement(Scrollable.Scrollable, {
        className: Navigation_module.default.PrimaryNavigation
      }, children))));
    };
    Navigation.Item = Item.Item;
    Navigation.Section = Section.Section;
    exports.Navigation = Navigation;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/arrays.js
var require_arrays = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/arrays.js"(exports) {
    "use strict";
    function arraysAreEqual(firstArray, secondArray, comparator) {
      return firstArray.length !== secondArray.length ? !1 : firstArray.every((firstItem, index) => {
        let secondItem = secondArray[index];
        return comparator != null ? comparator(firstItem, secondItem) : firstItem === secondItem;
      });
    }
    exports.arraysAreEqual = arraysAreEqual;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/OptionList/components/Option/Option.css.js
var require_Option_css2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/OptionList/components/Option/Option.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Option: "Polaris-OptionList-Option",
      SingleSelectOption: "Polaris-OptionList-Option__SingleSelectOption",
      focused: "Polaris-OptionList-Option--focused",
      active: "Polaris-OptionList-Option--active",
      disabled: "Polaris-OptionList-Option--disabled",
      select: "Polaris-OptionList-Option--select",
      Media: "Polaris-OptionList-Option__Media",
      Label: "Polaris-OptionList-Option__Label",
      MultiSelectOption: "Polaris-OptionList-Option__MultiSelectOption",
      CheckboxLabel: "Polaris-OptionList-Option__CheckboxLabel",
      verticalAlignTop: "Polaris-OptionList-Option--verticalAlignTop",
      verticalAlignCenter: "Polaris-OptionList-Option--verticalAlignCenter",
      verticalAlignBottom: "Polaris-OptionList-Option--verticalAlignBottom",
      Icon: "Polaris-OptionList-Option__Icon",
      Checkbox: "Polaris-OptionList-Option__Checkbox"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/OptionList/components/Option/Option.js
var require_Option2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/OptionList/components/Option/Option.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), useToggle = require_use_toggle(), css = require_css(), Option_module = require_Option_css2(), Checkbox = require_Checkbox(), InlineStack3 = require_InlineStack(), Icon2 = require_Icon(), Scrollable = require_Scrollable();
    function Option({
      label,
      value,
      id,
      select,
      active,
      allowMultiple,
      disabled,
      media,
      onClick,
      section,
      index,
      verticalAlign,
      onPointerEnter,
      onFocus
    }) {
      let {
        value: focused,
        toggle: toggleFocused
      } = useToggle.useToggle(!1), handleClick = React2.useCallback(() => {
        disabled || onClick(section, index);
      }, [disabled, index, onClick, section]), handlePointerEnter = React2.useCallback(() => {
        disabled || onPointerEnter(section, index);
      }, [disabled, onPointerEnter, section, index]), handleFocus = React2.useCallback(() => {
        toggleFocused(), onFocus(section, index);
      }, [toggleFocused, onFocus, section, index]), mediaMarkup = media ? /* @__PURE__ */ React2.createElement("div", {
        className: Option_module.default.Media
      }, media) : null, singleSelectClassName = css.classNames(Option_module.default.SingleSelectOption, focused && Option_module.default.focused, disabled && Option_module.default.disabled, select && Option_module.default.select, active && Option_module.default.active, verticalAlign && Option_module.default[css.variationName("verticalAlign", verticalAlign)]), multiSelectClassName = css.classNames(Option_module.default.Label, disabled && Option_module.default.disabled, active && Option_module.default.active, select && Option_module.default.select, verticalAlign && Option_module.default[css.variationName("verticalAlign", verticalAlign)], allowMultiple && Option_module.default.CheckboxLabel, allowMultiple && Option_module.default.MultiSelectOption), optionMarkup = allowMultiple ? /* @__PURE__ */ React2.createElement("label", {
        htmlFor: id,
        className: multiSelectClassName
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Option_module.default.Checkbox
      }, /* @__PURE__ */ React2.createElement(Checkbox.Checkbox, {
        id,
        label: "",
        ariaDescribedBy: `${id}-label`,
        value,
        checked: select,
        disabled,
        onChange: handleClick
      })), mediaMarkup, /* @__PURE__ */ React2.createElement("span", {
        id: `${id}-label`
      }, label)) : /* @__PURE__ */ React2.createElement("button", {
        id,
        type: "button",
        className: singleSelectClassName,
        onClick: handleClick,
        disabled,
        onFocus: handleFocus,
        onBlur: toggleFocused,
        "aria-pressed": active || select
      }, /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        wrap: !1,
        blockAlign: verticalAlignToBlockAlign(verticalAlign)
      }, mediaMarkup, label), (select || active) && /* @__PURE__ */ React2.createElement("span", {
        className: Option_module.default.Icon
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.CheckIcon
      })))), scrollMarkup = active ? /* @__PURE__ */ React2.createElement(Scrollable.Scrollable.ScrollTo, null) : null;
      return /* @__PURE__ */ React2.createElement("li", {
        key: id,
        className: Option_module.default.Option,
        tabIndex: -1,
        onPointerEnter: handlePointerEnter
      }, scrollMarkup, optionMarkup);
    }
    function verticalAlignToBlockAlign(verticalAlign) {
      switch (verticalAlign) {
        case "top":
          return "start";
        case "center":
          return "center";
        case "bottom":
          return "end";
        default:
          return "start";
      }
    }
    exports.Option = Option;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/OptionList/OptionList.js
var require_OptionList = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/OptionList/OptionList.js"(exports) {
    "use strict";
    var React2 = require_react(), options = require_options(), arrays = require_arrays(), useDeepEffect = require_use_deep_effect(), Option = require_Option2(), Box3 = require_Box(), BlockStack3 = require_BlockStack(), Text3 = require_Text();
    function OptionList({
      options: options2,
      sections,
      title,
      selected,
      allowMultiple,
      role,
      verticalAlign,
      onChange,
      id: idProp,
      onPointerEnterOption,
      onFocusOption
    }) {
      let [normalizedOptions, setNormalizedOptions] = React2.useState(createNormalizedOptions(options2, sections, title)), uniqId = React2.useId(), id = idProp ?? uniqId;
      useDeepEffect.useDeepEffect(() => {
        setNormalizedOptions(createNormalizedOptions(options2 || [], sections || [], title));
      }, [options2, sections, title], optionArraysAreEqual);
      let handleClick = React2.useCallback((sectionIndex, optionIndex) => {
        let selectedValue = normalizedOptions[sectionIndex].options[optionIndex].value, foundIndex = selected.indexOf(selectedValue);
        if (allowMultiple) {
          let newSelection = foundIndex === -1 ? [selectedValue, ...selected] : [...selected.slice(0, foundIndex), ...selected.slice(foundIndex + 1, selected.length)];
          onChange(newSelection);
          return;
        }
        onChange([selectedValue]);
      }, [normalizedOptions, selected, allowMultiple, onChange]), handlePointerEnter = React2.useCallback((sectionIndex, optionIndex) => {
        if (!onPointerEnterOption)
          return;
        let selectedValue = normalizedOptions[sectionIndex].options[optionIndex].value;
        onPointerEnterOption(selectedValue);
      }, [normalizedOptions, onPointerEnterOption]), handleFocus = React2.useCallback((sectionIndex, optionIndex) => {
        if (!onFocusOption)
          return;
        let selectedValue = normalizedOptions[sectionIndex].options[optionIndex].value;
        onFocusOption(selectedValue);
      }, [normalizedOptions, onFocusOption]), optionsMarkup = normalizedOptions.length > 0 ? normalizedOptions.map(({
        title: title2,
        options: options3
      }, sectionIndex) => {
        let isFirstOption = sectionIndex === 0, titleLevel = isFirstOption ? "h2" : "h3", titleMarkup = title2 ? /* @__PURE__ */ React2.createElement(Box3.Box, {
          paddingBlockStart: isFirstOption ? "050" : "300",
          paddingInlineStart: "150",
          paddingBlockEnd: "100",
          paddingInlineEnd: "150",
          borderColor: "border-secondary"
        }, /* @__PURE__ */ React2.createElement(Text3.Text, {
          as: titleLevel,
          variant: "headingSm"
        }, title2)) : null, optionsMarkup2 = options3 && options3.map((option2, optionIndex) => {
          let isSelected = selected.includes(option2.value), optionId = option2.id || `${id}-${sectionIndex}-${optionIndex}`;
          return /* @__PURE__ */ React2.createElement(Option.Option, Object.assign({
            key: optionId
          }, option2, {
            id: optionId,
            section: sectionIndex,
            index: optionIndex,
            onClick: handleClick,
            select: isSelected,
            allowMultiple,
            verticalAlign,
            onPointerEnter: handlePointerEnter,
            onFocus: handleFocus
          }));
        }), option = /* @__PURE__ */ React2.createElement(Box3.Box, {
          as: "ul",
          id: `${id}-${sectionIndex}`,
          role
        }, optionsMarkup2), blockStartPadding = isFirstOption ? title2 ? "100" : "0" : title2 ? "050" : "0";
        return /* @__PURE__ */ React2.createElement(Box3.Box, {
          key: title2 || `noTitle-${sectionIndex}`,
          as: "li",
          paddingBlockStart: blockStartPadding
        }, /* @__PURE__ */ React2.createElement(BlockStack3.BlockStack, {
          gap: isFirstOption && sections ? void 0 : "0"
        }, titleMarkup, option));
      }) : null;
      return /* @__PURE__ */ React2.createElement(Box3.Box, {
        as: "ul",
        role,
        padding: "150"
      }, optionsMarkup);
    }
    function createNormalizedOptions(options2, sections, title) {
      if (options2 == null) {
        let section = {
          options: [],
          title
        };
        return sections == null ? [] : [section, ...sections];
      }
      return sections == null ? [{
        title,
        options: options2
      }] : [{
        title,
        options: options2
      }, ...sections];
    }
    function optionArraysAreEqual(firstArray, secondArray) {
      return options.isSection(firstArray) && options.isSection(secondArray) ? arrays.arraysAreEqual(firstArray, secondArray, testSectionsPropEquality) : arrays.arraysAreEqual(firstArray, secondArray);
    }
    function testSectionsPropEquality(previousSection, currentSection) {
      let {
        options: previousOptions
      } = previousSection, {
        options: currentOptions
      } = currentSection, optionsAreEqual = arrays.arraysAreEqual(previousOptions, currentOptions), titlesAreEqual = previousSection.title === currentSection.title;
      return optionsAreEqual && titlesAreEqual;
    }
    exports.OptionList = OptionList;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/is-interface.js
var require_is_interface = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/is-interface.js"(exports) {
    "use strict";
    var React2 = require_react();
    function isInterface(x) {
      return !/* @__PURE__ */ React2.isValidElement(x) && x !== void 0;
    }
    exports.isInterface = isInterface;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/is-react-element.js
var require_is_react_element = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/is-react-element.js"(exports) {
    "use strict";
    var React2 = require_react();
    function isReactElement(x) {
      return /* @__PURE__ */ React2.isValidElement(x) && x !== void 0;
    }
    exports.isReactElement = isReactElement;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Page/Page.css.js
var require_Page_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Page/Page.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Page: "Polaris-Page",
      fullWidth: "Polaris-Page--fullWidth",
      narrowWidth: "Polaris-Page--narrowWidth",
      Content: "Polaris-Page__Content"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Page/components/Header/Header.css.js
var require_Header_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Page/components/Header/Header.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      TitleWrapper: "Polaris-Page-Header__TitleWrapper",
      TitleWrapperExpand: "Polaris-Page-Header__TitleWrapperExpand",
      BreadcrumbWrapper: "Polaris-Page-Header__BreadcrumbWrapper",
      PaginationWrapper: "Polaris-Page-Header__PaginationWrapper",
      PrimaryActionWrapper: "Polaris-Page-Header__PrimaryActionWrapper",
      Row: "Polaris-Page-Header__Row",
      mobileView: "Polaris-Page-Header--mobileView",
      RightAlign: "Polaris-Page-Header__RightAlign",
      noBreadcrumbs: "Polaris-Page-Header--noBreadcrumbs",
      AdditionalMetaData: "Polaris-Page-Header__AdditionalMetaData",
      Actions: "Polaris-Page-Header__Actions",
      longTitle: "Polaris-Page-Header--longTitle",
      mediumTitle: "Polaris-Page-Header--mediumTitle",
      isSingleRow: "Polaris-Page-Header--isSingleRow"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Page/components/Header/components/Title/Title.css.js
var require_Title_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Page/components/Header/components/Title/Title.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Title: "Polaris-Header-Title",
      TitleWithSubtitle: "Polaris-Header-Title__TitleWithSubtitle",
      TitleWrapper: "Polaris-Header-Title__TitleWrapper",
      SubTitle: "Polaris-Header-Title__SubTitle",
      SubtitleCompact: "Polaris-Header-Title__SubtitleCompact",
      SubtitleMaxWidth: "Polaris-Header-Title__SubtitleMaxWidth"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Page/components/Header/components/Title/Title.js
var require_Title = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Page/components/Header/components/Title/Title.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Title_module = require_Title_css(), Text3 = require_Text(), Bleed = require_Bleed();
    function Title({
      title,
      subtitle,
      titleMetadata,
      compactTitle,
      hasSubtitleMaxWidth
    }) {
      let className = css.classNames(Title_module.default.Title, subtitle && Title_module.default.TitleWithSubtitle), titleMarkup = title ? /* @__PURE__ */ React2.createElement("h1", {
        className
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "headingLg",
        fontWeight: "bold"
      }, title)) : null, titleMetadataMarkup = titleMetadata ? /* @__PURE__ */ React2.createElement(Bleed.Bleed, {
        marginBlock: "100"
      }, titleMetadata) : null, wrappedTitleMarkup = /* @__PURE__ */ React2.createElement("div", {
        className: Title_module.default.TitleWrapper
      }, titleMarkup, titleMetadataMarkup), subtitleMarkup = subtitle ? /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Title_module.default.SubTitle, compactTitle && Title_module.default.SubtitleCompact, hasSubtitleMaxWidth && Title_module.default.SubtitleMaxWidth)
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "p",
        variant: "bodySm",
        tone: "subdued"
      }, subtitle)) : null;
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, wrappedTitleMarkup, subtitleMarkup);
    }
    exports.Title = Title;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Page/components/Header/Header.js
var require_Header4 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Page/components/Header/Header.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), components = require_components(), isInterface = require_is_interface(), isReactElement = require_is_react_element(), Header_module = require_Header_css(), Breadcrumbs = require_Breadcrumbs(), Title = require_Title(), ActionMenu = require_ActionMenu(), FilterActionsProvider = require_FilterActionsProvider(), hooks = require_hooks2(), hooks$1 = require_hooks11(), Box3 = require_Box(), Pagination = require_Pagination(), Text3 = require_Text(), InlineStack3 = require_InlineStack(), utils = require_utils(), Tooltip = require_Tooltip(), SHORT_TITLE = 20, REALLY_SHORT_TITLE = 8, LONG_TITLE = 34;
    function Header({
      title,
      subtitle,
      pageReadyAccessibilityLabel,
      titleMetadata,
      additionalMetadata,
      titleHidden = !1,
      primaryAction,
      pagination,
      filterActions,
      backAction,
      secondaryActions = [],
      actionGroups = [],
      compactTitle = !1,
      onActionRollup
    }) {
      let i18n = hooks.useI18n(), {
        isNavigationCollapsed
      } = hooks$1.useMediaQuery(), isSingleRow = !primaryAction && !pagination && (isInterface.isInterface(secondaryActions) && !secondaryActions.length || isReactElement.isReactElement(secondaryActions)) && !actionGroups.length, hasActionGroupsOrSecondaryActions = actionGroups.length > 0 || isInterface.isInterface(secondaryActions) && secondaryActions.length > 0 || isReactElement.isReactElement(secondaryActions), breadcrumbMarkup = backAction ? /* @__PURE__ */ React2.createElement("div", {
        className: Header_module.default.BreadcrumbWrapper
      }, /* @__PURE__ */ React2.createElement(Box3.Box, {
        maxWidth: "100%",
        paddingInlineEnd: "100",
        printHidden: !0
      }, /* @__PURE__ */ React2.createElement(Breadcrumbs.Breadcrumbs, {
        backAction
      }))) : null, paginationMarkup = pagination && !isNavigationCollapsed ? /* @__PURE__ */ React2.createElement("div", {
        className: Header_module.default.PaginationWrapper
      }, /* @__PURE__ */ React2.createElement(Box3.Box, {
        printHidden: !0
      }, /* @__PURE__ */ React2.createElement(Pagination.Pagination, Object.assign({}, pagination, {
        hasPrevious: pagination.hasPrevious,
        hasNext: pagination.hasNext
      })))) : null, pageTitleMarkup = /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Header_module.default.TitleWrapper, !hasActionGroupsOrSecondaryActions && Header_module.default.TitleWrapperExpand)
      }, /* @__PURE__ */ React2.createElement(Title.Title, {
        title,
        subtitle,
        titleMetadata,
        compactTitle,
        hasSubtitleMaxWidth: hasActionGroupsOrSecondaryActions
      })), labelForPageReadyAccessibilityLabel = pageReadyAccessibilityLabel || title, pageReadyAccessibilityLabelMarkup = labelForPageReadyAccessibilityLabel ? /* @__PURE__ */ React2.createElement("div", {
        role: "status"
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        visuallyHidden: !0,
        as: "p"
      }, i18n.translate("Polaris.Page.Header.pageReadyAccessibilityLabel", {
        title: labelForPageReadyAccessibilityLabel
      }))) : void 0, primaryActionMarkup = primaryAction ? /* @__PURE__ */ React2.createElement(PrimaryActionMarkup, {
        primaryAction
      }) : null, actionMenuMarkup = null;
      isInterface.isInterface(secondaryActions) && (secondaryActions.length > 0 || ActionMenu.hasGroupsWithActions(actionGroups)) ? actionMenuMarkup = /* @__PURE__ */ React2.createElement(ActionMenu.ActionMenu, {
        actions: secondaryActions,
        groups: actionGroups,
        rollup: isNavigationCollapsed,
        rollupActionsLabel: title ? i18n.translate("Polaris.Page.Header.rollupActionsLabel", {
          title
        }) : void 0,
        onActionRollup
      }) : isReactElement.isReactElement(secondaryActions) && (actionMenuMarkup = /* @__PURE__ */ React2.createElement(React2.Fragment, null, secondaryActions));
      let navigationMarkup = breadcrumbMarkup || paginationMarkup ? /* @__PURE__ */ React2.createElement(Box3.Box, {
        printHidden: !0,
        paddingBlockEnd: "100",
        paddingInlineEnd: actionMenuMarkup && isNavigationCollapsed ? "1000" : void 0
      }, /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        gap: "400",
        align: "space-between",
        blockAlign: "center"
      }, breadcrumbMarkup, paginationMarkup)) : null, additionalMetadataMarkup = additionalMetadata ? /* @__PURE__ */ React2.createElement("div", {
        className: Header_module.default.AdditionalMetaData
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        tone: "subdued",
        as: "span",
        variant: "bodySm"
      }, additionalMetadata)) : null, headerClassNames = css.classNames(isSingleRow && Header_module.default.isSingleRow, navigationMarkup && Header_module.default.hasNavigation, actionMenuMarkup && Header_module.default.hasActionMenu, isNavigationCollapsed && Header_module.default.mobileView, !backAction && Header_module.default.noBreadcrumbs, title && title.length < LONG_TITLE && Header_module.default.mediumTitle, title && title.length > LONG_TITLE && Header_module.default.longTitle), {
        slot1,
        slot2,
        slot3,
        slot4,
        slot5
      } = determineLayout({
        actionMenuMarkup,
        additionalMetadataMarkup,
        breadcrumbMarkup,
        isNavigationCollapsed,
        pageTitleMarkup,
        paginationMarkup,
        primaryActionMarkup,
        title
      });
      return /* @__PURE__ */ React2.createElement(Box3.Box, {
        position: "relative",
        paddingBlockStart: {
          xs: "400",
          md: "600"
        },
        paddingBlockEnd: {
          xs: "400",
          md: "600"
        },
        paddingInlineStart: {
          xs: "400",
          sm: "0"
        },
        paddingInlineEnd: {
          xs: "400",
          sm: "0"
        },
        visuallyHidden: titleHidden
      }, pageReadyAccessibilityLabelMarkup, /* @__PURE__ */ React2.createElement("div", {
        className: headerClassNames
      }, /* @__PURE__ */ React2.createElement(FilterActionsProvider.FilterActionsProvider, {
        filterActions: Boolean(filterActions)
      }, /* @__PURE__ */ React2.createElement(components.ConditionalRender, {
        condition: [slot1, slot2, slot3, slot4].some(notNull)
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Header_module.default.Row
      }, slot1, slot2, /* @__PURE__ */ React2.createElement(components.ConditionalRender, {
        condition: [slot3, slot4].some(notNull)
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Header_module.default.RightAlign
      }, /* @__PURE__ */ React2.createElement(components.ConditionalWrapper, {
        condition: [slot3, slot4].every(notNull),
        wrapper: (children) => /* @__PURE__ */ React2.createElement("div", {
          className: Header_module.default.Actions
        }, children)
      }, slot3, slot4))))), /* @__PURE__ */ React2.createElement(components.ConditionalRender, {
        condition: [slot5].some(notNull)
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Header_module.default.Row
      }, /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        gap: "400"
      }, slot5))))));
    }
    function PrimaryActionMarkup({
      primaryAction
    }) {
      let {
        isNavigationCollapsed
      } = hooks$1.useMediaQuery(), actionMarkup;
      if (isInterface.isInterface(primaryAction)) {
        let {
          primary: isPrimary,
          helpText
        } = primaryAction, primary = isPrimary === void 0 ? !0 : isPrimary, content = utils.buttonFrom(shouldShowIconOnly(isNavigationCollapsed, primaryAction), {
          variant: primary ? "primary" : void 0
        });
        actionMarkup = helpText ? /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, {
          content: helpText
        }, content) : content;
      } else
        actionMarkup = primaryAction;
      return /* @__PURE__ */ React2.createElement("div", {
        className: Header_module.default.PrimaryActionWrapper
      }, /* @__PURE__ */ React2.createElement(Box3.Box, {
        printHidden: !0
      }, actionMarkup));
    }
    function shouldShowIconOnly(isMobile, action8) {
      let {
        content,
        accessibilityLabel
      } = action8, {
        icon
      } = action8;
      return icon == null ? {
        ...action8,
        icon: void 0
      } : (isMobile && (accessibilityLabel = accessibilityLabel || content, content = void 0), {
        ...action8,
        content,
        accessibilityLabel,
        icon
      });
    }
    function notNull(value) {
      return value != null;
    }
    function determineLayout({
      actionMenuMarkup,
      additionalMetadataMarkup,
      breadcrumbMarkup,
      isNavigationCollapsed,
      pageTitleMarkup,
      paginationMarkup,
      primaryActionMarkup,
      title
    }) {
      let layouts = {
        mobileCompact: {
          slots: {
            slot1: null,
            slot2: pageTitleMarkup,
            slot3: actionMenuMarkup,
            slot4: primaryActionMarkup,
            slot5: additionalMetadataMarkup
          },
          condition: isNavigationCollapsed && breadcrumbMarkup == null && title != null && title.length <= REALLY_SHORT_TITLE
        },
        mobileDefault: {
          slots: {
            slot1: breadcrumbMarkup,
            slot2: pageTitleMarkup,
            slot3: actionMenuMarkup,
            slot4: primaryActionMarkup,
            slot5: additionalMetadataMarkup
          },
          condition: isNavigationCollapsed
        },
        desktopCompact: {
          slots: {
            slot1: breadcrumbMarkup,
            slot2: pageTitleMarkup,
            slot3: actionMenuMarkup,
            slot4: primaryActionMarkup,
            slot5: additionalMetadataMarkup
          },
          condition: !isNavigationCollapsed && paginationMarkup == null && actionMenuMarkup == null && title != null && title.length <= SHORT_TITLE
        },
        desktopDefault: {
          slots: {
            slot1: breadcrumbMarkup,
            slot2: pageTitleMarkup,
            slot3: /* @__PURE__ */ React2.createElement(React2.Fragment, null, actionMenuMarkup, primaryActionMarkup),
            slot4: paginationMarkup,
            slot5: additionalMetadataMarkup
          },
          condition: !isNavigationCollapsed
        }
      };
      return (Object.values(layouts).find((layout2) => layout2.condition) || layouts.desktopDefault).slots;
    }
    exports.Header = Header;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Page/Page.js
var require_Page = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Page/Page.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), isInterface = require_is_interface(), isReactElement = require_is_react_element(), Page_module = require_Page_css(), Header = require_Header4();
    function Page2({
      children,
      fullWidth,
      narrowWidth,
      ...rest
    }) {
      let pageClassName = css.classNames(Page_module.default.Page, fullWidth && Page_module.default.fullWidth, narrowWidth && Page_module.default.narrowWidth), hasHeaderContent = rest.title != null && rest.title !== "" || rest.subtitle != null && rest.subtitle !== "" || rest.primaryAction != null || rest.secondaryActions != null && (isInterface.isInterface(rest.secondaryActions) && rest.secondaryActions.length > 0 || isReactElement.isReactElement(rest.secondaryActions)) || rest.actionGroups != null && rest.actionGroups.length > 0 || rest.backAction != null, contentClassName = css.classNames(!hasHeaderContent && Page_module.default.Content), headerMarkup = hasHeaderContent ? /* @__PURE__ */ React2.createElement(Header.Header, Object.assign({
        filterActions: !0
      }, rest)) : null;
      return /* @__PURE__ */ React2.createElement("div", {
        className: pageClassName
      }, headerMarkup, /* @__PURE__ */ React2.createElement("div", {
        className: contentClassName
      }, children));
    }
    exports.Page = Page2;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/PageActions/PageActions.css.js
var require_PageActions_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/PageActions/PageActions.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      PageActions: "Polaris-PageActions"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/PageActions/PageActions.js
var require_PageActions = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/PageActions/PageActions.js"(exports) {
    "use strict";
    var React2 = require_react(), isInterface = require_is_interface(), isReactElement = require_is_react_element(), PageActions_module = require_PageActions_css(), utils = require_utils(), ButtonGroup = require_ButtonGroup(), LegacyStack = require_LegacyStack();
    function PageActions({
      primaryAction,
      secondaryActions
    }) {
      let primaryActionMarkup = null;
      isReactElement.isReactElement(primaryAction) ? primaryActionMarkup = /* @__PURE__ */ React2.createElement(React2.Fragment, null, primaryAction) : primaryAction && (primaryActionMarkup = utils.buttonsFrom(primaryAction, {
        variant: "primary"
      }));
      let secondaryActionsMarkup = null;
      return isInterface.isInterface(secondaryActions) && secondaryActions.length > 0 ? secondaryActionsMarkup = /* @__PURE__ */ React2.createElement(ButtonGroup.ButtonGroup, null, utils.buttonsFrom(secondaryActions)) : isReactElement.isReactElement(secondaryActions) && (secondaryActionsMarkup = /* @__PURE__ */ React2.createElement(React2.Fragment, null, secondaryActions)), /* @__PURE__ */ React2.createElement("div", {
        className: PageActions_module.default.PageActions
      }, /* @__PURE__ */ React2.createElement(LegacyStack.LegacyStack, {
        distribution: "trailing",
        spacing: "tight"
      }, secondaryActionsMarkup, primaryActionMarkup));
    }
    exports.PageActions = PageActions;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/string.js
var require_string = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/string.js"(exports) {
    "use strict";
    function escapeRegex(str) {
      return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    }
    exports.escapeRegex = escapeRegex;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Picker/components/Activator/Activator.css.js
var require_Activator_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Picker/components/Activator/Activator.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Activator: "Polaris-Picker-Activator",
      disabled: "Polaris-Picker-Activator--disabled"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Picker/components/Activator/Activator.js
var require_Activator = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Picker/components/Activator/Activator.js"(exports) {
    "use strict";
    var polarisIcons = require("@shopify/polaris-icons"), React2 = require_react(), css = require_css(), Activator_module = require_Activator_css(), BlockStack3 = require_BlockStack(), Text3 = require_Text(), Icon2 = require_Icon(), Activator = /* @__PURE__ */ React2.forwardRef(({
      disabled,
      label,
      placeholder,
      selected,
      onClick
    }, ref) => /* @__PURE__ */ React2.createElement("button", {
      ref,
      disabled,
      onClick,
      className: css.classNames(Activator_module.default.Activator, disabled && Activator_module.default.disabled)
    }, /* @__PURE__ */ React2.createElement(BlockStack3.BlockStack, {
      as: "span",
      gap: "100"
    }, label && /* @__PURE__ */ React2.createElement(Text3.Text, {
      as: "span",
      variant: "bodySm",
      alignment: "start",
      tone: "subdued"
    }, label), (selected !== "" || placeholder) && /* @__PURE__ */ React2.createElement(Text3.Text, {
      as: "span",
      variant: "bodyMd",
      alignment: "start",
      tone: selected ? void 0 : "subdued"
    }, selected || placeholder)), /* @__PURE__ */ React2.createElement("span", null, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
      tone: "subdued",
      source: polarisIcons.SelectIcon
    }))));
    Activator.displayName = "Activator";
    exports.Activator = Activator;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Picker/components/SearchField/SearchField.css.js
var require_SearchField_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Picker/components/SearchField/SearchField.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      SearchField: "Polaris-Picker-SearchField"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Picker/components/SearchField/SearchField.js
var require_SearchField2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Picker/components/SearchField/SearchField.js"(exports) {
    "use strict";
    var React2 = require_react(), SearchField_module = require_SearchField_css(), hooks = require_hooks5(), Label = require_Label(), InlineStack3 = require_InlineStack(), Text3 = require_Text();
    function SearchField({
      value,
      id: idProp,
      type = "text",
      onFocus,
      onBlur,
      onChange,
      label,
      prefix,
      placeholder,
      focused
    }) {
      let inputRef = React2.useRef(null), comboboxTextFieldContext = hooks.useComboboxTextField(), {
        activeOptionId,
        listboxId,
        setTextFieldFocused,
        setTextFieldLabelId,
        onTextFieldFocus,
        onTextFieldChange,
        onTextFieldBlur
      } = comboboxTextFieldContext, uniqueId = React2.useId(), textFieldId = React2.useMemo(() => idProp || uniqueId, [uniqueId, idProp]), labelId = React2.useMemo(() => Label.labelID(idProp || uniqueId), [uniqueId, idProp]);
      React2.useEffect(() => {
        setTextFieldLabelId && setTextFieldLabelId(labelId);
      }, [labelId, setTextFieldLabelId]);
      let handleFocus = React2.useCallback((event) => {
        onFocus && onFocus(event), onTextFieldFocus && onTextFieldFocus(), setTextFieldFocused && setTextFieldFocused(!0);
      }, [onFocus, onTextFieldFocus, setTextFieldFocused]), handleBlur = React2.useCallback((event) => {
        onBlur && onBlur(event), onTextFieldBlur && onTextFieldBlur(), setTextFieldFocused && setTextFieldFocused(!1);
      }, [onBlur, onTextFieldBlur, setTextFieldFocused]), handleChange = React2.useCallback((value2, id) => {
        onChange && onChange(value2, id), onTextFieldChange && onTextFieldChange(value2);
      }, [onChange, onTextFieldChange]);
      return focused && document.activeElement !== inputRef.current && inputRef.current?.focus(), /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        gap: "100",
        blockAlign: "center"
      }, /* @__PURE__ */ React2.createElement(Label.Label, {
        id: textFieldId
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        visuallyHidden: !0
      }, label), /* @__PURE__ */ React2.createElement("span", null, prefix)), /* @__PURE__ */ React2.createElement("input", {
        ref: inputRef,
        id: textFieldId,
        className: SearchField_module.default.SearchField,
        value,
        type,
        "aria-activedescendant": activeOptionId,
        role: "combobox",
        "aria-haspopup": "listbox",
        "aria-autocomplete": "list",
        "aria-expanded": "true",
        placeholder,
        "aria-controls": listboxId,
        onFocus: handleFocus,
        onBlur: handleBlur,
        onChange: ({
          target
        }) => handleChange(target.value, textFieldId)
      }));
    }
    exports.SearchField = SearchField;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Picker/Picker.js
var require_Picker = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Picker/Picker.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), string = require_string(), Activator = require_Activator(), SearchField = require_SearchField2(), Popover = require_Popover(), Box3 = require_Box(), context = require_context11(), Icon2 = require_Icon(), Listbox = require_Listbox(), FILTER_REGEX = (value) => new RegExp(value, "i"), QUERY_REGEX = (value) => new RegExp(`^${string.escapeRegex(value)}$`, "i");
    function Picker({
      activator,
      allowMultiple,
      searchField,
      options = [],
      willLoadMoreOptions,
      height,
      addAction,
      onScrolledToBottom,
      onClose,
      ...listboxProps
    }) {
      let activatorRef = /* @__PURE__ */ React2.createRef(), [activeItems, setActiveItems] = React2.useState([]), [popoverActive, setPopoverActive] = React2.useState(!1), [activeOptionId, setActiveOptionId] = React2.useState(), [textFieldLabelId, setTextFieldLabelId] = React2.useState(), [listboxId, setListboxId] = React2.useState(), [query, setQuery] = React2.useState(""), [filteredOptions, setFilteredOptions] = React2.useState(options), shouldOpen = !popoverActive, handleClose = React2.useCallback(() => {
        setPopoverActive(!1), onClose?.(), activatorRef.current?.focus();
      }, [activatorRef, onClose]), handleOpen = React2.useCallback(() => {
        setPopoverActive(!0);
      }, []), handleFocus = React2.useCallback(() => {
        shouldOpen && handleOpen();
      }, [shouldOpen, handleOpen]), handleChange = React2.useCallback(() => {
        shouldOpen && handleOpen();
      }, [shouldOpen, handleOpen]), handleBlur = React2.useCallback(() => {
        popoverActive && (handleClose(), setQuery(""), setFilteredOptions(options));
      }, [popoverActive, handleClose, options]), textFieldContextValue = React2.useMemo(() => ({
        activeOptionId,
        expanded: popoverActive,
        listboxId,
        setTextFieldLabelId,
        onTextFieldFocus: handleFocus,
        onTextFieldChange: handleChange,
        onTextFieldBlur: handleBlur
      }), [activeOptionId, popoverActive, listboxId, setTextFieldLabelId, handleFocus, handleChange, handleBlur]), listboxOptionContextValue = React2.useMemo(() => ({
        allowMultiple
      }), [allowMultiple]), listboxContextValue = React2.useMemo(() => ({
        listboxId,
        textFieldLabelId,
        textFieldFocused: popoverActive,
        willLoadMoreOptions,
        setActiveOptionId,
        setListboxId,
        onKeyToBottom: onScrolledToBottom
      }), [listboxId, textFieldLabelId, popoverActive, willLoadMoreOptions, setActiveOptionId, setListboxId, onScrolledToBottom]), updateText = React2.useCallback((value) => {
        if (setQuery(value), value === "") {
          setFilteredOptions(options);
          return;
        }
        let resultOptions = options?.filter((option) => FILTER_REGEX(value).exec(reactChildrenText(option.children)));
        setFilteredOptions(resultOptions ?? []);
      }, [options]), handleSelect = React2.useCallback((selected) => {
        if (setQuery(""), updateText(""), listboxProps.onSelect?.(selected), !allowMultiple) {
          handleClose(), setActiveItems([selected]);
          return;
        }
        setActiveItems((selectedOptions) => activeItems.includes(selected) ? selectedOptions.filter((option) => option !== selected) : [...selectedOptions, selected]);
      }, [updateText, listboxProps, allowMultiple, activeItems, handleClose]), firstSelectedOption = reactChildrenText(options.find((option) => option.value === activeItems?.[0])?.children), queryMatchesExistingOption = options.some((option) => {
        let matcher = QUERY_REGEX(query);
        return reactChildrenText(option.children).match(matcher);
      });
      return /* @__PURE__ */ React2.createElement(Popover.Popover, {
        activator: /* @__PURE__ */ React2.createElement(Activator.Activator, Object.assign({}, activator, {
          onClick: handleOpen,
          selected: firstSelectedOption || "",
          placeholder: activator.placeholder,
          ref: activatorRef
        })),
        active: popoverActive,
        autofocusTarget: "none",
        onClose: handleClose,
        preferredPosition: "cover",
        preventFocusOnClose: !0
      }, /* @__PURE__ */ React2.createElement(Popover.Popover.Pane, {
        onScrolledToBottom,
        height
      }, searchField ? /* @__PURE__ */ React2.createElement(Box3.Box, {
        paddingBlockStart: "200",
        paddingBlockEnd: "100",
        paddingInline: "200",
        borderBlockEndWidth: "025",
        borderColor: "border"
      }, /* @__PURE__ */ React2.createElement(context.ComboboxTextFieldContext.Provider, {
        value: textFieldContextValue
      }, /* @__PURE__ */ React2.createElement(SearchField.SearchField, Object.assign({}, searchField, {
        value: query,
        onChange: (value) => {
          updateText(value), searchField.onChange?.(value, searchField.id ?? "");
        },
        prefix: /* @__PURE__ */ React2.createElement(Icon2.Icon, {
          source: polarisIcons.SearchIcon
        }),
        labelHidden: !0,
        focused: popoverActive
      })))) : null, /* @__PURE__ */ React2.createElement(context.ComboboxListboxContext.Provider, {
        value: listboxContextValue
      }, /* @__PURE__ */ React2.createElement(context.ComboboxListboxOptionContext.Provider, {
        value: listboxOptionContextValue
      }, /* @__PURE__ */ React2.createElement(Box3.Box, {
        paddingBlock: "200"
      }, /* @__PURE__ */ React2.createElement(Listbox.Listbox, Object.assign({}, listboxProps, {
        onSelect: handleSelect
      }), filteredOptions?.map((option) => /* @__PURE__ */ React2.createElement(Listbox.Listbox.Option, Object.assign({
        key: option.value,
        selected: activeItems.some((item) => item === option.value)
      }, option))), addAction && query !== "" && !queryMatchesExistingOption ? /* @__PURE__ */ React2.createElement(Listbox.Listbox.Action, Object.assign({}, addAction, {
        value: query
      })) : null))))));
    }
    var reactChildrenText = (children) => typeof children == "string" ? children : /* @__PURE__ */ React2.isValidElement(children) ? reactChildrenText(children?.props?.children) : "";
    exports.Picker = Picker;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/PolarisTestProvider/PolarisTestProvider.js
var require_PolarisTestProvider = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/PolarisTestProvider/PolarisTestProvider.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisTokens = require("@shopify/polaris-tokens"), merge = require_merge(), useTheme = require_use_theme(), I18n = require_I18n(), scrollLockManager = require_scroll_lock_manager(), stickyManager = require_sticky_manager(), context = require_context(), context$1 = require_context2(), context$2 = require_context3(), context$3 = require_context4(), context$4 = require_context5(), context$5 = require_context6(), PortalsManager = require_PortalsManager(), FocusManager = require_FocusManager(), EphemeralPresenceManager = require_EphemeralPresenceManager(), context$6 = require_context15(), defaultMediaQuery = {
      isNavigationCollapsed: !1
    };
    function PolarisTestProvider({
      strict,
      children,
      i18n,
      link,
      mediaQuery,
      features,
      frame,
      theme: themeName = polarisTokens.themeNameDefault
    }) {
      let Wrapper = strict ? React2.StrictMode : React2.Fragment, intl = React2.useMemo(() => new I18n.I18n(i18n || {}), [i18n]), scrollLockManager$1 = React2.useMemo(() => new scrollLockManager.ScrollLockManager(), []), stickyManager$1 = React2.useMemo(() => new stickyManager.StickyManager(), []), mergedFrame = createFrameContext(frame), mergedMediaQuery = merge.merge(defaultMediaQuery, mediaQuery);
      return /* @__PURE__ */ React2.createElement(Wrapper, null, /* @__PURE__ */ React2.createElement(useTheme.ThemeNameContext.Provider, {
        value: themeName
      }, /* @__PURE__ */ React2.createElement(useTheme.ThemeContext.Provider, {
        value: useTheme.getTheme(themeName)
      }, /* @__PURE__ */ React2.createElement(context.FeaturesContext.Provider, {
        value: features
      }, /* @__PURE__ */ React2.createElement(context$1.I18nContext.Provider, {
        value: intl
      }, /* @__PURE__ */ React2.createElement(context$2.ScrollLockManagerContext.Provider, {
        value: scrollLockManager$1
      }, /* @__PURE__ */ React2.createElement(context$3.StickyManagerContext.Provider, {
        value: stickyManager$1
      }, /* @__PURE__ */ React2.createElement(context$4.LinkContext.Provider, {
        value: link
      }, /* @__PURE__ */ React2.createElement(context$5.MediaQueryContext.Provider, {
        value: mergedMediaQuery
      }, /* @__PURE__ */ React2.createElement(PortalsManager.PortalsManager, null, /* @__PURE__ */ React2.createElement(FocusManager.FocusManager, null, /* @__PURE__ */ React2.createElement(EphemeralPresenceManager.EphemeralPresenceManager, null, /* @__PURE__ */ React2.createElement(context$6.FrameContext.Provider, {
        value: mergedFrame
      }, children)))))))))))));
    }
    function noop() {
    }
    function createFrameContext({
      logo = void 0,
      showToast = noop,
      hideToast = noop,
      toastMessages = [],
      setContextualSaveBar = noop,
      removeContextualSaveBar = noop,
      startLoading = noop,
      stopLoading = noop
    } = {}) {
      return {
        logo,
        showToast,
        hideToast,
        toastMessages,
        setContextualSaveBar,
        removeContextualSaveBar,
        startLoading,
        stopLoading
      };
    }
    exports.PolarisTestProvider = PolarisTestProvider;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ProgressBar/ProgressBar.css.js
var require_ProgressBar_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ProgressBar/ProgressBar.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ProgressBar: "Polaris-ProgressBar",
      sizeSmall: "Polaris-ProgressBar--sizeSmall",
      sizeMedium: "Polaris-ProgressBar--sizeMedium",
      sizeLarge: "Polaris-ProgressBar--sizeLarge",
      toneHighlight: "Polaris-ProgressBar--toneHighlight",
      tonePrimary: "Polaris-ProgressBar--tonePrimary",
      toneSuccess: "Polaris-ProgressBar--toneSuccess",
      toneCritical: "Polaris-ProgressBar--toneCritical",
      Indicator: "Polaris-ProgressBar__Indicator",
      IndicatorAppearActive: "Polaris-ProgressBar__IndicatorAppearActive",
      IndicatorAppearDone: "Polaris-ProgressBar__IndicatorAppearDone",
      Progress: "Polaris-ProgressBar__Progress",
      Label: "Polaris-ProgressBar__Label"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ProgressBar/ProgressBar.js
var require_ProgressBar = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ProgressBar/ProgressBar.js"(exports) {
    "use strict";
    var React2 = require_react(), reactTransitionGroup = require("react-transition-group"), css = require_css(), useTheme = require_use_theme(), ProgressBar_module = require_ProgressBar_css(), hooks = require_hooks2();
    function ProgressBar3({
      progress = 0,
      size = "medium",
      tone = "highlight",
      animated: hasAppearAnimation = !0,
      ariaLabelledBy
    }) {
      let theme = useTheme.useTheme(), i18n = hooks.useI18n(), indicatorRef = React2.useRef(null), className = css.classNames(ProgressBar_module.default.ProgressBar, size && ProgressBar_module.default[css.variationName("size", size)], tone && ProgressBar_module.default[css.variationName("tone", tone)]), warningMessage = i18n.translate(progress < 0 ? "Polaris.ProgressBar.negativeWarningMessage" : "Polaris.ProgressBar.exceedWarningMessage", {
        progress
      }), parsedProgress = parseProgress(progress, warningMessage), progressBarDuration = hasAppearAnimation ? theme.motion["motion-duration-500"] : theme.motion["motion-duration-0"];
      return /* @__PURE__ */ React2.createElement("div", {
        className
      }, /* @__PURE__ */ React2.createElement("progress", {
        "aria-labelledby": ariaLabelledBy,
        className: ProgressBar_module.default.Progress,
        value: parsedProgress,
        max: "100"
      }), /* @__PURE__ */ React2.createElement(reactTransitionGroup.CSSTransition, {
        in: !0,
        appear: !0,
        timeout: parseInt(progressBarDuration, 10),
        nodeRef: indicatorRef,
        classNames: {
          appearActive: ProgressBar_module.default.IndicatorAppearActive,
          appearDone: ProgressBar_module.default.IndicatorAppearDone
        }
      }, /* @__PURE__ */ React2.createElement("div", {
        ref: indicatorRef,
        className: ProgressBar_module.default.Indicator,
        style: {
          "--pc-progress-bar-duration": progressBarDuration,
          "--pc-progress-bar-percent": parsedProgress / 100
        }
      }, /* @__PURE__ */ React2.createElement("span", {
        className: ProgressBar_module.default.Label
      }, parsedProgress, "%"))));
    }
    function parseProgress(progress, warningMessage) {
      let progressWidth;
      return progress < 0 ? (console.warn(warningMessage), progressWidth = 0) : progress > 100 ? (console.warn(warningMessage), progressWidth = 100) : progressWidth = progress, progressWidth;
    }
    exports.ProgressBar = ProgressBar3;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/RangeSlider/RangeSlider.css.js
var require_RangeSlider_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/RangeSlider/RangeSlider.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var sharedStyles = {
      RangeSlider: "Polaris-RangeSlider",
      "Track--dashed-after": "Polaris-RangeSlider--trackDashedAfter",
      "Track--dashed": "Polaris-RangeSlider--trackDashed"
    };
    exports.default = sharedStyles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/RangeSlider/components/DualThumb/DualThumb.css.js
var require_DualThumb_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/RangeSlider/components/DualThumb/DualThumb.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      DualThumb: "Polaris-RangeSlider-DualThumb",
      TrackWrapper: "Polaris-RangeSlider-DualThumb__TrackWrapper",
      disabled: "Polaris-RangeSlider-DualThumb--disabled",
      Track: "Polaris-RangeSlider-DualThumb__Track",
      error: "Polaris-RangeSlider-DualThumb--error",
      Thumbs: "Polaris-RangeSlider-DualThumb__Thumbs",
      Prefix: "Polaris-RangeSlider-DualThumb__Prefix",
      Suffix: "Polaris-RangeSlider-DualThumb__Suffix",
      Output: "Polaris-RangeSlider-DualThumb__Output",
      OutputBubble: "Polaris-RangeSlider-DualThumb__OutputBubble"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/RangeSlider/components/DualThumb/DualThumb.js
var require_DualThumb = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/RangeSlider/components/DualThumb/DualThumb.js"(exports) {
    "use strict";
    var React2 = require_react(), debounce = require_debounce(), css = require_css(), types = require_types(), RangeSlider_module = require_RangeSlider_css(), DualThumb_module = require_DualThumb_css(), Text3 = require_Text(), Labelled = require_Labelled(), Label = require_Label(), EventListener = require_EventListener(), context = require_context(), Control;
    (function(Control2) {
      Control2[Control2.Lower = 0] = "Lower", Control2[Control2.Upper = 1] = "Upper";
    })(Control || (Control = {}));
    var DualThumb = class extends React2.Component {
      constructor(...args) {
        super(...args), this.state = {
          value: sanitizeValue(this.props.value, this.props.min, this.props.max, this.props.step),
          trackWidth: 0,
          trackLeft: 0
        }, this.track = /* @__PURE__ */ React2.createRef(), this.trackWrapper = /* @__PURE__ */ React2.createRef(), this.thumbLower = /* @__PURE__ */ React2.createRef(), this.thumbUpper = /* @__PURE__ */ React2.createRef(), this.setTrackPosition = debounce.debounce(() => {
          if (this.track.current) {
            let {
              width,
              left
            } = this.track.current.getBoundingClientRect(), adjustedTrackWidth = width - 16, adjustedTrackLeft = left + 16 / 2, range = this.props.max - this.props.min, minValuePosition = this.props.min / range * adjustedTrackWidth;
            this.setState({
              trackWidth: adjustedTrackWidth,
              trackLeft: adjustedTrackLeft - minValuePosition
            });
          }
        }, 40, {
          leading: !0,
          trailing: !0,
          maxWait: 40
        }), this.handleMouseDownThumbLower = (event) => {
          event.button !== 0 || this.props.disabled || (registerMouseMoveHandler(this.handleMouseMoveThumbLower), event.stopPropagation());
        }, this.handleMouseMoveThumbLower = (event) => {
          let valueUpper = this.state.value[1];
          this.setValue([this.actualXPosition(event.clientX), valueUpper], Control.Upper);
        }, this.handleTouchStartThumbLower = (event) => {
          this.props.disabled || (registerTouchMoveHandler(this.handleTouchMoveThumbLower), event.stopPropagation());
        }, this.handleTouchMoveThumbLower = (event) => {
          event.preventDefault();
          let valueUpper = this.state.value[1];
          this.setValue([this.actualXPosition(event.touches[0].clientX), valueUpper], Control.Upper);
        }, this.handleMouseDownThumbUpper = (event) => {
          event.button !== 0 || this.props.disabled || (registerMouseMoveHandler(this.handleMouseMoveThumbUpper), event.stopPropagation());
        }, this.handleMouseMoveThumbUpper = (event) => {
          let valueLower = this.state.value[0];
          this.setValue([valueLower, this.actualXPosition(event.clientX)], Control.Lower);
        }, this.handleTouchStartThumbUpper = (event) => {
          this.props.disabled || (registerTouchMoveHandler(this.handleTouchMoveThumbUpper), event.stopPropagation());
        }, this.handleTouchMoveThumbUpper = (event) => {
          event.preventDefault();
          let valueLower = this.state.value[0];
          this.setValue([valueLower, this.actualXPosition(event.touches[0].clientX)], Control.Lower);
        }, this.handleKeypressLower = (event) => {
          if (this.props.disabled)
            return;
          let {
            incrementValueLower,
            decrementValueLower
          } = this, handler = {
            [types.Key.UpArrow]: incrementValueLower,
            [types.Key.RightArrow]: incrementValueLower,
            [types.Key.DownArrow]: decrementValueLower,
            [types.Key.LeftArrow]: decrementValueLower
          }[event.keyCode];
          handler != null && (event.preventDefault(), event.stopPropagation(), handler());
        }, this.handleKeypressUpper = (event) => {
          if (this.props.disabled)
            return;
          let {
            incrementValueUpper,
            decrementValueUpper
          } = this, handler = {
            [types.Key.UpArrow]: incrementValueUpper,
            [types.Key.RightArrow]: incrementValueUpper,
            [types.Key.DownArrow]: decrementValueUpper,
            [types.Key.LeftArrow]: decrementValueUpper
          }[event.keyCode];
          handler != null && (event.preventDefault(), event.stopPropagation(), handler());
        }, this.incrementValueLower = () => {
          this.setValue([this.state.value[0] + this.props.step, this.state.value[1]], Control.Upper);
        }, this.decrementValueLower = () => {
          this.setValue([this.state.value[0] - this.props.step, this.state.value[1]], Control.Upper);
        }, this.incrementValueUpper = () => {
          this.setValue([this.state.value[0], this.state.value[1] + this.props.step], Control.Lower);
        }, this.decrementValueUpper = () => {
          this.setValue([this.state.value[0], this.state.value[1] - this.props.step], Control.Lower);
        }, this.dispatchValue = () => {
          let {
            onChange,
            id
          } = this.props, {
            value
          } = this.state;
          onChange(value, id);
        }, this.setValue = (dirtyValue, control) => {
          let {
            props: {
              min,
              max,
              step
            },
            state: {
              value
            }
          } = this, sanitizedValue = sanitizeValue(dirtyValue, min, max, step, control);
          isTupleEqual(sanitizedValue, value) === !1 && this.setState({
            value: sanitizedValue
          }, this.dispatchValue);
        }, this.handleMouseDownTrack = (event) => {
          if (event.button !== 0 || this.props.disabled)
            return;
          event.preventDefault();
          let clickXPosition = this.actualXPosition(event.clientX), {
            value
          } = this.state, distanceFromLowerThumb = Math.abs(value[0] - clickXPosition), distanceFromUpperThumb = Math.abs(value[1] - clickXPosition);
          distanceFromLowerThumb <= distanceFromUpperThumb ? (this.setValue([clickXPosition, value[1]], Control.Upper), registerMouseMoveHandler(this.handleMouseMoveThumbLower), this.thumbLower.current != null && this.thumbLower.current.focus()) : (this.setValue([value[0], clickXPosition], Control.Lower), registerMouseMoveHandler(this.handleMouseMoveThumbUpper), this.thumbUpper.current != null && this.thumbUpper.current.focus());
        }, this.handleTouchStartTrack = (event) => {
          if (this.props.disabled)
            return;
          event.preventDefault();
          let clickXPosition = this.actualXPosition(event.touches[0].clientX), {
            value
          } = this.state, distanceFromLowerThumb = Math.abs(value[0] - clickXPosition), distanceFromUpperThumb = Math.abs(value[1] - clickXPosition);
          distanceFromLowerThumb <= distanceFromUpperThumb ? (this.setValue([clickXPosition, value[1]], Control.Upper), registerTouchMoveHandler(this.handleTouchMoveThumbLower), this.thumbLower.current != null && this.thumbLower.current.focus()) : (this.setValue([value[0], clickXPosition], Control.Lower), registerTouchMoveHandler(this.handleTouchMoveThumbUpper), this.thumbUpper.current != null && this.thumbUpper.current.focus());
        }, this.actualXPosition = (dirtyXPosition) => {
          if (this.track.current) {
            let {
              min,
              max
            } = this.props, {
              trackLeft,
              trackWidth
            } = this.state;
            return (dirtyXPosition - trackLeft) / trackWidth * (max - min);
          } else
            return 0;
        };
      }
      static getDerivedStateFromProps(props, state) {
        let {
          min,
          step,
          max,
          value,
          onChange,
          id
        } = props, {
          prevValue
        } = state;
        if (isTupleEqual(prevValue, value))
          return null;
        let sanitizedValue = sanitizeValue(value, min, max, step);
        return isTupleEqual(value, sanitizedValue) || onChange(sanitizedValue, id), {
          prevValue: value,
          value: sanitizedValue
        };
      }
      componentDidMount() {
        this.setTrackPosition(), this.trackWrapper.current != null && this.trackWrapper.current.addEventListener("touchstart", this.handleTouchStartTrack, {
          passive: !1
        });
      }
      componentWillUnmount() {
        this.trackWrapper.current != null && this.trackWrapper.current.removeEventListener("touchstart", this.handleTouchStartTrack);
      }
      render() {
        let {
          id,
          min,
          max,
          prefix,
          suffix,
          disabled,
          output,
          error,
          onFocus,
          onBlur,
          label,
          labelAction,
          labelHidden,
          helpText
        } = this.props, {
          value
        } = this.state, idLower = id, idUpper = `${id}Upper`, describedBy = [];
        error && describedBy.push(`${id}Error`);
        let ariaDescribedBy = describedBy.length ? describedBy.join(" ") : void 0, trackWrapperClassName = css.classNames(DualThumb_module.default.TrackWrapper, error && DualThumb_module.default.error, disabled && DualThumb_module.default.disabled), thumbLowerClassName = css.classNames(DualThumb_module.default.Thumbs, DualThumb_module.default.ThumbLower, disabled && DualThumb_module.default.disabled), thumbUpperClassName = css.classNames(DualThumb_module.default.Thumbs, DualThumb_module.default.ThumbUpper, disabled && DualThumb_module.default.disabled), trackWidth = this.state.trackWidth, range = max - min, minValuePosition = min / range * trackWidth, leftPositionThumbLower = value[0] / range * trackWidth - minValuePosition, leftPositionThumbUpper = value[1] / range * trackWidth - minValuePosition, outputLowerClassName = css.classNames(DualThumb_module.default.Output, DualThumb_module.default.OutputLower), outputMarkupLower = !disabled && output ? /* @__PURE__ */ React2.createElement("output", {
          htmlFor: idLower,
          className: outputLowerClassName,
          style: {
            left: `${leftPositionThumbLower}px`
          }
        }, /* @__PURE__ */ React2.createElement("div", {
          className: DualThumb_module.default.OutputBubble
        }, /* @__PURE__ */ React2.createElement(Text3.Text, {
          as: "span",
          variant: "headingSm",
          alignment: "center"
        }, value[0]))) : null, outputUpperClassName = css.classNames(DualThumb_module.default.Output, DualThumb_module.default.OutputUpper), outputMarkupUpper = !disabled && output ? /* @__PURE__ */ React2.createElement("output", {
          htmlFor: idUpper,
          className: outputUpperClassName,
          style: {
            left: `${leftPositionThumbUpper}px`
          }
        }, /* @__PURE__ */ React2.createElement("div", {
          className: DualThumb_module.default.OutputBubble
        }, /* @__PURE__ */ React2.createElement(Text3.Text, {
          as: "span",
          variant: "headingSm",
          alignment: "center"
        }, value[1]))) : null, cssVars = {
          "--pc-range-slider-progress-lower": `${leftPositionThumbLower}px`,
          "--pc-range-slider-progress-upper": `${leftPositionThumbUpper}px`
        }, prefixMarkup = prefix && /* @__PURE__ */ React2.createElement("div", {
          className: DualThumb_module.default.Prefix
        }, prefix), suffixMarkup = suffix && /* @__PURE__ */ React2.createElement("div", {
          className: DualThumb_module.default.Suffix
        }, suffix);
        return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(Labelled.Labelled, {
          id,
          label,
          error,
          action: labelAction,
          labelHidden,
          helpText
        }, /* @__PURE__ */ React2.createElement("div", {
          className: css.classNames(DualThumb_module.default.DualThumb, RangeSlider_module.default.RangeSlider)
        }, prefixMarkup, /* @__PURE__ */ React2.createElement("div", {
          className: trackWrapperClassName,
          onMouseDown: this.handleMouseDownTrack,
          ref: this.trackWrapper
        }, /* @__PURE__ */ React2.createElement("div", {
          className: DualThumb_module.default.Track,
          style: cssVars,
          ref: this.track
        }), /* @__PURE__ */ React2.createElement("div", {
          className: RangeSlider_module.default["Track--dashed"]
        }), /* @__PURE__ */ React2.createElement("div", {
          id: idLower,
          className: thumbLowerClassName,
          style: {
            left: `${leftPositionThumbLower}px`
          },
          role: "slider",
          "aria-disabled": disabled,
          "aria-valuemin": min,
          "aria-valuemax": max,
          "aria-valuenow": value[0],
          "aria-invalid": Boolean(error),
          "aria-describedby": ariaDescribedBy,
          "aria-labelledby": Label.labelID(id),
          onFocus,
          onBlur,
          tabIndex: 0,
          onKeyDown: this.handleKeypressLower,
          onMouseDown: this.handleMouseDownThumbLower,
          onTouchStart: this.handleTouchStartThumbLower,
          ref: this.thumbLower
        }), outputMarkupLower, /* @__PURE__ */ React2.createElement("div", {
          id: idUpper,
          className: thumbUpperClassName,
          style: {
            left: `${leftPositionThumbUpper}px`
          },
          role: "slider",
          "aria-disabled": disabled,
          "aria-valuemin": min,
          "aria-valuemax": max,
          "aria-valuenow": value[1],
          "aria-invalid": Boolean(error),
          "aria-describedby": ariaDescribedBy,
          "aria-labelledby": Label.labelID(id),
          onFocus,
          onBlur,
          tabIndex: 0,
          onKeyDown: this.handleKeypressUpper,
          onMouseDown: this.handleMouseDownThumbUpper,
          onTouchStart: this.handleTouchStartThumbUpper,
          ref: this.thumbUpper
        }), outputMarkupUpper), suffixMarkup)), /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
          event: "resize",
          handler: this.setTrackPosition
        }));
      }
    };
    DualThumb.contextType = context.FeaturesContext;
    function registerMouseMoveHandler(handler) {
      document.addEventListener("mousemove", handler), document.addEventListener("mouseup", () => {
        document.removeEventListener("mousemove", handler);
      }, {
        once: !0
      });
    }
    function registerTouchMoveHandler(handler) {
      let removeHandler = () => {
        document.removeEventListener("touchmove", handler), document.removeEventListener("touchend", removeHandler), document.removeEventListener("touchcancel", removeHandler);
      };
      document.addEventListener("touchmove", handler, {
        passive: !1
      }), document.addEventListener("touchend", removeHandler, {
        once: !0
      }), document.addEventListener("touchcancel", removeHandler, {
        once: !0
      });
    }
    function sanitizeValue(value, min, max, step, control = Control.Upper) {
      let upperValue = inBoundsUpper(roundedToStep(value[1])), lowerValue = inBoundsLower(roundedToStep(value[0])), maxLowerValue = upperValue - step, minUpperValue = lowerValue + step;
      return control === Control.Upper && lowerValue > maxLowerValue ? lowerValue = maxLowerValue : control === Control.Lower && upperValue < minUpperValue && (upperValue = minUpperValue), [lowerValue, upperValue];
      function inBoundsUpper(value2) {
        let lowerMin = min + step;
        return value2 < lowerMin ? lowerMin : value2 > max ? max : value2;
      }
      function inBoundsLower(value2) {
        let upperMax = max - step;
        return value2 < min ? min : value2 > upperMax ? upperMax : value2;
      }
      function roundedToStep(value2) {
        return Math.round(value2 / step) * step;
      }
    }
    function isTupleEqual(a, b) {
      return a == null || b == null ? !1 : a[0] === b[0] && a[1] === b[1];
    }
    exports.DualThumb = DualThumb;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/RangeSlider/components/SingleThumb/SingleThumb.css.js
var require_SingleThumb_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/RangeSlider/components/SingleThumb/SingleThumb.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      SingleThumb: "Polaris-RangeSlider-SingleThumb",
      disabled: "Polaris-RangeSlider-SingleThumb--disabled",
      InputWrapper: "Polaris-RangeSlider-SingleThumb__InputWrapper",
      Prefix: "Polaris-RangeSlider-SingleThumb__Prefix",
      Suffix: "Polaris-RangeSlider-SingleThumb__Suffix",
      Input: "Polaris-RangeSlider-SingleThumb__Input",
      error: "Polaris-RangeSlider-SingleThumb--error",
      Output: "Polaris-RangeSlider-SingleThumb__Output",
      OutputBubble: "Polaris-RangeSlider-SingleThumb__OutputBubble"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/RangeSlider/utilities/invertNumber.js
var require_invertNumber = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/RangeSlider/utilities/invertNumber.js"(exports) {
    "use strict";
    function invertNumber(number) {
      return Math.sign(number) === 1 ? -Math.abs(number) : Math.sign(number) === -1 ? Math.abs(number) : 0;
    }
    exports.invertNumber = invertNumber;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/RangeSlider/components/SingleThumb/SingleThumb.js
var require_SingleThumb = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/RangeSlider/components/SingleThumb/SingleThumb.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), clamp = require_clamp(), RangeSlider_module = require_RangeSlider_css(), SingleThumb_module = require_SingleThumb_css(), invertNumber = require_invertNumber(), Text3 = require_Text(), Labelled = require_Labelled();
    function SingleThumb(props) {
      let {
        id,
        error,
        helpText,
        value,
        min,
        max,
        disabled,
        output,
        prefix,
        suffix,
        label,
        labelAction,
        labelHidden,
        step,
        onBlur,
        onFocus
      } = props, clampedValue = clamp.clamp(value, min, max), describedBy = [];
      error && describedBy.push(`${id}Error`), helpText && describedBy.push(Labelled.helpTextID(id));
      let ariaDescribedBy = describedBy.length ? describedBy.join(" ") : void 0, sliderProgress = (clampedValue - min) * 100 / (max - min), outputFactor = invertNumber.invertNumber((sliderProgress - 50) / 100), cssVars = {
        "--pc-range-slider-min": min,
        "--pc-range-slider-max": max,
        "--pc-range-slider-current": clampedValue,
        "--pc-range-slider-progress": `${sliderProgress}%`,
        "--pc-range-slider-output-factor": `${outputFactor}`
      }, outputMarkup = !disabled && output && /* @__PURE__ */ React2.createElement("output", {
        htmlFor: id,
        className: SingleThumb_module.default.Output
      }, /* @__PURE__ */ React2.createElement("div", {
        className: SingleThumb_module.default.OutputBubble
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "headingSm",
        alignment: "center"
      }, clampedValue))), prefixMarkup = prefix && /* @__PURE__ */ React2.createElement("div", {
        className: SingleThumb_module.default.Prefix
      }, prefix), suffixMarkup = suffix && /* @__PURE__ */ React2.createElement("div", {
        className: SingleThumb_module.default.Suffix
      }, suffix), className = css.classNames(SingleThumb_module.default.SingleThumb, RangeSlider_module.default.RangeSlider, error && SingleThumb_module.default.error, disabled && SingleThumb_module.default.disabled);
      return /* @__PURE__ */ React2.createElement(Labelled.Labelled, {
        id,
        label,
        error,
        action: labelAction,
        labelHidden,
        helpText
      }, /* @__PURE__ */ React2.createElement("div", {
        className,
        style: cssVars
      }, prefixMarkup, /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(SingleThumb_module.default.InputWrapper, RangeSlider_module.default["Track--dashed-after"])
      }, /* @__PURE__ */ React2.createElement("input", {
        type: "range",
        className: SingleThumb_module.default.Input,
        id,
        name: id,
        min,
        max,
        step,
        value: clampedValue,
        disabled,
        onChange: handleChange,
        onFocus,
        onBlur,
        "aria-valuemin": min,
        "aria-valuemax": max,
        "aria-valuenow": clampedValue,
        "aria-invalid": Boolean(error),
        "aria-describedby": ariaDescribedBy
      }), outputMarkup), suffixMarkup));
      function handleChange(event) {
        let {
          onChange
        } = props;
        onChange && onChange(parseFloat(event.currentTarget.value), id);
      }
    }
    exports.SingleThumb = SingleThumb;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/RangeSlider/RangeSlider.js
var require_RangeSlider = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/RangeSlider/RangeSlider.js"(exports) {
    "use strict";
    var React2 = require_react(), DualThumb = require_DualThumb(), SingleThumb = require_SingleThumb();
    function RangeSlider({
      min = 0,
      max = 100,
      step = 1,
      value,
      ...rest
    }) {
      let sharedProps = {
        id: React2.useId(),
        min,
        max,
        step,
        ...rest
      };
      return isDualThumb(value) ? /* @__PURE__ */ React2.createElement(DualThumb.DualThumb, Object.assign({
        value
      }, sharedProps)) : /* @__PURE__ */ React2.createElement(SingleThumb.SingleThumb, Object.assign({
        value
      }, sharedProps));
    }
    function isDualThumb(value) {
      return Array.isArray(value);
    }
    exports.RangeSlider = RangeSlider;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ResourceItem/ResourceItem.css.js
var require_ResourceItem_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ResourceItem/ResourceItem.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ResourceItem: "Polaris-ResourceItem",
      Actions: "Polaris-ResourceItem__Actions",
      ItemWrapper: "Polaris-ResourceItem__ItemWrapper",
      CheckboxWrapper: "Polaris-ResourceItem__CheckboxWrapper",
      focusedInner: "Polaris-ResourceItem--focusedInner",
      focused: "Polaris-ResourceItem--focused",
      selected: "Polaris-ResourceItem--selected",
      Link: "Polaris-ResourceItem__Link",
      Button: "Polaris-ResourceItem__Button",
      selectable: "Polaris-ResourceItem--selectable",
      disabled: "Polaris-ResourceItem--disabled",
      ListItem: "Polaris-ResourceItem__ListItem",
      hasBulkActions: "Polaris-ResourceItem--hasBulkActions"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/resource-list/types.js
var require_types6 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/resource-list/types.js"(exports) {
    "use strict";
    var SELECT_ALL_ITEMS = "All";
    exports.SELECT_ALL_ITEMS = SELECT_ALL_ITEMS;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ResourceItem/ResourceItem.js
var require_ResourceItem = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ResourceItem/ResourceItem.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), isEqual = require("react-fast-compare"), breakpoints = require_breakpoints(), css = require_css(), ResourceItem_module = require_ResourceItem_css(), types = require_types6(), context = require_context19(), hooks = require_hooks2(), Checkbox = require_Checkbox(), ButtonGroup = require_ButtonGroup(), utils = require_utils(), Popover = require_Popover(), Button3 = require_Button(), ActionList = require_ActionList(), Box3 = require_Box(), InlineGrid = require_InlineGrid(), InlineStack3 = require_InlineStack(), UnstyledLink = require_UnstyledLink(), BaseResourceItem = class extends React2.Component {
      constructor(...args) {
        super(...args), this.state = {
          actionsMenuVisible: !1,
          focused: !1,
          focusedInner: !1,
          selected: isSelected(this.props.id, this.props.context.selectedItems)
        }, this.node = null, this.overlayRef = /* @__PURE__ */ React2.createRef(), this.buttonOverlay = /* @__PURE__ */ React2.createRef(), this.setNode = (node) => {
          this.node = node;
        }, this.handleFocus = (event) => {
          event.target === this.buttonOverlay.current || this.node && event.target === this.overlayRef.current ? this.setState({
            focused: !0,
            focusedInner: !1
          }) : this.node && this.node.contains(event.target) && this.setState({
            focused: !0,
            focusedInner: !0
          });
        }, this.handleBlur = ({
          relatedTarget
        }) => {
          this.node && relatedTarget instanceof Element && this.node.contains(relatedTarget) || this.setState({
            focused: !1,
            focusedInner: !1
          });
        }, this.handleMouseOut = () => {
          this.state.focused && this.setState({
            focused: !1,
            focusedInner: !1
          }), this.props.onMouseOut && this.props.onMouseOut();
        }, this.handleLargerSelectionArea = (event) => {
          stopPropagation(event), this.handleSelection(!this.state.selected, event.nativeEvent.shiftKey);
        }, this.handleSelection = (value, shiftKey) => {
          let {
            id,
            sortOrder,
            context: {
              onSelectionChange
            }
          } = this.props;
          id == null || onSelectionChange == null || (this.setState({
            focused: value,
            focusedInner: value
          }), onSelectionChange(value, id, sortOrder, shiftKey));
        }, this.handleClick = (event) => {
          stopPropagation(event);
          let {
            id,
            onClick,
            url,
            context: {
              selectMode
            }
          } = this.props, {
            ctrlKey,
            metaKey
          } = event.nativeEvent, anchor = this.node && this.node.querySelector("a");
          if (selectMode) {
            this.handleLargerSelectionArea(event);
            return;
          }
          if (anchor !== event.target) {
            if (onClick && onClick(id), url && (ctrlKey || metaKey)) {
              window.open(url, "_blank");
              return;
            }
            url && anchor && anchor.click();
          }
        }, this.handleKeyUp = (event) => {
          let {
            disabled,
            onClick = noop,
            context: {
              selectMode
            }
          } = this.props, {
            key
          } = event;
          key === "Enter" && this.props.url && !selectMode && !disabled && onClick();
        }, this.handleActionsClick = () => {
          this.setState(({
            actionsMenuVisible
          }) => ({
            actionsMenuVisible: !actionsMenuVisible
          }));
        }, this.handleCloseRequest = () => {
          this.setState({
            actionsMenuVisible: !1
          });
        };
      }
      static getDerivedStateFromProps(nextProps, prevState) {
        let selected = isSelected(nextProps.id, nextProps.context.selectedItems);
        return prevState.selected === selected ? null : {
          selected
        };
      }
      shouldComponentUpdate(nextProps, nextState) {
        let {
          children: nextChildren,
          context: {
            selectedItems: nextSelectedItems,
            ...restNextContext
          },
          ...restNextProps
        } = nextProps, {
          children,
          context: {
            selectedItems,
            ...restContext
          },
          ...restProps
        } = this.props, nextSelectMode = nextProps.context.selectMode;
        return !isEqual(this.state, nextState) || this.props.context.selectMode !== nextSelectMode || !nextProps.context.selectMode && (!isEqual(restProps, restNextProps) || !isEqual(restContext, restNextContext));
      }
      render() {
        let {
          children,
          url,
          external,
          media,
          shortcutActions,
          ariaControls,
          ariaExpanded,
          persistActions = !1,
          accessibilityLabel,
          name,
          context: {
            selectable,
            selectMode,
            hasBulkActions,
            loading,
            resourceName
          },
          i18n,
          verticalAlignment,
          dataHref,
          breakpoints: breakpoints2,
          onMouseOver,
          disabled
        } = this.props, {
          actionsMenuVisible,
          focused,
          focusedInner,
          selected
        } = this.state, ownedMarkup = null, handleMarkup = null;
        if (selectable) {
          let checkboxAccessibilityLabel = name || accessibilityLabel || i18n.translate("Polaris.Common.checkbox");
          handleMarkup = /* @__PURE__ */ React2.createElement("div", {
            className: ResourceItem_module.default.CheckboxWrapper,
            onClick: stopPropagation,
            onChange: this.handleLargerSelectionArea
          }, /* @__PURE__ */ React2.createElement(UseId, null, (id) => /* @__PURE__ */ React2.createElement(Checkbox.Checkbox, {
            id,
            label: checkboxAccessibilityLabel,
            labelHidden: !0,
            checked: selected,
            disabled: loading || disabled,
            bleedInlineStart: "300",
            bleedInlineEnd: "300",
            bleedBlockStart: "300",
            bleedBlockEnd: "300",
            fill: !0,
            labelClassName: ResourceItem_module.default.CheckboxLabel
          })));
        }
        (media || selectable) && (ownedMarkup = /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
          gap: "300",
          blockAlign: media && selectable ? "center" : getAlignment(verticalAlignment)
        }, handleMarkup, media));
        let className = css.classNames(ResourceItem_module.default.ResourceItem, focused && ResourceItem_module.default.focused, selectable && ResourceItem_module.default.selectable, selected && ResourceItem_module.default.selected, selectMode && ResourceItem_module.default.selectMode, persistActions && ResourceItem_module.default.persistActions, focusedInner && ResourceItem_module.default.focusedInner, disabled && ResourceItem_module.default.disabled), listItemClassName = css.classNames(ResourceItem_module.default.ListItem, focused && !focusedInner && ResourceItem_module.default.focused, hasBulkActions && ResourceItem_module.default.hasBulkActions, selected && ResourceItem_module.default.selected, selectable && ResourceItem_module.default.selectable), actionsMarkup = null, disclosureMarkup = null;
        if (shortcutActions && !loading)
          if (persistActions) {
            actionsMarkup = breakpoints2?.lgUp ? /* @__PURE__ */ React2.createElement("div", {
              className: ResourceItem_module.default.Actions,
              onClick: stopPropagation
            }, /* @__PURE__ */ React2.createElement(ButtonGroup.ButtonGroup, null, utils.buttonsFrom(shortcutActions, {
              variant: "tertiary"
            }))) : null;
            let disclosureAccessibilityLabel = name ? i18n.translate("Polaris.ResourceList.Item.actionsDropdownLabel", {
              accessibilityLabel: name
            }) : i18n.translate("Polaris.ResourceList.Item.actionsDropdown");
            disclosureMarkup = !selectMode && breakpoints2?.lgDown ? /* @__PURE__ */ React2.createElement("div", {
              onClick: stopPropagation
            }, /* @__PURE__ */ React2.createElement(Popover.Popover, {
              activator: /* @__PURE__ */ React2.createElement(Button3.Button, {
                accessibilityLabel: disclosureAccessibilityLabel,
                onClick: this.handleActionsClick,
                variant: "tertiary",
                icon: polarisIcons.MenuHorizontalIcon
              }),
              onClose: this.handleCloseRequest,
              active: actionsMenuVisible
            }, /* @__PURE__ */ React2.createElement(ActionList.ActionList, {
              items: shortcutActions
            }))) : null;
          } else
            breakpoints2?.lgUp && (actionsMarkup = /* @__PURE__ */ React2.createElement("div", {
              className: ResourceItem_module.default.Actions,
              onClick: stopPropagation
            }, /* @__PURE__ */ React2.createElement(Box3.Box, {
              position: "absolute",
              insetBlockStart: "400",
              insetInlineEnd: "500"
            }, /* @__PURE__ */ React2.createElement(ButtonGroup.ButtonGroup, {
              variant: "segmented"
            }, utils.buttonsFrom(shortcutActions, {
              size: "slim"
            })))));
        let containerMarkup = /* @__PURE__ */ React2.createElement(Box3.Box, {
          id: this.props.id,
          position: "relative",
          paddingInlineStart: "300",
          paddingInlineEnd: "300",
          paddingBlockStart: "300",
          paddingBlockEnd: "300",
          zIndex: "var(--pc-resource-item-content-stacking-order)"
        }, /* @__PURE__ */ React2.createElement(InlineGrid.InlineGrid, {
          columns: {
            xs: "1fr auto"
          }
        }, /* @__PURE__ */ React2.createElement(InlineGrid.InlineGrid, {
          columns: {
            xs: media || selectable ? "auto 1fr" : "1fr"
          },
          gap: "300"
        }, ownedMarkup, /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
          blockAlign: getAlignment(verticalAlignment)
        }, /* @__PURE__ */ React2.createElement(Box3.Box, {
          width: "100%",
          padding: "0"
        }, children))), actionsMarkup, disclosureMarkup)), tabIndex = loading ? -1 : 0, ariaLabel = accessibilityLabel || i18n.translate("Polaris.ResourceList.Item.viewItem", {
          itemName: name || resourceName && resourceName.singular || ""
        }), accessibleMarkup = url ? /* @__PURE__ */ React2.createElement(UseId, null, (id) => /* @__PURE__ */ React2.createElement(UnstyledLink.UnstyledLink, {
          "aria-describedby": this.props.id,
          "aria-label": ariaLabel,
          className: ResourceItem_module.default.Link,
          url,
          external,
          tabIndex,
          id,
          ref: this.overlayRef
        })) : /* @__PURE__ */ React2.createElement("button", {
          className: ResourceItem_module.default.Button,
          "aria-label": ariaLabel,
          "aria-controls": ariaControls,
          "aria-expanded": ariaExpanded,
          onClick: this.handleClick,
          tabIndex,
          ref: this.buttonOverlay
        });
        return /* @__PURE__ */ React2.createElement("li", {
          className: listItemClassName,
          "data-href": dataHref
        }, /* @__PURE__ */ React2.createElement("div", {
          className: ResourceItem_module.default.ItemWrapper
        }, /* @__PURE__ */ React2.createElement("div", {
          ref: this.setNode,
          className,
          onClick: disabled ? () => {
          } : this.handleClick,
          onFocus: this.handleFocus,
          onBlur: this.handleBlur,
          onKeyUp: this.handleKeyUp,
          onMouseOver,
          onMouseOut: this.handleMouseOut,
          "data-href": url
        }, disabled ? null : accessibleMarkup, containerMarkup)));
      }
      // This fires onClick when there is a URL on the item
    };
    function noop() {
    }
    function stopPropagation(event) {
      event.stopPropagation();
    }
    function isSelected(id, selectedItems) {
      return Boolean(selectedItems && (Array.isArray(selectedItems) && selectedItems.includes(id) || selectedItems === types.SELECT_ALL_ITEMS));
    }
    function ResourceItem(props) {
      let breakpoints$1 = breakpoints.useBreakpoints();
      return /* @__PURE__ */ React2.createElement(BaseResourceItem, Object.assign({}, props, {
        breakpoints: breakpoints$1,
        context: React2.useContext(context.ResourceListContext),
        i18n: hooks.useI18n()
      }));
    }
    function getAlignment(alignment) {
      switch (alignment) {
        case "leading":
          return "start";
        case "trailing":
          return "end";
        case "center":
          return "center";
        case "fill":
          return "stretch";
        case "baseline":
          return "baseline";
        default:
          return "start";
      }
    }
    function UseId(props) {
      let id = React2.useId();
      return props.children(id);
    }
    exports.ResourceItem = ResourceItem;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ResourceList/ResourceList.css.js
var require_ResourceList_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ResourceList/ResourceList.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      FiltersWrapper: "Polaris-ResourceList__FiltersWrapper",
      ResourceListWrapper: "Polaris-ResourceList__ResourceListWrapper",
      ResourceList: "Polaris-ResourceList",
      HeaderOuterWrapper: "Polaris-ResourceList__HeaderOuterWrapper",
      BulkActionsWrapper: "Polaris-ResourceList__BulkActionsWrapper",
      "HeaderWrapper-disabled": "Polaris-ResourceList__HeaderWrapper--disabled",
      "HeaderWrapper-overlay": "Polaris-ResourceList__HeaderWrapper--overlay",
      HeaderWrapper: "Polaris-ResourceList__HeaderWrapper",
      "HeaderWrapper-isSticky": "Polaris-ResourceList__HeaderWrapper--isSticky",
      HeaderContentWrapper: "Polaris-ResourceList__HeaderContentWrapper",
      "HeaderWrapper-inSelectMode": "Polaris-ResourceList__HeaderWrapper--inSelectMode",
      SortWrapper: "Polaris-ResourceList__SortWrapper",
      AlternateToolWrapper: "Polaris-ResourceList__AlternateToolWrapper",
      "HeaderWrapper-hasSelect": "Polaris-ResourceList__HeaderWrapper--hasSelect",
      "HeaderWrapper-hasAlternateTool": "Polaris-ResourceList__HeaderWrapper--hasAlternateTool",
      "HeaderWrapper-hasSort": "Polaris-ResourceList__HeaderWrapper--hasSort",
      HeaderTitleWrapper: "Polaris-ResourceList__HeaderTitleWrapper",
      SelectAllActionsWrapper: "Polaris-ResourceList__SelectAllActionsWrapper",
      SelectAllActionsWrapperSticky: "Polaris-ResourceList__SelectAllActionsWrapperSticky",
      SelectAllActionsWrapperAtEnd: "Polaris-ResourceList__SelectAllActionsWrapperAtEnd",
      SelectAllActionsWrapperAtEndAppear: "Polaris-ResourceList__SelectAllActionsWrapperAtEndAppear",
      BulkActionsWrapperVisible: "Polaris-ResourceList__BulkActionsWrapperVisible",
      PaginationWrapper: "Polaris-ResourceList__PaginationWrapper",
      CheckableButtonWrapper: "Polaris-ResourceList__CheckableButtonWrapper",
      SelectButtonWrapper: "Polaris-ResourceList__SelectButtonWrapper",
      EmptySearchResultWrapper: "Polaris-ResourceList__EmptySearchResultWrapper",
      ItemWrapper: "Polaris-ResourceList__ItemWrapper",
      "ItemWrapper-isLoading": "Polaris-ResourceList__ItemWrapper--isLoading",
      SpinnerContainer: "Polaris-ResourceList__SpinnerContainer",
      LoadingOverlay: "Polaris-ResourceList__LoadingOverlay",
      DisabledPointerEvents: "Polaris-ResourceList__DisabledPointerEvents",
      disableTextSelection: "Polaris-ResourceList--disableTextSelection"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Select/Select.css.js
var require_Select_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Select/Select.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Select: "Polaris-Select",
      disabled: "Polaris-Select--disabled",
      error: "Polaris-Select--error",
      Backdrop: "Polaris-Select__Backdrop",
      Input: "Polaris-Select__Input",
      Content: "Polaris-Select__Content",
      InlineLabel: "Polaris-Select__InlineLabel",
      Icon: "Polaris-Select__Icon",
      SelectedOption: "Polaris-Select__SelectedOption",
      Prefix: "Polaris-Select__Prefix",
      hover: "Polaris-Select--hover",
      toneMagic: "Polaris-Select--toneMagic"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Select/Select.js
var require_Select = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Select/Select.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), useToggle = require_use_toggle(), Select_module = require_Select_css(), Icon2 = require_Icon(), Labelled = require_Labelled(), Box3 = require_Box(), Text3 = require_Text(), PLACEHOLDER_VALUE = "";
    function Select2({
      options: optionsProp,
      label,
      labelAction,
      labelHidden: labelHiddenProp,
      labelInline,
      disabled,
      helpText,
      placeholder,
      id: idProp,
      name,
      value = PLACEHOLDER_VALUE,
      error,
      onChange,
      onFocus,
      onBlur,
      requiredIndicator,
      tone
    }) {
      let {
        value: focused,
        toggle: toggleFocused
      } = useToggle.useToggle(!1), uniqId = React2.useId(), id = idProp ?? uniqId, labelHidden = labelInline ? !0 : labelHiddenProp, className = css.classNames(Select_module.default.Select, error && Select_module.default.error, tone && Select_module.default[css.variationName("tone", tone)], disabled && Select_module.default.disabled), handleFocus = React2.useCallback((event) => {
        toggleFocused(), onFocus?.(event);
      }, [onFocus, toggleFocused]), handleBlur = React2.useCallback((event) => {
        toggleFocused(), onBlur?.(event);
      }, [onBlur, toggleFocused]), handleChange = onChange ? (event) => onChange(event.currentTarget.value, id) : void 0, describedBy = [];
      helpText && describedBy.push(Labelled.helpTextID(id)), error && describedBy.push(`${id}Error`);
      let normalizedOptions = (optionsProp || []).map(normalizeOption);
      placeholder && (normalizedOptions = [{
        label: placeholder,
        value: PLACEHOLDER_VALUE,
        disabled: !0
      }, ...normalizedOptions]);
      let inlineLabelMarkup = labelInline && /* @__PURE__ */ React2.createElement(Box3.Box, {
        paddingInlineEnd: "100"
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "bodyMd",
        tone: tone && tone === "magic" && !focused ? "magic-subdued" : "subdued",
        truncate: !0
      }, label)), selectedOption = getSelectedOption(normalizedOptions, value), prefixMarkup = selectedOption.prefix && /* @__PURE__ */ React2.createElement("div", {
        className: Select_module.default.Prefix
      }, selectedOption.prefix), contentMarkup = /* @__PURE__ */ React2.createElement("div", {
        className: Select_module.default.Content,
        "aria-hidden": !0,
        "aria-disabled": disabled
      }, inlineLabelMarkup, prefixMarkup, /* @__PURE__ */ React2.createElement("span", {
        className: Select_module.default.SelectedOption
      }, selectedOption.label), /* @__PURE__ */ React2.createElement("span", {
        className: Select_module.default.Icon
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.SelectIcon
      }))), optionsMarkup = normalizedOptions.map(renderOption);
      return /* @__PURE__ */ React2.createElement(Labelled.Labelled, {
        id,
        label,
        error,
        action: labelAction,
        labelHidden,
        helpText,
        requiredIndicator,
        disabled
      }, /* @__PURE__ */ React2.createElement("div", {
        className
      }, /* @__PURE__ */ React2.createElement("select", {
        id,
        name,
        value,
        className: Select_module.default.Input,
        disabled,
        onFocus: handleFocus,
        onBlur: handleBlur,
        onChange: handleChange,
        "aria-invalid": Boolean(error),
        "aria-describedby": describedBy.length ? describedBy.join(" ") : void 0,
        "aria-required": requiredIndicator
      }, optionsMarkup), contentMarkup, /* @__PURE__ */ React2.createElement("div", {
        className: Select_module.default.Backdrop
      })));
    }
    function isString(option) {
      return typeof option == "string";
    }
    function isGroup(option) {
      return typeof option == "object" && "options" in option && option.options != null;
    }
    function normalizeStringOption(option) {
      return {
        label: option,
        value: option
      };
    }
    function normalizeOption(option) {
      if (isString(option))
        return normalizeStringOption(option);
      if (isGroup(option)) {
        let {
          title,
          options
        } = option;
        return {
          title,
          options: options.map((option2) => isString(option2) ? normalizeStringOption(option2) : option2)
        };
      }
      return option;
    }
    function getSelectedOption(options, value) {
      let flatOptions = flattenOptions(options), selectedOption = flatOptions.find((option) => value === option.value);
      return selectedOption === void 0 && (selectedOption = flatOptions.find((option) => !option.hidden)), selectedOption || {
        value: "",
        label: ""
      };
    }
    function flattenOptions(options) {
      let flatOptions = [];
      return options.forEach((optionOrGroup) => {
        isGroup(optionOrGroup) ? flatOptions = flatOptions.concat(optionOrGroup.options) : flatOptions.push(optionOrGroup);
      }), flatOptions;
    }
    function renderSingleOption(option) {
      let {
        value,
        label,
        prefix: _prefix,
        key,
        ...rest
      } = option;
      return /* @__PURE__ */ React2.createElement("option", Object.assign({
        key: key ?? value,
        value
      }, rest), label);
    }
    function renderOption(optionOrGroup) {
      if (isGroup(optionOrGroup)) {
        let {
          title,
          options
        } = optionOrGroup;
        return /* @__PURE__ */ React2.createElement("optgroup", {
          label: title,
          key: title
        }, options.map(renderSingleOption));
      }
      return renderSingleOption(optionOrGroup);
    }
    exports.Select = Select2;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ResourceList/ResourceList.js
var require_ResourceList = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ResourceList/ResourceList.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), polarisTokens = require("@shopify/polaris-tokens"), debounce = require_debounce(), css = require_css(), components = require_components(), useLazyRef = require_use_lazy_ref(), useEventListener = require_use_event_listener(), ResourceList_module = require_ResourceList_css(), types = require_types6(), Select2 = require_Select(), ResourceItem = require_ResourceItem(), hooks = require_hooks2(), Text3 = require_Text(), Button3 = require_Button(), CheckableButton = require_CheckableButton(), Sticky = require_Sticky(), EmptySearchResult = require_EmptySearchResult(), Spinner2 = require_Spinner(), Pagination = require_Pagination(), context = require_context19(), BulkActions = require_BulkActions(), SMALL_SPINNER_HEIGHT = 28, LARGE_SPINNER_HEIGHT = 45;
    function getAllItemsOnPage(items, idForItem) {
      return items.map((item, index) => idForItem(item, index));
    }
    var isBreakpointsXS = () => typeof window > "u" ? !1 : window.innerWidth < parseFloat(polarisTokens.toPx(polarisTokens.themeDefault.breakpoints["breakpoints-sm"]) ?? "");
    function defaultIdForItem(item, index) {
      return Object.prototype.hasOwnProperty.call(item, "id") ? item.id : index.toString();
    }
    function ResourceList({
      items,
      filterControl,
      flushFilters,
      emptyState,
      emptySearchState,
      resourceName: resourceNameProp,
      promotedBulkActions,
      bulkActions,
      selectedItems = [],
      isFiltered,
      selectable,
      hasMoreItems,
      loading,
      headerContent,
      showHeader,
      totalItemsCount,
      sortValue,
      sortOptions,
      alternateTool,
      onSortChange,
      onSelectionChange,
      renderItem,
      idForItem = defaultIdForItem,
      resolveItemId,
      pagination
    }) {
      let i18n = hooks.useI18n(), [selectMode, setSelectMode] = React2.useState(Boolean(selectedItems && selectedItems.length > 0)), [loadingPosition, setLoadingPositionState] = React2.useState(0), [lastSelected, setLastSelected] = React2.useState(), [smallScreen, setSmallScreen] = React2.useState(isBreakpointsXS()), forceUpdate = React2.useReducer((x = 0) => x + 1, 0)[1], checkableButtonRef = React2.useRef(null), defaultResourceName = useLazyRef.useLazyRef(() => ({
        singular: i18n.translate("Polaris.ResourceList.defaultItemSingular"),
        plural: i18n.translate("Polaris.ResourceList.defaultItemPlural")
      })), listRef = React2.useRef(null), handleSelectMode = (selectMode2) => {
        setSelectMode(selectMode2), !selectMode2 && onSelectionChange && onSelectionChange([]);
      }, handleResize = debounce.debounce(() => {
        let newSmallScreen = isBreakpointsXS();
        selectedItems && selectedItems.length === 0 && selectMode && !newSmallScreen && handleSelectMode(!1), smallScreen !== newSmallScreen && setSmallScreen(newSmallScreen);
      }, 50, {
        leading: !0,
        trailing: !0,
        maxWait: 50
      });
      useEventListener.useEventListener("resize", handleResize);
      let isSelectable = Boolean(promotedBulkActions && promotedBulkActions.length > 0 || bulkActions && bulkActions.length > 0 || selectable) && !smallScreen, selectAllSelectState = React2.useMemo(() => {
        let selectState = "indeterminate";
        return !selectedItems || Array.isArray(selectedItems) && selectedItems.length === 0 ? selectState = !1 : (selectedItems === types.SELECT_ALL_ITEMS || Array.isArray(selectedItems) && selectedItems.length === items.length) && (selectState = !0), selectState;
      }, [items.length, selectedItems]), resourceName = resourceNameProp || defaultResourceName.current, headerTitle = () => {
        let itemsCount = items.length, resource = !loading && (!totalItemsCount && itemsCount === 1 || totalItemsCount === 1) ? resourceName.singular : resourceName.plural;
        return loading ? i18n.translate("Polaris.ResourceList.loading", {
          resource
        }) : totalItemsCount ? i18n.translate("Polaris.ResourceList.showingTotalCount", {
          itemsCount,
          totalItemsCount,
          resource
        }) : headerContent || i18n.translate("Polaris.ResourceList.showing", {
          itemsCount,
          resource
        });
      }, [selectedItemsCount, setSelectedItemsCount] = React2.useState(selectedItems === types.SELECT_ALL_ITEMS ? `${items.length}+` : selectedItems.length);
      React2.useEffect(() => {
        (selectedItems === types.SELECT_ALL_ITEMS || selectedItems.length > 0) && setSelectedItemsCount(selectedItems === types.SELECT_ALL_ITEMS ? `${items.length}+` : selectedItems.length);
      }, [selectedItems, items.length]);
      let selectAllActionsLabel = i18n.translate("Polaris.ResourceList.selected", {
        selectedItemsCount
      }), bulkActionsAccessibilityLabel = React2.useMemo(() => {
        let selectedItemsCount2 = selectedItems.length, totalItemsCount2 = items.length, allSelected = selectedItemsCount2 === totalItemsCount2;
        return totalItemsCount2 === 1 && allSelected ? i18n.translate("Polaris.ResourceList.a11yCheckboxDeselectAllSingle", {
          resourceNameSingular: resourceName.singular
        }) : totalItemsCount2 === 1 ? i18n.translate("Polaris.ResourceList.a11yCheckboxSelectAllSingle", {
          resourceNameSingular: resourceName.singular
        }) : allSelected ? i18n.translate("Polaris.ResourceList.a11yCheckboxDeselectAllMultiple", {
          itemsLength: items.length,
          resourceNamePlural: resourceName.plural
        }) : i18n.translate("Polaris.ResourceList.a11yCheckboxSelectAllMultiple", {
          itemsLength: items.length,
          resourceNamePlural: resourceName.plural
        });
      }, [i18n, items.length, resourceName.singular, resourceName.plural, selectedItems.length]), paginatedSelectAllText = React2.useMemo(() => {
        if (!(!isSelectable || !hasMoreItems) && selectedItems === types.SELECT_ALL_ITEMS)
          return i18n.translate(isFiltered ? "Polaris.ResourceList.allFilteredItemsSelected" : "Polaris.ResourceList.allItemsSelected", {
            itemsLength: items.length,
            resourceNamePlural: resourceName.plural
          });
      }, [hasMoreItems, i18n, isFiltered, isSelectable, items, resourceName.plural, selectedItems]), handleSelectAllItemsInStore = React2.useCallback(() => {
        let newlySelectedItems = selectedItems === types.SELECT_ALL_ITEMS ? getAllItemsOnPage(items, idForItem) : types.SELECT_ALL_ITEMS;
        onSelectionChange && onSelectionChange(newlySelectedItems);
      }, [idForItem, items, onSelectionChange, selectedItems]), paginatedSelectAllAction = React2.useMemo(() => !isSelectable || !hasMoreItems ? void 0 : {
        content: selectedItems === types.SELECT_ALL_ITEMS ? i18n.translate("Polaris.Common.undo") : i18n.translate(isFiltered ? "Polaris.ResourceList.selectAllFilteredItems" : "Polaris.ResourceList.selectAllItems", {
          itemsLength: items.length,
          resourceNamePlural: resourceName.plural
        }),
        onAction: handleSelectAllItemsInStore
      }, [handleSelectAllItemsInStore, hasMoreItems, i18n, isFiltered, isSelectable, items.length, resourceName.plural, selectedItems]), emptySearchResultText = {
        title: i18n.translate("Polaris.ResourceList.emptySearchResultTitle", {
          resourceNamePlural: resourceName.plural
        }),
        description: i18n.translate("Polaris.ResourceList.emptySearchResultDescription")
      }, setLoadingPosition = React2.useCallback(() => {
        if (listRef.current != null) {
          if (typeof window > "u")
            return;
          let overlay = listRef.current.getBoundingClientRect(), viewportHeight = Math.max(document.documentElement ? document.documentElement.clientHeight : 0, window.innerHeight || 0), overflow = viewportHeight - overlay.height, spinnerHeight = items.length === 1 ? SMALL_SPINNER_HEIGHT : LARGE_SPINNER_HEIGHT, spinnerPosition = overflow > 0 ? (overlay.height - spinnerHeight) / 2 : (viewportHeight - overlay.top - spinnerHeight) / 2;
          setLoadingPositionState(spinnerPosition);
        }
      }, [listRef, items.length]), itemsExist = items.length > 0;
      React2.useEffect(() => {
        loading && setLoadingPosition();
      }, [loading, setLoadingPosition]), React2.useEffect(() => {
        selectedItems && selectedItems.length > 0 && !selectMode && setSelectMode(!0), (!selectedItems || selectedItems.length === 0) && !isBreakpointsXS() && setSelectMode(!1);
      }, [selectedItems, selectMode]), React2.useEffect(() => {
        forceUpdate();
      }, [forceUpdate, items]);
      let renderItemWithId = (item, index) => {
        let id = idForItem(item, index), itemContent = renderItem(item, id, index);
        return components.isElementOfType(itemContent, ResourceItem.ResourceItem) || console.warn("<ResourceList /> renderItem function should return a <ResourceItem />."), itemContent;
      }, handleMultiSelectionChange = (lastSelected2, currentSelected, resolveItemId2) => {
        let min = Math.min(lastSelected2, currentSelected), max = Math.max(lastSelected2, currentSelected);
        return items.slice(min, max + 1).map(resolveItemId2);
      }, handleSelectionChange = (selected, id, sortOrder, shiftKey) => {
        if (selectedItems == null || onSelectionChange == null)
          return;
        let newlySelectedItems = selectedItems === types.SELECT_ALL_ITEMS ? getAllItemsOnPage(items, idForItem) : [...selectedItems];
        sortOrder !== void 0 && setLastSelected(sortOrder);
        let lastSelectedFromState = lastSelected, selectedIds = [id];
        if (shiftKey && lastSelectedFromState != null && sortOrder !== void 0 && resolveItemId && (selectedIds = handleMultiSelectionChange(lastSelectedFromState, sortOrder, resolveItemId)), newlySelectedItems = [.../* @__PURE__ */ new Set([...newlySelectedItems, ...selectedIds])], !selected)
          for (let selectedId of selectedIds)
            newlySelectedItems.splice(newlySelectedItems.indexOf(selectedId), 1);
        newlySelectedItems.length === 0 && !isBreakpointsXS() ? handleSelectMode(!1) : newlySelectedItems.length > 0 && handleSelectMode(!0), onSelectionChange && onSelectionChange(newlySelectedItems);
      }, handleToggleAll = () => {
        let newlySelectedItems;
        Array.isArray(selectedItems) && selectedItems.length === items.length || selectedItems === types.SELECT_ALL_ITEMS ? newlySelectedItems = [] : newlySelectedItems = items.map((item, index) => idForItem(item, index)), newlySelectedItems.length === 0 && !isBreakpointsXS() ? handleSelectMode(!1) : newlySelectedItems.length > 0 && handleSelectMode(!0), onSelectionChange && onSelectionChange(newlySelectedItems), setTimeout(() => {
          checkableButtonRef?.current?.focus();
        }, 0);
      }, bulkActionClassNames = css.classNames(ResourceList_module.default.BulkActionsWrapper, selectMode && ResourceList_module.default.BulkActionsWrapperVisible), bulkActionsMarkup = isSelectable ? /* @__PURE__ */ React2.createElement("div", {
        className: bulkActionClassNames
      }, /* @__PURE__ */ React2.createElement(BulkActions.BulkActions, {
        selectMode,
        onSelectModeToggle: handleSelectMode,
        label: selectAllActionsLabel,
        paginatedSelectAllAction,
        paginatedSelectAllText,
        promotedActions: promotedBulkActions,
        actions: bulkActions,
        disabled: loading,
        accessibilityLabel: bulkActionsAccessibilityLabel,
        selected: selectAllSelectState,
        onToggleAll: handleToggleAll,
        ref: checkableButtonRef,
        buttonSize: "medium"
      })) : null, filterControlMarkup = filterControl ? /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(!flushFilters && ResourceList_module.default.FiltersWrapper)
      }, filterControl) : null, sortingSelectMarkup = sortOptions && sortOptions.length > 0 && !alternateTool ? /* @__PURE__ */ React2.createElement("div", {
        className: ResourceList_module.default.SortWrapper
      }, /* @__PURE__ */ React2.createElement(Select2.Select, {
        label: i18n.translate("Polaris.ResourceList.sortingLabel"),
        labelInline: !smallScreen,
        labelHidden: smallScreen,
        options: sortOptions,
        onChange: onSortChange,
        value: sortValue,
        disabled: selectMode
      })) : null, alternateToolMarkup = alternateTool && !sortingSelectMarkup ? /* @__PURE__ */ React2.createElement("div", {
        className: ResourceList_module.default.AlternateToolWrapper
      }, alternateTool) : null, headerTitleMarkup = /* @__PURE__ */ React2.createElement("div", {
        className: ResourceList_module.default.HeaderTitleWrapper
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "bodyMd"
      }, headerTitle())), selectButtonMarkup = isSelectable ? /* @__PURE__ */ React2.createElement("div", {
        className: ResourceList_module.default.SelectButtonWrapper
      }, /* @__PURE__ */ React2.createElement(Button3.Button, {
        disabled: selectMode,
        icon: polarisIcons.CheckboxIcon,
        onClick: () => handleSelectMode(!0)
      }, i18n.translate("Polaris.ResourceList.selectButtonText"))) : null, checkableButtonMarkup = isSelectable ? /* @__PURE__ */ React2.createElement("div", {
        className: ResourceList_module.default.CheckableButtonWrapper
      }, /* @__PURE__ */ React2.createElement(CheckableButton.CheckableButton, {
        accessibilityLabel: bulkActionsAccessibilityLabel,
        label: headerTitle(),
        onToggleAll: handleToggleAll,
        disabled: loading,
        ref: checkableButtonRef,
        selected: selectAllSelectState
      })) : null, needsHeader = isSelectable || sortOptions && sortOptions.length > 0 || alternateTool, headerWrapperOverlay = loading ? /* @__PURE__ */ React2.createElement("div", {
        className: ResourceList_module.default["HeaderWrapper-overlay"]
      }) : null, showEmptyState = emptyState && !itemsExist && !loading, showEmptySearchState = !showEmptyState && filterControl && !itemsExist && !loading, headerMarkup = !showEmptyState && showHeader !== !1 && !showEmptySearchState && (showHeader || needsHeader) && listRef.current && /* @__PURE__ */ React2.createElement("div", {
        className: ResourceList_module.default.HeaderOuterWrapper
      }, /* @__PURE__ */ React2.createElement(Sticky.Sticky, {
        boundingElement: listRef.current
      }, (isSticky) => {
        let headerClassName = css.classNames(ResourceList_module.default.HeaderWrapper, sortOptions && sortOptions.length > 0 && !alternateTool && ResourceList_module.default["HeaderWrapper-hasSort"], alternateTool && ResourceList_module.default["HeaderWrapper-hasAlternateTool"], isSelectable && ResourceList_module.default["HeaderWrapper-hasSelect"], loading && ResourceList_module.default["HeaderWrapper-disabled"], isSelectable && selectMode && bulkActionsMarkup && ResourceList_module.default["HeaderWrapper-inSelectMode"], isSticky && ResourceList_module.default["HeaderWrapper-isSticky"]);
        return /* @__PURE__ */ React2.createElement("div", {
          className: headerClassName
        }, headerWrapperOverlay, /* @__PURE__ */ React2.createElement("div", {
          className: ResourceList_module.default.HeaderContentWrapper
        }, headerTitleMarkup, checkableButtonMarkup, alternateToolMarkup, sortingSelectMarkup, selectButtonMarkup), bulkActionsMarkup);
      })), emptySearchStateMarkup = showEmptySearchState ? emptySearchState || /* @__PURE__ */ React2.createElement("div", {
        className: ResourceList_module.default.EmptySearchResultWrapper
      }, /* @__PURE__ */ React2.createElement(EmptySearchResult.EmptySearchResult, Object.assign({}, emptySearchResultText, {
        withIllustration: !0
      }))) : null, emptyStateMarkup = showEmptyState ? emptyState : null, defaultTopPadding = 8, spinnerStyle = {
        paddingTop: `${loadingPosition > 0 ? loadingPosition : defaultTopPadding}px`
      }, spinnerSize = items.length < 2 ? "small" : "large", loadingOverlay = loading ? /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("li", {
        className: ResourceList_module.default.SpinnerContainer,
        style: spinnerStyle
      }, /* @__PURE__ */ React2.createElement(Spinner2.Spinner, {
        size: spinnerSize,
        accessibilityLabel: "Items are loading"
      })), /* @__PURE__ */ React2.createElement("li", {
        className: ResourceList_module.default.LoadingOverlay
      })) : null, className = css.classNames(ResourceList_module.default.ItemWrapper, loading && ResourceList_module.default["ItemWrapper-isLoading"]), loadingWithoutItemsMarkup = loading && !itemsExist ? /* @__PURE__ */ React2.createElement("div", {
        className,
        tabIndex: -1
      }, loadingOverlay) : null, resourceListClassName = css.classNames(ResourceList_module.default.ResourceList, loading && ResourceList_module.default.disabledPointerEvents, selectMode && ResourceList_module.default.disableTextSelection), listMarkup = itemsExist ? /* @__PURE__ */ React2.createElement("ul", {
        className: resourceListClassName,
        ref: listRef,
        "aria-live": "polite",
        "aria-busy": loading
      }, loadingOverlay, React2.Children.toArray(items.map(renderItemWithId))) : null, paginationMarkup = pagination ? /* @__PURE__ */ React2.createElement("div", {
        className: ResourceList_module.default.PaginationWrapper
      }, /* @__PURE__ */ React2.createElement(Pagination.Pagination, Object.assign({
        type: "table"
      }, pagination))) : null, context$1 = {
        selectable: isSelectable,
        selectedItems,
        selectMode,
        hasBulkActions: Boolean(bulkActions),
        resourceName,
        loading,
        onSelectionChange: handleSelectionChange
      };
      return /* @__PURE__ */ React2.createElement(context.ResourceListContext.Provider, {
        value: context$1
      }, filterControlMarkup, /* @__PURE__ */ React2.createElement("div", {
        className: ResourceList_module.default.ResourceListWrapper
      }, headerMarkup, listMarkup, emptySearchStateMarkup, emptyStateMarkup, loadingWithoutItemsMarkup, paginationMarkup));
    }
    ResourceList.Item = ResourceItem.ResourceItem;
    exports.ResourceList = ResourceList;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SelectAllActions/SelectAllActions.css.js
var require_SelectAllActions_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SelectAllActions/SelectAllActions.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      SelectAllActions: "Polaris-SelectAllActions",
      "SelectAllActions-not-sticky": "Polaris-SelectAllActions--selectAllActionsNotSticky",
      "SelectAllActions-entering": "Polaris-SelectAllActions__SelectAllActions--entering",
      "SelectAllActions-exiting": "Polaris-SelectAllActions__SelectAllActions--exiting",
      "SelectAllActions-hasPagination": "Polaris-SelectAllActions__SelectAllActions--hasPagination",
      "SelectAllActions-exited": "Polaris-SelectAllActions__SelectAllActions--exited",
      "SelectAllActions-entered": "Polaris-SelectAllActions__SelectAllActions--entered",
      AllAction: "Polaris-SelectAllActions__AllAction"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SelectAllActions/SelectAllActions.js
var require_SelectAllActions = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SelectAllActions/SelectAllActions.js"(exports) {
    "use strict";
    var React2 = require_react(), reactTransitionGroup = require("react-transition-group"), css = require_css(), SelectAllActions_module = require_SelectAllActions_css(), UnstyledButton = require_UnstyledButton(), Text3 = require_Text(), CheckableButton = require_CheckableButton(), Box3 = require_Box(), InlineStack3 = require_InlineStack(), SelectAllActions = /* @__PURE__ */ React2.forwardRef(function({
      label,
      selectMode,
      paginatedSelectAllText,
      paginatedSelectAllAction,
      disabled,
      isSticky,
      hasPagination,
      accessibilityLabel,
      selected,
      onToggleAll
    }, ref) {
      let nodeRef = React2.useRef(null), paginatedSelectAllMarkup = paginatedSelectAllAction ? /* @__PURE__ */ React2.createElement(UnstyledButton.UnstyledButton, {
        className: SelectAllActions_module.default.AllAction,
        onClick: paginatedSelectAllAction.onAction,
        size: "slim",
        disabled
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        variant: "bodySm",
        fontWeight: "medium"
      }, paginatedSelectAllAction.content)) : null, hasTextAndAction = paginatedSelectAllText && paginatedSelectAllAction, checkableButtonProps = {
        accessibilityLabel,
        label: hasTextAndAction ? paginatedSelectAllText : label,
        selected,
        onToggleAll,
        disabled,
        ariaLive: hasTextAndAction ? "polite" : void 0,
        ref
      }, checkableButtonMarkup = accessibilityLabel && onToggleAll ? /* @__PURE__ */ React2.createElement(CheckableButton.CheckableButton, checkableButtonProps) : null;
      return /* @__PURE__ */ React2.createElement(reactTransitionGroup.Transition, {
        timeout: 0,
        in: selectMode,
        key: "markup",
        nodeRef
      }, (status) => {
        let wrapperClasses = css.classNames(SelectAllActions_module.default.SelectAllActions, hasPagination && SelectAllActions_module.default["SelectAllActions-hasPagination"], !isSticky && SelectAllActions_module.default["SelectAllActions-not-sticky"], status && SelectAllActions_module.default[`SelectAllActions-${status}`]);
        return /* @__PURE__ */ React2.createElement("div", {
          className: wrapperClasses,
          ref: nodeRef
        }, /* @__PURE__ */ React2.createElement(Box3.Box, {
          background: "bg-surface-secondary",
          borderBlockStartWidth: "025",
          borderColor: "border",
          width: "100%",
          paddingBlockStart: "300",
          paddingBlockEnd: "300",
          paddingInlineStart: "300",
          paddingInlineEnd: "400"
        }, /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
          gap: "200",
          align: "start",
          blockAlign: "center"
        }, checkableButtonMarkup, /* @__PURE__ */ React2.createElement(Text3.Text, {
          as: "span",
          variant: "bodySm",
          fontWeight: "medium"
        }, hasTextAndAction ? paginatedSelectAllText : label), paginatedSelectAllMarkup)));
      });
    });
    exports.SelectAllActions = SelectAllActions;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SettingToggle/SettingToggle.js
var require_SettingToggle = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SettingToggle/SettingToggle.js"(exports) {
    "use strict";
    var React2 = require_react(), utils = require_utils(), LegacyCard = require_LegacyCard(), SettingAction = require_SettingAction();
    function SettingToggle({
      enabled,
      action: action8,
      children
    }) {
      let id = React2.useId();
      console.warn(`Deprecation: <SettingToggle /> is deprecated. This component will be removed in a future major version of Polaris. Use the primitive layout and typography components to compose a setting toggle card.
      See the "With primitive components" example in https://polaris.shopify.com/components/deprecated/setting-toggle`);
      let actionMarkup = action8 ? utils.buttonFrom(action8, {
        role: "switch",
        ariaChecked: enabled ? "true" : "false",
        size: "slim"
      }) : null;
      return /* @__PURE__ */ React2.createElement(LegacyCard.LegacyCard, {
        sectioned: !0
      }, /* @__PURE__ */ React2.createElement(SettingAction.SettingAction, {
        action: actionMarkup
      }, /* @__PURE__ */ React2.createElement("label", {
        htmlFor: id
      }, children)));
    }
    exports.SettingToggle = SettingToggle;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SkeletonBodyText/SkeletonBodyText.css.js
var require_SkeletonBodyText_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SkeletonBodyText/SkeletonBodyText.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      SkeletonBodyTextContainer: "Polaris-SkeletonBodyText__SkeletonBodyTextContainer",
      SkeletonBodyText: "Polaris-SkeletonBodyText"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SkeletonBodyText/SkeletonBodyText.js
var require_SkeletonBodyText = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SkeletonBodyText/SkeletonBodyText.js"(exports) {
    "use strict";
    var React2 = require_react(), SkeletonBodyText_module = require_SkeletonBodyText_css();
    function SkeletonBodyText({
      lines = 3
    }) {
      let bodyTextLines = [];
      for (let i = 0; i < lines; i++)
        bodyTextLines.push(/* @__PURE__ */ React2.createElement("div", {
          className: SkeletonBodyText_module.default.SkeletonBodyText,
          key: i
        }));
      return /* @__PURE__ */ React2.createElement("div", {
        className: SkeletonBodyText_module.default.SkeletonBodyTextContainer
      }, bodyTextLines);
    }
    exports.SkeletonBodyText = SkeletonBodyText;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SkeletonDisplayText/SkeletonDisplayText.css.js
var require_SkeletonDisplayText_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SkeletonDisplayText/SkeletonDisplayText.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      DisplayText: "Polaris-SkeletonDisplayText__DisplayText",
      sizeSmall: "Polaris-SkeletonDisplayText--sizeSmall",
      sizeMedium: "Polaris-SkeletonDisplayText--sizeMedium",
      sizeLarge: "Polaris-SkeletonDisplayText--sizeLarge",
      sizeExtraLarge: "Polaris-SkeletonDisplayText--sizeExtraLarge"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SkeletonDisplayText/SkeletonDisplayText.js
var require_SkeletonDisplayText = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SkeletonDisplayText/SkeletonDisplayText.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), SkeletonDisplayText_module = require_SkeletonDisplayText_css();
    function SkeletonDisplayText({
      size = "medium",
      maxWidth
    }) {
      let className = css.classNames(SkeletonDisplayText_module.default.DisplayText, size && SkeletonDisplayText_module.default[css.variationName("size", size)]), style = {
        "--pc-skeleton-display-text-max-width": maxWidth ?? void 0
      };
      return /* @__PURE__ */ React2.createElement("div", {
        className,
        style: css.sanitizeCustomProperties(style)
      });
    }
    exports.SkeletonDisplayText = SkeletonDisplayText;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SkeletonPage/SkeletonPage.css.js
var require_SkeletonPage_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SkeletonPage/SkeletonPage.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      SkeletonTitle: "Polaris-SkeletonPage__SkeletonTitle"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SkeletonPage/SkeletonPage.js
var require_SkeletonPage = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SkeletonPage/SkeletonPage.js"(exports) {
    "use strict";
    var React2 = require_react(), SkeletonPage_module = require_SkeletonPage_css(), hooks = require_hooks2(), Text3 = require_Text(), Box3 = require_Box(), BlockStack3 = require_BlockStack(), InlineStack3 = require_InlineStack();
    function SkeletonPage({
      children,
      fullWidth,
      narrowWidth,
      primaryAction,
      title = "",
      backAction
    }) {
      let i18n = hooks.useI18n(), titleContent = title ? /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "h1",
        variant: "headingLg",
        fontWeight: "bold"
      }, title) : /* @__PURE__ */ React2.createElement("div", {
        className: SkeletonPage_module.default.SkeletonTitle
      }, /* @__PURE__ */ React2.createElement(Box3.Box, {
        background: "bg-fill-tertiary",
        minWidth: "120px",
        minHeight: "28px",
        borderRadius: "100"
      })), primaryActionMarkup = primaryAction ? /* @__PURE__ */ React2.createElement(Box3.Box, {
        id: "SkeletonPage-PrimaryAction",
        borderRadius: "100",
        background: "bg-fill-tertiary",
        minHeight: "2.25rem",
        minWidth: "6.25rem"
      }) : null, backActionMarkup = backAction ? /* @__PURE__ */ React2.createElement(Box3.Box, {
        borderRadius: "100",
        background: "bg-fill-tertiary",
        minHeight: "2.25rem",
        minWidth: "2.25rem",
        maxWidth: "2.25rem"
      }) : null;
      return /* @__PURE__ */ React2.createElement(BlockStack3.BlockStack, {
        gap: "400",
        inlineAlign: "center"
      }, /* @__PURE__ */ React2.createElement(Box3.Box, Object.assign({
        width: "100%",
        padding: "0",
        paddingInlineStart: {
          sm: "600"
        },
        paddingInlineEnd: {
          sm: "600"
        },
        maxWidth: "var(--pc-skeleton-page-max-width)",
        "aria-label": i18n.translate("Polaris.SkeletonPage.loadingLabel"),
        role: "status"
      }, narrowWidth && {
        maxWidth: "var(--pc-skeleton-page-max-width-narrow)"
      }, fullWidth && {
        maxWidth: "none"
      }), /* @__PURE__ */ React2.createElement(BlockStack3.BlockStack, null, /* @__PURE__ */ React2.createElement(Box3.Box, {
        paddingBlockStart: {
          xs: "400",
          md: "500"
        },
        paddingBlockEnd: {
          xs: "400",
          md: "500"
        },
        paddingInlineStart: {
          xs: "400",
          sm: "0"
        },
        paddingInlineEnd: {
          xs: "400",
          sm: "0"
        },
        width: "100%"
      }, /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        gap: "400",
        align: "space-between",
        blockAlign: "center"
      }, /* @__PURE__ */ React2.createElement(InlineStack3.InlineStack, {
        gap: "400"
      }, backActionMarkup, /* @__PURE__ */ React2.createElement(Box3.Box, {
        paddingBlockStart: "100",
        paddingBlockEnd: "100"
      }, titleContent)), primaryActionMarkup)), /* @__PURE__ */ React2.createElement(Box3.Box, {
        paddingBlockEnd: "200",
        width: "100%"
      }, children))));
    }
    exports.SkeletonPage = SkeletonPage;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SkeletonTabs/SkeletonTabs.css.js
var require_SkeletonTabs_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SkeletonTabs/SkeletonTabs.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Tabs: "Polaris-SkeletonTabs__Tabs",
      Tab: "Polaris-SkeletonTabs__Tab",
      TabText: "Polaris-SkeletonTabs__TabText",
      fitted: "Polaris-SkeletonTabs--fitted"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SkeletonTabs/SkeletonTabs.js
var require_SkeletonTabs = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SkeletonTabs/SkeletonTabs.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), SkeletonTabs_module = require_SkeletonTabs_css();
    function SkeletonTabs({
      count = 2,
      fitted = !1
    }) {
      return /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(SkeletonTabs_module.default.Tabs, fitted && SkeletonTabs_module.default.fitted)
      }, [...Array(count).keys()].map((key) => /* @__PURE__ */ React2.createElement("div", {
        key,
        className: css.classNames(SkeletonTabs_module.default.Tab)
      }, /* @__PURE__ */ React2.createElement("div", {
        className: SkeletonTabs_module.default.TabText
      }))));
    }
    exports.SkeletonTabs = SkeletonTabs;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SkeletonThumbnail/SkeletonThumbnail.css.js
var require_SkeletonThumbnail_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SkeletonThumbnail/SkeletonThumbnail.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      SkeletonThumbnail: "Polaris-SkeletonThumbnail",
      sizeExtraSmall: "Polaris-SkeletonThumbnail--sizeExtraSmall",
      sizeSmall: "Polaris-SkeletonThumbnail--sizeSmall",
      sizeMedium: "Polaris-SkeletonThumbnail--sizeMedium",
      sizeLarge: "Polaris-SkeletonThumbnail--sizeLarge"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SkeletonThumbnail/SkeletonThumbnail.js
var require_SkeletonThumbnail = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SkeletonThumbnail/SkeletonThumbnail.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), SkeletonThumbnail_module = require_SkeletonThumbnail_css();
    function SkeletonThumbnail({
      size = "medium"
    }) {
      let className = css.classNames(SkeletonThumbnail_module.default.SkeletonThumbnail, size && SkeletonThumbnail_module.default[css.variationName("size", size)]);
      return /* @__PURE__ */ React2.createElement("div", {
        className
      });
    }
    exports.SkeletonThumbnail = SkeletonThumbnail;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Thumbnail/Thumbnail.css.js
var require_Thumbnail_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Thumbnail/Thumbnail.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Thumbnail: "Polaris-Thumbnail",
      sizeExtraSmall: "Polaris-Thumbnail--sizeExtraSmall",
      sizeSmall: "Polaris-Thumbnail--sizeSmall",
      sizeMedium: "Polaris-Thumbnail--sizeMedium",
      sizeLarge: "Polaris-Thumbnail--sizeLarge",
      transparent: "Polaris-Thumbnail--transparent"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Thumbnail/Thumbnail.js
var require_Thumbnail = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Thumbnail/Thumbnail.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Thumbnail_module = require_Thumbnail_css(), Image = require_Image(), Icon2 = require_Icon();
    function Thumbnail({
      source,
      alt,
      size = "medium",
      transparent
    }) {
      let className = css.classNames(Thumbnail_module.default.Thumbnail, size && Thumbnail_module.default[css.variationName("size", size)], transparent && Thumbnail_module.default.transparent), content = typeof source == "string" ? /* @__PURE__ */ React2.createElement(Image.Image, {
        alt,
        source
      }) : /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        accessibilityLabel: alt,
        source
      });
      return /* @__PURE__ */ React2.createElement("span", {
        className
      }, content);
    }
    exports.Thumbnail = Thumbnail;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Toast/Toast.js
var require_Toast2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Toast/Toast.js"(exports) {
    "use strict";
    var React2 = require_react(), useDeepEffect = require_use_deep_effect(), hooks = require_hooks9(), Toast3 = /* @__PURE__ */ React2.memo(function(props) {
      let id = React2.useId(), {
        showToast,
        hideToast
      } = hooks.useFrame();
      return useDeepEffect.useDeepEffect(() => (showToast({
        id,
        ...props
      }), () => {
        hideToast({
          id
        });
      }), [props]), null;
    });
    exports.Toast = Toast3;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/TopBar.css.js
var require_TopBar_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/TopBar.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      TopBar: "Polaris-TopBar",
      Container: "Polaris-TopBar__Container",
      LogoDisplayControl: "Polaris-TopBar__LogoDisplayControl",
      LogoDisplayContainer: "Polaris-TopBar__LogoDisplayContainer",
      LogoContainer: "Polaris-TopBar__LogoContainer",
      hasLogoSuffix: "Polaris-TopBar--hasLogoSuffix",
      Logo: "Polaris-TopBar__Logo",
      LogoLink: "Polaris-TopBar__LogoLink",
      ContextControl: "Polaris-TopBar__ContextControl",
      NavigationIcon: "Polaris-TopBar__NavigationIcon",
      focused: "Polaris-TopBar--focused",
      IconWrapper: "Polaris-TopBar__IconWrapper",
      LeftContent: "Polaris-TopBar__LeftContent",
      Search: "Polaris-TopBar__Search",
      RightContent: "Polaris-TopBar__RightContent",
      SecondaryMenu: "Polaris-TopBar__SecondaryMenu"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/components/Search/Search.css.js
var require_Search_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/components/Search/Search.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Search: "Polaris-TopBar-Search",
      SearchContent: "Polaris-TopBar-Search__SearchContent",
      visible: "Polaris-TopBar-Search--visible",
      Results: "Polaris-TopBar-Search__Results"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/components/SearchDismissOverlay/SearchDismissOverlay.css.js
var require_SearchDismissOverlay_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/components/SearchDismissOverlay/SearchDismissOverlay.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      SearchDismissOverlay: "Polaris-TopBar-SearchDismissOverlay",
      visible: "Polaris-TopBar-SearchDismissOverlay--visible"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/components/SearchDismissOverlay/SearchDismissOverlay.js
var require_SearchDismissOverlay = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/components/SearchDismissOverlay/SearchDismissOverlay.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), SearchDismissOverlay_module = require_SearchDismissOverlay_css(), ScrollLock = require_ScrollLock();
    function SearchDismissOverlay({
      onDismiss,
      visible
    }) {
      let node = React2.useRef(null), handleDismiss = React2.useCallback(({
        target
      }) => {
        target === node.current && onDismiss != null && onDismiss();
      }, [onDismiss]);
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, visible ? /* @__PURE__ */ React2.createElement(ScrollLock.ScrollLock, null) : null, /* @__PURE__ */ React2.createElement("div", {
        ref: node,
        className: css.classNames(SearchDismissOverlay_module.default.SearchDismissOverlay, visible && SearchDismissOverlay_module.default.visible),
        onClick: handleDismiss
      }));
    }
    exports.SearchDismissOverlay = SearchDismissOverlay;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/components/Search/Search.js
var require_Search = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/components/Search/Search.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Search_module = require_Search_css(), SearchDismissOverlay = require_SearchDismissOverlay();
    function Search({
      visible,
      children,
      onDismiss,
      overlayVisible = !1
    }) {
      if (children == null)
        return null;
      let overlayMarkup = visible ? /* @__PURE__ */ React2.createElement(SearchDismissOverlay.SearchDismissOverlay, {
        onDismiss,
        visible: overlayVisible
      }) : null;
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, overlayMarkup, /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Search_module.default.Search, visible && Search_module.default.visible)
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Search_module.default.SearchContent
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Search_module.default.Results
      }, children))));
    }
    exports.Search = Search;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/components/SearchField/SearchField.css.js
var require_SearchField_css2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/components/SearchField/SearchField.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      SearchField: "Polaris-TopBar-SearchField",
      focused: "Polaris-TopBar-SearchField--focused",
      Input: "Polaris-TopBar-SearchField__Input",
      Backdrop: "Polaris-TopBar-SearchField__Backdrop",
      BackdropShowFocusBorder: "Polaris-TopBar-SearchField__BackdropShowFocusBorder",
      Icon: "Polaris-TopBar-SearchField__Icon",
      Clear: "Polaris-TopBar-SearchField__Clear"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/components/SearchField/SearchField.js
var require_SearchField3 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/components/SearchField/SearchField.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), SearchField_module = require_SearchField_css2(), hooks = require_hooks2(), Icon2 = require_Icon(), Text3 = require_Text();
    function SearchField({
      value,
      focused,
      active,
      placeholder,
      onChange,
      onFocus,
      onBlur,
      onCancel,
      showFocusBorder
    }) {
      let i18n = hooks.useI18n(), [forceActive, setForceActive] = React2.useState(!1), input = React2.useRef(null), searchId = React2.useId(), handleChange = React2.useCallback(({
        currentTarget
      }) => {
        onChange(currentTarget.value);
      }, [onChange]), handleFocus = React2.useCallback(() => onFocus && onFocus(), [onFocus]), handleBlur = React2.useCallback(() => onBlur && onBlur(), [onBlur]), handleClear = React2.useCallback(() => {
        onCancel && onCancel(), input.current && (input.current.value = "", onChange(""), input.current.focus());
      }, [onCancel, onChange]);
      React2.useEffect(() => {
        input.current && (focused ? input.current.focus() : input.current.blur());
      }, [focused]);
      let clearMarkup = value !== "" && /* @__PURE__ */ React2.createElement("button", {
        type: "button",
        "aria-label": i18n.translate("Polaris.TopBar.SearchField.clearButtonLabel"),
        className: SearchField_module.default.Clear,
        onClick: handleClear,
        onBlur: () => {
          setForceActive(!1), handleClear();
        },
        onFocus: () => {
          handleFocus(), setForceActive(!0);
        }
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.XCircleIcon
      })), className = css.classNames(SearchField_module.default.SearchField, (focused || active || forceActive) && SearchField_module.default.focused);
      return /* @__PURE__ */ React2.createElement("div", {
        className,
        onFocus: handleFocus,
        onBlur: handleBlur
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "span",
        visuallyHidden: !0
      }, /* @__PURE__ */ React2.createElement("label", {
        htmlFor: searchId
      }, i18n.translate("Polaris.TopBar.SearchField.search"))), /* @__PURE__ */ React2.createElement("input", {
        id: searchId,
        className: SearchField_module.default.Input,
        placeholder,
        type: "search",
        autoCapitalize: "off",
        autoComplete: "off",
        autoCorrect: "off",
        ref: input,
        value,
        onChange: handleChange,
        onKeyDown: preventDefault
      }), /* @__PURE__ */ React2.createElement("span", {
        className: SearchField_module.default.Icon
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.SearchIcon
      })), clearMarkup, /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(SearchField_module.default.Backdrop, showFocusBorder && SearchField_module.default.BackdropShowFocusBorder)
      }));
    }
    function preventDefault(event) {
      event.key === "Enter" && event.preventDefault();
    }
    exports.SearchField = SearchField;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/components/UserMenu/UserMenu.css.js
var require_UserMenu_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/components/UserMenu/UserMenu.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Details: "Polaris-TopBar-UserMenu__Details"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/MessageIndicator/MessageIndicator.css.js
var require_MessageIndicator_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/MessageIndicator/MessageIndicator.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      MessageIndicatorWrapper: "Polaris-MessageIndicator__MessageIndicatorWrapper",
      MessageIndicator: "Polaris-MessageIndicator"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/MessageIndicator/MessageIndicator.js
var require_MessageIndicator = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/MessageIndicator/MessageIndicator.js"(exports) {
    "use strict";
    var React2 = require_react(), MessageIndicator_module = require_MessageIndicator_css();
    function MessageIndicator({
      children,
      active
    }) {
      let indicatorMarkup = active && /* @__PURE__ */ React2.createElement("div", {
        className: MessageIndicator_module.default.MessageIndicator
      });
      return /* @__PURE__ */ React2.createElement("div", {
        className: MessageIndicator_module.default.MessageIndicatorWrapper
      }, indicatorMarkup, children);
    }
    exports.MessageIndicator = MessageIndicator;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/components/Menu/Menu.css.js
var require_Menu_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/components/Menu/Menu.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ActivatorWrapper: "Polaris-TopBar-Menu__ActivatorWrapper",
      Activator: "Polaris-TopBar-Menu__Activator",
      "Activator-userMenu": "Polaris-TopBar-Menu__Activator--userMenu",
      Section: "Polaris-TopBar-Menu__Section"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/components/Menu/components/Message/Message.css.js
var require_Message_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/components/Menu/components/Message/Message.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Section: "Polaris-Menu-Message__Section"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/components/Menu/components/Message/Message.js
var require_Message = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/components/Menu/components/Message/Message.js"(exports) {
    "use strict";
    var React2 = require_react(), Message_module = require_Message_css(), Link = require_Link(), Badge3 = require_Badge(), Popover = require_Popover(), LegacyStack = require_LegacyStack(), TextContainer = require_TextContainer(), Text3 = require_Text(), Button3 = require_Button();
    function Message({
      title,
      description,
      action: action8,
      link,
      badge
    }) {
      let badgeMarkup = badge && /* @__PURE__ */ React2.createElement(Badge3.Badge, {
        tone: badge.tone
      }, badge.content), {
        to,
        content: linkContent
      } = link, {
        onClick,
        content: actionContent
      } = action8;
      return /* @__PURE__ */ React2.createElement("div", {
        className: Message_module.default.Section
      }, /* @__PURE__ */ React2.createElement(Popover.Popover.Section, null, /* @__PURE__ */ React2.createElement(LegacyStack.LegacyStack, {
        vertical: !0,
        spacing: "tight"
      }, /* @__PURE__ */ React2.createElement(TextContainer.TextContainer, null, /* @__PURE__ */ React2.createElement(Text3.Text, {
        variant: "headingMd",
        as: "h2"
      }, title, badgeMarkup), /* @__PURE__ */ React2.createElement("p", null, description)), /* @__PURE__ */ React2.createElement(Link.Link, {
        url: to
      }, linkContent), /* @__PURE__ */ React2.createElement(Button3.Button, {
        variant: "plain",
        onClick
      }, actionContent))));
    }
    exports.Message = Message;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/components/Menu/Menu.js
var require_Menu = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/components/Menu/Menu.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Menu_module = require_Menu_css(), Message = require_Message(), Popover = require_Popover(), Box3 = require_Box(), ActionList = require_ActionList();
    function Menu(props) {
      let {
        actions,
        onOpen,
        onClose,
        open,
        activatorContent,
        message,
        accessibilityLabel,
        customWidth,
        userMenu
      } = props, badgeProps = message && message.badge && {
        content: message.badge.content,
        tone: message.badge.tone
      }, messageMarkup = message && /* @__PURE__ */ React2.createElement(Message.Message, {
        title: message.title,
        description: message.description,
        action: {
          onClick: message.action.onClick,
          content: message.action.content
        },
        link: {
          to: message.link.to,
          content: message.link.content
        },
        badge: badgeProps
      });
      return /* @__PURE__ */ React2.createElement(Popover.Popover, {
        activator: /* @__PURE__ */ React2.createElement("div", {
          className: Menu_module.default.ActivatorWrapper
        }, /* @__PURE__ */ React2.createElement("button", {
          type: "button",
          className: css.classNames(Menu_module.default.Activator, userMenu && Menu_module.default["Activator-userMenu"]),
          onClick: onOpen,
          "aria-label": accessibilityLabel
        }, activatorContent)),
        active: open,
        onClose,
        fixed: !0,
        fullHeight: !0,
        preferredAlignment: "right"
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Menu_module.default.MenuItems
      }, /* @__PURE__ */ React2.createElement(Box3.Box, {
        width: customWidth
      }, /* @__PURE__ */ React2.createElement(ActionList.ActionList, {
        actionRole: "menuitem",
        onActionAnyItem: onClose,
        sections: actions
      }), messageMarkup)));
    }
    exports.Menu = Menu;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/components/UserMenu/UserMenu.js
var require_UserMenu = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/components/UserMenu/UserMenu.js"(exports) {
    "use strict";
    var React2 = require_react(), UserMenu_module = require_UserMenu_css(), MessageIndicator = require_MessageIndicator(), Menu = require_Menu(), Text3 = require_Text(), Avatar = require_Avatar();
    function UserMenu({
      name,
      detail,
      avatar,
      initials,
      actions,
      message,
      onToggle,
      open,
      accessibilityLabel,
      customActivator,
      customWidth
    }) {
      let showIndicator = Boolean(message), activatorContentMarkup = customActivator || /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("span", {
        className: UserMenu_module.default.Details
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "p",
        variant: "bodySm",
        alignment: "start",
        fontWeight: "medium",
        truncate: !0
      }, name), /* @__PURE__ */ React2.createElement("span", {
        className: UserMenu_module.default.Message
      }, /* @__PURE__ */ React2.createElement(Text3.Text, {
        as: "p",
        variant: "bodyXs",
        alignment: "start",
        tone: "text-inverse-secondary",
        truncate: !0
      }, detail))), /* @__PURE__ */ React2.createElement(MessageIndicator.MessageIndicator, {
        active: showIndicator
      }, /* @__PURE__ */ React2.createElement(Avatar.Avatar, {
        size: "md",
        initials: initials && initials.replace(" ", ""),
        source: avatar,
        name
      })));
      return /* @__PURE__ */ React2.createElement(Menu.Menu, {
        activatorContent: activatorContentMarkup,
        open,
        onOpen: onToggle,
        onClose: onToggle,
        actions,
        message,
        accessibilityLabel,
        customWidth,
        userMenu: !0
      });
    }
    exports.UserMenu = UserMenu;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/TopBar.js
var require_TopBar = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/TopBar.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), getWidth = require_get_width(), useToggle = require_use_toggle(), TopBar_module = require_TopBar_css(), Search = require_Search(), SearchField = require_SearchField3(), UserMenu = require_UserMenu(), hooks = require_hooks2(), hooks$1 = require_hooks9(), Icon2 = require_Icon(), UnstyledLink = require_UnstyledLink(), Image = require_Image(), Menu = require_Menu(), TopBar = function({
      showNavigationToggle,
      userMenu,
      searchResults,
      searchField,
      secondaryMenu,
      searchResultsVisible,
      searchResultsOverlayVisible = !1,
      onNavigationToggle,
      onSearchResultsDismiss,
      contextControl,
      logoSuffix
    }) {
      let i18n = hooks.useI18n(), {
        logo
      } = hooks$1.useFrame(), {
        value: focused,
        setTrue: forceTrueFocused,
        setFalse: forceFalseFocused
      } = useToggle.useToggle(!1), iconClassName = css.classNames(TopBar_module.default.NavigationIcon, focused && TopBar_module.default.focused), navigationButtonMarkup = showNavigationToggle ? /* @__PURE__ */ React2.createElement("button", {
        type: "button",
        className: iconClassName,
        onClick: onNavigationToggle,
        onFocus: forceTrueFocused,
        onBlur: forceFalseFocused,
        "aria-label": i18n.translate("Polaris.TopBar.toggleMenuLabel")
      }, /* @__PURE__ */ React2.createElement("div", {
        className: TopBar_module.default.IconWrapper
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.MenuIcon
      }))) : null, width = getWidth.getWidth(logo, 104), contextMarkup;
      if (contextControl)
        contextMarkup = /* @__PURE__ */ React2.createElement("div", {
          className: TopBar_module.default.ContextControl
        }, contextControl);
      else if (logo) {
        let className = css.classNames(TopBar_module.default.LogoContainer, showNavigationToggle || searchField ? TopBar_module.default.LogoDisplayControl : TopBar_module.default.LogoDisplayContainer, logoSuffix && TopBar_module.default.hasLogoSuffix);
        contextMarkup = /* @__PURE__ */ React2.createElement("div", {
          className
        }, /* @__PURE__ */ React2.createElement(UnstyledLink.UnstyledLink, {
          url: logo.url || "",
          className: TopBar_module.default.LogoLink,
          style: {
            width
          }
        }, /* @__PURE__ */ React2.createElement(Image.Image, {
          source: logo.topBarSource || "",
          alt: logo.accessibilityLabel || "",
          className: TopBar_module.default.Logo,
          style: {
            width
          }
        })), logoSuffix);
      }
      let searchMarkup = searchField ? /* @__PURE__ */ React2.createElement(React2.Fragment, null, searchField, /* @__PURE__ */ React2.createElement(Search.Search, {
        visible: searchResultsVisible,
        onDismiss: onSearchResultsDismiss,
        overlayVisible: searchResultsOverlayVisible
      }, searchResults)) : null;
      return /* @__PURE__ */ React2.createElement("div", {
        className: TopBar_module.default.TopBar
      }, /* @__PURE__ */ React2.createElement("div", {
        className: TopBar_module.default.Container
      }, /* @__PURE__ */ React2.createElement("div", {
        className: TopBar_module.default.LeftContent
      }, navigationButtonMarkup, contextMarkup), /* @__PURE__ */ React2.createElement("div", {
        className: TopBar_module.default.Search
      }, searchMarkup), /* @__PURE__ */ React2.createElement("div", {
        className: TopBar_module.default.RightContent
      }, /* @__PURE__ */ React2.createElement("div", {
        className: TopBar_module.default.SecondaryMenu
      }, secondaryMenu), userMenu)));
    };
    TopBar.Menu = Menu.Menu;
    TopBar.SearchField = SearchField.SearchField;
    TopBar.UserMenu = UserMenu.UserMenu;
    exports.TopBar = TopBar;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/UnstyledButton/utils.js
var require_utils4 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/UnstyledButton/utils.js"(exports) {
    "use strict";
    var React2 = require_react(), UnstyledButton = require_UnstyledButton();
    function unstyledButtonFrom({
      content,
      onAction,
      ...action8
    }, overrides, key) {
      return /* @__PURE__ */ React2.createElement(UnstyledButton.UnstyledButton, Object.assign({
        key,
        onClick: onAction
      }, action8, overrides), content);
    }
    exports.unstyledButtonFrom = unstyledButtonFrom;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/duration.js
var require_duration = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/duration.js"(exports) {
    "use strict";
    function ensureTwoDigits(num) {
      return num > 9 ? String(num) : `0${num}`;
    }
    function secondsToTimeComponents(seconds) {
      return {
        hours: Math.floor(seconds / 3600),
        minutes: Math.floor(seconds % 3600 / 60),
        seconds: seconds % 60
      };
    }
    function secondsToTimestamp(numSeconds) {
      let {
        hours,
        minutes,
        seconds
      } = secondsToTimeComponents(numSeconds), hasHours = numSeconds > 3600, hoursText = hasHours ? `${hours}:` : "", minutesText = `${hasHours ? ensureTwoDigits(minutes) : minutes}:`, secondsText = `${ensureTwoDigits(seconds)}`;
      return `${hoursText}${minutesText}${secondsText}`;
    }
    function secondsToDurationTranslationKey(numSeconds) {
      let {
        hours,
        minutes,
        seconds
      } = secondsToTimeComponents(numSeconds), durationKey = "Polaris.VideoThumbnail.playButtonA11yLabel.duration";
      return hours ? (durationKey += `.hours.${hours > 1 ? "other" : "one"}`, seconds ? minutes > 1 ? durationKey += `${seconds > 1 ? ".minutesAndSeconds" : ".minutesAndSecond"}` : minutes === 1 ? durationKey += `${seconds > 1 ? ".minuteAndSeconds" : ".minuteAndSecond"}` : durationKey += `${seconds > 1 ? ".andSeconds" : ".andSecond"}` : minutes ? durationKey += `${minutes > 1 ? ".andMinutes" : ".andMinute"}` : durationKey += ".only") : minutes ? (durationKey += `.minutes.${minutes > 1 ? "other" : "one"}`, seconds ? durationKey += `${seconds > 1 ? ".andSeconds" : ".andSecond"}` : durationKey += ".only") : seconds && (durationKey += seconds > 1 ? ".seconds.other" : ".seconds.one"), durationKey;
    }
    exports.ensureTwoDigits = ensureTwoDigits;
    exports.secondsToDurationTranslationKey = secondsToDurationTranslationKey;
    exports.secondsToTimeComponents = secondsToTimeComponents;
    exports.secondsToTimestamp = secondsToTimestamp;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/VideoThumbnail/VideoThumbnail.css.js
var require_VideoThumbnail_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/VideoThumbnail/VideoThumbnail.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Thumbnail: "Polaris-VideoThumbnail__Thumbnail",
      ThumbnailContainer: "Polaris-VideoThumbnail__ThumbnailContainer",
      PlayButton: "Polaris-VideoThumbnail__PlayButton",
      Timestamp: "Polaris-VideoThumbnail__Timestamp",
      PlayIcon: "Polaris-VideoThumbnail__PlayIcon",
      Progress: "Polaris-VideoThumbnail__Progress",
      Indicator: "Polaris-VideoThumbnail__Indicator",
      ProgressBar: "Polaris-VideoThumbnail__ProgressBar",
      Label: "Polaris-VideoThumbnail__Label"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/VideoThumbnail/VideoThumbnail.js
var require_VideoThumbnail = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/VideoThumbnail/VideoThumbnail.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), duration = require_duration(), VideoThumbnail_module = require_VideoThumbnail_css(), hooks = require_hooks2(), hooks$1 = require_hooks11(), LegacyStack = require_LegacyStack(), Icon2 = require_Icon(), Text3 = require_Text();
    function VideoThumbnail({
      thumbnailUrl,
      videoLength = 0,
      videoProgress = 0,
      showVideoProgress = !1,
      accessibilityLabel,
      onClick,
      onBeforeStartPlaying
    }) {
      let i18n = hooks.useI18n(), {
        isNavigationCollapsed
      } = hooks$1.useMediaQuery(), buttonLabel;
      if (accessibilityLabel)
        buttonLabel = accessibilityLabel;
      else if (videoLength) {
        let {
          hours,
          minutes,
          seconds
        } = duration.secondsToTimeComponents(videoLength);
        buttonLabel = i18n.translate("Polaris.VideoThumbnail.playButtonA11yLabel.defaultWithDuration", {
          duration: i18n.translate(duration.secondsToDurationTranslationKey(videoLength), {
            hourCount: hours,
            minuteCount: minutes,
            secondCount: seconds
          })
        });
      } else
        buttonLabel = i18n.translate("Polaris.VideoThumbnail.playButtonA11yLabel.default");
      let timeStampMarkup = videoLength ? /* @__PURE__ */ React2.createElement("div", {
        className: VideoThumbnail_module.default.Timestamp
      }, /* @__PURE__ */ React2.createElement(LegacyStack.LegacyStack, {
        alignment: "center",
        spacing: "extraTight"
      }, /* @__PURE__ */ React2.createElement("span", {
        className: VideoThumbnail_module.default.PlayIcon
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.PlayIcon
      })), /* @__PURE__ */ React2.createElement(Text3.Text, {
        variant: isNavigationCollapsed ? "bodyLg" : "bodyMd",
        as: "p",
        fontWeight: "semibold"
      }, duration.secondsToTimestamp(videoLength)))) : null, progressMarkup = null;
      if (showVideoProgress) {
        let progressValue = calculateProgress(videoLength, videoProgress), progressValuePercents = Math.round(progressValue * 100);
        progressMarkup = /* @__PURE__ */ React2.createElement("div", {
          className: VideoThumbnail_module.default.Progress
        }, /* @__PURE__ */ React2.createElement("progress", {
          className: VideoThumbnail_module.default.ProgressBar,
          value: progressValuePercents,
          max: "100"
        }), /* @__PURE__ */ React2.createElement("div", {
          className: VideoThumbnail_module.default.Indicator,
          style: {
            transform: `scaleX(${progressValue})`
          }
        }, /* @__PURE__ */ React2.createElement("span", {
          className: VideoThumbnail_module.default.Label
        }, progressValuePercents, "%")));
      }
      return /* @__PURE__ */ React2.createElement("div", {
        className: VideoThumbnail_module.default.ThumbnailContainer
      }, /* @__PURE__ */ React2.createElement("div", {
        className: VideoThumbnail_module.default.Thumbnail,
        style: {
          backgroundImage: `url(${thumbnailUrl})`
        }
      }), /* @__PURE__ */ React2.createElement("button", {
        type: "button",
        className: VideoThumbnail_module.default.PlayButton,
        "aria-label": buttonLabel,
        onClick,
        onMouseEnter: onBeforeStartPlaying,
        onFocus: onBeforeStartPlaying,
        onTouchStart: onBeforeStartPlaying
      }, timeStampMarkup), progressMarkup);
    }
    function calculateProgress(videoLength, videoProgress) {
      if (videoProgress > videoLength && console.warn("Value passed to the video progress should not exceed video length. Resetting progress to 100%."), videoProgress > 0 && videoLength > 0) {
        let progress = parseFloat((videoProgress / videoLength).toFixed(2));
        return progress > 1 ? 1 : progress;
      }
      return 0;
    }
    exports.VideoThumbnail = VideoThumbnail;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/index-table/hooks.js
var require_hooks14 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/index-table/hooks.js"(exports) {
    "use strict";
    var React2 = require_react(), context = require_context18();
    function useRowHovered() {
      return React2.useContext(context.RowHoveredContext);
    }
    function useRowSelected() {
      let {
        selected
      } = React2.useContext(context.RowContext);
      return selected;
    }
    function useContainerScroll() {
      return React2.useContext(context.ScrollContext);
    }
    exports.useContainerScroll = useContainerScroll;
    exports.useRowHovered = useRowHovered;
    exports.useRowSelected = useRowSelected;
  }
});

// node_modules/@shopify/polaris/build/cjs/index.js
var require_cjs = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/index.js"(exports) {
    "use strict";
    var configure = require_configure(), types = require_types(), shared = require_shared(), ThemeProvider = require_ThemeProvider(), colorTransformers = require_color_transformers(), withinContentContext = require_within_content_context(), useCopyToClipboard = require_use_copy_to_clipboard(), useEventListener = require_use_event_listener(), useFocus = require_use_focus(), useHover = require_use_hover(), useMediaQuery = require_use_media_query(), useTheme = require_use_theme(), useIndexResourceState = require_use_index_resource_state(), breakpoints = require_breakpoints(), AppProvider = require_AppProvider(), AccountConnection = require_AccountConnection(), ActionList = require_ActionList(), ActionMenu = require_ActionMenu(), Autocomplete = require_Autocomplete(), Avatar = require_Avatar(), Backdrop = require_Backdrop(), Badge3 = require_Badge(), types$1 = require_types2(), Banner2 = require_Banner(), Bleed = require_Bleed(), Box3 = require_Box(), Breadcrumbs = require_Breadcrumbs(), BulkActions = require_BulkActions(), Button3 = require_Button(), utils = require_utils(), ButtonGroup = require_ButtonGroup(), CalloutCard = require_CalloutCard(), Card3 = require_Card(), Checkbox = require_Checkbox(), ChoiceList = require_ChoiceList(), Collapsible2 = require_Collapsible(), ColorPicker = require_ColorPicker(), InlineGrid = require_InlineGrid(), Combobox = require_Combobox(), Connected = require_Connected(), ContextualSaveBar = require_ContextualSaveBar(), DataTable3 = require_DataTable(), DatePicker = require_DatePicker(), DescriptionList = require_DescriptionList(), Divider2 = require_Divider(), DropZone = require_DropZone(), EmptySearchResult = require_EmptySearchResult(), EmptyState = require_EmptyState(), EventListener = require_EventListener(), ExceptionList = require_ExceptionList(), Filters = require_Filters(), Focus = require_Focus(), FooterHelp = require_FooterHelp(), Form = require_Form(), FormLayout = require_FormLayout(), Frame = require_Frame(), Toast3 = require_Toast(), FullscreenBar = require_FullscreenBar(), Grid = require_Grid(), Icon2 = require_Icon(), Image = require_Image(), IndexFilters = require_IndexFilters(), useSetIndexFiltersMode = require_useSetIndexFiltersMode(), types$2 = require_types3(), IndexTable = require_IndexTable(), Indicator = require_Indicator(), InlineStack3 = require_InlineStack(), InlineCode = require_InlineCode(), InlineError = require_InlineError(), KeyboardKey = require_KeyboardKey(), KeypressListener = require_KeypressListener(), Label = require_Label(), Labelled = require_Labelled(), Layout2 = require_Layout(), LegacyCard = require_LegacyCard(), LegacyFilters = require_LegacyFilters(), LegacyStack = require_LegacyStack(), LegacyTabs = require_LegacyTabs(), Link = require_Link(), List = require_List3(), Listbox = require_Listbox(), Loading = require_Loading3(), MediaCard = require_MediaCard(), Modal3 = require_Modal(), Navigation = require_Navigation2(), Item = require_Item10(), OptionList = require_OptionList(), Page2 = require_Page(), PageActions = require_PageActions(), Pagination = require_Pagination(), Picker = require_Picker(), PolarisTestProvider = require_PolarisTestProvider(), Popover = require_Popover(), PopoverOverlay = require_PopoverOverlay(), Portal = require_Portal(), PortalsManager = require_PortalsManager(), PositionedOverlay = require_PositionedOverlay(), ProgressBar3 = require_ProgressBar(), RadioButton = require_RadioButton(), RangeSlider = require_RangeSlider(), ResourceItem = require_ResourceItem(), ResourceList = require_ResourceList(), Scrollable = require_Scrollable(), ScrollLock = require_ScrollLock(), Select2 = require_Select(), SelectAllActions = require_SelectAllActions(), SettingToggle = require_SettingToggle(), Sheet = require_Sheet(), SkeletonBodyText = require_SkeletonBodyText(), SkeletonDisplayText = require_SkeletonDisplayText(), SkeletonPage = require_SkeletonPage(), SkeletonTabs = require_SkeletonTabs(), SkeletonThumbnail = require_SkeletonThumbnail(), Spinner2 = require_Spinner(), Sticky = require_Sticky(), Tabs = require_Tabs(), Tag = require_Tag(), Text3 = require_Text(), TextContainer = require_TextContainer(), TextField2 = require_TextField(), Thumbnail = require_Thumbnail(), Toast$1 = require_Toast2(), Tooltip = require_Tooltip(), TopBar = require_TopBar(), TrapFocus = require_TrapFocus(), Truncate = require_Truncate(), UnstyledButton = require_UnstyledButton(), utils$1 = require_utils4(), UnstyledLink = require_UnstyledLink(), BlockStack3 = require_BlockStack(), VideoThumbnail = require_VideoThumbnail(), hooks = require_hooks9(), context = require_context15(), context$1 = require_context3(), hooks$1 = require_hooks14(), types$3 = require_types4(), hooks$2 = require_hooks3();
    exports.DEFAULT_LOCALE = configure.DEFAULT_LOCALE;
    exports.SUPPORTED_LOCALES = configure.SUPPORTED_LOCALES;
    Object.defineProperty(exports, "Key", {
      enumerable: !0,
      get: function() {
        return types.Key;
      }
    });
    exports.DATA_ATTRIBUTE = shared.DATA_ATTRIBUTE;
    exports.ThemeProvider = ThemeProvider.ThemeProvider;
    exports.hexToRgb = colorTransformers.hexToRgb;
    exports.hsbToHex = colorTransformers.hsbToHex;
    exports.hsbToRgb = colorTransformers.hsbToRgb;
    exports.hslToRgb = colorTransformers.hslToRgb;
    exports.rgbString = colorTransformers.rgbString;
    exports.rgbToHex = colorTransformers.rgbToHex;
    exports.rgbToHsb = colorTransformers.rgbToHsb;
    exports.rgbToHsl = colorTransformers.rgbToHsl;
    exports.rgbaString = colorTransformers.rgbaString;
    exports._SECRET_INTERNAL_WITHIN_CONTENT_CONTEXT = withinContentContext.WithinContentContext;
    exports.useCopyToClipboard = useCopyToClipboard.useCopyToClipboard;
    exports.useEventListener = useEventListener.useEventListener;
    exports.useFocus = useFocus.useFocus;
    exports.useFocusIn = useFocus.useFocusIn;
    exports.useHover = useHover.useHover;
    exports.useMediaQuery = useMediaQuery.useMediaQuery;
    exports.useTheme = useTheme.useTheme;
    exports.useIndexResourceState = useIndexResourceState.useIndexResourceState;
    exports.useBreakpoints = breakpoints.useBreakpoints;
    exports.AppProvider = AppProvider.AppProvider;
    exports.AccountConnection = AccountConnection.AccountConnection;
    exports.ActionList = ActionList.ActionList;
    exports.ActionMenu = ActionMenu.ActionMenu;
    exports.Autocomplete = Autocomplete.Autocomplete;
    exports.Avatar = Avatar.Avatar;
    exports.Backdrop = Backdrop.Backdrop;
    exports.Badge = Badge3.Badge;
    Object.defineProperty(exports, "BadgeProgressValue", {
      enumerable: !0,
      get: function() {
        return types$1.ProgressValue;
      }
    });
    Object.defineProperty(exports, "BadgeStatusValue", {
      enumerable: !0,
      get: function() {
        return types$1.ToneValue;
      }
    });
    exports.Banner = Banner2.Banner;
    exports.Bleed = Bleed.Bleed;
    exports.Box = Box3.Box;
    exports.Breadcrumbs = Breadcrumbs.Breadcrumbs;
    exports.UnstableBulkActions = BulkActions.BulkActions;
    exports.Button = Button3.Button;
    exports.buttonFrom = utils.buttonFrom;
    exports.buttonsFrom = utils.buttonsFrom;
    exports.ButtonGroup = ButtonGroup.ButtonGroup;
    exports.CalloutCard = CalloutCard.CalloutCard;
    exports.Card = Card3.Card;
    exports.Checkbox = Checkbox.Checkbox;
    exports.ChoiceList = ChoiceList.ChoiceList;
    exports.Collapsible = Collapsible2.Collapsible;
    exports.ColorPicker = ColorPicker.ColorPicker;
    exports.InlineGrid = InlineGrid.InlineGrid;
    exports.Combobox = Combobox.Combobox;
    exports.Connected = Connected.Connected;
    exports.ContextualSaveBar = ContextualSaveBar.ContextualSaveBar;
    exports.DataTable = DataTable3.DataTable;
    exports.DatePicker = DatePicker.DatePicker;
    exports.DescriptionList = DescriptionList.DescriptionList;
    exports.Divider = Divider2.Divider;
    exports.DropZone = DropZone.DropZone;
    exports.EmptySearchResult = EmptySearchResult.EmptySearchResult;
    exports.EmptyState = EmptyState.EmptyState;
    exports.EventListener = EventListener.EventListener;
    exports.ExceptionList = ExceptionList.ExceptionList;
    exports.Filters = Filters.Filters;
    exports.Focus = Focus.Focus;
    exports.FooterHelp = FooterHelp.FooterHelp;
    exports.Form = Form.Form;
    exports.FormLayout = FormLayout.FormLayout;
    exports.Frame = Frame.Frame;
    exports.DEFAULT_TOAST_DURATION = Toast3.DEFAULT_TOAST_DURATION;
    exports.DEFAULT_TOAST_DURATION_WITH_ACTION = Toast3.DEFAULT_TOAST_DURATION_WITH_ACTION;
    exports.FullscreenBar = FullscreenBar.FullscreenBar;
    exports.Grid = Grid.Grid;
    exports.Icon = Icon2.Icon;
    exports.Image = Image.Image;
    exports.IndexFilters = IndexFilters.IndexFilters;
    exports.useSetIndexFiltersMode = useSetIndexFiltersMode.useSetIndexFiltersMode;
    Object.defineProperty(exports, "IndexFiltersMode", {
      enumerable: !0,
      get: function() {
        return types$2.IndexFiltersMode;
      }
    });
    exports.IndexTable = IndexTable.IndexTable;
    exports.Indicator = Indicator.Indicator;
    exports.InlineStack = InlineStack3.InlineStack;
    exports.InlineCode = InlineCode.InlineCode;
    exports.InlineError = InlineError.InlineError;
    exports.errorTextID = InlineError.errorTextID;
    exports.KeyboardKey = KeyboardKey.KeyboardKey;
    exports.KeypressListener = KeypressListener.KeypressListener;
    exports.Label = Label.Label;
    exports.labelID = Label.labelID;
    exports.Labelled = Labelled.Labelled;
    exports.Layout = Layout2.Layout;
    exports.LegacyCard = LegacyCard.LegacyCard;
    exports.LegacyFilters = LegacyFilters.LegacyFilters;
    exports.LegacyStack = LegacyStack.LegacyStack;
    exports.LegacyTabs = LegacyTabs.LegacyTabs;
    exports.Link = Link.Link;
    exports.List = List.List;
    Object.defineProperty(exports, "AutoSelection", {
      enumerable: !0,
      get: function() {
        return Listbox.AutoSelection;
      }
    });
    exports.Listbox = Listbox.Listbox;
    exports.Loading = Loading.Loading;
    exports.MediaCard = MediaCard.MediaCard;
    exports.Modal = Modal3.Modal;
    exports.Navigation = Navigation.Navigation;
    exports.isNavigationItemActive = Item.isNavigationItemActive;
    exports.OptionList = OptionList.OptionList;
    exports.Page = Page2.Page;
    exports.PageActions = PageActions.PageActions;
    exports.Pagination = Pagination.Pagination;
    exports.AlphaPicker = Picker.Picker;
    exports.PolarisTestProvider = PolarisTestProvider.PolarisTestProvider;
    exports.Popover = Popover.Popover;
    Object.defineProperty(exports, "PopoverCloseSource", {
      enumerable: !0,
      get: function() {
        return PopoverOverlay.PopoverCloseSource;
      }
    });
    exports.Portal = Portal.Portal;
    exports.PortalsManager = PortalsManager.PortalsManager;
    exports.PositionedOverlay = PositionedOverlay.PositionedOverlay;
    exports.ProgressBar = ProgressBar3.ProgressBar;
    exports.RadioButton = RadioButton.RadioButton;
    exports.RangeSlider = RangeSlider.RangeSlider;
    exports.ResourceItem = ResourceItem.ResourceItem;
    exports.ResourceList = ResourceList.ResourceList;
    exports.Scrollable = Scrollable.Scrollable;
    exports.ScrollLock = ScrollLock.ScrollLock;
    exports.Select = Select2.Select;
    exports.SelectAllActions = SelectAllActions.SelectAllActions;
    exports.SettingToggle = SettingToggle.SettingToggle;
    exports.Sheet = Sheet.Sheet;
    exports.SkeletonBodyText = SkeletonBodyText.SkeletonBodyText;
    exports.SkeletonDisplayText = SkeletonDisplayText.SkeletonDisplayText;
    exports.SkeletonPage = SkeletonPage.SkeletonPage;
    exports.SkeletonTabs = SkeletonTabs.SkeletonTabs;
    exports.SkeletonThumbnail = SkeletonThumbnail.SkeletonThumbnail;
    exports.Spinner = Spinner2.Spinner;
    exports.Sticky = Sticky.Sticky;
    exports.Tabs = Tabs.Tabs;
    exports.Tag = Tag.Tag;
    exports.Text = Text3.Text;
    exports.TextContainer = TextContainer.TextContainer;
    exports.TextField = TextField2.TextField;
    exports.Thumbnail = Thumbnail.Thumbnail;
    exports.Toast = Toast$1.Toast;
    exports.Tooltip = Tooltip.Tooltip;
    exports.TopBar = TopBar.TopBar;
    exports.TrapFocus = TrapFocus.TrapFocus;
    exports.Truncate = Truncate.Truncate;
    exports.UnstyledButton = UnstyledButton.UnstyledButton;
    exports.unstyledButtonFrom = utils$1.unstyledButtonFrom;
    exports.UnstyledLink = UnstyledLink.UnstyledLink;
    exports.BlockStack = BlockStack3.BlockStack;
    exports.VideoThumbnail = VideoThumbnail.VideoThumbnail;
    exports.useFrame = hooks.useFrame;
    exports.FrameContext = context.FrameContext;
    exports._SECRET_INTERNAL_SCROLL_LOCK_MANAGER_CONTEXT = context$1.ScrollLockManagerContext;
    exports.useIndexTableContainerScroll = hooks$1.useContainerScroll;
    exports.useIndexTableRowHovered = hooks$1.useRowHovered;
    exports.useIndexTableRowSelected = hooks$1.useRowSelected;
    exports.INDEX_TABLE_SELECT_ALL_ITEMS = types$3.SELECT_ALL_ITEMS;
    Object.defineProperty(exports, "IndexTableSelectionType", {
      enumerable: !0,
      get: function() {
        return types$3.SelectionType;
      }
    });
    exports.useEphemeralPresenceManager = hooks$2.useReadOnlyEphemeralPresenceManager;
  }
});

// <stdin>
var stdin_exports = {};
__export(stdin_exports, {
  assets: () => assets_manifest_default,
  assetsBuildDirectory: () => assetsBuildDirectory,
  entry: () => entry,
  future: () => future,
  mode: () => mode,
  publicPath: () => publicPath,
  routes: () => routes
});
module.exports = __toCommonJS(stdin_exports);

// app/entry.server.tsx
var entry_server_exports = {};
__export(entry_server_exports, {
  default: () => handleRequest
});
var import_node_stream = require("node:stream"), import_node = require("@remix-run/node"), import_react = require("@remix-run/react"), import_isbot = require("isbot"), import_server = require("react-dom/server");

// app/utils/queue.ts
var import_bullmq = require("bullmq"), import_ioredis = require("ioredis");
init_db();

// app/utils/healthChecker.ts
init_db();

// app/utils/emailService.ts
init_db();
var _EmailService = class {
  isConfigured = !1;
  constructor() {
    this.isConfigured = !!(process.env.SMTP_HOST && process.env.SMTP_PORT && process.env.SMTP_USER && process.env.SMTP_PASS);
  }
  static getInstance() {
    return _EmailService.instance || (_EmailService.instance = new _EmailService()), _EmailService.instance;
  }
  async sendWeeklyHealthSummary(summary) {
    try {
      if (!this.isConfigured)
        return console.log("Email service not configured - logging summary instead"), await this.logSummary(summary), !0;
      let template = this.generateWeeklyHealthTemplate(summary), emailAddress = await this.getUserEmailAddress(summary.userId);
      return emailAddress ? (console.log("Would send email:", {
        to: emailAddress,
        subject: template.subject,
        html: template.html
      }), await db.log.create({
        data: {
          userId: summary.userId,
          type: "email_sent",
          message: `Weekly health summary sent to ${emailAddress}`,
          metadata: {
            subject: template.subject,
            currentScore: summary.currentScore,
            scoreChange: summary.scoreChange,
            issuesFound: summary.issuesFound,
            issuesFixed: summary.issuesFixed
          }
        }
      }), !0) : (console.log("No email address found for user - logging summary instead"), await this.logSummary(summary), !0);
    } catch (error) {
      return console.error("Failed to send weekly health summary:", error), await db.log.create({
        data: {
          userId: summary.userId,
          type: "error",
          message: `Failed to send weekly health summary: ${error instanceof Error ? error.message : "Unknown error"}`,
          error: error instanceof Error ? error.message : "Unknown error"
        }
      }), !1;
    }
  }
  async getUserEmailAddress(userId) {
    try {
      let user = await db.user.findUnique({
        where: { id: userId },
        select: { shopDomain: !0 }
      });
      return user ? `admin@${user.shopDomain.replace(".myshopify.com", "")}.myshopify.com` : null;
    } catch (error) {
      return console.error("Failed to get user email address:", error), null;
    }
  }
  generateWeeklyHealthTemplate(summary) {
    let scoreTrend = summary.scoreChange >= 0 ? "\u{1F4C8}" : "\u{1F4C9}", scoreColor = summary.scoreChange >= 0 ? "#00a047" : "#d82c0d", html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Weekly Health Summary - ${summary.shopDomain}</title>
        <style>
          body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 10px 10px 0 0; text-align: center; }
          .content { background: #fff; padding: 30px; border: 1px solid #e1e5e9; }
          .score-card { background: #f8f9fa; border-radius: 8px; padding: 20px; margin: 20px 0; text-align: center; }
          .score-number { font-size: 48px; font-weight: bold; color: ${scoreColor}; margin: 10px 0; }
          .trend { font-size: 18px; color: ${scoreColor}; }
          .stats { display: flex; justify-content: space-around; margin: 20px 0; }
          .stat { text-align: center; }
          .stat-number { font-size: 24px; font-weight: bold; color: #667eea; }
          .stat-label { color: #666; font-size: 14px; }
          .footer { background: #f8f9fa; padding: 20px; text-align: center; border-radius: 0 0 10px 10px; font-size: 14px; color: #666; }
          .cta-button { display: inline-block; background: #667eea; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 20px 0; }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>\u{1F3E5} Catalog Health Report</h1>
          <p>Weekly summary for ${summary.shopDomain}</p>
        </div>
        
        <div class="content">
          <div class="score-card">
            <div class="score-number">${summary.currentScore}%</div>
            <div class="trend">
              ${scoreTrend} ${summary.scoreChange >= 0 ? "+" : ""}${summary.scoreChange.toFixed(1)}% from last week
            </div>
            <p>Current Health Score</p>
          </div>
          
          <div class="stats">
            <div class="stat">
              <div class="stat-number">${summary.totalProducts}</div>
              <div class="stat-label">Total Products</div>
            </div>
            <div class="stat">
              <div class="stat-number">${summary.issuesFound}</div>
              <div class="stat-label">Issues Found</div>
            </div>
            <div class="stat">
              <div class="stat-number">${summary.issuesFixed}</div>
              <div class="stat-label">Issues Fixed</div>
            </div>
          </div>
          
          ${summary.currentScore < 90 ? `
            <div style="background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 6px; padding: 15px; margin: 20px 0;">
              <strong>\u26A0\uFE0F Attention Needed:</strong> Your catalog health is below 90%. Consider running a health check to identify and fix issues.
            </div>
          ` : `
            <div style="background: #d4edda; border: 1px solid #c3e6cb; border-radius: 6px; padding: 15px; margin: 20px 0;">
              <strong>\u2705 Great Job!</strong> Your catalog is in excellent health. Keep up the good work!
            </div>
          `}
          
          <div style="text-align: center; margin: 30px 0;">
            <a href="${process.env.SHOPIFY_APP_URL}/dashboard" class="cta-button">
              View Dashboard
            </a>
          </div>
        </div>
        
        <div class="footer">
          <p>This is an automated report from CatalogAI Optimizer.</p>
          <p>To adjust your email preferences, visit your dashboard settings.</p>
        </div>
      </body>
      </html>
    `, text = `
Catalog Health Report - ${summary.shopDomain}

Health Score: ${summary.currentScore}%
Trend: ${summary.scoreChange >= 0 ? "+" : ""}${summary.scoreChange.toFixed(1)}% from last week

Statistics:
- Total Products: ${summary.totalProducts}
- Issues Found: ${summary.issuesFound}
- Issues Fixed: ${summary.issuesFixed}

${summary.currentScore < 90 ? "\u26A0\uFE0F Your catalog health is below 90%. Consider running a health check to identify and fix issues." : "\u2705 Your catalog is in excellent health. Keep up the good work!"}

View your dashboard: ${process.env.SHOPIFY_APP_URL}/dashboard

---
This is an automated report from CatalogAI Optimizer.
To adjust your email preferences, visit your dashboard settings.
    `;
    return {
      subject: `\u{1F4CA} Weekly Health Report: ${summary.currentScore}% (${summary.scoreChange >= 0 ? "+" : ""}${summary.scoreChange.toFixed(1)}%)`,
      html,
      text
    };
  }
  async logSummary(summary) {
    await db.log.create({
      data: {
        userId: summary.userId,
        type: "email_summary",
        message: `Weekly health summary: ${summary.currentScore}% (${summary.scoreChange >= 0 ? "+" : ""}${summary.scoreChange.toFixed(1)}%) - ${summary.issuesFound} issues found, ${summary.issuesFixed} fixed`,
        metadata: {
          currentScore: summary.currentScore,
          previousScore: summary.previousScore,
          scoreChange: summary.scoreChange,
          totalProducts: summary.totalProducts,
          issuesFound: summary.issuesFound,
          issuesFixed: summary.issuesFixed
        }
      }
    });
  }
  async sendHealthAlert(userId, shopDomain, alertType, message) {
    try {
      if (!this.isConfigured)
        return console.log("Email service not configured - logging alert instead"), await this.logAlert(userId, alertType, message), !0;
      let emailAddress = await this.getUserEmailAddress(userId);
      if (!emailAddress)
        return console.log("No email address found for user - logging alert instead"), await this.logAlert(userId, alertType, message), !0;
      let template = this.generateHealthAlertTemplate(shopDomain, alertType, message);
      return console.log("Would send health alert:", {
        to: emailAddress,
        subject: template.subject,
        html: template.html
      }), await db.log.create({
        data: {
          userId,
          type: "health_alert",
          message: `Health alert sent: ${message}`,
          metadata: {
            alertType,
            message
          }
        }
      }), !0;
    } catch (error) {
      return console.error("Failed to send health alert:", error), !1;
    }
  }
  generateHealthAlertTemplate(shopDomain, alertType, message) {
    let isCritical = alertType === "critical", color = isCritical ? "#d82c0d" : "#f59e0b", icon = isCritical ? "\u{1F6A8}" : "\u26A0\uFE0F", html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Health Alert - ${shopDomain}</title>
        <style>
          body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background: ${color}; color: white; padding: 30px; border-radius: 10px 10px 0 0; text-align: center; }
          .content { background: #fff; padding: 30px; border: 1px solid #e1e5e9; }
          .alert-box { background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 6px; padding: 20px; margin: 20px 0; }
          .cta-button { display: inline-block; background: ${color}; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 20px 0; }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>${icon} Health Alert</h1>
          <p>${shopDomain}</p>
        </div>
        
        <div class="content">
          <div class="alert-box">
            <h3>${isCritical ? "Critical Issue Detected" : "Warning"}</h3>
            <p>${message}</p>
          </div>
          
          <div style="text-align: center; margin: 30px 0;">
            <a href="${process.env.SHOPIFY_APP_URL}/dashboard" class="cta-button">
              View Dashboard
            </a>
          </div>
        </div>
      </body>
      </html>
    `, text = `
${icon} Health Alert - ${shopDomain}

${isCritical ? "Critical Issue Detected" : "Warning"}

${message}

View your dashboard: ${process.env.SHOPIFY_APP_URL}/dashboard
    `;
    return {
      subject: `${icon} ${isCritical ? "Critical" : "Warning"}: ${shopDomain}`,
      html,
      text
    };
  }
  async logAlert(userId, alertType, message) {
    await db.log.create({
      data: {
        userId,
        type: "health_alert",
        message: `Health alert (${alertType}): ${message}`,
        metadata: {
          alertType,
          message
        }
      }
    });
  }
}, EmailService = _EmailService;
__publicField(EmailService, "instance");
var emailService = EmailService.getInstance();

// app/utils/analyticsService.ts
init_db();
var _AnalyticsService = class {
  static getInstance() {
    return _AnalyticsService.instance || (_AnalyticsService.instance = new _AnalyticsService()), _AnalyticsService.instance;
  }
  async trackPerformanceMetrics(metrics) {
    try {
      await db.log.create({
        data: {
          userId: metrics.userId,
          type: "performance_metrics",
          message: `Performance tracked: ${metrics.healthScore}% health, ${metrics.totalProducts} products, ${metrics.issuesFound} issues`,
          metadata: {
            healthScore: metrics.healthScore,
            totalProducts: metrics.totalProducts,
            validProducts: metrics.validProducts,
            issuesFound: metrics.issuesFound,
            issuesFixed: metrics.issuesFixed,
            aiUsage: metrics.aiUsage,
            syncCount: metrics.syncCount,
            enrichmentCount: metrics.enrichmentCount,
            timestamp: metrics.timestamp
          }
        }
      });
      let deltaMetrics = await this.calculateDeltaMetrics(metrics.userId, metrics.timestamp);
      deltaMetrics && await this.storeDeltaMetrics(metrics.userId, deltaMetrics);
      let roiMetrics = await this.calculateROIMetrics(metrics.userId, metrics.shopDomain);
      roiMetrics && await this.storeROIMetrics(roiMetrics);
    } catch (error) {
      console.error("Failed to track performance metrics:", error);
    }
  }
  async calculateDeltaMetrics(userId, currentTimestamp) {
    try {
      let hourAgo = new Date(currentTimestamp.getTime() - 36e5), dayAgo = new Date(currentTimestamp.getTime() - 24 * 60 * 60 * 1e3), weekAgo = new Date(currentTimestamp.getTime() - 7 * 24 * 60 * 60 * 1e3), currentMetrics = await this.getLatestMetrics(userId);
      if (!currentMetrics)
        return null;
      let previousMetrics = await this.getPreviousMetrics(userId, dayAgo);
      if (!previousMetrics)
        return null;
      let scoreDelta = currentMetrics.healthScore - previousMetrics.healthScore, productsDelta = currentMetrics.totalProducts - previousMetrics.totalProducts, issuesDelta = currentMetrics.issuesFound - previousMetrics.issuesFound, aiUsageDelta = currentMetrics.aiUsage - previousMetrics.aiUsage, syncDelta = currentMetrics.syncCount - previousMetrics.syncCount, enrichmentDelta = currentMetrics.enrichmentCount - previousMetrics.enrichmentCount;
      return {
        scoreDelta,
        productsDelta,
        issuesDelta,
        aiUsageDelta,
        syncDelta,
        enrichmentDelta,
        timePeriod: "day"
      };
    } catch (error) {
      return console.error("Failed to calculate delta metrics:", error), null;
    }
  }
  async getLatestMetrics(userId) {
    try {
      let latestAudit = await db.audit.findFirst({
        where: { userId },
        orderBy: { timestamp: "desc" }
      }), user = await db.user.findUnique({
        where: { id: userId }
      });
      if (!latestAudit || !user)
        return null;
      let oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1e3), syncCount = await db.log.count({
        where: {
          userId,
          type: "sync",
          createdAt: { gte: oneDayAgo }
        }
      }), enrichmentCount = await db.log.count({
        where: {
          userId,
          type: "ai_enrichment",
          createdAt: { gte: oneDayAgo }
        }
      });
      return {
        userId,
        shopDomain: user.shopDomain,
        timestamp: latestAudit.timestamp,
        healthScore: latestAudit.score,
        totalProducts: latestAudit.totalProducts,
        validProducts: latestAudit.validProducts,
        issuesFound: Array.isArray(latestAudit.gaps) ? latestAudit.gaps.length : 0,
        issuesFixed: 0,
        // Will be calculated separately
        aiUsage: user.aiUsage,
        syncCount,
        enrichmentCount
      };
    } catch (error) {
      return console.error("Failed to get latest metrics:", error), null;
    }
  }
  async getPreviousMetrics(userId, fromDate) {
    try {
      let audit = await db.audit.findFirst({
        where: {
          userId,
          timestamp: { gte: fromDate }
        },
        orderBy: { timestamp: "asc" }
      }), user = await db.user.findUnique({
        where: { id: userId }
      });
      return !audit || !user ? null : {
        userId,
        shopDomain: user.shopDomain,
        timestamp: audit.timestamp,
        healthScore: audit.score,
        totalProducts: audit.totalProducts,
        validProducts: audit.validProducts,
        issuesFound: Array.isArray(audit.gaps) ? audit.gaps.length : 0,
        issuesFixed: 0,
        aiUsage: user.aiUsage,
        syncCount: 0,
        enrichmentCount: 0
      };
    } catch (error) {
      return console.error("Failed to get previous metrics:", error), null;
    }
  }
  async storeDeltaMetrics(userId, deltaMetrics) {
    try {
      await db.log.create({
        data: {
          userId,
          type: "delta_metrics",
          message: `Delta metrics: ${deltaMetrics.scoreDelta >= 0 ? "+" : ""}${deltaMetrics.scoreDelta.toFixed(1)}% score, ${deltaMetrics.productsDelta >= 0 ? "+" : ""}${deltaMetrics.productsDelta} products`,
          metadata: {
            scoreDelta: deltaMetrics.scoreDelta,
            productsDelta: deltaMetrics.productsDelta,
            issuesDelta: deltaMetrics.issuesDelta,
            aiUsageDelta: deltaMetrics.aiUsageDelta,
            syncDelta: deltaMetrics.syncCount,
            enrichmentDelta: deltaMetrics.enrichmentDelta,
            timePeriod: deltaMetrics.timePeriod
          }
        }
      });
    } catch (error) {
      console.error("Failed to store delta metrics:", error);
    }
  }
  async calculateROIMetrics(userId, shopDomain) {
    try {
      let oneWeekAgo = new Date(Date.now() - 6048e5), audits = await db.audit.findMany({
        where: {
          userId,
          timestamp: { gte: oneWeekAgo }
        },
        orderBy: { timestamp: "asc" }
      });
      if (audits.length < 2)
        return null;
      let firstAudit = audits[0], lastAudit = audits[audits.length - 1], user = await db.user.findUnique({
        where: { id: userId }
      });
      if (!user)
        return null;
      let aiTokensUsed = user.aiUsage, healthScoreImprovement = lastAudit.score - firstAudit.score, productsProcessed = lastAudit.totalProducts, estimatedValueAdded = healthScoreImprovement * productsProcessed * 0.1, tokenCost = aiTokensUsed * 1e-4, costPerImprovement = tokenCost / Math.max(healthScoreImprovement, 1), roi = estimatedValueAdded / Math.max(tokenCost, 1);
      return {
        userId,
        shopDomain,
        timePeriod: "week",
        healthScoreImprovement,
        productsProcessed,
        aiTokensUsed,
        estimatedValueAdded,
        costPerImprovement,
        roi
      };
    } catch (error) {
      return console.error("Failed to calculate ROI metrics:", error), null;
    }
  }
  async storeROIMetrics(roiMetrics) {
    try {
      await db.log.create({
        data: {
          userId: roiMetrics.userId,
          type: "roi_metrics",
          message: `ROI: ${roiMetrics.roi.toFixed(2)}x return, $${roiMetrics.estimatedValueAdded.toFixed(2)} value added`,
          metadata: {
            healthScoreImprovement: roiMetrics.healthScoreImprovement,
            productsProcessed: roiMetrics.productsProcessed,
            aiTokensUsed: roiMetrics.aiTokensUsed,
            estimatedValueAdded: roiMetrics.estimatedValueAdded,
            costPerImprovement: roiMetrics.costPerImprovement,
            roi: roiMetrics.roi,
            timePeriod: roiMetrics.timePeriod
          }
        }
      });
    } catch (error) {
      console.error("Failed to store ROI metrics:", error);
    }
  }
  async getPerformanceTrends(userId, days = 30) {
    try {
      let startDate = new Date(Date.now() - days * 24 * 60 * 60 * 1e3), audits = await db.audit.findMany({
        where: {
          userId,
          timestamp: { gte: startDate }
        },
        orderBy: { timestamp: "asc" }
      }), user = await db.user.findUnique({
        where: { id: userId }
      });
      return audits.map((audit) => ({
        date: audit.timestamp.toISOString().split("T")[0],
        healthScore: audit.score,
        totalProducts: audit.totalProducts,
        issuesFound: Array.isArray(audit.gaps) ? audit.gaps.length : 0,
        aiUsage: user?.aiUsage || 0
      }));
    } catch (error) {
      return console.error("Failed to get performance trends:", error), [];
    }
  }
  async getROISummary(userId) {
    try {
      let roiLogs = await db.log.findMany({
        where: {
          userId,
          type: "roi_metrics"
        },
        orderBy: { createdAt: "desc" },
        take: 10
      });
      if (roiLogs.length === 0)
        return null;
      let totalValueAdded = 0, totalCost = 0, totalROI = 0;
      for (let log of roiLogs) {
        let metadata = log.metadata;
        metadata && (totalValueAdded += metadata.estimatedValueAdded || 0, totalCost += (metadata.aiTokensUsed || 0) * 1e-4, totalROI += metadata.roi || 0);
      }
      return {
        totalROI,
        totalValueAdded,
        totalCost,
        averageROI: totalROI / roiLogs.length
      };
    } catch (error) {
      return console.error("Failed to get ROI summary:", error), null;
    }
  }
}, AnalyticsService = _AnalyticsService;
__publicField(AnalyticsService, "instance");
var analyticsService = AnalyticsService.getInstance();

// app/utils/healthChecker.ts
var import_ajv = __toESM(require("ajv")), import_ajv_formats = __toESM(require("ajv-formats")), import_axios = __toESM(require("axios")), ajv = new import_ajv.default();
(0, import_ajv_formats.default)(ajv);
var HealthCheckerService = class {
  shopDomain;
  accessToken;
  constructor(shopDomain, accessToken) {
    this.shopDomain = shopDomain, this.accessToken = accessToken;
  }
  async performHealthCheck(options = {}) {
    let {
      maxProducts = 100,
      includePings = !0,
      includeInventory = !0,
      includeValidation = !0
    } = options;
    try {
      let user = await db.user.findUnique({
        where: { shopId: this.shopDomain }
      });
      if (!user)
        throw new Error("User not found");
      let thirtyDaysAgo = /* @__PURE__ */ new Date();
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
      let products = await db.product.findMany({
        where: {
          userId: user.id,
          updatedAt: {
            gte: thirtyDaysAgo
          }
        },
        take: maxProducts,
        orderBy: {
          updatedAt: "desc"
        }
      }), gaps = [], validProducts = 0;
      if (includeValidation) {
        let validationResults = await this.validateProducts(products);
        gaps.push(...validationResults.gaps), validProducts = validationResults.validCount;
      }
      if (includePings) {
        let pingResults = await this.checkProductUrls(products.slice(0, 20));
        gaps.push(...pingResults);
      }
      if (includeInventory) {
        let inventoryResults = await this.checkInventoryDeltas(products);
        gaps.push(...inventoryResults);
      }
      let score = this.calculateHealthScore(products.length, validProducts, gaps), trends = await this.getHealthTrends(user.id, 7);
      await db.audit.create({
        data: {
          userId: user.id,
          score,
          totalProducts: products.length,
          validProducts,
          gaps,
          // Store as JSON
          timestamp: /* @__PURE__ */ new Date()
        }
      });
      let performanceMetrics = {
        userId: user.id,
        shopDomain: this.shopDomain,
        timestamp: /* @__PURE__ */ new Date(),
        healthScore: score,
        totalProducts: products.length,
        validProducts,
        issuesFound: gaps.length,
        issuesFixed: 0,
        // Will be updated after auto-fix
        aiUsage: user.aiUsage,
        syncCount: 0,
        // Will be calculated separately
        enrichmentCount: 0
        // Will be calculated separately
      };
      return await analyticsService.trackPerformanceMetrics(performanceMetrics), {
        score,
        totalProducts: products.length,
        validProducts,
        gaps,
        trends,
        timestamp: /* @__PURE__ */ new Date()
      };
    } catch (error) {
      throw console.error("Health check failed:", error), new Error(`Health check failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  async validateProducts(products) {
    let gaps = [], validCount = 0, requiredFields = [
      "title",
      "description",
      "vendor",
      "productType",
      "tags",
      "images",
      "variants",
      "options",
      "status"
    ], fieldCounts = {}, missingFieldProducts = {};
    for (let product of products) {
      let isValid = !0;
      for (let field of requiredFields)
        (!product[field] || Array.isArray(product[field]) && product[field].length === 0 || typeof product[field] == "string" && product[field].trim() === "") && (fieldCounts[field] = (fieldCounts[field] || 0) + 1, missingFieldProducts[field] = missingFieldProducts[field] || [], missingFieldProducts[field].push(product.id), isValid = !1);
      isValid && validCount++;
    }
    for (let [field, count] of Object.entries(fieldCounts))
      if (count > 0) {
        let severity = count > products.length * 0.5 ? "critical" : count > products.length * 0.2 ? "error" : "warning";
        gaps.push({
          field,
          severity,
          count,
          products: missingFieldProducts[field],
          fixable: ["title", "description", "tags"].includes(field)
        });
      }
    return { gaps, validCount };
  }
  async checkProductUrls(products) {
    let gaps = [], failedUrls = [];
    for (let product of products)
      if (product.handle)
        try {
          let url = `https://${this.shopDomain}/products/${product.handle}`;
          (await import_axios.default.get(url, {
            timeout: 5e3,
            validateStatus: (status) => status < 500
            // Accept redirects and client errors
          })).status >= 400 && failedUrls.push(product.id);
        } catch {
          failedUrls.push(product.id);
        }
    return failedUrls.length > 0 && gaps.push({
      field: "product_url",
      severity: failedUrls.length > products.length * 0.3 ? "error" : "warning",
      count: failedUrls.length,
      products: failedUrls,
      fixable: !1
    }), gaps;
  }
  async checkInventoryDeltas(products) {
    let gaps = [], lowInventory = [], outOfStock = [];
    for (let product of products)
      if (product.variants && Array.isArray(product.variants))
        for (let variant of product.variants)
          variant.inventoryQuantity !== void 0 && (variant.inventoryQuantity === 0 ? outOfStock.push(variant.id) : variant.inventoryQuantity < 5 && lowInventory.push(variant.id));
    return outOfStock.length > 0 && gaps.push({
      field: "inventory_out_of_stock",
      severity: "error",
      count: outOfStock.length,
      products: outOfStock,
      fixable: !1
    }), lowInventory.length > 0 && gaps.push({
      field: "inventory_low",
      severity: "warning",
      count: lowInventory.length,
      products: lowInventory,
      fixable: !1
    }), gaps;
  }
  calculateHealthScore(totalProducts, validProducts, gaps) {
    if (totalProducts === 0)
      return 100;
    let score = validProducts / totalProducts * 100;
    for (let gap of gaps) {
      let penalty = gap.severity === "critical" ? 5 : gap.severity === "error" ? 3 : 1;
      score -= Math.min(penalty * (gap.count / totalProducts), 10);
    }
    return Math.max(0, Math.round(score));
  }
  async getHealthTrends(userId, days) {
    let startDate = /* @__PURE__ */ new Date();
    return startDate.setDate(startDate.getDate() - days), (await db.audit.findMany({
      where: {
        userId,
        timestamp: {
          gte: startDate
        }
      },
      orderBy: {
        timestamp: "asc"
      }
    })).map((audit) => ({
      date: audit.timestamp.toISOString().split("T")[0],
      score: audit.score,
      totalProducts: audit.totalProducts,
      validProducts: audit.validProducts
    }));
  }
  async autoFixGaps(gaps) {
    let fixed = 0, failed = 0;
    for (let gap of gaps)
      if (gap.fixable)
        try {
          console.log(`Auto-fixing gap: ${gap.field} for ${gap.count} products`), fixed++;
        } catch (error) {
          console.error(`Failed to fix gap ${gap.field}:`, error), failed++;
        }
    return { fixed, failed };
  }
  async sendWeeklyHealthSummary(userId) {
    try {
      let fourteenDaysAgo = /* @__PURE__ */ new Date();
      fourteenDaysAgo.setDate(fourteenDaysAgo.getDate() - 14);
      let audits = await db.audit.findMany({
        where: {
          userId,
          timestamp: {
            gte: fourteenDaysAgo
          }
        },
        orderBy: {
          timestamp: "desc"
        }
      });
      if (audits.length === 0)
        return console.log("No audit data available for weekly summary"), !1;
      let currentAudit = audits[0], previousAudit = audits[audits.length - 1] || currentAudit, oneWeekAgo = /* @__PURE__ */ new Date();
      oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
      let fixedIssues = await db.log.count({
        where: {
          userId,
          type: "auto_fix",
          createdAt: {
            gte: oneWeekAgo
          }
        }
      }), summary = {
        userId,
        shopDomain: this.shopDomain,
        currentScore: currentAudit.score,
        previousScore: previousAudit.score,
        scoreChange: currentAudit.score - previousAudit.score,
        totalProducts: currentAudit.totalProducts,
        issuesFound: Array.isArray(currentAudit.gaps) ? currentAudit.gaps.length : 0,
        issuesFixed: fixedIssues,
        trendData: audits.slice(0, 7).map((audit) => ({
          date: audit.timestamp.toISOString().split("T")[0],
          score: audit.score
        }))
      };
      return await emailService.sendWeeklyHealthSummary(summary);
    } catch (error) {
      return console.error("Failed to send weekly health summary:", error), !1;
    }
  }
  async sendHealthAlert(userId, alertType, message) {
    return await emailService.sendHealthAlert(userId, this.shopDomain, alertType, message);
  }
};

// app/utils/queue.ts
var redis = null;
try {
  console.log("Checking Redis configuration:", {
    redisHost: process.env.REDIS_HOST,
    redisPort: process.env.REDIS_PORT,
    hasRedisPassword: !!process.env.REDIS_PASSWORD,
    allEnvVars: Object.keys(process.env).filter((key) => key.startsWith("REDIS"))
  }), process.env.REDIS_URL ? (console.log("Attempting Redis connection using REDIS_URL:", process.env.REDIS_URL.replace(/\/\/default:[^@]+@/, "//default:***@")), redis = new import_ioredis.Redis(process.env.REDIS_URL, {
    maxRetriesPerRequest: null,
    // Required by BullMQ for blocking operations
    connectTimeout: 5e3,
    // 5 second timeout
    lazyConnect: !0,
    // Don't connect immediately
    db: 0
    // Force database 0 (default)
  })) : process.env.REDIS_HOST && process.env.REDIS_PASSWORD ? (console.log("Attempting Redis connection to:", process.env.REDIS_HOST), redis = new import_ioredis.Redis({
    host: process.env.REDIS_HOST,
    port: parseInt(process.env.REDIS_PORT || "6379"),
    password: process.env.REDIS_PASSWORD,
    maxRetriesPerRequest: null,
    // Required by BullMQ for blocking operations
    connectTimeout: 5e3,
    // 5 second timeout
    lazyConnect: !0,
    // Don't connect immediately
    db: 0
    // Force database 0 (default)
  })) : console.log("Redis not configured - skipping connection"), redis && redis.connect().then(() => {
    console.log("\u2705 Redis connected successfully");
  }).catch((error) => {
    console.error("\u274C Redis connection failed:", error.message), redis = null;
  });
} catch (error) {
  console.error("Failed to initialize Redis connection:", error), redis = null;
}
var bullmqQueueConnection = null, bullmqWorkerConnection = null, bullmqEventsConnection = null;
if (redis)
  try {
    let connectionConfig = null;
    if (process.env.REDIS_URL) {
      let cleanRedisUrl = process.env.REDIS_URL.replace(/['"]+$/, "");
      console.log("Cleaned REDIS_URL:", cleanRedisUrl.replace(/\/\/default:[^@]+@/, "//default:***@"));
      let url = new URL(cleanRedisUrl);
      connectionConfig = {
        host: url.hostname,
        port: parseInt(url.port) || 6379,
        password: url.password,
        db: 0,
        // Explicitly force database 0
        maxRetriesPerRequest: null,
        retryDelayOnFailover: 100,
        connectTimeout: 5e3,
        lazyConnect: !0,
        enableAutoPipelining: !1
      };
    } else
      process.env.REDIS_HOST && process.env.REDIS_PASSWORD && (connectionConfig = {
        host: process.env.REDIS_HOST,
        port: parseInt(process.env.REDIS_PORT || "6379"),
        password: process.env.REDIS_PASSWORD,
        db: 0,
        // Explicitly force database 0
        maxRetriesPerRequest: null,
        retryDelayOnFailover: 100,
        connectTimeout: 5e3,
        lazyConnect: !0,
        enableAutoPipelining: !1
      });
    connectionConfig && (bullmqQueueConnection = new import_ioredis.Redis(connectionConfig), bullmqWorkerConnection = new import_ioredis.Redis(connectionConfig), bullmqEventsConnection = new import_ioredis.Redis(connectionConfig), bullmqQueueConnection.on("connect", () => {
      console.log("BullMQ Queue Redis connected to database:", bullmqQueueConnection?.options.db);
    }), bullmqWorkerConnection.on("connect", () => {
      console.log("BullMQ Worker Redis connected to database:", bullmqWorkerConnection?.options.db);
    }), bullmqEventsConnection.on("connect", () => {
      console.log("BullMQ Events Redis connected to database:", bullmqEventsConnection?.options.db);
    }), console.log("BullMQ Redis connections created with database 0"));
  } catch (error) {
    console.error("Failed to create BullMQ Redis connections:", error), bullmqQueueConnection = null, bullmqWorkerConnection = null, bullmqEventsConnection = null;
  }
var healthCheckQueue = bullmqQueueConnection ? new import_bullmq.Queue("health-checks", {
  connection: bullmqQueueConnection,
  defaultJobOptions: {
    removeOnComplete: 10,
    removeOnFail: 5,
    attempts: 3,
    backoff: {
      type: "exponential",
      delay: 2e3
    }
  }
}) : null, backgroundJobsQueue = bullmqQueueConnection ? new import_bullmq.Queue("background-jobs", {
  connection: bullmqQueueConnection,
  defaultJobOptions: {
    removeOnComplete: 50,
    removeOnFail: 10,
    attempts: 2,
    backoff: {
      type: "exponential",
      delay: 5e3
    }
  }
}) : null, queueEvents = bullmqEventsConnection ? new import_bullmq.QueueEvents("health-checks", { connection: bullmqEventsConnection }) : null, healthCheckWorker = bullmqWorkerConnection ? new import_bullmq.Worker(
  "health-checks",
  async (job) => {
    let { type, data } = job.data;
    switch (type) {
      case "url-ping":
        return await performUrlPing(data);
      case "inventory-validation":
        return await performInventoryValidation(data);
      case "database-health":
        return await performDatabaseHealthCheck(data);
      case "api-status":
        return await performApiStatusCheck(data);
      case "health-scan":
        return await performHealthScan(data);
      default:
        throw new Error(`Unknown health check type: ${type}`);
    }
  },
  {
    connection: bullmqWorkerConnection,
    concurrency: 5
  }
) : null, backgroundJobsWorker = bullmqWorkerConnection ? new import_bullmq.Worker(
  "background-jobs",
  async (job) => {
    let { type, data } = job.data;
    switch (type) {
      case "sync-products":
        return await performProductSync(data);
      case "ai-enrichment":
        return await performAIEnrichment(data);
      case "cleanup-logs":
        return await performLogCleanup(data);
      case "weekly-email-summary":
        return await performWeeklyEmailSummary(data);
      default:
        throw new Error(`Unknown background job type: ${type}`);
    }
  },
  {
    connection: bullmqWorkerConnection,
    concurrency: 3
  }
) : null;
async function performUrlPing(data) {
  try {
    let response = await fetch(data.url, {
      method: "HEAD",
      signal: AbortSignal.timeout(data.timeout || 5e3)
    });
    return {
      success: response.ok,
      status: response.status,
      responseTime: Date.now(),
      url: data.url
    };
  } catch (error) {
    return {
      success: !1,
      error: error instanceof Error ? error.message : "Unknown error",
      url: data.url
    };
  }
}
async function performInventoryValidation(data) {
  try {
    let user = await db.user.findUnique({
      where: { shopId: data.shopId },
      include: {
        audits: {
          orderBy: { timestamp: "desc" },
          take: 1
        }
      }
    });
    if (!user)
      return {
        success: !1,
        error: "User not found",
        shopId: data.shopId
      };
    let latestAudit = user.audits[0];
    return {
      success: !0,
      hasRecentSync: latestAudit && Date.now() - new Date(latestAudit.timestamp).getTime() < 24 * 60 * 60 * 1e3,
      totalProducts: latestAudit?.totalProducts || 0,
      lastSync: latestAudit?.timestamp || null,
      shopId: data.shopId
    };
  } catch (error) {
    return {
      success: !1,
      error: error instanceof Error ? error.message : "Database error",
      shopId: data.shopId
    };
  }
}
async function performDatabaseHealthCheck(data) {
  try {
    return await db.$queryRaw`SELECT 1`, {
      success: !0,
      userCount: await db.user.count(),
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    };
  } catch (error) {
    return {
      success: !1,
      error: error instanceof Error ? error.message : "Database connection failed"
    };
  }
}
async function performApiStatusCheck(data) {
  try {
    return {
      success: !0,
      shopId: data.shopId,
      apiVersion: "2025-10",
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    };
  } catch (error) {
    return {
      success: !1,
      error: error instanceof Error ? error.message : "API check failed",
      shopId: data.shopId
    };
  }
}
async function performProductSync(data) {
  try {
    return await db.log.create({
      data: {
        userId: data.userId,
        type: "sync",
        message: `Product sync initiated for shop ${data.shopId}`
      }
    }), {
      success: !0,
      shopId: data.shopId,
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    };
  } catch (error) {
    return {
      success: !1,
      error: error instanceof Error ? error.message : "Sync failed",
      shopId: data.shopId
    };
  }
}
async function performAIEnrichment(data) {
  try {
    return await db.log.create({
      data: {
        userId: data.userId,
        type: "ai_enrichment",
        message: `AI enrichment initiated for ${data.productIds.length} products`
      }
    }), {
      success: !0,
      shopId: data.shopId,
      productCount: data.productIds.length,
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    };
  } catch (error) {
    return {
      success: !1,
      error: error instanceof Error ? error.message : "AI enrichment failed",
      shopId: data.shopId
    };
  }
}
async function performLogCleanup(data) {
  try {
    let daysToKeep = data.daysToKeep || 30, cutoffDate = /* @__PURE__ */ new Date();
    return cutoffDate.setDate(cutoffDate.getDate() - daysToKeep), {
      success: !0,
      deletedCount: (await db.log.deleteMany({
        where: {
          createdAt: {
            lt: cutoffDate
          }
        }
      })).count,
      cutoffDate: cutoffDate.toISOString()
    };
  } catch (error) {
    return {
      success: !1,
      error: error instanceof Error ? error.message : "Log cleanup failed"
    };
  }
}
async function performHealthScan(data) {
  try {
    let user = await db.user.findUnique({
      where: { shopId: data.shopId }
    });
    if (!user)
      throw new Error("User not found");
    let healthChecker = new HealthCheckerService(data.shopId, user.accessToken), result = await healthChecker.performHealthCheck(data.options || {
      maxProducts: 100,
      includePings: !0,
      includeInventory: !0,
      includeValidation: !0
    });
    if (await db.log.create({
      data: {
        userId: data.userId,
        type: "health_scan",
        message: `Health scan completed: ${result.score}% score, ${result.gaps.length} gaps found`,
        metadata: {
          score: result.score,
          totalProducts: result.totalProducts,
          validProducts: result.validProducts,
          gapsCount: result.gaps.length
        }
      }
    }), result.score < 90 && result.gaps.length > 0) {
      let fixableGaps = result.gaps.filter((gap) => gap.fixable);
      if (fixableGaps.length > 0) {
        let fixResult = await healthChecker.autoFixGaps(fixableGaps);
        await db.log.create({
          data: {
            userId: data.userId,
            type: "auto_fix",
            message: `Auto-fixed ${fixResult.fixed} gaps, ${fixResult.failed} failed`,
            metadata: {
              fixed: fixResult.fixed,
              failed: fixResult.failed,
              originalScore: result.score
            }
          }
        });
        let user2 = await db.user.findUnique({
          where: { id: data.userId }
        });
        user2 && await analyticsService.trackPerformanceMetrics({
          userId: data.userId,
          shopDomain: data.shopId,
          timestamp: /* @__PURE__ */ new Date(),
          healthScore: result.score,
          totalProducts: result.totalProducts,
          validProducts: result.validProducts,
          issuesFound: result.gaps.length,
          issuesFixed: fixResult.fixed,
          aiUsage: user2.aiUsage,
          syncCount: 0,
          enrichmentCount: 0
        });
      }
    }
    return {
      success: !0,
      result,
      shopId: data.shopId,
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    };
  } catch (error) {
    return await db.log.create({
      data: {
        userId: data.userId,
        type: "error",
        message: `Health scan failed: ${error instanceof Error ? error.message : "Unknown error"}`,
        error: error instanceof Error ? error.message : "Unknown error"
      }
    }), {
      success: !1,
      error: error instanceof Error ? error.message : "Health scan failed",
      shopId: data.shopId
    };
  }
}
async function scheduleHealthChecks() {
  if (!healthCheckQueue || !backgroundJobsQueue) {
    console.log("Health checks skipped - queues not available");
    return;
  }
  try {
    await healthCheckQueue.add(
      "database-health",
      {},
      {
        repeat: { pattern: "*/5 * * * *" },
        jobId: "database-health-recurring"
      }
    ), await healthCheckQueue.add(
      "url-ping",
      { url: process.env.SHOPIFY_APP_URL + "/health" },
      {
        repeat: { pattern: "*/2 * * * *" },
        jobId: "url-ping-recurring"
      }
    ), await backgroundJobsQueue.add(
      "cleanup-logs",
      { daysToKeep: 30 },
      {
        repeat: { pattern: "0 2 * * *" },
        jobId: "log-cleanup-recurring"
      }
    ), await backgroundJobsQueue.add(
      "weekly-email-summary",
      {},
      {
        repeat: { pattern: "0 8 * * 1" },
        jobId: "weekly-email-summary-recurring"
      }
    ), console.log("Health checks scheduled successfully");
  } catch (error) {
    console.error("Failed to schedule health checks:", error);
  }
}
async function performWeeklyEmailSummary(data) {
  try {
    let validUsers = (data.userId ? [await db.user.findUnique({ where: { id: data.userId } })] : await db.user.findMany()).filter((user) => user !== null);
    for (let user of validUsers) {
      if (!user)
        continue;
      let success = await new HealthCheckerService(user.shopDomain, user.accessToken).sendWeeklyHealthSummary(user.id);
      await db.log.create({
        data: {
          userId: user.id,
          type: "weekly_email_summary",
          message: `Weekly email summary ${success ? "sent" : "failed"} for ${user.shopDomain}`,
          metadata: {
            success,
            shopDomain: user.shopDomain
          }
        }
      });
    }
    return {
      success: !0,
      usersProcessed: validUsers.length,
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    };
  } catch (error) {
    return {
      success: !1,
      error: error instanceof Error ? error.message : "Weekly email summary failed"
    };
  }
}
async function scheduleDailyHealthScans() {
  if (!healthCheckQueue) {
    console.log("Health scans skipped - queue not available");
    return;
  }
  try {
    let users = await db.user.findMany({
      select: {
        id: !0,
        shopId: !0,
        tier: !0
      }
    });
    for (let user of users)
      await healthCheckQueue.add(
        "health-scan",
        {
          shopId: user.shopId,
          userId: user.id,
          options: {
            maxProducts: user.tier === "enterprise" ? 500 : 100,
            includePings: !0,
            includeInventory: !0,
            includeValidation: !0
          }
        },
        {
          repeat: { pattern: "0 2 * * *" },
          jobId: `health-scan-${user.shopId}`
        }
      );
    console.log(`Daily health scans scheduled for ${users.length} users`);
  } catch (error) {
    console.error("Failed to schedule daily health scans:", error);
  }
}
healthCheckWorker && healthCheckWorker.on("error", (error) => {
  console.error("Health check worker error:", error);
});
backgroundJobsWorker && backgroundJobsWorker.on("error", (error) => {
  console.error("Background jobs worker error:", error);
});
queueEvents && queueEvents.on("error", (error) => {
  console.error("Queue events error:", error);
});

// app/entry.server.tsx
var import_jsx_dev_runtime = require("react/jsx-dev-runtime"), ABORT_DELAY = 5e3;
typeof global < "u" && !global.healthChecksInitialized && (setTimeout(() => {
  try {
    console.log("Checking Redis configuration:", {
      redisHost: process.env.REDIS_HOST,
      redisPort: process.env.REDIS_PORT,
      hasRedisPassword: !!process.env.REDIS_PASSWORD,
      allEnvVars: Object.keys(process.env).filter((key) => key.startsWith("REDIS"))
    }), process.env.REDIS_HOST && process.env.REDIS_PASSWORD ? (console.log("Redis configuration found - initializing health checks"), scheduleHealthChecks().catch((error) => {
      console.error("Failed to initialize health checks:", error);
    }), scheduleDailyHealthScans().catch((error) => {
      console.error("Failed to schedule daily health scans:", error);
    })) : console.log("Health checks skipped - Redis not configured");
  } catch (error) {
    console.error("Error during health check initialization:", error);
  }
}, 1e3), global.healthChecksInitialized = !0);
function handleRequest(request, responseStatusCode, responseHeaders, remixContext) {
  return (0, import_isbot.isbot)(request.headers.get("user-agent")) ? handleBotRequest(
    request,
    responseStatusCode,
    responseHeaders,
    remixContext
  ) : handleBrowserRequest(
    request,
    responseStatusCode,
    responseHeaders,
    remixContext
  );
}
function handleBotRequest(request, responseStatusCode, responseHeaders, remixContext) {
  return new Promise((resolve, reject) => {
    let shellRendered = !1, { pipe, abort } = (0, import_server.renderToPipeableStream)(
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(
        import_react.RemixServer,
        {
          context: remixContext,
          url: request.url,
          abortDelay: ABORT_DELAY
        },
        void 0,
        !1,
        {
          fileName: "app/entry.server.tsx",
          lineNumber: 74,
          columnNumber: 7
        },
        this
      ),
      {
        onAllReady() {
          shellRendered = !0;
          let body = new import_node_stream.PassThrough(), stream = (0, import_node.createReadableStreamFromReadable)(body);
          responseHeaders.set("Content-Type", "text/html"), responseHeaders.set("X-Frame-Options", "ALLOWALL"), responseHeaders.set("Content-Security-Policy", "frame-ancestors https://*.myshopify.com https://admin.shopify.com"), resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode
            })
          ), pipe(body);
        },
        onShellError(error) {
          reject(error);
        },
        onError(error) {
          responseStatusCode = 500, shellRendered && console.error(error);
        }
      }
    );
    setTimeout(abort, ABORT_DELAY);
  });
}
function handleBrowserRequest(request, responseStatusCode, responseHeaders, remixContext) {
  return new Promise((resolve, reject) => {
    let shellRendered = !1, { pipe, abort } = (0, import_server.renderToPipeableStream)(
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(
        import_react.RemixServer,
        {
          context: remixContext,
          url: request.url,
          abortDelay: ABORT_DELAY
        },
        void 0,
        !1,
        {
          fileName: "app/entry.server.tsx",
          lineNumber: 126,
          columnNumber: 7
        },
        this
      ),
      {
        onShellReady() {
          shellRendered = !0;
          let body = new import_node_stream.PassThrough(), stream = (0, import_node.createReadableStreamFromReadable)(body);
          responseHeaders.set("Content-Type", "text/html"), responseHeaders.set("X-Frame-Options", "ALLOWALL"), responseHeaders.set("Content-Security-Policy", "frame-ancestors https://*.myshopify.com https://admin.shopify.com"), resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode
            })
          ), pipe(body);
        },
        onShellError(error) {
          reject(error);
        },
        onError(error) {
          responseStatusCode = 500, shellRendered && console.error(error);
        }
      }
    );
    setTimeout(abort, ABORT_DELAY);
  });
}

// app/root.tsx
var root_exports = {};
__export(root_exports, {
  default: () => App,
  links: () => links,
  meta: () => meta
});
var import_react2 = require("@remix-run/react"), import_react3 = require("@remix-run/react"), import_react4 = __toESM(require_react()), import_jsx_dev_runtime2 = require("react/jsx-dev-runtime"), meta = () => [
  { title: "CatalogAI Optimizer" },
  { name: "description", content: "AI-powered Shopify catalog optimization" }
], links = () => [
  { rel: "stylesheet", href: "https://unpkg.com/@shopify/polaris@12.27.0/build/esm/styles.css" }
];
function AppLayout() {
  let location = (0, import_react3.useLocation)(), [shop, setShop] = (0, import_react4.useState)(null), [isClient, setIsClient] = (0, import_react4.useState)(!1);
  return (0, import_react4.useEffect)(() => {
    setIsClient(!0);
    let shopParam = new URLSearchParams(window.location.search).get("shop");
    setShop(shopParam);
  }, []), /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(import_jsx_dev_runtime2.Fragment, { children: [
    isClient && shop && /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("div", { style: {
      position: "fixed",
      left: 0,
      top: 0,
      width: "250px",
      height: "100vh",
      backgroundColor: "#f6f6f7",
      borderRight: "1px solid #e1e3e5",
      padding: "20px",
      zIndex: 1e3
    }, children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("div", { style: { marginBottom: "20px" }, children: /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("h3", { style: { margin: 0, fontSize: "16px", fontWeight: "600", color: "#202223" }, children: "Atlas: AI Store Builder" }, void 0, !1, {
        fileName: "app/root.tsx",
        lineNumber: 79,
        columnNumber: 13
      }, this) }, void 0, !1, {
        fileName: "app/root.tsx",
        lineNumber: 78,
        columnNumber: 11
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("nav", { children: [
        {
          label: "Dashboard",
          destination: "/"
        },
        {
          label: "Feed Validation",
          destination: "/validation"
        },
        {
          label: "AI Enrichment",
          destination: "/enrichment"
        },
        {
          label: "Intent Tagging",
          destination: "/tagging"
        },
        {
          label: "Settings",
          destination: "/settings"
        }
      ].map(
        (link) => /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("div", { style: { marginBottom: "8px" }, children: /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(
          "a",
          {
            href: link.destination,
            style: {
              display: "block",
              padding: "8px 12px",
              textDecoration: "none",
              color: location.pathname === link.destination ? "#008060" : "#202223",
              backgroundColor: location.pathname === link.destination ? "#f0f9f7" : "transparent",
              borderRadius: "4px",
              fontSize: "14px",
              fontWeight: location.pathname === link.destination ? "600" : "400",
              transition: "all 0.2s ease"
            },
            children: link.label
          },
          void 0,
          !1,
          {
            fileName: "app/root.tsx",
            lineNumber: 87,
            columnNumber: 17
          },
          this
        ) }, link.destination, !1, {
          fileName: "app/root.tsx",
          lineNumber: 86,
          columnNumber: 11
        }, this)
      ) }, void 0, !1, {
        fileName: "app/root.tsx",
        lineNumber: 84,
        columnNumber: 11
      }, this)
    ] }, void 0, !0, {
      fileName: "app/root.tsx",
      lineNumber: 67,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("div", { style: {
      marginLeft: isClient && shop ? "250px" : "0",
      transition: "margin-left 0.2s ease"
    }, children: /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(import_react2.Outlet, {}, void 0, !1, {
      fileName: "app/root.tsx",
      lineNumber: 114,
      columnNumber: 9
    }, this) }, void 0, !1, {
      fileName: "app/root.tsx",
      lineNumber: 110,
      columnNumber: 7
    }, this)
  ] }, void 0, !0, {
    fileName: "app/root.tsx",
    lineNumber: 64,
    columnNumber: 5
  }, this);
}
function App() {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("html", { lang: "en", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("head", { children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("meta", { charSet: "utf-8" }, void 0, !1, {
        fileName: "app/root.tsx",
        lineNumber: 124,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("meta", { name: "viewport", content: "width=device-width, initial-scale=1" }, void 0, !1, {
        fileName: "app/root.tsx",
        lineNumber: 125,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(import_react2.Meta, {}, void 0, !1, {
        fileName: "app/root.tsx",
        lineNumber: 126,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(import_react2.Links, {}, void 0, !1, {
        fileName: "app/root.tsx",
        lineNumber: 127,
        columnNumber: 9
      }, this)
    ] }, void 0, !0, {
      fileName: "app/root.tsx",
      lineNumber: 123,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("body", { children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(AppLayout, {}, void 0, !1, {
        fileName: "app/root.tsx",
        lineNumber: 130,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(import_react2.ScrollRestoration, {}, void 0, !1, {
        fileName: "app/root.tsx",
        lineNumber: 131,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(import_react2.Scripts, {}, void 0, !1, {
        fileName: "app/root.tsx",
        lineNumber: 132,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(import_react2.LiveReload, {}, void 0, !1, {
        fileName: "app/root.tsx",
        lineNumber: 133,
        columnNumber: 9
      }, this)
    ] }, void 0, !0, {
      fileName: "app/root.tsx",
      lineNumber: 129,
      columnNumber: 7
    }, this)
  ] }, void 0, !0, {
    fileName: "app/root.tsx",
    lineNumber: 122,
    columnNumber: 5
  }, this);
}

// app/routes/api.test-health-check.ts
var api_test_health_check_exports = {};
__export(api_test_health_check_exports, {
  loader: () => loader
});
var import_node2 = require("@remix-run/node");
init_shopify_server();
init_db();

// app/utils/healthCheckTest.ts
init_db();
var HealthCheckTester = class {
  testResults = [];
  async runAllTests(userId, shopDomain, accessToken) {
    return this.testResults = [], console.log("\u{1F9EA} Starting health check system tests..."), await this.testHealthCheckerInitialization(shopDomain, accessToken), await this.testProductValidation(), await this.testUrlPings(), await this.testInventoryValidation(), await this.testHealthScoreCalculation(), await this.testDatabaseOperations(userId), await this.testQueueOperations(userId, shopDomain), await this.testErrorHandling(shopDomain, accessToken), await this.testPerformanceLargeDataset(), await this.testEdgeCases(), console.log(`\u2705 Health check tests completed: ${this.testResults.filter((r) => r.passed).length}/${this.testResults.length} passed`), this.testResults;
  }
  async testHealthCheckerInitialization(shopDomain, accessToken) {
    let startTime = Date.now();
    try {
      if (!new HealthCheckerService(shopDomain, accessToken))
        throw new Error("Failed to initialize HealthCheckerService");
      this.testResults.push({
        testName: "Health Checker Initialization",
        passed: !0,
        duration: Date.now() - startTime,
        details: { shopDomain, hasAccessToken: !!accessToken }
      });
    } catch (error) {
      this.testResults.push({
        testName: "Health Checker Initialization",
        passed: !1,
        error: error instanceof Error ? error.message : "Unknown error",
        duration: Date.now() - startTime
      });
    }
  }
  async testProductValidation() {
    let startTime = Date.now();
    try {
      let mockProducts = [
        {
          id: "test-1",
          title: "Valid Product",
          description: "This is a valid product description",
          vendor: "Test Vendor",
          productType: "Test Type",
          tags: ["tag1", "tag2"],
          images: [{ src: "image1.jpg" }],
          variants: [{ id: "v1", title: "Variant 1" }],
          options: [{ name: "Size", values: ["S", "M", "L"] }],
          status: "active"
        },
        {
          id: "test-2",
          title: "",
          // Missing title
          description: "Valid description",
          vendor: "Test Vendor",
          productType: "Test Type",
          tags: [],
          images: [],
          variants: [],
          options: [],
          status: "active"
        },
        {
          id: "test-3",
          title: "Valid Product",
          description: "",
          // Missing description
          vendor: "",
          productType: "Test Type",
          tags: ["tag1"],
          images: [{ src: "image1.jpg" }],
          variants: [{ id: "v1", title: "Variant 1" }],
          options: [{ name: "Size", values: ["S", "M", "L"] }],
          status: "active"
        }
      ], requiredFields = ["title", "description", "vendor", "productType", "tags", "images", "variants", "options", "status"], validCount = 0, gaps = [];
      for (let product of mockProducts) {
        let isValid = !0;
        for (let field of requiredFields)
          (!product[field] || Array.isArray(product[field]) && product[field].length === 0 || typeof product[field] == "string" && product[field].trim() === "") && (gaps.push({ field, productId: product.id }), isValid = !1);
        isValid && validCount++;
      }
      let expectedValidCount = 1, expectedGapsCount = 4;
      if (validCount !== expectedValidCount)
        throw new Error(`Expected ${expectedValidCount} valid products, got ${validCount}`);
      if (gaps.length !== expectedGapsCount)
        throw new Error(`Expected ${expectedGapsCount} gaps, got ${gaps.length}`);
      this.testResults.push({
        testName: "Product Validation",
        passed: !0,
        duration: Date.now() - startTime,
        details: {
          totalProducts: mockProducts.length,
          validProducts: validCount,
          gapsFound: gaps.length,
          gaps
        }
      });
    } catch (error) {
      this.testResults.push({
        testName: "Product Validation",
        passed: !1,
        error: error instanceof Error ? error.message : "Unknown error",
        duration: Date.now() - startTime
      });
    }
  }
  async testUrlPings() {
    let startTime = Date.now();
    try {
      let testUrls = [
        "https://httpbin.org/status/200",
        // Should succeed
        "https://httpbin.org/status/404",
        // Should fail with 404
        "https://invalid-domain-that-does-not-exist.com",
        // Should fail
        "https://httpbin.org/delay/10"
        // Should timeout
      ], results = [];
      for (let url of testUrls)
        try {
          let response = await fetch(url, {
            method: "HEAD",
            signal: AbortSignal.timeout(5e3)
          });
          results.push({ url, success: response.ok, status: response.status });
        } catch (error) {
          results.push({ url, success: !1, error: error instanceof Error ? error.message : "Unknown error" });
        }
      let successCount = results.filter((r) => r.success).length, expectedSuccessCount = 1;
      if (successCount !== expectedSuccessCount)
        throw new Error(`Expected ${expectedSuccessCount} successful pings, got ${successCount}`);
      this.testResults.push({
        testName: "URL Pings",
        passed: !0,
        duration: Date.now() - startTime,
        details: {
          totalUrls: testUrls.length,
          successfulPings: successCount,
          results
        }
      });
    } catch (error) {
      this.testResults.push({
        testName: "URL Pings",
        passed: !1,
        error: error instanceof Error ? error.message : "Unknown error",
        duration: Date.now() - startTime
      });
    }
  }
  async testInventoryValidation() {
    let startTime = Date.now();
    try {
      let mockVariants = [
        { id: "v1", inventoryQuantity: 10 },
        // Normal stock
        { id: "v2", inventoryQuantity: 3 },
        // Low stock
        { id: "v3", inventoryQuantity: 0 },
        // Out of stock
        { id: "v4", inventoryQuantity: 1 },
        // Low stock
        { id: "v5", inventoryQuantity: 15 }
        // Normal stock
      ], lowStock = [], outOfStock = [];
      for (let variant of mockVariants)
        variant.inventoryQuantity === 0 ? outOfStock.push(variant.id) : variant.inventoryQuantity < 5 && lowStock.push(variant.id);
      let expectedLowStock = 2, expectedOutOfStock = 1;
      if (lowStock.length !== expectedLowStock)
        throw new Error(`Expected ${expectedLowStock} low stock variants, got ${lowStock.length}`);
      if (outOfStock.length !== expectedOutOfStock)
        throw new Error(`Expected ${expectedOutOfStock} out of stock variants, got ${outOfStock.length}`);
      this.testResults.push({
        testName: "Inventory Validation",
        passed: !0,
        duration: Date.now() - startTime,
        details: {
          totalVariants: mockVariants.length,
          lowStock: lowStock.length,
          outOfStock: outOfStock.length,
          lowStockVariants: lowStock,
          outOfStockVariants: outOfStock
        }
      });
    } catch (error) {
      this.testResults.push({
        testName: "Inventory Validation",
        passed: !1,
        error: error instanceof Error ? error.message : "Unknown error",
        duration: Date.now() - startTime
      });
    }
  }
  async testHealthScoreCalculation() {
    let startTime = Date.now();
    try {
      let testCases = [
        { totalProducts: 100, validProducts: 100, gaps: [], expectedScore: 100 },
        { totalProducts: 100, validProducts: 90, gaps: [], expectedScore: 90 },
        { totalProducts: 100, validProducts: 80, gaps: [{ severity: "warning", count: 10 }], expectedScore: 70 },
        { totalProducts: 100, validProducts: 70, gaps: [{ severity: "error", count: 20 }], expectedScore: 10 },
        { totalProducts: 0, validProducts: 0, gaps: [], expectedScore: 100 }
      ], results = [];
      for (let testCase of testCases) {
        let score = testCase.totalProducts === 0 ? 100 : testCase.validProducts / testCase.totalProducts * 100;
        for (let gap of testCase.gaps) {
          let penalty = gap.severity === "critical" ? 5 : gap.severity === "error" ? 3 : 1;
          score -= Math.min(penalty * (gap.count / testCase.totalProducts), 10);
        }
        score = Math.max(0, Math.round(score));
        let passed = score === testCase.expectedScore;
        results.push({ ...testCase, calculatedScore: score, passed });
      }
      let failedTests = results.filter((r) => !r.passed);
      if (failedTests.length > 0)
        throw new Error(`${failedTests.length} health score calculations failed`);
      this.testResults.push({
        testName: "Health Score Calculation",
        passed: !0,
        duration: Date.now() - startTime,
        details: {
          totalTestCases: testCases.length,
          allPassed: !0,
          results
        }
      });
    } catch (error) {
      this.testResults.push({
        testName: "Health Score Calculation",
        passed: !1,
        error: error instanceof Error ? error.message : "Unknown error",
        duration: Date.now() - startTime
      });
    }
  }
  async testDatabaseOperations(userId) {
    let startTime = Date.now();
    try {
      let testAudit = await db.audit.create({
        data: {
          userId,
          score: 85,
          totalProducts: 100,
          validProducts: 85,
          gaps: [{ field: "title", severity: "warning", count: 15 }],
          timestamp: /* @__PURE__ */ new Date()
        }
      });
      if (!testAudit.id)
        throw new Error("Failed to create audit record");
      if (!await db.audit.findUnique({
        where: { id: testAudit.id }
      }))
        throw new Error("Failed to retrieve audit record");
      await db.audit.delete({
        where: { id: testAudit.id }
      }), this.testResults.push({
        testName: "Database Operations",
        passed: !0,
        duration: Date.now() - startTime,
        details: {
          auditId: testAudit.id,
          score: testAudit.score,
          totalProducts: testAudit.totalProducts
        }
      });
    } catch (error) {
      this.testResults.push({
        testName: "Database Operations",
        passed: !1,
        error: error instanceof Error ? error.message : "Unknown error",
        duration: Date.now() - startTime
      });
    }
  }
  async testQueueOperations(userId, shopDomain) {
    let startTime = Date.now();
    try {
      if (!healthCheckQueue)
        throw new Error("Health check queue not available");
      let testJob = await healthCheckQueue.add("health-scan", {
        shopId: shopDomain,
        userId,
        options: {
          maxProducts: 10,
          includePings: !1,
          includeInventory: !1,
          includeValidation: !0
        }
      });
      if (!testJob.id)
        throw new Error("Failed to create queue job");
      this.testResults.push({
        testName: "Queue Operations",
        passed: !0,
        duration: Date.now() - startTime,
        details: {
          jobId: testJob.id,
          jobName: testJob.name,
          jobData: testJob.data
        }
      });
    } catch (error) {
      this.testResults.push({
        testName: "Queue Operations",
        passed: !1,
        error: error instanceof Error ? error.message : "Unknown error",
        duration: Date.now() - startTime
      });
    }
  }
  async testErrorHandling(shopDomain, accessToken) {
    let startTime = Date.now();
    try {
      let healthChecker = new HealthCheckerService(shopDomain, accessToken);
      try {
        await healthChecker.performHealthCheck({
          maxProducts: -1,
          // Invalid value
          includePings: !0,
          includeInventory: !0,
          includeValidation: !0
        });
      } catch {
      }
      try {
        await new HealthCheckerService("", accessToken).performHealthCheck();
      } catch {
      }
      try {
        await new HealthCheckerService(shopDomain, "").performHealthCheck();
      } catch {
      }
      this.testResults.push({
        testName: "Error Handling",
        passed: !0,
        duration: Date.now() - startTime,
        details: {
          errorHandlingTests: 3,
          allErrorsHandled: !0
        }
      });
    } catch (error) {
      this.testResults.push({
        testName: "Error Handling",
        passed: !1,
        error: error instanceof Error ? error.message : "Unknown error",
        duration: Date.now() - startTime
      });
    }
  }
  async testPerformanceLargeDataset() {
    let startTime = Date.now();
    try {
      let largeProductSet = Array.from({ length: 1e3 }, (_, i) => ({
        id: `product-${i}`,
        title: i % 10 === 0 ? "" : `Product ${i}`,
        // 10% missing titles
        description: i % 20 === 0 ? "" : `Description for product ${i}`,
        // 5% missing descriptions
        vendor: i % 15 === 0 ? "" : "Test Vendor",
        // ~6.7% missing vendors
        productType: "Test Type",
        tags: i % 25 === 0 ? [] : ["tag1", "tag2"],
        // 4% missing tags
        images: i % 30 === 0 ? [] : [{ src: `image-${i}.jpg` }],
        // ~3.3% missing images
        variants: i % 40 === 0 ? [] : [{ id: `v-${i}`, title: `Variant ${i}` }],
        // 2.5% missing variants
        options: i % 50 === 0 ? [] : [{ name: "Size", values: ["S", "M", "L"] }],
        // 2% missing options
        status: "active"
      })), requiredFields = ["title", "description", "vendor", "productType", "tags", "images", "variants", "options", "status"], validCount = 0, gaps = [];
      for (let product of largeProductSet) {
        let isValid = !0;
        for (let field of requiredFields)
          (!product[field] || Array.isArray(product[field]) && product[field].length === 0 || typeof product[field] == "string" && product[field].trim() === "") && (gaps.push({ field, productId: product.id }), isValid = !1);
        isValid && validCount++;
      }
      let processingTime = Date.now() - startTime, expectedValidCount = Math.floor(1e3 * 0.7), tolerance = 50;
      if (Math.abs(validCount - expectedValidCount) > tolerance)
        throw new Error(`Performance test failed: expected ~${expectedValidCount} valid products, got ${validCount}`);
      if (processingTime > 5e3)
        throw new Error(`Performance test failed: processing took ${processingTime}ms, expected < 5000ms`);
      this.testResults.push({
        testName: "Performance Large Dataset",
        passed: !0,
        duration: Date.now() - startTime,
        details: {
          totalProducts: largeProductSet.length,
          validProducts: validCount,
          gapsFound: gaps.length,
          processingTime,
          productsPerSecond: Math.round(largeProductSet.length / (processingTime / 1e3))
        }
      });
    } catch (error) {
      this.testResults.push({
        testName: "Performance Large Dataset",
        passed: !1,
        error: error instanceof Error ? error.message : "Unknown error",
        duration: Date.now() - startTime
      });
    }
  }
  async testEdgeCases() {
    let startTime = Date.now();
    try {
      let edgeCases = [
        // Empty product
        {
          id: "empty",
          title: "",
          description: "",
          vendor: "",
          productType: "",
          tags: [],
          images: [],
          variants: [],
          options: [],
          status: ""
        },
        // Product with only spaces
        {
          id: "spaces",
          title: "   ",
          description: "   ",
          vendor: "   ",
          productType: "Test Type",
          tags: [],
          images: [],
          variants: [],
          options: [],
          status: "active"
        },
        // Product with null/undefined values
        {
          id: "nulls",
          title: null,
          description: void 0,
          vendor: "Test Vendor",
          productType: "Test Type",
          tags: null,
          images: void 0,
          variants: [],
          options: [],
          status: "active"
        }
      ], results = [];
      for (let product of edgeCases) {
        let isValid = !0, gaps = [], requiredFields = ["title", "description", "vendor", "productType", "tags", "images", "variants", "options", "status"];
        for (let field of requiredFields) {
          let value = product[field];
          (!value || Array.isArray(value) && value.length === 0 || typeof value == "string" && value.trim() === "") && (gaps.push(field), isValid = !1);
        }
        results.push({ productId: product.id, isValid, gaps });
      }
      let validCount = results.filter((r) => r.isValid).length;
      if (validCount > 0)
        throw new Error(`Expected all edge cases to be invalid, but ${validCount} were valid`);
      this.testResults.push({
        testName: "Edge Cases",
        passed: !0,
        duration: Date.now() - startTime,
        details: {
          totalEdgeCases: edgeCases.length,
          allInvalid: !0,
          results
        }
      });
    } catch (error) {
      this.testResults.push({
        testName: "Edge Cases",
        passed: !1,
        error: error instanceof Error ? error.message : "Unknown error",
        duration: Date.now() - startTime
      });
    }
  }
  getTestSummary() {
    let total = this.testResults.length, passed = this.testResults.filter((r) => r.passed).length, failed = total - passed, duration = this.testResults.reduce((sum, r) => sum + r.duration, 0);
    return { total, passed, failed, duration };
  }
}, healthCheckTester = new HealthCheckTester();

// app/routes/api.test-health-check.ts
var loader = async ({ request }) => {
  try {
    let { session } = await authenticate.admin(request), user = await db.user.findUnique({
      where: { shopId: session.shop }
    });
    if (!user)
      return (0, import_node2.json)({
        success: !1,
        error: "User not found"
      }, { status: 404 });
    let testResults = await healthCheckTester.runAllTests(
      user.id,
      session.shop,
      user.accessToken
    ), summary = healthCheckTester.getTestSummary();
    return await db.log.create({
      data: {
        userId: user.id,
        type: "health_check_test",
        message: `Health check tests completed: ${summary.passed}/${summary.total} passed`,
        metadata: {
          totalTests: summary.total,
          passedTests: summary.passed,
          failedTests: summary.failed,
          duration: summary.duration,
          results: testResults
        }
      }
    }), (0, import_node2.json)({
      success: !0,
      summary,
      results: testResults,
      message: `Health check tests completed: ${summary.passed}/${summary.total} passed`
    });
  } catch (error) {
    return console.error("Health check test error:", error), (0, import_node2.json)({
      success: !1,
      error: error instanceof Error ? error.message : "Failed to run health check tests"
    }, { status: 500 });
  }
};

// app/routes/api.health-check.ts
var api_health_check_exports = {};
__export(api_health_check_exports, {
  action: () => action,
  loader: () => loader2
});
var import_node3 = require("@remix-run/node");
init_shopify_server();
init_db();
var loader2 = async ({ request }) => {
  try {
    let { session } = await authenticate.admin(request);
    if (console.log("Health check API called", {
      redisHost: process.env.REDIS_HOST,
      redisPort: process.env.REDIS_PORT,
      hasRedisPassword: !!process.env.REDIS_PASSWORD,
      healthCheckQueueExists: !!healthCheckQueue,
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    }), !healthCheckQueue)
      return console.error("Health check queue is null - Redis connection failed"), (0, import_node3.json)({
        success: !1,
        error: "Health check system not available - Redis connection failed"
      }, { status: 503 });
    let user = await db.user.findUnique({
      where: { shopId: session.shop }
    });
    if (!user)
      return (0, import_node3.json)({
        success: !1,
        error: "User not found"
      }, { status: 404 });
    let healthScanJob = await healthCheckQueue.add("health-scan", {
      shopId: session.shop,
      userId: user.id,
      options: {
        maxProducts: 100,
        includePings: !0,
        includeInventory: !0,
        includeValidation: !0
      }
    }), latestAudit = await db.audit.findFirst({
      where: { userId: user.id },
      orderBy: { timestamp: "desc" }
    });
    return (0, import_node3.json)({
      success: !0,
      jobId: healthScanJob.id,
      currentScore: latestAudit?.score || 0,
      currentGaps: latestAudit?.gaps || [],
      message: "Health scan initiated"
    });
  } catch (error) {
    return console.error("Health check API error:", error), (0, import_node3.json)({
      success: !1,
      error: error instanceof Error ? error.message : "Failed to initiate health checks"
    }, { status: 500 });
  }
}, action = async ({ request }) => {
  try {
    let { session } = await authenticate.admin(request), formData = await request.formData(), action8 = formData.get("action");
    if (action8 === "trigger-scan") {
      let user = await db.user.findUnique({
        where: { shopId: session.shop }
      });
      if (!user)
        return (0, import_node3.json)({
          success: !1,
          error: "User not found"
        }, { status: 404 });
      if (!healthCheckQueue)
        return console.error("Health check queue is null - Redis connection failed"), (0, import_node3.json)({
          success: !1,
          error: "Health check system not available - Redis connection failed"
        }, { status: 503 });
      let healthScanJob = await healthCheckQueue.add("health-scan", {
        shopId: session.shop,
        userId: user.id,
        options: {
          maxProducts: 100,
          includePings: !0,
          includeInventory: !0,
          includeValidation: !0
        }
      }), latestAudit = await db.audit.findFirst({
        where: { userId: user.id },
        orderBy: { timestamp: "desc" }
      });
      return (0, import_node3.json)({
        success: !0,
        jobId: healthScanJob.id,
        currentScore: latestAudit?.score || 0,
        currentGaps: latestAudit?.gaps || [],
        message: "Health scan initiated"
      });
    }
    if (action8 === "get-results") {
      if (!formData.get("jobId"))
        return (0, import_node3.json)({
          success: !1,
          error: "Job ID is required"
        }, { status: 400 });
      let user = await db.user.findUnique({
        where: { shopId: session.shop }
      });
      if (!user)
        return (0, import_node3.json)({
          success: !1,
          error: "User not found"
        }, { status: 404 });
      let latestAudit = await db.audit.findFirst({
        where: { userId: user.id },
        orderBy: { timestamp: "desc" }
      }), sevenDaysAgo = /* @__PURE__ */ new Date();
      sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
      let trends = await db.audit.findMany({
        where: {
          userId: user.id,
          timestamp: {
            gte: sevenDaysAgo
          }
        },
        orderBy: {
          timestamp: "asc"
        }
      });
      return (0, import_node3.json)({
        success: !0,
        result: latestAudit ? {
          score: latestAudit.score,
          totalProducts: latestAudit.totalProducts,
          validProducts: latestAudit.validProducts,
          gaps: latestAudit.gaps,
          timestamp: latestAudit.timestamp,
          trends: trends.map((t) => ({
            date: t.timestamp.toISOString().split("T")[0],
            score: t.score,
            totalProducts: t.totalProducts,
            validProducts: t.validProducts
          }))
        } : null
      });
    }
    if (action8 === "auto-fix") {
      let gapTypes = formData.get("gapTypes");
      if (!gapTypes)
        return (0, import_node3.json)({
          success: !1,
          error: "Gap types are required"
        }, { status: 400 });
      let user = await db.user.findUnique({
        where: { shopId: session.shop }
      });
      if (!user)
        return (0, import_node3.json)({
          success: !1,
          error: "User not found"
        }, { status: 404 });
      let aiEnrichmentJob = await backgroundJobsQueue?.add("ai-enrichment", {
        shopId: session.shop,
        userId: user.id,
        productIds: [],
        // Will be determined by gap types
        gapTypes: JSON.parse(gapTypes)
      });
      return (0, import_node3.json)({
        success: !0,
        jobId: aiEnrichmentJob?.id,
        message: "Auto-fix initiated"
      });
    }
    return (0, import_node3.json)({
      success: !1,
      error: "Invalid action"
    }, { status: 400 });
  } catch (error) {
    return console.error("Health check action error:", error), (0, import_node3.json)({
      success: !1,
      error: error instanceof Error ? error.message : "Failed to process action"
    }, { status: 500 });
  }
};

// app/routes/api.queue-status.ts
var api_queue_status_exports = {};
__export(api_queue_status_exports, {
  loader: () => loader3
});
var import_node4 = require("@remix-run/node");
init_shopify_server();
var loader3 = async ({ request }) => {
  try {
    let { session } = await authenticate.admin(request);
    if (!healthCheckQueue || !backgroundJobsQueue)
      return (0, import_node4.json)({
        success: !1,
        error: "Queue system not available - Redis not configured"
      }, { status: 503 });
    let healthCheckStats = await healthCheckQueue.getJobCounts(), backgroundJobsStats = await backgroundJobsQueue.getJobCounts(), recentHealthChecks = await healthCheckQueue.getJobs(["completed"], 0, 5), recentBackgroundJobs = await backgroundJobsQueue.getJobs(["completed"], 0, 5);
    return (0, import_node4.json)({
      success: !0,
      queues: {
        healthChecks: {
          ...healthCheckStats,
          recentJobs: recentHealthChecks.map((job) => ({
            id: job.id,
            name: job.name,
            data: job.data,
            result: job.returnvalue,
            completedOn: job.finishedOn
          }))
        },
        backgroundJobs: {
          ...backgroundJobsStats,
          recentJobs: recentBackgroundJobs.map((job) => ({
            id: job.id,
            name: job.name,
            data: job.data,
            result: job.returnvalue,
            completedOn: job.finishedOn
          }))
        }
      },
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    });
  } catch (error) {
    return (0, import_node4.json)({
      success: !1,
      error: error instanceof Error ? error.message : "Failed to get queue status"
    }, { status: 500 });
  }
};

// app/routes/api.settings.ts
var api_settings_exports = {};
__export(api_settings_exports, {
  action: () => action2,
  loader: () => loader4
});
var import_node5 = require("@remix-run/node");
init_shopify_server();
init_db();
var loader4 = async ({ request }) => {
  try {
    let { session } = await authenticate.admin(request), user = await db.user.findUnique({
      where: { shopId: session.shop }
    });
    return user ? (0, import_node5.json)({
      success: !0,
      settings: {
        healthChecksEnabled: !0,
        healthCheckTime: "02:00",
        // 2 AM UTC
        autoFixEnabled: !0,
        emailNotifications: !0,
        maxProductsPerScan: user.tier === "enterprise" ? 500 : 100,
        includeUrlPings: !0,
        includeInventoryChecks: !0,
        includeValidation: !0
      }
    }) : (0, import_node5.json)({
      success: !1,
      error: "User not found"
    }, { status: 404 });
  } catch (error) {
    return console.error("Settings API error:", error), (0, import_node5.json)({
      success: !1,
      error: error instanceof Error ? error.message : "Failed to fetch settings"
    }, { status: 500 });
  }
}, action2 = async ({ request }) => {
  try {
    let { session } = await authenticate.admin(request), formData = await request.formData(), action8 = formData.get("action"), user = await db.user.findUnique({
      where: { shopId: session.shop }
    });
    if (!user)
      return (0, import_node5.json)({
        success: !1,
        error: "User not found"
      }, { status: 404 });
    if (action8 === "update") {
      let healthChecksEnabled = formData.get("healthChecksEnabled") === "true", healthCheckTime = formData.get("healthCheckTime"), autoFixEnabled = formData.get("autoFixEnabled") === "true", emailNotifications = formData.get("emailNotifications") === "true", maxProductsPerScan = parseInt(formData.get("maxProductsPerScan")) || 100, includeUrlPings = formData.get("includeUrlPings") === "true", includeInventoryChecks = formData.get("includeInventoryChecks") === "true", includeValidation = formData.get("includeValidation") === "true";
      return await db.log.create({
        data: {
          userId: user.id,
          type: "settings_update",
          message: `Settings updated: health checks ${healthChecksEnabled ? "enabled" : "disabled"}, auto-fix ${autoFixEnabled ? "enabled" : "disabled"}`,
          metadata: {
            healthChecksEnabled,
            healthCheckTime,
            autoFixEnabled,
            emailNotifications,
            maxProductsPerScan,
            includeUrlPings,
            includeInventoryChecks,
            includeValidation
          }
        }
      }), (0, import_node5.json)({
        success: !0,
        message: "Settings updated successfully"
      });
    }
    return (0, import_node5.json)({
      success: !1,
      error: "Invalid action"
    }, { status: 400 });
  } catch (error) {
    return console.error("Settings action error:", error), (0, import_node5.json)({
      success: !1,
      error: error instanceof Error ? error.message : "Failed to update settings"
    }, { status: 500 });
  }
};

// app/routes/api.validate.ts
var api_validate_exports = {};
__export(api_validate_exports, {
  action: () => action3
});
var import_node6 = require("@remix-run/node");
init_shopify_server();
init_shopifySync();
init_fieldMapper();

// app/utils/validator.ts
var import_ajv2 = __toESM(require("ajv")), import_ajv_formats2 = __toESM(require("ajv-formats")), import_axios2 = __toESM(require("axios"));
init_openaiSpec();
var ajv2 = new import_ajv2.default({ allErrors: !0 });
(0, import_ajv_formats2.default)(ajv2);
var validate = ajv2.compile(OPENAI_PRODUCT_SCHEMA);
function validateProduct(product) {
  let errors = [], warnings = [];
  if (!validate(product) && validate.errors)
    for (let error of validate.errors)
      errors.push({
        field: error.instancePath ? error.instancePath.slice(1) : "root",
        message: error.message || "Validation error",
        value: error.data
      });
  return validateDescription(product, warnings), validatePrice(product, errors), validateImageUrls(product, warnings), validateLinks(product, warnings), {
    valid: errors.length === 0,
    errors,
    warnings
  };
}
function validateDescription(product, warnings) {
  if (!product.description)
    return;
  let desc = product.description;
  /<[^>]*>/g.test(desc) && warnings.push({
    field: "description",
    message: "Description contains HTML tags",
    suggestion: "Use plain text for better AI search compatibility"
  }), desc.length < 100 && warnings.push({
    field: "description",
    message: "Description is too short",
    suggestion: "Add more details about features, benefits, and use cases"
  }), desc.length > 4e3 && warnings.push({
    field: "description",
    message: "Description is too long",
    suggestion: "Consider shortening to under 4000 characters"
  });
  let genericPhrases = [
    "great product",
    "high quality",
    "perfect for",
    "amazing",
    "wonderful",
    "excellent"
  ], lowerDesc = desc.toLowerCase();
  genericPhrases.filter((phrase) => lowerDesc.includes(phrase)).length > 2 && warnings.push({
    field: "description",
    message: "Description contains too many generic phrases",
    suggestion: "Use more specific, descriptive language"
  });
}
function validatePrice(product, errors) {
  if (!product.price)
    return;
  /^\d+\.\d{2} [A-Z]{3}$/.test(product.price) || errors.push({
    field: "price",
    message: 'Price must be in format "XX.XX USD"',
    value: product.price
  });
}
async function validateImageUrls(product, warnings) {
  if (!(!product.image_urls || product.image_urls.length === 0))
    for (let [index, url] of product.image_urls.entries())
      try {
        let response = await import_axios2.default.head(url, { timeout: 5e3 });
        response.status !== 200 && warnings.push({
          field: `image_urls[${index}]`,
          message: `Image URL returned status ${response.status}`,
          suggestion: "Check if the image URL is accessible"
        });
        let contentType = response.headers["content-type"];
        contentType && !contentType.startsWith("image/") && warnings.push({
          field: `image_urls[${index}]`,
          message: "URL does not appear to be an image",
          suggestion: "Ensure the URL points to an image file"
        });
      } catch {
        warnings.push({
          field: `image_urls[${index}]`,
          message: "Failed to validate image URL",
          suggestion: "Check if the URL is accessible and points to an image"
        });
      }
}
async function validateLinks(product, warnings) {
  let linksToValidate = [];
  product.documentation_url && linksToValidate.push({ url: product.documentation_url, field: "documentation_url" }), product.video_urls && product.video_urls.forEach((url, index) => {
    linksToValidate.push({ url, field: `video_urls[${index}]` });
  });
  for (let { url, field } of linksToValidate)
    try {
      let response = await import_axios2.default.head(url, { timeout: 5e3 });
      response.status !== 200 && warnings.push({
        field,
        message: `Link returned status ${response.status}`,
        suggestion: "Check if the link is accessible"
      });
    } catch {
      warnings.push({
        field,
        message: "Failed to validate link",
        suggestion: "Check if the link is accessible"
      });
    }
}
async function validateProducts(products) {
  let results = [];
  for (let product of products) {
    let result = validateProduct(product);
    results.push(result);
  }
  return results;
}
function getValidationSummary(results) {
  let totalProducts = results.length, validProducts = results.filter((r) => r.valid).length, totalErrors = results.reduce((sum, r) => sum + r.errors.length, 0), totalWarnings = results.reduce((sum, r) => sum + r.warnings.length, 0), commonErrors = getCommonIssues(results.map((r) => r.errors).flat(), "error"), commonWarnings = getCommonIssues(results.map((r) => r.warnings).flat(), "warning");
  return {
    totalProducts,
    validProducts,
    invalidProducts: totalProducts - validProducts,
    totalErrors,
    totalWarnings,
    validationRate: totalProducts > 0 ? Math.round(validProducts / totalProducts * 100) : 0,
    commonErrors,
    commonWarnings
  };
}
function getCommonIssues(issues, type) {
  let fieldCounts = /* @__PURE__ */ new Map();
  for (let issue of issues) {
    let key = issue.field;
    fieldCounts.has(key) ? fieldCounts.get(key).count++ : fieldCounts.set(key, { count: 1, message: issue.message });
  }
  return Array.from(fieldCounts.entries()).map(([field, data]) => ({ field, ...data })).sort((a, b) => b.count - a.count).slice(0, 10);
}

// app/routes/api.validate.ts
init_db();
var action3 = async ({ request }) => {
  let { session } = await authenticate.admin(request), user = await db.user.findUnique({
    where: { shopId: session.shop }
  });
  if (!user)
    return (0, import_node6.json)({ error: "User not found" }, { status: 404 });
  try {
    if ((await request.formData()).get("action") === "validate") {
      let sampleProducts = (await new ShopifySyncService(session.shop, user.accessToken).syncProducts(user.id)).slice(0, 10), mappedProducts = mapProductsToSpec(sampleProducts), validationResults = await validateProducts(mappedProducts.map((p) => {
        let { originalId, score, ...spec } = p;
        return spec;
      })), summary = getValidationSummary(validationResults), audit = await db.audit.create({
        data: {
          userId: user.id,
          score: summary.validationRate,
          totalProducts: summary.totalProducts,
          validProducts: summary.validProducts,
          gaps: summary.commonErrors.map((error) => ({
            field: error.field,
            count: error.count,
            message: error.message
          }))
        }
      });
      return await db.log.create({
        data: {
          userId: user.id,
          type: "validation",
          message: `Validated ${summary.totalProducts} products - ${summary.validationRate}% passed validation`,
          metadata: {
            summary,
            auditId: audit.id,
            timestamp: (/* @__PURE__ */ new Date()).toISOString()
          }
        }
      }), (0, import_node6.json)({
        success: !0,
        data: {
          auditId: audit.id,
          summary,
          products: mappedProducts.map((product, index) => ({
            id: product.originalId,
            title: product.title,
            score: product.score,
            validation: validationResults[index]
          }))
        }
      });
    }
    return (0, import_node6.json)({ error: "Invalid action" }, { status: 400 });
  } catch (error) {
    return console.error("Validation error:", error), await db.log.create({
      data: {
        userId: user.id,
        type: "error",
        message: `Validation error: ${error instanceof Error ? error.message : "Unknown error"}`,
        error: error instanceof Error ? error.stack : String(error),
        metadata: {
          timestamp: (/* @__PURE__ */ new Date()).toISOString()
        }
      }
    }), (0, import_node6.json)(
      {
        success: !1,
        error: error instanceof Error ? error.message : "Unknown error occurred"
      },
      { status: 500 }
    );
  }
};

// app/routes/api.enrich.ts
var api_enrich_exports = {};
__export(api_enrich_exports, {
  action: () => action4,
  loader: () => loader5
});
var import_node7 = require("@remix-run/node");
init_shopify_server();
init_shopifySync();
init_aiEnrich();
init_db();
var loader5 = async ({ request }) => {
  console.log("\u{1F3AF} AI ENRICH LOADER CALLED");
  try {
    let { session } = await authenticate.admin(request);
    return console.log("\u2705 AI Enrich loader authentication successful for shop:", session.shop), (0, import_node7.json)({ success: !0, message: "AI Enrichment API ready" });
  } catch (error) {
    return console.error("\u274C AI Enrich loader authentication failed:", error), (0, import_node7.json)({ success: !1, error: "Authentication failed" }, { status: 401 });
  }
}, action4 = async ({ request }) => {
  console.log("\u{1F3AF} AI ENRICH ACTION CALLED - Fixed Syntax Error");
  try {
    console.log("\u{1F50D} Attempting authentication for AI enrichment..."), console.log("\u{1F50D} Request URL:", request.url), console.log("\u{1F50D} Request method:", request.method), console.log("\u{1F50D} Request headers:", Object.fromEntries(request.headers.entries()));
    let { session } = await authenticate.admin(request);
    console.log("\u2705 AI Enrich authentication successful for shop:", session.shop);
    let user = await db.user.findUnique({
      where: { shopId: session.shop }
    });
    if (!user)
      return console.log("\u274C User not found for shop:", session.shop), (0, import_node7.json)({ error: "User not found" }, { status: 404 });
    console.log("\u{1F464} User found:", user.id);
    let formData = await request.formData(), action8 = formData.get("action"), shopFromForm = formData.get("shop");
    if (console.log("\u{1F4DD} Form data action:", action8), console.log("\u{1F3EA} Shop from form:", shopFromForm), action8 === "enrich") {
      console.log("\u{1F680} Starting AI enrichment process...");
      let productIds = formData.getAll("productIds"), maxProducts = parseInt(formData.get("maxProducts")) || 5, tierLimits = {
        starter: 5,
        pro: 25,
        enterprise: 100
      }, limit = tierLimits[user.tier] || tierLimits.starter;
      if (maxProducts > limit)
        return (0, import_node7.json)({
          success: !1,
          error: `Your ${user.tier} tier allows up to ${limit} products per enrichment. Please upgrade to process more products.`
        }, { status: 400 });
      console.log("\u{1F511} Loading offline session for AI enrichment...");
      let { sessionStorage: sessionStorage2 } = await Promise.resolve().then(() => (init_shopify_server(), shopify_server_exports)), offlineSessionId = `offline_${session.shop}`, offlineSession = await sessionStorage2.loadSession(offlineSessionId);
      if (!offlineSession?.accessToken)
        return console.log("\u274C Offline session not found for AI enrichment"), (0, import_node7.json)({
          success: !1,
          error: "Offline session not found. Please reinstall the app."
        }, { status: 401 });
      console.log("\u2705 Offline session loaded for AI enrichment"), console.log("\u{1F4E6} Fetching products for AI enrichment...");
      let allProducts = await new ShopifySyncService(session.shop, offlineSession.accessToken).syncProducts(user.id);
      console.log("\u{1F4E6} Products fetched:", allProducts.length);
      let productsToEnrich = productIds.length > 0 ? allProducts.filter((p) => productIds.includes(p.id)) : allProducts.slice(0, maxProducts);
      if (console.log("\u{1F3AF} Products selected for enrichment:", productsToEnrich.length), productsToEnrich.length === 0)
        return console.log("\u274C No products found to enrich"), (0, import_node7.json)({
          success: !1,
          error: "No products found to enrich"
        }, { status: 400 });
      console.log("\u{1F916} Starting AI enrichment service...");
      let enrichmentService = new AIEnrichmentService();
      console.log("\u{1F916} Calling enrichProducts with", productsToEnrich.length, "products");
      let enrichmentResults = await enrichmentService.enrichProducts(
        user.id,
        productsToEnrich,
        {
          enrichDescription: !0,
          inferMaterial: !0,
          generateUseCases: !0,
          generateFeatures: !0,
          generateKeywords: !0
        },
        maxProducts
      );
      console.log("\u2705 AI enrichment completed, results:", enrichmentResults.length);
      let applyToShopify = formData.get("applyToShopify") === "true", appliedResults = [];
      if (applyToShopify)
        for (let result of enrichmentResults)
          try {
            let success = await enrichmentService.applyEnrichmentToShopify(
              user.id,
              session.shop,
              offlineSession.accessToken,
              result
            );
            appliedResults.push({
              productId: result.originalProduct.id,
              success,
              improvements: result.improvements
            });
          } catch (error) {
            appliedResults.push({
              productId: result.originalProduct.id,
              success: !1,
              error: error instanceof Error ? error.message : "Unknown error"
            });
          }
      let totalUsage = enrichmentResults.reduce((sum, result) => sum + result.totalUsage, 0);
      console.log("\u{1F4B0} Total usage calculated:", totalUsage), console.log("\u{1F4DD} Creating database log..."), await db.log.create({
        data: {
          userId: user.id,
          type: "enrichment",
          message: `AI enrichment completed for ${enrichmentResults.length} products`,
          metadata: {
            productsProcessed: enrichmentResults.length,
            totalUsage,
            appliedToShopify: applyToShopify,
            timestamp: (/* @__PURE__ */ new Date()).toISOString()
          }
        }
      }), console.log("\u2705 Database log created");
      let response = {
        success: !0,
        data: {
          productsProcessed: enrichmentResults.length,
          totalUsage,
          appliedToShopify: applyToShopify,
          results: enrichmentResults.map((result) => ({
            productId: result.originalProduct.id,
            title: result.originalProduct.title,
            improvements: result.improvements,
            totalUsage: result.totalUsage,
            errors: result.errors
          })),
          appliedResults
        }
      };
      return console.log("\u{1F389} Returning successful response:", response), (0, import_node7.json)(response);
    }
    return (0, import_node7.json)({ error: "Invalid action" }, { status: 400 });
  } catch (error) {
    console.error("\u274C CRITICAL ERROR in AI enrichment:", error), console.error("\u274C Error stack:", error instanceof Error ? error.stack : "No stack trace");
    try {
      let { session } = await authenticate.admin(request).catch(() => null);
      if (session) {
        let user = await db.user.findUnique({
          where: { shopId: session.shop }
        }).catch(() => null);
        user && (await db.log.create({
          data: {
            userId: user.id,
            type: "error",
            message: `Enrichment error: ${error instanceof Error ? error.message : "Unknown error"}`,
            error: error instanceof Error ? error.stack : String(error),
            metadata: {
              timestamp: (/* @__PURE__ */ new Date()).toISOString()
            }
          }
        }), console.log("\u{1F4DD} Error logged to database"));
      }
    } catch (logError) {
      console.error("\u274C Failed to log error to database:", logError);
    }
    return (0, import_node7.json)(
      {
        success: !1,
        error: error instanceof Error ? error.message : "Unknown error occurred"
      },
      { status: 500 }
    );
  }
};

// app/routes/api.sync.ts
var api_sync_exports = {};
__export(api_sync_exports, {
  action: () => action5,
  loader: () => loader6
});
var import_node8 = require("@remix-run/node");
init_shopify_server();
init_shopifySync();
init_db();
var loader6 = async ({ request }) => {
  let { session } = await authenticate.admin(request), user = await db.user.findUnique({
    where: { shopId: session.shop }
  });
  if (!user)
    return (0, import_node8.json)({ error: "User not found" }, { status: 404 });
  let recentLogs = await db.log.findMany({
    where: {
      userId: user.id,
      type: "sync"
    },
    orderBy: {
      createdAt: "desc"
    },
    take: 10
  });
  return (0, import_node8.json)({
    logs: recentLogs.map((log) => ({
      id: log.id,
      type: log.type,
      message: log.message,
      createdAt: log.createdAt,
      metadata: log.metadata
    }))
  });
}, action5 = async ({ request }) => {
  console.log("\u{1F3AF} SYNC ACTION CALLED - Request method:", request.method), console.log("\u{1F3AF} SYNC ACTION CALLED - Request URL:", request.url), console.log("\u{1F3AF} Request headers:", Object.fromEntries(request.headers.entries()));
  try {
    console.log("\u{1F510} Attempting authentication...");
    let { session } = await authenticate.admin(request);
    console.log("\u{1F3AF} Authentication successful for shop:", session.shop);
    let user = await db.user.findUnique({
      where: { shopId: session.shop }
    });
    if (!user)
      return console.log("\u274C User not found for shop:", session.shop), (0, import_node8.json)({ error: "User not found" }, { status: 404 });
    console.log("\u{1F680} Starting sync for shop:", session.shop), console.log("\u{1F464} User ID:", user.id);
    let syncService = new ShopifySyncService(session.shop, user.accessToken);
    console.log("\u{1F527} Sync service initialized"), console.log("\u{1F4E6} Starting product sync...");
    let products = await syncService.syncProducts(user.id);
    console.log("\u2705 Product sync completed:", products.length, "products"), console.log("\u{1F4CA} Fetching inventory levels...");
    let inventoryLevels = await syncService.getInventoryLevels(session.shop, user.accessToken);
    console.log("\u{1F4C8} Inventory levels:", inventoryLevels.length), console.log("\u{1F6D2} Fetching recent orders...");
    let recentOrders = await syncService.getRecentOrders(session.shop, user.accessToken, 50);
    console.log("\u{1F4CB} Recent orders:", recentOrders.length), console.log("\u{1F4DD} Creating audit record...");
    let audit = await db.audit.create({
      data: {
        userId: user.id,
        score: 0,
        // Will be calculated after field mapping
        totalProducts: products.length,
        validProducts: 0,
        // Will be calculated after validation
        gaps: []
        // Will be populated after field mapping and validation
      }
    });
    console.log("\u2705 Audit record created:", audit.id);
    let response = {
      success: !0,
      message: `Successfully synced ${products.length} products`,
      data: {
        productsCount: products.length,
        inventoryLevelsCount: inventoryLevels.length,
        recentOrdersCount: recentOrders.length,
        auditId: audit.id
      }
    };
    return console.log("\u{1F389} Sync response:", response), (0, import_node8.json)(response);
  } catch (error) {
    if (console.error("\u274C SYNC ACTION ERROR:", error), console.error("\u274C Error type:", error?.constructor?.name), console.error("\u274C Error details:", {
      message: error instanceof Error ? error.message : "Unknown error",
      stack: error instanceof Error ? error.stack : String(error),
      isResponse: error instanceof Response,
      responseStatus: error instanceof Response ? error.status : "N/A",
      responseHeaders: error instanceof Response ? Object.fromEntries(error.headers.entries()) : "N/A"
    }), error instanceof Response)
      throw console.log("\u{1F504} Re-throwing OAuth redirect response - Status:", error.status), console.log("\u{1F504} Redirect location:", error.headers.get("location")), error;
    return (0, import_node8.json)(
      {
        success: !1,
        error: error instanceof Error ? error.message : "Unknown error occurred"
      },
      { status: 500 }
    );
  }
};

// app/routes/webhooks.ts
var webhooks_exports = {};
__export(webhooks_exports, {
  action: () => action6
});
var import_node9 = require("@remix-run/node");
init_shopify_server();
init_db();
var action6 = async ({ request }) => {
  let { topic, shop, session } = await authenticate.webhook(request);
  if (!session)
    return (0, import_node9.json)({ error: "No session found" }, { status: 401 });
  try {
    let user = await db.user.findUnique({
      where: { shopId: shop }
    });
    if (!user)
      return (0, import_node9.json)({ error: "User not found" }, { status: 404 });
    switch (topic) {
      case "PRODUCTS_CREATE":
      case "PRODUCTS_UPDATE":
        await handleProductWebhook(user.id, session.shop, user.accessToken, topic);
        break;
      case "PRODUCTS_DELETE":
        await handleProductDelete(user.id, topic);
        break;
      default:
        console.log(`Unhandled webhook topic: ${topic}`);
    }
    return (0, import_node9.json)({ success: !0 });
  } catch (error) {
    if (console.error("Webhook error:", error), session?.shop) {
      let user = await db.user.findUnique({
        where: { shopId: session.shop }
      });
      user && await db.log.create({
        data: {
          userId: user.id,
          type: "error",
          message: `Webhook error: ${error instanceof Error ? error.message : "Unknown error"}`,
          error: error instanceof Error ? error.stack : String(error),
          metadata: {
            topic,
            timestamp: (/* @__PURE__ */ new Date()).toISOString()
          }
        }
      });
    }
    return (0, import_node9.json)(
      { error: error instanceof Error ? error.message : "Unknown error" },
      { status: 500 }
    );
  }
};
async function handleProductWebhook(userId, shopDomain, accessToken, topic) {
  try {
    await db.log.create({
      data: {
        userId,
        type: "webhook",
        message: `Product webhook triggered: ${topic}`,
        metadata: {
          topic,
          timestamp: (/* @__PURE__ */ new Date()).toISOString()
        }
      }
    }), console.log(`Product webhook received: ${topic} for shop: ${shopDomain}`);
  } catch (error) {
    throw console.error("Error handling product webhook:", error), error;
  }
}
async function handleProductDelete(userId, topic) {
  try {
    await db.log.create({
      data: {
        userId,
        type: "webhook",
        message: `Product deleted: ${topic}`,
        metadata: {
          topic,
          timestamp: (/* @__PURE__ */ new Date()).toISOString()
        }
      }
    }), console.log(`Product deletion webhook: ${topic}`);
  } catch (error) {
    throw console.error("Error handling product deletion webhook:", error), error;
  }
}

// app/routes/_index.tsx
var index_exports = {};
__export(index_exports, {
  action: () => action7,
  default: () => Index,
  loader: () => loader7
});
var import_node10 = require("@remix-run/node"), import_react6 = require("@remix-run/react"), import_react7 = __toESM(require_react());
var import_polaris2 = __toESM(require_cjs());
init_shopify_server();
init_db();

// app/components/HealthCheckModal.tsx
var import_react5 = __toESM(require_react()), import_polaris = __toESM(require_cjs()), import_polaris_icons = require("@shopify/polaris-icons"), import_jsx_dev_runtime3 = require("react/jsx-dev-runtime");
function HealthCheckModal({
  isOpen,
  onClose,
  jobId,
  currentScore = 0,
  currentGaps = []
}) {
  let [loading, setLoading] = (0, import_react5.useState)(!1), [results, setResults] = (0, import_react5.useState)(null), [toast, setToast] = (0, import_react5.useState)(null), [autoFixing, setAutoFixing] = (0, import_react5.useState)(!1);
  (0, import_react5.useEffect)(() => {
    isOpen && jobId && fetchResults();
  }, [isOpen, jobId]);
  let fetchResults = async () => {
    setLoading(!0);
    try {
      let formData = new FormData();
      formData.append("action", "get-results"), formData.append("jobId", jobId);
      let data = await (await fetch("/api/health-check", {
        method: "POST",
        body: formData
      })).json();
      data.success && data.result ? setResults(data.result) : setToast({ content: data.error || "Failed to fetch results", error: !0 });
    } catch {
      setToast({ content: "Failed to fetch results", error: !0 });
    } finally {
      setLoading(!1);
    }
  }, handleAutoFix = async () => {
    if (!results)
      return;
    let fixableGaps = results.gaps.filter((gap) => gap.fixable);
    if (fixableGaps.length === 0) {
      setToast({ content: "No fixable gaps found", error: !0 });
      return;
    }
    setAutoFixing(!0);
    try {
      let formData = new FormData();
      formData.append("action", "auto-fix"), formData.append("gapTypes", JSON.stringify(fixableGaps.map((gap) => gap.field)));
      let data = await (await fetch("/api/health-check", {
        method: "POST",
        body: formData
      })).json();
      data.success ? (setToast({ content: `Auto-fix initiated for ${fixableGaps.length} gaps` }), setTimeout(fetchResults, 2e3)) : setToast({ content: data.error || "Auto-fix failed", error: !0 });
    } catch {
      setToast({ content: "Auto-fix failed", error: !0 });
    } finally {
      setAutoFixing(!1);
    }
  }, getScoreColor = (score) => score >= 90 ? "success" : score >= 70 ? "warning" : "critical", getSeverityIcon = (severity) => {
    switch (severity) {
      case "critical":
        return import_polaris_icons.XCircleIcon;
      case "error":
        return import_polaris_icons.AlertTriangleIcon;
      case "warning":
        return import_polaris_icons.AlertTriangleIcon;
      default:
        return import_polaris_icons.CheckCircleIcon;
    }
  }, getSeverityColor = (severity) => {
    switch (severity) {
      case "critical":
        return "critical";
      case "error":
        return "critical";
      case "warning":
        return "warning";
      default:
        return "success";
    }
  }, formatTrend = (trends) => {
    if (trends.length < 2)
      return null;
    let latest = trends[trends.length - 1], previous = trends[trends.length - 2], diff = latest.score - previous.score;
    return {
      value: diff,
      icon: diff >= 0 ? import_polaris_icons.ArrowUpIcon : import_polaris_icons.ArrowDownIcon,
      color: diff >= 0 ? "success" : "critical"
    };
  }, gapsTableRows = results?.gaps.map((gap, index) => [
    /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.InlineStack, { gap: "200", align: "start", children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.Icon, { source: getSeverityIcon(gap.severity) }, void 0, !1, {
        fileName: "app/components/HealthCheckModal.tsx",
        lineNumber: 186,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.Text, { variant: "bodyMd", fontWeight: "medium", children: gap.field }, void 0, !1, {
        fileName: "app/components/HealthCheckModal.tsx",
        lineNumber: 187,
        columnNumber: 7
      }, this)
    ] }, index, !0, {
      fileName: "app/components/HealthCheckModal.tsx",
      lineNumber: 185,
      columnNumber: 5
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.Badge, { tone: getSeverityColor(gap.severity), children: gap.severity }, `badge-${index}`, !1, {
      fileName: "app/components/HealthCheckModal.tsx",
      lineNumber: 189,
      columnNumber: 5
    }, this),
    gap.count,
    gap.fixable ? "Yes" : "No"
  ]) || [], trendsTableRows = results?.trends.slice(-7).map((trend, index) => [
    new Date(trend.date).toLocaleDateString(),
    `${trend.score}%`,
    trend.totalProducts,
    trend.validProducts
  ]) || [];
  return /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_jsx_dev_runtime3.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(
      import_polaris.Modal,
      {
        open: isOpen,
        onClose,
        title: "Health Check Results",
        size: "large",
        children: /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.Modal.Section, { children: loading ? /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.InlineStack, { align: "center", children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.Spinner, { size: "large" }, void 0, !1, {
            fileName: "app/components/HealthCheckModal.tsx",
            lineNumber: 214,
            columnNumber: 15
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.Text, { variant: "bodyMd", children: "Analyzing your catalog..." }, void 0, !1, {
            fileName: "app/components/HealthCheckModal.tsx",
            lineNumber: 215,
            columnNumber: 15
          }, this)
        ] }, void 0, !0, {
          fileName: "app/components/HealthCheckModal.tsx",
          lineNumber: 213,
          columnNumber: 13
        }, this) : results ? /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.BlockStack, { gap: "400", children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.Card, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.BlockStack, { gap: "300", children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.InlineStack, { align: "space-between", children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.Text, { variant: "headingMd", children: "Overall Health Score" }, void 0, !1, {
                fileName: "app/components/HealthCheckModal.tsx",
                lineNumber: 223,
                columnNumber: 21
              }, this),
              /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.Badge, { tone: getScoreColor(results.score), children: [
                results.score,
                "%"
              ] }, void 0, !0, {
                fileName: "app/components/HealthCheckModal.tsx",
                lineNumber: 224,
                columnNumber: 21
              }, this)
            ] }, void 0, !0, {
              fileName: "app/components/HealthCheckModal.tsx",
              lineNumber: 222,
              columnNumber: 19
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(
              import_polaris.ProgressBar,
              {
                progress: results.score,
                size: "large",
                color: getScoreColor(results.score)
              },
              void 0,
              !1,
              {
                fileName: "app/components/HealthCheckModal.tsx",
                lineNumber: 229,
                columnNumber: 19
              },
              this
            ),
            /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.InlineStack, { gap: "400", align: "start", children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.Box, { children: [
                /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.Text, { variant: "bodyMd", color: "subdued", children: "Total Products" }, void 0, !1, {
                  fileName: "app/components/HealthCheckModal.tsx",
                  lineNumber: 237,
                  columnNumber: 23
                }, this),
                /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.Text, { variant: "headingMd", children: results.totalProducts }, void 0, !1, {
                  fileName: "app/components/HealthCheckModal.tsx",
                  lineNumber: 238,
                  columnNumber: 23
                }, this)
              ] }, void 0, !0, {
                fileName: "app/components/HealthCheckModal.tsx",
                lineNumber: 236,
                columnNumber: 21
              }, this),
              /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.Box, { children: [
                /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.Text, { variant: "bodyMd", color: "subdued", children: "Valid Products" }, void 0, !1, {
                  fileName: "app/components/HealthCheckModal.tsx",
                  lineNumber: 241,
                  columnNumber: 23
                }, this),
                /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.Text, { variant: "headingMd", children: results.validProducts }, void 0, !1, {
                  fileName: "app/components/HealthCheckModal.tsx",
                  lineNumber: 242,
                  columnNumber: 23
                }, this)
              ] }, void 0, !0, {
                fileName: "app/components/HealthCheckModal.tsx",
                lineNumber: 240,
                columnNumber: 21
              }, this),
              /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.Box, { children: [
                /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.Text, { variant: "bodyMd", color: "subdued", children: "Issues Found" }, void 0, !1, {
                  fileName: "app/components/HealthCheckModal.tsx",
                  lineNumber: 245,
                  columnNumber: 23
                }, this),
                /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.Text, { variant: "headingMd", children: results.gaps.length }, void 0, !1, {
                  fileName: "app/components/HealthCheckModal.tsx",
                  lineNumber: 246,
                  columnNumber: 23
                }, this)
              ] }, void 0, !0, {
                fileName: "app/components/HealthCheckModal.tsx",
                lineNumber: 244,
                columnNumber: 21
              }, this)
            ] }, void 0, !0, {
              fileName: "app/components/HealthCheckModal.tsx",
              lineNumber: 235,
              columnNumber: 19
            }, this),
            results.trends.length > 1 && /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.Box, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.InlineStack, { gap: "200", align: "start", children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.Text, { variant: "bodyMd", color: "subdued", children: "7-Day Trend" }, void 0, !1, {
                fileName: "app/components/HealthCheckModal.tsx",
                lineNumber: 253,
                columnNumber: 25
              }, this),
              (() => {
                let trend = formatTrend(results.trends);
                return trend ? /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.InlineStack, { gap: "100", children: [
                  /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.Icon, { source: trend.icon }, void 0, !1, {
                    fileName: "app/components/HealthCheckModal.tsx",
                    lineNumber: 258,
                    columnNumber: 31
                  }, this),
                  /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.Text, { variant: "bodyMd", color: trend.color, children: [
                    trend.value > 0 ? "+" : "",
                    trend.value.toFixed(1),
                    "%"
                  ] }, void 0, !0, {
                    fileName: "app/components/HealthCheckModal.tsx",
                    lineNumber: 259,
                    columnNumber: 31
                  }, this)
                ] }, void 0, !0, {
                  fileName: "app/components/HealthCheckModal.tsx",
                  lineNumber: 257,
                  columnNumber: 29
                }, this) : null;
              })()
            ] }, void 0, !0, {
              fileName: "app/components/HealthCheckModal.tsx",
              lineNumber: 252,
              columnNumber: 23
            }, this) }, void 0, !1, {
              fileName: "app/components/HealthCheckModal.tsx",
              lineNumber: 251,
              columnNumber: 21
            }, this)
          ] }, void 0, !0, {
            fileName: "app/components/HealthCheckModal.tsx",
            lineNumber: 221,
            columnNumber: 17
          }, this) }, void 0, !1, {
            fileName: "app/components/HealthCheckModal.tsx",
            lineNumber: 220,
            columnNumber: 15
          }, this),
          results.gaps.length > 0 && /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.Card, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.BlockStack, { gap: "300", children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.InlineStack, { align: "space-between", children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.Text, { variant: "headingMd", children: "Issues Found" }, void 0, !1, {
                fileName: "app/components/HealthCheckModal.tsx",
                lineNumber: 276,
                columnNumber: 23
              }, this),
              results.gaps.some((gap) => gap.fixable) && /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(
                import_polaris.Button,
                {
                  variant: "primary",
                  onClick: handleAutoFix,
                  loading: autoFixing,
                  disabled: autoFixing,
                  children: "Auto-Fix Fixable Issues"
                },
                void 0,
                !1,
                {
                  fileName: "app/components/HealthCheckModal.tsx",
                  lineNumber: 278,
                  columnNumber: 25
                },
                this
              )
            ] }, void 0, !0, {
              fileName: "app/components/HealthCheckModal.tsx",
              lineNumber: 275,
              columnNumber: 21
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(
              import_polaris.DataTable,
              {
                columnContentTypes: ["text", "text", "numeric", "text"],
                headings: ["Field", "Severity", "Count", "Fixable"],
                rows: gapsTableRows
              },
              void 0,
              !1,
              {
                fileName: "app/components/HealthCheckModal.tsx",
                lineNumber: 289,
                columnNumber: 21
              },
              this
            )
          ] }, void 0, !0, {
            fileName: "app/components/HealthCheckModal.tsx",
            lineNumber: 274,
            columnNumber: 19
          }, this) }, void 0, !1, {
            fileName: "app/components/HealthCheckModal.tsx",
            lineNumber: 273,
            columnNumber: 17
          }, this),
          results.trends.length > 0 && /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.Card, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.BlockStack, { gap: "300", children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.Text, { variant: "headingMd", children: "Health Score Trends (Last 7 Days)" }, void 0, !1, {
              fileName: "app/components/HealthCheckModal.tsx",
              lineNumber: 302,
              columnNumber: 21
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(
              import_polaris.DataTable,
              {
                columnContentTypes: ["text", "numeric", "numeric", "numeric"],
                headings: ["Date", "Score", "Total Products", "Valid Products"],
                rows: trendsTableRows
              },
              void 0,
              !1,
              {
                fileName: "app/components/HealthCheckModal.tsx",
                lineNumber: 303,
                columnNumber: 21
              },
              this
            )
          ] }, void 0, !0, {
            fileName: "app/components/HealthCheckModal.tsx",
            lineNumber: 301,
            columnNumber: 19
          }, this) }, void 0, !1, {
            fileName: "app/components/HealthCheckModal.tsx",
            lineNumber: 300,
            columnNumber: 17
          }, this),
          results.gaps.length === 0 && /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.Card, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.InlineStack, { align: "center", gap: "300", children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.Icon, { source: import_polaris_icons.CheckCircleIcon }, void 0, !1, {
              fileName: "app/components/HealthCheckModal.tsx",
              lineNumber: 316,
              columnNumber: 21
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.BlockStack, { gap: "200", children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.Text, { variant: "headingMd", children: "Excellent!" }, void 0, !1, {
                fileName: "app/components/HealthCheckModal.tsx",
                lineNumber: 318,
                columnNumber: 23
              }, this),
              /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.Text, { variant: "bodyMd", color: "subdued", children: "Your catalog is in great health. No issues were found." }, void 0, !1, {
                fileName: "app/components/HealthCheckModal.tsx",
                lineNumber: 319,
                columnNumber: 23
              }, this)
            ] }, void 0, !0, {
              fileName: "app/components/HealthCheckModal.tsx",
              lineNumber: 317,
              columnNumber: 21
            }, this)
          ] }, void 0, !0, {
            fileName: "app/components/HealthCheckModal.tsx",
            lineNumber: 315,
            columnNumber: 19
          }, this) }, void 0, !1, {
            fileName: "app/components/HealthCheckModal.tsx",
            lineNumber: 314,
            columnNumber: 17
          }, this)
        ] }, void 0, !0, {
          fileName: "app/components/HealthCheckModal.tsx",
          lineNumber: 218,
          columnNumber: 13
        }, this) : /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(import_polaris.Text, { variant: "bodyMd", color: "subdued", children: "No results available. Please try running the health check again." }, void 0, !1, {
          fileName: "app/components/HealthCheckModal.tsx",
          lineNumber: 328,
          columnNumber: 13
        }, this) }, void 0, !1, {
          fileName: "app/components/HealthCheckModal.tsx",
          lineNumber: 211,
          columnNumber: 9
        }, this)
      },
      void 0,
      !1,
      {
        fileName: "app/components/HealthCheckModal.tsx",
        lineNumber: 205,
        columnNumber: 7
      },
      this
    ),
    toast && /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(
      import_polaris.Toast,
      {
        content: toast.content,
        error: toast.error,
        onDismiss: () => setToast(null)
      },
      void 0,
      !1,
      {
        fileName: "app/components/HealthCheckModal.tsx",
        lineNumber: 336,
        columnNumber: 9
      },
      this
    )
  ] }, void 0, !0, {
    fileName: "app/components/HealthCheckModal.tsx",
    lineNumber: 204,
    columnNumber: 5
  }, this);
}

// app/routes/_index.tsx
init_openaiSpec();
var import_jsx_dev_runtime4 = require("react/jsx-dev-runtime"), loader7 = async ({ request }) => {
  let requestId = Math.random().toString(36).substring(7), startTime = Date.now();
  try {
    console.log(`\u{1F50D} [${requestId}] DEBUG - Starting authentication for request:`, request.url), console.log(`\u{1F50D} [${requestId}] DEBUG - Request headers:`, Object.fromEntries(request.headers.entries()));
    let { session } = await authenticate.admin(request);
    console.log(`\u{1F50D} [${requestId}] DEBUG - Session shop:`, session.shop), console.log(`\u{1F50D} [${requestId}] DEBUG - Session exists:`, !!session), console.log(`\u{1F50D} [${requestId}] DEBUG - Access token exists:`, !!session.accessToken), console.log(`\u{1F50D} [${requestId}] DEBUG - Session ID:`, session.id), console.log(`\u{1F50D} [${requestId}] DEBUG - Session scope:`, session.scope), console.log(`\u{1F50D} [${requestId}] DEBUG - Session isOnline:`, session.isOnline), console.log(`\u{1F50D} [${requestId}] DEBUG - Session expires:`, session.expires), console.log(`\u{1F50D} [${requestId}] DEBUG - Access token length:`, session.accessToken?.length), console.log(`\u{1F50D} [${requestId}] DEBUG - Access token prefix:`, session.accessToken?.substring(0, 15) + "...");
    let user = null, latestAudit = null, recentLogs = [];
    try {
      user = await db.user.findUnique({
        where: { shopId: session.shop }
      }), user && (latestAudit = await db.audit.findFirst({
        where: { userId: user.id },
        orderBy: { timestamp: "desc" }
      }), await db.log.deleteMany({
        where: {
          userId: user.id,
          message: {
            contains: "GraphQL Error"
          }
        }
      }), recentLogs = await db.log.findMany({
        where: {
          userId: user.id,
          // Filter out logs with raw error details
          message: {
            not: {
              contains: "GraphQL Error"
            }
          }
        },
        orderBy: { createdAt: "desc" },
        take: 3
      }));
    } catch (dbError) {
      console.error("Database error in loader:", dbError);
    }
    let products = [], totalProducts = 0, averageScore = 0;
    if (user)
      try {
        let { sessionStorage: sessionStorage2 } = await Promise.resolve().then(() => (init_shopify_server(), shopify_server_exports)), offlineSessionId = `offline_${session.shop}`;
        console.log(`\u{1F511} [${requestId}] Loading offline session:`, offlineSessionId);
        let offlineSession = await sessionStorage2.loadSession(offlineSessionId);
        if (console.log(`\u{1F50D} [${requestId}] Offline session found:`, !!offlineSession), console.log(`\u{1F50D} [${requestId}] Offline session has accessToken:`, !!offlineSession?.accessToken), offlineSession && (console.log(`\u{1F50D} [${requestId}] Offline session details:`), console.log(`\u{1F50D} [${requestId}] - ID:`, offlineSession.id), console.log(`\u{1F50D} [${requestId}] - Shop:`, offlineSession.shop), console.log(`\u{1F50D} [${requestId}] - Scope:`, offlineSession.scope), console.log(`\u{1F50D} [${requestId}] - IsOnline:`, offlineSession.isOnline), console.log(`\u{1F50D} [${requestId}] - Expires:`, offlineSession.expires), console.log(`\u{1F50D} [${requestId}] - Access token length:`, offlineSession.accessToken?.length), console.log(`\u{1F50D} [${requestId}] - Access token prefix:`, offlineSession.accessToken?.substring(0, 15) + "...")), offlineSession?.accessToken) {
          console.log("\u2705 Offline session loaded, has accessToken: true"), console.log("\u{1F511} Access token prefix:", offlineSession.accessToken.substring(0, 15) + "..."), console.log("\u{1F511} Access token length:", offlineSession.accessToken.length);
          let { ShopifySyncService: ShopifySyncService2 } = await Promise.resolve().then(() => (init_shopifySync(), shopifySync_exports)), { mapShopifyToSpec: mapShopifyToSpec2, calculateProductScore: calculateProductScore2 } = await Promise.resolve().then(() => (init_fieldMapper(), fieldMapper_exports)), shopifyProducts = await new ShopifySyncService2(session.shop, offlineSession.accessToken).syncProducts(user.id), storedProducts = await db.product.findMany({
            where: { userId: user.id },
            select: {
              shopifyId: !0,
              recommendations: !0
            }
          }), recommendationsMap = /* @__PURE__ */ new Map();
          storedProducts.forEach((sp) => {
            sp.recommendations && recommendationsMap.set(sp.shopifyId, sp.recommendations);
          }), products = shopifyProducts.map((shopifyProduct) => {
            let spec = mapShopifyToSpec2(shopifyProduct), scoreData = calculateProductScore2(spec), productId = shopifyProduct.id.replace("gid://shopify/Product/", "");
            return {
              id: productId,
              title: shopifyProduct.title || "Untitled Product",
              description: shopifyProduct.description || "No description",
              score: scoreData.score,
              gaps: scoreData.gaps,
              rawProduct: shopifyProduct,
              // Store raw product for detail view
              spec,
              // Store mapped spec for recommendations
              recommendations: recommendationsMap.get(productId) || null
              // Include stored recommendations
            };
          }), totalProducts = shopifyProducts.length, averageScore = products.length > 0 ? Math.round(products.reduce((sum, p) => sum + p.score, 0) / products.length) : 0;
        } else
          console.log("\u274C Offline session not found or no access token"), console.log("\u{1F50D} Offline session exists:", !!offlineSession), console.log("\u{1F50D} Access token exists:", !!offlineSession?.accessToken), console.log("\u26A0\uFE0F This usually means the app needs to be reinstalled to get a fresh session");
      } catch (error) {
        if (console.error("Error fetching products in loader:", error), console.log(`\u274C [${requestId}] Error type:`, error?.constructor?.name), console.log(`\u274C [${requestId}] Error message:`, error instanceof Error ? error.message : "Unknown error"), console.log(`\u274C [${requestId}] Error stack:`, error instanceof Error ? error.stack : "No stack trace"), error instanceof Error && error.message.includes("401")) {
          console.log(`\u{1F511} [${requestId}] Authentication error detected - clearing invalid session`), console.log(`\u26A0\uFE0F [${requestId}] The access token is invalid/expired. Clearing session to force re-authentication.`), console.log(`\u{1F50D} [${requestId}] Error details:`, {
            message: error.message,
            stack: error.stack,
            isGraphQLError: error.message.includes("GraphQL Error"),
            is401Error: error.message.includes("401"),
            errorType: error.constructor.name
          });
          try {
            let { sessionStorage: sessionStorage2 } = await Promise.resolve().then(() => (init_shopify_server(), shopify_server_exports)), offlineSessionId = `offline_${session.shop}`;
            console.log(`\u{1F5D1}\uFE0F [${requestId}] Deleting invalid offline session:`, offlineSessionId), await sessionStorage2.deleteSession(offlineSessionId), console.log(`\u2705 [${requestId}] Invalid session cleared - next page load will trigger fresh authentication`), user && await db.log.create({
              data: {
                userId: user.id,
                type: "warning",
                message: `Invalid session cleared for shop ${session.shop} - 401 authentication error`,
                metadata: {
                  requestId,
                  sessionId: offlineSessionId,
                  errorMessage: error.message,
                  timestamp: (/* @__PURE__ */ new Date()).toISOString()
                }
              }
            });
          } catch (clearError) {
            console.error(`\u274C [${requestId}] Error clearing session:`, clearError);
          }
        } else
          console.log(`\u{1F50D} [${requestId}] Non-authentication error detected:`, {
            errorType: error?.constructor?.name,
            message: error instanceof Error ? error.message : "Unknown error",
            isResponse: error instanceof Response,
            responseStatus: error instanceof Response ? error.status : "N/A"
          });
        products = [
          {
            id: "1",
            title: "Sample Product 1",
            description: "Basic product description",
            score: 75,
            gaps: ["material", "weight"]
          },
          {
            id: "2",
            title: "Sample Product 2",
            description: "Another product with minimal details",
            score: 60,
            gaps: ["material", "dimensions", "use_cases"]
          },
          {
            id: "3",
            title: "Sample Product 3",
            description: "Well-described product with comprehensive details",
            score: 95,
            gaps: []
          }
        ];
      }
    let dashboardMetrics = ((products2, user2) => {
      let totalProducts2 = products2.length, validProducts = products2.filter((p) => p.score >= 90).length, warningProducts = products2.filter((p) => p.score >= 70 && p.score < 90).length, invalidProducts = products2.filter((p) => p.score < 70).length, productsPassedPercentage = totalProducts2 > 0 ? Math.round(validProducts / totalProducts2 * 100) : 0, aiReadinessScore = Math.round(averageScore), optimizationProgress = Math.round(averageScore), lastSyncTime = null;
      return user2 && (lastSyncTime = /* @__PURE__ */ new Date()), {
        aiReadinessScore,
        totalProducts: totalProducts2,
        validProducts,
        warningProducts,
        invalidProducts,
        productsPassedPercentage,
        lastSyncTime,
        optimizationProgress
      };
    })(products, user), duration = Date.now() - startTime;
    return console.log(`\u2705 [${requestId}] Loader completed successfully in ${duration}ms`), console.log(`\u{1F4CA} [${requestId}] Results:`, {
      productsCount: products.length,
      totalProducts,
      averageScore,
      userExists: !!user,
      lastSync: recentLogs.find((log) => log.type === "sync")?.createdAt || null,
      recentLogsCount: recentLogs.length
    }), (0, import_node10.json)({
      shop: session.shop,
      user,
      products,
      totalProducts,
      averageScore,
      dashboardMetrics,
      lastSync: recentLogs.find((log) => log.type === "sync")?.createdAt || null,
      recentLogs: recentLogs.map((log) => ({
        id: log.id,
        type: log.type,
        message: log.message,
        createdAt: log.createdAt
      }))
    });
  } catch (error) {
    if (console.error("\u274C ERROR in index loader:", error), console.error("\u274C ERROR details:", {
      message: error.message,
      stack: error.stack,
      name: error.name
    }), error instanceof Response)
      throw console.log("\u{1F504} Re-throwing OAuth redirect response"), error;
    return (0, import_node10.json)({
      shop: "unknown",
      products: [],
      user: null,
      totalProducts: 0,
      averageScore: 0,
      lastSync: null,
      recentLogs: []
    });
  }
}, action7 = async ({ request }) => {
  console.log("\u{1F3AF} INDEX ACTION CALLED");
  try {
    let { admin, session } = await authenticate.admin(request);
    console.log("\u2705 Authentication successful in index action"), console.log("\u{1F511} Admin API client available:", !!admin), console.log("\u{1F4CD} Session shop:", session.shop);
    let formData = await request.formData(), actionType = formData.get("action");
    if (actionType === "sync") {
      console.log("\u{1F680} Starting sync in index action");
      let user = await db.user.findUnique({
        where: { shopId: session.shop }
      });
      if (!user)
        return console.log("\u274C User not found for shop:", session.shop), (0, import_node10.json)({ success: !1, error: "User not found" }, { status: 404 });
      console.log("\u{1F464} User ID:", user.id);
      let { sessionStorage: sessionStorage2 } = await Promise.resolve().then(() => (init_shopify_server(), shopify_server_exports)), offlineSessionId = `offline_${session.shop}`;
      console.log("\u{1F511} Loading offline session:", offlineSessionId);
      let offlineSession = await sessionStorage2.loadSession(offlineSessionId);
      if (!offlineSession)
        return console.log("\u274C Offline session not found"), (0, import_node10.json)({ success: !1, error: "Offline session not found. Please reinstall the app." }, { status: 401 });
      console.log("\u2705 Offline session loaded, has accessToken:", !!offlineSession.accessToken), console.log("\u{1F511} Access token prefix:", offlineSession.accessToken?.substring(0, 15) + "..."), console.log("\u{1F511} Access token length:", offlineSession.accessToken?.length), console.log("\u{1F50D} Session scope:", offlineSession.scope), console.log("\u{1F50D} Session isOnline:", offlineSession.isOnline);
      let { GraphQLClient: GraphQLClient2 } = await import("graphql-request"), graphqlClient = new GraphQLClient2(
        `https://${session.shop}/admin/api/2025-10/graphql`,
        {
          headers: {
            "X-Shopify-Access-Token": offlineSession.accessToken,
            "Content-Type": "application/json"
          }
        }
      );
      console.log("\u{1F4E6} Starting product sync with offline access token...");
      let PRODUCTS_QUERY2 = `
        query getProducts($first: Int!, $after: String) {
          products(first: $first, after: $after) {
            pageInfo {
              hasNextPage
              endCursor
            }
            edges {
              node {
                id
                title
                description
                handle
                productType
                vendor
                tags
                variants(first: 100) {
                  edges {
                    node {
                      id
                      title
                      price
                      compareAtPrice
                      sku
                      inventoryQuantity
                      availableForSale
                    }
                  }
                }
                metafields(first: 100) {
                  edges {
                    node {
                      id
                      namespace
                      key
                      value
                      type
                    }
                  }
                }
                images(first: 10) {
                  edges {
                    node {
                      id
                      url
                      altText
                    }
                  }
                }
              }
            }
          }
        }
      `, allProducts = [], hasNextPage = !0, after, pageCount = 0;
      for (; hasNextPage; ) {
        pageCount++, console.log(`\u{1F4C4} Fetching page ${pageCount}${after ? " (after cursor)" : " (first page)"}`);
        let response = await graphqlClient.request(PRODUCTS_QUERY2, {
          first: 250,
          after
        });
        console.log("\u{1F4E6} Products in this page:", response.products?.edges?.length || 0), response.products?.edges && allProducts.push(...response.products.edges), hasNextPage = response.products?.pageInfo?.hasNextPage || !1, after = response.products?.pageInfo?.endCursor, hasNextPage && (console.log("\u23F3 Waiting 500ms before next request..."), await new Promise((resolve) => setTimeout(resolve, 500)));
      }
      console.log("\u2705 Product sync completed:", allProducts.length, "products"), await db.log.create({
        data: {
          userId: user.id,
          type: "sync",
          message: `Synchronized ${allProducts.length} products from Shopify`,
          metadata: {
            productsCount: allProducts.length,
            timestamp: (/* @__PURE__ */ new Date()).toISOString()
          }
        }
      }), console.log("\u{1F4DD} Creating audit record...");
      let audit = await db.audit.create({
        data: {
          userId: user.id,
          score: 0,
          // Will be calculated after field mapping
          totalProducts: allProducts.length,
          validProducts: 0,
          // Will be calculated after validation
          gaps: []
          // Will be populated after field mapping and validation
        }
      });
      return console.log("\u2705 Audit record created:", audit.id), (0, import_node10.json)({
        success: !0,
        message: `Successfully synced ${allProducts.length} products`,
        data: {
          productsCount: allProducts.length,
          auditId: audit.id
        }
      });
    }
    if (actionType === "generate-recommendations") {
      console.log("\u{1F916} Generating AI recommendations for single product");
      let user = await db.user.findUnique({
        where: { shopId: session.shop }
      });
      if (!user)
        return (0, import_node10.json)({ success: !1, error: "User not found" }, { status: 404 });
      let productId = formData.get("productId");
      if (console.log("\u{1F3AF} Product ID:", productId), !(formData.get("forceRegenerate") === "true")) {
        let existingProduct = await db.product.findFirst({
          where: {
            userId: user.id,
            shopifyId: productId
          }
        });
        if (existingProduct?.recommendations) {
          let recData = existingProduct.recommendations;
          return console.log("\u{1F4CB} Returning existing recommendations for product:", productId), (0, import_node10.json)({
            success: !0,
            recommendations: recData.recommendations || [],
            isExisting: !0
          });
        }
      }
      let { sessionStorage: sessionStorage2 } = await Promise.resolve().then(() => (init_shopify_server(), shopify_server_exports)), offlineSessionId = `offline_${session.shop}`, offlineSession = await sessionStorage2.loadSession(offlineSessionId);
      if (!offlineSession?.accessToken)
        return (0, import_node10.json)({
          success: !1,
          error: "Offline session not found. Please reinstall the app."
        }, { status: 401 });
      let { ShopifySyncService: ShopifySyncService2 } = await Promise.resolve().then(() => (init_shopifySync(), shopifySync_exports)), { AIEnrichmentService: AIEnrichmentService2 } = await Promise.resolve().then(() => (init_aiEnrich(), aiEnrich_exports)), product = (await new ShopifySyncService2(session.shop, offlineSession.accessToken).syncProducts(user.id)).find((p) => p.id.includes(productId));
      if (!product)
        return (0, import_node10.json)({ success: !1, error: "Product not found" }, { status: 404 });
      let { mapShopifyToSpec: mapShopifyToSpec2, calculateProductScore: calculateProductScore2 } = await Promise.resolve().then(() => (init_fieldMapper(), fieldMapper_exports)), spec = mapShopifyToSpec2(product), gaps = calculateProductScore2(spec).gaps;
      console.log("\u{1F3AF} Product gaps identified:", gaps);
      let result = await new AIEnrichmentService2().enrichProduct(user.id, product, gaps);
      console.log("\u2705 Generated recommendations:", result.improvements.length);
      let recommendationData = {
        recommendations: result.improvements.map((rec) => ({
          ...rec,
          status: "pending"
          // pending, approved, rejected, applied
        })),
        generatedAt: (/* @__PURE__ */ new Date()).toISOString(),
        lastUpdated: (/* @__PURE__ */ new Date()).toISOString()
      };
      return await db.product.upsert({
        where: {
          userId_shopifyId: {
            userId: user.id,
            shopifyId: productId
          }
        },
        create: {
          userId: user.id,
          shopifyId: productId,
          title: product.title,
          recommendations: recommendationData
        },
        update: {
          recommendations: recommendationData
        }
      }), console.log("\u{1F4BE} Stored recommendations in database for product:", productId), (0, import_node10.json)({
        success: !0,
        recommendations: recommendationData.recommendations,
        isExisting: !1
      });
    }
    if (actionType === "apply-recommendations") {
      console.log("\u{1F4DD} Applying approved recommendations to Shopify");
      let user = await db.user.findUnique({
        where: { shopId: session.shop }
      });
      if (!user)
        return (0, import_node10.json)({ success: !1, error: "User not found" }, { status: 404 });
      let productId = formData.get("productId"), approvedRecommendationsJson = formData.get("approvedRecommendations"), approvedRecommendations = JSON.parse(approvedRecommendationsJson);
      if (console.log("\u{1F3AF} Product ID:", productId), console.log("\u2705 Approved recommendations:", approvedRecommendations.length), console.log("\u{1F4CB} Approved recommendation fields:", approvedRecommendations.map((r) => r.field)), !Array.isArray(approvedRecommendations) || approvedRecommendations.length === 0)
        return (0, import_node10.json)({
          success: !1,
          error: "No approved recommendations provided"
        }, { status: 400 });
      let productRecord = await db.product.findFirst({
        where: {
          userId: user.id,
          shopifyId: productId
        }
      }), updatedRecommendationData = null;
      if (productRecord?.recommendations) {
        let recData = productRecord.recommendations, approvedFields = approvedRecommendations.map((r) => r.field);
        updatedRecommendationData = {
          ...recData,
          recommendations: recData.recommendations.map((rec) => ({
            ...rec,
            status: approvedFields.includes(rec.field) ? "applied" : rec.status
          })),
          lastUpdated: (/* @__PURE__ */ new Date()).toISOString()
        };
      }
      let { sessionStorage: sessionStorage2 } = await Promise.resolve().then(() => (init_shopify_server(), shopify_server_exports)), offlineSessionId = `offline_${session.shop}`, offlineSession = await sessionStorage2.loadSession(offlineSessionId);
      if (!offlineSession?.accessToken)
        return (0, import_node10.json)({
          success: !1,
          error: "Offline session not found. Please reinstall the app."
        }, { status: 401 });
      let { ShopifySyncService: ShopifySyncService2 } = await Promise.resolve().then(() => (init_shopifySync(), shopifySync_exports)), { mapShopifyToSpec: mapShopifyToSpec2, calculateProductScore: calculateProductScore2 } = await Promise.resolve().then(() => (init_fieldMapper(), fieldMapper_exports)), syncService = new ShopifySyncService2(session.shop, offlineSession.accessToken), product = (await syncService.syncProducts(user.id)).find((p) => p.id.includes(productId));
      if (!product)
        return (0, import_node10.json)({ success: !1, error: "Product not found" }, { status: 404 });
      let initialSpec = mapShopifyToSpec2(product), initialScore = calculateProductScore2(initialSpec).score;
      console.log("\u{1F4CA} Initial product score:", initialScore);
      let { AIEnrichmentService: AIEnrichmentService2 } = await Promise.resolve().then(() => (init_aiEnrich(), aiEnrich_exports)), enrichmentService = new AIEnrichmentService2(), partialResult = {
        originalProduct: product,
        enrichedSpec: {},
        improvements: approvedRecommendations,
        totalUsage: 0,
        errors: []
      }, success = await enrichmentService.applyEnrichmentToShopify(
        user.id,
        session.shop,
        offlineSession.accessToken,
        partialResult
      );
      console.log("\u2705 Applied changes to Shopify:", success);
      let finalScore = initialScore;
      if (success)
        try {
          let updatedProduct = (await syncService.syncProducts(user.id)).find((p) => p.id.includes(productId));
          if (updatedProduct) {
            let updatedSpec = mapShopifyToSpec2(updatedProduct);
            finalScore = calculateProductScore2(updatedSpec).score, console.log("\u{1F4CA} Final product score:", finalScore), console.log("\u{1F4C8} Score improvement:", finalScore - initialScore);
          }
        } catch (error) {
          console.warn("Could not validate score improvement:", error);
        }
      return updatedRecommendationData && productRecord && (await db.product.update({
        where: { id: productRecord.id },
        data: {
          recommendations: updatedRecommendationData
        }
      }), console.log("\u{1F4BE} Updated recommendation status to applied in database")), await db.log.create({
        data: {
          userId: user.id,
          type: "enrichment",
          message: `Applied ${approvedRecommendations.length} approved AI recommendations to product ${productId}`,
          metadata: {
            productId,
            approvedCount: approvedRecommendations.length,
            timestamp: (/* @__PURE__ */ new Date()).toISOString()
          }
        }
      }), (0, import_node10.json)({
        success: !0,
        appliedCount: approvedRecommendations.length,
        scoreImprovement: {
          initial: initialScore,
          final: finalScore,
          improvement: finalScore - initialScore
        }
      });
    }
    if (actionType === "save-customer-input") {
      console.log("\u{1F4BE} Saving customer input data");
      let user = await db.user.findUnique({
        where: { shopId: session.shop }
      });
      if (!user)
        return (0, import_node10.json)({ success: !1, error: "User not found" }, { status: 404 });
      let productId = formData.get("productId"), inputDataJson = formData.get("inputData"), inputData = JSON.parse(inputDataJson);
      console.log("\u{1F3AF} Product ID:", productId), console.log("\u{1F4DD} Input data:", inputData);
      let { sessionStorage: sessionStorage2 } = await Promise.resolve().then(() => (init_shopify_server(), shopify_server_exports)), offlineSessionId = `offline_${session.shop}`, offlineSession = await sessionStorage2.loadSession(offlineSessionId);
      if (!offlineSession?.accessToken)
        return (0, import_node10.json)({
          success: !1,
          error: "Offline session not found. Please reinstall the app."
        }, { status: 401 });
      let { GraphQLClient: GraphQLClient2 } = await import("graphql-request"), graphqlClient = new GraphQLClient2(
        `https://${session.shop}/admin/api/2025-10/graphql`,
        {
          headers: {
            "X-Shopify-Access-Token": offlineSession.accessToken,
            "Content-Type": "application/json"
          }
        }
      ), appliedCount = 0, appliedFields = [];
      for (let [field, value] of Object.entries(inputData))
        try {
          let metafieldValue = value, metafieldType = "single_line_text_field";
          if (field.startsWith("dimensions_"))
            continue;
          (field === "specifications" || field === "warranty" || field === "return_policy") && (metafieldType = "multi_line_text_field");
          let CREATE_METAFIELD_MUTATION = `
            mutation metafieldsSet($metafields: [MetafieldsSetInput!]!) {
              metafieldsSet(metafields: $metafields) {
                metafields {
                  id
                  namespace
                  key
                  value
                }
                userErrors {
                  field
                  message
                }
              }
            }
          `, response = await graphqlClient.request(CREATE_METAFIELD_MUTATION, {
            metafields: [
              {
                ownerId: `gid://shopify/Product/${productId}`,
                namespace: "catalogai",
                key: field,
                type: metafieldType,
                value: metafieldValue
              }
            ]
          });
          response.metafieldsSet.userErrors?.length ? console.error(`\u274C Error applying ${field}:`, response.metafieldsSet.userErrors) : (appliedCount++, appliedFields.push(field), console.log(`\u2705 Applied ${field}: ${metafieldValue}`));
        } catch (error) {
          console.error(`\u274C Error applying ${field}:`, error);
        }
      let dimensionData = ["dimensions_length", "dimensions_width", "dimensions_height"].reduce((acc, key) => {
        if (inputData[key]) {
          let dimKey = key.replace("dimensions_", "");
          acc[dimKey] = inputData[key];
        }
        return acc;
      }, {});
      if (Object.keys(dimensionData).length > 0)
        try {
          let CREATE_METAFIELD_MUTATION = `
            mutation metafieldsSet($metafields: [MetafieldsSetInput!]!) {
              metafieldsSet(metafields: $metafields) {
                metafields {
                  id
                  namespace
                  key
                  value
                }
                userErrors {
                  field
                  message
                }
              }
            }
          `;
          (await graphqlClient.request(CREATE_METAFIELD_MUTATION, {
            metafields: [
              {
                ownerId: `gid://shopify/Product/${productId}`,
                namespace: "catalogai",
                key: "dimensions",
                type: "json",
                value: JSON.stringify(dimensionData)
              }
            ]
          })).metafieldsSet.userErrors?.length || (appliedCount++, appliedFields.push("dimensions"), console.log("\u2705 Applied dimensions:", dimensionData));
        } catch (error) {
          console.error("\u274C Error applying dimensions:", error);
        }
      return await db.log.create({
        data: {
          userId: user.id,
          type: "customer_input",
          message: `Applied ${appliedCount} customer input fields to product ${productId}`,
          metadata: {
            productId,
            appliedFields,
            appliedCount,
            timestamp: (/* @__PURE__ */ new Date()).toISOString()
          }
        }
      }), (0, import_node10.json)({
        success: !0,
        appliedCount,
        appliedFields,
        message: `Successfully saved ${appliedCount} fields to your product!`
      });
    }
    return (0, import_node10.json)({ success: !0 });
  } catch (error) {
    if (console.error("\u274C Error in index action:", error), error instanceof Response)
      throw console.log("\u{1F504} Re-throwing OAuth redirect response"), error;
    let userFriendlyError = "Sync failed. Please try again.";
    error instanceof Error && (error.message.includes("401") || error.message.includes("Unauthorized") ? userFriendlyError = "Authentication failed. Please reinstall the app." : error.message.includes("403") || error.message.includes("Forbidden") ? userFriendlyError = "Insufficient permissions. Please check app permissions." : error.message.includes("429") || error.message.includes("rate limit") ? userFriendlyError = "Rate limit exceeded. Please try again in a few minutes." : error.message.includes("GraphQL") && (userFriendlyError = "API connection failed. Please try again."));
    try {
      let { session } = await authenticate.admin(request), user = await db.user.findUnique({
        where: { shopId: session.shop }
      });
      user && await db.log.create({
        data: {
          userId: user.id,
          type: "error",
          message: userFriendlyError,
          error: error instanceof Error ? error.message : "Unknown error",
          metadata: {
            timestamp: (/* @__PURE__ */ new Date()).toISOString(),
            action: "sync"
          }
        }
      });
    } catch (logError) {
      console.error("Failed to log error:", logError);
    }
    return (0, import_node10.json)(
      {
        success: !1,
        error: userFriendlyError
      },
      { status: 500 }
    );
  }
};
function Index() {
  let loaderData = (0, import_react6.useLoaderData)(), { shop, totalProducts, averageScore, dashboardMetrics, lastSync, recentLogs, user } = loaderData, [products, setProducts] = (0, import_react7.useState)(loaderData.products), [isSyncing, setIsSyncing] = (0, import_react7.useState)(!1), [isHealthChecking, setIsHealthChecking] = (0, import_react7.useState)(!1), [toastActive, setToastActive] = (0, import_react7.useState)(!1), [toastMessage, setToastMessage] = (0, import_react7.useState)(""), [healthModalOpen, setHealthModalOpen] = (0, import_react7.useState)(!1), [healthCheckJobId, setHealthCheckJobId] = (0, import_react7.useState)(), [selectedProduct, setSelectedProduct] = (0, import_react7.useState)(null), [productModalOpen, setProductModalOpen] = (0, import_react7.useState)(!1), [recommendations, setRecommendations] = (0, import_react7.useState)([]), [approvalState, setApprovalState] = (0, import_react7.useState)({}), [isGeneratingRecommendations, setIsGeneratingRecommendations] = (0, import_react7.useState)(!1), [isApplyingChanges, setIsApplyingChanges] = (0, import_react7.useState)(!1), [justAppliedChanges, setJustAppliedChanges] = (0, import_react7.useState)(!1), [customerInputOpen, setCustomerInputOpen] = (0, import_react7.useState)(!1), [customerInputData, setCustomerInputData] = (0, import_react7.useState)({}), [isSavingCustomerInput, setIsSavingCustomerInput] = (0, import_react7.useState)(!1), [showOnlyLowHealth, setShowOnlyLowHealth] = (0, import_react7.useState)(!1), [showOnlyNoDescription, setShowOnlyNoDescription] = (0, import_react7.useState)(!1), syncFetcher = (0, import_react6.useFetcher)(), healthCheckFetcher = (0, import_react6.useFetcher)(), recommendationFetcher = (0, import_react6.useFetcher)(), customerInputFetcher = (0, import_react6.useFetcher)();
  (0, import_react7.useEffect)(() => {
    setProducts(loaderData.products);
  }, [loaderData.products]);
  let handleSync = () => {
    setIsSyncing(!0), syncFetcher.submit(
      { action: "sync" },
      { method: "post" }
      // Same route action, no need to specify action path
    );
  }, handleHealthCheck = () => {
    setIsHealthChecking(!0), healthCheckFetcher.submit(
      {},
      { method: "get", action: "/api/health-check" }
    );
  }, handleProductClick = (product) => {
    if (setSelectedProduct(product), setProductModalOpen(!0), setJustAppliedChanges(!1), product.recommendations?.recommendations) {
      console.log("\u{1F4CB} Loading existing recommendations for product:", product.id);
      let existingRecs = product.recommendations.recommendations;
      setRecommendations(existingRecs);
      let approvalState2 = {};
      existingRecs.forEach((rec) => {
        rec.status === "approved" || rec.status === "applied" ? approvalState2[rec.field] = !0 : rec.status === "rejected" && (approvalState2[rec.field] = !1);
      }), setApprovalState(approvalState2);
    } else
      setRecommendations([]), setApprovalState({});
  }, handleGenerateRecommendations = () => {
    selectedProduct && (setIsGeneratingRecommendations(!0), setJustAppliedChanges(!1), recommendationFetcher.submit(
      {
        action: "generate-recommendations",
        productId: selectedProduct.id,
        forceRegenerate: recommendations.length > 0 ? "true" : "false"
        // Force regenerate if called from regenerate button
      },
      { method: "post" }
    ));
  }, handleToggleApproval = (fieldName, newState) => {
    setApprovalState((prev) => ({
      ...prev,
      [fieldName]: newState !== void 0 ? newState : prev[fieldName] === !0 ? !1 : prev[fieldName] === !1 ? void 0 : !0
    }));
  }, handleApplyChanges = () => {
    if (!selectedProduct)
      return;
    let approvedRecommendations = recommendations.filter(
      (rec) => approvalState[rec.field] === !0
    ), rejectedRecommendations = recommendations.filter(
      (rec) => approvalState[rec.field] === !1
    ), pendingRecommendations = recommendations.filter(
      (rec) => approvalState[rec.field] === void 0
    );
    if (console.log("\u{1F4CA} Approval Summary:", {
      total: recommendations.length,
      approved: approvedRecommendations.length,
      rejected: rejectedRecommendations.length,
      pending: pendingRecommendations.length,
      approvedFields: approvedRecommendations.map((r) => r.field),
      rejectedFields: rejectedRecommendations.map((r) => r.field)
    }), approvedRecommendations.length === 0) {
      setToastMessage("Please approve at least one recommendation before applying changes"), setToastActive(!0);
      return;
    }
    console.log("\u{1F680} Starting apply changes..."), console.log("\u{1F4CB} Approved recommendations to apply:", approvedRecommendations), setIsApplyingChanges(!0), recommendationFetcher.submit(
      {
        action: "apply-recommendations",
        productId: selectedProduct.id,
        approvedRecommendations: JSON.stringify(approvedRecommendations)
      },
      { method: "post" }
    );
  };
  if (syncFetcher.data && isSyncing) {
    let data = syncFetcher.data;
    data.success ? (setToastMessage(`Successfully synced ${data.data?.productsCount || 0} products`), setToastActive(!0)) : (setToastMessage(`Sync failed: ${data.error}`), setToastActive(!0)), setIsSyncing(!1);
  }
  if (healthCheckFetcher.data && isHealthChecking) {
    let data = healthCheckFetcher.data;
    data.success ? (setHealthCheckJobId(data.jobId), setHealthModalOpen(!0), setToastMessage(`Health scan initiated - analyzing ${data.currentScore}% current score`), setToastActive(!0)) : (setToastMessage(`Health check failed: ${data.error}`), setToastActive(!0)), setIsHealthChecking(!1);
  }
  if (recommendationFetcher.data && isGeneratingRecommendations) {
    let data = recommendationFetcher.data;
    if (data.success && data.recommendations) {
      if (setRecommendations(data.recommendations), data.isExisting ? setToastMessage(`Loaded existing ${data.recommendations.length} AI recommendations`) : setToastMessage(`Generated ${data.recommendations.length} new AI recommendations`), setToastActive(!0), data.isExisting) {
        let approvalState2 = {};
        data.recommendations.forEach((rec) => {
          rec.status === "approved" || rec.status === "applied" ? approvalState2[rec.field] = !0 : rec.status === "rejected" && (approvalState2[rec.field] = !1);
        }), setApprovalState(approvalState2);
      }
    } else
      data.error && (setToastMessage(`Failed to generate recommendations: ${data.error}`), setToastActive(!0));
    setIsGeneratingRecommendations(!1);
  }
  if (recommendationFetcher.data && isApplyingChanges) {
    let data = recommendationFetcher.data;
    if (console.log("\u{1F50D} Apply changes response:", data), console.log("\u{1F50D} Response type:", typeof data), console.log("\u{1F50D} Response keys:", Object.keys(data)), data.success && selectedProduct) {
      let appliedFields = recommendations.filter((rec) => approvalState[rec.field] === !0).map((rec) => rec.field), getFieldCelebration = (field) => ({
        keywords: "\u{1F3AF} Awesome! Keywords added - your product is now more discoverable!",
        description: "\u{1F4DD} Great work! Enhanced description will help customers understand your product better!",
        features: "\u2728 Fantastic! Feature list added - customers can see what makes your product special!",
        use_cases: "\u{1F4A1} Perfect! Use cases added - customers now know how to use your product!",
        target_audience: "\u{1F465} Excellent! Target audience defined - your marketing just got more focused!",
        material: "\u{1F52C} Nice! Material info added - customers can make informed decisions!",
        dimensions: "\u{1F4CF} Great! Dimensions added - no more size surprises for customers!",
        weight: "\u2696\uFE0F Perfect! Weight information helps with shipping expectations!",
        color: "\u{1F3A8} Colorful! Color info added - visual buyers will love this!",
        brand: "\u{1F3F7}\uFE0F Brand power! Brand info strengthens customer trust!",
        warranty: "\u{1F6E1}\uFE0F Security boost! Warranty info builds customer confidence!",
        sku: "\u{1F4E6} Organized! SKU added for better inventory management!",
        tags: "\u{1F3F7}\uFE0F Tagged! Product categorization just got better!",
        ai_search_queries: "\u{1F916} AI-ready! Search queries optimized for AI discovery!",
        semantic_description: "\u{1F9E0} Smart! AI-optimized description for better search matching!"
      })[field] || `\u2705 ${field.charAt(0).toUpperCase() + field.slice(1).replace(/_/g, " ")} updated!`, message = "";
      appliedFields.length === 1 ? message = getFieldCelebration(appliedFields[0]) : appliedFields.length === 2 ? message = `\u{1F389} Double win! Updated ${appliedFields.map((f) => f.replace(/_/g, " ")).join(" and ")}!` : appliedFields.length >= 3 && (message = `\u{1F680} Amazing progress! Applied ${appliedFields.length} improvements - you're on fire!`);
      let finalScore = selectedProduct.score, pointsEarned = 0;
      if (data.scoreImprovement) {
        finalScore = data.scoreImprovement.final;
        let improvement = data.scoreImprovement.improvement;
        pointsEarned = appliedFields.length * 15, improvement > 0 ? message += ` \u{1F4C8} Score: ${data.scoreImprovement.initial}% \u2192 ${data.scoreImprovement.final}% (+${improvement.toFixed(0)}%) | +${pointsEarned} points!` : message += ` \u{1F4CA} Score: ${data.scoreImprovement.final}%`;
      }
      let updatedGaps = selectedProduct.gaps.filter((gap) => !appliedFields.includes(gap)), updatedSelectedProduct = {
        ...selectedProduct,
        score: finalScore,
        gaps: updatedGaps
      };
      setProducts((prev) => prev.map(
        (p) => p.id === selectedProduct.id ? updatedSelectedProduct : p
      )), setSelectedProduct(updatedSelectedProduct), setRecommendations([]), setApprovalState({}), setJustAppliedChanges(!0);
      let safeMessage = typeof message == "string" && message.length > 0 && !message.match(/^\d{3}$/) ? message : "Changes applied successfully!";
      setToastMessage(safeMessage), setToastActive(!0);
    } else
      data.error ? (setToastMessage(`Failed to apply changes: ${data.error}`), setToastActive(!0)) : (console.error("\u{1F6A8} Unexpected response format:", data), setToastMessage(`Unexpected response: ${JSON.stringify(data)}`), setToastActive(!0));
    setIsApplyingChanges(!1);
  }
  if (customerInputFetcher.data && isSavingCustomerInput) {
    let data = customerInputFetcher.data;
    if (console.log("\u{1F50D} Customer input save response:", data), data.success && selectedProduct) {
      let appliedFields = data.appliedFields || [], appliedCount = data.appliedCount || 0, message = "";
      appliedCount === 1 ? message = `\u{1F389} Great! ${appliedFields[0]?.replace(/_/g, " ")} added to your product specs!` : appliedCount > 1 && (message = `\u{1F680} Excellent! Added ${appliedCount} product specifications!`);
      let estimatedImprovement = appliedCount * 4;
      message += ` \u{1F4C8} Health score boost: ~+${estimatedImprovement}% | +${appliedCount * 15} points!`;
      let updatedGaps = selectedProduct.gaps.filter((gap) => !appliedFields.includes(gap)), updatedScore = Math.min(100, selectedProduct.score + estimatedImprovement), updatedSelectedProduct = {
        ...selectedProduct,
        score: updatedScore,
        gaps: updatedGaps
      };
      setProducts((prev) => prev.map(
        (p) => p.id === selectedProduct.id ? updatedSelectedProduct : p
      )), setSelectedProduct(updatedSelectedProduct), setCustomerInputData({}), setCustomerInputOpen(!1), setJustAppliedChanges(!0), setToastMessage(message), setToastActive(!0);
    } else
      data.error && (setToastMessage(`Failed to save: ${data.error}`), setToastActive(!0));
    setIsSavingCustomerInput(!1);
  }
  let getFieldPlaceholder = (field) => ({
    material: "e.g., Cotton, Polyester, Steel, Wood",
    weight: "e.g., 2.5 lbs, 1.2 kg",
    color: "e.g., Navy Blue, Black, Red",
    size: "e.g., Large, XL, 12x8x4",
    brand: "e.g., Your Brand Name",
    model: "e.g., Model ABC-123",
    upc: "e.g., 123456789012",
    vendor: "e.g., Supplier Company",
    age_range: "e.g., 18-65, Adults, 3+",
    compatibility: "e.g., iPhone 12, Samsung Galaxy",
    warranty: "e.g., 1 year limited warranty",
    return_policy: "e.g., 30-day returns accepted",
    shipping_info: "e.g., Free shipping over $50",
    specifications: "e.g., Power: 110V, Material: ABS Plastic",
    documentation_url: "e.g., https://yoursite.com/manual.pdf",
    video_urls: "e.g., https://youtube.com/watch?v=abc123"
  })[field] || `Enter ${field.replace(/_/g, " ")}`, getFieldHelpText = (field) => ({
    material: "Primary material or fabric composition",
    weight: "Product weight with unit (lbs, kg, oz)",
    color: "Primary color or color options",
    brand: "Manufacturer or brand name",
    warranty: "Warranty terms and duration",
    upc: "Universal Product Code for inventory",
    specifications: "Technical specs, one per line"
  })[field] || "", getFieldPoints = (field) => {
    let fieldCategories = {
      required: 25,
      high: 20,
      medium: 15,
      low: 10
    }, highFields = ["material", "dimensions", "weight", "brand"], mediumFields = ["color", "size", "upc", "compatibility", "age_range", "gender"];
    return highFields.includes(field) ? fieldCategories.high : mediumFields.includes(field) ? fieldCategories.medium : fieldCategories.low;
  }, getFieldImpact = (field) => {
    let highFields = ["material", "dimensions", "weight", "brand"], mediumFields = ["color", "size", "upc", "compatibility", "age_range", "gender"];
    return highFields.includes(field) ? "4-5" : mediumFields.includes(field) ? "3-4" : "2-3";
  }, handleSaveCustomerInput = () => {
    if (!selectedProduct)
      return;
    let validationErrors = [], filledData = {};
    if (Object.entries(customerInputData).forEach(([field, value]) => {
      let trimmedValue = value.trim();
      trimmedValue && (field === "upc" && trimmedValue.length < 8 ? validationErrors.push("UPC must be at least 8 digits") : field === "weight" && !/\d+(\.\d+)?\s*(lbs?|kgs?|oz|pounds?|kilograms?|ounces?)/i.test(trimmedValue) ? validationErrors.push('Weight must include unit (e.g., "2.5 lbs", "1.2 kg")') : (field === "documentation_url" || field === "video_urls") && trimmedValue && !trimmedValue.startsWith("http") ? validationErrors.push(`${field.replace(/_/g, " ")} must be a valid URL starting with http`) : field === "age_range" && trimmedValue && !/\d+/.test(trimmedValue) ? validationErrors.push('Age range must contain numbers (e.g., "18+", "3-12")') : filledData[field] = trimmedValue);
    }), validationErrors.length > 0) {
      setToastMessage(`Validation errors: ${validationErrors.join(", ")}`), setToastActive(!0);
      return;
    }
    if (Object.keys(filledData).length === 0) {
      setToastMessage("Please fill in at least one field before saving"), setToastActive(!0);
      return;
    }
    setIsSavingCustomerInput(!0), customerInputFetcher.submit(
      {
        action: "save-customer-input",
        productId: selectedProduct.id,
        inputData: JSON.stringify(filledData)
      },
      { method: "post" }
    );
  }, filteredProducts = products.filter((product) => !(showOnlyLowHealth && product.score >= 70 || showOnlyNoDescription && product.description && product.description !== "No description")), rows = products.map(
    (product) => [
      product.id,
      product.title,
      product.description.length > 50 ? `${product.description.substring(0, 50)}...` : product.description,
      `${product.score}%`,
      product.gaps.length > 0 ? product.gaps.join(", ") : "None"
    ]
  );
  return /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Page, { title: "CatalogAI Optimizer Dashboard", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Layout, { children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Layout.Section, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)("div", { style: { display: "grid", gridTemplateColumns: "repeat(3, 1fr)", gap: "20px" }, children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { align: "center", children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)("div", { style: { position: "relative", width: "80px", height: "80px", marginBottom: "10px" }, children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)("svg", { width: "80", height: "80", style: { transform: "rotate(-90deg)" }, children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)("circle", { cx: "40", cy: "40", r: "35", fill: "none", stroke: "#e5e7eb", strokeWidth: "8" }, void 0, !1, {
                fileName: "app/routes/_index.tsx",
                lineNumber: 1601,
                columnNumber: 21
              }, this),
              /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
                "circle",
                {
                  cx: "40",
                  cy: "40",
                  r: "35",
                  fill: "none",
                  stroke: dashboardMetrics.aiReadinessScore >= 90 ? "#10b981" : dashboardMetrics.aiReadinessScore >= 50 ? "#f59e0b" : "#ef4444",
                  strokeWidth: "8",
                  strokeDasharray: `${dashboardMetrics.aiReadinessScore / 100 * 220} 220`,
                  strokeLinecap: "round"
                },
                void 0,
                !1,
                {
                  fileName: "app/routes/_index.tsx",
                  lineNumber: 1602,
                  columnNumber: 21
                },
                this
              )
            ] }, void 0, !0, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 1600,
              columnNumber: 19
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)("div", { style: {
              position: "absolute",
              top: "50%",
              left: "50%",
              transform: "translate(-50%, -50%)",
              fontSize: "18px",
              fontWeight: "bold",
              color: dashboardMetrics.aiReadinessScore >= 90 ? "#10b981" : dashboardMetrics.aiReadinessScore >= 50 ? "#f59e0b" : "#ef4444"
            }, children: [
              dashboardMetrics.aiReadinessScore,
              "%"
            ] }, void 0, !0, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 1609,
              columnNumber: 19
            }, this)
          ] }, void 0, !0, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 1599,
            columnNumber: 17
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "headingLg", as: "p", children: [
            dashboardMetrics.aiReadinessScore,
            " / 100"
          ] }, void 0, !0, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 1621,
            columnNumber: 17
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodyMd", tone: "subdued", as: "p", children: "Excellent AI readiness" }, void 0, !1, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 1622,
            columnNumber: 17
          }, this)
        ] }, void 0, !0, {
          fileName: "app/routes/_index.tsx",
          lineNumber: 1598,
          columnNumber: 15
        }, this) }, void 0, !1, {
          fileName: "app/routes/_index.tsx",
          lineNumber: 1597,
          columnNumber: 13
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { align: "center", children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "headingLg", as: "p", children: [
            dashboardMetrics.productsPassedPercentage,
            "%"
          ] }, void 0, !0, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 1629,
            columnNumber: 17
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodyMd", as: "p", children: [
            dashboardMetrics.validProducts,
            " of ",
            dashboardMetrics.totalProducts,
            " products"
          ] }, void 0, !0, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 1630,
            columnNumber: 17
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodySm", tone: "success", as: "p", children: "\u2191 5% from last week" }, void 0, !1, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 1631,
            columnNumber: 17
          }, this)
        ] }, void 0, !0, {
          fileName: "app/routes/_index.tsx",
          lineNumber: 1628,
          columnNumber: 15
        }, this) }, void 0, !1, {
          fileName: "app/routes/_index.tsx",
          lineNumber: 1627,
          columnNumber: 13
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { align: "center", children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "headingLg", as: "p", children: dashboardMetrics.lastSyncTime ? `${Math.floor((Date.now() - new Date(dashboardMetrics.lastSyncTime).getTime()) / (1e3 * 60 * 60))}h ago` : "Never" }, void 0, !1, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 1638,
            columnNumber: 17
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodyMd", as: "p", children: "Last synced successfully" }, void 0, !1, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 1644,
            columnNumber: 17
          }, this)
        ] }, void 0, !0, {
          fileName: "app/routes/_index.tsx",
          lineNumber: 1637,
          columnNumber: 15
        }, this) }, void 0, !1, {
          fileName: "app/routes/_index.tsx",
          lineNumber: 1636,
          columnNumber: 13
        }, this)
      ] }, void 0, !0, {
        fileName: "app/routes/_index.tsx",
        lineNumber: 1595,
        columnNumber: 11
      }, this) }, void 0, !1, {
        fileName: "app/routes/_index.tsx",
        lineNumber: 1594,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Layout.Section, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "headingLg", as: "h2", children: "Feed Health" }, void 0, !1, {
          fileName: "app/routes/_index.tsx",
          lineNumber: 1654,
          columnNumber: 15
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodyMd", tone: "subdued", as: "p", children: "Product validation distribution" }, void 0, !1, {
          fileName: "app/routes/_index.tsx",
          lineNumber: 1655,
          columnNumber: 15
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)("div", { style: { marginTop: "20px" }, children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)("div", { style: { display: "flex", alignItems: "center", marginBottom: "10px" }, children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)("div", { style: {
              width: `${dashboardMetrics.validProducts / dashboardMetrics.totalProducts * 200}px`,
              height: "8px",
              background: "#10b981",
              borderRadius: "4px",
              marginRight: "10px",
              minWidth: "20px"
            } }, void 0, !1, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 1660,
              columnNumber: 19
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodyMd", as: "p", children: [
              dashboardMetrics.validProducts,
              " products"
            ] }, void 0, !0, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 1668,
              columnNumber: 19
            }, this)
          ] }, void 0, !0, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 1659,
            columnNumber: 17
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)("div", { style: { display: "flex", alignItems: "center", marginBottom: "10px" }, children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)("div", { style: {
              width: `${dashboardMetrics.warningProducts / dashboardMetrics.totalProducts * 200}px`,
              height: "8px",
              background: "#f59e0b",
              borderRadius: "4px",
              marginRight: "10px",
              minWidth: "20px"
            } }, void 0, !1, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 1673,
              columnNumber: 19
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodyMd", as: "p", children: [
              dashboardMetrics.warningProducts,
              " products"
            ] }, void 0, !0, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 1681,
              columnNumber: 19
            }, this)
          ] }, void 0, !0, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 1672,
            columnNumber: 17
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)("div", { style: { display: "flex", alignItems: "center", marginBottom: "20px" }, children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)("div", { style: {
              width: `${dashboardMetrics.invalidProducts / dashboardMetrics.totalProducts * 200}px`,
              height: "8px",
              background: "#ef4444",
              borderRadius: "4px",
              marginRight: "10px",
              minWidth: "20px"
            } }, void 0, !1, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 1686,
              columnNumber: 19
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodyMd", as: "p", children: [
              dashboardMetrics.invalidProducts,
              " products"
            ] }, void 0, !0, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 1694,
              columnNumber: 19
            }, this)
          ] }, void 0, !0, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 1685,
            columnNumber: 17
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Button, { variant: "primary", children: "View Validation Report" }, void 0, !1, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 1697,
            columnNumber: 17
          }, this)
        ] }, void 0, !0, {
          fileName: "app/routes/_index.tsx",
          lineNumber: 1657,
          columnNumber: 15
        }, this)
      ] }, void 0, !0, {
        fileName: "app/routes/_index.tsx",
        lineNumber: 1653,
        columnNumber: 15
      }, this) }, void 0, !1, {
        fileName: "app/routes/_index.tsx",
        lineNumber: 1652,
        columnNumber: 11
      }, this) }, void 0, !1, {
        fileName: "app/routes/_index.tsx",
        lineNumber: 1651,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Layout.Section, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "headingLg", as: "h2", children: "Next Actions" }, void 0, !1, {
          fileName: "app/routes/_index.tsx",
          lineNumber: 1707,
          columnNumber: 15
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodyMd", tone: "subdued", as: "p", children: "Recommended optimizations for your catalog" }, void 0, !1, {
          fileName: "app/routes/_index.tsx",
          lineNumber: 1708,
          columnNumber: 15
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)("div", { style: {
          display: "grid",
          gridTemplateColumns: "repeat(2, 1fr)",
          gap: "20px",
          marginTop: "20px"
        }, children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodyMd", as: "p", children: [
              dashboardMetrics.invalidProducts,
              " products need attention"
            ] }, void 0, !0, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 1719,
              columnNumber: 21
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Button, { variant: "primary", tone: "critical", children: "Take Action" }, void 0, !1, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 1720,
              columnNumber: 21
            }, this)
          ] }, void 0, !0, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 1718,
            columnNumber: 19
          }, this) }, void 0, !1, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 1717,
            columnNumber: 17
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodyMd", as: "p", children: [
              "Optimize ",
              dashboardMetrics.warningProducts,
              " products"
            ] }, void 0, !0, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 1727,
              columnNumber: 21
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Button, { variant: "primary", children: "Take Action" }, void 0, !1, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 1728,
              columnNumber: 21
            }, this)
          ] }, void 0, !0, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 1726,
            columnNumber: 19
          }, this) }, void 0, !1, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 1725,
            columnNumber: 17
          }, this)
        ] }, void 0, !0, {
          fileName: "app/routes/_index.tsx",
          lineNumber: 1710,
          columnNumber: 15
        }, this)
      ] }, void 0, !0, {
        fileName: "app/routes/_index.tsx",
        lineNumber: 1706,
        columnNumber: 13
      }, this) }, void 0, !1, {
        fileName: "app/routes/_index.tsx",
        lineNumber: 1705,
        columnNumber: 11
      }, this) }, void 0, !1, {
        fileName: "app/routes/_index.tsx",
        lineNumber: 1704,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Layout.Section, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)("div", { style: { marginBottom: "10px" }, children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)("div", { style: {
          width: "100%",
          height: "8px",
          background: "#e5e7eb",
          borderRadius: "4px",
          overflow: "hidden"
        }, children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)("div", { style: {
          width: `${dashboardMetrics.optimizationProgress}%`,
          height: "100%",
          background: "#3b82f6",
          transition: "width 0.3s ease"
        } }, void 0, !1, {
          fileName: "app/routes/_index.tsx",
          lineNumber: 1748,
          columnNumber: 19
        }, this) }, void 0, !1, {
          fileName: "app/routes/_index.tsx",
          lineNumber: 1741,
          columnNumber: 17
        }, this) }, void 0, !1, {
          fileName: "app/routes/_index.tsx",
          lineNumber: 1740,
          columnNumber: 15
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)("div", { style: { display: "flex", justifyContent: "space-between", alignItems: "center" }, children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodyMd", as: "p", children: [
            "Your catalog is ",
            dashboardMetrics.optimizationProgress,
            "% AI-ready \u2014 ",
            100 - dashboardMetrics.optimizationProgress,
            "% left to optimize!"
          ] }, void 0, !0, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 1758,
            columnNumber: 17
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodyMd", tone: "subdued", as: "p", children: [
            dashboardMetrics.optimizationProgress,
            "% Complete"
          ] }, void 0, !0, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 1761,
            columnNumber: 17
          }, this)
        ] }, void 0, !0, {
          fileName: "app/routes/_index.tsx",
          lineNumber: 1757,
          columnNumber: 15
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)("div", { style: { marginTop: "5px" }, children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodySm", tone: "subdued", as: "p", children: "Keep going! \u{1F680}" }, void 0, !1, {
          fileName: "app/routes/_index.tsx",
          lineNumber: 1767,
          columnNumber: 17
        }, this) }, void 0, !1, {
          fileName: "app/routes/_index.tsx",
          lineNumber: 1766,
          columnNumber: 15
        }, this)
      ] }, void 0, !0, {
        fileName: "app/routes/_index.tsx",
        lineNumber: 1739,
        columnNumber: 13
      }, this) }, void 0, !1, {
        fileName: "app/routes/_index.tsx",
        lineNumber: 1738,
        columnNumber: 11
      }, this) }, void 0, !1, {
        fileName: "app/routes/_index.tsx",
        lineNumber: 1737,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Layout.Section, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.InlineStack, { children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "headingLg", as: "h2", children: "\u{1F4E6} Product Catalog" }, void 0, !1, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 1781,
              columnNumber: 19
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodyMd", tone: "subdued", as: "p", children: "Browse and manage your product inventory" }, void 0, !1, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 1784,
              columnNumber: 19
            }, this)
          ] }, void 0, !0, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 1780,
            columnNumber: 17
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.InlineStack, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
            import_polaris2.Button,
            {
              onClick: handleSync,
              loading: isSyncing,
              variant: "primary",
              size: "large",
              children: isSyncing ? "Syncing..." : "\u{1F504} Sync Products"
            },
            void 0,
            !1,
            {
              fileName: "app/routes/_index.tsx",
              lineNumber: 1789,
              columnNumber: 19
            },
            this
          ) }, void 0, !1, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 1788,
            columnNumber: 17
          }, this)
        ] }, void 0, !0, {
          fileName: "app/routes/_index.tsx",
          lineNumber: 1779,
          columnNumber: 15
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.InlineStack, { children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.InlineStack, { children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodyMd", tone: "subdued", as: "p", children: "Filter by:" }, void 0, !1, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 1804,
              columnNumber: 21
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
              import_polaris2.Button,
              {
                variant: showOnlyLowHealth ? "primary" : "tertiary",
                size: "slim",
                onClick: () => setShowOnlyLowHealth(!showOnlyLowHealth),
                children: "\u{1F6A8} Low Health Only"
              },
              void 0,
              !1,
              {
                fileName: "app/routes/_index.tsx",
                lineNumber: 1805,
                columnNumber: 21
              },
              this
            ),
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
              import_polaris2.Button,
              {
                variant: showOnlyNoDescription ? "primary" : "tertiary",
                size: "slim",
                onClick: () => setShowOnlyNoDescription(!showOnlyNoDescription),
                children: "\u{1F4DD} Missing Descriptions"
              },
              void 0,
              !1,
              {
                fileName: "app/routes/_index.tsx",
                lineNumber: 1812,
                columnNumber: 21
              },
              this
            )
          ] }, void 0, !0, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 1803,
            columnNumber: 19
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodySm", tone: "subdued", as: "p", children: [
            "Showing ",
            filteredProducts.length,
            " of ",
            products.length,
            " products"
          ] }, void 0, !0, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 1820,
            columnNumber: 19
          }, this)
        ] }, void 0, !0, {
          fileName: "app/routes/_index.tsx",
          lineNumber: 1802,
          columnNumber: 17
        }, this) }, void 0, !1, {
          fileName: "app/routes/_index.tsx",
          lineNumber: 1801,
          columnNumber: 15
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
          "div",
          {
            className: "product-grid",
            style: {
              display: "grid",
              gridTemplateColumns: "repeat(auto-fit, minmax(350px, 1fr))",
              gap: "20px",
              marginTop: "20px",
              width: "100%"
            },
            children: filteredProducts.map(
              (product, index) => /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
                import_polaris2.Card,
                {
                  children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.InlineStack, { children: [
                    /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.InlineStack, { children: [
                      /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
                        /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
                          import_polaris2.Button,
                          {
                            variant: "plain",
                            onClick: () => handleProductClick(product),
                            children: product.title
                          },
                          void 0,
                          !1,
                          {
                            fileName: "app/routes/_index.tsx",
                            lineNumber: 1844,
                            columnNumber: 27
                          },
                          this
                        ),
                        /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodySm", tone: "subdued", as: "p", children: [
                          "ID: ",
                          product.id
                        ] }, void 0, !0, {
                          fileName: "app/routes/_index.tsx",
                          lineNumber: 1850,
                          columnNumber: 27
                        }, this)
                      ] }, void 0, !0, {
                        fileName: "app/routes/_index.tsx",
                        lineNumber: 1843,
                        columnNumber: 25
                      }, this),
                      /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
                        /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodyMd", as: "p", children: product.description && product.description !== "No description" ? product.description.length > 100 ? `${product.description.substring(0, 100)}...` : product.description : /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { tone: "subdued", variant: "bodyMd", as: "p", children: "No description available" }, void 0, !1, {
                          fileName: "app/routes/_index.tsx",
                          lineNumber: 1861,
                          columnNumber: 27
                        }, this) }, void 0, !1, {
                          fileName: "app/routes/_index.tsx",
                          lineNumber: 1856,
                          columnNumber: 27
                        }, this),
                        product.gaps.length > 0 && /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.InlineStack, { wrap: !0, children: [
                          product.gaps.slice(0, 3).map(
                            (gap, gapIndex) => /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Badge, { tone: "warning", size: "small", children: gap }, gapIndex, !1, {
                              fileName: "app/routes/_index.tsx",
                              lineNumber: 1867,
                              columnNumber: 27
                            }, this)
                          ),
                          product.gaps.length > 3 && /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Badge, { tone: "info", size: "small", children: `+${product.gaps.length - 3} more` }, void 0, !1, {
                            fileName: "app/routes/_index.tsx",
                            lineNumber: 1872,
                            columnNumber: 27
                          }, this)
                        ] }, void 0, !0, {
                          fileName: "app/routes/_index.tsx",
                          lineNumber: 1865,
                          columnNumber: 25
                        }, this)
                      ] }, void 0, !0, {
                        fileName: "app/routes/_index.tsx",
                        lineNumber: 1855,
                        columnNumber: 25
                      }, this)
                    ] }, void 0, !0, {
                      fileName: "app/routes/_index.tsx",
                      lineNumber: 1842,
                      columnNumber: 23
                    }, this),
                    /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
                      /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.InlineStack, { children: [
                        /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
                          import_polaris2.ProgressBar,
                          {
                            progress: product.score,
                            size: "small"
                          },
                          void 0,
                          !1,
                          {
                            fileName: "app/routes/_index.tsx",
                            lineNumber: 1883,
                            columnNumber: 27
                          },
                          this
                        ),
                        /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
                          import_polaris2.Badge,
                          {
                            tone: product.score >= 90 ? "success" : product.score >= 70 ? "warning" : "critical",
                            size: "small",
                            children: `${product.score}%`
                          },
                          void 0,
                          !1,
                          {
                            fileName: "app/routes/_index.tsx",
                            lineNumber: 1887,
                            columnNumber: 27
                          },
                          this
                        )
                      ] }, void 0, !0, {
                        fileName: "app/routes/_index.tsx",
                        lineNumber: 1882,
                        columnNumber: 25
                      }, this),
                      /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
                        import_polaris2.Button,
                        {
                          size: "slim",
                          variant: "primary",
                          onClick: () => handleProductClick(product),
                          children: "\u{1F527} Optimize"
                        },
                        void 0,
                        !1,
                        {
                          fileName: "app/routes/_index.tsx",
                          lineNumber: 1895,
                          columnNumber: 25
                        },
                        this
                      )
                    ] }, void 0, !0, {
                      fileName: "app/routes/_index.tsx",
                      lineNumber: 1881,
                      columnNumber: 23
                    }, this)
                  ] }, void 0, !0, {
                    fileName: "app/routes/_index.tsx",
                    lineNumber: 1841,
                    columnNumber: 21
                  }, this)
                },
                product.id,
                !1,
                {
                  fileName: "app/routes/_index.tsx",
                  lineNumber: 1838,
                  columnNumber: 17
                },
                this
              )
            )
          },
          void 0,
          !1,
          {
            fileName: "app/routes/_index.tsx",
            lineNumber: 1827,
            columnNumber: 15
          },
          this
        ),
        filteredProducts.length === 0 && /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "headingMd", as: "h3", children: "\u{1F389} No products match your filters!" }, void 0, !1, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 1911,
            columnNumber: 21
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodyMd", tone: "subdued", as: "p", children: showOnlyLowHealth ? "All your products are healthy! Great job maintaining your catalog." : showOnlyNoDescription ? "All your products have descriptions! Your catalog is well-documented." : "No products found matching your current filters." }, void 0, !1, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 1912,
            columnNumber: 21
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
            import_polaris2.Button,
            {
              variant: "tertiary",
              onClick: () => {
                setShowOnlyLowHealth(!1), setShowOnlyNoDescription(!1);
              },
              children: "Clear Filters"
            },
            void 0,
            !1,
            {
              fileName: "app/routes/_index.tsx",
              lineNumber: 1920,
              columnNumber: 21
            },
            this
          )
        ] }, void 0, !0, {
          fileName: "app/routes/_index.tsx",
          lineNumber: 1910,
          columnNumber: 19
        }, this) }, void 0, !1, {
          fileName: "app/routes/_index.tsx",
          lineNumber: 1909,
          columnNumber: 15
        }, this)
      ] }, void 0, !0, {
        fileName: "app/routes/_index.tsx",
        lineNumber: 1778,
        columnNumber: 13
      }, this) }, void 0, !1, {
        fileName: "app/routes/_index.tsx",
        lineNumber: 1777,
        columnNumber: 11
      }, this) }, void 0, !1, {
        fileName: "app/routes/_index.tsx",
        lineNumber: 1776,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Layout.Section, { variant: "oneHalf", children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "headingMd", as: "h3", children: "Quick Actions" }, void 0, !1, {
          fileName: "app/routes/_index.tsx",
          lineNumber: 1939,
          columnNumber: 15
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
            import_polaris2.Button,
            {
              fullWidth: !0,
              onClick: handleHealthCheck,
              loading: isHealthChecking,
              variant: averageScore < 90 ? "primary" : "secondary",
              children: averageScore < 90 ? "Quick Scan Now" : "Run Health Check"
            },
            void 0,
            !1,
            {
              fileName: "app/routes/_index.tsx",
              lineNumber: 1943,
              columnNumber: 17
            },
            this
          ),
          /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Button, { fullWidth: !0, children: "Generate Feed" }, void 0, !1, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 1951,
            columnNumber: 17
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Button, { fullWidth: !0, children: "View Analytics" }, void 0, !1, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 1952,
            columnNumber: 17
          }, this)
        ] }, void 0, !0, {
          fileName: "app/routes/_index.tsx",
          lineNumber: 1942,
          columnNumber: 15
        }, this)
      ] }, void 0, !0, {
        fileName: "app/routes/_index.tsx",
        lineNumber: 1938,
        columnNumber: 13
      }, this) }, void 0, !1, {
        fileName: "app/routes/_index.tsx",
        lineNumber: 1937,
        columnNumber: 11
      }, this) }, void 0, !1, {
        fileName: "app/routes/_index.tsx",
        lineNumber: 1936,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Layout.Section, { variant: "oneHalf", children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "headingMd", as: "h3", children: "Recent Activity" }, void 0, !1, {
          fileName: "app/routes/_index.tsx",
          lineNumber: 1961,
          columnNumber: 15
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: recentLogs.length > 0 ? recentLogs.map(
          (log) => /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { as: "span", children: [
              log.type === "sync" && "\u{1F504} ",
              log.type === "push" && "\u{1F4E4} ",
              log.type === "error" && "\u274C ",
              log.type === "health_scan" && "\u{1F50D} ",
              log.type === "auto_fix" && "\u{1F527} ",
              log.type === "ai_enrichment" && "\u{1F916} ",
              log.type === "settings_update" && "\u2699\uFE0F ",
              log.message
            ] }, void 0, !0, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 1968,
              columnNumber: 23
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { as: "p", variant: "bodySm", tone: "subdued", children: new Date(log.createdAt).toLocaleString() }, void 0, !1, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 1978,
              columnNumber: 23
            }, this)
          ] }, log.id, !0, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 1967,
            columnNumber: 17
          }, this)
        ) : /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { as: "p", tone: "subdued", children: "No recent activity" }, void 0, !1, {
          fileName: "app/routes/_index.tsx",
          lineNumber: 1984,
          columnNumber: 17
        }, this) }, void 0, !1, {
          fileName: "app/routes/_index.tsx",
          lineNumber: 1964,
          columnNumber: 15
        }, this)
      ] }, void 0, !0, {
        fileName: "app/routes/_index.tsx",
        lineNumber: 1960,
        columnNumber: 13
      }, this) }, void 0, !1, {
        fileName: "app/routes/_index.tsx",
        lineNumber: 1959,
        columnNumber: 11
      }, this) }, void 0, !1, {
        fileName: "app/routes/_index.tsx",
        lineNumber: 1958,
        columnNumber: 9
      }, this)
    ] }, void 0, !0, {
      fileName: "app/routes/_index.tsx",
      lineNumber: 1592,
      columnNumber: 7
    }, this),
    toastActive && /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
      import_polaris2.Toast,
      {
        content: toastMessage,
        onDismiss: () => setToastActive(!1)
      },
      void 0,
      !1,
      {
        fileName: "app/routes/_index.tsx",
        lineNumber: 1993,
        columnNumber: 7
      },
      this
    ),
    /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
      HealthCheckModal,
      {
        isOpen: healthModalOpen,
        onClose: () => setHealthModalOpen(!1),
        jobId: healthCheckJobId,
        currentScore: averageScore,
        currentGaps: []
      },
      void 0,
      !1,
      {
        fileName: "app/routes/_index.tsx",
        lineNumber: 1999,
        columnNumber: 7
      },
      this
    ),
    /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
      import_polaris2.Modal,
      {
        open: productModalOpen,
        onClose: () => setProductModalOpen(!1),
        title: "",
        size: "large",
        primaryAction: {
          content: "Close",
          onAction: () => setProductModalOpen(!1)
        },
        children: selectedProduct && /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Modal.Section, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.InlineStack, { children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
                /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "headingLg", as: "h2", children: [
                  "\u{1F4E6} ",
                  selectedProduct.title
                ] }, void 0, !0, {
                  fileName: "app/routes/_index.tsx",
                  lineNumber: 2026,
                  columnNumber: 23
                }, this),
                /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodyMd", tone: "subdued", as: "p", children: [
                  "Product ID: ",
                  selectedProduct.id
                ] }, void 0, !0, {
                  fileName: "app/routes/_index.tsx",
                  lineNumber: 2029,
                  columnNumber: 23
                }, this),
                selectedProduct.description && selectedProduct.description !== "No description" && /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodyMd", as: "p", children: selectedProduct.description }, void 0, !1, {
                  fileName: "app/routes/_index.tsx",
                  lineNumber: 2033,
                  columnNumber: 21
                }, this)
              ] }, void 0, !0, {
                fileName: "app/routes/_index.tsx",
                lineNumber: 2025,
                columnNumber: 17
              }, this),
              /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
                /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
                  import_polaris2.Badge,
                  {
                    tone: selectedProduct.score >= 90 ? "success" : selectedProduct.score >= 70 ? "warning" : "critical",
                    size: "large",
                    children: [
                      selectedProduct.score,
                      "% Health"
                    ]
                  },
                  void 0,
                  !0,
                  {
                    fileName: "app/routes/_index.tsx",
                    lineNumber: 2040,
                    columnNumber: 21
                  },
                  this
                ),
                justAppliedChanges && /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Badge, { tone: "success", size: "small", children: "\u2728 Just Updated!" }, void 0, !1, {
                  fileName: "app/routes/_index.tsx",
                  lineNumber: 2047,
                  columnNumber: 21
                }, this)
              ] }, void 0, !0, {
                fileName: "app/routes/_index.tsx",
                lineNumber: 2039,
                columnNumber: 21
              }, this)
            ] }, void 0, !0, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 2024,
              columnNumber: 19
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Box, { children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.InlineStack, { children: [
                /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodyMd", tone: "subdued", as: "p", children: "Overall Health Progress" }, void 0, !1, {
                  fileName: "app/routes/_index.tsx",
                  lineNumber: 2057,
                  columnNumber: 23
                }, this),
                /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodyMd", tone: "subdued", as: "p", children: `${Math.round(selectedProduct.score / 100 * 500)} / 500 points` }, void 0, !1, {
                  fileName: "app/routes/_index.tsx",
                  lineNumber: 2058,
                  columnNumber: 23
                }, this)
              ] }, void 0, !0, {
                fileName: "app/routes/_index.tsx",
                lineNumber: 2056,
                columnNumber: 21
              }, this),
              /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Box, { paddingBlockStart: "200", children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
                import_polaris2.ProgressBar,
                {
                  progress: selectedProduct.score,
                  size: "large"
                },
                void 0,
                !1,
                {
                  fileName: "app/routes/_index.tsx",
                  lineNumber: 2063,
                  columnNumber: 23
                },
                this
              ) }, void 0, !1, {
                fileName: "app/routes/_index.tsx",
                lineNumber: 2062,
                columnNumber: 21
              }, this)
            ] }, void 0, !0, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 2055,
              columnNumber: 23
            }, this)
          ] }, void 0, !0, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 2023,
            columnNumber: 17
          }, this) }, void 0, !1, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 2022,
            columnNumber: 15
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "headingMd", as: "h3", children: "\u{1F4CA} Category Breakdown" }, void 0, !1, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 2075,
              columnNumber: 19
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.InlineStack, { children: [
              {
                name: "\u{1F6A8} Required Fields",
                icon: "\u{1F6A8}",
                fields: ["title", "description", "price", "availability", "category"],
                color: "critical",
                description: "Essential for product visibility"
              },
              {
                name: "\u26A1 High Priority",
                icon: "\u26A1",
                fields: ["material", "dimensions", "weight", "brand", "use_cases", "features", "image_urls"],
                color: "warning",
                description: "Important for customer decisions"
              },
              {
                name: "\u{1F4CB} Medium Priority",
                icon: "\u{1F4CB}",
                fields: ["color", "size", "target_audience", "keywords", "upc", "compatibility", "age_range", "gender", "video_urls"],
                color: "attention",
                description: "Enhances product discovery"
              },
              {
                name: "\u2728 Enhancement",
                icon: "\u2728",
                fields: ["model", "sku", "tags", "vendor", "warranty", "return_policy", "shipping_info", "documentation_url", "specifications", "ai_search_queries", "semantic_description"],
                color: "success",
                description: "Optimizes for AI search"
              }
            ].map((category, index) => {
              let missingInCategory = selectedProduct.gaps.filter((gap) => category.fields.includes(gap)).length, completedInCategory = category.fields.length - missingInCategory, progress = Math.round(completedInCategory / category.fields.length * 100);
              return /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.InlineStack, { children: [
                /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.InlineStack, { children: [
                  /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "headingSm", as: "h4", children: [
                    category.icon,
                    " ",
                    category.name
                  ] }, void 0, !0, {
                    fileName: "app/routes/_index.tsx",
                    lineNumber: 2118,
                    columnNumber: 31
                  }, this),
                  /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodySm", tone: "subdued", as: "p", children: category.description }, void 0, !1, {
                    fileName: "app/routes/_index.tsx",
                    lineNumber: 2121,
                    columnNumber: 31
                  }, this),
                  /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.InlineStack, { wrap: !0, children: [
                    /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodySm", as: "p", children: [
                      completedInCategory,
                      "/",
                      category.fields.length,
                      " complete"
                    ] }, void 0, !0, {
                      fileName: "app/routes/_index.tsx",
                      lineNumber: 2125,
                      columnNumber: 33
                    }, this),
                    missingInCategory > 0 && /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Badge, { tone: "warning", size: "small", children: `${missingInCategory} missing` }, void 0, !1, {
                      fileName: "app/routes/_index.tsx",
                      lineNumber: 2129,
                      columnNumber: 31
                    }, this)
                  ] }, void 0, !0, {
                    fileName: "app/routes/_index.tsx",
                    lineNumber: 2124,
                    columnNumber: 31
                  }, this)
                ] }, void 0, !0, {
                  fileName: "app/routes/_index.tsx",
                  lineNumber: 2117,
                  columnNumber: 29
                }, this),
                /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
                  /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
                    import_polaris2.ProgressBar,
                    {
                      progress,
                      size: "small"
                    },
                    void 0,
                    !1,
                    {
                      fileName: "app/routes/_index.tsx",
                      lineNumber: 2137,
                      columnNumber: 31
                    },
                    this
                  ),
                  /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodySm", tone: "subdued", as: "p", children: `${progress}% complete` }, void 0, !1, {
                    fileName: "app/routes/_index.tsx",
                    lineNumber: 2141,
                    columnNumber: 31
                  }, this)
                ] }, void 0, !0, {
                  fileName: "app/routes/_index.tsx",
                  lineNumber: 2136,
                  columnNumber: 29
                }, this)
              ] }, void 0, !0, {
                fileName: "app/routes/_index.tsx",
                lineNumber: 2116,
                columnNumber: 27
              }, this) }, index, !1, {
                fileName: "app/routes/_index.tsx",
                lineNumber: 2115,
                columnNumber: 23
              }, this);
            }) }, void 0, !1, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 2079,
              columnNumber: 19
            }, this)
          ] }, void 0, !0, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 2074,
            columnNumber: 17
          }, this) }, void 0, !1, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 2073,
            columnNumber: 15
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.InlineStack, { children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "headingMd", as: "h3", children: "\u{1F50D} Missing Fields Analysis" }, void 0, !1, {
                fileName: "app/routes/_index.tsx",
                lineNumber: 2157,
                columnNumber: 21
              }, this),
              selectedProduct.gaps.length === 0 ? /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Badge, { tone: "success", size: "large", children: "\u{1F389} Perfect Score!" }, void 0, !1, {
                fileName: "app/routes/_index.tsx",
                lineNumber: 2161,
                columnNumber: 19
              }, this) : /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Badge, { tone: "critical", size: "large", children: `${selectedProduct.gaps.length} fields missing` }, void 0, !1, {
                fileName: "app/routes/_index.tsx",
                lineNumber: 2165,
                columnNumber: 19
              }, this)
            ] }, void 0, !0, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 2156,
              columnNumber: 19
            }, this),
            selectedProduct.gaps.length > 0 ? /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodyMd", tone: "subdued", as: "p", children: "These fields are missing and could improve your product's visibility and AI search performance:" }, void 0, !1, {
                fileName: "app/routes/_index.tsx",
                lineNumber: 2173,
                columnNumber: 23
              }, this),
              /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.InlineStack, { wrap: !0, children: selectedProduct.gaps.map(
                (gap, index) => /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Badge, { tone: "warning", size: "small", children: gap.replace(/_/g, " ") }, index, !1, {
                  fileName: "app/routes/_index.tsx",
                  lineNumber: 2178,
                  columnNumber: 21
                }, this)
              ) }, void 0, !1, {
                fileName: "app/routes/_index.tsx",
                lineNumber: 2176,
                columnNumber: 23
              }, this)
            ] }, void 0, !0, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 2172,
              columnNumber: 17
            }, this) : /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodyMd", tone: "success", as: "p", children: "\u{1F389} Congratulations! Your product has all the essential fields completed." }, void 0, !1, {
                fileName: "app/routes/_index.tsx",
                lineNumber: 2186,
                columnNumber: 23
              }, this),
              /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodySm", tone: "subdued", as: "p", children: "This product is optimized for search engines and AI-powered discovery." }, void 0, !1, {
                fileName: "app/routes/_index.tsx",
                lineNumber: 2189,
                columnNumber: 23
              }, this)
            ] }, void 0, !0, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 2185,
              columnNumber: 17
            }, this)
          ] }, void 0, !0, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 2155,
            columnNumber: 17
          }, this) }, void 0, !1, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 2154,
            columnNumber: 15
          }, this),
          selectedProduct.gaps.length > 0 && /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.InlineStack, { children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "headingMd", as: "h3", children: "\u{1F916} AI Recommendations" }, void 0, !1, {
                fileName: "app/routes/_index.tsx",
                lineNumber: 2202,
                columnNumber: 23
              }, this),
              recommendations.length > 0 && /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
                import_polaris2.Button,
                {
                  onClick: () => {
                    setRecommendations([]), setApprovalState({}), handleGenerateRecommendations();
                  },
                  variant: "secondary",
                  size: "slim",
                  loading: isGeneratingRecommendations,
                  children: "\u{1F504} Regenerate"
                },
                void 0,
                !1,
                {
                  fileName: "app/routes/_index.tsx",
                  lineNumber: 2206,
                  columnNumber: 19
                },
                this
              )
            ] }, void 0, !0, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 2201,
              columnNumber: 21
            }, this),
            recommendations.length === 0 ? /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
                /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodyMd", tone: "subdued", as: "p", children: "\u{1F3AF} Ready to improve your product's health score?" }, void 0, !1, {
                  fileName: "app/routes/_index.tsx",
                  lineNumber: 2224,
                  columnNumber: 25
                }, this),
                /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodySm", tone: "subdued", as: "p", children: "Our AI will analyze your missing fields and suggest improvements for:" }, void 0, !1, {
                  fileName: "app/routes/_index.tsx",
                  lineNumber: 2227,
                  columnNumber: 25
                }, this),
                /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.InlineStack, { wrap: !0, children: [
                  selectedProduct.gaps.slice(0, 5).map(
                    (gap, index) => /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Badge, { tone: "warning", size: "small", children: gap.replace(/_/g, " ") }, index, !1, {
                      fileName: "app/routes/_index.tsx",
                      lineNumber: 2232,
                      columnNumber: 23
                    }, this)
                  ),
                  selectedProduct.gaps.length > 5 && /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Badge, { tone: "info", size: "small", children: `+${selectedProduct.gaps.length - 5} more` }, void 0, !1, {
                    fileName: "app/routes/_index.tsx",
                    lineNumber: 2237,
                    columnNumber: 23
                  }, this)
                ] }, void 0, !0, {
                  fileName: "app/routes/_index.tsx",
                  lineNumber: 2230,
                  columnNumber: 27
                }, this)
              ] }, void 0, !0, {
                fileName: "app/routes/_index.tsx",
                lineNumber: 2223,
                columnNumber: 25
              }, this),
              /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
                import_polaris2.Button,
                {
                  onClick: handleGenerateRecommendations,
                  variant: "primary",
                  size: "large",
                  loading: isGeneratingRecommendations,
                  children: isGeneratingRecommendations ? "\u{1F916} Generating..." : "\u{1F680} Generate AI Recommendations"
                },
                void 0,
                !1,
                {
                  fileName: "app/routes/_index.tsx",
                  lineNumber: 2244,
                  columnNumber: 25
                },
                this
              )
            ] }, void 0, !0, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 2222,
              columnNumber: 17
            }, this) : /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
              selectedProduct.recommendations?.generatedAt && /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodySm", tone: "subdued", as: "p", children: [
                "Generated: ",
                new Date(selectedProduct.recommendations.generatedAt).toLocaleString()
              ] }, void 0, !0, {
                fileName: "app/routes/_index.tsx",
                lineNumber: 2256,
                columnNumber: 19
              }, this),
              /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodyMd", tone: "subdued", as: "p", children: "Review and approve the AI-generated suggestions below. Only approved changes will be applied to your product." }, void 0, !1, {
                fileName: "app/routes/_index.tsx",
                lineNumber: 2261,
                columnNumber: 25
              }, this)
            ] }, void 0, !0, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 2254,
              columnNumber: 17
            }, this)
          ] }, void 0, !0, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 2200,
            columnNumber: 19
          }, this) }, void 0, !1, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 2199,
            columnNumber: 13
          }, this),
          recommendations.length > 0 && /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.InlineStack, { children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "headingMd", as: "h3", children: "\u270F\uFE0F Review & Approve Recommendations" }, void 0, !1, {
                fileName: "app/routes/_index.tsx",
                lineNumber: 2275,
                columnNumber: 23
              }, this),
              /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.InlineStack, { children: [
                /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Badge, { tone: "success", size: "small", children: `${Object.values(approvalState).filter(Boolean).length} approved` }, void 0, !1, {
                  fileName: "app/routes/_index.tsx",
                  lineNumber: 2279,
                  columnNumber: 25
                }, this),
                /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Badge, { tone: "critical", size: "small", children: `${Object.values(approvalState).filter((val) => val === !1).length} rejected` }, void 0, !1, {
                  fileName: "app/routes/_index.tsx",
                  lineNumber: 2282,
                  columnNumber: 25
                }, this)
              ] }, void 0, !0, {
                fileName: "app/routes/_index.tsx",
                lineNumber: 2278,
                columnNumber: 23
              }, this)
            ] }, void 0, !0, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 2274,
              columnNumber: 21
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodyMd", tone: "subdued", as: "p", children: "Review each AI suggestion below. Use \u2705 to approve or \u274C to reject. Only approved changes will be applied to your product." }, void 0, !1, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 2288,
              columnNumber: 21
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.InlineStack, { children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodyMd", tone: "subdued", as: "p", children: "Quick Actions:" }, void 0, !1, {
                fileName: "app/routes/_index.tsx",
                lineNumber: 2295,
                columnNumber: 25
              }, this),
              /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.InlineStack, { children: [
                /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
                  import_polaris2.Button,
                  {
                    size: "slim",
                    variant: "secondary",
                    tone: "success",
                    onClick: () => {
                      let allApproved = recommendations.reduce((acc, rec) => ({
                        ...acc,
                        [rec.field]: !0
                      }), {});
                      setApprovalState(allApproved);
                    },
                    children: "\u2705 Approve All"
                  },
                  void 0,
                  !1,
                  {
                    fileName: "app/routes/_index.tsx",
                    lineNumber: 2297,
                    columnNumber: 23
                  },
                  this
                ),
                /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
                  import_polaris2.Button,
                  {
                    size: "slim",
                    variant: "secondary",
                    tone: "critical",
                    onClick: () => {
                      let allRejected = recommendations.reduce((acc, rec) => ({
                        ...acc,
                        [rec.field]: !1
                      }), {});
                      setApprovalState(allRejected);
                    },
                    children: "\u274C Reject All"
                  },
                  void 0,
                  !1,
                  {
                    fileName: "app/routes/_index.tsx",
                    lineNumber: 2311,
                    columnNumber: 23
                  },
                  this
                ),
                /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
                  import_polaris2.Button,
                  {
                    size: "slim",
                    variant: "secondary",
                    onClick: () => setApprovalState({}),
                    children: "Clear All"
                  },
                  void 0,
                  !1,
                  {
                    fileName: "app/routes/_index.tsx",
                    lineNumber: 2325,
                    columnNumber: 23
                  },
                  this
                )
              ] }, void 0, !0, {
                fileName: "app/routes/_index.tsx",
                lineNumber: 2296,
                columnNumber: 25
              }, this)
            ] }, void 0, !0, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 2294,
              columnNumber: 23
            }, this) }, void 0, !1, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 2293,
              columnNumber: 21
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: recommendations.map((rec, index) => {
              let isApproved = approvalState[rec.field] === !0, isRejected = approvalState[rec.field] === !1, isPending = approvalState[rec.field] === void 0, isApplied = rec.status === "applied", fieldInfo = ((field) => {
                let fieldCategories = {
                  required: { fields: ["title", "description", "price", "availability", "category"], points: "25", impact: "5-6%", color: "critical", icon: "\u{1F6A8}" },
                  high: { fields: ["material", "dimensions", "weight", "brand", "use_cases", "features", "image_urls"], points: "20", impact: "4-5%", color: "warning", icon: "\u26A1" },
                  medium: { fields: ["color", "size", "target_audience", "keywords", "upc", "compatibility", "age_range", "gender", "video_urls"], points: "15", impact: "3-4%", color: "attention", icon: "\u{1F4CB}" },
                  low: { fields: ["model", "sku", "tags", "vendor", "warranty", "return_policy", "shipping_info", "documentation_url", "specifications", "ai_search_queries", "semantic_description"], points: "10", impact: "2-3%", color: "info", icon: "\u2728" }
                };
                for (let [category, info] of Object.entries(fieldCategories))
                  if (info.fields.includes(field))
                    return { category, ...info };
                return { category: "low", fields: [], points: "10", impact: "2%", color: "info", icon: "\u2728" };
              })(rec.field);
              return /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
                /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.InlineStack, { children: [
                  /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
                    /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.InlineStack, { children: [
                      /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "headingSm", as: "h4", children: [
                        fieldInfo.icon,
                        " ",
                        rec.field.charAt(0).toUpperCase() + rec.field.slice(1).replace(/_/g, " ")
                      ] }, void 0, !0, {
                        fileName: "app/routes/_index.tsx",
                        lineNumber: 2370,
                        columnNumber: 33
                      }, this),
                      /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Badge, { tone: fieldInfo.color, size: "small", children: fieldInfo.category.charAt(0).toUpperCase() + fieldInfo.category.slice(1) }, void 0, !1, {
                        fileName: "app/routes/_index.tsx",
                        lineNumber: 2373,
                        columnNumber: 37
                      }, this)
                    ] }, void 0, !0, {
                      fileName: "app/routes/_index.tsx",
                      lineNumber: 2369,
                      columnNumber: 35
                    }, this),
                    /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.InlineStack, { wrap: !0, children: [
                      /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Badge, { tone: "info", size: "small", children: [
                        "+",
                        fieldInfo.points,
                        " pts"
                      ] }, void 0, !0, {
                        fileName: "app/routes/_index.tsx",
                        lineNumber: 2379,
                        columnNumber: 37
                      }, this),
                      /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Badge, { tone: "subdued", size: "small", children: [
                        "~",
                        fieldInfo.impact,
                        " impact"
                      ] }, void 0, !0, {
                        fileName: "app/routes/_index.tsx",
                        lineNumber: 2382,
                        columnNumber: 37
                      }, this),
                      isApplied && /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Badge, { tone: "success", size: "small", children: "\u{1F680} Applied" }, void 0, !1, {
                        fileName: "app/routes/_index.tsx",
                        lineNumber: 2386,
                        columnNumber: 33
                      }, this),
                      !isApplied && isApproved && /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Badge, { tone: "success", size: "small", children: "\u2705 Approved" }, void 0, !1, {
                        fileName: "app/routes/_index.tsx",
                        lineNumber: 2389,
                        columnNumber: 33
                      }, this),
                      !isApplied && isRejected && /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Badge, { tone: "critical", size: "small", children: "\u274C Rejected" }, void 0, !1, {
                        fileName: "app/routes/_index.tsx",
                        lineNumber: 2392,
                        columnNumber: 33
                      }, this),
                      !isApplied && isPending && /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Badge, { tone: "attention", size: "small", children: "\u23F3 Pending" }, void 0, !1, {
                        fileName: "app/routes/_index.tsx",
                        lineNumber: 2395,
                        columnNumber: 33
                      }, this)
                    ] }, void 0, !0, {
                      fileName: "app/routes/_index.tsx",
                      lineNumber: 2378,
                      columnNumber: 35
                    }, this)
                  ] }, void 0, !0, {
                    fileName: "app/routes/_index.tsx",
                    lineNumber: 2368,
                    columnNumber: 27
                  }, this),
                  !isApplied && /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.InlineStack, { children: [
                    /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
                      import_polaris2.Button,
                      {
                        size: "slim",
                        onClick: () => handleToggleApproval(rec.field, !1),
                        variant: isRejected ? "primary" : "secondary",
                        tone: isRejected ? "critical" : void 0,
                        children: isRejected ? "\u274C Rejected" : "\u274C Reject"
                      },
                      void 0,
                      !1,
                      {
                        fileName: "app/routes/_index.tsx",
                        lineNumber: 2403,
                        columnNumber: 33
                      },
                      this
                    ),
                    /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
                      import_polaris2.Button,
                      {
                        size: "slim",
                        onClick: () => handleToggleApproval(rec.field, !0),
                        variant: isApproved ? "primary" : "secondary",
                        tone: isApproved ? "success" : void 0,
                        children: isApproved ? "\u2705 Approved" : "\u2705 Approve"
                      },
                      void 0,
                      !1,
                      {
                        fileName: "app/routes/_index.tsx",
                        lineNumber: 2411,
                        columnNumber: 33
                      },
                      this
                    )
                  ] }, void 0, !0, {
                    fileName: "app/routes/_index.tsx",
                    lineNumber: 2402,
                    columnNumber: 29
                  }, this)
                ] }, void 0, !0, {
                  fileName: "app/routes/_index.tsx",
                  lineNumber: 2367,
                  columnNumber: 31
                }, this),
                /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
                  /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.InlineStack, { children: [
                    /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
                      /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodyMd", tone: "subdued", as: "p", children: "Current Value" }, void 0, !1, {
                        fileName: "app/routes/_index.tsx",
                        lineNumber: 2428,
                        columnNumber: 39
                      }, this),
                      /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Box, { padding: "200", borderRadius: "100", children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodySm", as: "p", children: rec.originalValue || /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { tone: "subdued", as: "p", children: "(empty)" }, void 0, !1, {
                        fileName: "app/routes/_index.tsx",
                        lineNumber: 2431,
                        columnNumber: 65
                      }, this) }, void 0, !1, {
                        fileName: "app/routes/_index.tsx",
                        lineNumber: 2430,
                        columnNumber: 29
                      }, this) }, void 0, !1, {
                        fileName: "app/routes/_index.tsx",
                        lineNumber: 2429,
                        columnNumber: 39
                      }, this)
                    ] }, void 0, !0, {
                      fileName: "app/routes/_index.tsx",
                      lineNumber: 2427,
                      columnNumber: 37
                    }, this),
                    /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
                      /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodyMd", tone: "success", as: "p", children: "AI Recommendation" }, void 0, !1, {
                        fileName: "app/routes/_index.tsx",
                        lineNumber: 2437,
                        columnNumber: 39
                      }, this),
                      /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Box, { padding: "200", borderRadius: "100", children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodySm", as: "p", children: rec.newValue }, void 0, !1, {
                        fileName: "app/routes/_index.tsx",
                        lineNumber: 2439,
                        columnNumber: 29
                      }, this) }, void 0, !1, {
                        fileName: "app/routes/_index.tsx",
                        lineNumber: 2438,
                        columnNumber: 39
                      }, this)
                    ] }, void 0, !0, {
                      fileName: "app/routes/_index.tsx",
                      lineNumber: 2436,
                      columnNumber: 37
                    }, this)
                  ] }, void 0, !0, {
                    fileName: "app/routes/_index.tsx",
                    lineNumber: 2426,
                    columnNumber: 35
                  }, this),
                  /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodySm", tone: "subdued", as: "p", children: [
                    "\u{1F4A1} ",
                    /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)("em", { children: rec.improvement }, void 0, !1, {
                      fileName: "app/routes/_index.tsx",
                      lineNumber: 2447,
                      columnNumber: 40
                    }, this)
                  ] }, void 0, !0, {
                    fileName: "app/routes/_index.tsx",
                    lineNumber: 2446,
                    columnNumber: 29
                  }, this)
                ] }, void 0, !0, {
                  fileName: "app/routes/_index.tsx",
                  lineNumber: 2425,
                  columnNumber: 33
                }, this) }, void 0, !1, {
                  fileName: "app/routes/_index.tsx",
                  lineNumber: 2424,
                  columnNumber: 31
                }, this)
              ] }, void 0, !0, {
                fileName: "app/routes/_index.tsx",
                lineNumber: 2365,
                columnNumber: 29
              }, this) }, index, !1, {
                fileName: "app/routes/_index.tsx",
                lineNumber: 2364,
                columnNumber: 23
              }, this);
            }) }, void 0, !1, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 2337,
              columnNumber: 21
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.InlineStack, { children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
                /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodyMd", tone: "subdued", as: "p", children: "Ready to apply your approved changes?" }, void 0, !1, {
                  fileName: "app/routes/_index.tsx",
                  lineNumber: 2461,
                  columnNumber: 27
                }, this),
                /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodySm", tone: "subdued", as: "p", children: [
                  recommendations.filter(
                    (rec) => rec.status !== "applied" && approvalState[rec.field] === !0
                  ).length,
                  " changes approved for application"
                ] }, void 0, !0, {
                  fileName: "app/routes/_index.tsx",
                  lineNumber: 2464,
                  columnNumber: 27
                }, this)
              ] }, void 0, !0, {
                fileName: "app/routes/_index.tsx",
                lineNumber: 2460,
                columnNumber: 25
              }, this),
              /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.InlineStack, { children: [
                /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
                  import_polaris2.Button,
                  {
                    onClick: () => setRecommendations([]),
                    variant: "secondary",
                    children: "Cancel"
                  },
                  void 0,
                  !1,
                  {
                    fileName: "app/routes/_index.tsx",
                    lineNumber: 2472,
                    columnNumber: 27
                  },
                  this
                ),
                /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
                  import_polaris2.Button,
                  {
                    variant: "primary",
                    size: "large",
                    onClick: handleApplyChanges,
                    loading: isApplyingChanges,
                    disabled: recommendations.filter(
                      (rec) => rec.status !== "applied" && approvalState[rec.field] === !0
                    ).length === 0,
                    children: isApplyingChanges ? "\u{1F680} Applying..." : `\u2705 Apply ${recommendations.filter(
                      (rec) => rec.status !== "applied" && approvalState[rec.field] === !0
                    ).length} Changes`
                  },
                  void 0,
                  !1,
                  {
                    fileName: "app/routes/_index.tsx",
                    lineNumber: 2478,
                    columnNumber: 23
                  },
                  this
                )
              ] }, void 0, !0, {
                fileName: "app/routes/_index.tsx",
                lineNumber: 2471,
                columnNumber: 25
              }, this)
            ] }, void 0, !0, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 2459,
              columnNumber: 23
            }, this) }, void 0, !1, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 2458,
              columnNumber: 21
            }, this)
          ] }, void 0, !0, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 2273,
            columnNumber: 19
          }, this) }, void 0, !1, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 2272,
            columnNumber: 13
          }, this),
          selectedProduct.gaps.length > 0 && /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.InlineStack, { align: "space-between", children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
                /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "headingMd", as: "h3", children: "Manual Product Information" }, void 0, !1, {
                  fileName: "app/routes/_index.tsx",
                  lineNumber: 2506,
                  columnNumber: 25
                }, this),
                /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodySm", tone: "subdued", as: "p", children: "Fill in product specs that only you know. These can't be generated by AI." }, void 0, !1, {
                  fileName: "app/routes/_index.tsx",
                  lineNumber: 2507,
                  columnNumber: 25
                }, this)
              ] }, void 0, !0, {
                fileName: "app/routes/_index.tsx",
                lineNumber: 2505,
                columnNumber: 23
              }, this),
              /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
                import_polaris2.Button,
                {
                  onClick: () => setCustomerInputOpen(!customerInputOpen),
                  variant: "secondary",
                  size: "slim",
                  children: customerInputOpen ? "Hide Fields" : "Add Product Info"
                },
                void 0,
                !1,
                {
                  fileName: "app/routes/_index.tsx",
                  lineNumber: 2511,
                  columnNumber: 23
                },
                this
              )
            ] }, void 0, !0, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 2504,
              columnNumber: 21
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Collapsible, { id: "customer-input-collapsible", open: customerInputOpen, children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
              selectedProduct.gaps.filter((gap) => getFieldInputType(gap) === "customer_required").map((field, index) => {
                let label = FIELD_LABELS[field] || field.charAt(0).toUpperCase() + field.slice(1).replace(/_/g, " ");
                return /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Box, { children: [
                  field === "dimensions" ? /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
                    /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodySm", as: "p", children: label }, void 0, !1, {
                      fileName: "app/routes/_index.tsx",
                      lineNumber: 2533,
                      columnNumber: 37
                    }, this),
                    /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.InlineStack, { gap: "300", children: [
                      /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
                        import_polaris2.TextField,
                        {
                          label: "Length",
                          value: customerInputData[`${field}_length`] || "",
                          onChange: (value) => setCustomerInputData((prev) => ({
                            ...prev,
                            [`${field}_length`]: value
                          })),
                          placeholder: "e.g., 12 inches",
                          autoComplete: "off"
                        },
                        void 0,
                        !1,
                        {
                          fileName: "app/routes/_index.tsx",
                          lineNumber: 2535,
                          columnNumber: 39
                        },
                        this
                      ),
                      /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
                        import_polaris2.TextField,
                        {
                          label: "Width",
                          value: customerInputData[`${field}_width`] || "",
                          onChange: (value) => setCustomerInputData((prev) => ({
                            ...prev,
                            [`${field}_width`]: value
                          })),
                          placeholder: "e.g., 8 inches",
                          autoComplete: "off"
                        },
                        void 0,
                        !1,
                        {
                          fileName: "app/routes/_index.tsx",
                          lineNumber: 2545,
                          columnNumber: 39
                        },
                        this
                      ),
                      /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
                        import_polaris2.TextField,
                        {
                          label: "Height",
                          value: customerInputData[`${field}_height`] || "",
                          onChange: (value) => setCustomerInputData((prev) => ({
                            ...prev,
                            [`${field}_height`]: value
                          })),
                          placeholder: "e.g., 4 inches",
                          autoComplete: "off"
                        },
                        void 0,
                        !1,
                        {
                          fileName: "app/routes/_index.tsx",
                          lineNumber: 2555,
                          columnNumber: 39
                        },
                        this
                      )
                    ] }, void 0, !0, {
                      fileName: "app/routes/_index.tsx",
                      lineNumber: 2534,
                      columnNumber: 37
                    }, this)
                  ] }, void 0, !0, {
                    fileName: "app/routes/_index.tsx",
                    lineNumber: 2532,
                    columnNumber: 27
                  }, this) : field === "gender" ? /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
                    import_polaris2.Select,
                    {
                      label,
                      options: [
                        { label: "Select target gender", value: "" },
                        { label: "Male", value: "male" },
                        { label: "Female", value: "female" },
                        { label: "Unisex", value: "unisex" },
                        { label: "Kids", value: "kids" }
                      ],
                      value: customerInputData[field] || "",
                      onChange: (value) => setCustomerInputData((prev) => ({
                        ...prev,
                        [field]: value
                      }))
                    },
                    void 0,
                    !1,
                    {
                      fileName: "app/routes/_index.tsx",
                      lineNumber: 2568,
                      columnNumber: 27
                    },
                    this
                  ) : /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
                    import_polaris2.TextField,
                    {
                      label,
                      value: customerInputData[field] || "",
                      onChange: (value) => setCustomerInputData((prev) => ({
                        ...prev,
                        [field]: value
                      })),
                      placeholder: getFieldPlaceholder(field),
                      helpText: getFieldHelpText(field),
                      multiline: field === "specifications" || field === "warranty" || field === "return_policy",
                      autoComplete: "off"
                    },
                    void 0,
                    !1,
                    {
                      fileName: "app/routes/_index.tsx",
                      lineNumber: 2584,
                      columnNumber: 27
                    },
                    this
                  ),
                  /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Box, { paddingBlockStart: "200", children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.InlineStack, { gap: "200", blockAlign: "center", children: [
                    /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodySm", tone: "subdued", as: "p", children: [
                      "Impact: +",
                      getFieldPoints(field),
                      " points, ~",
                      getFieldImpact(field),
                      "% health boost"
                    ] }, void 0, !0, {
                      fileName: "app/routes/_index.tsx",
                      lineNumber: 2601,
                      columnNumber: 37
                    }, this),
                    customerInputData[field] && /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Badge, { tone: "success", size: "small", children: "\u2705 Ready to save" }, void 0, !1, {
                      fileName: "app/routes/_index.tsx",
                      lineNumber: 2605,
                      columnNumber: 31
                    }, this)
                  ] }, void 0, !0, {
                    fileName: "app/routes/_index.tsx",
                    lineNumber: 2600,
                    columnNumber: 35
                  }, this) }, void 0, !1, {
                    fileName: "app/routes/_index.tsx",
                    lineNumber: 2599,
                    columnNumber: 33
                  }, this)
                ] }, index, !0, {
                  fileName: "app/routes/_index.tsx",
                  lineNumber: 2529,
                  columnNumber: 25
                }, this);
              }),
              Object.keys(customerInputData).length > 0 && /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.InlineStack, { align: "end", children: [
                /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Button, { onClick: () => setCustomerInputData({}), children: "Clear All" }, void 0, !1, {
                  fileName: "app/routes/_index.tsx",
                  lineNumber: 2616,
                  columnNumber: 29
                }, this),
                /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
                  import_polaris2.Button,
                  {
                    variant: "primary",
                    onClick: handleSaveCustomerInput,
                    loading: isSavingCustomerInput,
                    children: [
                      "Save ",
                      Object.values(customerInputData).filter((v) => v.trim()).length,
                      " Fields"
                    ]
                  },
                  void 0,
                  !0,
                  {
                    fileName: "app/routes/_index.tsx",
                    lineNumber: 2619,
                    columnNumber: 29
                  },
                  this
                )
              ] }, void 0, !0, {
                fileName: "app/routes/_index.tsx",
                lineNumber: 2615,
                columnNumber: 21
              }, this)
            ] }, void 0, !0, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 2521,
              columnNumber: 23
            }, this) }, void 0, !1, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 2520,
              columnNumber: 21
            }, this)
          ] }, void 0, !0, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 2503,
            columnNumber: 19
          }, this) }, void 0, !1, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 2502,
            columnNumber: 13
          }, this),
          selectedProduct.score >= 90 && /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.BlockStack, { children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "headingMd", as: "h3", children: selectedProduct.score === 100 ? "\u{1F389} Perfect Product Health!" : "\u2705 Product Health: Excellent" }, void 0, !1, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 2637,
              columnNumber: 21
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { as: "p", children: selectedProduct.score === 100 ? "Congratulations! This product has achieved perfect health with all OpenAI spec requirements met." : "This product has a high health score and does not need immediate attention." }, void 0, !1, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 2640,
              columnNumber: 21
            }, this),
            selectedProduct.gaps.length === 0 && selectedProduct.score === 100 && /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(import_polaris2.Text, { variant: "bodySm", tone: "success", as: "p", children: "\u{1F680} Ready for OpenAI ChatGPT discovery!" }, void 0, !1, {
              fileName: "app/routes/_index.tsx",
              lineNumber: 2646,
              columnNumber: 17
            }, this)
          ] }, void 0, !0, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 2636,
            columnNumber: 19
          }, this) }, void 0, !1, {
            fileName: "app/routes/_index.tsx",
            lineNumber: 2635,
            columnNumber: 13
          }, this)
        ] }, void 0, !0, {
          fileName: "app/routes/_index.tsx",
          lineNumber: 2020,
          columnNumber: 13
        }, this) }, void 0, !1, {
          fileName: "app/routes/_index.tsx",
          lineNumber: 2019,
          columnNumber: 9
        }, this)
      },
      void 0,
      !1,
      {
        fileName: "app/routes/_index.tsx",
        lineNumber: 2008,
        columnNumber: 7
      },
      this
    )
  ] }, void 0, !0, {
    fileName: "app/routes/_index.tsx",
    lineNumber: 1591,
    columnNumber: 5
  }, this);
}

// app/routes/auth.$.tsx
var auth_exports = {};
__export(auth_exports, {
  loader: () => loader8
});
init_shopify_server();
var loader8 = async ({ request }) => (await authenticate.admin(request), null);

// app/routes/health.tsx
var health_exports = {};
__export(health_exports, {
  loader: () => loader9
});
var import_node11 = require("@remix-run/node");
async function loader9() {
  try {
    return (0, import_node11.json)(
      {
        status: "healthy",
        timestamp: (/* @__PURE__ */ new Date()).toISOString(),
        service: "catalogai-optimizer",
        environment: "development",
        uptime: process.uptime()
      },
      { status: 200 }
    );
  } catch (error) {
    return console.error("Health check failed:", error), (0, import_node11.json)(
      {
        status: "unhealthy",
        error: error instanceof Error ? error.message : "Unknown error",
        timestamp: (/* @__PURE__ */ new Date()).toISOString()
      },
      { status: 500 }
    );
  }
}

// server-assets-manifest:@remix-run/dev/assets-manifest
var assets_manifest_default = { entry: { module: "/build/entry.client-2SP42A7H.js", imports: ["/build/_shared/chunk-O4BRYNJ4.js", "/build/_shared/chunk-KB66VNYM.js", "/build/_shared/chunk-U4FRFQSK.js", "/build/_shared/chunk-XGOTYLZ5.js", "/build/_shared/chunk-7M6SC7J5.js", "/build/_shared/chunk-JWO2UMNO.js", "/build/_shared/chunk-UWV35TSL.js", "/build/_shared/chunk-PNG5AS42.js"] }, routes: { root: { id: "root", parentId: void 0, path: "", index: void 0, caseSensitive: void 0, module: "/build/root-7P3B7Q77.js", imports: void 0, hasAction: !1, hasLoader: !1, hasClientAction: !1, hasClientLoader: !1, hasErrorBoundary: !1 }, "routes/_index": { id: "routes/_index", parentId: "root", path: void 0, index: !0, caseSensitive: void 0, module: "/build/routes/_index-G3AATRTU.js", imports: ["/build/_shared/chunk-EJGQX3FZ.js", "/build/_shared/chunk-WKL2Q47I.js", "/build/_shared/chunk-7LEGIGN6.js"], hasAction: !0, hasLoader: !0, hasClientAction: !1, hasClientLoader: !1, hasErrorBoundary: !1 }, "routes/api.enrich": { id: "routes/api.enrich", parentId: "root", path: "api/enrich", index: void 0, caseSensitive: void 0, module: "/build/routes/api.enrich-3XAUJ4WC.js", imports: void 0, hasAction: !0, hasLoader: !0, hasClientAction: !1, hasClientLoader: !1, hasErrorBoundary: !1 }, "routes/api.health-check": { id: "routes/api.health-check", parentId: "root", path: "api/health-check", index: void 0, caseSensitive: void 0, module: "/build/routes/api.health-check-XLG7AG4T.js", imports: void 0, hasAction: !0, hasLoader: !0, hasClientAction: !1, hasClientLoader: !1, hasErrorBoundary: !1 }, "routes/api.queue-status": { id: "routes/api.queue-status", parentId: "root", path: "api/queue-status", index: void 0, caseSensitive: void 0, module: "/build/routes/api.queue-status-WHOO3S4P.js", imports: void 0, hasAction: !1, hasLoader: !0, hasClientAction: !1, hasClientLoader: !1, hasErrorBoundary: !1 }, "routes/api.settings": { id: "routes/api.settings", parentId: "root", path: "api/settings", index: void 0, caseSensitive: void 0, module: "/build/routes/api.settings-UN35SBFW.js", imports: void 0, hasAction: !0, hasLoader: !0, hasClientAction: !1, hasClientLoader: !1, hasErrorBoundary: !1 }, "routes/api.sync": { id: "routes/api.sync", parentId: "root", path: "api/sync", index: void 0, caseSensitive: void 0, module: "/build/routes/api.sync-MH7TZGJZ.js", imports: void 0, hasAction: !0, hasLoader: !0, hasClientAction: !1, hasClientLoader: !1, hasErrorBoundary: !1 }, "routes/api.test-health-check": { id: "routes/api.test-health-check", parentId: "root", path: "api/test-health-check", index: void 0, caseSensitive: void 0, module: "/build/routes/api.test-health-check-MG5D5ABK.js", imports: void 0, hasAction: !1, hasLoader: !0, hasClientAction: !1, hasClientLoader: !1, hasErrorBoundary: !1 }, "routes/api.validate": { id: "routes/api.validate", parentId: "root", path: "api/validate", index: void 0, caseSensitive: void 0, module: "/build/routes/api.validate-FV22CLAM.js", imports: void 0, hasAction: !0, hasLoader: !1, hasClientAction: !1, hasClientLoader: !1, hasErrorBoundary: !1 }, "routes/auth.$": { id: "routes/auth.$", parentId: "root", path: "auth/*", index: void 0, caseSensitive: void 0, module: "/build/routes/auth.$-Z6LPBAD4.js", imports: void 0, hasAction: !1, hasLoader: !0, hasClientAction: !1, hasClientLoader: !1, hasErrorBoundary: !1 }, "routes/health": { id: "routes/health", parentId: "root", path: "health", index: void 0, caseSensitive: void 0, module: "/build/routes/health-WRGBPVEM.js", imports: void 0, hasAction: !1, hasLoader: !0, hasClientAction: !1, hasClientLoader: !1, hasErrorBoundary: !1 }, "routes/webhooks": { id: "routes/webhooks", parentId: "root", path: "webhooks", index: void 0, caseSensitive: void 0, module: "/build/routes/webhooks-NFVTRAGX.js", imports: void 0, hasAction: !0, hasLoader: !1, hasClientAction: !1, hasClientLoader: !1, hasErrorBoundary: !1 } }, version: "d4cea5cb", hmr: { runtime: "/build/_shared/chunk-JWO2UMNO.js", timestamp: 1760714520562 }, url: "/build/manifest-D4CEA5CB.js" };

// server-entry-module:@remix-run/dev/server-build
var mode = "development", assetsBuildDirectory = "public/build", future = { v3_fetcherPersist: !0, v3_relativeSplatPath: !0, v3_throwAbortReason: !0, v3_routeConfig: !1, v3_singleFetch: !1, v3_lazyRouteDiscovery: !1, unstable_optimizeDeps: !1 }, publicPath = "/build/", entry = { module: entry_server_exports }, routes = {
  root: {
    id: "root",
    parentId: void 0,
    path: "",
    index: void 0,
    caseSensitive: void 0,
    module: root_exports
  },
  "routes/api.test-health-check": {
    id: "routes/api.test-health-check",
    parentId: "root",
    path: "api/test-health-check",
    index: void 0,
    caseSensitive: void 0,
    module: api_test_health_check_exports
  },
  "routes/api.health-check": {
    id: "routes/api.health-check",
    parentId: "root",
    path: "api/health-check",
    index: void 0,
    caseSensitive: void 0,
    module: api_health_check_exports
  },
  "routes/api.queue-status": {
    id: "routes/api.queue-status",
    parentId: "root",
    path: "api/queue-status",
    index: void 0,
    caseSensitive: void 0,
    module: api_queue_status_exports
  },
  "routes/api.settings": {
    id: "routes/api.settings",
    parentId: "root",
    path: "api/settings",
    index: void 0,
    caseSensitive: void 0,
    module: api_settings_exports
  },
  "routes/api.validate": {
    id: "routes/api.validate",
    parentId: "root",
    path: "api/validate",
    index: void 0,
    caseSensitive: void 0,
    module: api_validate_exports
  },
  "routes/api.enrich": {
    id: "routes/api.enrich",
    parentId: "root",
    path: "api/enrich",
    index: void 0,
    caseSensitive: void 0,
    module: api_enrich_exports
  },
  "routes/api.sync": {
    id: "routes/api.sync",
    parentId: "root",
    path: "api/sync",
    index: void 0,
    caseSensitive: void 0,
    module: api_sync_exports
  },
  "routes/webhooks": {
    id: "routes/webhooks",
    parentId: "root",
    path: "webhooks",
    index: void 0,
    caseSensitive: void 0,
    module: webhooks_exports
  },
  "routes/_index": {
    id: "routes/_index",
    parentId: "root",
    path: void 0,
    index: !0,
    caseSensitive: void 0,
    module: index_exports
  },
  "routes/auth.$": {
    id: "routes/auth.$",
    parentId: "root",
    path: "auth/*",
    index: void 0,
    caseSensitive: void 0,
    module: auth_exports
  },
  "routes/health": {
    id: "routes/health",
    parentId: "root",
    path: "health",
    index: void 0,
    caseSensitive: void 0,
    module: health_exports
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  assets,
  assetsBuildDirectory,
  entry,
  future,
  mode,
  publicPath,
  routes
});
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)
*/
//# sourceMappingURL=index.js.map
