var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value;
var __esm = (fn, res) => function() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var __publicField = (obj, key, value) => (__defNormalProp(obj, typeof key != "symbol" ? key + "" : key, value), value);

// app/utils/db.ts
var import_client, db, init_db = __esm({
  "app/utils/db.ts"() {
    "use strict";
    import_client = require("@prisma/client");
    db = new import_client.PrismaClient({
      log: ["error", "warn"],
      errorFormat: "minimal"
    });
  }
});

// app/shopify.server.ts
var shopify_server_exports = {};
__export(shopify_server_exports, {
  addDocumentResponseHeaders: () => addDocumentResponseHeaders,
  apiVersion: () => apiVersion,
  authenticate: () => authenticate,
  default: () => shopify_server_default,
  registerWebhooks: () => registerWebhooks,
  sessionStorage: () => sessionStorage,
  unauthenticated: () => unauthenticated
});
var import_server2, import_shopify_app_session_storage_prisma, shopify, shopify_server_default, apiVersion, addDocumentResponseHeaders, authenticate, unauthenticated, registerWebhooks, sessionStorage, init_shopify_server = __esm({
  "app/shopify.server.ts"() {
    "use strict";
    import_server2 = require("@shopify/shopify-app-remix/server"), import_shopify_app_session_storage_prisma = require("@shopify/shopify-app-session-storage-prisma");
    init_db();
    shopify = (0, import_server2.shopifyApp)({
      apiKey: process.env.SHOPIFY_API_KEY,
      apiSecretKey: process.env.SHOPIFY_API_SECRET,
      appUrl: process.env.SHOPIFY_APP_URL,
      apiVersion: "2025-10",
      scopes: process.env.SCOPES?.split(",") || ["read_products", "read_inventory", "write_metafields", "read_orders"],
      sessionStorage: new import_shopify_app_session_storage_prisma.PrismaSessionStorage(db),
      distribution: "app",
      useOnlineTokens: !1,
      // Use offline tokens for background API calls
      hooks: {
        afterAuth: async ({ session }) => {
          let requestId = Math.random().toString(36).substring(7);
          console.log(`\u{1F50D} [${requestId}] afterAuth triggered for shop:`, session.shop), console.log(`\u{1F50D} [${requestId}] Session details:`, {
            id: session.id,
            shop: session.shop,
            scope: session.scope,
            isOnline: session.isOnline,
            expires: session.expires,
            accessTokenLength: session.accessToken?.length,
            accessTokenPrefix: session.accessToken?.substring(0, 15) + "..."
          });
          try {
            let user = await db.user.upsert({
              where: { shopId: session.shop },
              update: {
                accessToken: session.accessToken,
                updatedAt: /* @__PURE__ */ new Date()
              },
              create: {
                shopId: session.shop,
                shopDomain: session.shop,
                accessToken: session.accessToken,
                tier: "starter",
                aiUsage: 0
              }
            });
            console.log(`\u2705 [${requestId}] User created/updated:`, user.id), console.log(`\u{1F50D} [${requestId}] User details:`, {
              id: user.id,
              shopId: user.shopId,
              tier: user.tier,
              aiUsage: user.aiUsage,
              createdAt: user.createdAt,
              updatedAt: user.updatedAt
            });
          } catch (error) {
            throw console.error(`\u274C [${requestId}] afterAuth error:`, error), console.error(`\u274C [${requestId}] Error details:`, {
              message: error instanceof Error ? error.message : "Unknown error",
              stack: error instanceof Error ? error.stack : "No stack trace",
              errorType: error?.constructor?.name
            }), error;
          }
        }
      }
    }), shopify_server_default = shopify, apiVersion = "2025-10", addDocumentResponseHeaders = shopify.addDocumentResponseHeaders, authenticate = shopify.authenticate, unauthenticated = shopify.unauthenticated, registerWebhooks = shopify.registerWebhooks, sessionStorage = shopify.sessionStorage;
  }
});

// node_modules/@shopify/polaris/build/cjs/configure.js
var require_configure = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/configure.js"(exports) {
    "use strict";
    var DEFAULT_LOCALE = "en", SUPPORTED_LOCALES = ["cs", "da", "de", "en", "es", "fi", "fr", "it", "ja", "ko", "nb", "nl", "pl", "pt-BR", "pt-PT", "sv", "th", "tr", "vi", "zh-CN", "zh-TW"];
    exports.DEFAULT_LOCALE = DEFAULT_LOCALE;
    exports.SUPPORTED_LOCALES = SUPPORTED_LOCALES;
  }
});

// node_modules/@shopify/polaris/build/cjs/types.js
var require_types = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/types.js"(exports) {
    "use strict";
    exports.Key = void 0;
    (function(Key) {
      Key[Key.Backspace = 8] = "Backspace", Key[Key.Tab = 9] = "Tab", Key[Key.Enter = 13] = "Enter", Key[Key.Shift = 16] = "Shift", Key[Key.Ctrl = 17] = "Ctrl", Key[Key.Alt = 18] = "Alt", Key[Key.Pause = 19] = "Pause", Key[Key.CapsLock = 20] = "CapsLock", Key[Key.Escape = 27] = "Escape", Key[Key.Space = 32] = "Space", Key[Key.PageUp = 33] = "PageUp", Key[Key.PageDown = 34] = "PageDown", Key[Key.End = 35] = "End", Key[Key.Home = 36] = "Home", Key[Key.LeftArrow = 37] = "LeftArrow", Key[Key.UpArrow = 38] = "UpArrow", Key[Key.RightArrow = 39] = "RightArrow", Key[Key.DownArrow = 40] = "DownArrow", Key[Key.Insert = 45] = "Insert", Key[Key.Delete = 46] = "Delete", Key[Key.Key0 = 48] = "Key0", Key[Key.Key1 = 49] = "Key1", Key[Key.Key2 = 50] = "Key2", Key[Key.Key3 = 51] = "Key3", Key[Key.Key4 = 52] = "Key4", Key[Key.Key5 = 53] = "Key5", Key[Key.Key6 = 54] = "Key6", Key[Key.Key7 = 55] = "Key7", Key[Key.Key8 = 56] = "Key8", Key[Key.Key9 = 57] = "Key9", Key[Key.KeyA = 65] = "KeyA", Key[Key.KeyB = 66] = "KeyB", Key[Key.KeyC = 67] = "KeyC", Key[Key.KeyD = 68] = "KeyD", Key[Key.KeyE = 69] = "KeyE", Key[Key.KeyF = 70] = "KeyF", Key[Key.KeyG = 71] = "KeyG", Key[Key.KeyH = 72] = "KeyH", Key[Key.KeyI = 73] = "KeyI", Key[Key.KeyJ = 74] = "KeyJ", Key[Key.KeyK = 75] = "KeyK", Key[Key.KeyL = 76] = "KeyL", Key[Key.KeyM = 77] = "KeyM", Key[Key.KeyN = 78] = "KeyN", Key[Key.KeyO = 79] = "KeyO", Key[Key.KeyP = 80] = "KeyP", Key[Key.KeyQ = 81] = "KeyQ", Key[Key.KeyR = 82] = "KeyR", Key[Key.KeyS = 83] = "KeyS", Key[Key.KeyT = 84] = "KeyT", Key[Key.KeyU = 85] = "KeyU", Key[Key.KeyV = 86] = "KeyV", Key[Key.KeyW = 87] = "KeyW", Key[Key.KeyX = 88] = "KeyX", Key[Key.KeyY = 89] = "KeyY", Key[Key.KeyZ = 90] = "KeyZ", Key[Key.LeftMeta = 91] = "LeftMeta", Key[Key.RightMeta = 92] = "RightMeta", Key[Key.Select = 93] = "Select", Key[Key.Numpad0 = 96] = "Numpad0", Key[Key.Numpad1 = 97] = "Numpad1", Key[Key.Numpad2 = 98] = "Numpad2", Key[Key.Numpad3 = 99] = "Numpad3", Key[Key.Numpad4 = 100] = "Numpad4", Key[Key.Numpad5 = 101] = "Numpad5", Key[Key.Numpad6 = 102] = "Numpad6", Key[Key.Numpad7 = 103] = "Numpad7", Key[Key.Numpad8 = 104] = "Numpad8", Key[Key.Numpad9 = 105] = "Numpad9", Key[Key.Multiply = 106] = "Multiply", Key[Key.Add = 107] = "Add", Key[Key.Subtract = 109] = "Subtract", Key[Key.Decimal = 110] = "Decimal", Key[Key.Divide = 111] = "Divide", Key[Key.F1 = 112] = "F1", Key[Key.F2 = 113] = "F2", Key[Key.F3 = 114] = "F3", Key[Key.F4 = 115] = "F4", Key[Key.F5 = 116] = "F5", Key[Key.F6 = 117] = "F6", Key[Key.F7 = 118] = "F7", Key[Key.F8 = 119] = "F8", Key[Key.F9 = 120] = "F9", Key[Key.F10 = 121] = "F10", Key[Key.F11 = 122] = "F11", Key[Key.F12 = 123] = "F12", Key[Key.NumLock = 144] = "NumLock", Key[Key.ScrollLock = 145] = "ScrollLock", Key[Key.Semicolon = 186] = "Semicolon", Key[Key.Equals = 187] = "Equals", Key[Key.Comma = 188] = "Comma", Key[Key.Dash = 189] = "Dash", Key[Key.Period = 190] = "Period", Key[Key.ForwardSlash = 191] = "ForwardSlash", Key[Key.GraveAccent = 192] = "GraveAccent", Key[Key.OpenBracket = 219] = "OpenBracket", Key[Key.BackSlash = 220] = "BackSlash", Key[Key.CloseBracket = 221] = "CloseBracket", Key[Key.SingleQuote = 222] = "SingleQuote";
    })(exports.Key || (exports.Key = {}));
  }
});

// node_modules/@shopify/polaris/build/cjs/components/shared.js
var require_shared = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/shared.js"(exports) {
    "use strict";
    var scrollable = {
      props: {
        "data-polaris-scrollable": !0
      },
      selector: "[data-polaris-scrollable]"
    }, overlay = {
      props: {
        "data-polaris-overlay": !0
      },
      selector: "[data-polaris-overlay]"
    }, layer = {
      props: {
        "data-polaris-layer": !0
      },
      selector: "[data-polaris-layer]"
    }, unstyled = {
      props: {
        "data-polaris-unstyled": !0
      },
      selector: "[data-polaris-unstyled]"
    }, dataPolarisTopBar = {
      props: {
        "data-polaris-top-bar": !0
      },
      selector: "[data-polaris-top-bar]"
    }, headerCell = {
      props: {
        "data-polaris-header-cell": !0
      },
      selector: "[data-polaris-header-cell]"
    }, portal = {
      props: ["data-portal-id"],
      selector: "[data-portal-id]"
    }, DATA_ATTRIBUTE = {
      overlay,
      layer
    };
    exports.DATA_ATTRIBUTE = DATA_ATTRIBUTE;
    exports.dataPolarisTopBar = dataPolarisTopBar;
    exports.headerCell = headerCell;
    exports.layer = layer;
    exports.overlay = overlay;
    exports.portal = portal;
    exports.scrollable = scrollable;
    exports.unstyled = unstyled;
  }
});

// node_modules/react/cjs/react.production.min.js
var require_react_production_min = __commonJS({
  "node_modules/react/cjs/react.production.min.js"(exports) {
    "use strict";
    var l = Symbol.for("react.element"), n = Symbol.for("react.portal"), p = Symbol.for("react.fragment"), q = Symbol.for("react.strict_mode"), r = Symbol.for("react.profiler"), t = Symbol.for("react.provider"), u = Symbol.for("react.context"), v = Symbol.for("react.forward_ref"), w = Symbol.for("react.suspense"), x = Symbol.for("react.memo"), y = Symbol.for("react.lazy"), z = Symbol.iterator;
    function A(a) {
      return a === null || typeof a != "object" ? null : (a = z && a[z] || a["@@iterator"], typeof a == "function" ? a : null);
    }
    var B = { isMounted: function() {
      return !1;
    }, enqueueForceUpdate: function() {
    }, enqueueReplaceState: function() {
    }, enqueueSetState: function() {
    } }, C = Object.assign, D = {};
    function E(a, b, e) {
      this.props = a, this.context = b, this.refs = D, this.updater = e || B;
    }
    E.prototype.isReactComponent = {};
    E.prototype.setState = function(a, b) {
      if (typeof a != "object" && typeof a != "function" && a != null)
        throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
      this.updater.enqueueSetState(this, a, b, "setState");
    };
    E.prototype.forceUpdate = function(a) {
      this.updater.enqueueForceUpdate(this, a, "forceUpdate");
    };
    function F() {
    }
    F.prototype = E.prototype;
    function G(a, b, e) {
      this.props = a, this.context = b, this.refs = D, this.updater = e || B;
    }
    var H = G.prototype = new F();
    H.constructor = G;
    C(H, E.prototype);
    H.isPureReactComponent = !0;
    var I = Array.isArray, J = Object.prototype.hasOwnProperty, K = { current: null }, L = { key: !0, ref: !0, __self: !0, __source: !0 };
    function M(a, b, e) {
      var d, c = {}, k = null, h = null;
      if (b != null)
        for (d in b.ref !== void 0 && (h = b.ref), b.key !== void 0 && (k = "" + b.key), b)
          J.call(b, d) && !L.hasOwnProperty(d) && (c[d] = b[d]);
      var g = arguments.length - 2;
      if (g === 1)
        c.children = e;
      else if (1 < g) {
        for (var f = Array(g), m = 0; m < g; m++)
          f[m] = arguments[m + 2];
        c.children = f;
      }
      if (a && a.defaultProps)
        for (d in g = a.defaultProps, g)
          c[d] === void 0 && (c[d] = g[d]);
      return { $$typeof: l, type: a, key: k, ref: h, props: c, _owner: K.current };
    }
    function N(a, b) {
      return { $$typeof: l, type: a.type, key: b, ref: a.ref, props: a.props, _owner: a._owner };
    }
    function O(a) {
      return typeof a == "object" && a !== null && a.$$typeof === l;
    }
    function escape(a) {
      var b = { "=": "=0", ":": "=2" };
      return "$" + a.replace(/[=:]/g, function(a2) {
        return b[a2];
      });
    }
    var P = /\/+/g;
    function Q(a, b) {
      return typeof a == "object" && a !== null && a.key != null ? escape("" + a.key) : b.toString(36);
    }
    function R(a, b, e, d, c) {
      var k = typeof a;
      (k === "undefined" || k === "boolean") && (a = null);
      var h = !1;
      if (a === null)
        h = !0;
      else
        switch (k) {
          case "string":
          case "number":
            h = !0;
            break;
          case "object":
            switch (a.$$typeof) {
              case l:
              case n:
                h = !0;
            }
        }
      if (h)
        return h = a, c = c(h), a = d === "" ? "." + Q(h, 0) : d, I(c) ? (e = "", a != null && (e = a.replace(P, "$&/") + "/"), R(c, b, e, "", function(a2) {
          return a2;
        })) : c != null && (O(c) && (c = N(c, e + (!c.key || h && h.key === c.key ? "" : ("" + c.key).replace(P, "$&/") + "/") + a)), b.push(c)), 1;
      if (h = 0, d = d === "" ? "." : d + ":", I(a))
        for (var g = 0; g < a.length; g++) {
          k = a[g];
          var f = d + Q(k, g);
          h += R(k, b, e, f, c);
        }
      else if (f = A(a), typeof f == "function")
        for (a = f.call(a), g = 0; !(k = a.next()).done; )
          k = k.value, f = d + Q(k, g++), h += R(k, b, e, f, c);
      else if (k === "object")
        throw b = String(a), Error("Objects are not valid as a React child (found: " + (b === "[object Object]" ? "object with keys {" + Object.keys(a).join(", ") + "}" : b) + "). If you meant to render a collection of children, use an array instead.");
      return h;
    }
    function S(a, b, e) {
      if (a == null)
        return a;
      var d = [], c = 0;
      return R(a, d, "", "", function(a2) {
        return b.call(e, a2, c++);
      }), d;
    }
    function T(a) {
      if (a._status === -1) {
        var b = a._result;
        b = b(), b.then(function(b2) {
          (a._status === 0 || a._status === -1) && (a._status = 1, a._result = b2);
        }, function(b2) {
          (a._status === 0 || a._status === -1) && (a._status = 2, a._result = b2);
        }), a._status === -1 && (a._status = 0, a._result = b);
      }
      if (a._status === 1)
        return a._result.default;
      throw a._result;
    }
    var U = { current: null }, V = { transition: null }, W = { ReactCurrentDispatcher: U, ReactCurrentBatchConfig: V, ReactCurrentOwner: K };
    function X() {
      throw Error("act(...) is not supported in production builds of React.");
    }
    exports.Children = { map: S, forEach: function(a, b, e) {
      S(a, function() {
        b.apply(this, arguments);
      }, e);
    }, count: function(a) {
      var b = 0;
      return S(a, function() {
        b++;
      }), b;
    }, toArray: function(a) {
      return S(a, function(a2) {
        return a2;
      }) || [];
    }, only: function(a) {
      if (!O(a))
        throw Error("React.Children.only expected to receive a single React element child.");
      return a;
    } };
    exports.Component = E;
    exports.Fragment = p;
    exports.Profiler = r;
    exports.PureComponent = G;
    exports.StrictMode = q;
    exports.Suspense = w;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W;
    exports.act = X;
    exports.cloneElement = function(a, b, e) {
      if (a == null)
        throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a + ".");
      var d = C({}, a.props), c = a.key, k = a.ref, h = a._owner;
      if (b != null) {
        if (b.ref !== void 0 && (k = b.ref, h = K.current), b.key !== void 0 && (c = "" + b.key), a.type && a.type.defaultProps)
          var g = a.type.defaultProps;
        for (f in b)
          J.call(b, f) && !L.hasOwnProperty(f) && (d[f] = b[f] === void 0 && g !== void 0 ? g[f] : b[f]);
      }
      var f = arguments.length - 2;
      if (f === 1)
        d.children = e;
      else if (1 < f) {
        g = Array(f);
        for (var m = 0; m < f; m++)
          g[m] = arguments[m + 2];
        d.children = g;
      }
      return { $$typeof: l, type: a.type, key: c, ref: k, props: d, _owner: h };
    };
    exports.createContext = function(a) {
      return a = { $$typeof: u, _currentValue: a, _currentValue2: a, _threadCount: 0, Provider: null, Consumer: null, _defaultValue: null, _globalName: null }, a.Provider = { $$typeof: t, _context: a }, a.Consumer = a;
    };
    exports.createElement = M;
    exports.createFactory = function(a) {
      var b = M.bind(null, a);
      return b.type = a, b;
    };
    exports.createRef = function() {
      return { current: null };
    };
    exports.forwardRef = function(a) {
      return { $$typeof: v, render: a };
    };
    exports.isValidElement = O;
    exports.lazy = function(a) {
      return { $$typeof: y, _payload: { _status: -1, _result: a }, _init: T };
    };
    exports.memo = function(a, b) {
      return { $$typeof: x, type: a, compare: b === void 0 ? null : b };
    };
    exports.startTransition = function(a) {
      var b = V.transition;
      V.transition = {};
      try {
        a();
      } finally {
        V.transition = b;
      }
    };
    exports.unstable_act = X;
    exports.useCallback = function(a, b) {
      return U.current.useCallback(a, b);
    };
    exports.useContext = function(a) {
      return U.current.useContext(a);
    };
    exports.useDebugValue = function() {
    };
    exports.useDeferredValue = function(a) {
      return U.current.useDeferredValue(a);
    };
    exports.useEffect = function(a, b) {
      return U.current.useEffect(a, b);
    };
    exports.useId = function() {
      return U.current.useId();
    };
    exports.useImperativeHandle = function(a, b, e) {
      return U.current.useImperativeHandle(a, b, e);
    };
    exports.useInsertionEffect = function(a, b) {
      return U.current.useInsertionEffect(a, b);
    };
    exports.useLayoutEffect = function(a, b) {
      return U.current.useLayoutEffect(a, b);
    };
    exports.useMemo = function(a, b) {
      return U.current.useMemo(a, b);
    };
    exports.useReducer = function(a, b, e) {
      return U.current.useReducer(a, b, e);
    };
    exports.useRef = function(a) {
      return U.current.useRef(a);
    };
    exports.useState = function(a) {
      return U.current.useState(a);
    };
    exports.useSyncExternalStore = function(a, b, e) {
      return U.current.useSyncExternalStore(a, b, e);
    };
    exports.useTransition = function() {
      return U.current.useTransition();
    };
    exports.version = "18.3.1";
  }
});

// node_modules/react/index.js
var require_react = __commonJS({
  "node_modules/react/index.js"(exports, module2) {
    "use strict";
    module2.exports = require_react_production_min();
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-theme.js
var require_use_theme = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-theme.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisTokens = require("@shopify/polaris-tokens"), ThemeContext = /* @__PURE__ */ React2.createContext(null), ThemeNameContext = /* @__PURE__ */ React2.createContext(null);
    function getTheme(themeName) {
      return polarisTokens.themes[themeName];
    }
    function useTheme() {
      let theme = React2.useContext(ThemeContext);
      if (!theme)
        throw new Error("No theme was provided. Your application must be wrapped in an <AppProvider> or <ThemeProvider> component. See https://polaris.shopify.com/components/app-provider for implementation instructions.");
      return theme;
    }
    function useThemeName() {
      let themeName = React2.useContext(ThemeNameContext);
      if (!themeName)
        throw new Error("No themeName was provided. Your application must be wrapped in an <AppProvider> or <ThemeProvider> component. See https://polaris.shopify.com/components/app-provider for implementation instructions.");
      return themeName;
    }
    function UseTheme(props) {
      let theme = useTheme();
      return props.children(theme);
    }
    exports.ThemeContext = ThemeContext;
    exports.ThemeNameContext = ThemeNameContext;
    exports.UseTheme = UseTheme;
    exports.getTheme = getTheme;
    exports.useTheme = useTheme;
    exports.useThemeName = useThemeName;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/is-object.js
var require_is_object = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/is-object.js"(exports) {
    "use strict";
    function isObject(value) {
      let type = typeof value;
      return value != null && (type === "object" || type === "function");
    }
    exports.isObject = isObject;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/css.js
var require_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/css.js"(exports) {
    "use strict";
    var polarisTokens = require("@shopify/polaris-tokens"), isObject = require_is_object();
    function classNames(...classes) {
      return classes.filter(Boolean).join(" ");
    }
    function variationName(name, value) {
      return `${name}${value.charAt(0).toUpperCase()}${value.slice(1)}`;
    }
    function sanitizeCustomProperties(styles) {
      let nonNullValues = Object.entries(styles).filter(([_, value]) => value != null);
      return nonNullValues.length ? Object.fromEntries(nonNullValues) : void 0;
    }
    function getResponsiveProps(componentName, componentProp, tokenSubgroup, responsiveProp) {
      if (!responsiveProp)
        return {};
      let result;
      return isObject.isObject(responsiveProp) ? result = Object.fromEntries(Object.entries(responsiveProp).map(([breakpointAlias, aliasOrScale]) => [breakpointAlias, `var(--p-${tokenSubgroup}-${aliasOrScale})`])) : result = {
        [polarisTokens.breakpointsAliases[0]]: `var(--p-${tokenSubgroup}-${responsiveProp})`
      }, Object.fromEntries(Object.entries(result).map(([breakpointAlias, value]) => [`--pc-${componentName}-${componentProp}-${breakpointAlias}`, value]));
    }
    function getResponsiveValue(componentName, componentProp, responsiveProp) {
      return responsiveProp ? isObject.isObject(responsiveProp) ? Object.fromEntries(Object.entries(responsiveProp).map(([breakpointAlias, responsiveValue]) => [`--pc-${componentName}-${componentProp}-${breakpointAlias}`, responsiveValue])) : {
        [`--pc-${componentName}-${componentProp}-${polarisTokens.breakpointsAliases[0]}`]: responsiveProp
      } : {};
    }
    exports.classNames = classNames;
    exports.getResponsiveProps = getResponsiveProps;
    exports.getResponsiveValue = getResponsiveValue;
    exports.sanitizeCustomProperties = sanitizeCustomProperties;
    exports.variationName = variationName;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ThemeProvider/ThemeProvider.css.js
var require_ThemeProvider_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ThemeProvider/ThemeProvider.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      themeContainer: "Polaris-ThemeProvider--themeContainer"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ThemeProvider/ThemeProvider.js
var require_ThemeProvider = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ThemeProvider/ThemeProvider.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisTokens = require("@shopify/polaris-tokens"), useTheme = require_use_theme(), css = require_css(), ThemeProvider_module = require_ThemeProvider_css(), themeNamesLocal = ["light", "dark-experimental"], isThemeNameLocal = (name) => themeNamesLocal.includes(name);
    function ThemeProvider(props) {
      let {
        as: ThemeContainer = "div",
        children,
        className,
        theme: themeName = polarisTokens.themeNameDefault
      } = props;
      return /* @__PURE__ */ React2.createElement(useTheme.ThemeNameContext.Provider, {
        value: themeName
      }, /* @__PURE__ */ React2.createElement(useTheme.ThemeContext.Provider, {
        value: useTheme.getTheme(themeName)
      }, /* @__PURE__ */ React2.createElement(ThemeContainer, {
        "data-portal-id": props["data-portal-id"],
        className: css.classNames(polarisTokens.createThemeClassName(themeName), ThemeProvider_module.default.themeContainer, className)
      }, children)));
    }
    exports.ThemeProvider = ThemeProvider;
    exports.isThemeNameLocal = isThemeNameLocal;
    exports.themeNamesLocal = themeNamesLocal;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/clamp.js
var require_clamp = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/clamp.js"(exports) {
    "use strict";
    function clamp(number, min, max) {
      return number < min ? min : number > max ? max : number;
    }
    exports.clamp = clamp;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/roundNumberToDecimalPlaces.js
var require_roundNumberToDecimalPlaces = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/roundNumberToDecimalPlaces.js"(exports) {
    "use strict";
    function roundNumberToDecimalPlaces(value, decimals) {
      let exponent = Number(`${value}e${decimals}`), roundedExponent = Math.round(exponent);
      return Number(`${roundedExponent}e-${decimals}`);
    }
    exports.roundNumberToDecimalPlaces = roundNumberToDecimalPlaces;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/color-transformers.js
var require_color_transformers = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/color-transformers.js"(exports) {
    "use strict";
    var clamp = require_clamp(), roundNumberToDecimalPlaces = require_roundNumberToDecimalPlaces();
    function rgbString(color) {
      let {
        red,
        green,
        blue
      } = color;
      return "alpha" in color ? `rgba(${red}, ${green}, ${blue}, ${color.alpha})` : `rgb(${red}, ${green}, ${blue})`;
    }
    var rgbaString = rgbString;
    function rgbToHex({
      red,
      green,
      blue
    }) {
      return `#${componentToHex(red)}${componentToHex(green)}${componentToHex(blue)}`;
    }
    function componentToHex(component) {
      let hex = component.toString(16);
      return hex.length === 1 ? `0${hex}` : hex;
    }
    function hsbToHex(color) {
      return rgbToHex(hsbToRgb(color));
    }
    function rgbFromHueAndChroma(hue, chroma) {
      let huePrime = hue / 60, hueDelta = 1 - Math.abs(huePrime % 2 - 1), intermediateValue = chroma * hueDelta, red = 0, green = 0, blue = 0;
      return huePrime >= 0 && huePrime <= 1 && (red = chroma, green = intermediateValue, blue = 0), huePrime >= 1 && huePrime <= 2 && (red = intermediateValue, green = chroma, blue = 0), huePrime >= 2 && huePrime <= 3 && (red = 0, green = chroma, blue = intermediateValue), huePrime >= 3 && huePrime <= 4 && (red = 0, green = intermediateValue, blue = chroma), huePrime >= 4 && huePrime <= 5 && (red = intermediateValue, green = 0, blue = chroma), huePrime >= 5 && huePrime <= 6 && (red = chroma, green = 0, blue = intermediateValue), {
        red,
        green,
        blue
      };
    }
    function hsbToRgb(color) {
      let {
        hue,
        saturation,
        brightness,
        alpha = 1
      } = color, chroma = brightness * saturation, {
        red,
        green,
        blue
      } = rgbFromHueAndChroma(hue, chroma), chromaBrightnessDelta = brightness - chroma;
      return red += chromaBrightnessDelta, green += chromaBrightnessDelta, blue += chromaBrightnessDelta, {
        red: Math.round(red * 255),
        green: Math.round(green * 255),
        blue: Math.round(blue * 255),
        alpha
      };
    }
    function hslToRgb(color) {
      let {
        hue,
        saturation,
        lightness,
        alpha = 1
      } = color, chroma = (1 - Math.abs(2 * (lightness / 100) - 1)) * (saturation / 100), {
        red,
        green,
        blue
      } = rgbFromHueAndChroma(hue, chroma), lightnessVal = lightness / 100 - chroma / 2;
      return red += lightnessVal, green += lightnessVal, blue += lightnessVal, {
        red: Math.round(red * 255),
        green: Math.round(green * 255),
        blue: Math.round(blue * 255),
        alpha
      };
    }
    function rgbToHsbl(color, type = "b") {
      let {
        alpha = 1
      } = color, red = color.red / 255, green = color.green / 255, blue = color.blue / 255, largestComponent = Math.max(red, green, blue), smallestComponent = Math.min(red, green, blue), delta = largestComponent - smallestComponent, lightness = (largestComponent + smallestComponent) / 2, saturation = 0;
      if (largestComponent === 0)
        saturation = 0;
      else if (type === "b")
        saturation = delta / largestComponent;
      else if (type === "l") {
        let baseSaturation = lightness > 0.5 ? delta / (2 - largestComponent - smallestComponent) : delta / (largestComponent + smallestComponent);
        saturation = isNaN(baseSaturation) ? 0 : baseSaturation;
      }
      let huePercentage = 0;
      switch (largestComponent) {
        case red:
          huePercentage = (green - blue) / delta + (green < blue ? 6 : 0);
          break;
        case green:
          huePercentage = (blue - red) / delta + 2;
          break;
        case blue:
          huePercentage = (red - green) / delta + 4;
      }
      let hue = huePercentage / 6 * 360, clampedHue = clamp.clamp(hue, 0, 360);
      return {
        hue: clampedHue ? roundNumberToDecimalPlaces.roundNumberToDecimalPlaces(clampedHue, 2) : 0,
        saturation: roundNumberToDecimalPlaces.roundNumberToDecimalPlaces(clamp.clamp(saturation, 0, 1), 4),
        brightness: roundNumberToDecimalPlaces.roundNumberToDecimalPlaces(clamp.clamp(largestComponent, 0, 1), 4),
        lightness: roundNumberToDecimalPlaces.roundNumberToDecimalPlaces(lightness, 4),
        alpha: roundNumberToDecimalPlaces.roundNumberToDecimalPlaces(alpha, 4)
      };
    }
    function rgbToHsb(color) {
      let {
        hue,
        saturation,
        brightness,
        alpha = 1
      } = rgbToHsbl(color, "b");
      return {
        hue,
        saturation,
        brightness,
        alpha
      };
    }
    function rgbToHsl(color) {
      let {
        hue,
        saturation: rawSaturation,
        lightness: rawLightness,
        alpha = 1
      } = rgbToHsbl(color, "l"), saturation = roundNumberToDecimalPlaces.roundNumberToDecimalPlaces(rawSaturation * 100, 2), lightness = roundNumberToDecimalPlaces.roundNumberToDecimalPlaces(rawLightness * 100, 2);
      return {
        hue,
        saturation,
        lightness,
        alpha
      };
    }
    function hexToRgb(color) {
      if (color.length === 4) {
        let repeatHex = (hex1, hex2) => color.slice(hex1, hex2).repeat(2), red2 = parseInt(repeatHex(1, 2), 16), green2 = parseInt(repeatHex(2, 3), 16), blue2 = parseInt(repeatHex(3, 4), 16);
        return {
          red: red2,
          green: green2,
          blue: blue2
        };
      }
      let red = parseInt(color.slice(1, 3), 16), green = parseInt(color.slice(3, 5), 16), blue = parseInt(color.slice(5, 7), 16);
      return {
        red,
        green,
        blue
      };
    }
    exports.hexToRgb = hexToRgb;
    exports.hsbToHex = hsbToHex;
    exports.hsbToRgb = hsbToRgb;
    exports.hslToRgb = hslToRgb;
    exports.rgbString = rgbString;
    exports.rgbToHex = rgbToHex;
    exports.rgbToHsb = rgbToHsb;
    exports.rgbToHsl = rgbToHsl;
    exports.rgbaString = rgbaString;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/within-content-context.js
var require_within_content_context = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/within-content-context.js"(exports) {
    "use strict";
    var React2 = require_react(), WithinContentContext = /* @__PURE__ */ React2.createContext(!1);
    exports.WithinContentContext = WithinContentContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-copy-to-clipboard.js
var require_use_copy_to_clipboard = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-copy-to-clipboard.js"(exports) {
    "use strict";
    var React2 = require_react();
    function useCopyToClipboard(options = {}) {
      let {
        defaultValue = "",
        timeout = 1500
      } = options, [status, setStatus] = React2.useState("inactive"), copy = React2.useCallback((value) => {
        navigator.clipboard.writeText(typeof value == "string" ? value : defaultValue).then(() => setStatus("copied"), () => setStatus("failed")).catch((error) => {
          throw error;
        });
      }, [defaultValue]);
      return React2.useEffect(() => {
        if (status === "inactive")
          return;
        let timeoutId = setTimeout(() => setStatus("inactive"), timeout);
        return () => clearTimeout(timeoutId);
      }, [status, timeout]), [copy, status];
    }
    exports.useCopyToClipboard = useCopyToClipboard;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/target.js
var require_target = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/target.js"(exports) {
    "use strict";
    var isServer = typeof window > "u" || typeof document > "u";
    exports.isServer = isServer;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-isomorphic-layout-effect.js
var require_use_isomorphic_layout_effect = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-isomorphic-layout-effect.js"(exports) {
    "use strict";
    var React2 = require_react(), target = require_target(), useIsomorphicLayoutEffect = target.isServer ? React2.useEffect : React2.useLayoutEffect;
    exports.useIsomorphicLayoutEffect = useIsomorphicLayoutEffect;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-event-listener.js
var require_use_event_listener = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-event-listener.js"(exports) {
    "use strict";
    var React2 = require_react(), useIsomorphicLayoutEffect = require_use_isomorphic_layout_effect();
    function useEventListener(eventName, handler, target, options) {
      let handlerRef = React2.useRef(handler), optionsRef = React2.useRef(options);
      useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
        handlerRef.current = handler;
      }, [handler]), useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
        optionsRef.current = options;
      }, [options]), React2.useEffect(() => {
        if (!(typeof eventName == "string" && target !== null))
          return;
        let targetElement;
        if (typeof target > "u")
          targetElement = window;
        else if ("current" in target) {
          if (target.current === null)
            return;
          targetElement = target.current;
        } else
          targetElement = target;
        let eventOptions = optionsRef.current, eventListener = (event) => handlerRef.current(event);
        return targetElement.addEventListener(eventName, eventListener, eventOptions), () => {
          targetElement.removeEventListener(eventName, eventListener, eventOptions);
        };
      }, [eventName, target]);
    }
    exports.useEventListener = useEventListener;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-focus.js
var require_use_focus = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-focus.js"(exports) {
    "use strict";
    var React2 = require_react(), useEventListener = require_use_event_listener();
    function useFocus(ref) {
      let [isFocused, setIsFocused] = React2.useState(!1), handleFocus = React2.useCallback(() => setIsFocused(!0), []), handleBlur = React2.useCallback(() => setIsFocused(!1), []);
      return useEventListener.useEventListener("focus", handleFocus, ref), useEventListener.useEventListener("blur", handleBlur, ref), isFocused;
    }
    function useFocusIn(ref) {
      let [isFocusedIn, setIsFocusedIn] = React2.useState(!1), deferredFocusOut = React2.useRef(null), handleFocusIn = React2.useCallback(() => {
        deferredFocusOut.current && (clearTimeout(deferredFocusOut.current), deferredFocusOut.current = null), setIsFocusedIn(!0);
      }, []), handleFocusOut = React2.useCallback(() => {
        deferredFocusOut.current = setTimeout(() => {
          setIsFocusedIn(!1);
        }, 0);
      }, []);
      return useEventListener.useEventListener("focusin", handleFocusIn, ref), useEventListener.useEventListener("focusout", handleFocusOut, ref), React2.useEffect(() => () => {
        deferredFocusOut.current && clearTimeout(deferredFocusOut.current);
      }, []), isFocusedIn;
    }
    exports.useFocus = useFocus;
    exports.useFocusIn = useFocusIn;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-hover.js
var require_use_hover = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-hover.js"(exports) {
    "use strict";
    var React2 = require_react(), useEventListener = require_use_event_listener();
    function useHover(ref) {
      let [isHovered, setIsHovered] = React2.useState(!1), handleMouseEnter = React2.useCallback(() => setIsHovered(!0), []), handleMouseLeave = React2.useCallback(() => setIsHovered(!1), []);
      return useEventListener.useEventListener("mouseenter", handleMouseEnter, ref), useEventListener.useEventListener("mouseleave", handleMouseLeave, ref), isHovered;
    }
    exports.useHover = useHover;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-media-query.js
var require_use_media_query = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-media-query.js"(exports) {
    "use strict";
    var React2 = require_react(), target = require_target(), useIsomorphicLayoutEffect = require_use_isomorphic_layout_effect(), queryAliases = {
      touch: "(hover: none) and (pointer: coarse)",
      stylus: "(hover: none) and (pointer: fine)",
      pointer: "(hover) and (pointer: coarse)",
      mouse: "(hover) and (pointer: fine)"
    }, isQueryAlias = (queryOrAlias) => Object.prototype.hasOwnProperty.call(queryAliases, queryOrAlias);
    function useMediaQuery(queryOrAlias, options = {}) {
      let {
        defaultValue = !1,
        initializeWithValue = !1
      } = options, query = isQueryAlias(queryOrAlias) ? queryAliases[queryOrAlias] : queryOrAlias, getMatches = React2.useCallback((query2) => target.isServer ? defaultValue : window.matchMedia(query2).matches, [defaultValue]), [matches, setMatches] = React2.useState(() => initializeWithValue ? getMatches(query) : defaultValue), handleChange = React2.useCallback(() => {
        setMatches(getMatches(query));
      }, [getMatches, query]);
      return useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
        let mediaQueryList = window.matchMedia(query);
        return handleChange(), mediaQueryList.addListener ? mediaQueryList.addListener(handleChange) : mediaQueryList.addEventListener("change", handleChange), () => {
          mediaQueryList.removeListener ? mediaQueryList.removeListener(handleChange) : mediaQueryList.removeEventListener("change", handleChange);
        };
      }, [query]), matches;
    }
    exports.queryAliases = queryAliases;
    exports.useMediaQuery = useMediaQuery;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-index-resource-state.js
var require_use_index_resource_state = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-index-resource-state.js"(exports) {
    "use strict";
    var React2 = require_react();
    exports.SelectionType = void 0;
    (function(SelectionType) {
      SelectionType.All = "all", SelectionType.Page = "page", SelectionType.Multi = "multi", SelectionType.Single = "single", SelectionType.Range = "range";
    })(exports.SelectionType || (exports.SelectionType = {}));
    function defaultResourceIDResolver(resource) {
      if ("id" in resource)
        return resource.id;
      throw new Error("Your resource does not directly contain an `id`. Pass a `resourceIDResolver` to `useIndexResourceState`");
    }
    function useIndexResourceState(resources, {
      selectedResources: initSelectedResources = [],
      allResourcesSelected: initAllResourcesSelected = !1,
      resourceIDResolver = defaultResourceIDResolver,
      resourceFilter = void 0
    } = {
      selectedResources: [],
      allResourcesSelected: !1,
      resourceIDResolver: defaultResourceIDResolver,
      resourceFilter: void 0
    }) {
      let [selectedResources, setSelectedResources] = React2.useState(initSelectedResources), [allResourcesSelected, setAllResourcesSelected] = React2.useState(initAllResourcesSelected), handleSelectionChange = React2.useCallback((selectionType, isSelecting, selection, _position) => {
        switch (selectionType === exports.SelectionType.All ? setAllResourcesSelected(isSelecting) : allResourcesSelected && setAllResourcesSelected(!1), selectionType) {
          case exports.SelectionType.Single:
            setSelectedResources((newSelectedResources) => isSelecting ? [...newSelectedResources, selection] : newSelectedResources.filter((id) => id !== selection));
            break;
          case exports.SelectionType.All:
          case exports.SelectionType.Page:
            if (resourceFilter) {
              let filteredResources = resources.filter(resourceFilter);
              setSelectedResources(isSelecting && selectedResources.length < filteredResources.length ? filteredResources.map(resourceIDResolver) : []);
            } else
              setSelectedResources(isSelecting ? resources.map(resourceIDResolver) : []);
            break;
          case exports.SelectionType.Multi:
            if (!selection)
              break;
            setSelectedResources((currentSelectedResources) => {
              let ids = [], filteredResources = resourceFilter ? resources.filter(resourceFilter) : resources;
              for (let i = selection[0]; i <= selection[1]; i++)
                if (filteredResources.includes(resources[i])) {
                  let id = resourceIDResolver(resources[i]);
                  (isSelecting && !currentSelectedResources.includes(id) || !isSelecting && currentSelectedResources.includes(id)) && ids.push(id);
                }
              return isSelecting ? [...currentSelectedResources, ...ids] : currentSelectedResources.filter((id) => !ids.includes(id));
            });
            break;
          case exports.SelectionType.Range:
            if (!selection)
              break;
            setSelectedResources((currentSelectedResources) => {
              let selectedIds = (resourceFilter ? resources.filter(resourceFilter) : resources).map(resourceIDResolver).slice(Number(selection[0]), Number(selection[1]) + 1), isIndeterminate = selectedIds.some((id) => selectedResources.includes(id));
              return !selectedIds.every((id) => selectedResources.includes(id)) && (isSelecting || isIndeterminate) ? [...(/* @__PURE__ */ new Set([...currentSelectedResources, ...selectedIds])).values()] : currentSelectedResources.filter((id) => !selectedIds.includes(id));
            });
            break;
        }
      }, [allResourcesSelected, resourceFilter, selectedResources, resources, resourceIDResolver]), clearSelection = React2.useCallback(() => {
        setSelectedResources([]), setAllResourcesSelected(!1);
      }, []), removeSelectedResources = React2.useCallback((removeResources) => {
        let newSelectedResources = [...selectedResources].filter((resource) => !removeResources.includes(resource));
        setSelectedResources(newSelectedResources), newSelectedResources.length === 0 && setAllResourcesSelected(!1);
      }, [selectedResources]);
      return {
        selectedResources,
        allResourcesSelected,
        handleSelectionChange,
        clearSelection,
        removeSelectedResources
      };
    }
    exports.useIndexResourceState = useIndexResourceState;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/breakpoints.js
var require_breakpoints = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/breakpoints.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisTokens = require("@shopify/polaris-tokens"), target = require_target(), useIsomorphicLayoutEffect = require_use_isomorphic_layout_effect(), Breakpoints = {
      // TODO: Update to smDown
      navigationBarCollapsed: "767.95px",
      // TODO: Update to lgDown
      stackedContent: "1039.95px"
    }, noWindowMatches = {
      media: "",
      addListener: noop,
      removeListener: noop,
      matches: !1,
      onchange: noop,
      addEventListener: noop,
      removeEventListener: noop,
      dispatchEvent: (_) => !0
    };
    function noop() {
    }
    function navigationBarCollapsed() {
      return typeof window > "u" ? noWindowMatches : window.matchMedia(`(max-width: ${Breakpoints.navigationBarCollapsed})`);
    }
    function stackedContent() {
      return typeof window > "u" ? noWindowMatches : window.matchMedia(`(max-width: ${Breakpoints.stackedContent})`);
    }
    var breakpointsQueryEntries = getBreakpointsQueryEntries(polarisTokens.themeDefault.breakpoints);
    function getMatches(defaults, forceDefaults) {
      return !target.isServer && !forceDefaults ? Object.fromEntries(breakpointsQueryEntries.map(([directionAlias, query]) => [directionAlias, window.matchMedia(query).matches])) : Object.fromEntries(typeof defaults == "object" && defaults !== null ? breakpointsQueryEntries.map(([directionAlias]) => [directionAlias, defaults[directionAlias] ?? !1]) : breakpointsQueryEntries.map(([directionAlias]) => [directionAlias, defaults ?? !1]));
    }
    function useBreakpoints(options) {
      let [breakpoints, setBreakpoints] = React2.useState(getMatches(options?.defaults, !0));
      return useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
        let mediaQueryLists = breakpointsQueryEntries.map(([_, query]) => window.matchMedia(query)), handler = () => setBreakpoints(getMatches());
        return mediaQueryLists.forEach((mql) => {
          mql.addListener ? mql.addListener(handler) : mql.addEventListener("change", handler);
        }), handler(), () => {
          mediaQueryLists.forEach((mql) => {
            mql.removeListener ? mql.removeListener(handler) : mql.removeEventListener("change", handler);
          });
        };
      }, []), breakpoints;
    }
    function getBreakpointsQueryEntries(breakpoints) {
      return Object.entries(polarisTokens.getMediaConditions(breakpoints)).map(([breakpointsToken, mediaConditions]) => Object.entries(mediaConditions).map(([direction, mediaCondition]) => [`${breakpointsToken.split("-")[1]}${capitalize(direction)}`, mediaCondition])).flat();
    }
    function capitalize(str) {
      return str.charAt(0).toUpperCase() + str.slice(1);
    }
    exports.getBreakpointsQueryEntries = getBreakpointsQueryEntries;
    exports.navigationBarCollapsed = navigationBarCollapsed;
    exports.stackedContent = stackedContent;
    exports.useBreakpoints = useBreakpoints;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/AppProvider/global.css.js
var require_global_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/AppProvider/global.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var global2 = {};
    exports.default = global2;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/debounce.js
var require_debounce = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/debounce.js"(exports) {
    "use strict";
    function debounce(func, waitArg, options) {
      let lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = !1, maxing = !1, trailing = !0, useRAF = !waitArg && waitArg !== 0;
      if (typeof func != "function")
        throw new TypeError("Expected a function");
      let wait = waitArg || 0;
      typeof options == "object" && (leading = Boolean(options.leading), maxing = "maxWait" in options, maxWait = maxing ? Math.max(Number(options.maxWait) || 0, wait) : void 0, trailing = "trailing" in options ? Boolean(options.trailing) : trailing);
      function invokeFunc(time) {
        let args = lastArgs, thisArg = lastThis;
        return lastArgs = void 0, lastThis = void 0, lastInvokeTime = time, result = func.apply(thisArg, args), result;
      }
      function startTimer(pendingFunc, wait2) {
        return useRAF ? (cancelAnimationFrame(timerId), requestAnimationFrame(pendingFunc)) : setTimeout(pendingFunc, wait2);
      }
      function cancelTimer(id) {
        if (useRAF)
          return cancelAnimationFrame(id);
        clearTimeout(id);
      }
      function leadingEdge(time) {
        return lastInvokeTime = time, timerId = startTimer(timerExpired, wait), leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        let timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
        return maxing && maxWait ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
      }
      function shouldInvoke(time) {
        let timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && maxWait && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        let time = Date.now();
        if (shouldInvoke(time))
          return trailingEdge(time);
        timerId = startTimer(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        return timerId = void 0, trailing && lastArgs ? invokeFunc(time) : (lastArgs = lastThis = void 0, result);
      }
      function cancel() {
        timerId !== void 0 && cancelTimer(timerId), lastInvokeTime = 0, lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush() {
        return timerId === void 0 ? result : trailingEdge(Date.now());
      }
      function pending() {
        return timerId !== void 0;
      }
      function debounced(...args) {
        let time = Date.now(), isInvoking = shouldInvoke(time);
        if (lastArgs = args, lastThis = this, lastCallTime = time, isInvoking) {
          if (timerId === void 0)
            return leadingEdge(lastCallTime);
          if (maxing)
            return timerId = startTimer(timerExpired, wait), invokeFunc(lastCallTime);
        }
        return timerId === void 0 && (timerId = startTimer(timerExpired, wait)), result;
      }
      return debounced.cancel = cancel, debounced.flush = flush, debounced.pending = pending, debounced;
    }
    exports.debounce = debounce;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/geometry.js
var require_geometry = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/geometry.js"(exports) {
    "use strict";
    var Rect = class {
      static get zero() {
        return new Rect();
      }
      constructor({
        top = 0,
        left = 0,
        width = 0,
        height = 0
      } = {}) {
        this.top = top, this.left = left, this.width = width, this.height = height;
      }
      get center() {
        return {
          x: this.left + this.width / 2,
          y: this.top + this.height / 2
        };
      }
    };
    function getRectForNode(node) {
      if (!(node instanceof Element))
        return new Rect({
          width: window.innerWidth,
          height: window.innerHeight
        });
      let rect = node.getBoundingClientRect();
      return new Rect({
        top: rect.top,
        left: rect.left,
        width: rect.width,
        height: rect.height
      });
    }
    exports.Rect = Rect;
    exports.getRectForNode = getRectForNode;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/sticky-manager/sticky-manager.js
var require_sticky_manager = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/sticky-manager/sticky-manager.js"(exports) {
    "use strict";
    var polarisTokens = require("@shopify/polaris-tokens"), debounce = require_debounce(), shared = require_shared(), breakpoints = require_breakpoints(), geometry = require_geometry(), SIXTY_FPS = 1e3 / 60, StickyManager = class {
      constructor(container) {
        this.stickyItems = [], this.stuckItems = [], this.container = null, this.topBarOffset = 0, this.handleResize = debounce.debounce(() => {
          this.manageStickyItems();
        }, SIXTY_FPS, {
          leading: !0,
          trailing: !0,
          maxWait: SIXTY_FPS
        }), this.handleScroll = debounce.debounce(() => {
          this.manageStickyItems();
        }, SIXTY_FPS, {
          leading: !0,
          trailing: !0,
          maxWait: SIXTY_FPS
        }), container && this.setContainer(container);
      }
      registerStickyItem(stickyItem) {
        this.stickyItems.push(stickyItem);
      }
      unregisterStickyItem(nodeToRemove) {
        let nodeIndex = this.stickyItems.findIndex(({
          stickyNode
        }) => nodeToRemove === stickyNode);
        this.stickyItems.splice(nodeIndex, 1);
      }
      setContainer(el) {
        this.container = el, isDocument(el) && this.setTopBarOffset(el), this.container.addEventListener("scroll", this.handleScroll), window.addEventListener("resize", this.handleResize), this.manageStickyItems();
      }
      removeScrollListener() {
        this.container && (this.container.removeEventListener("scroll", this.handleScroll), window.removeEventListener("resize", this.handleResize));
      }
      manageStickyItems() {
        if (this.stickyItems.length <= 0)
          return;
        let scrollTop = this.container ? scrollTopFor(this.container) : 0, containerTop = geometry.getRectForNode(this.container).top + this.topBarOffset;
        this.stickyItems.forEach((stickyItem) => {
          let {
            handlePositioning
          } = stickyItem, {
            sticky,
            top,
            left,
            width
          } = this.evaluateStickyItem(stickyItem, scrollTop, containerTop);
          this.updateStuckItems(stickyItem, sticky), handlePositioning(sticky, top, left, width);
        });
      }
      evaluateStickyItem(stickyItem, scrollTop, containerTop) {
        let {
          stickyNode,
          placeHolderNode,
          boundingElement,
          offset,
          disableWhenStacked
        } = stickyItem;
        if (disableWhenStacked && breakpoints.stackedContent().matches)
          return {
            sticky: !1,
            top: 0,
            left: 0,
            width: "auto"
          };
        let stickyOffset = offset ? this.getOffset(stickyNode) + parseInt(
          // Important: This will not update when the active theme changes.
          // Update this to `useTheme` once converted to a function component.
          polarisTokens.themeDefault.space["space-500"],
          10
        ) : this.getOffset(stickyNode), scrollPosition = scrollTop + stickyOffset, placeHolderNodeCurrentTop = placeHolderNode.getBoundingClientRect().top - containerTop + scrollTop, top = containerTop + stickyOffset, width = placeHolderNode.getBoundingClientRect().width, left = placeHolderNode.getBoundingClientRect().left, sticky;
        if (boundingElement == null)
          sticky = scrollPosition >= placeHolderNodeCurrentTop;
        else {
          let stickyItemHeight = stickyNode.getBoundingClientRect().height || stickyNode.firstElementChild?.getBoundingClientRect().height || 0, stickyItemBottomPosition = boundingElement.getBoundingClientRect().bottom - stickyItemHeight + scrollTop - containerTop;
          sticky = scrollPosition >= placeHolderNodeCurrentTop && scrollPosition < stickyItemBottomPosition;
        }
        return {
          sticky,
          top,
          left,
          width
        };
      }
      updateStuckItems(item, sticky) {
        let {
          stickyNode
        } = item;
        sticky && !this.isNodeStuck(stickyNode) ? this.addStuckItem(item) : !sticky && this.isNodeStuck(stickyNode) && this.removeStuckItem(item);
      }
      addStuckItem(stickyItem) {
        this.stuckItems.push(stickyItem);
      }
      removeStuckItem(stickyItem) {
        let {
          stickyNode: nodeToRemove
        } = stickyItem, nodeIndex = this.stuckItems.findIndex(({
          stickyNode
        }) => nodeToRemove === stickyNode);
        this.stuckItems.splice(nodeIndex, 1);
      }
      getOffset(node) {
        if (this.stuckItems.length === 0)
          return 0;
        let offset = 0, count = 0, stuckNodesLength = this.stuckItems.length, nodeRect = geometry.getRectForNode(node);
        for (; count < stuckNodesLength; ) {
          let stuckNode = this.stuckItems[count].stickyNode;
          if (stuckNode !== node) {
            let stuckNodeRect = geometry.getRectForNode(stuckNode);
            horizontallyOverlaps(nodeRect, stuckNodeRect) || (offset += geometry.getRectForNode(stuckNode).height);
          } else
            break;
          count++;
        }
        return offset;
      }
      isNodeStuck(node) {
        return this.stuckItems.findIndex(({
          stickyNode
        }) => node === stickyNode) >= 0;
      }
      setTopBarOffset(container) {
        let topbarElement = container.querySelector(`:not(${shared.scrollable.selector}) ${shared.dataPolarisTopBar.selector}`);
        this.topBarOffset = topbarElement ? topbarElement.clientHeight : 0;
      }
    };
    function isDocument(node) {
      return node === document;
    }
    function scrollTopFor(container) {
      return isDocument(container) ? document.body.scrollTop || document.documentElement.scrollTop : container.scrollTop;
    }
    function horizontallyOverlaps(rect1, rect2) {
      let rect1Left = rect1.left, rect1Right = rect1.left + rect1.width, rect2Left = rect2.left;
      return rect2.left + rect2.width < rect1Left || rect1Right < rect2Left;
    }
    exports.StickyManager = StickyManager;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/scroll-lock-manager/scroll-lock-manager.js
var require_scroll_lock_manager = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/scroll-lock-manager/scroll-lock-manager.js"(exports) {
    "use strict";
    var target = require_target(), SCROLL_LOCKING_ATTRIBUTE = "data-lock-scrolling", SCROLL_LOCKING_HIDDEN_ATTRIBUTE = "data-lock-scrolling-hidden", SCROLL_LOCKING_WRAPPER_ATTRIBUTE = "data-lock-scrolling-wrapper", scrollPosition = 0;
    function isScrollBarVisible() {
      let {
        body
      } = document;
      return body.scrollHeight > body.clientHeight;
    }
    var ScrollLockManager = class {
      constructor() {
        this.scrollLocks = 0, this.locked = !1;
      }
      registerScrollLock() {
        this.scrollLocks += 1, this.handleScrollLocking();
      }
      unregisterScrollLock() {
        this.scrollLocks -= 1, this.handleScrollLocking();
      }
      handleScrollLocking() {
        if (target.isServer)
          return;
        let {
          scrollLocks
        } = this, {
          body
        } = document, wrapper = body.firstElementChild;
        scrollLocks === 0 ? (body.removeAttribute(SCROLL_LOCKING_ATTRIBUTE), body.removeAttribute(SCROLL_LOCKING_HIDDEN_ATTRIBUTE), wrapper && wrapper.removeAttribute(SCROLL_LOCKING_WRAPPER_ATTRIBUTE), window.scroll(0, scrollPosition), this.locked = !1) : scrollLocks > 0 && !this.locked && (scrollPosition = window.pageYOffset, body.setAttribute(SCROLL_LOCKING_ATTRIBUTE, ""), isScrollBarVisible() || body.setAttribute(SCROLL_LOCKING_HIDDEN_ATTRIBUTE, ""), wrapper && (wrapper.setAttribute(SCROLL_LOCKING_WRAPPER_ATTRIBUTE, ""), wrapper.scrollTop = scrollPosition), this.locked = !0);
      }
      resetScrollPosition() {
        scrollPosition = 0;
      }
    };
    exports.SCROLL_LOCKING_ATTRIBUTE = SCROLL_LOCKING_ATTRIBUTE;
    exports.ScrollLockManager = ScrollLockManager;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/get.js
var require_get = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/get.js"(exports) {
    "use strict";
    var OBJECT_NOTATION_MATCHER = /\[(.*?)\]|(\w+)/g;
    function get(obj, keypath, defaultValue) {
      if (obj == null)
        return;
      let keys = Array.isArray(keypath) ? keypath : getKeypath(keypath), acc = obj;
      for (let i = 0; i < keys.length; i++) {
        let val = acc[keys[i]];
        if (val === void 0)
          return defaultValue;
        acc = val;
      }
      return acc;
    }
    function getKeypath(str) {
      let path = [], result;
      for (; result = OBJECT_NOTATION_MATCHER.exec(str); ) {
        let [, first, second] = result;
        path.push(first || second);
      }
      return path;
    }
    exports.get = get;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/merge.js
var require_merge = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/merge.js"(exports) {
    "use strict";
    function merge(...objs) {
      let final = {};
      for (let obj of objs)
        final = mergeRecursively(final, obj);
      return final;
    }
    function mergeRecursively(inputObjA, objB) {
      let objA = Array.isArray(inputObjA) ? [...inputObjA] : {
        ...inputObjA
      };
      for (let key in objB)
        if (Object.prototype.hasOwnProperty.call(objB, key))
          isMergeableValue(objB[key]) && isMergeableValue(objA[key]) ? objA[key] = mergeRecursively(objA[key], objB[key]) : objA[key] = objB[key];
        else
          continue;
      return objA;
    }
    function isMergeableValue(value) {
      return value !== null && typeof value == "object";
    }
    exports.merge = merge;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/i18n/I18n.js
var require_I18n = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/i18n/I18n.js"(exports) {
    "use strict";
    var get = require_get(), merge = require_merge(), REPLACE_REGEX = /{([^}]*)}/g, I18n = class {
      /**
       * @param translation A locale object or array of locale objects that overrides default translations. If specifying an array then your desired language dictionary should come first, followed by your fallback language dictionaries
       */
      constructor(translation) {
        this.translation = {}, this.translation = Array.isArray(translation) ? merge.merge(...translation.slice().reverse()) : translation;
      }
      translate(id, replacements) {
        let text = get.get(this.translation, id, "");
        return text ? replacements ? text.replace(REPLACE_REGEX, (match) => {
          let replacement = match.substring(1, match.length - 1);
          if (replacements[replacement] === void 0) {
            let replacementData = JSON.stringify(replacements);
            throw new Error(`Error in translation for key '${id}'. No replacement found for key '${replacement}'. The following replacements were passed: '${replacementData}'`);
          }
          return replacements[replacement];
        }) : text : "";
      }
      translationKeyExists(path) {
        return Boolean(get.get(this.translation, path));
      }
    };
    exports.I18n = I18n;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/features/context.js
var require_context = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/features/context.js"(exports) {
    "use strict";
    var React2 = require_react(), FeaturesContext = /* @__PURE__ */ React2.createContext(void 0);
    exports.FeaturesContext = FeaturesContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/i18n/context.js
var require_context2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/i18n/context.js"(exports) {
    "use strict";
    var React2 = require_react(), I18nContext = /* @__PURE__ */ React2.createContext(void 0);
    exports.I18nContext = I18nContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/scroll-lock-manager/context.js
var require_context3 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/scroll-lock-manager/context.js"(exports) {
    "use strict";
    var React2 = require_react(), ScrollLockManagerContext = /* @__PURE__ */ React2.createContext(void 0);
    exports.ScrollLockManagerContext = ScrollLockManagerContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/sticky-manager/context.js
var require_context4 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/sticky-manager/context.js"(exports) {
    "use strict";
    var React2 = require_react(), StickyManagerContext = /* @__PURE__ */ React2.createContext(void 0);
    exports.StickyManagerContext = StickyManagerContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/link/context.js
var require_context5 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/link/context.js"(exports) {
    "use strict";
    var React2 = require_react(), LinkContext = /* @__PURE__ */ React2.createContext(void 0);
    exports.LinkContext = LinkContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/media-query/context.js
var require_context6 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/media-query/context.js"(exports) {
    "use strict";
    var React2 = require_react(), MediaQueryContext = /* @__PURE__ */ React2.createContext(void 0);
    exports.MediaQueryContext = MediaQueryContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/EventListener/EventListener.js
var require_EventListener = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/EventListener/EventListener.js"(exports) {
    "use strict";
    var React2 = require_react(), EventListener = class extends React2.PureComponent {
      componentDidMount() {
        this.attachListener();
      }
      componentDidUpdate({
        passive,
        ...detachProps
      }) {
        this.detachListener(detachProps), this.attachListener();
      }
      componentWillUnmount() {
        this.detachListener();
      }
      render() {
        return null;
      }
      attachListener() {
        let {
          event,
          handler,
          capture,
          passive
        } = this.props;
        window.addEventListener(event, handler, {
          capture,
          passive
        });
      }
      detachListener(prevProps) {
        let {
          event,
          handler,
          capture
        } = prevProps || this.props;
        window.removeEventListener(event, handler, capture);
      }
    };
    exports.EventListener = EventListener;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/MediaQueryProvider/MediaQueryProvider.js
var require_MediaQueryProvider = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/MediaQueryProvider/MediaQueryProvider.js"(exports) {
    "use strict";
    var React2 = require_react(), debounce = require_debounce(), breakpoints = require_breakpoints(), context = require_context6(), EventListener = require_EventListener(), MediaQueryProvider = function({
      children
    }) {
      let [isNavigationCollapsed, setIsNavigationCollapsed] = React2.useState(breakpoints.navigationBarCollapsed().matches), handleResize = React2.useCallback(debounce.debounce(() => {
        isNavigationCollapsed !== breakpoints.navigationBarCollapsed().matches && setIsNavigationCollapsed(!isNavigationCollapsed);
      }, 40, {
        trailing: !0,
        leading: !0,
        maxWait: 40
      }), [isNavigationCollapsed]);
      React2.useEffect(() => {
        setIsNavigationCollapsed(breakpoints.navigationBarCollapsed().matches);
      }, []);
      let context$1 = React2.useMemo(() => ({
        isNavigationCollapsed
      }), [isNavigationCollapsed]);
      return /* @__PURE__ */ React2.createElement(context.MediaQueryContext.Provider, {
        value: context$1
      }, /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
        event: "resize",
        handler: handleResize
      }), children);
    };
    exports.MediaQueryProvider = MediaQueryProvider;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-is-after-initial-mount.js
var require_use_is_after_initial_mount = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-is-after-initial-mount.js"(exports) {
    "use strict";
    var React2 = require_react();
    function useIsAfterInitialMount() {
      let [isAfterInitialMount, setIsAfterInitialMount] = React2.useState(!1);
      return React2.useEffect(() => {
        setIsAfterInitialMount(!0);
      }, []), isAfterInitialMount;
    }
    exports.useIsAfterInitialMount = useIsAfterInitialMount;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/portals/context.js
var require_context7 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/portals/context.js"(exports) {
    "use strict";
    var React2 = require_react(), PortalsManagerContext = /* @__PURE__ */ React2.createContext(void 0);
    exports.PortalsManagerContext = PortalsManagerContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/PortalsManager/components/PortalsContainer/PortalsContainer.js
var require_PortalsContainer = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/PortalsManager/components/PortalsContainer/PortalsContainer.js"(exports) {
    "use strict";
    var React2 = require_react();
    function PortalsContainerComponent(_props, ref) {
      return /* @__PURE__ */ React2.createElement("div", {
        id: "PolarisPortalsContainer",
        ref
      });
    }
    var PortalsContainer = /* @__PURE__ */ React2.forwardRef(PortalsContainerComponent);
    exports.PortalsContainer = PortalsContainer;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/PortalsManager/PortalsManager.js
var require_PortalsManager = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/PortalsManager/PortalsManager.js"(exports) {
    "use strict";
    var React2 = require_react(), useIsAfterInitialMount = require_use_is_after_initial_mount(), context = require_context7(), PortalsContainer = require_PortalsContainer();
    function PortalsManager({
      children,
      container
    }) {
      let isMounted = useIsAfterInitialMount.useIsAfterInitialMount(), ref = React2.useRef(null), contextValue = React2.useMemo(() => container ? {
        container
      } : isMounted ? {
        container: ref.current
      } : {
        container: null
      }, [container, isMounted]);
      return /* @__PURE__ */ React2.createElement(context.PortalsManagerContext.Provider, {
        value: contextValue
      }, children, container ? null : /* @__PURE__ */ React2.createElement(PortalsContainer.PortalsContainer, {
        ref
      }));
    }
    exports.PortalsManager = PortalsManager;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/focus-manager/context.js
var require_context8 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/focus-manager/context.js"(exports) {
    "use strict";
    var React2 = require_react(), FocusManagerContext = /* @__PURE__ */ React2.createContext(void 0);
    exports.FocusManagerContext = FocusManagerContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/FocusManager/FocusManager.js
var require_FocusManager = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/FocusManager/FocusManager.js"(exports) {
    "use strict";
    var React2 = require_react(), context = require_context8();
    function FocusManager({
      children
    }) {
      let [trapFocusList, setTrapFocusList] = React2.useState([]), add = React2.useCallback((id) => {
        setTrapFocusList((list) => [...list, id]);
      }, []), remove = React2.useCallback((id) => {
        let removed = !0;
        return setTrapFocusList((list) => {
          let clone = [...list], index = clone.indexOf(id);
          return index === -1 ? removed = !1 : clone.splice(index, 1), clone;
        }), removed;
      }, []), value = React2.useMemo(() => ({
        trapFocusList,
        add,
        remove
      }), [add, trapFocusList, remove]);
      return /* @__PURE__ */ React2.createElement(context.FocusManagerContext.Provider, {
        value
      }, children);
    }
    exports.FocusManager = FocusManager;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/ephemeral-presence-manager/context.js
var require_context9 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/ephemeral-presence-manager/context.js"(exports) {
    "use strict";
    var React2 = require_react(), EphemeralPresenceManagerContext = /* @__PURE__ */ React2.createContext(void 0);
    exports.EphemeralPresenceManagerContext = EphemeralPresenceManagerContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/EphemeralPresenceManager/EphemeralPresenceManager.js
var require_EphemeralPresenceManager = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/EphemeralPresenceManager/EphemeralPresenceManager.js"(exports) {
    "use strict";
    var React2 = require_react(), context = require_context9(), defaultState = {
      tooltip: 0,
      hovercard: 0
    };
    function EphemeralPresenceManager({
      children
    }) {
      let [presenceCounter, setPresenceCounter] = React2.useState(defaultState), addPresence = React2.useCallback((key) => {
        setPresenceCounter((prevList) => ({
          ...prevList,
          [key]: prevList[key] + 1
        }));
      }, []), removePresence = React2.useCallback((key) => {
        setPresenceCounter((prevList) => ({
          ...prevList,
          [key]: prevList[key] - 1
        }));
      }, []), value = React2.useMemo(() => ({
        presenceList: Object.entries(presenceCounter).reduce((previousValue, currentValue) => {
          let [key, value2] = currentValue;
          return {
            ...previousValue,
            [key]: value2 >= 1
          };
        }, {}),
        presenceCounter,
        addPresence,
        removePresence
      }), [addPresence, removePresence, presenceCounter]);
      return /* @__PURE__ */ React2.createElement(context.EphemeralPresenceManagerContext.Provider, {
        value
      }, children);
    }
    exports.EphemeralPresenceManager = EphemeralPresenceManager;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/AppProvider/AppProvider.js
var require_AppProvider = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/AppProvider/AppProvider.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisTokens = require("@shopify/polaris-tokens"), useTheme = require_use_theme();
    require_global_css();
    var stickyManager = require_sticky_manager(), scrollLockManager = require_scroll_lock_manager(), I18n = require_I18n(), context = require_context(), context$1 = require_context2(), context$2 = require_context3(), context$3 = require_context4(), context$4 = require_context5(), MediaQueryProvider = require_MediaQueryProvider(), PortalsManager = require_PortalsManager(), FocusManager = require_FocusManager(), EphemeralPresenceManager = require_EphemeralPresenceManager(), MAX_SCROLLBAR_WIDTH = 20, SCROLLBAR_TEST_ELEMENT_PARENT_SIZE = 30, SCROLLBAR_TEST_ELEMENT_CHILD_SIZE = SCROLLBAR_TEST_ELEMENT_PARENT_SIZE + 10;
    function measureScrollbars() {
      let parentEl = document.createElement("div");
      parentEl.setAttribute("style", `position: absolute; opacity: 0; transform: translate3d(-9999px, -9999px, 0); pointer-events: none; width:${SCROLLBAR_TEST_ELEMENT_PARENT_SIZE}px; height:${SCROLLBAR_TEST_ELEMENT_PARENT_SIZE}px;`);
      let child = document.createElement("div");
      child.setAttribute("style", `width:100%; height: ${SCROLLBAR_TEST_ELEMENT_CHILD_SIZE}; overflow:scroll; scrollbar-width: thin;`), parentEl.appendChild(child), document.body.appendChild(parentEl);
      let scrollbarWidth = SCROLLBAR_TEST_ELEMENT_PARENT_SIZE - (parentEl.firstElementChild?.clientWidth ?? 0), scrollbarWidthWithSafetyHatch = Math.min(scrollbarWidth, MAX_SCROLLBAR_WIDTH);
      document.documentElement.style.setProperty("--pc-app-provider-scrollbar-width", `${scrollbarWidthWithSafetyHatch}px`), document.body.removeChild(parentEl);
    }
    var AppProvider = class extends React2.Component {
      constructor(props) {
        super(props), this.setBodyStyles = () => {
          document.body.style.backgroundColor = "var(--p-color-bg)", document.body.style.color = "var(--p-color-text)";
        }, this.setRootAttributes = () => {
          let activeThemeName = this.getThemeName();
          polarisTokens.themeNames.forEach((themeName) => {
            document.documentElement.classList.toggle(polarisTokens.createThemeClassName(themeName), themeName === activeThemeName);
          });
        }, this.getThemeName = () => this.props.theme ?? polarisTokens.themeNameDefault, this.stickyManager = new stickyManager.StickyManager(), this.scrollLockManager = new scrollLockManager.ScrollLockManager();
        let {
          i18n,
          linkComponent
        } = this.props;
        this.state = {
          link: linkComponent,
          intl: new I18n.I18n(i18n)
        };
      }
      componentDidMount() {
        if (document != null) {
          this.stickyManager.setContainer(document), this.setBodyStyles(), this.setRootAttributes();
          let isSafari16 = navigator.userAgent.includes("Safari") && !navigator.userAgent.includes("Chrome") && (navigator.userAgent.includes("Version/16.1") || navigator.userAgent.includes("Version/16.2") || navigator.userAgent.includes("Version/16.3")), isMobileApp16 = navigator.userAgent.includes("Shopify Mobile/iOS") && (navigator.userAgent.includes("OS 16_1") || navigator.userAgent.includes("OS 16_2") || navigator.userAgent.includes("OS 16_3"));
          (isSafari16 || isMobileApp16) && document.documentElement.classList.add("Polaris-Safari-16-Font-Optical-Sizing-Patch");
        }
        measureScrollbars();
      }
      componentDidUpdate({
        i18n: prevI18n,
        linkComponent: prevLinkComponent
      }) {
        let {
          i18n,
          linkComponent
        } = this.props;
        this.setRootAttributes(), !(i18n === prevI18n && linkComponent === prevLinkComponent) && this.setState({
          link: linkComponent,
          intl: new I18n.I18n(i18n)
        });
      }
      render() {
        let {
          children,
          features
        } = this.props, themeName = this.getThemeName(), {
          intl,
          link
        } = this.state;
        return /* @__PURE__ */ React2.createElement(useTheme.ThemeNameContext.Provider, {
          value: themeName
        }, /* @__PURE__ */ React2.createElement(useTheme.ThemeContext.Provider, {
          value: useTheme.getTheme(themeName)
        }, /* @__PURE__ */ React2.createElement(context.FeaturesContext.Provider, {
          value: features
        }, /* @__PURE__ */ React2.createElement(context$1.I18nContext.Provider, {
          value: intl
        }, /* @__PURE__ */ React2.createElement(context$2.ScrollLockManagerContext.Provider, {
          value: this.scrollLockManager
        }, /* @__PURE__ */ React2.createElement(context$3.StickyManagerContext.Provider, {
          value: this.stickyManager
        }, /* @__PURE__ */ React2.createElement(context$4.LinkContext.Provider, {
          value: link
        }, /* @__PURE__ */ React2.createElement(MediaQueryProvider.MediaQueryProvider, null, /* @__PURE__ */ React2.createElement(PortalsManager.PortalsManager, null, /* @__PURE__ */ React2.createElement(FocusManager.FocusManager, null, /* @__PURE__ */ React2.createElement(EphemeralPresenceManager.EphemeralPresenceManager, null, children)))))))))));
      }
    };
    exports.AppProvider = AppProvider;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/is-element-in-viewport.js
var require_is_element_in_viewport = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/is-element-in-viewport.js"(exports) {
    "use strict";
    function isElementInViewport(element) {
      let {
        top,
        left,
        bottom,
        right
      } = element.getBoundingClientRect();
      return top >= 0 && right <= window.innerWidth && bottom <= window.innerHeight && left >= 0;
    }
    exports.isElementInViewport = isElementInViewport;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/focus.js
var require_focus = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/focus.js"(exports) {
    "use strict";
    var isElementInViewport = require_is_element_in_viewport(), FOCUSABLE_SELECTOR = 'a,frame,iframe,input:not([type=hidden]):not(:disabled),select:not(:disabled),textarea:not(:disabled),button:not([aria-disabled="true"]):not([tabindex="-1"]):not(:disabled),*[tabindex]', KEYBOARD_FOCUSABLE_SELECTORS = 'a,frame,iframe,input:not([type=hidden]):not(:disabled),select:not(:disabled),textarea:not(:disabled),button:not([aria-disabled="true"]):not([tabindex="-1"]):not(:disabled),*[tabindex]:not([tabindex="-1"])', MENUITEM_FOCUSABLE_SELECTORS = 'a[role="menuitem"],frame[role="menuitem"],iframe[role="menuitem"],input[role="menuitem"]:not([type=hidden]):not(:disabled),select[role="menuitem"]:not(:disabled),textarea[role="menuitem"]:not(:disabled),button[role="menuitem"]:not(:disabled),*[tabindex]:not([tabindex="-1"])', handleMouseUpByBlurring = ({
      currentTarget
    }) => currentTarget.blur();
    function nextFocusableNode(node, filter) {
      let allFocusableElements = [...document.querySelectorAll(FOCUSABLE_SELECTOR)], sliceLocation = allFocusableElements.indexOf(node) + 1, focusableElementsAfterNode = allFocusableElements.slice(sliceLocation);
      for (let focusableElement of focusableElementsAfterNode)
        if (isElementInViewport.isElementInViewport(focusableElement) && (!filter || filter && filter(focusableElement)))
          return focusableElement;
      return null;
    }
    function findFirstFocusableNode(element, onlyDescendants = !0) {
      return !onlyDescendants && matches(element, FOCUSABLE_SELECTOR) ? element : element.querySelector(FOCUSABLE_SELECTOR);
    }
    function findFirstFocusableNodeIncludingDisabled(element) {
      let focusableSelector = "a,button,frame,iframe,input:not([type=hidden]),select,textarea,*[tabindex]";
      return matches(element, focusableSelector) ? element : element.querySelector(focusableSelector);
    }
    function focusFirstFocusableNode(element, onlyDescendants = !0) {
      findFirstFocusableNode(element, onlyDescendants)?.focus();
    }
    function focusNextFocusableNode(node, filter) {
      let nextFocusable = nextFocusableNode(node, filter);
      return nextFocusable && nextFocusable instanceof HTMLElement ? (nextFocusable.focus(), !0) : !1;
    }
    function findFirstKeyboardFocusableNode(element, onlyDescendants = !0) {
      return !onlyDescendants && matches(element, KEYBOARD_FOCUSABLE_SELECTORS) ? element : element.querySelector(KEYBOARD_FOCUSABLE_SELECTORS);
    }
    function focusFirstKeyboardFocusableNode(element, onlyDescendants = !0) {
      let firstFocusable = findFirstKeyboardFocusableNode(element, onlyDescendants);
      return firstFocusable ? (firstFocusable.focus(), !0) : !1;
    }
    function findLastKeyboardFocusableNode(element, onlyDescendants = !0) {
      if (!onlyDescendants && matches(element, KEYBOARD_FOCUSABLE_SELECTORS))
        return element;
      let allFocusable = element.querySelectorAll(KEYBOARD_FOCUSABLE_SELECTORS);
      return allFocusable[allFocusable.length - 1];
    }
    function focusLastKeyboardFocusableNode(element, onlyDescendants = !0) {
      let lastFocusable = findLastKeyboardFocusableNode(element, onlyDescendants);
      return lastFocusable ? (lastFocusable.focus(), !0) : !1;
    }
    function wrapFocusPreviousFocusableMenuItem(parentElement, currentFocusedElement) {
      let allFocusableChildren = getMenuFocusableDescendants(parentElement), currentItemIdx = getCurrentFocusedElementIndex(allFocusableChildren, currentFocusedElement);
      currentItemIdx === -1 ? allFocusableChildren[0].focus() : allFocusableChildren[(currentItemIdx - 1 + allFocusableChildren.length) % allFocusableChildren.length].focus();
    }
    function wrapFocusNextFocusableMenuItem(parentElement, currentFocusedElement) {
      let allFocusableChildren = getMenuFocusableDescendants(parentElement), currentItemIdx = getCurrentFocusedElementIndex(allFocusableChildren, currentFocusedElement);
      currentItemIdx === -1 ? allFocusableChildren[0].focus() : allFocusableChildren[(currentItemIdx + 1) % allFocusableChildren.length].focus();
    }
    function getMenuFocusableDescendants(element) {
      return element.querySelectorAll(MENUITEM_FOCUSABLE_SELECTORS);
    }
    function getCurrentFocusedElementIndex(allFocusableChildren, currentFocusedElement) {
      let currentItemIdx = 0;
      for (let focusableChild of allFocusableChildren) {
        if (focusableChild === currentFocusedElement)
          break;
        currentItemIdx++;
      }
      return currentItemIdx === allFocusableChildren.length ? -1 : currentItemIdx;
    }
    function matches(node, selector) {
      if (node.matches)
        return node.matches(selector);
      let matches2 = (node.ownerDocument || document).querySelectorAll(selector), i = matches2.length;
      for (; --i >= 0 && matches2.item(i) !== node; )
        return i > -1;
    }
    exports.findFirstFocusableNode = findFirstFocusableNode;
    exports.findFirstFocusableNodeIncludingDisabled = findFirstFocusableNodeIncludingDisabled;
    exports.findFirstKeyboardFocusableNode = findFirstKeyboardFocusableNode;
    exports.findLastKeyboardFocusableNode = findLastKeyboardFocusableNode;
    exports.focusFirstFocusableNode = focusFirstFocusableNode;
    exports.focusFirstKeyboardFocusableNode = focusFirstKeyboardFocusableNode;
    exports.focusLastKeyboardFocusableNode = focusLastKeyboardFocusableNode;
    exports.focusNextFocusableNode = focusNextFocusableNode;
    exports.handleMouseUpByBlurring = handleMouseUpByBlurring;
    exports.nextFocusableNode = nextFocusableNode;
    exports.wrapFocusNextFocusableMenuItem = wrapFocusNextFocusableMenuItem;
    exports.wrapFocusPreviousFocusableMenuItem = wrapFocusPreviousFocusableMenuItem;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Button/Button.css.js
var require_Button_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Button/Button.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Button: "Polaris-Button",
      disabled: "Polaris-Button--disabled",
      pressed: "Polaris-Button--pressed",
      variantPrimary: "Polaris-Button--variantPrimary",
      variantSecondary: "Polaris-Button--variantSecondary",
      variantTertiary: "Polaris-Button--variantTertiary",
      variantPlain: "Polaris-Button--variantPlain",
      removeUnderline: "Polaris-Button--removeUnderline",
      variantMonochromePlain: "Polaris-Button--variantMonochromePlain",
      toneSuccess: "Polaris-Button--toneSuccess",
      toneCritical: "Polaris-Button--toneCritical",
      sizeMicro: "Polaris-Button--sizeMicro",
      sizeSlim: "Polaris-Button--sizeSlim",
      sizeMedium: "Polaris-Button--sizeMedium",
      sizeLarge: "Polaris-Button--sizeLarge",
      textAlignCenter: "Polaris-Button--textAlignCenter",
      textAlignStart: "Polaris-Button--textAlignStart",
      textAlignLeft: "Polaris-Button--textAlignLeft",
      textAlignEnd: "Polaris-Button--textAlignEnd",
      textAlignRight: "Polaris-Button--textAlignRight",
      fullWidth: "Polaris-Button--fullWidth",
      iconOnly: "Polaris-Button--iconOnly",
      iconWithText: "Polaris-Button--iconWithText",
      disclosure: "Polaris-Button--disclosure",
      loading: "Polaris-Button--loading",
      pressable: "Polaris-Button--pressable",
      hidden: "Polaris-Button--hidden",
      Icon: "Polaris-Button__Icon",
      Spinner: "Polaris-Button__Spinner"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Icon/Icon.css.js
var require_Icon_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Icon/Icon.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Icon: "Polaris-Icon",
      toneInherit: "Polaris-Icon--toneInherit",
      toneBase: "Polaris-Icon--toneBase",
      toneSubdued: "Polaris-Icon--toneSubdued",
      toneCaution: "Polaris-Icon--toneCaution",
      toneWarning: "Polaris-Icon--toneWarning",
      toneCritical: "Polaris-Icon--toneCritical",
      toneInteractive: "Polaris-Icon--toneInteractive",
      toneInfo: "Polaris-Icon--toneInfo",
      toneSuccess: "Polaris-Icon--toneSuccess",
      tonePrimary: "Polaris-Icon--tonePrimary",
      toneEmphasis: "Polaris-Icon--toneEmphasis",
      toneMagic: "Polaris-Icon--toneMagic",
      toneTextCaution: "Polaris-Icon--toneTextCaution",
      toneTextWarning: "Polaris-Icon--toneTextWarning",
      toneTextCritical: "Polaris-Icon--toneTextCritical",
      toneTextInfo: "Polaris-Icon--toneTextInfo",
      toneTextPrimary: "Polaris-Icon--toneTextPrimary",
      toneTextSuccess: "Polaris-Icon--toneTextSuccess",
      toneTextMagic: "Polaris-Icon--toneTextMagic",
      Svg: "Polaris-Icon__Svg",
      Img: "Polaris-Icon__Img",
      Placeholder: "Polaris-Icon__Placeholder"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Text/Text.css.js
var require_Text_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Text/Text.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      root: "Polaris-Text--root",
      block: "Polaris-Text--block",
      truncate: "Polaris-Text--truncate",
      visuallyHidden: "Polaris-Text--visuallyHidden",
      start: "Polaris-Text--start",
      center: "Polaris-Text--center",
      end: "Polaris-Text--end",
      justify: "Polaris-Text--justify",
      base: "Polaris-Text--base",
      inherit: "Polaris-Text--inherit",
      disabled: "Polaris-Text--disabled",
      success: "Polaris-Text--success",
      critical: "Polaris-Text--critical",
      caution: "Polaris-Text--caution",
      subdued: "Polaris-Text--subdued",
      magic: "Polaris-Text--magic",
      "magic-subdued": "Polaris-Text__magic--subdued",
      "text-inverse": "Polaris-Text__text--inverse",
      "text-inverse-secondary": "Polaris-Text--textInverseSecondary",
      headingXs: "Polaris-Text--headingXs",
      headingSm: "Polaris-Text--headingSm",
      headingMd: "Polaris-Text--headingMd",
      headingLg: "Polaris-Text--headingLg",
      headingXl: "Polaris-Text--headingXl",
      heading2xl: "Polaris-Text--heading2xl",
      heading3xl: "Polaris-Text--heading3xl",
      bodyXs: "Polaris-Text--bodyXs",
      bodySm: "Polaris-Text--bodySm",
      bodyMd: "Polaris-Text--bodyMd",
      bodyLg: "Polaris-Text--bodyLg",
      regular: "Polaris-Text--regular",
      medium: "Polaris-Text--medium",
      semibold: "Polaris-Text--semibold",
      bold: "Polaris-Text--bold",
      break: "Polaris-Text--break",
      numeric: "Polaris-Text--numeric",
      "line-through": "Polaris-Text__line--through"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Text/Text.js
var require_Text = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Text/Text.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Text_module = require_Text_css(), Text4 = ({
      alignment,
      as,
      breakWord,
      children,
      tone,
      fontWeight,
      id,
      numeric = !1,
      truncate = !1,
      variant,
      visuallyHidden = !1,
      textDecorationLine
    }) => {
      let Component = as || (visuallyHidden ? "span" : "p"), className = css.classNames(Text_module.default.root, variant && Text_module.default[variant], fontWeight && Text_module.default[fontWeight], (alignment || truncate) && Text_module.default.block, alignment && Text_module.default[alignment], breakWord && Text_module.default.break, tone && Text_module.default[tone], numeric && Text_module.default.numeric, truncate && Text_module.default.truncate, visuallyHidden && Text_module.default.visuallyHidden, textDecorationLine && Text_module.default[textDecorationLine]);
      return /* @__PURE__ */ React2.createElement(Component, Object.assign({
        className
      }, id && {
        id
      }), children);
    };
    exports.Text = Text4;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Icon/Icon.js
var require_Icon = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Icon/Icon.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), breakpoints = require_breakpoints(), Icon_module = require_Icon_css(), Text4 = require_Text();
    function Icon2({
      source,
      tone,
      accessibilityLabel
    }) {
      let sourceType;
      typeof source == "function" ? sourceType = "function" : source === "placeholder" ? sourceType = "placeholder" : sourceType = "external";
      let className = css.classNames(Icon_module.default.Icon, tone && Icon_module.default[css.variationName("tone", tone)]), {
        mdDown
      } = breakpoints.useBreakpoints(), SourceComponent = source, contentMarkup = {
        function: /* @__PURE__ */ React2.createElement(SourceComponent, Object.assign({
          className: Icon_module.default.Svg,
          focusable: "false",
          "aria-hidden": "true"
          // On Mobile we're scaling the viewBox to 18x18 to make the icons bigger
          // Also, we're setting the viewport origin to 1x1 to center the icon
          // We use this syntax so we don't override the existing viewBox value if we don't need to.
        }, mdDown ? {
          viewBox: "1 1 18 18"
        } : {})),
        placeholder: /* @__PURE__ */ React2.createElement("div", {
          className: Icon_module.default.Placeholder
        }),
        external: /* @__PURE__ */ React2.createElement("img", {
          className: Icon_module.default.Img,
          src: `data:image/svg+xml;utf8,${source}`,
          alt: "",
          "aria-hidden": "true"
        })
      };
      return /* @__PURE__ */ React2.createElement("span", {
        className
      }, accessibilityLabel && /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        visuallyHidden: !0
      }, accessibilityLabel), contentMarkup[sourceType]);
    }
    exports.Icon = Icon2;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Spinner/Spinner.css.js
var require_Spinner_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Spinner/Spinner.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Spinner: "Polaris-Spinner",
      sizeSmall: "Polaris-Spinner--sizeSmall",
      sizeLarge: "Polaris-Spinner--sizeLarge"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Spinner/Spinner.js
var require_Spinner = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Spinner/Spinner.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), useIsAfterInitialMount = require_use_is_after_initial_mount(), Spinner_module = require_Spinner_css(), Text4 = require_Text();
    function Spinner2({
      size = "large",
      accessibilityLabel,
      hasFocusableParent
    }) {
      let isAfterInitialMount = useIsAfterInitialMount.useIsAfterInitialMount(), className = css.classNames(Spinner_module.default.Spinner, size && Spinner_module.default[css.variationName("size", size)]), spinnerSVGMarkup = size === "large" ? /* @__PURE__ */ React2.createElement("svg", {
        viewBox: "0 0 44 44",
        xmlns: "http://www.w3.org/2000/svg"
      }, /* @__PURE__ */ React2.createElement("path", {
        d: "M15.542 1.487A21.507 21.507 0 00.5 22c0 11.874 9.626 21.5 21.5 21.5 9.847 0 18.364-6.675 20.809-16.072a1.5 1.5 0 00-2.904-.756C37.803 34.755 30.473 40.5 22 40.5 11.783 40.5 3.5 32.217 3.5 22c0-8.137 5.3-15.247 12.942-17.65a1.5 1.5 0 10-.9-2.863z"
      })) : /* @__PURE__ */ React2.createElement("svg", {
        viewBox: "0 0 20 20",
        xmlns: "http://www.w3.org/2000/svg"
      }, /* @__PURE__ */ React2.createElement("path", {
        d: "M7.229 1.173a9.25 9.25 0 1011.655 11.412 1.25 1.25 0 10-2.4-.698 6.75 6.75 0 11-8.506-8.329 1.25 1.25 0 10-.75-2.385z"
      })), spanAttributes = {
        ...!hasFocusableParent && {
          role: "status"
        }
      }, accessibilityLabelMarkup = (isAfterInitialMount || !hasFocusableParent) && /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        visuallyHidden: !0
      }, accessibilityLabel);
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("span", {
        className
      }, spinnerSVGMarkup), /* @__PURE__ */ React2.createElement("span", spanAttributes, accessibilityLabelMarkup));
    }
    exports.Spinner = Spinner2;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-disable-interaction.js
var require_use_disable_interaction = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-disable-interaction.js"(exports) {
    "use strict";
    var React2 = require_react();
    function useDisableClick(disabled, handleClick) {
      let handleClickWrapper = React2.useCallback((event) => {
        disabled && (event.preventDefault(), event.stopPropagation());
      }, [disabled]);
      return disabled ? handleClickWrapper : handleClick;
    }
    exports.useDisableClick = useDisableClick;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/link/hooks.js
var require_hooks = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/link/hooks.js"(exports) {
    "use strict";
    var React2 = require_react(), context = require_context5();
    function useLink() {
      return React2.useContext(context.LinkContext);
    }
    exports.useLink = useLink;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/UnstyledLink/UnstyledLink.js
var require_UnstyledLink = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/UnstyledLink/UnstyledLink.js"(exports) {
    "use strict";
    var React2 = require_react(), shared = require_shared(), hooks = require_hooks(), UnstyledLink = /* @__PURE__ */ React2.memo(/* @__PURE__ */ React2.forwardRef(function(props, _ref) {
      let LinkComponent = hooks.useLink();
      if (LinkComponent)
        return /* @__PURE__ */ React2.createElement(LinkComponent, Object.assign({}, shared.unstyled.props, props, {
          ref: _ref
        }));
      let {
        external,
        url,
        target: targetProp,
        ...rest
      } = props, target;
      external ? target = "_blank" : target = targetProp ?? void 0;
      let rel = target === "_blank" ? "noopener noreferrer" : void 0;
      return /* @__PURE__ */ React2.createElement("a", Object.assign({
        target
      }, rest, {
        href: url,
        rel
      }, shared.unstyled.props, {
        ref: _ref
      }));
    }));
    exports.UnstyledLink = UnstyledLink;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/UnstyledButton/UnstyledButton.js
var require_UnstyledButton = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/UnstyledButton/UnstyledButton.js"(exports) {
    "use strict";
    var React2 = require_react(), focus = require_focus(), useDisableInteraction = require_use_disable_interaction(), UnstyledLink = require_UnstyledLink();
    function UnstyledButton({
      id,
      children,
      className,
      url,
      external,
      target,
      download,
      submit,
      disabled,
      loading,
      pressed,
      accessibilityLabel,
      role,
      ariaControls,
      ariaExpanded,
      ariaDescribedBy,
      ariaChecked,
      onClick,
      onFocus,
      onBlur,
      onKeyDown,
      onKeyPress,
      onKeyUp,
      onMouseEnter,
      onTouchStart,
      ...rest
    }) {
      let buttonMarkup, commonProps = {
        id,
        className,
        "aria-label": accessibilityLabel
      }, interactiveProps = {
        ...commonProps,
        role,
        onClick,
        onFocus,
        onBlur,
        onMouseUp: focus.handleMouseUpByBlurring,
        onMouseEnter,
        onTouchStart
      }, handleClick = useDisableInteraction.useDisableClick(disabled, onClick);
      return url ? buttonMarkup = disabled ? (
        // Render an `<a>` so toggling disabled/enabled state changes only the
        // `href` attribute instead of replacing the whole element.
        /* @__PURE__ */ React2.createElement("a", commonProps, children)
      ) : /* @__PURE__ */ React2.createElement(UnstyledLink.UnstyledLink, Object.assign({}, interactiveProps, {
        url,
        external,
        target,
        download
      }, rest), children) : buttonMarkup = /* @__PURE__ */ React2.createElement("button", Object.assign({}, interactiveProps, {
        "aria-disabled": disabled,
        type: submit ? "submit" : "button",
        "aria-busy": loading ? !0 : void 0,
        "aria-controls": ariaControls,
        "aria-expanded": ariaExpanded,
        "aria-describedby": ariaDescribedBy,
        "aria-checked": ariaChecked,
        "aria-pressed": pressed,
        onKeyDown,
        onKeyUp,
        onKeyPress,
        onClick: handleClick,
        tabIndex: disabled ? -1 : void 0
      }, rest), children), buttonMarkup;
    }
    exports.UnstyledButton = UnstyledButton;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/errors.js
var require_errors = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/errors.js"(exports) {
    "use strict";
    var MissingAppProviderError = class extends Error {
      constructor(message = "") {
        super(`${message && `${message} `}Your application must be wrapped in an <AppProvider> component. See https://polaris.shopify.com/components/app-provider for implementation instructions.`), this.name = "MissingAppProviderError";
      }
    };
    exports.MissingAppProviderError = MissingAppProviderError;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/i18n/hooks.js
var require_hooks2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/i18n/hooks.js"(exports) {
    "use strict";
    var React2 = require_react(), errors = require_errors(), context = require_context2();
    function useI18n() {
      let i18n = React2.useContext(context.I18nContext);
      if (!i18n)
        throw new errors.MissingAppProviderError("No i18n was provided.");
      return i18n;
    }
    exports.useI18n = useI18n;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Button/Button.js
var require_Button = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Button/Button.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), breakpoints = require_breakpoints(), css = require_css(), focus = require_focus(), Button_module = require_Button_css(), Icon2 = require_Icon(), Spinner2 = require_Spinner(), UnstyledButton = require_UnstyledButton(), hooks = require_hooks2(), Text4 = require_Text();
    function Button4({
      id,
      children,
      url,
      disabled,
      external,
      download,
      target,
      submit,
      loading,
      pressed,
      accessibilityLabel,
      role,
      ariaControls,
      ariaExpanded,
      ariaDescribedBy,
      ariaChecked,
      onClick,
      onFocus,
      onBlur,
      onKeyDown,
      onKeyPress,
      onKeyUp,
      onMouseEnter,
      onTouchStart,
      onPointerDown,
      icon,
      disclosure,
      removeUnderline,
      size = "medium",
      textAlign = "center",
      fullWidth,
      dataPrimaryLink,
      tone,
      variant = "secondary"
    }) {
      let i18n = hooks.useI18n(), isDisabled = disabled || loading, {
        mdUp
      } = breakpoints.useBreakpoints(), className = css.classNames(Button_module.default.Button, Button_module.default.pressable, Button_module.default[css.variationName("variant", variant)], Button_module.default[css.variationName("size", size)], Button_module.default[css.variationName("textAlign", textAlign)], fullWidth && Button_module.default.fullWidth, disclosure && Button_module.default.disclosure, icon && children && Button_module.default.iconWithText, icon && children == null && Button_module.default.iconOnly, isDisabled && Button_module.default.disabled, loading && Button_module.default.loading, pressed && !disabled && !url && Button_module.default.pressed, removeUnderline && Button_module.default.removeUnderline, tone && Button_module.default[css.variationName("tone", tone)]), disclosureMarkup = disclosure ? /* @__PURE__ */ React2.createElement("span", {
        className: loading ? Button_module.default.hidden : Button_module.default.Icon
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: loading ? "placeholder" : getDisclosureIconSource(disclosure, polarisIcons.ChevronUpIcon, polarisIcons.ChevronDownIcon)
      })) : null, iconSource = isIconSource(icon) ? /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: loading ? "placeholder" : icon
      }) : icon, iconMarkup = iconSource ? /* @__PURE__ */ React2.createElement("span", {
        className: loading ? Button_module.default.hidden : Button_module.default.Icon
      }, iconSource) : null, hasPlainText = ["plain", "monochromePlain"].includes(variant), textFontWeight = "medium";
      hasPlainText ? textFontWeight = "regular" : variant === "primary" && (textFontWeight = mdUp ? "medium" : "semibold");
      let textVariant = "bodySm";
      (size === "large" || hasPlainText && size !== "micro") && (textVariant = "bodyMd");
      let childMarkup = children ? /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: textVariant,
        fontWeight: textFontWeight,
        key: disabled ? "text-disabled" : "text"
      }, children) : null, spinnerSVGMarkup = loading ? /* @__PURE__ */ React2.createElement("span", {
        className: Button_module.default.Spinner
      }, /* @__PURE__ */ React2.createElement(Spinner2.Spinner, {
        size: "small",
        accessibilityLabel: i18n.translate("Polaris.Button.spinnerAccessibilityLabel")
      })) : null, commonProps = {
        id,
        className,
        accessibilityLabel,
        ariaDescribedBy,
        role,
        onClick,
        onFocus,
        onBlur,
        onMouseUp: focus.handleMouseUpByBlurring,
        onMouseEnter,
        onTouchStart,
        "data-primary-link": dataPrimaryLink
      }, linkProps = {
        url,
        external,
        download,
        target
      }, actionProps = {
        submit,
        disabled: isDisabled,
        loading,
        ariaControls,
        ariaExpanded,
        ariaChecked,
        pressed,
        onKeyDown,
        onKeyUp,
        onKeyPress,
        onPointerDown
      };
      return /* @__PURE__ */ React2.createElement(UnstyledButton.UnstyledButton, Object.assign({}, commonProps, linkProps, actionProps), spinnerSVGMarkup, iconMarkup, childMarkup, disclosureMarkup);
    }
    function isIconSource(x) {
      return typeof x == "string" || typeof x == "object" && x.body || typeof x == "function";
    }
    function getDisclosureIconSource(disclosure, upIcon, downIcon) {
      return disclosure === "select" ? polarisIcons.SelectIcon : disclosure === "up" ? upIcon : downIcon;
    }
    exports.Button = Button4;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Button/utils.js
var require_utils = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Button/utils.js"(exports) {
    "use strict";
    var React2 = require_react(), Button4 = require_Button();
    function buttonsFrom(actions, overrides = {}) {
      return Array.isArray(actions) ? actions.map((action8, index) => buttonFrom(action8, overrides, index)) : buttonFrom(actions, overrides);
    }
    function buttonFrom({
      content,
      onAction,
      plain,
      destructive,
      ...action8
    }, overrides, key) {
      let plainVariant = plain ? "plain" : void 0, destructiveVariant = destructive ? "primary" : void 0, tone = !overrides?.tone && destructive ? "critical" : overrides?.tone;
      return /* @__PURE__ */ React2.createElement(Button4.Button, Object.assign({
        key,
        onClick: onAction,
        tone,
        variant: plainVariant || destructiveVariant
      }, action8, overrides), content);
    }
    exports.buttonFrom = buttonFrom;
    exports.buttonsFrom = buttonsFrom;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ShadowBevel/ShadowBevel.css.js
var require_ShadowBevel_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ShadowBevel/ShadowBevel.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ShadowBevel: "Polaris-ShadowBevel"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ShadowBevel/ShadowBevel.js
var require_ShadowBevel = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ShadowBevel/ShadowBevel.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), ShadowBevel_module = require_ShadowBevel_css();
    function ShadowBevel(props) {
      let {
        as = "div",
        bevel = !0,
        borderRadius,
        boxShadow,
        children,
        zIndex = "0"
      } = props, Component = as;
      return /* @__PURE__ */ React2.createElement(Component, {
        className: ShadowBevel_module.default.ShadowBevel,
        style: {
          "--pc-shadow-bevel-z-index": zIndex,
          ...css.getResponsiveValue("shadow-bevel", "content", mapResponsiveProp(bevel, (bevel2) => bevel2 ? '""' : "none")),
          ...css.getResponsiveValue("shadow-bevel", "box-shadow", mapResponsiveProp(bevel, (bevel2) => bevel2 ? `var(--p-shadow-${boxShadow})` : "none")),
          ...css.getResponsiveValue("shadow-bevel", "border-radius", mapResponsiveProp(bevel, (bevel2) => bevel2 ? `var(--p-border-radius-${borderRadius})` : "var(--p-border-radius-0)"))
        }
      }, children);
    }
    function mapResponsiveProp(responsiveProp, callback) {
      return typeof responsiveProp == "boolean" ? callback(responsiveProp) : Object.fromEntries(Object.entries(responsiveProp).map(([breakpointsAlias, value]) => [breakpointsAlias, callback(value)]));
    }
    exports.ShadowBevel = ShadowBevel;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Box/Box.css.js
var require_Box_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Box/Box.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      listReset: "Polaris-Box--listReset",
      Box: "Polaris-Box",
      visuallyHidden: "Polaris-Box--visuallyHidden",
      printHidden: "Polaris-Box--printHidden"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Box/Box.js
var require_Box = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Box/Box.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Box_module = require_Box_css(), Box4 = /* @__PURE__ */ React2.forwardRef(({
      as = "div",
      background,
      borderColor,
      borderStyle,
      borderWidth,
      borderBlockStartWidth,
      borderBlockEndWidth,
      borderInlineStartWidth,
      borderInlineEndWidth,
      borderRadius,
      borderEndStartRadius,
      borderEndEndRadius,
      borderStartStartRadius,
      borderStartEndRadius,
      children,
      color,
      id,
      minHeight,
      minWidth,
      maxWidth,
      overflowX,
      overflowY,
      outlineColor,
      outlineStyle,
      outlineWidth,
      padding,
      paddingBlock,
      paddingBlockStart,
      paddingBlockEnd,
      paddingInline,
      paddingInlineStart,
      paddingInlineEnd,
      role,
      shadow,
      tabIndex,
      width,
      printHidden,
      visuallyHidden,
      position,
      insetBlockStart,
      insetBlockEnd,
      insetInlineStart,
      insetInlineEnd,
      zIndex,
      opacity,
      ...restProps
    }, ref) => {
      let borderStyleValue = borderStyle || (borderColor || borderWidth || borderBlockStartWidth || borderBlockEndWidth || borderInlineStartWidth || borderInlineEndWidth ? "solid" : void 0), outlineStyleValue = outlineStyle || (outlineColor || outlineWidth ? "solid" : void 0), style = {
        "--pc-box-color": color ? `var(--p-color-${color})` : void 0,
        "--pc-box-background": background ? `var(--p-color-${background})` : void 0,
        // eslint-disable-next-line no-nested-ternary
        "--pc-box-border-color": borderColor ? borderColor === "transparent" ? "transparent" : `var(--p-color-${borderColor})` : void 0,
        "--pc-box-border-style": borderStyleValue,
        "--pc-box-border-radius": borderRadius ? `var(--p-border-radius-${borderRadius})` : void 0,
        "--pc-box-border-end-start-radius": borderEndStartRadius ? `var(--p-border-radius-${borderEndStartRadius})` : void 0,
        "--pc-box-border-end-end-radius": borderEndEndRadius ? `var(--p-border-radius-${borderEndEndRadius})` : void 0,
        "--pc-box-border-start-start-radius": borderStartStartRadius ? `var(--p-border-radius-${borderStartStartRadius})` : void 0,
        "--pc-box-border-start-end-radius": borderStartEndRadius ? `var(--p-border-radius-${borderStartEndRadius})` : void 0,
        "--pc-box-border-width": borderWidth ? `var(--p-border-width-${borderWidth})` : void 0,
        "--pc-box-border-block-start-width": borderBlockStartWidth ? `var(--p-border-width-${borderBlockStartWidth})` : void 0,
        "--pc-box-border-block-end-width": borderBlockEndWidth ? `var(--p-border-width-${borderBlockEndWidth})` : void 0,
        "--pc-box-border-inline-start-width": borderInlineStartWidth ? `var(--p-border-width-${borderInlineStartWidth})` : void 0,
        "--pc-box-border-inline-end-width": borderInlineEndWidth ? `var(--p-border-width-${borderInlineEndWidth})` : void 0,
        "--pc-box-min-height": minHeight,
        "--pc-box-min-width": minWidth,
        "--pc-box-max-width": maxWidth,
        "--pc-box-outline-color": outlineColor ? `var(--p-color-${outlineColor})` : void 0,
        "--pc-box-outline-style": outlineStyleValue,
        "--pc-box-outline-width": outlineWidth ? `var(--p-border-width-${outlineWidth})` : void 0,
        "--pc-box-overflow-x": overflowX,
        "--pc-box-overflow-y": overflowY,
        ...css.getResponsiveProps("box", "padding-block-start", "space", paddingBlockStart || paddingBlock || padding),
        ...css.getResponsiveProps("box", "padding-block-end", "space", paddingBlockEnd || paddingBlock || padding),
        ...css.getResponsiveProps("box", "padding-inline-start", "space", paddingInlineStart || paddingInline || padding),
        ...css.getResponsiveProps("box", "padding-inline-end", "space", paddingInlineEnd || paddingInline || padding),
        "--pc-box-shadow": shadow ? `var(--p-shadow-${shadow})` : void 0,
        "--pc-box-width": width,
        position,
        "--pc-box-inset-block-start": insetBlockStart ? `var(--p-space-${insetBlockStart})` : void 0,
        "--pc-box-inset-block-end": insetBlockEnd ? `var(--p-space-${insetBlockEnd})` : void 0,
        "--pc-box-inset-inline-start": insetInlineStart ? `var(--p-space-${insetInlineStart})` : void 0,
        "--pc-box-inset-inline-end": insetInlineEnd ? `var(--p-space-${insetInlineEnd})` : void 0,
        zIndex,
        opacity
      }, className = css.classNames(Box_module.default.Box, visuallyHidden && Box_module.default.visuallyHidden, printHidden && Box_module.default.printHidden, as === "ul" && Box_module.default.listReset);
      return /* @__PURE__ */ React2.createElement(as, {
        className,
        id,
        ref,
        style: css.sanitizeCustomProperties(style),
        role,
        tabIndex,
        ...restProps
      }, children);
    });
    Box4.displayName = "Box";
    exports.Box = Box4;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Card/Card.js
var require_Card = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Card/Card.js"(exports) {
    "use strict";
    var React2 = require_react(), breakpoints = require_breakpoints(), withinContentContext = require_within_content_context(), ShadowBevel = require_ShadowBevel(), Box4 = require_Box(), Card4 = ({
      children,
      background = "bg-surface",
      padding = {
        xs: "400"
      },
      roundedAbove = "sm"
    }) => {
      let breakpoints$1 = breakpoints.useBreakpoints(), defaultBorderRadius = "300", hasBorderRadius = Boolean(breakpoints$1[`${roundedAbove}Up`]);
      return /* @__PURE__ */ React2.createElement(withinContentContext.WithinContentContext.Provider, {
        value: !0
      }, /* @__PURE__ */ React2.createElement(ShadowBevel.ShadowBevel, {
        boxShadow: "100",
        borderRadius: hasBorderRadius ? defaultBorderRadius : "0",
        zIndex: "32"
      }, /* @__PURE__ */ React2.createElement(Box4.Box, {
        background,
        padding,
        overflowX: "clip",
        overflowY: "clip",
        minHeight: "100%"
      }, children)));
    };
    exports.Card = Card4;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SettingAction/SettingAction.css.js
var require_SettingAction_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SettingAction/SettingAction.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      SettingAction: "Polaris-SettingAction",
      Setting: "Polaris-SettingAction__Setting",
      Action: "Polaris-SettingAction__Action"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SettingAction/SettingAction.js
var require_SettingAction = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SettingAction/SettingAction.js"(exports) {
    "use strict";
    var React2 = require_react(), SettingAction_module = require_SettingAction_css();
    function SettingAction({
      action: action8,
      children
    }) {
      return /* @__PURE__ */ React2.createElement("div", {
        className: SettingAction_module.default.SettingAction
      }, /* @__PURE__ */ React2.createElement("div", {
        className: SettingAction_module.default.Setting
      }, children), /* @__PURE__ */ React2.createElement("div", {
        className: SettingAction_module.default.Action
      }, action8));
    }
    exports.SettingAction = SettingAction;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/InlineStack/InlineStack.css.js
var require_InlineStack_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/InlineStack/InlineStack.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      InlineStack: "Polaris-InlineStack"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/InlineStack/InlineStack.js
var require_InlineStack = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/InlineStack/InlineStack.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), InlineStack_module = require_InlineStack_css(), InlineStack4 = function({
      as: Element2 = "div",
      align,
      direction = "row",
      blockAlign,
      gap,
      wrap = !0,
      children
    }) {
      let style = {
        "--pc-inline-stack-align": align,
        "--pc-inline-stack-block-align": blockAlign,
        "--pc-inline-stack-wrap": wrap ? "wrap" : "nowrap",
        ...css.getResponsiveProps("inline-stack", "gap", "space", gap),
        ...css.getResponsiveValue("inline-stack", "flex-direction", direction)
      };
      return /* @__PURE__ */ React2.createElement(Element2, {
        className: InlineStack_module.default.InlineStack,
        style
      }, children);
    };
    exports.InlineStack = InlineStack4;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/BlockStack/BlockStack.css.js
var require_BlockStack_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/BlockStack/BlockStack.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      BlockStack: "Polaris-BlockStack",
      listReset: "Polaris-BlockStack--listReset",
      fieldsetReset: "Polaris-BlockStack--fieldsetReset"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/BlockStack/BlockStack.js
var require_BlockStack = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/BlockStack/BlockStack.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), BlockStack_module = require_BlockStack_css(), BlockStack4 = ({
      as = "div",
      children,
      align,
      inlineAlign,
      gap,
      id,
      reverseOrder = !1,
      ...restProps
    }) => {
      let className = css.classNames(BlockStack_module.default.BlockStack, (as === "ul" || as === "ol") && BlockStack_module.default.listReset, as === "fieldset" && BlockStack_module.default.fieldsetReset), style = {
        "--pc-block-stack-align": align ? `${align}` : null,
        "--pc-block-stack-inline-align": inlineAlign ? `${inlineAlign}` : null,
        "--pc-block-stack-order": reverseOrder ? "column-reverse" : "column",
        ...css.getResponsiveProps("block-stack", "gap", "space", gap)
      };
      return /* @__PURE__ */ React2.createElement(as, {
        className,
        id,
        style: css.sanitizeCustomProperties(style),
        ...restProps
      }, children);
    };
    exports.BlockStack = BlockStack4;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Avatar/Avatar.css.js
var require_Avatar_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Avatar/Avatar.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Avatar: "Polaris-Avatar",
      imageHasLoaded: "Polaris-Avatar--imageHasLoaded",
      Text: "Polaris-Avatar__Text",
      long: "Polaris-Avatar--long",
      hidden: "Polaris-Avatar--hidden",
      sizeXs: "Polaris-Avatar--sizeXs",
      sizeSm: "Polaris-Avatar--sizeSm",
      sizeMd: "Polaris-Avatar--sizeMd",
      sizeLg: "Polaris-Avatar--sizeLg",
      sizeXl: "Polaris-Avatar--sizeXl",
      styleOne: "Polaris-Avatar--styleOne",
      styleTwo: "Polaris-Avatar--styleTwo",
      styleThree: "Polaris-Avatar--styleThree",
      styleFour: "Polaris-Avatar--styleFour",
      styleFive: "Polaris-Avatar--styleFive",
      styleSix: "Polaris-Avatar--styleSix",
      styleSeven: "Polaris-Avatar--styleSeven",
      Image: "Polaris-Avatar__Image",
      Initials: "Polaris-Avatar__Initials",
      Svg: "Polaris-Avatar__Svg"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Image/Image.js
var require_Image = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Image/Image.js"(exports) {
    "use strict";
    var React2 = require_react();
    function Image({
      alt,
      sourceSet,
      source,
      crossOrigin,
      onLoad,
      className,
      ...rest
    }) {
      let finalSourceSet = sourceSet ? sourceSet.map(({
        source: subSource,
        descriptor
      }) => `${subSource} ${descriptor}`).join(",") : null, handleLoad = React2.useCallback(() => {
        onLoad && onLoad();
      }, [onLoad]);
      return /* @__PURE__ */ React2.createElement("img", Object.assign({
        alt,
        src: source,
        crossOrigin,
        className,
        onLoad: handleLoad
      }, finalSourceSet ? {
        srcSet: finalSourceSet
      } : {}, rest));
    }
    exports.Image = Image;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Avatar/Avatar.js
var require_Avatar = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Avatar/Avatar.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), useIsAfterInitialMount = require_use_is_after_initial_mount(), Avatar_module = require_Avatar_css(), hooks = require_hooks2(), Image = require_Image(), Status;
    (function(Status2) {
      Status2.Pending = "PENDING", Status2.Loaded = "LOADED", Status2.Errored = "ERRORED";
    })(Status || (Status = {}));
    var STYLE_CLASSES = ["one", "two", "three", "four", "five", "six", "seven"], avatarStrokeWidth = {
      xs: "3",
      sm: "2.5",
      md: "2.5",
      lg: "2.5",
      xl: "2"
    };
    function xorHash(str) {
      let hash = 0;
      for (let char of str)
        hash ^= char.charCodeAt(0);
      return hash;
    }
    function styleClass(name) {
      return name ? STYLE_CLASSES[xorHash(name) % STYLE_CLASSES.length] : STYLE_CLASSES[0];
    }
    function Avatar({
      name,
      source,
      onError,
      initials,
      customer,
      size = "md",
      accessibilityLabel
    }) {
      let i18n = hooks.useI18n(), isAfterInitialMount = useIsAfterInitialMount.useIsAfterInitialMount(), [status, setStatus] = React2.useState(Status.Pending);
      React2.useEffect(() => {
        setStatus(Status.Pending);
      }, [source]);
      let handleError = React2.useCallback(() => {
        setStatus(Status.Errored), onError && onError();
      }, [onError]), handleLoad = React2.useCallback(() => {
        setStatus(Status.Loaded);
      }, []), hasImage = source && status !== Status.Errored, nameString = name || initials, label;
      if (accessibilityLabel)
        label = accessibilityLabel;
      else if (name)
        label = name;
      else if (initials) {
        let splitInitials = initials.split("").join(" ");
        label = i18n.translate("Polaris.Avatar.labelWithInitials", {
          initials: splitInitials
        });
      }
      let className = css.classNames(Avatar_module.default.Avatar, size && Avatar_module.default[css.variationName("size", size)], hasImage && status === Status.Loaded && Avatar_module.default.imageHasLoaded, !customer && !hasImage && Avatar_module.default[css.variationName("style", styleClass(nameString))]), textClassName = css.classNames(Avatar_module.default.Text, (initials?.length || 0) > 2 && Avatar_module.default.long), imageClassName = css.classNames(Avatar_module.default.Image, status !== Status.Loaded && Avatar_module.default.hidden), imageMarkUp = source && isAfterInitialMount && status !== Status.Errored ? /* @__PURE__ */ React2.createElement(Image.Image, {
        className: imageClassName,
        source,
        alt: "",
        role: "presentation",
        onLoad: handleLoad,
        onError: handleError
      }) : null, verticalOffset = "0.35em", avatarPath = /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("path", {
        fill: "none",
        d: "M25.5 13.5C25.5 16.5376 23.0376 19 20 19C16.9624 19 14.5 16.5376 14.5 13.5C14.5 10.4624 16.9624 8 20 8C23.0376 8 25.5 10.4624 25.5 13.5Z",
        stroke: "currentColor",
        strokeWidth: avatarStrokeWidth[size]
      }), /* @__PURE__ */ React2.createElement("path", {
        fill: "none",
        d: "M10.3433 29.682L9.47 31.254C9.03481 32.0373 9.60125 33 10.4974 33H29.5026C30.3988 33 30.9652 32.0373 30.53 31.254L29.6567 29.682C27.7084 26.175 24.0119 24 20 24C15.9882 24 12.2916 26.175 10.3433 29.682Z",
        stroke: "currentColor",
        strokeWidth: avatarStrokeWidth[size],
        strokeLinecap: "round",
        strokeLinejoin: "round"
      })), avatarBody = customer || !initials ? avatarPath : /* @__PURE__ */ React2.createElement("text", {
        className: textClassName,
        x: "50%",
        y: "50%",
        dy: verticalOffset,
        fill: "currentColor",
        textAnchor: "middle"
      }, initials), svgMarkup = hasImage ? null : /* @__PURE__ */ React2.createElement("span", {
        className: Avatar_module.default.Initials
      }, /* @__PURE__ */ React2.createElement("svg", {
        className: Avatar_module.default.Svg,
        viewBox: "0 0 40 40"
      }, avatarBody));
      return /* @__PURE__ */ React2.createElement("span", {
        "aria-label": label,
        role: label ? "img" : "presentation",
        className
      }, svgMarkup, imageMarkUp);
    }
    exports.Avatar = Avatar;
    exports.STYLE_CLASSES = STYLE_CLASSES;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/AccountConnection/AccountConnection.js
var require_AccountConnection = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/AccountConnection/AccountConnection.js"(exports) {
    "use strict";
    var React2 = require_react(), breakpoints = require_breakpoints(), utils = require_utils(), Card4 = require_Card(), SettingAction = require_SettingAction(), InlineStack4 = require_InlineStack(), BlockStack4 = require_BlockStack(), Avatar = require_Avatar(), Box4 = require_Box(), Text4 = require_Text();
    function AccountConnection({
      connected = !1,
      action: action8,
      avatarUrl,
      accountName = "",
      title,
      details,
      termsOfService
    }) {
      let breakpoints$1 = breakpoints.useBreakpoints(), initials = accountName ? accountName.split(/\s+/).map((name) => name[0]).join("") : void 0, avatarMarkup = connected ? /* @__PURE__ */ React2.createElement("span", null, /* @__PURE__ */ React2.createElement(Avatar.Avatar, {
        accessibilityLabel: "",
        name: accountName,
        initials,
        source: avatarUrl
      })) : null, titleContent = title || accountName, titleMarkup = /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "h2",
        variant: "headingSm"
      }, titleContent), detailsMarkup = details ? /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "bodyMd",
        tone: "subdued"
      }, details) : null, termsOfServiceMarkup = termsOfService ? /* @__PURE__ */ React2.createElement(Box4.Box, {
        paddingBlockStart: breakpoints$1.mdUp ? "400" : "500"
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "bodyMd"
      }, termsOfService)) : null, actionElement = action8 ? utils.buttonFrom(action8, {
        variant: connected ? void 0 : "primary"
      }) : null;
      return /* @__PURE__ */ React2.createElement(Card4.Card, null, /* @__PURE__ */ React2.createElement(SettingAction.SettingAction, {
        action: actionElement
      }, /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        gap: "400"
      }, avatarMarkup, /* @__PURE__ */ React2.createElement(BlockStack4.BlockStack, {
        gap: "100"
      }, titleMarkup, detailsMarkup))), termsOfServiceMarkup);
    }
    exports.AccountConnection = AccountConnection;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/FilterActionsProvider/FilterActionsProvider.js
var require_FilterActionsProvider = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/FilterActionsProvider/FilterActionsProvider.js"(exports) {
    "use strict";
    var React2 = require_react(), FilterActionsContext = /* @__PURE__ */ React2.createContext(!1);
    function FilterActionsProvider({
      children,
      filterActions
    }) {
      return /* @__PURE__ */ React2.createElement(FilterActionsContext.Provider, {
        value: filterActions
      }, children);
    }
    exports.FilterActionsContext = FilterActionsContext;
    exports.FilterActionsProvider = FilterActionsProvider;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionList/ActionList.css.js
var require_ActionList_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionList/ActionList.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Item: "Polaris-ActionList__Item",
      default: "Polaris-ActionList--default",
      active: "Polaris-ActionList--active",
      destructive: "Polaris-ActionList--destructive",
      disabled: "Polaris-ActionList--disabled",
      Prefix: "Polaris-ActionList__Prefix",
      Suffix: "Polaris-ActionList__Suffix",
      indented: "Polaris-ActionList--indented",
      menu: "Polaris-ActionList--menu",
      Text: "Polaris-ActionList__Text"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/within-filter-context.js
var require_within_filter_context = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/within-filter-context.js"(exports) {
    "use strict";
    var React2 = require_react(), WithinFilterContext = /* @__PURE__ */ React2.createContext(!1);
    exports.WithinFilterContext = WithinFilterContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Badge/Badge.css.js
var require_Badge_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Badge/Badge.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Badge: "Polaris-Badge",
      toneSuccess: "Polaris-Badge--toneSuccess",
      "toneSuccess-strong": "Polaris-Badge__toneSuccess--strong",
      toneInfo: "Polaris-Badge--toneInfo",
      "toneInfo-strong": "Polaris-Badge__toneInfo--strong",
      toneAttention: "Polaris-Badge--toneAttention",
      "toneAttention-strong": "Polaris-Badge__toneAttention--strong",
      toneWarning: "Polaris-Badge--toneWarning",
      "toneWarning-strong": "Polaris-Badge__toneWarning--strong",
      toneCritical: "Polaris-Badge--toneCritical",
      "toneCritical-strong": "Polaris-Badge__toneCritical--strong",
      toneNew: "Polaris-Badge--toneNew",
      toneMagic: "Polaris-Badge--toneMagic",
      "toneRead-only": "Polaris-Badge__toneRead--only",
      toneEnabled: "Polaris-Badge--toneEnabled",
      sizeLarge: "Polaris-Badge--sizeLarge",
      withinFilter: "Polaris-Badge--withinFilter",
      Icon: "Polaris-Badge__Icon",
      PipContainer: "Polaris-Badge__PipContainer"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Badge/types.js
var require_types2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Badge/types.js"(exports) {
    "use strict";
    exports.ToneValue = void 0;
    (function(ToneValue) {
      ToneValue.Info = "info", ToneValue.Success = "success", ToneValue.Warning = "warning", ToneValue.Critical = "critical", ToneValue.Attention = "attention", ToneValue.New = "new", ToneValue.Magic = "magic", ToneValue.InfoStrong = "info-strong", ToneValue.SuccessStrong = "success-strong", ToneValue.WarningStrong = "warning-strong", ToneValue.CriticalStrong = "critical-strong", ToneValue.AttentionStrong = "attention-strong", ToneValue.ReadOnly = "read-only", ToneValue.Enabled = "enabled";
    })(exports.ToneValue || (exports.ToneValue = {}));
    exports.ProgressValue = void 0;
    (function(ProgressValue) {
      ProgressValue.Incomplete = "incomplete", ProgressValue.PartiallyComplete = "partiallyComplete", ProgressValue.Complete = "complete";
    })(exports.ProgressValue || (exports.ProgressValue = {}));
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Badge/utils.js
var require_utils2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Badge/utils.js"(exports) {
    "use strict";
    var types = require_types2();
    function getDefaultAccessibilityLabel(i18n, progress, tone) {
      let progressLabel = "", toneLabel = "";
      if (!progress && !tone)
        return "";
      switch (progress) {
        case types.ProgressValue.Incomplete:
          progressLabel = i18n.translate("Polaris.Badge.PROGRESS_LABELS.incomplete");
          break;
        case types.ProgressValue.PartiallyComplete:
          progressLabel = i18n.translate("Polaris.Badge.PROGRESS_LABELS.partiallyComplete");
          break;
        case types.ProgressValue.Complete:
          progressLabel = i18n.translate("Polaris.Badge.PROGRESS_LABELS.complete");
          break;
      }
      switch (tone) {
        case types.ToneValue.Info:
        case types.ToneValue.InfoStrong:
          toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.info");
          break;
        case types.ToneValue.Success:
        case types.ToneValue.SuccessStrong:
          toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.success");
          break;
        case types.ToneValue.Warning:
        case types.ToneValue.WarningStrong:
          toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.warning");
          break;
        case types.ToneValue.Critical:
        case types.ToneValue.CriticalStrong:
          toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.critical");
          break;
        case types.ToneValue.Attention:
        case types.ToneValue.AttentionStrong:
          toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.attention");
          break;
        case types.ToneValue.New:
          toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.new");
          break;
        case types.ToneValue.ReadOnly:
          toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.readOnly");
          break;
        case types.ToneValue.Enabled:
          toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.enabled");
          break;
      }
      return !tone && progress ? progressLabel : tone && !progress ? toneLabel : i18n.translate("Polaris.Badge.progressAndTone", {
        progressLabel,
        toneLabel
      });
    }
    exports.getDefaultAccessibilityLabel = getDefaultAccessibilityLabel;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Badge/components/Pip/Pip.css.js
var require_Pip_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Badge/components/Pip/Pip.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Pip: "Polaris-Badge-Pip",
      toneInfo: "Polaris-Badge-Pip--toneInfo",
      toneSuccess: "Polaris-Badge-Pip--toneSuccess",
      toneNew: "Polaris-Badge-Pip--toneNew",
      toneAttention: "Polaris-Badge-Pip--toneAttention",
      toneWarning: "Polaris-Badge-Pip--toneWarning",
      toneCritical: "Polaris-Badge-Pip--toneCritical",
      progressIncomplete: "Polaris-Badge-Pip--progressIncomplete",
      progressPartiallyComplete: "Polaris-Badge-Pip--progressPartiallyComplete",
      progressComplete: "Polaris-Badge-Pip--progressComplete"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Badge/components/Pip/Pip.js
var require_Pip = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Badge/components/Pip/Pip.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), utils = require_utils2(), Pip_module = require_Pip_css(), hooks = require_hooks2(), Text4 = require_Text();
    function Pip({
      tone,
      progress = "complete",
      accessibilityLabelOverride
    }) {
      let i18n = hooks.useI18n(), className = css.classNames(Pip_module.default.Pip, tone && Pip_module.default[css.variationName("tone", tone)], progress && Pip_module.default[css.variationName("progress", progress)]), accessibilityLabel = accessibilityLabelOverride || utils.getDefaultAccessibilityLabel(i18n, progress, tone);
      return /* @__PURE__ */ React2.createElement("span", {
        className
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        visuallyHidden: !0
      }, accessibilityLabel));
    }
    exports.Pip = Pip;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Badge/Badge.js
var require_Badge = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Badge/Badge.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), withinFilterContext = require_within_filter_context(), Badge_module = require_Badge_css(), utils = require_utils2(), Pip = require_Pip(), hooks = require_hooks2(), Icon2 = require_Icon(), Text4 = require_Text(), DEFAULT_SIZE = "medium", progressIconMap = {
      complete: () => /* @__PURE__ */ React2.createElement("svg", {
        viewBox: "0 0 20 20"
      }, /* @__PURE__ */ React2.createElement("path", {
        d: "M6 10c0-.93 0-1.395.102-1.776a3 3 0 0 1 2.121-2.122C8.605 6 9.07 6 10 6c.93 0 1.395 0 1.776.102a3 3 0 0 1 2.122 2.122C14 8.605 14 9.07 14 10s0 1.395-.102 1.777a3 3 0 0 1-2.122 2.12C11.395 14 10.93 14 10 14s-1.395 0-1.777-.102a3 3 0 0 1-2.12-2.121C6 11.395 6 10.93 6 10Z"
      })),
      partiallyComplete: () => /* @__PURE__ */ React2.createElement("svg", {
        viewBox: "0 0 20 20"
      }, /* @__PURE__ */ React2.createElement("path", {
        fillRule: "evenodd",
        d: "m8.888 6.014-.017-.018-.02.02c-.253.013-.45.038-.628.086a3 3 0 0 0-2.12 2.122C6 8.605 6 9.07 6 10s0 1.395.102 1.777a3 3 0 0 0 2.121 2.12C8.605 14 9.07 14 10 14c.93 0 1.395 0 1.776-.102a3 3 0 0 0 2.122-2.121C14 11.395 14 10.93 14 10c0-.93 0-1.395-.102-1.776a3 3 0 0 0-2.122-2.122C11.395 6 10.93 6 10 6c-.475 0-.829 0-1.112.014ZM8.446 7.34a1.75 1.75 0 0 0-1.041.94l4.314 4.315c.443-.2.786-.576.941-1.042L8.446 7.34Zm4.304 2.536L10.124 7.25c.908.001 1.154.013 1.329.06a1.75 1.75 0 0 1 1.237 1.237c.047.175.059.42.06 1.329ZM8.547 12.69c.182.05.442.06 1.453.06h.106L7.25 9.894V10c0 1.01.01 1.27.06 1.453a1.75 1.75 0 0 0 1.237 1.237Z"
      })),
      incomplete: () => /* @__PURE__ */ React2.createElement("svg", {
        viewBox: "0 0 20 20"
      }, /* @__PURE__ */ React2.createElement("path", {
        fillRule: "evenodd",
        d: "M8.547 12.69c.183.05.443.06 1.453.06s1.27-.01 1.453-.06a1.75 1.75 0 0 0 1.237-1.237c.05-.182.06-.443.06-1.453s-.01-1.27-.06-1.453a1.75 1.75 0 0 0-1.237-1.237c-.182-.05-.443-.06-1.453-.06s-1.27.01-1.453.06A1.75 1.75 0 0 0 7.31 8.547c-.05.183-.06.443-.06 1.453s.01 1.27.06 1.453a1.75 1.75 0 0 0 1.237 1.237ZM6.102 8.224C6 8.605 6 9.07 6 10s0 1.395.102 1.777a3 3 0 0 0 2.122 2.12C8.605 14 9.07 14 10 14s1.395 0 1.777-.102a3 3 0 0 0 2.12-2.121C14 11.395 14 10.93 14 10c0-.93 0-1.395-.102-1.776a3 3 0 0 0-2.121-2.122C11.395 6 10.93 6 10 6c-.93 0-1.395 0-1.776.102a3 3 0 0 0-2.122 2.122Z"
      }))
    };
    function Badge4({
      children,
      tone,
      progress,
      icon,
      size = DEFAULT_SIZE,
      toneAndProgressLabelOverride
    }) {
      let i18n = hooks.useI18n(), withinFilter = React2.useContext(withinFilterContext.WithinFilterContext), className = css.classNames(Badge_module.default.Badge, tone && Badge_module.default[css.variationName("tone", tone)], size && size !== DEFAULT_SIZE && Badge_module.default[css.variationName("size", size)], withinFilter && Badge_module.default.withinFilter), accessibilityLabel = toneAndProgressLabelOverride || utils.getDefaultAccessibilityLabel(i18n, progress, tone), accessibilityMarkup = Boolean(accessibilityLabel) && /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        visuallyHidden: !0
      }, accessibilityLabel);
      return progress && !icon && (accessibilityMarkup = /* @__PURE__ */ React2.createElement("span", {
        className: Badge_module.default.Icon
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        accessibilityLabel,
        source: progressIconMap[progress]
      }))), /* @__PURE__ */ React2.createElement("span", {
        className
      }, accessibilityMarkup, icon && /* @__PURE__ */ React2.createElement("span", {
        className: Badge_module.default.Icon
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: icon
      })), children && /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "bodySm",
        fontWeight: tone === "new" ? "medium" : void 0
      }, children));
    }
    Badge4.Pip = Pip.Pip;
    exports.Badge = Badge4;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-toggle.js
var require_use_toggle = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-toggle.js"(exports) {
    "use strict";
    var React2 = require_react();
    function useToggle(initialState) {
      let [value, setState] = React2.useState(initialState);
      return {
        value,
        toggle: React2.useCallback(() => setState((state) => !state), []),
        setTrue: React2.useCallback(() => setState(!0), []),
        setFalse: React2.useCallback(() => setState(!1), [])
      };
    }
    exports.useToggle = useToggle;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tooltip/Tooltip.css.js
var require_Tooltip_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tooltip/Tooltip.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      TooltipContainer: "Polaris-Tooltip__TooltipContainer",
      HasUnderline: "Polaris-Tooltip__HasUnderline"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/ephemeral-presence-manager/hooks.js
var require_hooks3 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/ephemeral-presence-manager/hooks.js"(exports) {
    "use strict";
    var React2 = require_react(), context = require_context9();
    function useEphemeralPresenceManager() {
      let ephemeralPresenceManager = React2.useContext(context.EphemeralPresenceManagerContext);
      if (!ephemeralPresenceManager)
        throw new Error("No ephemeral presence manager was provided. Your application must be wrapped in an <AppProvider> component. See https://polaris.shopify.com/components/app-provider for implementation instructions.");
      return ephemeralPresenceManager;
    }
    function useReadOnlyEphemeralPresenceManager() {
      let {
        presenceList,
        presenceCounter
      } = useEphemeralPresenceManager();
      return {
        presenceList,
        presenceCounter
      };
    }
    exports.useEphemeralPresenceManager = useEphemeralPresenceManager;
    exports.useReadOnlyEphemeralPresenceManager = useReadOnlyEphemeralPresenceManager;
  }
});

// node_modules/scheduler/cjs/scheduler.production.min.js
var require_scheduler_production_min = __commonJS({
  "node_modules/scheduler/cjs/scheduler.production.min.js"(exports) {
    "use strict";
    function f(a, b) {
      var c = a.length;
      a.push(b);
      a:
        for (; 0 < c; ) {
          var d = c - 1 >>> 1, e = a[d];
          if (0 < g(e, b))
            a[d] = b, a[c] = e, c = d;
          else
            break a;
        }
    }
    function h(a) {
      return a.length === 0 ? null : a[0];
    }
    function k(a) {
      if (a.length === 0)
        return null;
      var b = a[0], c = a.pop();
      if (c !== b) {
        a[0] = c;
        a:
          for (var d = 0, e = a.length, w = e >>> 1; d < w; ) {
            var m = 2 * (d + 1) - 1, C = a[m], n = m + 1, x = a[n];
            if (0 > g(C, c))
              n < e && 0 > g(x, C) ? (a[d] = x, a[n] = c, d = n) : (a[d] = C, a[m] = c, d = m);
            else if (n < e && 0 > g(x, c))
              a[d] = x, a[n] = c, d = n;
            else
              break a;
          }
      }
      return b;
    }
    function g(a, b) {
      var c = a.sortIndex - b.sortIndex;
      return c !== 0 ? c : a.id - b.id;
    }
    typeof performance == "object" && typeof performance.now == "function" ? (l = performance, exports.unstable_now = function() {
      return l.now();
    }) : (p = Date, q = p.now(), exports.unstable_now = function() {
      return p.now() - q;
    });
    var l, p, q, r = [], t = [], u = 1, v = null, y = 3, z = !1, A = !1, B = !1, D = typeof setTimeout == "function" ? setTimeout : null, E = typeof clearTimeout == "function" ? clearTimeout : null, F = typeof setImmediate < "u" ? setImmediate : null;
    typeof navigator < "u" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 && navigator.scheduling.isInputPending.bind(navigator.scheduling);
    function G(a) {
      for (var b = h(t); b !== null; ) {
        if (b.callback === null)
          k(t);
        else if (b.startTime <= a)
          k(t), b.sortIndex = b.expirationTime, f(r, b);
        else
          break;
        b = h(t);
      }
    }
    function H(a) {
      if (B = !1, G(a), !A)
        if (h(r) !== null)
          A = !0, I(J);
        else {
          var b = h(t);
          b !== null && K(H, b.startTime - a);
        }
    }
    function J(a, b) {
      A = !1, B && (B = !1, E(L), L = -1), z = !0;
      var c = y;
      try {
        for (G(b), v = h(r); v !== null && (!(v.expirationTime > b) || a && !M()); ) {
          var d = v.callback;
          if (typeof d == "function") {
            v.callback = null, y = v.priorityLevel;
            var e = d(v.expirationTime <= b);
            b = exports.unstable_now(), typeof e == "function" ? v.callback = e : v === h(r) && k(r), G(b);
          } else
            k(r);
          v = h(r);
        }
        if (v !== null)
          var w = !0;
        else {
          var m = h(t);
          m !== null && K(H, m.startTime - b), w = !1;
        }
        return w;
      } finally {
        v = null, y = c, z = !1;
      }
    }
    var N = !1, O = null, L = -1, P = 5, Q = -1;
    function M() {
      return !(exports.unstable_now() - Q < P);
    }
    function R() {
      if (O !== null) {
        var a = exports.unstable_now();
        Q = a;
        var b = !0;
        try {
          b = O(!0, a);
        } finally {
          b ? S() : (N = !1, O = null);
        }
      } else
        N = !1;
    }
    var S;
    typeof F == "function" ? S = function() {
      F(R);
    } : typeof MessageChannel < "u" ? (T = new MessageChannel(), U = T.port2, T.port1.onmessage = R, S = function() {
      U.postMessage(null);
    }) : S = function() {
      D(R, 0);
    };
    var T, U;
    function I(a) {
      O = a, N || (N = !0, S());
    }
    function K(a, b) {
      L = D(function() {
        a(exports.unstable_now());
      }, b);
    }
    exports.unstable_IdlePriority = 5;
    exports.unstable_ImmediatePriority = 1;
    exports.unstable_LowPriority = 4;
    exports.unstable_NormalPriority = 3;
    exports.unstable_Profiling = null;
    exports.unstable_UserBlockingPriority = 2;
    exports.unstable_cancelCallback = function(a) {
      a.callback = null;
    };
    exports.unstable_continueExecution = function() {
      A || z || (A = !0, I(J));
    };
    exports.unstable_forceFrameRate = function(a) {
      0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : P = 0 < a ? Math.floor(1e3 / a) : 5;
    };
    exports.unstable_getCurrentPriorityLevel = function() {
      return y;
    };
    exports.unstable_getFirstCallbackNode = function() {
      return h(r);
    };
    exports.unstable_next = function(a) {
      switch (y) {
        case 1:
        case 2:
        case 3:
          var b = 3;
          break;
        default:
          b = y;
      }
      var c = y;
      y = b;
      try {
        return a();
      } finally {
        y = c;
      }
    };
    exports.unstable_pauseExecution = function() {
    };
    exports.unstable_requestPaint = function() {
    };
    exports.unstable_runWithPriority = function(a, b) {
      switch (a) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;
        default:
          a = 3;
      }
      var c = y;
      y = a;
      try {
        return b();
      } finally {
        y = c;
      }
    };
    exports.unstable_scheduleCallback = function(a, b, c) {
      var d = exports.unstable_now();
      switch (typeof c == "object" && c !== null ? (c = c.delay, c = typeof c == "number" && 0 < c ? d + c : d) : c = d, a) {
        case 1:
          var e = -1;
          break;
        case 2:
          e = 250;
          break;
        case 5:
          e = 1073741823;
          break;
        case 4:
          e = 1e4;
          break;
        default:
          e = 5e3;
      }
      return e = c + e, a = { id: u++, callback: b, priorityLevel: a, startTime: c, expirationTime: e, sortIndex: -1 }, c > d ? (a.sortIndex = c, f(t, a), h(r) === null && a === h(t) && (B ? (E(L), L = -1) : B = !0, K(H, c - d))) : (a.sortIndex = e, f(r, a), A || z || (A = !0, I(J))), a;
    };
    exports.unstable_shouldYield = M;
    exports.unstable_wrapCallback = function(a) {
      var b = y;
      return function() {
        var c = y;
        y = b;
        try {
          return a.apply(this, arguments);
        } finally {
          y = c;
        }
      };
    };
  }
});

// node_modules/scheduler/index.js
var require_scheduler = __commonJS({
  "node_modules/scheduler/index.js"(exports, module2) {
    "use strict";
    module2.exports = require_scheduler_production_min();
  }
});

// node_modules/react-dom/cjs/react-dom.production.min.js
var require_react_dom_production_min = __commonJS({
  "node_modules/react-dom/cjs/react-dom.production.min.js"(exports) {
    "use strict";
    var aa = require_react(), ca = require_scheduler();
    function p(a) {
      for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++)
        b += "&args[]=" + encodeURIComponent(arguments[c]);
      return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
    }
    var da = /* @__PURE__ */ new Set(), ea = {};
    function fa(a, b) {
      ha(a, b), ha(a + "Capture", b);
    }
    function ha(a, b) {
      for (ea[a] = b, a = 0; a < b.length; a++)
        da.add(b[a]);
    }
    var ia = !(typeof window > "u" || typeof window.document > "u" || typeof window.document.createElement > "u"), ja = Object.prototype.hasOwnProperty, ka = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/, la = {}, ma = {};
    function oa(a) {
      return ja.call(ma, a) ? !0 : ja.call(la, a) ? !1 : ka.test(a) ? ma[a] = !0 : (la[a] = !0, !1);
    }
    function pa(a, b, c, d) {
      if (c !== null && c.type === 0)
        return !1;
      switch (typeof b) {
        case "function":
        case "symbol":
          return !0;
        case "boolean":
          return d ? !1 : c !== null ? !c.acceptsBooleans : (a = a.toLowerCase().slice(0, 5), a !== "data-" && a !== "aria-");
        default:
          return !1;
      }
    }
    function qa(a, b, c, d) {
      if (b === null || typeof b > "u" || pa(a, b, c, d))
        return !0;
      if (d)
        return !1;
      if (c !== null)
        switch (c.type) {
          case 3:
            return !b;
          case 4:
            return b === !1;
          case 5:
            return isNaN(b);
          case 6:
            return isNaN(b) || 1 > b;
        }
      return !1;
    }
    function v(a, b, c, d, e, f, g) {
      this.acceptsBooleans = b === 2 || b === 3 || b === 4, this.attributeName = d, this.attributeNamespace = e, this.mustUseProperty = c, this.propertyName = a, this.type = b, this.sanitizeURL = f, this.removeEmptyString = g;
    }
    var z = {};
    "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a) {
      z[a] = new v(a, 0, !1, a, null, !1, !1);
    });
    [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(a) {
      var b = a[0];
      z[b] = new v(b, 1, !1, a[1], null, !1, !1);
    });
    ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(a) {
      z[a] = new v(a, 2, !1, a.toLowerCase(), null, !1, !1);
    });
    ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(a) {
      z[a] = new v(a, 2, !1, a, null, !1, !1);
    });
    "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a) {
      z[a] = new v(a, 3, !1, a.toLowerCase(), null, !1, !1);
    });
    ["checked", "multiple", "muted", "selected"].forEach(function(a) {
      z[a] = new v(a, 3, !0, a, null, !1, !1);
    });
    ["capture", "download"].forEach(function(a) {
      z[a] = new v(a, 4, !1, a, null, !1, !1);
    });
    ["cols", "rows", "size", "span"].forEach(function(a) {
      z[a] = new v(a, 6, !1, a, null, !1, !1);
    });
    ["rowSpan", "start"].forEach(function(a) {
      z[a] = new v(a, 5, !1, a.toLowerCase(), null, !1, !1);
    });
    var ra = /[\-:]([a-z])/g;
    function sa(a) {
      return a[1].toUpperCase();
    }
    "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a) {
      var b = a.replace(
        ra,
        sa
      );
      z[b] = new v(b, 1, !1, a, null, !1, !1);
    });
    "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a) {
      var b = a.replace(ra, sa);
      z[b] = new v(b, 1, !1, a, "http://www.w3.org/1999/xlink", !1, !1);
    });
    ["xml:base", "xml:lang", "xml:space"].forEach(function(a) {
      var b = a.replace(ra, sa);
      z[b] = new v(b, 1, !1, a, "http://www.w3.org/XML/1998/namespace", !1, !1);
    });
    ["tabIndex", "crossOrigin"].forEach(function(a) {
      z[a] = new v(a, 1, !1, a.toLowerCase(), null, !1, !1);
    });
    z.xlinkHref = new v("xlinkHref", 1, !1, "xlink:href", "http://www.w3.org/1999/xlink", !0, !1);
    ["src", "href", "action", "formAction"].forEach(function(a) {
      z[a] = new v(a, 1, !1, a.toLowerCase(), null, !0, !0);
    });
    function ta(a, b, c, d) {
      var e = z.hasOwnProperty(b) ? z[b] : null;
      (e !== null ? e.type !== 0 : d || !(2 < b.length) || b[0] !== "o" && b[0] !== "O" || b[1] !== "n" && b[1] !== "N") && (qa(b, c, e, d) && (c = null), d || e === null ? oa(b) && (c === null ? a.removeAttribute(b) : a.setAttribute(b, "" + c)) : e.mustUseProperty ? a[e.propertyName] = c === null ? e.type === 3 ? !1 : "" : c : (b = e.attributeName, d = e.attributeNamespace, c === null ? a.removeAttribute(b) : (e = e.type, c = e === 3 || e === 4 && c === !0 ? "" : "" + c, d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c))));
    }
    var ua = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, va = Symbol.for("react.element"), wa = Symbol.for("react.portal"), ya = Symbol.for("react.fragment"), za = Symbol.for("react.strict_mode"), Aa = Symbol.for("react.profiler"), Ba = Symbol.for("react.provider"), Ca = Symbol.for("react.context"), Da = Symbol.for("react.forward_ref"), Ea = Symbol.for("react.suspense"), Fa = Symbol.for("react.suspense_list"), Ga = Symbol.for("react.memo"), Ha = Symbol.for("react.lazy");
    Symbol.for("react.scope");
    Symbol.for("react.debug_trace_mode");
    var Ia = Symbol.for("react.offscreen");
    Symbol.for("react.legacy_hidden");
    Symbol.for("react.cache");
    Symbol.for("react.tracing_marker");
    var Ja = Symbol.iterator;
    function Ka(a) {
      return a === null || typeof a != "object" ? null : (a = Ja && a[Ja] || a["@@iterator"], typeof a == "function" ? a : null);
    }
    var A = Object.assign, La;
    function Ma(a) {
      if (La === void 0)
        try {
          throw Error();
        } catch (c) {
          var b = c.stack.trim().match(/\n( *(at )?)/);
          La = b && b[1] || "";
        }
      return `
` + La + a;
    }
    var Na = !1;
    function Oa(a, b) {
      if (!a || Na)
        return "";
      Na = !0;
      var c = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      try {
        if (b)
          if (b = function() {
            throw Error();
          }, Object.defineProperty(b.prototype, "props", { set: function() {
            throw Error();
          } }), typeof Reflect == "object" && Reflect.construct) {
            try {
              Reflect.construct(b, []);
            } catch (l) {
              var d = l;
            }
            Reflect.construct(a, [], b);
          } else {
            try {
              b.call();
            } catch (l) {
              d = l;
            }
            a.call(b.prototype);
          }
        else {
          try {
            throw Error();
          } catch (l) {
            d = l;
          }
          a();
        }
      } catch (l) {
        if (l && d && typeof l.stack == "string") {
          for (var e = l.stack.split(`
`), f = d.stack.split(`
`), g = e.length - 1, h = f.length - 1; 1 <= g && 0 <= h && e[g] !== f[h]; )
            h--;
          for (; 1 <= g && 0 <= h; g--, h--)
            if (e[g] !== f[h]) {
              if (g !== 1 || h !== 1)
                do
                  if (g--, h--, 0 > h || e[g] !== f[h]) {
                    var k = `
` + e[g].replace(" at new ", " at ");
                    return a.displayName && k.includes("<anonymous>") && (k = k.replace("<anonymous>", a.displayName)), k;
                  }
                while (1 <= g && 0 <= h);
              break;
            }
        }
      } finally {
        Na = !1, Error.prepareStackTrace = c;
      }
      return (a = a ? a.displayName || a.name : "") ? Ma(a) : "";
    }
    function Pa(a) {
      switch (a.tag) {
        case 5:
          return Ma(a.type);
        case 16:
          return Ma("Lazy");
        case 13:
          return Ma("Suspense");
        case 19:
          return Ma("SuspenseList");
        case 0:
        case 2:
        case 15:
          return a = Oa(a.type, !1), a;
        case 11:
          return a = Oa(a.type.render, !1), a;
        case 1:
          return a = Oa(a.type, !0), a;
        default:
          return "";
      }
    }
    function Qa(a) {
      if (a == null)
        return null;
      if (typeof a == "function")
        return a.displayName || a.name || null;
      if (typeof a == "string")
        return a;
      switch (a) {
        case ya:
          return "Fragment";
        case wa:
          return "Portal";
        case Aa:
          return "Profiler";
        case za:
          return "StrictMode";
        case Ea:
          return "Suspense";
        case Fa:
          return "SuspenseList";
      }
      if (typeof a == "object")
        switch (a.$$typeof) {
          case Ca:
            return (a.displayName || "Context") + ".Consumer";
          case Ba:
            return (a._context.displayName || "Context") + ".Provider";
          case Da:
            var b = a.render;
            return a = a.displayName, a || (a = b.displayName || b.name || "", a = a !== "" ? "ForwardRef(" + a + ")" : "ForwardRef"), a;
          case Ga:
            return b = a.displayName || null, b !== null ? b : Qa(a.type) || "Memo";
          case Ha:
            b = a._payload, a = a._init;
            try {
              return Qa(a(b));
            } catch {
            }
        }
      return null;
    }
    function Ra(a) {
      var b = a.type;
      switch (a.tag) {
        case 24:
          return "Cache";
        case 9:
          return (b.displayName || "Context") + ".Consumer";
        case 10:
          return (b._context.displayName || "Context") + ".Provider";
        case 18:
          return "DehydratedFragment";
        case 11:
          return a = b.render, a = a.displayName || a.name || "", b.displayName || (a !== "" ? "ForwardRef(" + a + ")" : "ForwardRef");
        case 7:
          return "Fragment";
        case 5:
          return b;
        case 4:
          return "Portal";
        case 3:
          return "Root";
        case 6:
          return "Text";
        case 16:
          return Qa(b);
        case 8:
          return b === za ? "StrictMode" : "Mode";
        case 22:
          return "Offscreen";
        case 12:
          return "Profiler";
        case 21:
          return "Scope";
        case 13:
          return "Suspense";
        case 19:
          return "SuspenseList";
        case 25:
          return "TracingMarker";
        case 1:
        case 0:
        case 17:
        case 2:
        case 14:
        case 15:
          if (typeof b == "function")
            return b.displayName || b.name || null;
          if (typeof b == "string")
            return b;
      }
      return null;
    }
    function Sa(a) {
      switch (typeof a) {
        case "boolean":
        case "number":
        case "string":
        case "undefined":
          return a;
        case "object":
          return a;
        default:
          return "";
      }
    }
    function Ta(a) {
      var b = a.type;
      return (a = a.nodeName) && a.toLowerCase() === "input" && (b === "checkbox" || b === "radio");
    }
    function Ua(a) {
      var b = Ta(a) ? "checked" : "value", c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b), d = "" + a[b];
      if (!a.hasOwnProperty(b) && typeof c < "u" && typeof c.get == "function" && typeof c.set == "function") {
        var e = c.get, f = c.set;
        return Object.defineProperty(a, b, { configurable: !0, get: function() {
          return e.call(this);
        }, set: function(a2) {
          d = "" + a2, f.call(this, a2);
        } }), Object.defineProperty(a, b, { enumerable: c.enumerable }), { getValue: function() {
          return d;
        }, setValue: function(a2) {
          d = "" + a2;
        }, stopTracking: function() {
          a._valueTracker = null, delete a[b];
        } };
      }
    }
    function Va(a) {
      a._valueTracker || (a._valueTracker = Ua(a));
    }
    function Wa(a) {
      if (!a)
        return !1;
      var b = a._valueTracker;
      if (!b)
        return !0;
      var c = b.getValue(), d = "";
      return a && (d = Ta(a) ? a.checked ? "true" : "false" : a.value), a = d, a !== c ? (b.setValue(a), !0) : !1;
    }
    function Xa(a) {
      if (a = a || (typeof document < "u" ? document : void 0), typeof a > "u")
        return null;
      try {
        return a.activeElement || a.body;
      } catch {
        return a.body;
      }
    }
    function Ya(a, b) {
      var c = b.checked;
      return A({}, b, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: c ?? a._wrapperState.initialChecked });
    }
    function Za(a, b) {
      var c = b.defaultValue == null ? "" : b.defaultValue, d = b.checked != null ? b.checked : b.defaultChecked;
      c = Sa(b.value != null ? b.value : c), a._wrapperState = { initialChecked: d, initialValue: c, controlled: b.type === "checkbox" || b.type === "radio" ? b.checked != null : b.value != null };
    }
    function ab(a, b) {
      b = b.checked, b != null && ta(a, "checked", b, !1);
    }
    function bb(a, b) {
      ab(a, b);
      var c = Sa(b.value), d = b.type;
      if (c != null)
        d === "number" ? (c === 0 && a.value === "" || a.value != c) && (a.value = "" + c) : a.value !== "" + c && (a.value = "" + c);
      else if (d === "submit" || d === "reset") {
        a.removeAttribute("value");
        return;
      }
      b.hasOwnProperty("value") ? cb(a, b.type, c) : b.hasOwnProperty("defaultValue") && cb(a, b.type, Sa(b.defaultValue)), b.checked == null && b.defaultChecked != null && (a.defaultChecked = !!b.defaultChecked);
    }
    function db2(a, b, c) {
      if (b.hasOwnProperty("value") || b.hasOwnProperty("defaultValue")) {
        var d = b.type;
        if (!(d !== "submit" && d !== "reset" || b.value !== void 0 && b.value !== null))
          return;
        b = "" + a._wrapperState.initialValue, c || b === a.value || (a.value = b), a.defaultValue = b;
      }
      c = a.name, c !== "" && (a.name = ""), a.defaultChecked = !!a._wrapperState.initialChecked, c !== "" && (a.name = c);
    }
    function cb(a, b, c) {
      (b !== "number" || Xa(a.ownerDocument) !== a) && (c == null ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c && (a.defaultValue = "" + c));
    }
    var eb = Array.isArray;
    function fb(a, b, c, d) {
      if (a = a.options, b) {
        b = {};
        for (var e = 0; e < c.length; e++)
          b["$" + c[e]] = !0;
        for (c = 0; c < a.length; c++)
          e = b.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = !0);
      } else {
        for (c = "" + Sa(c), b = null, e = 0; e < a.length; e++) {
          if (a[e].value === c) {
            a[e].selected = !0, d && (a[e].defaultSelected = !0);
            return;
          }
          b !== null || a[e].disabled || (b = a[e]);
        }
        b !== null && (b.selected = !0);
      }
    }
    function gb(a, b) {
      if (b.dangerouslySetInnerHTML != null)
        throw Error(p(91));
      return A({}, b, { value: void 0, defaultValue: void 0, children: "" + a._wrapperState.initialValue });
    }
    function hb(a, b) {
      var c = b.value;
      if (c == null) {
        if (c = b.children, b = b.defaultValue, c != null) {
          if (b != null)
            throw Error(p(92));
          if (eb(c)) {
            if (1 < c.length)
              throw Error(p(93));
            c = c[0];
          }
          b = c;
        }
        b == null && (b = ""), c = b;
      }
      a._wrapperState = { initialValue: Sa(c) };
    }
    function ib(a, b) {
      var c = Sa(b.value), d = Sa(b.defaultValue);
      c != null && (c = "" + c, c !== a.value && (a.value = c), b.defaultValue == null && a.defaultValue !== c && (a.defaultValue = c)), d != null && (a.defaultValue = "" + d);
    }
    function jb(a) {
      var b = a.textContent;
      b === a._wrapperState.initialValue && b !== "" && b !== null && (a.value = b);
    }
    function kb(a) {
      switch (a) {
        case "svg":
          return "http://www.w3.org/2000/svg";
        case "math":
          return "http://www.w3.org/1998/Math/MathML";
        default:
          return "http://www.w3.org/1999/xhtml";
      }
    }
    function lb(a, b) {
      return a == null || a === "http://www.w3.org/1999/xhtml" ? kb(b) : a === "http://www.w3.org/2000/svg" && b === "foreignObject" ? "http://www.w3.org/1999/xhtml" : a;
    }
    var mb, nb = function(a) {
      return typeof MSApp < "u" && MSApp.execUnsafeLocalFunction ? function(b, c, d, e) {
        MSApp.execUnsafeLocalFunction(function() {
          return a(b, c, d, e);
        });
      } : a;
    }(function(a, b) {
      if (a.namespaceURI !== "http://www.w3.org/2000/svg" || "innerHTML" in a)
        a.innerHTML = b;
      else {
        for (mb = mb || document.createElement("div"), mb.innerHTML = "<svg>" + b.valueOf().toString() + "</svg>", b = mb.firstChild; a.firstChild; )
          a.removeChild(a.firstChild);
        for (; b.firstChild; )
          a.appendChild(b.firstChild);
      }
    });
    function ob(a, b) {
      if (b) {
        var c = a.firstChild;
        if (c && c === a.lastChild && c.nodeType === 3) {
          c.nodeValue = b;
          return;
        }
      }
      a.textContent = b;
    }
    var pb = {
      animationIterationCount: !0,
      aspectRatio: !0,
      borderImageOutset: !0,
      borderImageSlice: !0,
      borderImageWidth: !0,
      boxFlex: !0,
      boxFlexGroup: !0,
      boxOrdinalGroup: !0,
      columnCount: !0,
      columns: !0,
      flex: !0,
      flexGrow: !0,
      flexPositive: !0,
      flexShrink: !0,
      flexNegative: !0,
      flexOrder: !0,
      gridArea: !0,
      gridRow: !0,
      gridRowEnd: !0,
      gridRowSpan: !0,
      gridRowStart: !0,
      gridColumn: !0,
      gridColumnEnd: !0,
      gridColumnSpan: !0,
      gridColumnStart: !0,
      fontWeight: !0,
      lineClamp: !0,
      lineHeight: !0,
      opacity: !0,
      order: !0,
      orphans: !0,
      tabSize: !0,
      widows: !0,
      zIndex: !0,
      zoom: !0,
      fillOpacity: !0,
      floodOpacity: !0,
      stopOpacity: !0,
      strokeDasharray: !0,
      strokeDashoffset: !0,
      strokeMiterlimit: !0,
      strokeOpacity: !0,
      strokeWidth: !0
    }, qb = ["Webkit", "ms", "Moz", "O"];
    Object.keys(pb).forEach(function(a) {
      qb.forEach(function(b) {
        b = b + a.charAt(0).toUpperCase() + a.substring(1), pb[b] = pb[a];
      });
    });
    function rb(a, b, c) {
      return b == null || typeof b == "boolean" || b === "" ? "" : c || typeof b != "number" || b === 0 || pb.hasOwnProperty(a) && pb[a] ? ("" + b).trim() : b + "px";
    }
    function sb(a, b) {
      a = a.style;
      for (var c in b)
        if (b.hasOwnProperty(c)) {
          var d = c.indexOf("--") === 0, e = rb(c, b[c], d);
          c === "float" && (c = "cssFloat"), d ? a.setProperty(c, e) : a[c] = e;
        }
    }
    var tb = A({ menuitem: !0 }, { area: !0, base: !0, br: !0, col: !0, embed: !0, hr: !0, img: !0, input: !0, keygen: !0, link: !0, meta: !0, param: !0, source: !0, track: !0, wbr: !0 });
    function ub(a, b) {
      if (b) {
        if (tb[a] && (b.children != null || b.dangerouslySetInnerHTML != null))
          throw Error(p(137, a));
        if (b.dangerouslySetInnerHTML != null) {
          if (b.children != null)
            throw Error(p(60));
          if (typeof b.dangerouslySetInnerHTML != "object" || !("__html" in b.dangerouslySetInnerHTML))
            throw Error(p(61));
        }
        if (b.style != null && typeof b.style != "object")
          throw Error(p(62));
      }
    }
    function vb(a, b) {
      if (a.indexOf("-") === -1)
        return typeof b.is == "string";
      switch (a) {
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
          return !1;
        default:
          return !0;
      }
    }
    var wb = null;
    function xb(a) {
      return a = a.target || a.srcElement || window, a.correspondingUseElement && (a = a.correspondingUseElement), a.nodeType === 3 ? a.parentNode : a;
    }
    var yb = null, zb = null, Ab = null;
    function Bb(a) {
      if (a = Cb(a)) {
        if (typeof yb != "function")
          throw Error(p(280));
        var b = a.stateNode;
        b && (b = Db(b), yb(a.stateNode, a.type, b));
      }
    }
    function Eb(a) {
      zb ? Ab ? Ab.push(a) : Ab = [a] : zb = a;
    }
    function Fb() {
      if (zb) {
        var a = zb, b = Ab;
        if (Ab = zb = null, Bb(a), b)
          for (a = 0; a < b.length; a++)
            Bb(b[a]);
      }
    }
    function Gb(a, b) {
      return a(b);
    }
    function Hb() {
    }
    var Ib = !1;
    function Jb(a, b, c) {
      if (Ib)
        return a(b, c);
      Ib = !0;
      try {
        return Gb(a, b, c);
      } finally {
        Ib = !1, (zb !== null || Ab !== null) && (Hb(), Fb());
      }
    }
    function Kb(a, b) {
      var c = a.stateNode;
      if (c === null)
        return null;
      var d = Db(c);
      if (d === null)
        return null;
      c = d[b];
      a:
        switch (b) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
          case "onMouseEnter":
            (d = !d.disabled) || (a = a.type, d = !(a === "button" || a === "input" || a === "select" || a === "textarea")), a = !d;
            break a;
          default:
            a = !1;
        }
      if (a)
        return null;
      if (c && typeof c != "function")
        throw Error(p(231, b, typeof c));
      return c;
    }
    var Lb = !1;
    if (ia)
      try {
        Mb = {}, Object.defineProperty(Mb, "passive", { get: function() {
          Lb = !0;
        } }), window.addEventListener("test", Mb, Mb), window.removeEventListener("test", Mb, Mb);
      } catch {
        Lb = !1;
      }
    var Mb;
    function Nb(a, b, c, d, e, f, g, h, k) {
      var l = Array.prototype.slice.call(arguments, 3);
      try {
        b.apply(c, l);
      } catch (m) {
        this.onError(m);
      }
    }
    var Ob = !1, Pb = null, Qb = !1, Rb = null, Sb = { onError: function(a) {
      Ob = !0, Pb = a;
    } };
    function Tb(a, b, c, d, e, f, g, h, k) {
      Ob = !1, Pb = null, Nb.apply(Sb, arguments);
    }
    function Ub(a, b, c, d, e, f, g, h, k) {
      if (Tb.apply(this, arguments), Ob) {
        if (Ob) {
          var l = Pb;
          Ob = !1, Pb = null;
        } else
          throw Error(p(198));
        Qb || (Qb = !0, Rb = l);
      }
    }
    function Vb(a) {
      var b = a, c = a;
      if (a.alternate)
        for (; b.return; )
          b = b.return;
      else {
        a = b;
        do
          b = a, b.flags & 4098 && (c = b.return), a = b.return;
        while (a);
      }
      return b.tag === 3 ? c : null;
    }
    function Wb(a) {
      if (a.tag === 13) {
        var b = a.memoizedState;
        if (b === null && (a = a.alternate, a !== null && (b = a.memoizedState)), b !== null)
          return b.dehydrated;
      }
      return null;
    }
    function Xb(a) {
      if (Vb(a) !== a)
        throw Error(p(188));
    }
    function Yb(a) {
      var b = a.alternate;
      if (!b) {
        if (b = Vb(a), b === null)
          throw Error(p(188));
        return b !== a ? null : a;
      }
      for (var c = a, d = b; ; ) {
        var e = c.return;
        if (e === null)
          break;
        var f = e.alternate;
        if (f === null) {
          if (d = e.return, d !== null) {
            c = d;
            continue;
          }
          break;
        }
        if (e.child === f.child) {
          for (f = e.child; f; ) {
            if (f === c)
              return Xb(e), a;
            if (f === d)
              return Xb(e), b;
            f = f.sibling;
          }
          throw Error(p(188));
        }
        if (c.return !== d.return)
          c = e, d = f;
        else {
          for (var g = !1, h = e.child; h; ) {
            if (h === c) {
              g = !0, c = e, d = f;
              break;
            }
            if (h === d) {
              g = !0, d = e, c = f;
              break;
            }
            h = h.sibling;
          }
          if (!g) {
            for (h = f.child; h; ) {
              if (h === c) {
                g = !0, c = f, d = e;
                break;
              }
              if (h === d) {
                g = !0, d = f, c = e;
                break;
              }
              h = h.sibling;
            }
            if (!g)
              throw Error(p(189));
          }
        }
        if (c.alternate !== d)
          throw Error(p(190));
      }
      if (c.tag !== 3)
        throw Error(p(188));
      return c.stateNode.current === c ? a : b;
    }
    function Zb(a) {
      return a = Yb(a), a !== null ? $b(a) : null;
    }
    function $b(a) {
      if (a.tag === 5 || a.tag === 6)
        return a;
      for (a = a.child; a !== null; ) {
        var b = $b(a);
        if (b !== null)
          return b;
        a = a.sibling;
      }
      return null;
    }
    var ac = ca.unstable_scheduleCallback, bc = ca.unstable_cancelCallback, cc = ca.unstable_shouldYield, dc = ca.unstable_requestPaint, B = ca.unstable_now, ec = ca.unstable_getCurrentPriorityLevel, fc = ca.unstable_ImmediatePriority, gc = ca.unstable_UserBlockingPriority, hc = ca.unstable_NormalPriority, ic = ca.unstable_LowPriority, jc = ca.unstable_IdlePriority, kc = null, lc = null;
    function mc(a) {
      if (lc && typeof lc.onCommitFiberRoot == "function")
        try {
          lc.onCommitFiberRoot(kc, a, void 0, (a.current.flags & 128) === 128);
        } catch {
        }
    }
    var oc = Math.clz32 ? Math.clz32 : nc, pc = Math.log, qc = Math.LN2;
    function nc(a) {
      return a >>>= 0, a === 0 ? 32 : 31 - (pc(a) / qc | 0) | 0;
    }
    var rc = 64, sc = 4194304;
    function tc(a) {
      switch (a & -a) {
        case 1:
          return 1;
        case 2:
          return 2;
        case 4:
          return 4;
        case 8:
          return 8;
        case 16:
          return 16;
        case 32:
          return 32;
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
          return a & 4194240;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          return a & 130023424;
        case 134217728:
          return 134217728;
        case 268435456:
          return 268435456;
        case 536870912:
          return 536870912;
        case 1073741824:
          return 1073741824;
        default:
          return a;
      }
    }
    function uc(a, b) {
      var c = a.pendingLanes;
      if (c === 0)
        return 0;
      var d = 0, e = a.suspendedLanes, f = a.pingedLanes, g = c & 268435455;
      if (g !== 0) {
        var h = g & ~e;
        h !== 0 ? d = tc(h) : (f &= g, f !== 0 && (d = tc(f)));
      } else
        g = c & ~e, g !== 0 ? d = tc(g) : f !== 0 && (d = tc(f));
      if (d === 0)
        return 0;
      if (b !== 0 && b !== d && !(b & e) && (e = d & -d, f = b & -b, e >= f || e === 16 && (f & 4194240) !== 0))
        return b;
      if (d & 4 && (d |= c & 16), b = a.entangledLanes, b !== 0)
        for (a = a.entanglements, b &= d; 0 < b; )
          c = 31 - oc(b), e = 1 << c, d |= a[c], b &= ~e;
      return d;
    }
    function vc(a, b) {
      switch (a) {
        case 1:
        case 2:
        case 4:
          return b + 250;
        case 8:
        case 16:
        case 32:
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
          return b + 5e3;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          return -1;
        case 134217728:
        case 268435456:
        case 536870912:
        case 1073741824:
          return -1;
        default:
          return -1;
      }
    }
    function wc(a, b) {
      for (var c = a.suspendedLanes, d = a.pingedLanes, e = a.expirationTimes, f = a.pendingLanes; 0 < f; ) {
        var g = 31 - oc(f), h = 1 << g, k = e[g];
        k === -1 ? (!(h & c) || h & d) && (e[g] = vc(h, b)) : k <= b && (a.expiredLanes |= h), f &= ~h;
      }
    }
    function xc(a) {
      return a = a.pendingLanes & -1073741825, a !== 0 ? a : a & 1073741824 ? 1073741824 : 0;
    }
    function yc() {
      var a = rc;
      return rc <<= 1, !(rc & 4194240) && (rc = 64), a;
    }
    function zc(a) {
      for (var b = [], c = 0; 31 > c; c++)
        b.push(a);
      return b;
    }
    function Ac(a, b, c) {
      a.pendingLanes |= b, b !== 536870912 && (a.suspendedLanes = 0, a.pingedLanes = 0), a = a.eventTimes, b = 31 - oc(b), a[b] = c;
    }
    function Bc(a, b) {
      var c = a.pendingLanes & ~b;
      a.pendingLanes = b, a.suspendedLanes = 0, a.pingedLanes = 0, a.expiredLanes &= b, a.mutableReadLanes &= b, a.entangledLanes &= b, b = a.entanglements;
      var d = a.eventTimes;
      for (a = a.expirationTimes; 0 < c; ) {
        var e = 31 - oc(c), f = 1 << e;
        b[e] = 0, d[e] = -1, a[e] = -1, c &= ~f;
      }
    }
    function Cc(a, b) {
      var c = a.entangledLanes |= b;
      for (a = a.entanglements; c; ) {
        var d = 31 - oc(c), e = 1 << d;
        e & b | a[d] & b && (a[d] |= b), c &= ~e;
      }
    }
    var C = 0;
    function Dc(a) {
      return a &= -a, 1 < a ? 4 < a ? a & 268435455 ? 16 : 536870912 : 4 : 1;
    }
    var Ec, Fc, Gc, Hc, Ic, Jc = !1, Kc = [], Lc = null, Mc = null, Nc = null, Oc = /* @__PURE__ */ new Map(), Pc = /* @__PURE__ */ new Map(), Qc = [], Rc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
    function Sc(a, b) {
      switch (a) {
        case "focusin":
        case "focusout":
          Lc = null;
          break;
        case "dragenter":
        case "dragleave":
          Mc = null;
          break;
        case "mouseover":
        case "mouseout":
          Nc = null;
          break;
        case "pointerover":
        case "pointerout":
          Oc.delete(b.pointerId);
          break;
        case "gotpointercapture":
        case "lostpointercapture":
          Pc.delete(b.pointerId);
      }
    }
    function Tc(a, b, c, d, e, f) {
      return a === null || a.nativeEvent !== f ? (a = { blockedOn: b, domEventName: c, eventSystemFlags: d, nativeEvent: f, targetContainers: [e] }, b !== null && (b = Cb(b), b !== null && Fc(b)), a) : (a.eventSystemFlags |= d, b = a.targetContainers, e !== null && b.indexOf(e) === -1 && b.push(e), a);
    }
    function Uc(a, b, c, d, e) {
      switch (b) {
        case "focusin":
          return Lc = Tc(Lc, a, b, c, d, e), !0;
        case "dragenter":
          return Mc = Tc(Mc, a, b, c, d, e), !0;
        case "mouseover":
          return Nc = Tc(Nc, a, b, c, d, e), !0;
        case "pointerover":
          var f = e.pointerId;
          return Oc.set(f, Tc(Oc.get(f) || null, a, b, c, d, e)), !0;
        case "gotpointercapture":
          return f = e.pointerId, Pc.set(f, Tc(Pc.get(f) || null, a, b, c, d, e)), !0;
      }
      return !1;
    }
    function Vc(a) {
      var b = Wc(a.target);
      if (b !== null) {
        var c = Vb(b);
        if (c !== null) {
          if (b = c.tag, b === 13) {
            if (b = Wb(c), b !== null) {
              a.blockedOn = b, Ic(a.priority, function() {
                Gc(c);
              });
              return;
            }
          } else if (b === 3 && c.stateNode.current.memoizedState.isDehydrated) {
            a.blockedOn = c.tag === 3 ? c.stateNode.containerInfo : null;
            return;
          }
        }
      }
      a.blockedOn = null;
    }
    function Xc(a) {
      if (a.blockedOn !== null)
        return !1;
      for (var b = a.targetContainers; 0 < b.length; ) {
        var c = Yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);
        if (c === null) {
          c = a.nativeEvent;
          var d = new c.constructor(c.type, c);
          wb = d, c.target.dispatchEvent(d), wb = null;
        } else
          return b = Cb(c), b !== null && Fc(b), a.blockedOn = c, !1;
        b.shift();
      }
      return !0;
    }
    function Zc(a, b, c) {
      Xc(a) && c.delete(b);
    }
    function $c() {
      Jc = !1, Lc !== null && Xc(Lc) && (Lc = null), Mc !== null && Xc(Mc) && (Mc = null), Nc !== null && Xc(Nc) && (Nc = null), Oc.forEach(Zc), Pc.forEach(Zc);
    }
    function ad(a, b) {
      a.blockedOn === b && (a.blockedOn = null, Jc || (Jc = !0, ca.unstable_scheduleCallback(ca.unstable_NormalPriority, $c)));
    }
    function bd(a) {
      function b(b2) {
        return ad(b2, a);
      }
      if (0 < Kc.length) {
        ad(Kc[0], a);
        for (var c = 1; c < Kc.length; c++) {
          var d = Kc[c];
          d.blockedOn === a && (d.blockedOn = null);
        }
      }
      for (Lc !== null && ad(Lc, a), Mc !== null && ad(Mc, a), Nc !== null && ad(Nc, a), Oc.forEach(b), Pc.forEach(b), c = 0; c < Qc.length; c++)
        d = Qc[c], d.blockedOn === a && (d.blockedOn = null);
      for (; 0 < Qc.length && (c = Qc[0], c.blockedOn === null); )
        Vc(c), c.blockedOn === null && Qc.shift();
    }
    var cd = ua.ReactCurrentBatchConfig, dd = !0;
    function ed(a, b, c, d) {
      var e = C, f = cd.transition;
      cd.transition = null;
      try {
        C = 1, fd(a, b, c, d);
      } finally {
        C = e, cd.transition = f;
      }
    }
    function gd(a, b, c, d) {
      var e = C, f = cd.transition;
      cd.transition = null;
      try {
        C = 4, fd(a, b, c, d);
      } finally {
        C = e, cd.transition = f;
      }
    }
    function fd(a, b, c, d) {
      if (dd) {
        var e = Yc(a, b, c, d);
        if (e === null)
          hd(a, b, d, id, c), Sc(a, d);
        else if (Uc(e, a, b, c, d))
          d.stopPropagation();
        else if (Sc(a, d), b & 4 && -1 < Rc.indexOf(a)) {
          for (; e !== null; ) {
            var f = Cb(e);
            if (f !== null && Ec(f), f = Yc(a, b, c, d), f === null && hd(a, b, d, id, c), f === e)
              break;
            e = f;
          }
          e !== null && d.stopPropagation();
        } else
          hd(a, b, d, null, c);
      }
    }
    var id = null;
    function Yc(a, b, c, d) {
      if (id = null, a = xb(d), a = Wc(a), a !== null)
        if (b = Vb(a), b === null)
          a = null;
        else if (c = b.tag, c === 13) {
          if (a = Wb(b), a !== null)
            return a;
          a = null;
        } else if (c === 3) {
          if (b.stateNode.current.memoizedState.isDehydrated)
            return b.tag === 3 ? b.stateNode.containerInfo : null;
          a = null;
        } else
          b !== a && (a = null);
      return id = a, null;
    }
    function jd(a) {
      switch (a) {
        case "cancel":
        case "click":
        case "close":
        case "contextmenu":
        case "copy":
        case "cut":
        case "auxclick":
        case "dblclick":
        case "dragend":
        case "dragstart":
        case "drop":
        case "focusin":
        case "focusout":
        case "input":
        case "invalid":
        case "keydown":
        case "keypress":
        case "keyup":
        case "mousedown":
        case "mouseup":
        case "paste":
        case "pause":
        case "play":
        case "pointercancel":
        case "pointerdown":
        case "pointerup":
        case "ratechange":
        case "reset":
        case "resize":
        case "seeked":
        case "submit":
        case "touchcancel":
        case "touchend":
        case "touchstart":
        case "volumechange":
        case "change":
        case "selectionchange":
        case "textInput":
        case "compositionstart":
        case "compositionend":
        case "compositionupdate":
        case "beforeblur":
        case "afterblur":
        case "beforeinput":
        case "blur":
        case "fullscreenchange":
        case "focus":
        case "hashchange":
        case "popstate":
        case "select":
        case "selectstart":
          return 1;
        case "drag":
        case "dragenter":
        case "dragexit":
        case "dragleave":
        case "dragover":
        case "mousemove":
        case "mouseout":
        case "mouseover":
        case "pointermove":
        case "pointerout":
        case "pointerover":
        case "scroll":
        case "toggle":
        case "touchmove":
        case "wheel":
        case "mouseenter":
        case "mouseleave":
        case "pointerenter":
        case "pointerleave":
          return 4;
        case "message":
          switch (ec()) {
            case fc:
              return 1;
            case gc:
              return 4;
            case hc:
            case ic:
              return 16;
            case jc:
              return 536870912;
            default:
              return 16;
          }
        default:
          return 16;
      }
    }
    var kd = null, ld = null, md = null;
    function nd() {
      if (md)
        return md;
      var a, b = ld, c = b.length, d, e = "value" in kd ? kd.value : kd.textContent, f = e.length;
      for (a = 0; a < c && b[a] === e[a]; a++)
        ;
      var g = c - a;
      for (d = 1; d <= g && b[c - d] === e[f - d]; d++)
        ;
      return md = e.slice(a, 1 < d ? 1 - d : void 0);
    }
    function od(a) {
      var b = a.keyCode;
      return "charCode" in a ? (a = a.charCode, a === 0 && b === 13 && (a = 13)) : a = b, a === 10 && (a = 13), 32 <= a || a === 13 ? a : 0;
    }
    function pd() {
      return !0;
    }
    function qd() {
      return !1;
    }
    function rd(a) {
      function b(b2, d, e, f, g) {
        this._reactName = b2, this._targetInst = e, this.type = d, this.nativeEvent = f, this.target = g, this.currentTarget = null;
        for (var c in a)
          a.hasOwnProperty(c) && (b2 = a[c], this[c] = b2 ? b2(f) : f[c]);
        return this.isDefaultPrevented = (f.defaultPrevented != null ? f.defaultPrevented : f.returnValue === !1) ? pd : qd, this.isPropagationStopped = qd, this;
      }
      return A(b.prototype, { preventDefault: function() {
        this.defaultPrevented = !0;
        var a2 = this.nativeEvent;
        a2 && (a2.preventDefault ? a2.preventDefault() : typeof a2.returnValue != "unknown" && (a2.returnValue = !1), this.isDefaultPrevented = pd);
      }, stopPropagation: function() {
        var a2 = this.nativeEvent;
        a2 && (a2.stopPropagation ? a2.stopPropagation() : typeof a2.cancelBubble != "unknown" && (a2.cancelBubble = !0), this.isPropagationStopped = pd);
      }, persist: function() {
      }, isPersistent: pd }), b;
    }
    var sd = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(a) {
      return a.timeStamp || Date.now();
    }, defaultPrevented: 0, isTrusted: 0 }, td = rd(sd), ud = A({}, sd, { view: 0, detail: 0 }), vd = rd(ud), wd, xd, yd, Ad = A({}, ud, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: zd, button: 0, buttons: 0, relatedTarget: function(a) {
      return a.relatedTarget === void 0 ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;
    }, movementX: function(a) {
      return "movementX" in a ? a.movementX : (a !== yd && (yd && a.type === "mousemove" ? (wd = a.screenX - yd.screenX, xd = a.screenY - yd.screenY) : xd = wd = 0, yd = a), wd);
    }, movementY: function(a) {
      return "movementY" in a ? a.movementY : xd;
    } }), Bd = rd(Ad), Cd = A({}, Ad, { dataTransfer: 0 }), Dd = rd(Cd), Ed = A({}, ud, { relatedTarget: 0 }), Fd = rd(Ed), Gd = A({}, sd, { animationName: 0, elapsedTime: 0, pseudoElement: 0 }), Hd = rd(Gd), Id = A({}, sd, { clipboardData: function(a) {
      return "clipboardData" in a ? a.clipboardData : window.clipboardData;
    } }), Jd = rd(Id), Kd = A({}, sd, { data: 0 }), Ld = rd(Kd), Md = {
      Esc: "Escape",
      Spacebar: " ",
      Left: "ArrowLeft",
      Up: "ArrowUp",
      Right: "ArrowRight",
      Down: "ArrowDown",
      Del: "Delete",
      Win: "OS",
      Menu: "ContextMenu",
      Apps: "ContextMenu",
      Scroll: "ScrollLock",
      MozPrintableKey: "Unidentified"
    }, Nd = {
      8: "Backspace",
      9: "Tab",
      12: "Clear",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      19: "Pause",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      45: "Insert",
      46: "Delete",
      112: "F1",
      113: "F2",
      114: "F3",
      115: "F4",
      116: "F5",
      117: "F6",
      118: "F7",
      119: "F8",
      120: "F9",
      121: "F10",
      122: "F11",
      123: "F12",
      144: "NumLock",
      145: "ScrollLock",
      224: "Meta"
    }, Od = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
    function Pd(a) {
      var b = this.nativeEvent;
      return b.getModifierState ? b.getModifierState(a) : (a = Od[a]) ? !!b[a] : !1;
    }
    function zd() {
      return Pd;
    }
    var Qd = A({}, ud, { key: function(a) {
      if (a.key) {
        var b = Md[a.key] || a.key;
        if (b !== "Unidentified")
          return b;
      }
      return a.type === "keypress" ? (a = od(a), a === 13 ? "Enter" : String.fromCharCode(a)) : a.type === "keydown" || a.type === "keyup" ? Nd[a.keyCode] || "Unidentified" : "";
    }, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: zd, charCode: function(a) {
      return a.type === "keypress" ? od(a) : 0;
    }, keyCode: function(a) {
      return a.type === "keydown" || a.type === "keyup" ? a.keyCode : 0;
    }, which: function(a) {
      return a.type === "keypress" ? od(a) : a.type === "keydown" || a.type === "keyup" ? a.keyCode : 0;
    } }), Rd = rd(Qd), Sd = A({}, Ad, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 }), Td = rd(Sd), Ud = A({}, ud, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: zd }), Vd = rd(Ud), Wd = A({}, sd, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 }), Xd = rd(Wd), Yd = A({}, Ad, {
      deltaX: function(a) {
        return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
      },
      deltaY: function(a) {
        return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
      },
      deltaZ: 0,
      deltaMode: 0
    }), Zd = rd(Yd), $d = [9, 13, 27, 32], ae = ia && "CompositionEvent" in window, be = null;
    ia && "documentMode" in document && (be = document.documentMode);
    var ce = ia && "TextEvent" in window && !be, de = ia && (!ae || be && 8 < be && 11 >= be), ee = String.fromCharCode(32), fe = !1;
    function ge(a, b) {
      switch (a) {
        case "keyup":
          return $d.indexOf(b.keyCode) !== -1;
        case "keydown":
          return b.keyCode !== 229;
        case "keypress":
        case "mousedown":
        case "focusout":
          return !0;
        default:
          return !1;
      }
    }
    function he(a) {
      return a = a.detail, typeof a == "object" && "data" in a ? a.data : null;
    }
    var ie = !1;
    function je(a, b) {
      switch (a) {
        case "compositionend":
          return he(b);
        case "keypress":
          return b.which !== 32 ? null : (fe = !0, ee);
        case "textInput":
          return a = b.data, a === ee && fe ? null : a;
        default:
          return null;
      }
    }
    function ke(a, b) {
      if (ie)
        return a === "compositionend" || !ae && ge(a, b) ? (a = nd(), md = ld = kd = null, ie = !1, a) : null;
      switch (a) {
        case "paste":
          return null;
        case "keypress":
          if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {
            if (b.char && 1 < b.char.length)
              return b.char;
            if (b.which)
              return String.fromCharCode(b.which);
          }
          return null;
        case "compositionend":
          return de && b.locale !== "ko" ? null : b.data;
        default:
          return null;
      }
    }
    var le = { color: !0, date: !0, datetime: !0, "datetime-local": !0, email: !0, month: !0, number: !0, password: !0, range: !0, search: !0, tel: !0, text: !0, time: !0, url: !0, week: !0 };
    function me(a) {
      var b = a && a.nodeName && a.nodeName.toLowerCase();
      return b === "input" ? !!le[a.type] : b === "textarea";
    }
    function ne(a, b, c, d) {
      Eb(d), b = oe(b, "onChange"), 0 < b.length && (c = new td("onChange", "change", null, c, d), a.push({ event: c, listeners: b }));
    }
    var pe = null, qe = null;
    function re(a) {
      se(a, 0);
    }
    function te(a) {
      var b = ue(a);
      if (Wa(b))
        return a;
    }
    function ve(a, b) {
      if (a === "change")
        return b;
    }
    var we = !1;
    ia && (ia ? (ye = "oninput" in document, ye || (ze = document.createElement("div"), ze.setAttribute("oninput", "return;"), ye = typeof ze.oninput == "function"), xe = ye) : xe = !1, we = xe && (!document.documentMode || 9 < document.documentMode));
    var xe, ye, ze;
    function Ae() {
      pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);
    }
    function Be(a) {
      if (a.propertyName === "value" && te(qe)) {
        var b = [];
        ne(b, qe, a, xb(a)), Jb(re, b);
      }
    }
    function Ce(a, b, c) {
      a === "focusin" ? (Ae(), pe = b, qe = c, pe.attachEvent("onpropertychange", Be)) : a === "focusout" && Ae();
    }
    function De(a) {
      if (a === "selectionchange" || a === "keyup" || a === "keydown")
        return te(qe);
    }
    function Ee(a, b) {
      if (a === "click")
        return te(b);
    }
    function Fe(a, b) {
      if (a === "input" || a === "change")
        return te(b);
    }
    function Ge(a, b) {
      return a === b && (a !== 0 || 1 / a === 1 / b) || a !== a && b !== b;
    }
    var He = typeof Object.is == "function" ? Object.is : Ge;
    function Ie(a, b) {
      if (He(a, b))
        return !0;
      if (typeof a != "object" || a === null || typeof b != "object" || b === null)
        return !1;
      var c = Object.keys(a), d = Object.keys(b);
      if (c.length !== d.length)
        return !1;
      for (d = 0; d < c.length; d++) {
        var e = c[d];
        if (!ja.call(b, e) || !He(a[e], b[e]))
          return !1;
      }
      return !0;
    }
    function Je(a) {
      for (; a && a.firstChild; )
        a = a.firstChild;
      return a;
    }
    function Ke(a, b) {
      var c = Je(a);
      a = 0;
      for (var d; c; ) {
        if (c.nodeType === 3) {
          if (d = a + c.textContent.length, a <= b && d >= b)
            return { node: c, offset: b - a };
          a = d;
        }
        a: {
          for (; c; ) {
            if (c.nextSibling) {
              c = c.nextSibling;
              break a;
            }
            c = c.parentNode;
          }
          c = void 0;
        }
        c = Je(c);
      }
    }
    function Le(a, b) {
      return a && b ? a === b ? !0 : a && a.nodeType === 3 ? !1 : b && b.nodeType === 3 ? Le(a, b.parentNode) : "contains" in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : !1 : !1;
    }
    function Me() {
      for (var a = window, b = Xa(); b instanceof a.HTMLIFrameElement; ) {
        try {
          var c = typeof b.contentWindow.location.href == "string";
        } catch {
          c = !1;
        }
        if (c)
          a = b.contentWindow;
        else
          break;
        b = Xa(a.document);
      }
      return b;
    }
    function Ne(a) {
      var b = a && a.nodeName && a.nodeName.toLowerCase();
      return b && (b === "input" && (a.type === "text" || a.type === "search" || a.type === "tel" || a.type === "url" || a.type === "password") || b === "textarea" || a.contentEditable === "true");
    }
    function Oe(a) {
      var b = Me(), c = a.focusedElem, d = a.selectionRange;
      if (b !== c && c && c.ownerDocument && Le(c.ownerDocument.documentElement, c)) {
        if (d !== null && Ne(c)) {
          if (b = d.start, a = d.end, a === void 0 && (a = b), "selectionStart" in c)
            c.selectionStart = b, c.selectionEnd = Math.min(a, c.value.length);
          else if (a = (b = c.ownerDocument || document) && b.defaultView || window, a.getSelection) {
            a = a.getSelection();
            var e = c.textContent.length, f = Math.min(d.start, e);
            d = d.end === void 0 ? f : Math.min(d.end, e), !a.extend && f > d && (e = d, d = f, f = e), e = Ke(c, f);
            var g = Ke(
              c,
              d
            );
            e && g && (a.rangeCount !== 1 || a.anchorNode !== e.node || a.anchorOffset !== e.offset || a.focusNode !== g.node || a.focusOffset !== g.offset) && (b = b.createRange(), b.setStart(e.node, e.offset), a.removeAllRanges(), f > d ? (a.addRange(b), a.extend(g.node, g.offset)) : (b.setEnd(g.node, g.offset), a.addRange(b)));
          }
        }
        for (b = [], a = c; a = a.parentNode; )
          a.nodeType === 1 && b.push({ element: a, left: a.scrollLeft, top: a.scrollTop });
        for (typeof c.focus == "function" && c.focus(), c = 0; c < b.length; c++)
          a = b[c], a.element.scrollLeft = a.left, a.element.scrollTop = a.top;
      }
    }
    var Pe = ia && "documentMode" in document && 11 >= document.documentMode, Qe = null, Re = null, Se = null, Te = !1;
    function Ue(a, b, c) {
      var d = c.window === c ? c.document : c.nodeType === 9 ? c : c.ownerDocument;
      Te || Qe == null || Qe !== Xa(d) || (d = Qe, "selectionStart" in d && Ne(d) ? d = { start: d.selectionStart, end: d.selectionEnd } : (d = (d.ownerDocument && d.ownerDocument.defaultView || window).getSelection(), d = { anchorNode: d.anchorNode, anchorOffset: d.anchorOffset, focusNode: d.focusNode, focusOffset: d.focusOffset }), Se && Ie(Se, d) || (Se = d, d = oe(Re, "onSelect"), 0 < d.length && (b = new td("onSelect", "select", null, b, c), a.push({ event: b, listeners: d }), b.target = Qe)));
    }
    function Ve(a, b) {
      var c = {};
      return c[a.toLowerCase()] = b.toLowerCase(), c["Webkit" + a] = "webkit" + b, c["Moz" + a] = "moz" + b, c;
    }
    var We = { animationend: Ve("Animation", "AnimationEnd"), animationiteration: Ve("Animation", "AnimationIteration"), animationstart: Ve("Animation", "AnimationStart"), transitionend: Ve("Transition", "TransitionEnd") }, Xe = {}, Ye = {};
    ia && (Ye = document.createElement("div").style, "AnimationEvent" in window || (delete We.animationend.animation, delete We.animationiteration.animation, delete We.animationstart.animation), "TransitionEvent" in window || delete We.transitionend.transition);
    function Ze(a) {
      if (Xe[a])
        return Xe[a];
      if (!We[a])
        return a;
      var b = We[a], c;
      for (c in b)
        if (b.hasOwnProperty(c) && c in Ye)
          return Xe[a] = b[c];
      return a;
    }
    var $e = Ze("animationend"), af = Ze("animationiteration"), bf = Ze("animationstart"), cf = Ze("transitionend"), df = /* @__PURE__ */ new Map(), ef = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
    function ff(a, b) {
      df.set(a, b), fa(b, [a]);
    }
    for (gf = 0; gf < ef.length; gf++)
      hf = ef[gf], jf = hf.toLowerCase(), kf = hf[0].toUpperCase() + hf.slice(1), ff(jf, "on" + kf);
    var hf, jf, kf, gf;
    ff($e, "onAnimationEnd");
    ff(af, "onAnimationIteration");
    ff(bf, "onAnimationStart");
    ff("dblclick", "onDoubleClick");
    ff("focusin", "onFocus");
    ff("focusout", "onBlur");
    ff(cf, "onTransitionEnd");
    ha("onMouseEnter", ["mouseout", "mouseover"]);
    ha("onMouseLeave", ["mouseout", "mouseover"]);
    ha("onPointerEnter", ["pointerout", "pointerover"]);
    ha("onPointerLeave", ["pointerout", "pointerover"]);
    fa("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
    fa("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
    fa("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
    fa("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
    fa("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
    fa("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
    var lf = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "), mf = new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));
    function nf(a, b, c) {
      var d = a.type || "unknown-event";
      a.currentTarget = c, Ub(d, b, void 0, a), a.currentTarget = null;
    }
    function se(a, b) {
      b = (b & 4) !== 0;
      for (var c = 0; c < a.length; c++) {
        var d = a[c], e = d.event;
        d = d.listeners;
        a: {
          var f = void 0;
          if (b)
            for (var g = d.length - 1; 0 <= g; g--) {
              var h = d[g], k = h.instance, l = h.currentTarget;
              if (h = h.listener, k !== f && e.isPropagationStopped())
                break a;
              nf(e, h, l), f = k;
            }
          else
            for (g = 0; g < d.length; g++) {
              if (h = d[g], k = h.instance, l = h.currentTarget, h = h.listener, k !== f && e.isPropagationStopped())
                break a;
              nf(e, h, l), f = k;
            }
        }
      }
      if (Qb)
        throw a = Rb, Qb = !1, Rb = null, a;
    }
    function D(a, b) {
      var c = b[of];
      c === void 0 && (c = b[of] = /* @__PURE__ */ new Set());
      var d = a + "__bubble";
      c.has(d) || (pf(b, a, 2, !1), c.add(d));
    }
    function qf(a, b, c) {
      var d = 0;
      b && (d |= 4), pf(c, a, d, b);
    }
    var rf = "_reactListening" + Math.random().toString(36).slice(2);
    function sf(a) {
      if (!a[rf]) {
        a[rf] = !0, da.forEach(function(b2) {
          b2 !== "selectionchange" && (mf.has(b2) || qf(b2, !1, a), qf(b2, !0, a));
        });
        var b = a.nodeType === 9 ? a : a.ownerDocument;
        b === null || b[rf] || (b[rf] = !0, qf("selectionchange", !1, b));
      }
    }
    function pf(a, b, c, d) {
      switch (jd(b)) {
        case 1:
          var e = ed;
          break;
        case 4:
          e = gd;
          break;
        default:
          e = fd;
      }
      c = e.bind(null, b, c, a), e = void 0, !Lb || b !== "touchstart" && b !== "touchmove" && b !== "wheel" || (e = !0), d ? e !== void 0 ? a.addEventListener(b, c, { capture: !0, passive: e }) : a.addEventListener(b, c, !0) : e !== void 0 ? a.addEventListener(b, c, { passive: e }) : a.addEventListener(b, c, !1);
    }
    function hd(a, b, c, d, e) {
      var f = d;
      if (!(b & 1) && !(b & 2) && d !== null)
        a:
          for (; ; ) {
            if (d === null)
              return;
            var g = d.tag;
            if (g === 3 || g === 4) {
              var h = d.stateNode.containerInfo;
              if (h === e || h.nodeType === 8 && h.parentNode === e)
                break;
              if (g === 4)
                for (g = d.return; g !== null; ) {
                  var k = g.tag;
                  if ((k === 3 || k === 4) && (k = g.stateNode.containerInfo, k === e || k.nodeType === 8 && k.parentNode === e))
                    return;
                  g = g.return;
                }
              for (; h !== null; ) {
                if (g = Wc(h), g === null)
                  return;
                if (k = g.tag, k === 5 || k === 6) {
                  d = f = g;
                  continue a;
                }
                h = h.parentNode;
              }
            }
            d = d.return;
          }
      Jb(function() {
        var d2 = f, e2 = xb(c), g2 = [];
        a: {
          var h2 = df.get(a);
          if (h2 !== void 0) {
            var k2 = td, n = a;
            switch (a) {
              case "keypress":
                if (od(c) === 0)
                  break a;
              case "keydown":
              case "keyup":
                k2 = Rd;
                break;
              case "focusin":
                n = "focus", k2 = Fd;
                break;
              case "focusout":
                n = "blur", k2 = Fd;
                break;
              case "beforeblur":
              case "afterblur":
                k2 = Fd;
                break;
              case "click":
                if (c.button === 2)
                  break a;
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                k2 = Bd;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                k2 = Dd;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                k2 = Vd;
                break;
              case $e:
              case af:
              case bf:
                k2 = Hd;
                break;
              case cf:
                k2 = Xd;
                break;
              case "scroll":
                k2 = vd;
                break;
              case "wheel":
                k2 = Zd;
                break;
              case "copy":
              case "cut":
              case "paste":
                k2 = Jd;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                k2 = Td;
            }
            var t = (b & 4) !== 0, J = !t && a === "scroll", x = t ? h2 !== null ? h2 + "Capture" : null : h2;
            t = [];
            for (var w = d2, u; w !== null; ) {
              u = w;
              var F = u.stateNode;
              if (u.tag === 5 && F !== null && (u = F, x !== null && (F = Kb(w, x), F != null && t.push(tf(w, F, u)))), J)
                break;
              w = w.return;
            }
            0 < t.length && (h2 = new k2(h2, n, null, c, e2), g2.push({ event: h2, listeners: t }));
          }
        }
        if (!(b & 7)) {
          a: {
            if (h2 = a === "mouseover" || a === "pointerover", k2 = a === "mouseout" || a === "pointerout", h2 && c !== wb && (n = c.relatedTarget || c.fromElement) && (Wc(n) || n[uf]))
              break a;
            if ((k2 || h2) && (h2 = e2.window === e2 ? e2 : (h2 = e2.ownerDocument) ? h2.defaultView || h2.parentWindow : window, k2 ? (n = c.relatedTarget || c.toElement, k2 = d2, n = n ? Wc(n) : null, n !== null && (J = Vb(n), n !== J || n.tag !== 5 && n.tag !== 6) && (n = null)) : (k2 = null, n = d2), k2 !== n)) {
              if (t = Bd, F = "onMouseLeave", x = "onMouseEnter", w = "mouse", (a === "pointerout" || a === "pointerover") && (t = Td, F = "onPointerLeave", x = "onPointerEnter", w = "pointer"), J = k2 == null ? h2 : ue(k2), u = n == null ? h2 : ue(n), h2 = new t(F, w + "leave", k2, c, e2), h2.target = J, h2.relatedTarget = u, F = null, Wc(e2) === d2 && (t = new t(x, w + "enter", n, c, e2), t.target = u, t.relatedTarget = J, F = t), J = F, k2 && n)
                b: {
                  for (t = k2, x = n, w = 0, u = t; u; u = vf(u))
                    w++;
                  for (u = 0, F = x; F; F = vf(F))
                    u++;
                  for (; 0 < w - u; )
                    t = vf(t), w--;
                  for (; 0 < u - w; )
                    x = vf(x), u--;
                  for (; w--; ) {
                    if (t === x || x !== null && t === x.alternate)
                      break b;
                    t = vf(t), x = vf(x);
                  }
                  t = null;
                }
              else
                t = null;
              k2 !== null && wf(g2, h2, k2, t, !1), n !== null && J !== null && wf(g2, J, n, t, !0);
            }
          }
          a: {
            if (h2 = d2 ? ue(d2) : window, k2 = h2.nodeName && h2.nodeName.toLowerCase(), k2 === "select" || k2 === "input" && h2.type === "file")
              var na = ve;
            else if (me(h2))
              if (we)
                na = Fe;
              else {
                na = De;
                var xa = Ce;
              }
            else
              (k2 = h2.nodeName) && k2.toLowerCase() === "input" && (h2.type === "checkbox" || h2.type === "radio") && (na = Ee);
            if (na && (na = na(a, d2))) {
              ne(g2, na, c, e2);
              break a;
            }
            xa && xa(a, h2, d2), a === "focusout" && (xa = h2._wrapperState) && xa.controlled && h2.type === "number" && cb(h2, "number", h2.value);
          }
          switch (xa = d2 ? ue(d2) : window, a) {
            case "focusin":
              (me(xa) || xa.contentEditable === "true") && (Qe = xa, Re = d2, Se = null);
              break;
            case "focusout":
              Se = Re = Qe = null;
              break;
            case "mousedown":
              Te = !0;
              break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
              Te = !1, Ue(g2, c, e2);
              break;
            case "selectionchange":
              if (Pe)
                break;
            case "keydown":
            case "keyup":
              Ue(g2, c, e2);
          }
          var $a;
          if (ae)
            b: {
              switch (a) {
                case "compositionstart":
                  var ba = "onCompositionStart";
                  break b;
                case "compositionend":
                  ba = "onCompositionEnd";
                  break b;
                case "compositionupdate":
                  ba = "onCompositionUpdate";
                  break b;
              }
              ba = void 0;
            }
          else
            ie ? ge(a, c) && (ba = "onCompositionEnd") : a === "keydown" && c.keyCode === 229 && (ba = "onCompositionStart");
          ba && (de && c.locale !== "ko" && (ie || ba !== "onCompositionStart" ? ba === "onCompositionEnd" && ie && ($a = nd()) : (kd = e2, ld = "value" in kd ? kd.value : kd.textContent, ie = !0)), xa = oe(d2, ba), 0 < xa.length && (ba = new Ld(ba, a, null, c, e2), g2.push({ event: ba, listeners: xa }), $a ? ba.data = $a : ($a = he(c), $a !== null && (ba.data = $a)))), ($a = ce ? je(a, c) : ke(a, c)) && (d2 = oe(d2, "onBeforeInput"), 0 < d2.length && (e2 = new Ld("onBeforeInput", "beforeinput", null, c, e2), g2.push({ event: e2, listeners: d2 }), e2.data = $a));
        }
        se(g2, b);
      });
    }
    function tf(a, b, c) {
      return { instance: a, listener: b, currentTarget: c };
    }
    function oe(a, b) {
      for (var c = b + "Capture", d = []; a !== null; ) {
        var e = a, f = e.stateNode;
        e.tag === 5 && f !== null && (e = f, f = Kb(a, c), f != null && d.unshift(tf(a, f, e)), f = Kb(a, b), f != null && d.push(tf(a, f, e))), a = a.return;
      }
      return d;
    }
    function vf(a) {
      if (a === null)
        return null;
      do
        a = a.return;
      while (a && a.tag !== 5);
      return a || null;
    }
    function wf(a, b, c, d, e) {
      for (var f = b._reactName, g = []; c !== null && c !== d; ) {
        var h = c, k = h.alternate, l = h.stateNode;
        if (k !== null && k === d)
          break;
        h.tag === 5 && l !== null && (h = l, e ? (k = Kb(c, f), k != null && g.unshift(tf(c, k, h))) : e || (k = Kb(c, f), k != null && g.push(tf(c, k, h)))), c = c.return;
      }
      g.length !== 0 && a.push({ event: b, listeners: g });
    }
    var xf = /\r\n?/g, yf = /\u0000|\uFFFD/g;
    function zf(a) {
      return (typeof a == "string" ? a : "" + a).replace(xf, `
`).replace(yf, "");
    }
    function Af(a, b, c) {
      if (b = zf(b), zf(a) !== b && c)
        throw Error(p(425));
    }
    function Bf() {
    }
    var Cf = null, Df = null;
    function Ef(a, b) {
      return a === "textarea" || a === "noscript" || typeof b.children == "string" || typeof b.children == "number" || typeof b.dangerouslySetInnerHTML == "object" && b.dangerouslySetInnerHTML !== null && b.dangerouslySetInnerHTML.__html != null;
    }
    var Ff = typeof setTimeout == "function" ? setTimeout : void 0, Gf = typeof clearTimeout == "function" ? clearTimeout : void 0, Hf = typeof Promise == "function" ? Promise : void 0, Jf = typeof queueMicrotask == "function" ? queueMicrotask : typeof Hf < "u" ? function(a) {
      return Hf.resolve(null).then(a).catch(If);
    } : Ff;
    function If(a) {
      setTimeout(function() {
        throw a;
      });
    }
    function Kf(a, b) {
      var c = b, d = 0;
      do {
        var e = c.nextSibling;
        if (a.removeChild(c), e && e.nodeType === 8)
          if (c = e.data, c === "/$") {
            if (d === 0) {
              a.removeChild(e), bd(b);
              return;
            }
            d--;
          } else
            c !== "$" && c !== "$?" && c !== "$!" || d++;
        c = e;
      } while (c);
      bd(b);
    }
    function Lf(a) {
      for (; a != null; a = a.nextSibling) {
        var b = a.nodeType;
        if (b === 1 || b === 3)
          break;
        if (b === 8) {
          if (b = a.data, b === "$" || b === "$!" || b === "$?")
            break;
          if (b === "/$")
            return null;
        }
      }
      return a;
    }
    function Mf(a) {
      a = a.previousSibling;
      for (var b = 0; a; ) {
        if (a.nodeType === 8) {
          var c = a.data;
          if (c === "$" || c === "$!" || c === "$?") {
            if (b === 0)
              return a;
            b--;
          } else
            c === "/$" && b++;
        }
        a = a.previousSibling;
      }
      return null;
    }
    var Nf = Math.random().toString(36).slice(2), Of = "__reactFiber$" + Nf, Pf = "__reactProps$" + Nf, uf = "__reactContainer$" + Nf, of = "__reactEvents$" + Nf, Qf = "__reactListeners$" + Nf, Rf = "__reactHandles$" + Nf;
    function Wc(a) {
      var b = a[Of];
      if (b)
        return b;
      for (var c = a.parentNode; c; ) {
        if (b = c[uf] || c[Of]) {
          if (c = b.alternate, b.child !== null || c !== null && c.child !== null)
            for (a = Mf(a); a !== null; ) {
              if (c = a[Of])
                return c;
              a = Mf(a);
            }
          return b;
        }
        a = c, c = a.parentNode;
      }
      return null;
    }
    function Cb(a) {
      return a = a[Of] || a[uf], !a || a.tag !== 5 && a.tag !== 6 && a.tag !== 13 && a.tag !== 3 ? null : a;
    }
    function ue(a) {
      if (a.tag === 5 || a.tag === 6)
        return a.stateNode;
      throw Error(p(33));
    }
    function Db(a) {
      return a[Pf] || null;
    }
    var Sf = [], Tf = -1;
    function Uf(a) {
      return { current: a };
    }
    function E(a) {
      0 > Tf || (a.current = Sf[Tf], Sf[Tf] = null, Tf--);
    }
    function G(a, b) {
      Tf++, Sf[Tf] = a.current, a.current = b;
    }
    var Vf = {}, H = Uf(Vf), Wf = Uf(!1), Xf = Vf;
    function Yf(a, b) {
      var c = a.type.contextTypes;
      if (!c)
        return Vf;
      var d = a.stateNode;
      if (d && d.__reactInternalMemoizedUnmaskedChildContext === b)
        return d.__reactInternalMemoizedMaskedChildContext;
      var e = {}, f;
      for (f in c)
        e[f] = b[f];
      return d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e), e;
    }
    function Zf(a) {
      return a = a.childContextTypes, a != null;
    }
    function $f() {
      E(Wf), E(H);
    }
    function ag(a, b, c) {
      if (H.current !== Vf)
        throw Error(p(168));
      G(H, b), G(Wf, c);
    }
    function bg(a, b, c) {
      var d = a.stateNode;
      if (b = b.childContextTypes, typeof d.getChildContext != "function")
        return c;
      d = d.getChildContext();
      for (var e in d)
        if (!(e in b))
          throw Error(p(108, Ra(a) || "Unknown", e));
      return A({}, c, d);
    }
    function cg(a) {
      return a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Vf, Xf = H.current, G(H, a), G(Wf, Wf.current), !0;
    }
    function dg(a, b, c) {
      var d = a.stateNode;
      if (!d)
        throw Error(p(169));
      c ? (a = bg(a, b, Xf), d.__reactInternalMemoizedMergedChildContext = a, E(Wf), E(H), G(H, a)) : E(Wf), G(Wf, c);
    }
    var eg = null, fg = !1, gg = !1;
    function hg(a) {
      eg === null ? eg = [a] : eg.push(a);
    }
    function ig(a) {
      fg = !0, hg(a);
    }
    function jg() {
      if (!gg && eg !== null) {
        gg = !0;
        var a = 0, b = C;
        try {
          var c = eg;
          for (C = 1; a < c.length; a++) {
            var d = c[a];
            do
              d = d(!0);
            while (d !== null);
          }
          eg = null, fg = !1;
        } catch (e) {
          throw eg !== null && (eg = eg.slice(a + 1)), ac(fc, jg), e;
        } finally {
          C = b, gg = !1;
        }
      }
      return null;
    }
    var kg = [], lg = 0, mg = null, ng = 0, og = [], pg = 0, qg = null, rg = 1, sg = "";
    function tg(a, b) {
      kg[lg++] = ng, kg[lg++] = mg, mg = a, ng = b;
    }
    function ug(a, b, c) {
      og[pg++] = rg, og[pg++] = sg, og[pg++] = qg, qg = a;
      var d = rg;
      a = sg;
      var e = 32 - oc(d) - 1;
      d &= ~(1 << e), c += 1;
      var f = 32 - oc(b) + e;
      if (30 < f) {
        var g = e - e % 5;
        f = (d & (1 << g) - 1).toString(32), d >>= g, e -= g, rg = 1 << 32 - oc(b) + e | c << e | d, sg = f + a;
      } else
        rg = 1 << f | c << e | d, sg = a;
    }
    function vg(a) {
      a.return !== null && (tg(a, 1), ug(a, 1, 0));
    }
    function wg(a) {
      for (; a === mg; )
        mg = kg[--lg], kg[lg] = null, ng = kg[--lg], kg[lg] = null;
      for (; a === qg; )
        qg = og[--pg], og[pg] = null, sg = og[--pg], og[pg] = null, rg = og[--pg], og[pg] = null;
    }
    var xg = null, yg = null, I = !1, zg = null;
    function Ag(a, b) {
      var c = Bg(5, null, null, 0);
      c.elementType = "DELETED", c.stateNode = b, c.return = a, b = a.deletions, b === null ? (a.deletions = [c], a.flags |= 16) : b.push(c);
    }
    function Cg(a, b) {
      switch (a.tag) {
        case 5:
          var c = a.type;
          return b = b.nodeType !== 1 || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b, b !== null ? (a.stateNode = b, xg = a, yg = Lf(b.firstChild), !0) : !1;
        case 6:
          return b = a.pendingProps === "" || b.nodeType !== 3 ? null : b, b !== null ? (a.stateNode = b, xg = a, yg = null, !0) : !1;
        case 13:
          return b = b.nodeType !== 8 ? null : b, b !== null ? (c = qg !== null ? { id: rg, overflow: sg } : null, a.memoizedState = { dehydrated: b, treeContext: c, retryLane: 1073741824 }, c = Bg(18, null, null, 0), c.stateNode = b, c.return = a, a.child = c, xg = a, yg = null, !0) : !1;
        default:
          return !1;
      }
    }
    function Dg(a) {
      return (a.mode & 1) !== 0 && (a.flags & 128) === 0;
    }
    function Eg(a) {
      if (I) {
        var b = yg;
        if (b) {
          var c = b;
          if (!Cg(a, b)) {
            if (Dg(a))
              throw Error(p(418));
            b = Lf(c.nextSibling);
            var d = xg;
            b && Cg(a, b) ? Ag(d, c) : (a.flags = a.flags & -4097 | 2, I = !1, xg = a);
          }
        } else {
          if (Dg(a))
            throw Error(p(418));
          a.flags = a.flags & -4097 | 2, I = !1, xg = a;
        }
      }
    }
    function Fg(a) {
      for (a = a.return; a !== null && a.tag !== 5 && a.tag !== 3 && a.tag !== 13; )
        a = a.return;
      xg = a;
    }
    function Gg(a) {
      if (a !== xg)
        return !1;
      if (!I)
        return Fg(a), I = !0, !1;
      var b;
      if ((b = a.tag !== 3) && !(b = a.tag !== 5) && (b = a.type, b = b !== "head" && b !== "body" && !Ef(a.type, a.memoizedProps)), b && (b = yg)) {
        if (Dg(a))
          throw Hg(), Error(p(418));
        for (; b; )
          Ag(a, b), b = Lf(b.nextSibling);
      }
      if (Fg(a), a.tag === 13) {
        if (a = a.memoizedState, a = a !== null ? a.dehydrated : null, !a)
          throw Error(p(317));
        a: {
          for (a = a.nextSibling, b = 0; a; ) {
            if (a.nodeType === 8) {
              var c = a.data;
              if (c === "/$") {
                if (b === 0) {
                  yg = Lf(a.nextSibling);
                  break a;
                }
                b--;
              } else
                c !== "$" && c !== "$!" && c !== "$?" || b++;
            }
            a = a.nextSibling;
          }
          yg = null;
        }
      } else
        yg = xg ? Lf(a.stateNode.nextSibling) : null;
      return !0;
    }
    function Hg() {
      for (var a = yg; a; )
        a = Lf(a.nextSibling);
    }
    function Ig() {
      yg = xg = null, I = !1;
    }
    function Jg(a) {
      zg === null ? zg = [a] : zg.push(a);
    }
    var Kg = ua.ReactCurrentBatchConfig;
    function Lg(a, b, c) {
      if (a = c.ref, a !== null && typeof a != "function" && typeof a != "object") {
        if (c._owner) {
          if (c = c._owner, c) {
            if (c.tag !== 1)
              throw Error(p(309));
            var d = c.stateNode;
          }
          if (!d)
            throw Error(p(147, a));
          var e = d, f = "" + a;
          return b !== null && b.ref !== null && typeof b.ref == "function" && b.ref._stringRef === f ? b.ref : (b = function(a2) {
            var b2 = e.refs;
            a2 === null ? delete b2[f] : b2[f] = a2;
          }, b._stringRef = f, b);
        }
        if (typeof a != "string")
          throw Error(p(284));
        if (!c._owner)
          throw Error(p(290, a));
      }
      return a;
    }
    function Mg(a, b) {
      throw a = Object.prototype.toString.call(b), Error(p(31, a === "[object Object]" ? "object with keys {" + Object.keys(b).join(", ") + "}" : a));
    }
    function Ng(a) {
      var b = a._init;
      return b(a._payload);
    }
    function Og(a) {
      function b(b2, c2) {
        if (a) {
          var d2 = b2.deletions;
          d2 === null ? (b2.deletions = [c2], b2.flags |= 16) : d2.push(c2);
        }
      }
      function c(c2, d2) {
        if (!a)
          return null;
        for (; d2 !== null; )
          b(c2, d2), d2 = d2.sibling;
        return null;
      }
      function d(a2, b2) {
        for (a2 = /* @__PURE__ */ new Map(); b2 !== null; )
          b2.key !== null ? a2.set(b2.key, b2) : a2.set(b2.index, b2), b2 = b2.sibling;
        return a2;
      }
      function e(a2, b2) {
        return a2 = Pg(a2, b2), a2.index = 0, a2.sibling = null, a2;
      }
      function f(b2, c2, d2) {
        return b2.index = d2, a ? (d2 = b2.alternate, d2 !== null ? (d2 = d2.index, d2 < c2 ? (b2.flags |= 2, c2) : d2) : (b2.flags |= 2, c2)) : (b2.flags |= 1048576, c2);
      }
      function g(b2) {
        return a && b2.alternate === null && (b2.flags |= 2), b2;
      }
      function h(a2, b2, c2, d2) {
        return b2 === null || b2.tag !== 6 ? (b2 = Qg(c2, a2.mode, d2), b2.return = a2, b2) : (b2 = e(b2, c2), b2.return = a2, b2);
      }
      function k(a2, b2, c2, d2) {
        var f2 = c2.type;
        return f2 === ya ? m(a2, b2, c2.props.children, d2, c2.key) : b2 !== null && (b2.elementType === f2 || typeof f2 == "object" && f2 !== null && f2.$$typeof === Ha && Ng(f2) === b2.type) ? (d2 = e(b2, c2.props), d2.ref = Lg(a2, b2, c2), d2.return = a2, d2) : (d2 = Rg(c2.type, c2.key, c2.props, null, a2.mode, d2), d2.ref = Lg(a2, b2, c2), d2.return = a2, d2);
      }
      function l(a2, b2, c2, d2) {
        return b2 === null || b2.tag !== 4 || b2.stateNode.containerInfo !== c2.containerInfo || b2.stateNode.implementation !== c2.implementation ? (b2 = Sg(c2, a2.mode, d2), b2.return = a2, b2) : (b2 = e(b2, c2.children || []), b2.return = a2, b2);
      }
      function m(a2, b2, c2, d2, f2) {
        return b2 === null || b2.tag !== 7 ? (b2 = Tg(c2, a2.mode, d2, f2), b2.return = a2, b2) : (b2 = e(b2, c2), b2.return = a2, b2);
      }
      function q(a2, b2, c2) {
        if (typeof b2 == "string" && b2 !== "" || typeof b2 == "number")
          return b2 = Qg("" + b2, a2.mode, c2), b2.return = a2, b2;
        if (typeof b2 == "object" && b2 !== null) {
          switch (b2.$$typeof) {
            case va:
              return c2 = Rg(b2.type, b2.key, b2.props, null, a2.mode, c2), c2.ref = Lg(a2, null, b2), c2.return = a2, c2;
            case wa:
              return b2 = Sg(b2, a2.mode, c2), b2.return = a2, b2;
            case Ha:
              var d2 = b2._init;
              return q(a2, d2(b2._payload), c2);
          }
          if (eb(b2) || Ka(b2))
            return b2 = Tg(b2, a2.mode, c2, null), b2.return = a2, b2;
          Mg(a2, b2);
        }
        return null;
      }
      function r(a2, b2, c2, d2) {
        var e2 = b2 !== null ? b2.key : null;
        if (typeof c2 == "string" && c2 !== "" || typeof c2 == "number")
          return e2 !== null ? null : h(a2, b2, "" + c2, d2);
        if (typeof c2 == "object" && c2 !== null) {
          switch (c2.$$typeof) {
            case va:
              return c2.key === e2 ? k(a2, b2, c2, d2) : null;
            case wa:
              return c2.key === e2 ? l(a2, b2, c2, d2) : null;
            case Ha:
              return e2 = c2._init, r(
                a2,
                b2,
                e2(c2._payload),
                d2
              );
          }
          if (eb(c2) || Ka(c2))
            return e2 !== null ? null : m(a2, b2, c2, d2, null);
          Mg(a2, c2);
        }
        return null;
      }
      function y(a2, b2, c2, d2, e2) {
        if (typeof d2 == "string" && d2 !== "" || typeof d2 == "number")
          return a2 = a2.get(c2) || null, h(b2, a2, "" + d2, e2);
        if (typeof d2 == "object" && d2 !== null) {
          switch (d2.$$typeof) {
            case va:
              return a2 = a2.get(d2.key === null ? c2 : d2.key) || null, k(b2, a2, d2, e2);
            case wa:
              return a2 = a2.get(d2.key === null ? c2 : d2.key) || null, l(b2, a2, d2, e2);
            case Ha:
              var f2 = d2._init;
              return y(a2, b2, c2, f2(d2._payload), e2);
          }
          if (eb(d2) || Ka(d2))
            return a2 = a2.get(c2) || null, m(b2, a2, d2, e2, null);
          Mg(b2, d2);
        }
        return null;
      }
      function n(e2, g2, h2, k2) {
        for (var l2 = null, m2 = null, u = g2, w = g2 = 0, x = null; u !== null && w < h2.length; w++) {
          u.index > w ? (x = u, u = null) : x = u.sibling;
          var n2 = r(e2, u, h2[w], k2);
          if (n2 === null) {
            u === null && (u = x);
            break;
          }
          a && u && n2.alternate === null && b(e2, u), g2 = f(n2, g2, w), m2 === null ? l2 = n2 : m2.sibling = n2, m2 = n2, u = x;
        }
        if (w === h2.length)
          return c(e2, u), I && tg(e2, w), l2;
        if (u === null) {
          for (; w < h2.length; w++)
            u = q(e2, h2[w], k2), u !== null && (g2 = f(u, g2, w), m2 === null ? l2 = u : m2.sibling = u, m2 = u);
          return I && tg(e2, w), l2;
        }
        for (u = d(e2, u); w < h2.length; w++)
          x = y(u, e2, w, h2[w], k2), x !== null && (a && x.alternate !== null && u.delete(x.key === null ? w : x.key), g2 = f(x, g2, w), m2 === null ? l2 = x : m2.sibling = x, m2 = x);
        return a && u.forEach(function(a2) {
          return b(e2, a2);
        }), I && tg(e2, w), l2;
      }
      function t(e2, g2, h2, k2) {
        var l2 = Ka(h2);
        if (typeof l2 != "function")
          throw Error(p(150));
        if (h2 = l2.call(h2), h2 == null)
          throw Error(p(151));
        for (var u = l2 = null, m2 = g2, w = g2 = 0, x = null, n2 = h2.next(); m2 !== null && !n2.done; w++, n2 = h2.next()) {
          m2.index > w ? (x = m2, m2 = null) : x = m2.sibling;
          var t2 = r(e2, m2, n2.value, k2);
          if (t2 === null) {
            m2 === null && (m2 = x);
            break;
          }
          a && m2 && t2.alternate === null && b(e2, m2), g2 = f(t2, g2, w), u === null ? l2 = t2 : u.sibling = t2, u = t2, m2 = x;
        }
        if (n2.done)
          return c(
            e2,
            m2
          ), I && tg(e2, w), l2;
        if (m2 === null) {
          for (; !n2.done; w++, n2 = h2.next())
            n2 = q(e2, n2.value, k2), n2 !== null && (g2 = f(n2, g2, w), u === null ? l2 = n2 : u.sibling = n2, u = n2);
          return I && tg(e2, w), l2;
        }
        for (m2 = d(e2, m2); !n2.done; w++, n2 = h2.next())
          n2 = y(m2, e2, w, n2.value, k2), n2 !== null && (a && n2.alternate !== null && m2.delete(n2.key === null ? w : n2.key), g2 = f(n2, g2, w), u === null ? l2 = n2 : u.sibling = n2, u = n2);
        return a && m2.forEach(function(a2) {
          return b(e2, a2);
        }), I && tg(e2, w), l2;
      }
      function J(a2, d2, f2, h2) {
        if (typeof f2 == "object" && f2 !== null && f2.type === ya && f2.key === null && (f2 = f2.props.children), typeof f2 == "object" && f2 !== null) {
          switch (f2.$$typeof) {
            case va:
              a: {
                for (var k2 = f2.key, l2 = d2; l2 !== null; ) {
                  if (l2.key === k2) {
                    if (k2 = f2.type, k2 === ya) {
                      if (l2.tag === 7) {
                        c(a2, l2.sibling), d2 = e(l2, f2.props.children), d2.return = a2, a2 = d2;
                        break a;
                      }
                    } else if (l2.elementType === k2 || typeof k2 == "object" && k2 !== null && k2.$$typeof === Ha && Ng(k2) === l2.type) {
                      c(a2, l2.sibling), d2 = e(l2, f2.props), d2.ref = Lg(a2, l2, f2), d2.return = a2, a2 = d2;
                      break a;
                    }
                    c(a2, l2);
                    break;
                  } else
                    b(a2, l2);
                  l2 = l2.sibling;
                }
                f2.type === ya ? (d2 = Tg(f2.props.children, a2.mode, h2, f2.key), d2.return = a2, a2 = d2) : (h2 = Rg(f2.type, f2.key, f2.props, null, a2.mode, h2), h2.ref = Lg(a2, d2, f2), h2.return = a2, a2 = h2);
              }
              return g(a2);
            case wa:
              a: {
                for (l2 = f2.key; d2 !== null; ) {
                  if (d2.key === l2)
                    if (d2.tag === 4 && d2.stateNode.containerInfo === f2.containerInfo && d2.stateNode.implementation === f2.implementation) {
                      c(a2, d2.sibling), d2 = e(d2, f2.children || []), d2.return = a2, a2 = d2;
                      break a;
                    } else {
                      c(a2, d2);
                      break;
                    }
                  else
                    b(a2, d2);
                  d2 = d2.sibling;
                }
                d2 = Sg(f2, a2.mode, h2), d2.return = a2, a2 = d2;
              }
              return g(a2);
            case Ha:
              return l2 = f2._init, J(a2, d2, l2(f2._payload), h2);
          }
          if (eb(f2))
            return n(a2, d2, f2, h2);
          if (Ka(f2))
            return t(a2, d2, f2, h2);
          Mg(a2, f2);
        }
        return typeof f2 == "string" && f2 !== "" || typeof f2 == "number" ? (f2 = "" + f2, d2 !== null && d2.tag === 6 ? (c(a2, d2.sibling), d2 = e(d2, f2), d2.return = a2, a2 = d2) : (c(a2, d2), d2 = Qg(f2, a2.mode, h2), d2.return = a2, a2 = d2), g(a2)) : c(a2, d2);
      }
      return J;
    }
    var Ug = Og(!0), Vg = Og(!1), Wg = Uf(null), Xg = null, Yg = null, Zg = null;
    function $g() {
      Zg = Yg = Xg = null;
    }
    function ah(a) {
      var b = Wg.current;
      E(Wg), a._currentValue = b;
    }
    function bh(a, b, c) {
      for (; a !== null; ) {
        var d = a.alternate;
        if ((a.childLanes & b) !== b ? (a.childLanes |= b, d !== null && (d.childLanes |= b)) : d !== null && (d.childLanes & b) !== b && (d.childLanes |= b), a === c)
          break;
        a = a.return;
      }
    }
    function ch(a, b) {
      Xg = a, Zg = Yg = null, a = a.dependencies, a !== null && a.firstContext !== null && (a.lanes & b && (dh = !0), a.firstContext = null);
    }
    function eh(a) {
      var b = a._currentValue;
      if (Zg !== a)
        if (a = { context: a, memoizedValue: b, next: null }, Yg === null) {
          if (Xg === null)
            throw Error(p(308));
          Yg = a, Xg.dependencies = { lanes: 0, firstContext: a };
        } else
          Yg = Yg.next = a;
      return b;
    }
    var fh = null;
    function gh(a) {
      fh === null ? fh = [a] : fh.push(a);
    }
    function hh(a, b, c, d) {
      var e = b.interleaved;
      return e === null ? (c.next = c, gh(b)) : (c.next = e.next, e.next = c), b.interleaved = c, ih(a, d);
    }
    function ih(a, b) {
      a.lanes |= b;
      var c = a.alternate;
      for (c !== null && (c.lanes |= b), c = a, a = a.return; a !== null; )
        a.childLanes |= b, c = a.alternate, c !== null && (c.childLanes |= b), c = a, a = a.return;
      return c.tag === 3 ? c.stateNode : null;
    }
    var jh = !1;
    function kh(a) {
      a.updateQueue = { baseState: a.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: 0 }, effects: null };
    }
    function lh(a, b) {
      a = a.updateQueue, b.updateQueue === a && (b.updateQueue = { baseState: a.baseState, firstBaseUpdate: a.firstBaseUpdate, lastBaseUpdate: a.lastBaseUpdate, shared: a.shared, effects: a.effects });
    }
    function mh(a, b) {
      return { eventTime: a, lane: b, tag: 0, payload: null, callback: null, next: null };
    }
    function nh(a, b, c) {
      var d = a.updateQueue;
      if (d === null)
        return null;
      if (d = d.shared, K & 2) {
        var e = d.pending;
        return e === null ? b.next = b : (b.next = e.next, e.next = b), d.pending = b, ih(a, c);
      }
      return e = d.interleaved, e === null ? (b.next = b, gh(d)) : (b.next = e.next, e.next = b), d.interleaved = b, ih(a, c);
    }
    function oh(a, b, c) {
      if (b = b.updateQueue, b !== null && (b = b.shared, (c & 4194240) !== 0)) {
        var d = b.lanes;
        d &= a.pendingLanes, c |= d, b.lanes = c, Cc(a, c);
      }
    }
    function ph(a, b) {
      var c = a.updateQueue, d = a.alternate;
      if (d !== null && (d = d.updateQueue, c === d)) {
        var e = null, f = null;
        if (c = c.firstBaseUpdate, c !== null) {
          do {
            var g = { eventTime: c.eventTime, lane: c.lane, tag: c.tag, payload: c.payload, callback: c.callback, next: null };
            f === null ? e = f = g : f = f.next = g, c = c.next;
          } while (c !== null);
          f === null ? e = f = b : f = f.next = b;
        } else
          e = f = b;
        c = { baseState: d.baseState, firstBaseUpdate: e, lastBaseUpdate: f, shared: d.shared, effects: d.effects }, a.updateQueue = c;
        return;
      }
      a = c.lastBaseUpdate, a === null ? c.firstBaseUpdate = b : a.next = b, c.lastBaseUpdate = b;
    }
    function qh(a, b, c, d) {
      var e = a.updateQueue;
      jh = !1;
      var f = e.firstBaseUpdate, g = e.lastBaseUpdate, h = e.shared.pending;
      if (h !== null) {
        e.shared.pending = null;
        var k = h, l = k.next;
        k.next = null, g === null ? f = l : g.next = l, g = k;
        var m = a.alternate;
        m !== null && (m = m.updateQueue, h = m.lastBaseUpdate, h !== g && (h === null ? m.firstBaseUpdate = l : h.next = l, m.lastBaseUpdate = k));
      }
      if (f !== null) {
        var q = e.baseState;
        g = 0, m = l = k = null, h = f;
        do {
          var r = h.lane, y = h.eventTime;
          if ((d & r) === r) {
            m !== null && (m = m.next = {
              eventTime: y,
              lane: 0,
              tag: h.tag,
              payload: h.payload,
              callback: h.callback,
              next: null
            });
            a: {
              var n = a, t = h;
              switch (r = b, y = c, t.tag) {
                case 1:
                  if (n = t.payload, typeof n == "function") {
                    q = n.call(y, q, r);
                    break a;
                  }
                  q = n;
                  break a;
                case 3:
                  n.flags = n.flags & -65537 | 128;
                case 0:
                  if (n = t.payload, r = typeof n == "function" ? n.call(y, q, r) : n, r == null)
                    break a;
                  q = A({}, q, r);
                  break a;
                case 2:
                  jh = !0;
              }
            }
            h.callback !== null && h.lane !== 0 && (a.flags |= 64, r = e.effects, r === null ? e.effects = [h] : r.push(h));
          } else
            y = { eventTime: y, lane: r, tag: h.tag, payload: h.payload, callback: h.callback, next: null }, m === null ? (l = m = y, k = q) : m = m.next = y, g |= r;
          if (h = h.next, h === null) {
            if (h = e.shared.pending, h === null)
              break;
            r = h, h = r.next, r.next = null, e.lastBaseUpdate = r, e.shared.pending = null;
          }
        } while (1);
        if (m === null && (k = q), e.baseState = k, e.firstBaseUpdate = l, e.lastBaseUpdate = m, b = e.shared.interleaved, b !== null) {
          e = b;
          do
            g |= e.lane, e = e.next;
          while (e !== b);
        } else
          f === null && (e.shared.lanes = 0);
        rh |= g, a.lanes = g, a.memoizedState = q;
      }
    }
    function sh(a, b, c) {
      if (a = b.effects, b.effects = null, a !== null)
        for (b = 0; b < a.length; b++) {
          var d = a[b], e = d.callback;
          if (e !== null) {
            if (d.callback = null, d = c, typeof e != "function")
              throw Error(p(191, e));
            e.call(d);
          }
        }
    }
    var th = {}, uh = Uf(th), vh = Uf(th), wh = Uf(th);
    function xh(a) {
      if (a === th)
        throw Error(p(174));
      return a;
    }
    function yh(a, b) {
      switch (G(wh, b), G(vh, a), G(uh, th), a = b.nodeType, a) {
        case 9:
        case 11:
          b = (b = b.documentElement) ? b.namespaceURI : lb(null, "");
          break;
        default:
          a = a === 8 ? b.parentNode : b, b = a.namespaceURI || null, a = a.tagName, b = lb(b, a);
      }
      E(uh), G(uh, b);
    }
    function zh() {
      E(uh), E(vh), E(wh);
    }
    function Ah(a) {
      xh(wh.current);
      var b = xh(uh.current), c = lb(b, a.type);
      b !== c && (G(vh, a), G(uh, c));
    }
    function Bh(a) {
      vh.current === a && (E(uh), E(vh));
    }
    var L = Uf(0);
    function Ch(a) {
      for (var b = a; b !== null; ) {
        if (b.tag === 13) {
          var c = b.memoizedState;
          if (c !== null && (c = c.dehydrated, c === null || c.data === "$?" || c.data === "$!"))
            return b;
        } else if (b.tag === 19 && b.memoizedProps.revealOrder !== void 0) {
          if (b.flags & 128)
            return b;
        } else if (b.child !== null) {
          b.child.return = b, b = b.child;
          continue;
        }
        if (b === a)
          break;
        for (; b.sibling === null; ) {
          if (b.return === null || b.return === a)
            return null;
          b = b.return;
        }
        b.sibling.return = b.return, b = b.sibling;
      }
      return null;
    }
    var Dh = [];
    function Eh() {
      for (var a = 0; a < Dh.length; a++)
        Dh[a]._workInProgressVersionPrimary = null;
      Dh.length = 0;
    }
    var Fh = ua.ReactCurrentDispatcher, Gh = ua.ReactCurrentBatchConfig, Hh = 0, M = null, N = null, O = null, Ih = !1, Jh = !1, Kh = 0, Lh = 0;
    function P() {
      throw Error(p(321));
    }
    function Mh(a, b) {
      if (b === null)
        return !1;
      for (var c = 0; c < b.length && c < a.length; c++)
        if (!He(a[c], b[c]))
          return !1;
      return !0;
    }
    function Nh(a, b, c, d, e, f) {
      if (Hh = f, M = b, b.memoizedState = null, b.updateQueue = null, b.lanes = 0, Fh.current = a === null || a.memoizedState === null ? Oh : Ph, a = c(d, e), Jh) {
        f = 0;
        do {
          if (Jh = !1, Kh = 0, 25 <= f)
            throw Error(p(301));
          f += 1, O = N = null, b.updateQueue = null, Fh.current = Qh, a = c(d, e);
        } while (Jh);
      }
      if (Fh.current = Rh, b = N !== null && N.next !== null, Hh = 0, O = N = M = null, Ih = !1, b)
        throw Error(p(300));
      return a;
    }
    function Sh() {
      var a = Kh !== 0;
      return Kh = 0, a;
    }
    function Th() {
      var a = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
      return O === null ? M.memoizedState = O = a : O = O.next = a, O;
    }
    function Uh() {
      if (N === null) {
        var a = M.alternate;
        a = a !== null ? a.memoizedState : null;
      } else
        a = N.next;
      var b = O === null ? M.memoizedState : O.next;
      if (b !== null)
        O = b, N = a;
      else {
        if (a === null)
          throw Error(p(310));
        N = a, a = { memoizedState: N.memoizedState, baseState: N.baseState, baseQueue: N.baseQueue, queue: N.queue, next: null }, O === null ? M.memoizedState = O = a : O = O.next = a;
      }
      return O;
    }
    function Vh(a, b) {
      return typeof b == "function" ? b(a) : b;
    }
    function Wh(a) {
      var b = Uh(), c = b.queue;
      if (c === null)
        throw Error(p(311));
      c.lastRenderedReducer = a;
      var d = N, e = d.baseQueue, f = c.pending;
      if (f !== null) {
        if (e !== null) {
          var g = e.next;
          e.next = f.next, f.next = g;
        }
        d.baseQueue = e = f, c.pending = null;
      }
      if (e !== null) {
        f = e.next, d = d.baseState;
        var h = g = null, k = null, l = f;
        do {
          var m = l.lane;
          if ((Hh & m) === m)
            k !== null && (k = k.next = { lane: 0, action: l.action, hasEagerState: l.hasEagerState, eagerState: l.eagerState, next: null }), d = l.hasEagerState ? l.eagerState : a(d, l.action);
          else {
            var q = {
              lane: m,
              action: l.action,
              hasEagerState: l.hasEagerState,
              eagerState: l.eagerState,
              next: null
            };
            k === null ? (h = k = q, g = d) : k = k.next = q, M.lanes |= m, rh |= m;
          }
          l = l.next;
        } while (l !== null && l !== f);
        k === null ? g = d : k.next = h, He(d, b.memoizedState) || (dh = !0), b.memoizedState = d, b.baseState = g, b.baseQueue = k, c.lastRenderedState = d;
      }
      if (a = c.interleaved, a !== null) {
        e = a;
        do
          f = e.lane, M.lanes |= f, rh |= f, e = e.next;
        while (e !== a);
      } else
        e === null && (c.lanes = 0);
      return [b.memoizedState, c.dispatch];
    }
    function Xh(a) {
      var b = Uh(), c = b.queue;
      if (c === null)
        throw Error(p(311));
      c.lastRenderedReducer = a;
      var d = c.dispatch, e = c.pending, f = b.memoizedState;
      if (e !== null) {
        c.pending = null;
        var g = e = e.next;
        do
          f = a(f, g.action), g = g.next;
        while (g !== e);
        He(f, b.memoizedState) || (dh = !0), b.memoizedState = f, b.baseQueue === null && (b.baseState = f), c.lastRenderedState = f;
      }
      return [f, d];
    }
    function Yh() {
    }
    function Zh(a, b) {
      var c = M, d = Uh(), e = b(), f = !He(d.memoizedState, e);
      if (f && (d.memoizedState = e, dh = !0), d = d.queue, $h(ai.bind(null, c, d, a), [a]), d.getSnapshot !== b || f || O !== null && O.memoizedState.tag & 1) {
        if (c.flags |= 2048, bi(9, ci.bind(null, c, d, e, b), void 0, null), Q === null)
          throw Error(p(349));
        Hh & 30 || di(c, b, e);
      }
      return e;
    }
    function di(a, b, c) {
      a.flags |= 16384, a = { getSnapshot: b, value: c }, b = M.updateQueue, b === null ? (b = { lastEffect: null, stores: null }, M.updateQueue = b, b.stores = [a]) : (c = b.stores, c === null ? b.stores = [a] : c.push(a));
    }
    function ci(a, b, c, d) {
      b.value = c, b.getSnapshot = d, ei(b) && fi(a);
    }
    function ai(a, b, c) {
      return c(function() {
        ei(b) && fi(a);
      });
    }
    function ei(a) {
      var b = a.getSnapshot;
      a = a.value;
      try {
        var c = b();
        return !He(a, c);
      } catch {
        return !0;
      }
    }
    function fi(a) {
      var b = ih(a, 1);
      b !== null && gi(b, a, 1, -1);
    }
    function hi(a) {
      var b = Th();
      return typeof a == "function" && (a = a()), b.memoizedState = b.baseState = a, a = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: Vh, lastRenderedState: a }, b.queue = a, a = a.dispatch = ii.bind(null, M, a), [b.memoizedState, a];
    }
    function bi(a, b, c, d) {
      return a = { tag: a, create: b, destroy: c, deps: d, next: null }, b = M.updateQueue, b === null ? (b = { lastEffect: null, stores: null }, M.updateQueue = b, b.lastEffect = a.next = a) : (c = b.lastEffect, c === null ? b.lastEffect = a.next = a : (d = c.next, c.next = a, a.next = d, b.lastEffect = a)), a;
    }
    function ji() {
      return Uh().memoizedState;
    }
    function ki(a, b, c, d) {
      var e = Th();
      M.flags |= a, e.memoizedState = bi(1 | b, c, void 0, d === void 0 ? null : d);
    }
    function li(a, b, c, d) {
      var e = Uh();
      d = d === void 0 ? null : d;
      var f = void 0;
      if (N !== null) {
        var g = N.memoizedState;
        if (f = g.destroy, d !== null && Mh(d, g.deps)) {
          e.memoizedState = bi(b, c, f, d);
          return;
        }
      }
      M.flags |= a, e.memoizedState = bi(1 | b, c, f, d);
    }
    function mi(a, b) {
      return ki(8390656, 8, a, b);
    }
    function $h(a, b) {
      return li(2048, 8, a, b);
    }
    function ni(a, b) {
      return li(4, 2, a, b);
    }
    function oi(a, b) {
      return li(4, 4, a, b);
    }
    function pi(a, b) {
      if (typeof b == "function")
        return a = a(), b(a), function() {
          b(null);
        };
      if (b != null)
        return a = a(), b.current = a, function() {
          b.current = null;
        };
    }
    function qi(a, b, c) {
      return c = c != null ? c.concat([a]) : null, li(4, 4, pi.bind(null, b, a), c);
    }
    function ri() {
    }
    function si(a, b) {
      var c = Uh();
      b = b === void 0 ? null : b;
      var d = c.memoizedState;
      return d !== null && b !== null && Mh(b, d[1]) ? d[0] : (c.memoizedState = [a, b], a);
    }
    function ti(a, b) {
      var c = Uh();
      b = b === void 0 ? null : b;
      var d = c.memoizedState;
      return d !== null && b !== null && Mh(b, d[1]) ? d[0] : (a = a(), c.memoizedState = [a, b], a);
    }
    function ui(a, b, c) {
      return Hh & 21 ? (He(c, b) || (c = yc(), M.lanes |= c, rh |= c, a.baseState = !0), b) : (a.baseState && (a.baseState = !1, dh = !0), a.memoizedState = c);
    }
    function vi(a, b) {
      var c = C;
      C = c !== 0 && 4 > c ? c : 4, a(!0);
      var d = Gh.transition;
      Gh.transition = {};
      try {
        a(!1), b();
      } finally {
        C = c, Gh.transition = d;
      }
    }
    function wi() {
      return Uh().memoizedState;
    }
    function xi(a, b, c) {
      var d = yi(a);
      if (c = { lane: d, action: c, hasEagerState: !1, eagerState: null, next: null }, zi(a))
        Ai(b, c);
      else if (c = hh(a, b, c, d), c !== null) {
        var e = R();
        gi(c, a, d, e), Bi(c, b, d);
      }
    }
    function ii(a, b, c) {
      var d = yi(a), e = { lane: d, action: c, hasEagerState: !1, eagerState: null, next: null };
      if (zi(a))
        Ai(b, e);
      else {
        var f = a.alternate;
        if (a.lanes === 0 && (f === null || f.lanes === 0) && (f = b.lastRenderedReducer, f !== null))
          try {
            var g = b.lastRenderedState, h = f(g, c);
            if (e.hasEagerState = !0, e.eagerState = h, He(h, g)) {
              var k = b.interleaved;
              k === null ? (e.next = e, gh(b)) : (e.next = k.next, k.next = e), b.interleaved = e;
              return;
            }
          } catch {
          } finally {
          }
        c = hh(a, b, e, d), c !== null && (e = R(), gi(c, a, d, e), Bi(c, b, d));
      }
    }
    function zi(a) {
      var b = a.alternate;
      return a === M || b !== null && b === M;
    }
    function Ai(a, b) {
      Jh = Ih = !0;
      var c = a.pending;
      c === null ? b.next = b : (b.next = c.next, c.next = b), a.pending = b;
    }
    function Bi(a, b, c) {
      if (c & 4194240) {
        var d = b.lanes;
        d &= a.pendingLanes, c |= d, b.lanes = c, Cc(a, c);
      }
    }
    var Rh = { readContext: eh, useCallback: P, useContext: P, useEffect: P, useImperativeHandle: P, useInsertionEffect: P, useLayoutEffect: P, useMemo: P, useReducer: P, useRef: P, useState: P, useDebugValue: P, useDeferredValue: P, useTransition: P, useMutableSource: P, useSyncExternalStore: P, useId: P, unstable_isNewReconciler: !1 }, Oh = { readContext: eh, useCallback: function(a, b) {
      return Th().memoizedState = [a, b === void 0 ? null : b], a;
    }, useContext: eh, useEffect: mi, useImperativeHandle: function(a, b, c) {
      return c = c != null ? c.concat([a]) : null, ki(
        4194308,
        4,
        pi.bind(null, b, a),
        c
      );
    }, useLayoutEffect: function(a, b) {
      return ki(4194308, 4, a, b);
    }, useInsertionEffect: function(a, b) {
      return ki(4, 2, a, b);
    }, useMemo: function(a, b) {
      var c = Th();
      return b = b === void 0 ? null : b, a = a(), c.memoizedState = [a, b], a;
    }, useReducer: function(a, b, c) {
      var d = Th();
      return b = c !== void 0 ? c(b) : b, d.memoizedState = d.baseState = b, a = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: a, lastRenderedState: b }, d.queue = a, a = a.dispatch = xi.bind(null, M, a), [d.memoizedState, a];
    }, useRef: function(a) {
      var b = Th();
      return a = { current: a }, b.memoizedState = a;
    }, useState: hi, useDebugValue: ri, useDeferredValue: function(a) {
      return Th().memoizedState = a;
    }, useTransition: function() {
      var a = hi(!1), b = a[0];
      return a = vi.bind(null, a[1]), Th().memoizedState = a, [b, a];
    }, useMutableSource: function() {
    }, useSyncExternalStore: function(a, b, c) {
      var d = M, e = Th();
      if (I) {
        if (c === void 0)
          throw Error(p(407));
        c = c();
      } else {
        if (c = b(), Q === null)
          throw Error(p(349));
        Hh & 30 || di(d, b, c);
      }
      e.memoizedState = c;
      var f = { value: c, getSnapshot: b };
      return e.queue = f, mi(ai.bind(
        null,
        d,
        f,
        a
      ), [a]), d.flags |= 2048, bi(9, ci.bind(null, d, f, c, b), void 0, null), c;
    }, useId: function() {
      var a = Th(), b = Q.identifierPrefix;
      if (I) {
        var c = sg, d = rg;
        c = (d & ~(1 << 32 - oc(d) - 1)).toString(32) + c, b = ":" + b + "R" + c, c = Kh++, 0 < c && (b += "H" + c.toString(32)), b += ":";
      } else
        c = Lh++, b = ":" + b + "r" + c.toString(32) + ":";
      return a.memoizedState = b;
    }, unstable_isNewReconciler: !1 }, Ph = {
      readContext: eh,
      useCallback: si,
      useContext: eh,
      useEffect: $h,
      useImperativeHandle: qi,
      useInsertionEffect: ni,
      useLayoutEffect: oi,
      useMemo: ti,
      useReducer: Wh,
      useRef: ji,
      useState: function() {
        return Wh(Vh);
      },
      useDebugValue: ri,
      useDeferredValue: function(a) {
        var b = Uh();
        return ui(b, N.memoizedState, a);
      },
      useTransition: function() {
        var a = Wh(Vh)[0], b = Uh().memoizedState;
        return [a, b];
      },
      useMutableSource: Yh,
      useSyncExternalStore: Zh,
      useId: wi,
      unstable_isNewReconciler: !1
    }, Qh = { readContext: eh, useCallback: si, useContext: eh, useEffect: $h, useImperativeHandle: qi, useInsertionEffect: ni, useLayoutEffect: oi, useMemo: ti, useReducer: Xh, useRef: ji, useState: function() {
      return Xh(Vh);
    }, useDebugValue: ri, useDeferredValue: function(a) {
      var b = Uh();
      return N === null ? b.memoizedState = a : ui(b, N.memoizedState, a);
    }, useTransition: function() {
      var a = Xh(Vh)[0], b = Uh().memoizedState;
      return [a, b];
    }, useMutableSource: Yh, useSyncExternalStore: Zh, useId: wi, unstable_isNewReconciler: !1 };
    function Ci(a, b) {
      if (a && a.defaultProps) {
        b = A({}, b), a = a.defaultProps;
        for (var c in a)
          b[c] === void 0 && (b[c] = a[c]);
        return b;
      }
      return b;
    }
    function Di(a, b, c, d) {
      b = a.memoizedState, c = c(d, b), c = c == null ? b : A({}, b, c), a.memoizedState = c, a.lanes === 0 && (a.updateQueue.baseState = c);
    }
    var Ei = { isMounted: function(a) {
      return (a = a._reactInternals) ? Vb(a) === a : !1;
    }, enqueueSetState: function(a, b, c) {
      a = a._reactInternals;
      var d = R(), e = yi(a), f = mh(d, e);
      f.payload = b, c != null && (f.callback = c), b = nh(a, f, e), b !== null && (gi(b, a, e, d), oh(b, a, e));
    }, enqueueReplaceState: function(a, b, c) {
      a = a._reactInternals;
      var d = R(), e = yi(a), f = mh(d, e);
      f.tag = 1, f.payload = b, c != null && (f.callback = c), b = nh(a, f, e), b !== null && (gi(b, a, e, d), oh(b, a, e));
    }, enqueueForceUpdate: function(a, b) {
      a = a._reactInternals;
      var c = R(), d = yi(a), e = mh(c, d);
      e.tag = 2, b != null && (e.callback = b), b = nh(a, e, d), b !== null && (gi(b, a, d, c), oh(b, a, d));
    } };
    function Fi(a, b, c, d, e, f, g) {
      return a = a.stateNode, typeof a.shouldComponentUpdate == "function" ? a.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !Ie(c, d) || !Ie(e, f) : !0;
    }
    function Gi(a, b, c) {
      var d = !1, e = Vf, f = b.contextType;
      return typeof f == "object" && f !== null ? f = eh(f) : (e = Zf(b) ? Xf : H.current, d = b.contextTypes, f = (d = d != null) ? Yf(a, e) : Vf), b = new b(c, f), a.memoizedState = b.state !== null && b.state !== void 0 ? b.state : null, b.updater = Ei, a.stateNode = b, b._reactInternals = a, d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f), b;
    }
    function Hi(a, b, c, d) {
      a = b.state, typeof b.componentWillReceiveProps == "function" && b.componentWillReceiveProps(c, d), typeof b.UNSAFE_componentWillReceiveProps == "function" && b.UNSAFE_componentWillReceiveProps(c, d), b.state !== a && Ei.enqueueReplaceState(b, b.state, null);
    }
    function Ii(a, b, c, d) {
      var e = a.stateNode;
      e.props = c, e.state = a.memoizedState, e.refs = {}, kh(a);
      var f = b.contextType;
      typeof f == "object" && f !== null ? e.context = eh(f) : (f = Zf(b) ? Xf : H.current, e.context = Yf(a, f)), e.state = a.memoizedState, f = b.getDerivedStateFromProps, typeof f == "function" && (Di(a, b, f, c), e.state = a.memoizedState), typeof b.getDerivedStateFromProps == "function" || typeof e.getSnapshotBeforeUpdate == "function" || typeof e.UNSAFE_componentWillMount != "function" && typeof e.componentWillMount != "function" || (b = e.state, typeof e.componentWillMount == "function" && e.componentWillMount(), typeof e.UNSAFE_componentWillMount == "function" && e.UNSAFE_componentWillMount(), b !== e.state && Ei.enqueueReplaceState(e, e.state, null), qh(a, c, e, d), e.state = a.memoizedState), typeof e.componentDidMount == "function" && (a.flags |= 4194308);
    }
    function Ji(a, b) {
      try {
        var c = "", d = b;
        do
          c += Pa(d), d = d.return;
        while (d);
        var e = c;
      } catch (f) {
        e = `
Error generating stack: ` + f.message + `
` + f.stack;
      }
      return { value: a, source: b, stack: e, digest: null };
    }
    function Ki(a, b, c) {
      return { value: a, source: null, stack: c ?? null, digest: b ?? null };
    }
    function Li(a, b) {
      try {
        console.error(b.value);
      } catch (c) {
        setTimeout(function() {
          throw c;
        });
      }
    }
    var Mi = typeof WeakMap == "function" ? WeakMap : Map;
    function Ni(a, b, c) {
      c = mh(-1, c), c.tag = 3, c.payload = { element: null };
      var d = b.value;
      return c.callback = function() {
        Oi || (Oi = !0, Pi = d), Li(a, b);
      }, c;
    }
    function Qi(a, b, c) {
      c = mh(-1, c), c.tag = 3;
      var d = a.type.getDerivedStateFromError;
      if (typeof d == "function") {
        var e = b.value;
        c.payload = function() {
          return d(e);
        }, c.callback = function() {
          Li(a, b);
        };
      }
      var f = a.stateNode;
      return f !== null && typeof f.componentDidCatch == "function" && (c.callback = function() {
        Li(a, b), typeof d != "function" && (Ri === null ? Ri = /* @__PURE__ */ new Set([this]) : Ri.add(this));
        var c2 = b.stack;
        this.componentDidCatch(b.value, { componentStack: c2 !== null ? c2 : "" });
      }), c;
    }
    function Si(a, b, c) {
      var d = a.pingCache;
      if (d === null) {
        d = a.pingCache = new Mi();
        var e = /* @__PURE__ */ new Set();
        d.set(b, e);
      } else
        e = d.get(b), e === void 0 && (e = /* @__PURE__ */ new Set(), d.set(b, e));
      e.has(c) || (e.add(c), a = Ti.bind(null, a, b, c), b.then(a, a));
    }
    function Ui(a) {
      do {
        var b;
        if ((b = a.tag === 13) && (b = a.memoizedState, b = b !== null ? b.dehydrated !== null : !0), b)
          return a;
        a = a.return;
      } while (a !== null);
      return null;
    }
    function Vi(a, b, c, d, e) {
      return a.mode & 1 ? (a.flags |= 65536, a.lanes = e, a) : (a === b ? a.flags |= 65536 : (a.flags |= 128, c.flags |= 131072, c.flags &= -52805, c.tag === 1 && (c.alternate === null ? c.tag = 17 : (b = mh(-1, 1), b.tag = 2, nh(c, b, 1))), c.lanes |= 1), a);
    }
    var Wi = ua.ReactCurrentOwner, dh = !1;
    function Xi(a, b, c, d) {
      b.child = a === null ? Vg(b, null, c, d) : Ug(b, a.child, c, d);
    }
    function Yi(a, b, c, d, e) {
      c = c.render;
      var f = b.ref;
      return ch(b, e), d = Nh(a, b, c, d, f, e), c = Sh(), a !== null && !dh ? (b.updateQueue = a.updateQueue, b.flags &= -2053, a.lanes &= ~e, Zi(a, b, e)) : (I && c && vg(b), b.flags |= 1, Xi(a, b, d, e), b.child);
    }
    function $i(a, b, c, d, e) {
      if (a === null) {
        var f = c.type;
        return typeof f == "function" && !aj(f) && f.defaultProps === void 0 && c.compare === null && c.defaultProps === void 0 ? (b.tag = 15, b.type = f, bj(a, b, f, d, e)) : (a = Rg(c.type, null, d, b, b.mode, e), a.ref = b.ref, a.return = b, b.child = a);
      }
      if (f = a.child, !(a.lanes & e)) {
        var g = f.memoizedProps;
        if (c = c.compare, c = c !== null ? c : Ie, c(g, d) && a.ref === b.ref)
          return Zi(a, b, e);
      }
      return b.flags |= 1, a = Pg(f, d), a.ref = b.ref, a.return = b, b.child = a;
    }
    function bj(a, b, c, d, e) {
      if (a !== null) {
        var f = a.memoizedProps;
        if (Ie(f, d) && a.ref === b.ref)
          if (dh = !1, b.pendingProps = d = f, (a.lanes & e) !== 0)
            a.flags & 131072 && (dh = !0);
          else
            return b.lanes = a.lanes, Zi(a, b, e);
      }
      return cj(a, b, c, d, e);
    }
    function dj(a, b, c) {
      var d = b.pendingProps, e = d.children, f = a !== null ? a.memoizedState : null;
      if (d.mode === "hidden")
        if (!(b.mode & 1))
          b.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, G(ej, fj), fj |= c;
        else {
          if (!(c & 1073741824))
            return a = f !== null ? f.baseLanes | c : c, b.lanes = b.childLanes = 1073741824, b.memoizedState = { baseLanes: a, cachePool: null, transitions: null }, b.updateQueue = null, G(ej, fj), fj |= a, null;
          b.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, d = f !== null ? f.baseLanes : c, G(ej, fj), fj |= d;
        }
      else
        f !== null ? (d = f.baseLanes | c, b.memoizedState = null) : d = c, G(ej, fj), fj |= d;
      return Xi(a, b, e, c), b.child;
    }
    function gj(a, b) {
      var c = b.ref;
      (a === null && c !== null || a !== null && a.ref !== c) && (b.flags |= 512, b.flags |= 2097152);
    }
    function cj(a, b, c, d, e) {
      var f = Zf(c) ? Xf : H.current;
      return f = Yf(b, f), ch(b, e), c = Nh(a, b, c, d, f, e), d = Sh(), a !== null && !dh ? (b.updateQueue = a.updateQueue, b.flags &= -2053, a.lanes &= ~e, Zi(a, b, e)) : (I && d && vg(b), b.flags |= 1, Xi(a, b, c, e), b.child);
    }
    function hj(a, b, c, d, e) {
      if (Zf(c)) {
        var f = !0;
        cg(b);
      } else
        f = !1;
      if (ch(b, e), b.stateNode === null)
        ij(a, b), Gi(b, c, d), Ii(b, c, d, e), d = !0;
      else if (a === null) {
        var g = b.stateNode, h = b.memoizedProps;
        g.props = h;
        var k = g.context, l = c.contextType;
        typeof l == "object" && l !== null ? l = eh(l) : (l = Zf(c) ? Xf : H.current, l = Yf(b, l));
        var m = c.getDerivedStateFromProps, q = typeof m == "function" || typeof g.getSnapshotBeforeUpdate == "function";
        q || typeof g.UNSAFE_componentWillReceiveProps != "function" && typeof g.componentWillReceiveProps != "function" || (h !== d || k !== l) && Hi(b, g, d, l), jh = !1;
        var r = b.memoizedState;
        g.state = r, qh(b, d, g, e), k = b.memoizedState, h !== d || r !== k || Wf.current || jh ? (typeof m == "function" && (Di(b, c, m, d), k = b.memoizedState), (h = jh || Fi(b, c, h, d, r, k, l)) ? (q || typeof g.UNSAFE_componentWillMount != "function" && typeof g.componentWillMount != "function" || (typeof g.componentWillMount == "function" && g.componentWillMount(), typeof g.UNSAFE_componentWillMount == "function" && g.UNSAFE_componentWillMount()), typeof g.componentDidMount == "function" && (b.flags |= 4194308)) : (typeof g.componentDidMount == "function" && (b.flags |= 4194308), b.memoizedProps = d, b.memoizedState = k), g.props = d, g.state = k, g.context = l, d = h) : (typeof g.componentDidMount == "function" && (b.flags |= 4194308), d = !1);
      } else {
        g = b.stateNode, lh(a, b), h = b.memoizedProps, l = b.type === b.elementType ? h : Ci(b.type, h), g.props = l, q = b.pendingProps, r = g.context, k = c.contextType, typeof k == "object" && k !== null ? k = eh(k) : (k = Zf(c) ? Xf : H.current, k = Yf(b, k));
        var y = c.getDerivedStateFromProps;
        (m = typeof y == "function" || typeof g.getSnapshotBeforeUpdate == "function") || typeof g.UNSAFE_componentWillReceiveProps != "function" && typeof g.componentWillReceiveProps != "function" || (h !== q || r !== k) && Hi(b, g, d, k), jh = !1, r = b.memoizedState, g.state = r, qh(b, d, g, e);
        var n = b.memoizedState;
        h !== q || r !== n || Wf.current || jh ? (typeof y == "function" && (Di(b, c, y, d), n = b.memoizedState), (l = jh || Fi(b, c, l, d, r, n, k) || !1) ? (m || typeof g.UNSAFE_componentWillUpdate != "function" && typeof g.componentWillUpdate != "function" || (typeof g.componentWillUpdate == "function" && g.componentWillUpdate(d, n, k), typeof g.UNSAFE_componentWillUpdate == "function" && g.UNSAFE_componentWillUpdate(d, n, k)), typeof g.componentDidUpdate == "function" && (b.flags |= 4), typeof g.getSnapshotBeforeUpdate == "function" && (b.flags |= 1024)) : (typeof g.componentDidUpdate != "function" || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 4), typeof g.getSnapshotBeforeUpdate != "function" || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 1024), b.memoizedProps = d, b.memoizedState = n), g.props = d, g.state = n, g.context = k, d = l) : (typeof g.componentDidUpdate != "function" || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 4), typeof g.getSnapshotBeforeUpdate != "function" || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 1024), d = !1);
      }
      return jj(a, b, c, d, f, e);
    }
    function jj(a, b, c, d, e, f) {
      gj(a, b);
      var g = (b.flags & 128) !== 0;
      if (!d && !g)
        return e && dg(b, c, !1), Zi(a, b, f);
      d = b.stateNode, Wi.current = b;
      var h = g && typeof c.getDerivedStateFromError != "function" ? null : d.render();
      return b.flags |= 1, a !== null && g ? (b.child = Ug(b, a.child, null, f), b.child = Ug(b, null, h, f)) : Xi(a, b, h, f), b.memoizedState = d.state, e && dg(b, c, !0), b.child;
    }
    function kj(a) {
      var b = a.stateNode;
      b.pendingContext ? ag(a, b.pendingContext, b.pendingContext !== b.context) : b.context && ag(a, b.context, !1), yh(a, b.containerInfo);
    }
    function lj(a, b, c, d, e) {
      return Ig(), Jg(e), b.flags |= 256, Xi(a, b, c, d), b.child;
    }
    var mj = { dehydrated: null, treeContext: null, retryLane: 0 };
    function nj(a) {
      return { baseLanes: a, cachePool: null, transitions: null };
    }
    function oj(a, b, c) {
      var d = b.pendingProps, e = L.current, f = !1, g = (b.flags & 128) !== 0, h;
      if ((h = g) || (h = a !== null && a.memoizedState === null ? !1 : (e & 2) !== 0), h ? (f = !0, b.flags &= -129) : (a === null || a.memoizedState !== null) && (e |= 1), G(L, e & 1), a === null)
        return Eg(b), a = b.memoizedState, a !== null && (a = a.dehydrated, a !== null) ? (b.mode & 1 ? a.data === "$!" ? b.lanes = 8 : b.lanes = 1073741824 : b.lanes = 1, null) : (g = d.children, a = d.fallback, f ? (d = b.mode, f = b.child, g = { mode: "hidden", children: g }, !(d & 1) && f !== null ? (f.childLanes = 0, f.pendingProps = g) : f = pj(g, d, 0, null), a = Tg(a, d, c, null), f.return = b, a.return = b, f.sibling = a, b.child = f, b.child.memoizedState = nj(c), b.memoizedState = mj, a) : qj(b, g));
      if (e = a.memoizedState, e !== null && (h = e.dehydrated, h !== null))
        return rj(a, b, g, d, h, e, c);
      if (f) {
        f = d.fallback, g = b.mode, e = a.child, h = e.sibling;
        var k = { mode: "hidden", children: d.children };
        return !(g & 1) && b.child !== e ? (d = b.child, d.childLanes = 0, d.pendingProps = k, b.deletions = null) : (d = Pg(e, k), d.subtreeFlags = e.subtreeFlags & 14680064), h !== null ? f = Pg(h, f) : (f = Tg(f, g, c, null), f.flags |= 2), f.return = b, d.return = b, d.sibling = f, b.child = d, d = f, f = b.child, g = a.child.memoizedState, g = g === null ? nj(c) : { baseLanes: g.baseLanes | c, cachePool: null, transitions: g.transitions }, f.memoizedState = g, f.childLanes = a.childLanes & ~c, b.memoizedState = mj, d;
      }
      return f = a.child, a = f.sibling, d = Pg(f, { mode: "visible", children: d.children }), !(b.mode & 1) && (d.lanes = c), d.return = b, d.sibling = null, a !== null && (c = b.deletions, c === null ? (b.deletions = [a], b.flags |= 16) : c.push(a)), b.child = d, b.memoizedState = null, d;
    }
    function qj(a, b) {
      return b = pj({ mode: "visible", children: b }, a.mode, 0, null), b.return = a, a.child = b;
    }
    function sj(a, b, c, d) {
      return d !== null && Jg(d), Ug(b, a.child, null, c), a = qj(b, b.pendingProps.children), a.flags |= 2, b.memoizedState = null, a;
    }
    function rj(a, b, c, d, e, f, g) {
      if (c)
        return b.flags & 256 ? (b.flags &= -257, d = Ki(Error(p(422))), sj(a, b, g, d)) : b.memoizedState !== null ? (b.child = a.child, b.flags |= 128, null) : (f = d.fallback, e = b.mode, d = pj({ mode: "visible", children: d.children }, e, 0, null), f = Tg(f, e, g, null), f.flags |= 2, d.return = b, f.return = b, d.sibling = f, b.child = d, b.mode & 1 && Ug(b, a.child, null, g), b.child.memoizedState = nj(g), b.memoizedState = mj, f);
      if (!(b.mode & 1))
        return sj(a, b, g, null);
      if (e.data === "$!") {
        if (d = e.nextSibling && e.nextSibling.dataset, d)
          var h = d.dgst;
        return d = h, f = Error(p(419)), d = Ki(f, d, void 0), sj(a, b, g, d);
      }
      if (h = (g & a.childLanes) !== 0, dh || h) {
        if (d = Q, d !== null) {
          switch (g & -g) {
            case 4:
              e = 2;
              break;
            case 16:
              e = 8;
              break;
            case 64:
            case 128:
            case 256:
            case 512:
            case 1024:
            case 2048:
            case 4096:
            case 8192:
            case 16384:
            case 32768:
            case 65536:
            case 131072:
            case 262144:
            case 524288:
            case 1048576:
            case 2097152:
            case 4194304:
            case 8388608:
            case 16777216:
            case 33554432:
            case 67108864:
              e = 32;
              break;
            case 536870912:
              e = 268435456;
              break;
            default:
              e = 0;
          }
          e = e & (d.suspendedLanes | g) ? 0 : e, e !== 0 && e !== f.retryLane && (f.retryLane = e, ih(a, e), gi(d, a, e, -1));
        }
        return tj(), d = Ki(Error(p(421))), sj(a, b, g, d);
      }
      return e.data === "$?" ? (b.flags |= 128, b.child = a.child, b = uj.bind(null, a), e._reactRetry = b, null) : (a = f.treeContext, yg = Lf(e.nextSibling), xg = b, I = !0, zg = null, a !== null && (og[pg++] = rg, og[pg++] = sg, og[pg++] = qg, rg = a.id, sg = a.overflow, qg = b), b = qj(b, d.children), b.flags |= 4096, b);
    }
    function vj(a, b, c) {
      a.lanes |= b;
      var d = a.alternate;
      d !== null && (d.lanes |= b), bh(a.return, b, c);
    }
    function wj(a, b, c, d, e) {
      var f = a.memoizedState;
      f === null ? a.memoizedState = { isBackwards: b, rendering: null, renderingStartTime: 0, last: d, tail: c, tailMode: e } : (f.isBackwards = b, f.rendering = null, f.renderingStartTime = 0, f.last = d, f.tail = c, f.tailMode = e);
    }
    function xj(a, b, c) {
      var d = b.pendingProps, e = d.revealOrder, f = d.tail;
      if (Xi(a, b, d.children, c), d = L.current, d & 2)
        d = d & 1 | 2, b.flags |= 128;
      else {
        if (a !== null && a.flags & 128)
          a:
            for (a = b.child; a !== null; ) {
              if (a.tag === 13)
                a.memoizedState !== null && vj(a, c, b);
              else if (a.tag === 19)
                vj(a, c, b);
              else if (a.child !== null) {
                a.child.return = a, a = a.child;
                continue;
              }
              if (a === b)
                break a;
              for (; a.sibling === null; ) {
                if (a.return === null || a.return === b)
                  break a;
                a = a.return;
              }
              a.sibling.return = a.return, a = a.sibling;
            }
        d &= 1;
      }
      if (G(L, d), !(b.mode & 1))
        b.memoizedState = null;
      else
        switch (e) {
          case "forwards":
            for (c = b.child, e = null; c !== null; )
              a = c.alternate, a !== null && Ch(a) === null && (e = c), c = c.sibling;
            c = e, c === null ? (e = b.child, b.child = null) : (e = c.sibling, c.sibling = null), wj(b, !1, e, c, f);
            break;
          case "backwards":
            for (c = null, e = b.child, b.child = null; e !== null; ) {
              if (a = e.alternate, a !== null && Ch(a) === null) {
                b.child = e;
                break;
              }
              a = e.sibling, e.sibling = c, c = e, e = a;
            }
            wj(b, !0, c, null, f);
            break;
          case "together":
            wj(b, !1, null, null, void 0);
            break;
          default:
            b.memoizedState = null;
        }
      return b.child;
    }
    function ij(a, b) {
      !(b.mode & 1) && a !== null && (a.alternate = null, b.alternate = null, b.flags |= 2);
    }
    function Zi(a, b, c) {
      if (a !== null && (b.dependencies = a.dependencies), rh |= b.lanes, !(c & b.childLanes))
        return null;
      if (a !== null && b.child !== a.child)
        throw Error(p(153));
      if (b.child !== null) {
        for (a = b.child, c = Pg(a, a.pendingProps), b.child = c, c.return = b; a.sibling !== null; )
          a = a.sibling, c = c.sibling = Pg(a, a.pendingProps), c.return = b;
        c.sibling = null;
      }
      return b.child;
    }
    function yj(a, b, c) {
      switch (b.tag) {
        case 3:
          kj(b), Ig();
          break;
        case 5:
          Ah(b);
          break;
        case 1:
          Zf(b.type) && cg(b);
          break;
        case 4:
          yh(b, b.stateNode.containerInfo);
          break;
        case 10:
          var d = b.type._context, e = b.memoizedProps.value;
          G(Wg, d._currentValue), d._currentValue = e;
          break;
        case 13:
          if (d = b.memoizedState, d !== null)
            return d.dehydrated !== null ? (G(L, L.current & 1), b.flags |= 128, null) : c & b.child.childLanes ? oj(a, b, c) : (G(L, L.current & 1), a = Zi(a, b, c), a !== null ? a.sibling : null);
          G(L, L.current & 1);
          break;
        case 19:
          if (d = (c & b.childLanes) !== 0, a.flags & 128) {
            if (d)
              return xj(a, b, c);
            b.flags |= 128;
          }
          if (e = b.memoizedState, e !== null && (e.rendering = null, e.tail = null, e.lastEffect = null), G(L, L.current), d)
            break;
          return null;
        case 22:
        case 23:
          return b.lanes = 0, dj(a, b, c);
      }
      return Zi(a, b, c);
    }
    var zj, Aj, Bj, Cj;
    zj = function(a, b) {
      for (var c = b.child; c !== null; ) {
        if (c.tag === 5 || c.tag === 6)
          a.appendChild(c.stateNode);
        else if (c.tag !== 4 && c.child !== null) {
          c.child.return = c, c = c.child;
          continue;
        }
        if (c === b)
          break;
        for (; c.sibling === null; ) {
          if (c.return === null || c.return === b)
            return;
          c = c.return;
        }
        c.sibling.return = c.return, c = c.sibling;
      }
    };
    Aj = function() {
    };
    Bj = function(a, b, c, d) {
      var e = a.memoizedProps;
      if (e !== d) {
        a = b.stateNode, xh(uh.current);
        var f = null;
        switch (c) {
          case "input":
            e = Ya(a, e), d = Ya(a, d), f = [];
            break;
          case "select":
            e = A({}, e, { value: void 0 }), d = A({}, d, { value: void 0 }), f = [];
            break;
          case "textarea":
            e = gb(a, e), d = gb(a, d), f = [];
            break;
          default:
            typeof e.onClick != "function" && typeof d.onClick == "function" && (a.onclick = Bf);
        }
        ub(c, d);
        var g;
        c = null;
        for (l in e)
          if (!d.hasOwnProperty(l) && e.hasOwnProperty(l) && e[l] != null)
            if (l === "style") {
              var h = e[l];
              for (g in h)
                h.hasOwnProperty(g) && (c || (c = {}), c[g] = "");
            } else
              l !== "dangerouslySetInnerHTML" && l !== "children" && l !== "suppressContentEditableWarning" && l !== "suppressHydrationWarning" && l !== "autoFocus" && (ea.hasOwnProperty(l) ? f || (f = []) : (f = f || []).push(l, null));
        for (l in d) {
          var k = d[l];
          if (h = e?.[l], d.hasOwnProperty(l) && k !== h && (k != null || h != null))
            if (l === "style")
              if (h) {
                for (g in h)
                  !h.hasOwnProperty(g) || k && k.hasOwnProperty(g) || (c || (c = {}), c[g] = "");
                for (g in k)
                  k.hasOwnProperty(g) && h[g] !== k[g] && (c || (c = {}), c[g] = k[g]);
              } else
                c || (f || (f = []), f.push(
                  l,
                  c
                )), c = k;
            else
              l === "dangerouslySetInnerHTML" ? (k = k ? k.__html : void 0, h = h ? h.__html : void 0, k != null && h !== k && (f = f || []).push(l, k)) : l === "children" ? typeof k != "string" && typeof k != "number" || (f = f || []).push(l, "" + k) : l !== "suppressContentEditableWarning" && l !== "suppressHydrationWarning" && (ea.hasOwnProperty(l) ? (k != null && l === "onScroll" && D("scroll", a), f || h === k || (f = [])) : (f = f || []).push(l, k));
        }
        c && (f = f || []).push("style", c);
        var l = f;
        (b.updateQueue = l) && (b.flags |= 4);
      }
    };
    Cj = function(a, b, c, d) {
      c !== d && (b.flags |= 4);
    };
    function Dj(a, b) {
      if (!I)
        switch (a.tailMode) {
          case "hidden":
            b = a.tail;
            for (var c = null; b !== null; )
              b.alternate !== null && (c = b), b = b.sibling;
            c === null ? a.tail = null : c.sibling = null;
            break;
          case "collapsed":
            c = a.tail;
            for (var d = null; c !== null; )
              c.alternate !== null && (d = c), c = c.sibling;
            d === null ? b || a.tail === null ? a.tail = null : a.tail.sibling = null : d.sibling = null;
        }
    }
    function S(a) {
      var b = a.alternate !== null && a.alternate.child === a.child, c = 0, d = 0;
      if (b)
        for (var e = a.child; e !== null; )
          c |= e.lanes | e.childLanes, d |= e.subtreeFlags & 14680064, d |= e.flags & 14680064, e.return = a, e = e.sibling;
      else
        for (e = a.child; e !== null; )
          c |= e.lanes | e.childLanes, d |= e.subtreeFlags, d |= e.flags, e.return = a, e = e.sibling;
      return a.subtreeFlags |= d, a.childLanes = c, b;
    }
    function Ej(a, b, c) {
      var d = b.pendingProps;
      switch (wg(b), b.tag) {
        case 2:
        case 16:
        case 15:
        case 0:
        case 11:
        case 7:
        case 8:
        case 12:
        case 9:
        case 14:
          return S(b), null;
        case 1:
          return Zf(b.type) && $f(), S(b), null;
        case 3:
          return d = b.stateNode, zh(), E(Wf), E(H), Eh(), d.pendingContext && (d.context = d.pendingContext, d.pendingContext = null), (a === null || a.child === null) && (Gg(b) ? b.flags |= 4 : a === null || a.memoizedState.isDehydrated && !(b.flags & 256) || (b.flags |= 1024, zg !== null && (Fj(zg), zg = null))), Aj(a, b), S(b), null;
        case 5:
          Bh(b);
          var e = xh(wh.current);
          if (c = b.type, a !== null && b.stateNode != null)
            Bj(a, b, c, d, e), a.ref !== b.ref && (b.flags |= 512, b.flags |= 2097152);
          else {
            if (!d) {
              if (b.stateNode === null)
                throw Error(p(166));
              return S(b), null;
            }
            if (a = xh(uh.current), Gg(b)) {
              d = b.stateNode, c = b.type;
              var f = b.memoizedProps;
              switch (d[Of] = b, d[Pf] = f, a = (b.mode & 1) !== 0, c) {
                case "dialog":
                  D("cancel", d), D("close", d);
                  break;
                case "iframe":
                case "object":
                case "embed":
                  D("load", d);
                  break;
                case "video":
                case "audio":
                  for (e = 0; e < lf.length; e++)
                    D(lf[e], d);
                  break;
                case "source":
                  D("error", d);
                  break;
                case "img":
                case "image":
                case "link":
                  D(
                    "error",
                    d
                  ), D("load", d);
                  break;
                case "details":
                  D("toggle", d);
                  break;
                case "input":
                  Za(d, f), D("invalid", d);
                  break;
                case "select":
                  d._wrapperState = { wasMultiple: !!f.multiple }, D("invalid", d);
                  break;
                case "textarea":
                  hb(d, f), D("invalid", d);
              }
              ub(c, f), e = null;
              for (var g in f)
                if (f.hasOwnProperty(g)) {
                  var h = f[g];
                  g === "children" ? typeof h == "string" ? d.textContent !== h && (f.suppressHydrationWarning !== !0 && Af(d.textContent, h, a), e = ["children", h]) : typeof h == "number" && d.textContent !== "" + h && (f.suppressHydrationWarning !== !0 && Af(
                    d.textContent,
                    h,
                    a
                  ), e = ["children", "" + h]) : ea.hasOwnProperty(g) && h != null && g === "onScroll" && D("scroll", d);
                }
              switch (c) {
                case "input":
                  Va(d), db2(d, f, !0);
                  break;
                case "textarea":
                  Va(d), jb(d);
                  break;
                case "select":
                case "option":
                  break;
                default:
                  typeof f.onClick == "function" && (d.onclick = Bf);
              }
              d = e, b.updateQueue = d, d !== null && (b.flags |= 4);
            } else {
              g = e.nodeType === 9 ? e : e.ownerDocument, a === "http://www.w3.org/1999/xhtml" && (a = kb(c)), a === "http://www.w3.org/1999/xhtml" ? c === "script" ? (a = g.createElement("div"), a.innerHTML = "<script></script>", a = a.removeChild(a.firstChild)) : typeof d.is == "string" ? a = g.createElement(c, { is: d.is }) : (a = g.createElement(c), c === "select" && (g = a, d.multiple ? g.multiple = !0 : d.size && (g.size = d.size))) : a = g.createElementNS(a, c), a[Of] = b, a[Pf] = d, zj(a, b, !1, !1), b.stateNode = a;
              a: {
                switch (g = vb(c, d), c) {
                  case "dialog":
                    D("cancel", a), D("close", a), e = d;
                    break;
                  case "iframe":
                  case "object":
                  case "embed":
                    D("load", a), e = d;
                    break;
                  case "video":
                  case "audio":
                    for (e = 0; e < lf.length; e++)
                      D(lf[e], a);
                    e = d;
                    break;
                  case "source":
                    D("error", a), e = d;
                    break;
                  case "img":
                  case "image":
                  case "link":
                    D(
                      "error",
                      a
                    ), D("load", a), e = d;
                    break;
                  case "details":
                    D("toggle", a), e = d;
                    break;
                  case "input":
                    Za(a, d), e = Ya(a, d), D("invalid", a);
                    break;
                  case "option":
                    e = d;
                    break;
                  case "select":
                    a._wrapperState = { wasMultiple: !!d.multiple }, e = A({}, d, { value: void 0 }), D("invalid", a);
                    break;
                  case "textarea":
                    hb(a, d), e = gb(a, d), D("invalid", a);
                    break;
                  default:
                    e = d;
                }
                ub(c, e), h = e;
                for (f in h)
                  if (h.hasOwnProperty(f)) {
                    var k = h[f];
                    f === "style" ? sb(a, k) : f === "dangerouslySetInnerHTML" ? (k = k ? k.__html : void 0, k != null && nb(a, k)) : f === "children" ? typeof k == "string" ? (c !== "textarea" || k !== "") && ob(a, k) : typeof k == "number" && ob(a, "" + k) : f !== "suppressContentEditableWarning" && f !== "suppressHydrationWarning" && f !== "autoFocus" && (ea.hasOwnProperty(f) ? k != null && f === "onScroll" && D("scroll", a) : k != null && ta(a, f, k, g));
                  }
                switch (c) {
                  case "input":
                    Va(a), db2(a, d, !1);
                    break;
                  case "textarea":
                    Va(a), jb(a);
                    break;
                  case "option":
                    d.value != null && a.setAttribute("value", "" + Sa(d.value));
                    break;
                  case "select":
                    a.multiple = !!d.multiple, f = d.value, f != null ? fb(a, !!d.multiple, f, !1) : d.defaultValue != null && fb(
                      a,
                      !!d.multiple,
                      d.defaultValue,
                      !0
                    );
                    break;
                  default:
                    typeof e.onClick == "function" && (a.onclick = Bf);
                }
                switch (c) {
                  case "button":
                  case "input":
                  case "select":
                  case "textarea":
                    d = !!d.autoFocus;
                    break a;
                  case "img":
                    d = !0;
                    break a;
                  default:
                    d = !1;
                }
              }
              d && (b.flags |= 4);
            }
            b.ref !== null && (b.flags |= 512, b.flags |= 2097152);
          }
          return S(b), null;
        case 6:
          if (a && b.stateNode != null)
            Cj(a, b, a.memoizedProps, d);
          else {
            if (typeof d != "string" && b.stateNode === null)
              throw Error(p(166));
            if (c = xh(wh.current), xh(uh.current), Gg(b)) {
              if (d = b.stateNode, c = b.memoizedProps, d[Of] = b, (f = d.nodeValue !== c) && (a = xg, a !== null))
                switch (a.tag) {
                  case 3:
                    Af(d.nodeValue, c, (a.mode & 1) !== 0);
                    break;
                  case 5:
                    a.memoizedProps.suppressHydrationWarning !== !0 && Af(d.nodeValue, c, (a.mode & 1) !== 0);
                }
              f && (b.flags |= 4);
            } else
              d = (c.nodeType === 9 ? c : c.ownerDocument).createTextNode(d), d[Of] = b, b.stateNode = d;
          }
          return S(b), null;
        case 13:
          if (E(L), d = b.memoizedState, a === null || a.memoizedState !== null && a.memoizedState.dehydrated !== null) {
            if (I && yg !== null && b.mode & 1 && !(b.flags & 128))
              Hg(), Ig(), b.flags |= 98560, f = !1;
            else if (f = Gg(b), d !== null && d.dehydrated !== null) {
              if (a === null) {
                if (!f)
                  throw Error(p(318));
                if (f = b.memoizedState, f = f !== null ? f.dehydrated : null, !f)
                  throw Error(p(317));
                f[Of] = b;
              } else
                Ig(), !(b.flags & 128) && (b.memoizedState = null), b.flags |= 4;
              S(b), f = !1;
            } else
              zg !== null && (Fj(zg), zg = null), f = !0;
            if (!f)
              return b.flags & 65536 ? b : null;
          }
          return b.flags & 128 ? (b.lanes = c, b) : (d = d !== null, d !== (a !== null && a.memoizedState !== null) && d && (b.child.flags |= 8192, b.mode & 1 && (a === null || L.current & 1 ? T === 0 && (T = 3) : tj())), b.updateQueue !== null && (b.flags |= 4), S(b), null);
        case 4:
          return zh(), Aj(a, b), a === null && sf(b.stateNode.containerInfo), S(b), null;
        case 10:
          return ah(b.type._context), S(b), null;
        case 17:
          return Zf(b.type) && $f(), S(b), null;
        case 19:
          if (E(L), f = b.memoizedState, f === null)
            return S(b), null;
          if (d = (b.flags & 128) !== 0, g = f.rendering, g === null)
            if (d)
              Dj(f, !1);
            else {
              if (T !== 0 || a !== null && a.flags & 128)
                for (a = b.child; a !== null; ) {
                  if (g = Ch(a), g !== null) {
                    for (b.flags |= 128, Dj(f, !1), d = g.updateQueue, d !== null && (b.updateQueue = d, b.flags |= 4), b.subtreeFlags = 0, d = c, c = b.child; c !== null; )
                      f = c, a = d, f.flags &= 14680066, g = f.alternate, g === null ? (f.childLanes = 0, f.lanes = a, f.child = null, f.subtreeFlags = 0, f.memoizedProps = null, f.memoizedState = null, f.updateQueue = null, f.dependencies = null, f.stateNode = null) : (f.childLanes = g.childLanes, f.lanes = g.lanes, f.child = g.child, f.subtreeFlags = 0, f.deletions = null, f.memoizedProps = g.memoizedProps, f.memoizedState = g.memoizedState, f.updateQueue = g.updateQueue, f.type = g.type, a = g.dependencies, f.dependencies = a === null ? null : { lanes: a.lanes, firstContext: a.firstContext }), c = c.sibling;
                    return G(L, L.current & 1 | 2), b.child;
                  }
                  a = a.sibling;
                }
              f.tail !== null && B() > Gj && (b.flags |= 128, d = !0, Dj(f, !1), b.lanes = 4194304);
            }
          else {
            if (!d)
              if (a = Ch(g), a !== null) {
                if (b.flags |= 128, d = !0, c = a.updateQueue, c !== null && (b.updateQueue = c, b.flags |= 4), Dj(f, !0), f.tail === null && f.tailMode === "hidden" && !g.alternate && !I)
                  return S(b), null;
              } else
                2 * B() - f.renderingStartTime > Gj && c !== 1073741824 && (b.flags |= 128, d = !0, Dj(f, !1), b.lanes = 4194304);
            f.isBackwards ? (g.sibling = b.child, b.child = g) : (c = f.last, c !== null ? c.sibling = g : b.child = g, f.last = g);
          }
          return f.tail !== null ? (b = f.tail, f.rendering = b, f.tail = b.sibling, f.renderingStartTime = B(), b.sibling = null, c = L.current, G(L, d ? c & 1 | 2 : c & 1), b) : (S(b), null);
        case 22:
        case 23:
          return Hj(), d = b.memoizedState !== null, a !== null && a.memoizedState !== null !== d && (b.flags |= 8192), d && b.mode & 1 ? fj & 1073741824 && (S(b), b.subtreeFlags & 6 && (b.flags |= 8192)) : S(b), null;
        case 24:
          return null;
        case 25:
          return null;
      }
      throw Error(p(156, b.tag));
    }
    function Ij(a, b) {
      switch (wg(b), b.tag) {
        case 1:
          return Zf(b.type) && $f(), a = b.flags, a & 65536 ? (b.flags = a & -65537 | 128, b) : null;
        case 3:
          return zh(), E(Wf), E(H), Eh(), a = b.flags, a & 65536 && !(a & 128) ? (b.flags = a & -65537 | 128, b) : null;
        case 5:
          return Bh(b), null;
        case 13:
          if (E(L), a = b.memoizedState, a !== null && a.dehydrated !== null) {
            if (b.alternate === null)
              throw Error(p(340));
            Ig();
          }
          return a = b.flags, a & 65536 ? (b.flags = a & -65537 | 128, b) : null;
        case 19:
          return E(L), null;
        case 4:
          return zh(), null;
        case 10:
          return ah(b.type._context), null;
        case 22:
        case 23:
          return Hj(), null;
        case 24:
          return null;
        default:
          return null;
      }
    }
    var Jj = !1, U = !1, Kj = typeof WeakSet == "function" ? WeakSet : Set, V = null;
    function Lj(a, b) {
      var c = a.ref;
      if (c !== null)
        if (typeof c == "function")
          try {
            c(null);
          } catch (d) {
            W(a, b, d);
          }
        else
          c.current = null;
    }
    function Mj(a, b, c) {
      try {
        c();
      } catch (d) {
        W(a, b, d);
      }
    }
    var Nj = !1;
    function Oj(a, b) {
      if (Cf = dd, a = Me(), Ne(a)) {
        if ("selectionStart" in a)
          var c = { start: a.selectionStart, end: a.selectionEnd };
        else
          a: {
            c = (c = a.ownerDocument) && c.defaultView || window;
            var d = c.getSelection && c.getSelection();
            if (d && d.rangeCount !== 0) {
              c = d.anchorNode;
              var e = d.anchorOffset, f = d.focusNode;
              d = d.focusOffset;
              try {
                c.nodeType, f.nodeType;
              } catch {
                c = null;
                break a;
              }
              var g = 0, h = -1, k = -1, l = 0, m = 0, q = a, r = null;
              b:
                for (; ; ) {
                  for (var y; q !== c || e !== 0 && q.nodeType !== 3 || (h = g + e), q !== f || d !== 0 && q.nodeType !== 3 || (k = g + d), q.nodeType === 3 && (g += q.nodeValue.length), (y = q.firstChild) !== null; )
                    r = q, q = y;
                  for (; ; ) {
                    if (q === a)
                      break b;
                    if (r === c && ++l === e && (h = g), r === f && ++m === d && (k = g), (y = q.nextSibling) !== null)
                      break;
                    q = r, r = q.parentNode;
                  }
                  q = y;
                }
              c = h === -1 || k === -1 ? null : { start: h, end: k };
            } else
              c = null;
          }
        c = c || { start: 0, end: 0 };
      } else
        c = null;
      for (Df = { focusedElem: a, selectionRange: c }, dd = !1, V = b; V !== null; )
        if (b = V, a = b.child, (b.subtreeFlags & 1028) !== 0 && a !== null)
          a.return = b, V = a;
        else
          for (; V !== null; ) {
            b = V;
            try {
              var n = b.alternate;
              if (b.flags & 1024)
                switch (b.tag) {
                  case 0:
                  case 11:
                  case 15:
                    break;
                  case 1:
                    if (n !== null) {
                      var t = n.memoizedProps, J = n.memoizedState, x = b.stateNode, w = x.getSnapshotBeforeUpdate(b.elementType === b.type ? t : Ci(b.type, t), J);
                      x.__reactInternalSnapshotBeforeUpdate = w;
                    }
                    break;
                  case 3:
                    var u = b.stateNode.containerInfo;
                    u.nodeType === 1 ? u.textContent = "" : u.nodeType === 9 && u.documentElement && u.removeChild(u.documentElement);
                    break;
                  case 5:
                  case 6:
                  case 4:
                  case 17:
                    break;
                  default:
                    throw Error(p(163));
                }
            } catch (F) {
              W(b, b.return, F);
            }
            if (a = b.sibling, a !== null) {
              a.return = b.return, V = a;
              break;
            }
            V = b.return;
          }
      return n = Nj, Nj = !1, n;
    }
    function Pj(a, b, c) {
      var d = b.updateQueue;
      if (d = d !== null ? d.lastEffect : null, d !== null) {
        var e = d = d.next;
        do {
          if ((e.tag & a) === a) {
            var f = e.destroy;
            e.destroy = void 0, f !== void 0 && Mj(b, c, f);
          }
          e = e.next;
        } while (e !== d);
      }
    }
    function Qj(a, b) {
      if (b = b.updateQueue, b = b !== null ? b.lastEffect : null, b !== null) {
        var c = b = b.next;
        do {
          if ((c.tag & a) === a) {
            var d = c.create;
            c.destroy = d();
          }
          c = c.next;
        } while (c !== b);
      }
    }
    function Rj(a) {
      var b = a.ref;
      if (b !== null) {
        var c = a.stateNode;
        switch (a.tag) {
          case 5:
            a = c;
            break;
          default:
            a = c;
        }
        typeof b == "function" ? b(a) : b.current = a;
      }
    }
    function Sj(a) {
      var b = a.alternate;
      b !== null && (a.alternate = null, Sj(b)), a.child = null, a.deletions = null, a.sibling = null, a.tag === 5 && (b = a.stateNode, b !== null && (delete b[Of], delete b[Pf], delete b[of], delete b[Qf], delete b[Rf])), a.stateNode = null, a.return = null, a.dependencies = null, a.memoizedProps = null, a.memoizedState = null, a.pendingProps = null, a.stateNode = null, a.updateQueue = null;
    }
    function Tj(a) {
      return a.tag === 5 || a.tag === 3 || a.tag === 4;
    }
    function Uj(a) {
      a:
        for (; ; ) {
          for (; a.sibling === null; ) {
            if (a.return === null || Tj(a.return))
              return null;
            a = a.return;
          }
          for (a.sibling.return = a.return, a = a.sibling; a.tag !== 5 && a.tag !== 6 && a.tag !== 18; ) {
            if (a.flags & 2 || a.child === null || a.tag === 4)
              continue a;
            a.child.return = a, a = a.child;
          }
          if (!(a.flags & 2))
            return a.stateNode;
        }
    }
    function Vj(a, b, c) {
      var d = a.tag;
      if (d === 5 || d === 6)
        a = a.stateNode, b ? c.nodeType === 8 ? c.parentNode.insertBefore(a, b) : c.insertBefore(a, b) : (c.nodeType === 8 ? (b = c.parentNode, b.insertBefore(a, c)) : (b = c, b.appendChild(a)), c = c._reactRootContainer, c != null || b.onclick !== null || (b.onclick = Bf));
      else if (d !== 4 && (a = a.child, a !== null))
        for (Vj(a, b, c), a = a.sibling; a !== null; )
          Vj(a, b, c), a = a.sibling;
    }
    function Wj(a, b, c) {
      var d = a.tag;
      if (d === 5 || d === 6)
        a = a.stateNode, b ? c.insertBefore(a, b) : c.appendChild(a);
      else if (d !== 4 && (a = a.child, a !== null))
        for (Wj(a, b, c), a = a.sibling; a !== null; )
          Wj(a, b, c), a = a.sibling;
    }
    var X = null, Xj = !1;
    function Yj(a, b, c) {
      for (c = c.child; c !== null; )
        Zj(a, b, c), c = c.sibling;
    }
    function Zj(a, b, c) {
      if (lc && typeof lc.onCommitFiberUnmount == "function")
        try {
          lc.onCommitFiberUnmount(kc, c);
        } catch {
        }
      switch (c.tag) {
        case 5:
          U || Lj(c, b);
        case 6:
          var d = X, e = Xj;
          X = null, Yj(a, b, c), X = d, Xj = e, X !== null && (Xj ? (a = X, c = c.stateNode, a.nodeType === 8 ? a.parentNode.removeChild(c) : a.removeChild(c)) : X.removeChild(c.stateNode));
          break;
        case 18:
          X !== null && (Xj ? (a = X, c = c.stateNode, a.nodeType === 8 ? Kf(a.parentNode, c) : a.nodeType === 1 && Kf(a, c), bd(a)) : Kf(X, c.stateNode));
          break;
        case 4:
          d = X, e = Xj, X = c.stateNode.containerInfo, Xj = !0, Yj(a, b, c), X = d, Xj = e;
          break;
        case 0:
        case 11:
        case 14:
        case 15:
          if (!U && (d = c.updateQueue, d !== null && (d = d.lastEffect, d !== null))) {
            e = d = d.next;
            do {
              var f = e, g = f.destroy;
              f = f.tag, g !== void 0 && (f & 2 || f & 4) && Mj(c, b, g), e = e.next;
            } while (e !== d);
          }
          Yj(a, b, c);
          break;
        case 1:
          if (!U && (Lj(c, b), d = c.stateNode, typeof d.componentWillUnmount == "function"))
            try {
              d.props = c.memoizedProps, d.state = c.memoizedState, d.componentWillUnmount();
            } catch (h) {
              W(c, b, h);
            }
          Yj(a, b, c);
          break;
        case 21:
          Yj(a, b, c);
          break;
        case 22:
          c.mode & 1 ? (U = (d = U) || c.memoizedState !== null, Yj(a, b, c), U = d) : Yj(a, b, c);
          break;
        default:
          Yj(a, b, c);
      }
    }
    function ak(a) {
      var b = a.updateQueue;
      if (b !== null) {
        a.updateQueue = null;
        var c = a.stateNode;
        c === null && (c = a.stateNode = new Kj()), b.forEach(function(b2) {
          var d = bk.bind(null, a, b2);
          c.has(b2) || (c.add(b2), b2.then(d, d));
        });
      }
    }
    function ck(a, b) {
      var c = b.deletions;
      if (c !== null)
        for (var d = 0; d < c.length; d++) {
          var e = c[d];
          try {
            var f = a, g = b, h = g;
            a:
              for (; h !== null; ) {
                switch (h.tag) {
                  case 5:
                    X = h.stateNode, Xj = !1;
                    break a;
                  case 3:
                    X = h.stateNode.containerInfo, Xj = !0;
                    break a;
                  case 4:
                    X = h.stateNode.containerInfo, Xj = !0;
                    break a;
                }
                h = h.return;
              }
            if (X === null)
              throw Error(p(160));
            Zj(f, g, e), X = null, Xj = !1;
            var k = e.alternate;
            k !== null && (k.return = null), e.return = null;
          } catch (l) {
            W(e, b, l);
          }
        }
      if (b.subtreeFlags & 12854)
        for (b = b.child; b !== null; )
          dk(b, a), b = b.sibling;
    }
    function dk(a, b) {
      var c = a.alternate, d = a.flags;
      switch (a.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
          if (ck(b, a), ek(a), d & 4) {
            try {
              Pj(3, a, a.return), Qj(3, a);
            } catch (t) {
              W(a, a.return, t);
            }
            try {
              Pj(5, a, a.return);
            } catch (t) {
              W(a, a.return, t);
            }
          }
          break;
        case 1:
          ck(b, a), ek(a), d & 512 && c !== null && Lj(c, c.return);
          break;
        case 5:
          if (ck(b, a), ek(a), d & 512 && c !== null && Lj(c, c.return), a.flags & 32) {
            var e = a.stateNode;
            try {
              ob(e, "");
            } catch (t) {
              W(a, a.return, t);
            }
          }
          if (d & 4 && (e = a.stateNode, e != null)) {
            var f = a.memoizedProps, g = c !== null ? c.memoizedProps : f, h = a.type, k = a.updateQueue;
            if (a.updateQueue = null, k !== null)
              try {
                h === "input" && f.type === "radio" && f.name != null && ab(e, f), vb(h, g);
                var l = vb(h, f);
                for (g = 0; g < k.length; g += 2) {
                  var m = k[g], q = k[g + 1];
                  m === "style" ? sb(e, q) : m === "dangerouslySetInnerHTML" ? nb(e, q) : m === "children" ? ob(e, q) : ta(e, m, q, l);
                }
                switch (h) {
                  case "input":
                    bb(e, f);
                    break;
                  case "textarea":
                    ib(e, f);
                    break;
                  case "select":
                    var r = e._wrapperState.wasMultiple;
                    e._wrapperState.wasMultiple = !!f.multiple;
                    var y = f.value;
                    y != null ? fb(e, !!f.multiple, y, !1) : r !== !!f.multiple && (f.defaultValue != null ? fb(
                      e,
                      !!f.multiple,
                      f.defaultValue,
                      !0
                    ) : fb(e, !!f.multiple, f.multiple ? [] : "", !1));
                }
                e[Pf] = f;
              } catch (t) {
                W(a, a.return, t);
              }
          }
          break;
        case 6:
          if (ck(b, a), ek(a), d & 4) {
            if (a.stateNode === null)
              throw Error(p(162));
            e = a.stateNode, f = a.memoizedProps;
            try {
              e.nodeValue = f;
            } catch (t) {
              W(a, a.return, t);
            }
          }
          break;
        case 3:
          if (ck(b, a), ek(a), d & 4 && c !== null && c.memoizedState.isDehydrated)
            try {
              bd(b.containerInfo);
            } catch (t) {
              W(a, a.return, t);
            }
          break;
        case 4:
          ck(b, a), ek(a);
          break;
        case 13:
          ck(b, a), ek(a), e = a.child, e.flags & 8192 && (f = e.memoizedState !== null, e.stateNode.isHidden = f, !f || e.alternate !== null && e.alternate.memoizedState !== null || (fk = B())), d & 4 && ak(a);
          break;
        case 22:
          if (m = c !== null && c.memoizedState !== null, a.mode & 1 ? (U = (l = U) || m, ck(b, a), U = l) : ck(b, a), ek(a), d & 8192) {
            if (l = a.memoizedState !== null, (a.stateNode.isHidden = l) && !m && a.mode & 1)
              for (V = a, m = a.child; m !== null; ) {
                for (q = V = m; V !== null; ) {
                  switch (r = V, y = r.child, r.tag) {
                    case 0:
                    case 11:
                    case 14:
                    case 15:
                      Pj(4, r, r.return);
                      break;
                    case 1:
                      Lj(r, r.return);
                      var n = r.stateNode;
                      if (typeof n.componentWillUnmount == "function") {
                        d = r, c = r.return;
                        try {
                          b = d, n.props = b.memoizedProps, n.state = b.memoizedState, n.componentWillUnmount();
                        } catch (t) {
                          W(d, c, t);
                        }
                      }
                      break;
                    case 5:
                      Lj(r, r.return);
                      break;
                    case 22:
                      if (r.memoizedState !== null) {
                        gk(q);
                        continue;
                      }
                  }
                  y !== null ? (y.return = r, V = y) : gk(q);
                }
                m = m.sibling;
              }
            a:
              for (m = null, q = a; ; ) {
                if (q.tag === 5) {
                  if (m === null) {
                    m = q;
                    try {
                      e = q.stateNode, l ? (f = e.style, typeof f.setProperty == "function" ? f.setProperty("display", "none", "important") : f.display = "none") : (h = q.stateNode, k = q.memoizedProps.style, g = k != null && k.hasOwnProperty("display") ? k.display : null, h.style.display = rb("display", g));
                    } catch (t) {
                      W(a, a.return, t);
                    }
                  }
                } else if (q.tag === 6) {
                  if (m === null)
                    try {
                      q.stateNode.nodeValue = l ? "" : q.memoizedProps;
                    } catch (t) {
                      W(a, a.return, t);
                    }
                } else if ((q.tag !== 22 && q.tag !== 23 || q.memoizedState === null || q === a) && q.child !== null) {
                  q.child.return = q, q = q.child;
                  continue;
                }
                if (q === a)
                  break a;
                for (; q.sibling === null; ) {
                  if (q.return === null || q.return === a)
                    break a;
                  m === q && (m = null), q = q.return;
                }
                m === q && (m = null), q.sibling.return = q.return, q = q.sibling;
              }
          }
          break;
        case 19:
          ck(b, a), ek(a), d & 4 && ak(a);
          break;
        case 21:
          break;
        default:
          ck(
            b,
            a
          ), ek(a);
      }
    }
    function ek(a) {
      var b = a.flags;
      if (b & 2) {
        try {
          a: {
            for (var c = a.return; c !== null; ) {
              if (Tj(c)) {
                var d = c;
                break a;
              }
              c = c.return;
            }
            throw Error(p(160));
          }
          switch (d.tag) {
            case 5:
              var e = d.stateNode;
              d.flags & 32 && (ob(e, ""), d.flags &= -33);
              var f = Uj(a);
              Wj(a, f, e);
              break;
            case 3:
            case 4:
              var g = d.stateNode.containerInfo, h = Uj(a);
              Vj(a, h, g);
              break;
            default:
              throw Error(p(161));
          }
        } catch (k) {
          W(a, a.return, k);
        }
        a.flags &= -3;
      }
      b & 4096 && (a.flags &= -4097);
    }
    function hk(a, b, c) {
      V = a, ik(a, b, c);
    }
    function ik(a, b, c) {
      for (var d = (a.mode & 1) !== 0; V !== null; ) {
        var e = V, f = e.child;
        if (e.tag === 22 && d) {
          var g = e.memoizedState !== null || Jj;
          if (!g) {
            var h = e.alternate, k = h !== null && h.memoizedState !== null || U;
            h = Jj;
            var l = U;
            if (Jj = g, (U = k) && !l)
              for (V = e; V !== null; )
                g = V, k = g.child, g.tag === 22 && g.memoizedState !== null ? jk(e) : k !== null ? (k.return = g, V = k) : jk(e);
            for (; f !== null; )
              V = f, ik(f, b, c), f = f.sibling;
            V = e, Jj = h, U = l;
          }
          kk(a, b, c);
        } else
          e.subtreeFlags & 8772 && f !== null ? (f.return = e, V = f) : kk(a, b, c);
      }
    }
    function kk(a) {
      for (; V !== null; ) {
        var b = V;
        if (b.flags & 8772) {
          var c = b.alternate;
          try {
            if (b.flags & 8772)
              switch (b.tag) {
                case 0:
                case 11:
                case 15:
                  U || Qj(5, b);
                  break;
                case 1:
                  var d = b.stateNode;
                  if (b.flags & 4 && !U)
                    if (c === null)
                      d.componentDidMount();
                    else {
                      var e = b.elementType === b.type ? c.memoizedProps : Ci(b.type, c.memoizedProps);
                      d.componentDidUpdate(e, c.memoizedState, d.__reactInternalSnapshotBeforeUpdate);
                    }
                  var f = b.updateQueue;
                  f !== null && sh(b, f, d);
                  break;
                case 3:
                  var g = b.updateQueue;
                  if (g !== null) {
                    if (c = null, b.child !== null)
                      switch (b.child.tag) {
                        case 5:
                          c = b.child.stateNode;
                          break;
                        case 1:
                          c = b.child.stateNode;
                      }
                    sh(b, g, c);
                  }
                  break;
                case 5:
                  var h = b.stateNode;
                  if (c === null && b.flags & 4) {
                    c = h;
                    var k = b.memoizedProps;
                    switch (b.type) {
                      case "button":
                      case "input":
                      case "select":
                      case "textarea":
                        k.autoFocus && c.focus();
                        break;
                      case "img":
                        k.src && (c.src = k.src);
                    }
                  }
                  break;
                case 6:
                  break;
                case 4:
                  break;
                case 12:
                  break;
                case 13:
                  if (b.memoizedState === null) {
                    var l = b.alternate;
                    if (l !== null) {
                      var m = l.memoizedState;
                      if (m !== null) {
                        var q = m.dehydrated;
                        q !== null && bd(q);
                      }
                    }
                  }
                  break;
                case 19:
                case 17:
                case 21:
                case 22:
                case 23:
                case 25:
                  break;
                default:
                  throw Error(p(163));
              }
            U || b.flags & 512 && Rj(b);
          } catch (r) {
            W(b, b.return, r);
          }
        }
        if (b === a) {
          V = null;
          break;
        }
        if (c = b.sibling, c !== null) {
          c.return = b.return, V = c;
          break;
        }
        V = b.return;
      }
    }
    function gk(a) {
      for (; V !== null; ) {
        var b = V;
        if (b === a) {
          V = null;
          break;
        }
        var c = b.sibling;
        if (c !== null) {
          c.return = b.return, V = c;
          break;
        }
        V = b.return;
      }
    }
    function jk(a) {
      for (; V !== null; ) {
        var b = V;
        try {
          switch (b.tag) {
            case 0:
            case 11:
            case 15:
              var c = b.return;
              try {
                Qj(4, b);
              } catch (k) {
                W(b, c, k);
              }
              break;
            case 1:
              var d = b.stateNode;
              if (typeof d.componentDidMount == "function") {
                var e = b.return;
                try {
                  d.componentDidMount();
                } catch (k) {
                  W(b, e, k);
                }
              }
              var f = b.return;
              try {
                Rj(b);
              } catch (k) {
                W(b, f, k);
              }
              break;
            case 5:
              var g = b.return;
              try {
                Rj(b);
              } catch (k) {
                W(b, g, k);
              }
          }
        } catch (k) {
          W(b, b.return, k);
        }
        if (b === a) {
          V = null;
          break;
        }
        var h = b.sibling;
        if (h !== null) {
          h.return = b.return, V = h;
          break;
        }
        V = b.return;
      }
    }
    var lk = Math.ceil, mk = ua.ReactCurrentDispatcher, nk = ua.ReactCurrentOwner, ok = ua.ReactCurrentBatchConfig, K = 0, Q = null, Y = null, Z = 0, fj = 0, ej = Uf(0), T = 0, pk = null, rh = 0, qk = 0, rk = 0, sk = null, tk = null, fk = 0, Gj = 1 / 0, uk = null, Oi = !1, Pi = null, Ri = null, vk = !1, wk = null, xk = 0, yk = 0, zk = null, Ak = -1, Bk = 0;
    function R() {
      return K & 6 ? B() : Ak !== -1 ? Ak : Ak = B();
    }
    function yi(a) {
      return a.mode & 1 ? K & 2 && Z !== 0 ? Z & -Z : Kg.transition !== null ? (Bk === 0 && (Bk = yc()), Bk) : (a = C, a !== 0 || (a = window.event, a = a === void 0 ? 16 : jd(a.type)), a) : 1;
    }
    function gi(a, b, c, d) {
      if (50 < yk)
        throw yk = 0, zk = null, Error(p(185));
      Ac(a, c, d), (!(K & 2) || a !== Q) && (a === Q && (!(K & 2) && (qk |= c), T === 4 && Ck(a, Z)), Dk(a, d), c === 1 && K === 0 && !(b.mode & 1) && (Gj = B() + 500, fg && jg()));
    }
    function Dk(a, b) {
      var c = a.callbackNode;
      wc(a, b);
      var d = uc(a, a === Q ? Z : 0);
      if (d === 0)
        c !== null && bc(c), a.callbackNode = null, a.callbackPriority = 0;
      else if (b = d & -d, a.callbackPriority !== b) {
        if (c != null && bc(c), b === 1)
          a.tag === 0 ? ig(Ek.bind(null, a)) : hg(Ek.bind(null, a)), Jf(function() {
            !(K & 6) && jg();
          }), c = null;
        else {
          switch (Dc(d)) {
            case 1:
              c = fc;
              break;
            case 4:
              c = gc;
              break;
            case 16:
              c = hc;
              break;
            case 536870912:
              c = jc;
              break;
            default:
              c = hc;
          }
          c = Fk(c, Gk.bind(null, a));
        }
        a.callbackPriority = b, a.callbackNode = c;
      }
    }
    function Gk(a, b) {
      if (Ak = -1, Bk = 0, K & 6)
        throw Error(p(327));
      var c = a.callbackNode;
      if (Hk() && a.callbackNode !== c)
        return null;
      var d = uc(a, a === Q ? Z : 0);
      if (d === 0)
        return null;
      if (d & 30 || d & a.expiredLanes || b)
        b = Ik(a, d);
      else {
        b = d;
        var e = K;
        K |= 2;
        var f = Jk();
        (Q !== a || Z !== b) && (uk = null, Gj = B() + 500, Kk(a, b));
        do
          try {
            Lk();
            break;
          } catch (h) {
            Mk(a, h);
          }
        while (1);
        $g(), mk.current = f, K = e, Y !== null ? b = 0 : (Q = null, Z = 0, b = T);
      }
      if (b !== 0) {
        if (b === 2 && (e = xc(a), e !== 0 && (d = e, b = Nk(a, e))), b === 1)
          throw c = pk, Kk(a, 0), Ck(a, d), Dk(a, B()), c;
        if (b === 6)
          Ck(a, d);
        else {
          if (e = a.current.alternate, !(d & 30) && !Ok(e) && (b = Ik(a, d), b === 2 && (f = xc(a), f !== 0 && (d = f, b = Nk(a, f))), b === 1))
            throw c = pk, Kk(a, 0), Ck(a, d), Dk(a, B()), c;
          switch (a.finishedWork = e, a.finishedLanes = d, b) {
            case 0:
            case 1:
              throw Error(p(345));
            case 2:
              Pk(a, tk, uk);
              break;
            case 3:
              if (Ck(a, d), (d & 130023424) === d && (b = fk + 500 - B(), 10 < b)) {
                if (uc(a, 0) !== 0)
                  break;
                if (e = a.suspendedLanes, (e & d) !== d) {
                  R(), a.pingedLanes |= a.suspendedLanes & e;
                  break;
                }
                a.timeoutHandle = Ff(Pk.bind(null, a, tk, uk), b);
                break;
              }
              Pk(a, tk, uk);
              break;
            case 4:
              if (Ck(a, d), (d & 4194240) === d)
                break;
              for (b = a.eventTimes, e = -1; 0 < d; ) {
                var g = 31 - oc(d);
                f = 1 << g, g = b[g], g > e && (e = g), d &= ~f;
              }
              if (d = e, d = B() - d, d = (120 > d ? 120 : 480 > d ? 480 : 1080 > d ? 1080 : 1920 > d ? 1920 : 3e3 > d ? 3e3 : 4320 > d ? 4320 : 1960 * lk(d / 1960)) - d, 10 < d) {
                a.timeoutHandle = Ff(Pk.bind(null, a, tk, uk), d);
                break;
              }
              Pk(a, tk, uk);
              break;
            case 5:
              Pk(a, tk, uk);
              break;
            default:
              throw Error(p(329));
          }
        }
      }
      return Dk(a, B()), a.callbackNode === c ? Gk.bind(null, a) : null;
    }
    function Nk(a, b) {
      var c = sk;
      return a.current.memoizedState.isDehydrated && (Kk(a, b).flags |= 256), a = Ik(a, b), a !== 2 && (b = tk, tk = c, b !== null && Fj(b)), a;
    }
    function Fj(a) {
      tk === null ? tk = a : tk.push.apply(tk, a);
    }
    function Ok(a) {
      for (var b = a; ; ) {
        if (b.flags & 16384) {
          var c = b.updateQueue;
          if (c !== null && (c = c.stores, c !== null))
            for (var d = 0; d < c.length; d++) {
              var e = c[d], f = e.getSnapshot;
              e = e.value;
              try {
                if (!He(f(), e))
                  return !1;
              } catch {
                return !1;
              }
            }
        }
        if (c = b.child, b.subtreeFlags & 16384 && c !== null)
          c.return = b, b = c;
        else {
          if (b === a)
            break;
          for (; b.sibling === null; ) {
            if (b.return === null || b.return === a)
              return !0;
            b = b.return;
          }
          b.sibling.return = b.return, b = b.sibling;
        }
      }
      return !0;
    }
    function Ck(a, b) {
      for (b &= ~rk, b &= ~qk, a.suspendedLanes |= b, a.pingedLanes &= ~b, a = a.expirationTimes; 0 < b; ) {
        var c = 31 - oc(b), d = 1 << c;
        a[c] = -1, b &= ~d;
      }
    }
    function Ek(a) {
      if (K & 6)
        throw Error(p(327));
      Hk();
      var b = uc(a, 0);
      if (!(b & 1))
        return Dk(a, B()), null;
      var c = Ik(a, b);
      if (a.tag !== 0 && c === 2) {
        var d = xc(a);
        d !== 0 && (b = d, c = Nk(a, d));
      }
      if (c === 1)
        throw c = pk, Kk(a, 0), Ck(a, b), Dk(a, B()), c;
      if (c === 6)
        throw Error(p(345));
      return a.finishedWork = a.current.alternate, a.finishedLanes = b, Pk(a, tk, uk), Dk(a, B()), null;
    }
    function Qk(a, b) {
      var c = K;
      K |= 1;
      try {
        return a(b);
      } finally {
        K = c, K === 0 && (Gj = B() + 500, fg && jg());
      }
    }
    function Rk(a) {
      wk !== null && wk.tag === 0 && !(K & 6) && Hk();
      var b = K;
      K |= 1;
      var c = ok.transition, d = C;
      try {
        if (ok.transition = null, C = 1, a)
          return a();
      } finally {
        C = d, ok.transition = c, K = b, !(K & 6) && jg();
      }
    }
    function Hj() {
      fj = ej.current, E(ej);
    }
    function Kk(a, b) {
      a.finishedWork = null, a.finishedLanes = 0;
      var c = a.timeoutHandle;
      if (c !== -1 && (a.timeoutHandle = -1, Gf(c)), Y !== null)
        for (c = Y.return; c !== null; ) {
          var d = c;
          switch (wg(d), d.tag) {
            case 1:
              d = d.type.childContextTypes, d != null && $f();
              break;
            case 3:
              zh(), E(Wf), E(H), Eh();
              break;
            case 5:
              Bh(d);
              break;
            case 4:
              zh();
              break;
            case 13:
              E(L);
              break;
            case 19:
              E(L);
              break;
            case 10:
              ah(d.type._context);
              break;
            case 22:
            case 23:
              Hj();
          }
          c = c.return;
        }
      if (Q = a, Y = a = Pg(a.current, null), Z = fj = b, T = 0, pk = null, rk = qk = rh = 0, tk = sk = null, fh !== null) {
        for (b = 0; b < fh.length; b++)
          if (c = fh[b], d = c.interleaved, d !== null) {
            c.interleaved = null;
            var e = d.next, f = c.pending;
            if (f !== null) {
              var g = f.next;
              f.next = e, d.next = g;
            }
            c.pending = d;
          }
        fh = null;
      }
      return a;
    }
    function Mk(a, b) {
      do {
        var c = Y;
        try {
          if ($g(), Fh.current = Rh, Ih) {
            for (var d = M.memoizedState; d !== null; ) {
              var e = d.queue;
              e !== null && (e.pending = null), d = d.next;
            }
            Ih = !1;
          }
          if (Hh = 0, O = N = M = null, Jh = !1, Kh = 0, nk.current = null, c === null || c.return === null) {
            T = 1, pk = b, Y = null;
            break;
          }
          a: {
            var f = a, g = c.return, h = c, k = b;
            if (b = Z, h.flags |= 32768, k !== null && typeof k == "object" && typeof k.then == "function") {
              var l = k, m = h, q = m.tag;
              if (!(m.mode & 1) && (q === 0 || q === 11 || q === 15)) {
                var r = m.alternate;
                r ? (m.updateQueue = r.updateQueue, m.memoizedState = r.memoizedState, m.lanes = r.lanes) : (m.updateQueue = null, m.memoizedState = null);
              }
              var y = Ui(g);
              if (y !== null) {
                y.flags &= -257, Vi(y, g, h, f, b), y.mode & 1 && Si(f, l, b), b = y, k = l;
                var n = b.updateQueue;
                if (n === null) {
                  var t = /* @__PURE__ */ new Set();
                  t.add(k), b.updateQueue = t;
                } else
                  n.add(k);
                break a;
              } else {
                if (!(b & 1)) {
                  Si(f, l, b), tj();
                  break a;
                }
                k = Error(p(426));
              }
            } else if (I && h.mode & 1) {
              var J = Ui(g);
              if (J !== null) {
                !(J.flags & 65536) && (J.flags |= 256), Vi(J, g, h, f, b), Jg(Ji(k, h));
                break a;
              }
            }
            f = k = Ji(k, h), T !== 4 && (T = 2), sk === null ? sk = [f] : sk.push(f), f = g;
            do {
              switch (f.tag) {
                case 3:
                  f.flags |= 65536, b &= -b, f.lanes |= b;
                  var x = Ni(f, k, b);
                  ph(f, x);
                  break a;
                case 1:
                  h = k;
                  var w = f.type, u = f.stateNode;
                  if (!(f.flags & 128) && (typeof w.getDerivedStateFromError == "function" || u !== null && typeof u.componentDidCatch == "function" && (Ri === null || !Ri.has(u)))) {
                    f.flags |= 65536, b &= -b, f.lanes |= b;
                    var F = Qi(f, h, b);
                    ph(f, F);
                    break a;
                  }
              }
              f = f.return;
            } while (f !== null);
          }
          Sk(c);
        } catch (na) {
          b = na, Y === c && c !== null && (Y = c = c.return);
          continue;
        }
        break;
      } while (1);
    }
    function Jk() {
      var a = mk.current;
      return mk.current = Rh, a === null ? Rh : a;
    }
    function tj() {
      (T === 0 || T === 3 || T === 2) && (T = 4), Q === null || !(rh & 268435455) && !(qk & 268435455) || Ck(Q, Z);
    }
    function Ik(a, b) {
      var c = K;
      K |= 2;
      var d = Jk();
      (Q !== a || Z !== b) && (uk = null, Kk(a, b));
      do
        try {
          Tk();
          break;
        } catch (e) {
          Mk(a, e);
        }
      while (1);
      if ($g(), K = c, mk.current = d, Y !== null)
        throw Error(p(261));
      return Q = null, Z = 0, T;
    }
    function Tk() {
      for (; Y !== null; )
        Uk(Y);
    }
    function Lk() {
      for (; Y !== null && !cc(); )
        Uk(Y);
    }
    function Uk(a) {
      var b = Vk(a.alternate, a, fj);
      a.memoizedProps = a.pendingProps, b === null ? Sk(a) : Y = b, nk.current = null;
    }
    function Sk(a) {
      var b = a;
      do {
        var c = b.alternate;
        if (a = b.return, b.flags & 32768) {
          if (c = Ij(c, b), c !== null) {
            c.flags &= 32767, Y = c;
            return;
          }
          if (a !== null)
            a.flags |= 32768, a.subtreeFlags = 0, a.deletions = null;
          else {
            T = 6, Y = null;
            return;
          }
        } else if (c = Ej(c, b, fj), c !== null) {
          Y = c;
          return;
        }
        if (b = b.sibling, b !== null) {
          Y = b;
          return;
        }
        Y = b = a;
      } while (b !== null);
      T === 0 && (T = 5);
    }
    function Pk(a, b, c) {
      var d = C, e = ok.transition;
      try {
        ok.transition = null, C = 1, Wk(a, b, c, d);
      } finally {
        ok.transition = e, C = d;
      }
      return null;
    }
    function Wk(a, b, c, d) {
      do
        Hk();
      while (wk !== null);
      if (K & 6)
        throw Error(p(327));
      c = a.finishedWork;
      var e = a.finishedLanes;
      if (c === null)
        return null;
      if (a.finishedWork = null, a.finishedLanes = 0, c === a.current)
        throw Error(p(177));
      a.callbackNode = null, a.callbackPriority = 0;
      var f = c.lanes | c.childLanes;
      if (Bc(a, f), a === Q && (Y = Q = null, Z = 0), !(c.subtreeFlags & 2064) && !(c.flags & 2064) || vk || (vk = !0, Fk(hc, function() {
        return Hk(), null;
      })), f = (c.flags & 15990) !== 0, c.subtreeFlags & 15990 || f) {
        f = ok.transition, ok.transition = null;
        var g = C;
        C = 1;
        var h = K;
        K |= 4, nk.current = null, Oj(a, c), dk(c, a), Oe(Df), dd = !!Cf, Df = Cf = null, a.current = c, hk(c, a, e), dc(), K = h, C = g, ok.transition = f;
      } else
        a.current = c;
      if (vk && (vk = !1, wk = a, xk = e), f = a.pendingLanes, f === 0 && (Ri = null), mc(c.stateNode, d), Dk(a, B()), b !== null)
        for (d = a.onRecoverableError, c = 0; c < b.length; c++)
          e = b[c], d(e.value, { componentStack: e.stack, digest: e.digest });
      if (Oi)
        throw Oi = !1, a = Pi, Pi = null, a;
      return xk & 1 && a.tag !== 0 && Hk(), f = a.pendingLanes, f & 1 ? a === zk ? yk++ : (yk = 0, zk = a) : yk = 0, jg(), null;
    }
    function Hk() {
      if (wk !== null) {
        var a = Dc(xk), b = ok.transition, c = C;
        try {
          if (ok.transition = null, C = 16 > a ? 16 : a, wk === null)
            var d = !1;
          else {
            if (a = wk, wk = null, xk = 0, K & 6)
              throw Error(p(331));
            var e = K;
            for (K |= 4, V = a.current; V !== null; ) {
              var f = V, g = f.child;
              if (V.flags & 16) {
                var h = f.deletions;
                if (h !== null) {
                  for (var k = 0; k < h.length; k++) {
                    var l = h[k];
                    for (V = l; V !== null; ) {
                      var m = V;
                      switch (m.tag) {
                        case 0:
                        case 11:
                        case 15:
                          Pj(8, m, f);
                      }
                      var q = m.child;
                      if (q !== null)
                        q.return = m, V = q;
                      else
                        for (; V !== null; ) {
                          m = V;
                          var r = m.sibling, y = m.return;
                          if (Sj(m), m === l) {
                            V = null;
                            break;
                          }
                          if (r !== null) {
                            r.return = y, V = r;
                            break;
                          }
                          V = y;
                        }
                    }
                  }
                  var n = f.alternate;
                  if (n !== null) {
                    var t = n.child;
                    if (t !== null) {
                      n.child = null;
                      do {
                        var J = t.sibling;
                        t.sibling = null, t = J;
                      } while (t !== null);
                    }
                  }
                  V = f;
                }
              }
              if (f.subtreeFlags & 2064 && g !== null)
                g.return = f, V = g;
              else
                b:
                  for (; V !== null; ) {
                    if (f = V, f.flags & 2048)
                      switch (f.tag) {
                        case 0:
                        case 11:
                        case 15:
                          Pj(9, f, f.return);
                      }
                    var x = f.sibling;
                    if (x !== null) {
                      x.return = f.return, V = x;
                      break b;
                    }
                    V = f.return;
                  }
            }
            var w = a.current;
            for (V = w; V !== null; ) {
              g = V;
              var u = g.child;
              if (g.subtreeFlags & 2064 && u !== null)
                u.return = g, V = u;
              else
                b:
                  for (g = w; V !== null; ) {
                    if (h = V, h.flags & 2048)
                      try {
                        switch (h.tag) {
                          case 0:
                          case 11:
                          case 15:
                            Qj(9, h);
                        }
                      } catch (na) {
                        W(h, h.return, na);
                      }
                    if (h === g) {
                      V = null;
                      break b;
                    }
                    var F = h.sibling;
                    if (F !== null) {
                      F.return = h.return, V = F;
                      break b;
                    }
                    V = h.return;
                  }
            }
            if (K = e, jg(), lc && typeof lc.onPostCommitFiberRoot == "function")
              try {
                lc.onPostCommitFiberRoot(kc, a);
              } catch {
              }
            d = !0;
          }
          return d;
        } finally {
          C = c, ok.transition = b;
        }
      }
      return !1;
    }
    function Xk(a, b, c) {
      b = Ji(c, b), b = Ni(a, b, 1), a = nh(a, b, 1), b = R(), a !== null && (Ac(a, 1, b), Dk(a, b));
    }
    function W(a, b, c) {
      if (a.tag === 3)
        Xk(a, a, c);
      else
        for (; b !== null; ) {
          if (b.tag === 3) {
            Xk(b, a, c);
            break;
          } else if (b.tag === 1) {
            var d = b.stateNode;
            if (typeof b.type.getDerivedStateFromError == "function" || typeof d.componentDidCatch == "function" && (Ri === null || !Ri.has(d))) {
              a = Ji(c, a), a = Qi(b, a, 1), b = nh(b, a, 1), a = R(), b !== null && (Ac(b, 1, a), Dk(b, a));
              break;
            }
          }
          b = b.return;
        }
    }
    function Ti(a, b, c) {
      var d = a.pingCache;
      d !== null && d.delete(b), b = R(), a.pingedLanes |= a.suspendedLanes & c, Q === a && (Z & c) === c && (T === 4 || T === 3 && (Z & 130023424) === Z && 500 > B() - fk ? Kk(a, 0) : rk |= c), Dk(a, b);
    }
    function Yk(a, b) {
      b === 0 && (a.mode & 1 ? (b = sc, sc <<= 1, !(sc & 130023424) && (sc = 4194304)) : b = 1);
      var c = R();
      a = ih(a, b), a !== null && (Ac(a, b, c), Dk(a, c));
    }
    function uj(a) {
      var b = a.memoizedState, c = 0;
      b !== null && (c = b.retryLane), Yk(a, c);
    }
    function bk(a, b) {
      var c = 0;
      switch (a.tag) {
        case 13:
          var d = a.stateNode, e = a.memoizedState;
          e !== null && (c = e.retryLane);
          break;
        case 19:
          d = a.stateNode;
          break;
        default:
          throw Error(p(314));
      }
      d !== null && d.delete(b), Yk(a, c);
    }
    var Vk;
    Vk = function(a, b, c) {
      if (a !== null)
        if (a.memoizedProps !== b.pendingProps || Wf.current)
          dh = !0;
        else {
          if (!(a.lanes & c) && !(b.flags & 128))
            return dh = !1, yj(a, b, c);
          dh = !!(a.flags & 131072);
        }
      else
        dh = !1, I && b.flags & 1048576 && ug(b, ng, b.index);
      switch (b.lanes = 0, b.tag) {
        case 2:
          var d = b.type;
          ij(a, b), a = b.pendingProps;
          var e = Yf(b, H.current);
          ch(b, c), e = Nh(null, b, d, a, e, c);
          var f = Sh();
          return b.flags |= 1, typeof e == "object" && e !== null && typeof e.render == "function" && e.$$typeof === void 0 ? (b.tag = 1, b.memoizedState = null, b.updateQueue = null, Zf(d) ? (f = !0, cg(b)) : f = !1, b.memoizedState = e.state !== null && e.state !== void 0 ? e.state : null, kh(b), e.updater = Ei, b.stateNode = e, e._reactInternals = b, Ii(b, d, a, c), b = jj(null, b, d, !0, f, c)) : (b.tag = 0, I && f && vg(b), Xi(null, b, e, c), b = b.child), b;
        case 16:
          d = b.elementType;
          a: {
            switch (ij(a, b), a = b.pendingProps, e = d._init, d = e(d._payload), b.type = d, e = b.tag = Zk(d), a = Ci(d, a), e) {
              case 0:
                b = cj(null, b, d, a, c);
                break a;
              case 1:
                b = hj(null, b, d, a, c);
                break a;
              case 11:
                b = Yi(null, b, d, a, c);
                break a;
              case 14:
                b = $i(null, b, d, Ci(d.type, a), c);
                break a;
            }
            throw Error(p(
              306,
              d,
              ""
            ));
          }
          return b;
        case 0:
          return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Ci(d, e), cj(a, b, d, e, c);
        case 1:
          return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Ci(d, e), hj(a, b, d, e, c);
        case 3:
          a: {
            if (kj(b), a === null)
              throw Error(p(387));
            d = b.pendingProps, f = b.memoizedState, e = f.element, lh(a, b), qh(b, d, null, c);
            var g = b.memoizedState;
            if (d = g.element, f.isDehydrated)
              if (f = { element: d, isDehydrated: !1, cache: g.cache, pendingSuspenseBoundaries: g.pendingSuspenseBoundaries, transitions: g.transitions }, b.updateQueue.baseState = f, b.memoizedState = f, b.flags & 256) {
                e = Ji(Error(p(423)), b), b = lj(a, b, d, c, e);
                break a;
              } else if (d !== e) {
                e = Ji(Error(p(424)), b), b = lj(a, b, d, c, e);
                break a;
              } else
                for (yg = Lf(b.stateNode.containerInfo.firstChild), xg = b, I = !0, zg = null, c = Vg(b, null, d, c), b.child = c; c; )
                  c.flags = c.flags & -3 | 4096, c = c.sibling;
            else {
              if (Ig(), d === e) {
                b = Zi(a, b, c);
                break a;
              }
              Xi(a, b, d, c);
            }
            b = b.child;
          }
          return b;
        case 5:
          return Ah(b), a === null && Eg(b), d = b.type, e = b.pendingProps, f = a !== null ? a.memoizedProps : null, g = e.children, Ef(d, e) ? g = null : f !== null && Ef(d, f) && (b.flags |= 32), gj(a, b), Xi(a, b, g, c), b.child;
        case 6:
          return a === null && Eg(b), null;
        case 13:
          return oj(a, b, c);
        case 4:
          return yh(b, b.stateNode.containerInfo), d = b.pendingProps, a === null ? b.child = Ug(b, null, d, c) : Xi(a, b, d, c), b.child;
        case 11:
          return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Ci(d, e), Yi(a, b, d, e, c);
        case 7:
          return Xi(a, b, b.pendingProps, c), b.child;
        case 8:
          return Xi(a, b, b.pendingProps.children, c), b.child;
        case 12:
          return Xi(a, b, b.pendingProps.children, c), b.child;
        case 10:
          a: {
            if (d = b.type._context, e = b.pendingProps, f = b.memoizedProps, g = e.value, G(Wg, d._currentValue), d._currentValue = g, f !== null)
              if (He(f.value, g)) {
                if (f.children === e.children && !Wf.current) {
                  b = Zi(a, b, c);
                  break a;
                }
              } else
                for (f = b.child, f !== null && (f.return = b); f !== null; ) {
                  var h = f.dependencies;
                  if (h !== null) {
                    g = f.child;
                    for (var k = h.firstContext; k !== null; ) {
                      if (k.context === d) {
                        if (f.tag === 1) {
                          k = mh(-1, c & -c), k.tag = 2;
                          var l = f.updateQueue;
                          if (l !== null) {
                            l = l.shared;
                            var m = l.pending;
                            m === null ? k.next = k : (k.next = m.next, m.next = k), l.pending = k;
                          }
                        }
                        f.lanes |= c, k = f.alternate, k !== null && (k.lanes |= c), bh(
                          f.return,
                          c,
                          b
                        ), h.lanes |= c;
                        break;
                      }
                      k = k.next;
                    }
                  } else if (f.tag === 10)
                    g = f.type === b.type ? null : f.child;
                  else if (f.tag === 18) {
                    if (g = f.return, g === null)
                      throw Error(p(341));
                    g.lanes |= c, h = g.alternate, h !== null && (h.lanes |= c), bh(g, c, b), g = f.sibling;
                  } else
                    g = f.child;
                  if (g !== null)
                    g.return = f;
                  else
                    for (g = f; g !== null; ) {
                      if (g === b) {
                        g = null;
                        break;
                      }
                      if (f = g.sibling, f !== null) {
                        f.return = g.return, g = f;
                        break;
                      }
                      g = g.return;
                    }
                  f = g;
                }
            Xi(a, b, e.children, c), b = b.child;
          }
          return b;
        case 9:
          return e = b.type, d = b.pendingProps.children, ch(b, c), e = eh(e), d = d(e), b.flags |= 1, Xi(a, b, d, c), b.child;
        case 14:
          return d = b.type, e = Ci(d, b.pendingProps), e = Ci(d.type, e), $i(a, b, d, e, c);
        case 15:
          return bj(a, b, b.type, b.pendingProps, c);
        case 17:
          return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Ci(d, e), ij(a, b), b.tag = 1, Zf(d) ? (a = !0, cg(b)) : a = !1, ch(b, c), Gi(b, d, e), Ii(b, d, e, c), jj(null, b, d, !0, a, c);
        case 19:
          return xj(a, b, c);
        case 22:
          return dj(a, b, c);
      }
      throw Error(p(156, b.tag));
    };
    function Fk(a, b) {
      return ac(a, b);
    }
    function $k(a, b, c, d) {
      this.tag = a, this.key = c, this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null, this.index = 0, this.ref = null, this.pendingProps = b, this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null, this.mode = d, this.subtreeFlags = this.flags = 0, this.deletions = null, this.childLanes = this.lanes = 0, this.alternate = null;
    }
    function Bg(a, b, c, d) {
      return new $k(a, b, c, d);
    }
    function aj(a) {
      return a = a.prototype, !(!a || !a.isReactComponent);
    }
    function Zk(a) {
      if (typeof a == "function")
        return aj(a) ? 1 : 0;
      if (a != null) {
        if (a = a.$$typeof, a === Da)
          return 11;
        if (a === Ga)
          return 14;
      }
      return 2;
    }
    function Pg(a, b) {
      var c = a.alternate;
      return c === null ? (c = Bg(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.type = a.type, c.flags = 0, c.subtreeFlags = 0, c.deletions = null), c.flags = a.flags & 14680064, c.childLanes = a.childLanes, c.lanes = a.lanes, c.child = a.child, c.memoizedProps = a.memoizedProps, c.memoizedState = a.memoizedState, c.updateQueue = a.updateQueue, b = a.dependencies, c.dependencies = b === null ? null : { lanes: b.lanes, firstContext: b.firstContext }, c.sibling = a.sibling, c.index = a.index, c.ref = a.ref, c;
    }
    function Rg(a, b, c, d, e, f) {
      var g = 2;
      if (d = a, typeof a == "function")
        aj(a) && (g = 1);
      else if (typeof a == "string")
        g = 5;
      else
        a:
          switch (a) {
            case ya:
              return Tg(c.children, e, f, b);
            case za:
              g = 8, e |= 8;
              break;
            case Aa:
              return a = Bg(12, c, b, e | 2), a.elementType = Aa, a.lanes = f, a;
            case Ea:
              return a = Bg(13, c, b, e), a.elementType = Ea, a.lanes = f, a;
            case Fa:
              return a = Bg(19, c, b, e), a.elementType = Fa, a.lanes = f, a;
            case Ia:
              return pj(c, e, f, b);
            default:
              if (typeof a == "object" && a !== null)
                switch (a.$$typeof) {
                  case Ba:
                    g = 10;
                    break a;
                  case Ca:
                    g = 9;
                    break a;
                  case Da:
                    g = 11;
                    break a;
                  case Ga:
                    g = 14;
                    break a;
                  case Ha:
                    g = 16, d = null;
                    break a;
                }
              throw Error(p(130, a == null ? a : typeof a, ""));
          }
      return b = Bg(g, c, b, e), b.elementType = a, b.type = d, b.lanes = f, b;
    }
    function Tg(a, b, c, d) {
      return a = Bg(7, a, d, b), a.lanes = c, a;
    }
    function pj(a, b, c, d) {
      return a = Bg(22, a, d, b), a.elementType = Ia, a.lanes = c, a.stateNode = { isHidden: !1 }, a;
    }
    function Qg(a, b, c) {
      return a = Bg(6, a, null, b), a.lanes = c, a;
    }
    function Sg(a, b, c) {
      return b = Bg(4, a.children !== null ? a.children : [], a.key, b), b.lanes = c, b.stateNode = { containerInfo: a.containerInfo, pendingChildren: null, implementation: a.implementation }, b;
    }
    function al(a, b, c, d, e) {
      this.tag = b, this.containerInfo = a, this.finishedWork = this.pingCache = this.current = this.pendingChildren = null, this.timeoutHandle = -1, this.callbackNode = this.pendingContext = this.context = null, this.callbackPriority = 0, this.eventTimes = zc(0), this.expirationTimes = zc(-1), this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0, this.entanglements = zc(0), this.identifierPrefix = d, this.onRecoverableError = e, this.mutableSourceEagerHydrationData = null;
    }
    function bl(a, b, c, d, e, f, g, h, k) {
      return a = new al(a, b, c, h, k), b === 1 ? (b = 1, f === !0 && (b |= 8)) : b = 0, f = Bg(3, null, null, b), a.current = f, f.stateNode = a, f.memoizedState = { element: d, isDehydrated: c, cache: null, transitions: null, pendingSuspenseBoundaries: null }, kh(f), a;
    }
    function cl(a, b, c) {
      var d = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : null;
      return { $$typeof: wa, key: d == null ? null : "" + d, children: a, containerInfo: b, implementation: c };
    }
    function dl(a) {
      if (!a)
        return Vf;
      a = a._reactInternals;
      a: {
        if (Vb(a) !== a || a.tag !== 1)
          throw Error(p(170));
        var b = a;
        do {
          switch (b.tag) {
            case 3:
              b = b.stateNode.context;
              break a;
            case 1:
              if (Zf(b.type)) {
                b = b.stateNode.__reactInternalMemoizedMergedChildContext;
                break a;
              }
          }
          b = b.return;
        } while (b !== null);
        throw Error(p(171));
      }
      if (a.tag === 1) {
        var c = a.type;
        if (Zf(c))
          return bg(a, c, b);
      }
      return b;
    }
    function el(a, b, c, d, e, f, g, h, k) {
      return a = bl(c, d, !0, a, e, f, g, h, k), a.context = dl(null), c = a.current, d = R(), e = yi(c), f = mh(d, e), f.callback = b ?? null, nh(c, f, e), a.current.lanes = e, Ac(a, e, d), Dk(a, d), a;
    }
    function fl(a, b, c, d) {
      var e = b.current, f = R(), g = yi(e);
      return c = dl(c), b.context === null ? b.context = c : b.pendingContext = c, b = mh(f, g), b.payload = { element: a }, d = d === void 0 ? null : d, d !== null && (b.callback = d), a = nh(e, b, g), a !== null && (gi(a, e, g, f), oh(a, e, g)), g;
    }
    function gl(a) {
      if (a = a.current, !a.child)
        return null;
      switch (a.child.tag) {
        case 5:
          return a.child.stateNode;
        default:
          return a.child.stateNode;
      }
    }
    function hl(a, b) {
      if (a = a.memoizedState, a !== null && a.dehydrated !== null) {
        var c = a.retryLane;
        a.retryLane = c !== 0 && c < b ? c : b;
      }
    }
    function il(a, b) {
      hl(a, b), (a = a.alternate) && hl(a, b);
    }
    function jl() {
      return null;
    }
    var kl = typeof reportError == "function" ? reportError : function(a) {
      console.error(a);
    };
    function ll(a) {
      this._internalRoot = a;
    }
    ml.prototype.render = ll.prototype.render = function(a) {
      var b = this._internalRoot;
      if (b === null)
        throw Error(p(409));
      fl(a, b, null, null);
    };
    ml.prototype.unmount = ll.prototype.unmount = function() {
      var a = this._internalRoot;
      if (a !== null) {
        this._internalRoot = null;
        var b = a.containerInfo;
        Rk(function() {
          fl(null, a, null, null);
        }), b[uf] = null;
      }
    };
    function ml(a) {
      this._internalRoot = a;
    }
    ml.prototype.unstable_scheduleHydration = function(a) {
      if (a) {
        var b = Hc();
        a = { blockedOn: null, target: a, priority: b };
        for (var c = 0; c < Qc.length && b !== 0 && b < Qc[c].priority; c++)
          ;
        Qc.splice(c, 0, a), c === 0 && Vc(a);
      }
    };
    function nl(a) {
      return !(!a || a.nodeType !== 1 && a.nodeType !== 9 && a.nodeType !== 11);
    }
    function ol(a) {
      return !(!a || a.nodeType !== 1 && a.nodeType !== 9 && a.nodeType !== 11 && (a.nodeType !== 8 || a.nodeValue !== " react-mount-point-unstable "));
    }
    function pl() {
    }
    function ql(a, b, c, d, e) {
      if (e) {
        if (typeof d == "function") {
          var f = d;
          d = function() {
            var a2 = gl(g);
            f.call(a2);
          };
        }
        var g = el(b, d, a, 0, null, !1, !1, "", pl);
        return a._reactRootContainer = g, a[uf] = g.current, sf(a.nodeType === 8 ? a.parentNode : a), Rk(), g;
      }
      for (; e = a.lastChild; )
        a.removeChild(e);
      if (typeof d == "function") {
        var h = d;
        d = function() {
          var a2 = gl(k);
          h.call(a2);
        };
      }
      var k = bl(a, 0, !1, null, null, !1, !1, "", pl);
      return a._reactRootContainer = k, a[uf] = k.current, sf(a.nodeType === 8 ? a.parentNode : a), Rk(function() {
        fl(b, k, c, d);
      }), k;
    }
    function rl(a, b, c, d, e) {
      var f = c._reactRootContainer;
      if (f) {
        var g = f;
        if (typeof e == "function") {
          var h = e;
          e = function() {
            var a2 = gl(g);
            h.call(a2);
          };
        }
        fl(b, g, a, e);
      } else
        g = ql(c, b, a, e, d);
      return gl(g);
    }
    Ec = function(a) {
      switch (a.tag) {
        case 3:
          var b = a.stateNode;
          if (b.current.memoizedState.isDehydrated) {
            var c = tc(b.pendingLanes);
            c !== 0 && (Cc(b, c | 1), Dk(b, B()), !(K & 6) && (Gj = B() + 500, jg()));
          }
          break;
        case 13:
          Rk(function() {
            var b2 = ih(a, 1);
            if (b2 !== null) {
              var c2 = R();
              gi(b2, a, 1, c2);
            }
          }), il(a, 1);
      }
    };
    Fc = function(a) {
      if (a.tag === 13) {
        var b = ih(a, 134217728);
        if (b !== null) {
          var c = R();
          gi(b, a, 134217728, c);
        }
        il(a, 134217728);
      }
    };
    Gc = function(a) {
      if (a.tag === 13) {
        var b = yi(a), c = ih(a, b);
        if (c !== null) {
          var d = R();
          gi(c, a, b, d);
        }
        il(a, b);
      }
    };
    Hc = function() {
      return C;
    };
    Ic = function(a, b) {
      var c = C;
      try {
        return C = a, b();
      } finally {
        C = c;
      }
    };
    yb = function(a, b, c) {
      switch (b) {
        case "input":
          if (bb(a, c), b = c.name, c.type === "radio" && b != null) {
            for (c = a; c.parentNode; )
              c = c.parentNode;
            for (c = c.querySelectorAll("input[name=" + JSON.stringify("" + b) + '][type="radio"]'), b = 0; b < c.length; b++) {
              var d = c[b];
              if (d !== a && d.form === a.form) {
                var e = Db(d);
                if (!e)
                  throw Error(p(90));
                Wa(d), bb(d, e);
              }
            }
          }
          break;
        case "textarea":
          ib(a, c);
          break;
        case "select":
          b = c.value, b != null && fb(a, !!c.multiple, b, !1);
      }
    };
    Gb = Qk;
    Hb = Rk;
    var sl = { usingClientEntryPoint: !1, Events: [Cb, ue, Db, Eb, Fb, Qk] }, tl = { findFiberByHostInstance: Wc, bundleType: 0, version: "18.3.1", rendererPackageName: "react-dom" }, ul = { bundleType: tl.bundleType, version: tl.version, rendererPackageName: tl.rendererPackageName, rendererConfig: tl.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setErrorHandler: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: ua.ReactCurrentDispatcher, findHostInstanceByFiber: function(a) {
      return a = Zb(a), a === null ? null : a.stateNode;
    }, findFiberByHostInstance: tl.findFiberByHostInstance || jl, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null, reconcilerVersion: "18.3.1-next-f1338f8080-20240426" };
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && (vl = __REACT_DEVTOOLS_GLOBAL_HOOK__, !vl.isDisabled && vl.supportsFiber))
      try {
        kc = vl.inject(ul), lc = vl;
      } catch {
      }
    var vl;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = sl;
    exports.createPortal = function(a, b) {
      var c = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : null;
      if (!nl(b))
        throw Error(p(200));
      return cl(a, b, null, c);
    };
    exports.createRoot = function(a, b) {
      if (!nl(a))
        throw Error(p(299));
      var c = !1, d = "", e = kl;
      return b != null && (b.unstable_strictMode === !0 && (c = !0), b.identifierPrefix !== void 0 && (d = b.identifierPrefix), b.onRecoverableError !== void 0 && (e = b.onRecoverableError)), b = bl(a, 1, !1, null, null, c, !1, d, e), a[uf] = b.current, sf(a.nodeType === 8 ? a.parentNode : a), new ll(b);
    };
    exports.findDOMNode = function(a) {
      if (a == null)
        return null;
      if (a.nodeType === 1)
        return a;
      var b = a._reactInternals;
      if (b === void 0)
        throw typeof a.render == "function" ? Error(p(188)) : (a = Object.keys(a).join(","), Error(p(268, a)));
      return a = Zb(b), a = a === null ? null : a.stateNode, a;
    };
    exports.flushSync = function(a) {
      return Rk(a);
    };
    exports.hydrate = function(a, b, c) {
      if (!ol(b))
        throw Error(p(200));
      return rl(null, a, b, !0, c);
    };
    exports.hydrateRoot = function(a, b, c) {
      if (!nl(a))
        throw Error(p(405));
      var d = c != null && c.hydratedSources || null, e = !1, f = "", g = kl;
      if (c != null && (c.unstable_strictMode === !0 && (e = !0), c.identifierPrefix !== void 0 && (f = c.identifierPrefix), c.onRecoverableError !== void 0 && (g = c.onRecoverableError)), b = el(b, null, a, 1, c ?? null, e, !1, f, g), a[uf] = b.current, sf(a), d)
        for (a = 0; a < d.length; a++)
          c = d[a], e = c._getVersion, e = e(c._source), b.mutableSourceEagerHydrationData == null ? b.mutableSourceEagerHydrationData = [c, e] : b.mutableSourceEagerHydrationData.push(
            c,
            e
          );
      return new ml(b);
    };
    exports.render = function(a, b, c) {
      if (!ol(b))
        throw Error(p(200));
      return rl(null, a, b, !1, c);
    };
    exports.unmountComponentAtNode = function(a) {
      if (!ol(a))
        throw Error(p(40));
      return a._reactRootContainer ? (Rk(function() {
        rl(null, null, a, !1, function() {
          a._reactRootContainer = null, a[uf] = null;
        });
      }), !0) : !1;
    };
    exports.unstable_batchedUpdates = Qk;
    exports.unstable_renderSubtreeIntoContainer = function(a, b, c, d) {
      if (!ol(c))
        throw Error(p(200));
      if (a == null || a._reactInternals === void 0)
        throw Error(p(38));
      return rl(a, b, c, !1, d);
    };
    exports.version = "18.3.1-next-f1338f8080-20240426";
  }
});

// node_modules/react-dom/index.js
var require_react_dom = __commonJS({
  "node_modules/react-dom/index.js"(exports, module2) {
    "use strict";
    function checkDCE() {
      if (!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ > "u" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE != "function"))
        try {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
        } catch (err) {
          console.error(err);
        }
    }
    checkDCE(), module2.exports = require_react_dom_production_min();
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/portals/hooks.js
var require_hooks4 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/portals/hooks.js"(exports) {
    "use strict";
    var React2 = require_react(), context = require_context7();
    function usePortalsManager() {
      let portalsManager = React2.useContext(context.PortalsManagerContext);
      if (!portalsManager)
        throw new Error("No portals manager was provided. Your application must be wrapped in an <AppProvider> component. See https://polaris.shopify.com/components/app-provider for implementation instructions.");
      return portalsManager;
    }
    exports.usePortalsManager = usePortalsManager;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Portal/Portal.js
var require_Portal = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Portal/Portal.js"(exports) {
    "use strict";
    var polarisTokens = require("@shopify/polaris-tokens"), React2 = require_react(), reactDom = require_react_dom(), useTheme = require_use_theme(), hooks = require_hooks4(), ThemeProvider = require_ThemeProvider();
    function Portal({
      children,
      idPrefix = "",
      onPortalCreated = noop
    }) {
      let themeName = useTheme.useThemeName(), {
        container
      } = hooks.usePortalsManager(), uniqueId = React2.useId(), portalId = idPrefix !== "" ? `${idPrefix}-${uniqueId}` : uniqueId;
      return React2.useEffect(() => {
        onPortalCreated();
      }, [onPortalCreated]), container ? /* @__PURE__ */ reactDom.createPortal(/* @__PURE__ */ React2.createElement(ThemeProvider.ThemeProvider, {
        theme: ThemeProvider.isThemeNameLocal(themeName) ? themeName : polarisTokens.themeNameDefault,
        "data-portal-id": portalId
      }, children), container) : null;
    }
    function noop() {
    }
    exports.Portal = Portal;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tooltip/components/TooltipOverlay/TooltipOverlay.css.js
var require_TooltipOverlay_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tooltip/components/TooltipOverlay/TooltipOverlay.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      TooltipOverlay: "Polaris-Tooltip-TooltipOverlay",
      Tail: "Polaris-Tooltip-TooltipOverlay__Tail",
      positionedAbove: "Polaris-Tooltip-TooltipOverlay--positionedAbove",
      measuring: "Polaris-Tooltip-TooltipOverlay--measuring",
      measured: "Polaris-Tooltip-TooltipOverlay--measured",
      instant: "Polaris-Tooltip-TooltipOverlay--instant",
      Content: "Polaris-Tooltip-TooltipOverlay__Content",
      default: "Polaris-Tooltip-TooltipOverlay--default",
      wide: "Polaris-Tooltip-TooltipOverlay--wide"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/PositionedOverlay/utilities/math.js
var require_math = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/PositionedOverlay/utilities/math.js"(exports) {
    "use strict";
    var geometry = require_geometry();
    function calculateVerticalPosition(activatorRect, overlayRect, overlayMargins, scrollableContainerRect, containerRect, preferredPosition, fixed, topBarOffset = 0) {
      let activatorTop = activatorRect.top, activatorBottom = activatorTop + activatorRect.height, spaceAbove = activatorRect.top - topBarOffset, spaceBelow = containerRect.height - activatorRect.top - activatorRect.height, desiredHeight = overlayRect.height, verticalMargins = overlayMargins.activator + overlayMargins.container, minimumSpaceToScroll = overlayMargins.container, distanceToTopScroll = activatorRect.top - Math.max(scrollableContainerRect.top, 0), distanceToBottomScroll = containerRect.top + Math.min(containerRect.height, scrollableContainerRect.top + scrollableContainerRect.height) - (activatorRect.top + activatorRect.height), enoughSpaceFromTopScroll = distanceToTopScroll >= minimumSpaceToScroll, enoughSpaceFromBottomScroll = distanceToBottomScroll >= minimumSpaceToScroll, heightIfAbove = Math.min(spaceAbove, desiredHeight), heightIfBelow = Math.min(spaceBelow, desiredHeight), heightIfAboveCover = Math.min(spaceAbove + activatorRect.height, desiredHeight), heightIfBelowCover = Math.min(spaceBelow + activatorRect.height, desiredHeight), containerRectTop = fixed ? 0 : containerRect.top, positionIfAbove = {
        height: heightIfAbove - verticalMargins,
        top: activatorTop + containerRectTop - heightIfAbove,
        positioning: "above"
      }, positionIfBelow = {
        height: heightIfBelow - verticalMargins,
        top: activatorBottom + containerRectTop,
        positioning: "below"
      }, positionIfCoverBelow = {
        height: heightIfBelowCover - verticalMargins,
        top: activatorTop + containerRectTop,
        positioning: "cover"
      }, positionIfCoverAbove = {
        height: heightIfAboveCover - verticalMargins,
        top: activatorTop + containerRectTop - heightIfAbove + activatorRect.height + verticalMargins,
        positioning: "cover"
      };
      return preferredPosition === "above" ? (enoughSpaceFromTopScroll || distanceToTopScroll >= distanceToBottomScroll && !enoughSpaceFromBottomScroll) && (spaceAbove > desiredHeight || spaceAbove > spaceBelow) ? positionIfAbove : positionIfBelow : preferredPosition === "below" ? (enoughSpaceFromBottomScroll || distanceToBottomScroll >= distanceToTopScroll && !enoughSpaceFromTopScroll) && (spaceBelow > desiredHeight || spaceBelow > spaceAbove) ? positionIfBelow : positionIfAbove : preferredPosition === "cover" ? (enoughSpaceFromBottomScroll || distanceToBottomScroll >= distanceToTopScroll && !enoughSpaceFromTopScroll) && (spaceBelow + activatorRect.height > desiredHeight || spaceBelow > spaceAbove) ? positionIfCoverBelow : positionIfCoverAbove : enoughSpaceFromTopScroll && enoughSpaceFromBottomScroll ? spaceAbove > spaceBelow ? positionIfAbove : positionIfBelow : distanceToTopScroll > minimumSpaceToScroll ? positionIfAbove : positionIfBelow;
    }
    function calculateHorizontalPosition(activatorRect, overlayRect, containerRect, overlayMargins, preferredAlignment) {
      let maximum = containerRect.width - overlayRect.width;
      if (preferredAlignment === "left")
        return Math.min(maximum, Math.max(0, activatorRect.left - overlayMargins.horizontal));
      if (preferredAlignment === "right") {
        let activatorRight = containerRect.width - (activatorRect.left + activatorRect.width);
        return Math.min(maximum, Math.max(0, activatorRight - overlayMargins.horizontal));
      }
      return Math.min(maximum, Math.max(0, activatorRect.center.x - overlayRect.width / 2));
    }
    function rectIsOutsideOfRect(inner, outer) {
      let {
        center
      } = inner;
      return center.y < outer.top || center.y > outer.top + outer.height;
    }
    function intersectionWithViewport(rect, viewport = windowRect()) {
      let top = Math.max(rect.top, 0), left = Math.max(rect.left, 0), bottom = Math.min(rect.top + rect.height, viewport.height), right = Math.min(rect.left + rect.width, viewport.width);
      return new geometry.Rect({
        top,
        left,
        height: bottom - top,
        width: right - left
      });
    }
    function windowRect() {
      return new geometry.Rect({
        top: window.scrollY,
        left: window.scrollX,
        height: window.innerHeight,
        width: document.body.clientWidth
      });
    }
    exports.calculateHorizontalPosition = calculateHorizontalPosition;
    exports.calculateVerticalPosition = calculateVerticalPosition;
    exports.intersectionWithViewport = intersectionWithViewport;
    exports.rectIsOutsideOfRect = rectIsOutsideOfRect;
    exports.windowRect = windowRect;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/PositionedOverlay/PositionedOverlay.css.js
var require_PositionedOverlay_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/PositionedOverlay/PositionedOverlay.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      PositionedOverlay: "Polaris-PositionedOverlay",
      fixed: "Polaris-PositionedOverlay--fixed",
      calculating: "Polaris-PositionedOverlay--calculating",
      preventInteraction: "Polaris-PositionedOverlay--preventInteraction"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-lazy-ref.js
var require_use_lazy_ref = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-lazy-ref.js"(exports) {
    "use strict";
    var React2 = require_react(), UNIQUE_IDENTIFIER = Symbol("unique_identifier");
    function useLazyRef(initialValue) {
      let lazyRef = React2.useRef(UNIQUE_IDENTIFIER);
      return lazyRef.current === UNIQUE_IDENTIFIER && (lazyRef.current = initialValue()), lazyRef;
    }
    exports.useLazyRef = useLazyRef;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-component-did-mount.js
var require_use_component_did_mount = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-component-did-mount.js"(exports) {
    "use strict";
    var React2 = require_react(), useIsAfterInitialMount = require_use_is_after_initial_mount();
    function useComponentDidMount(callback) {
      let isAfterInitialMount = useIsAfterInitialMount.useIsAfterInitialMount(), hasInvokedLifeCycle = React2.useRef(!1);
      if (isAfterInitialMount && !hasInvokedLifeCycle.current)
        return hasInvokedLifeCycle.current = !0, callback();
    }
    exports.useComponentDidMount = useComponentDidMount;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Scrollable/context.js
var require_context10 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Scrollable/context.js"(exports) {
    "use strict";
    var React2 = require_react(), ScrollableContext = /* @__PURE__ */ React2.createContext(void 0);
    exports.ScrollableContext = ScrollableContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Scrollable/Scrollable.css.js
var require_Scrollable_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Scrollable/Scrollable.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Scrollable: "Polaris-Scrollable",
      hasTopShadow: "Polaris-Scrollable--hasTopShadow",
      hasBottomShadow: "Polaris-Scrollable--hasBottomShadow",
      horizontal: "Polaris-Scrollable--horizontal",
      vertical: "Polaris-Scrollable--vertical",
      scrollbarWidthThin: "Polaris-Scrollable--scrollbarWidthThin",
      scrollbarWidthNone: "Polaris-Scrollable--scrollbarWidthNone",
      scrollbarWidthAuto: "Polaris-Scrollable--scrollbarWidthAuto",
      scrollbarGutterStable: "Polaris-Scrollable--scrollbarGutterStable",
      "scrollbarGutterStableboth-edges": "Polaris-Scrollable__scrollbarGutterStableboth--edges"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Scrollable/components/ScrollTo/ScrollTo.js
var require_ScrollTo = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Scrollable/components/ScrollTo/ScrollTo.js"(exports) {
    "use strict";
    var React2 = require_react(), context = require_context10();
    function ScrollTo() {
      let anchorNode = React2.useRef(null), scrollToPosition = React2.useContext(context.ScrollableContext);
      React2.useEffect(() => {
        !scrollToPosition || !anchorNode.current || scrollToPosition(anchorNode.current.offsetTop);
      }, [scrollToPosition]);
      let id = React2.useId();
      return /* @__PURE__ */ React2.createElement("a", {
        id,
        ref: anchorNode
      });
    }
    exports.ScrollTo = ScrollTo;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Scrollable/Scrollable.js
var require_Scrollable = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Scrollable/Scrollable.js"(exports) {
    "use strict";
    var React2 = require_react(), debounce = require_debounce(), css = require_css(), shared = require_shared(), useLazyRef = require_use_lazy_ref(), useComponentDidMount = require_use_component_did_mount(), context = require_context10(), Scrollable_module = require_Scrollable_css(), ScrollTo = require_ScrollTo(), stickyManager = require_sticky_manager(), context$1 = require_context4(), MAX_SCROLL_HINT_DISTANCE = 100, LOW_RES_BUFFER = 2, ScrollableComponent = /* @__PURE__ */ React2.forwardRef(({
      children,
      className,
      horizontal = !0,
      vertical = !0,
      shadow,
      hint,
      focusable,
      scrollbarWidth = "thin",
      scrollbarGutter,
      onScrolledToBottom,
      ...rest
    }, forwardedRef) => {
      let [topShadow, setTopShadow] = React2.useState(!1), [bottomShadow, setBottomShadow] = React2.useState(!1), stickyManager$1 = useLazyRef.useLazyRef(() => new stickyManager.StickyManager()), scrollArea = React2.useRef(null), scrollTo = React2.useCallback((scrollY, options = {}) => {
        let optionsBehavior = options.behavior || "smooth", behavior = prefersReducedMotion() ? "auto" : optionsBehavior;
        scrollArea.current?.scrollTo({
          top: scrollY,
          behavior
        });
      }, []), defaultRef = React2.useRef();
      React2.useImperativeHandle(forwardedRef || defaultRef, () => ({
        scrollTo
      }));
      let handleScroll = React2.useCallback(() => {
        let currentScrollArea = scrollArea.current;
        currentScrollArea && requestAnimationFrame(() => {
          let {
            scrollTop,
            clientHeight,
            scrollHeight
          } = currentScrollArea, canScroll = Boolean(scrollHeight > clientHeight), isBelowTopOfScroll = Boolean(scrollTop > 0), isAtBottomOfScroll = Boolean(scrollTop + clientHeight >= scrollHeight - LOW_RES_BUFFER);
          setTopShadow(isBelowTopOfScroll), setBottomShadow(!isAtBottomOfScroll), canScroll && isAtBottomOfScroll && onScrolledToBottom && onScrolledToBottom();
        });
      }, [onScrolledToBottom]);
      useComponentDidMount.useComponentDidMount(() => {
        handleScroll(), hint && requestAnimationFrame(() => performScrollHint(scrollArea.current));
      }), React2.useEffect(() => {
        let currentScrollArea = scrollArea.current;
        if (!currentScrollArea)
          return;
        let handleResize = debounce.debounce(handleScroll, 50, {
          trailing: !0
        });
        return stickyManager$1.current?.setContainer(currentScrollArea), currentScrollArea.addEventListener("scroll", handleScroll), globalThis.addEventListener("resize", handleResize), () => {
          currentScrollArea.removeEventListener("scroll", handleScroll), globalThis.removeEventListener("resize", handleResize);
        };
      }, [stickyManager$1, handleScroll]);
      let finalClassName = css.classNames(className, Scrollable_module.default.Scrollable, vertical && Scrollable_module.default.vertical, horizontal && Scrollable_module.default.horizontal, shadow && topShadow && Scrollable_module.default.hasTopShadow, shadow && bottomShadow && Scrollable_module.default.hasBottomShadow, scrollbarWidth && Scrollable_module.default[css.variationName("scrollbarWidth", scrollbarWidth)], scrollbarGutter && Scrollable_module.default[css.variationName("scrollbarGutter", scrollbarGutter.replace(" ", ""))]);
      return /* @__PURE__ */ React2.createElement(context.ScrollableContext.Provider, {
        value: scrollTo
      }, /* @__PURE__ */ React2.createElement(context$1.StickyManagerContext.Provider, {
        value: stickyManager$1.current
      }, /* @__PURE__ */ React2.createElement("div", Object.assign({
        className: finalClassName
      }, shared.scrollable.props, rest, {
        ref: scrollArea,
        tabIndex: focusable ? 0 : void 0
      }), children)));
    });
    ScrollableComponent.displayName = "Scrollable";
    function prefersReducedMotion() {
      try {
        return window.matchMedia("(prefers-reduced-motion: reduce)").matches;
      } catch {
        return !1;
      }
    }
    function performScrollHint(elem) {
      if (!elem || prefersReducedMotion())
        return;
      let scrollableDistance = elem.scrollHeight - elem.clientHeight, distanceToPeek = Math.min(MAX_SCROLL_HINT_DISTANCE, scrollableDistance) - LOW_RES_BUFFER, goBackToTop = () => {
        requestAnimationFrame(() => {
          elem.scrollTop >= distanceToPeek && (elem.removeEventListener("scroll", goBackToTop), elem.scrollTo({
            top: 0,
            behavior: "smooth"
          }));
        });
      };
      elem.addEventListener("scroll", goBackToTop), elem.scrollTo({
        top: MAX_SCROLL_HINT_DISTANCE,
        behavior: "smooth"
      });
    }
    var forNode = (node) => {
      let closestElement = node.closest(shared.scrollable.selector);
      return closestElement instanceof HTMLElement ? closestElement : document;
    }, Scrollable = ScrollableComponent;
    Scrollable.ScrollTo = ScrollTo.ScrollTo;
    Scrollable.forNode = forNode;
    exports.Scrollable = Scrollable;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/PositionedOverlay/PositionedOverlay.js
var require_PositionedOverlay = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/PositionedOverlay/PositionedOverlay.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), geometry = require_geometry(), shared = require_shared(), math = require_math(), PositionedOverlay_module = require_PositionedOverlay_css(), Scrollable = require_Scrollable(), EventListener = require_EventListener(), OBSERVER_CONFIG = {
      childList: !0,
      subtree: !0,
      characterData: !0,
      attributeFilter: ["style"]
    }, PositionedOverlay = class extends React2.PureComponent {
      constructor(props) {
        super(props), this.state = {
          measuring: !0,
          activatorRect: geometry.getRectForNode(this.props.activator),
          right: void 0,
          left: void 0,
          top: 0,
          height: 0,
          width: null,
          positioning: "below",
          zIndex: null,
          outsideScrollableContainer: !1,
          lockPosition: !1,
          chevronOffset: 0
        }, this.overlay = null, this.scrollableContainers = [], this.overlayDetails = () => {
          let {
            measuring,
            left,
            right,
            positioning,
            height,
            activatorRect,
            chevronOffset
          } = this.state;
          return {
            measuring,
            left,
            right,
            desiredHeight: height,
            positioning,
            activatorRect,
            chevronOffset
          };
        }, this.setOverlay = (node) => {
          this.overlay = node;
        }, this.setScrollableContainers = () => {
          let containers = [], scrollableContainer = Scrollable.Scrollable.forNode(this.props.activator);
          if (scrollableContainer)
            for (containers.push(scrollableContainer); scrollableContainer?.parentElement; )
              scrollableContainer = Scrollable.Scrollable.forNode(scrollableContainer.parentElement), containers.push(scrollableContainer);
          this.scrollableContainers = containers;
        }, this.registerScrollHandlers = () => {
          this.scrollableContainers.forEach((node) => {
            node.addEventListener("scroll", this.handleMeasurement);
          });
        }, this.unregisterScrollHandlers = () => {
          this.scrollableContainers.forEach((node) => {
            node.removeEventListener("scroll", this.handleMeasurement);
          });
        }, this.handleMeasurement = () => {
          let {
            lockPosition,
            top
          } = this.state;
          this.observer.disconnect(), this.setState(({
            left,
            top: top2,
            right
          }) => ({
            left,
            right,
            top: top2,
            height: 0,
            positioning: "below",
            measuring: !0
          }), () => {
            if (this.overlay == null || this.firstScrollableContainer == null)
              return;
            let {
              activator,
              preferredPosition = "below",
              preferredAlignment = "center",
              onScrollOut,
              fullWidth,
              fixed,
              preferInputActivator = !0
            } = this.props, preferredActivator = preferInputActivator && activator.querySelector("input") || activator, activatorRect = geometry.getRectForNode(preferredActivator), currentOverlayRect = geometry.getRectForNode(this.overlay), scrollableElement = isDocument(this.firstScrollableContainer) ? document.body : this.firstScrollableContainer, scrollableContainerRect = geometry.getRectForNode(scrollableElement), overlayRect = fullWidth || preferredPosition === "cover" ? new geometry.Rect({
              ...currentOverlayRect,
              width: activatorRect.width
            }) : currentOverlayRect;
            scrollableElement === document.body && (scrollableContainerRect.height = document.body.scrollHeight);
            let topBarOffset = 0, topBarElement = scrollableElement.querySelector(`${shared.dataPolarisTopBar.selector}`);
            topBarElement && (topBarOffset = topBarElement.clientHeight);
            let overlayMargins = this.overlay.firstElementChild && this.overlay.firstChild instanceof HTMLElement ? getMarginsForNode(this.overlay.firstElementChild) : {
              activator: 0,
              container: 0,
              horizontal: 0
            }, containerRect = math.windowRect(), zIndexForLayer = getZIndexForLayerFromNode(activator), zIndex = zIndexForLayer == null ? zIndexForLayer : zIndexForLayer + 1, verticalPosition = math.calculateVerticalPosition(activatorRect, overlayRect, overlayMargins, scrollableContainerRect, containerRect, preferredPosition, fixed, topBarOffset), horizontalPosition = math.calculateHorizontalPosition(activatorRect, overlayRect, containerRect, overlayMargins, preferredAlignment), chevronOffset = activatorRect.center.x - horizontalPosition + overlayMargins.horizontal * 2;
            this.setState({
              measuring: !1,
              activatorRect: geometry.getRectForNode(activator),
              left: preferredAlignment !== "right" ? horizontalPosition : void 0,
              right: preferredAlignment === "right" ? horizontalPosition : void 0,
              top: lockPosition ? top : verticalPosition.top,
              lockPosition: Boolean(fixed),
              height: verticalPosition.height || 0,
              width: fullWidth || preferredPosition === "cover" ? overlayRect.width : null,
              positioning: verticalPosition.positioning,
              outsideScrollableContainer: onScrollOut != null && math.rectIsOutsideOfRect(activatorRect, math.intersectionWithViewport(scrollableContainerRect)),
              zIndex,
              chevronOffset
            }, () => {
              this.overlay && (this.observer.observe(this.overlay, OBSERVER_CONFIG), this.observer.observe(activator, OBSERVER_CONFIG));
            });
          });
        }, this.observer = new MutationObserver(this.handleMeasurement);
      }
      componentDidMount() {
        this.setScrollableContainers(), this.scrollableContainers.length && !this.props.fixed && this.registerScrollHandlers(), this.handleMeasurement();
      }
      componentWillUnmount() {
        this.observer.disconnect(), this.scrollableContainers.length && !this.props.fixed && this.unregisterScrollHandlers();
      }
      componentDidUpdate() {
        let {
          outsideScrollableContainer,
          top
        } = this.state, {
          onScrollOut,
          active
        } = this.props;
        active && onScrollOut != null && top !== 0 && outsideScrollableContainer && onScrollOut();
      }
      render() {
        let {
          left,
          right,
          top,
          zIndex,
          width
        } = this.state, {
          render,
          fixed,
          preventInteraction,
          classNames: propClassNames,
          zIndexOverride
        } = this.props, style = {
          top: top == null || isNaN(top) ? void 0 : top,
          left: left == null || isNaN(left) ? void 0 : left,
          right: right == null || isNaN(right) ? void 0 : right,
          width: width == null || isNaN(width) ? void 0 : width,
          zIndex: zIndexOverride || zIndex || void 0
        }, className = css.classNames(PositionedOverlay_module.default.PositionedOverlay, fixed && PositionedOverlay_module.default.fixed, preventInteraction && PositionedOverlay_module.default.preventInteraction, propClassNames);
        return /* @__PURE__ */ React2.createElement("div", {
          className,
          style,
          ref: this.setOverlay
        }, /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
          event: "resize",
          handler: this.handleMeasurement
        }), render(this.overlayDetails()));
      }
      get firstScrollableContainer() {
        return this.scrollableContainers[0] ?? null;
      }
      forceUpdatePosition() {
        requestAnimationFrame(this.handleMeasurement);
      }
    };
    function getMarginsForNode(node) {
      let nodeStyles = window.getComputedStyle(node);
      return {
        activator: parseFloat(nodeStyles.marginTop || "0"),
        container: parseFloat(nodeStyles.marginBottom || "0"),
        horizontal: parseFloat(nodeStyles.marginLeft || "0")
      };
    }
    function getZIndexForLayerFromNode(node) {
      let layerNode = node.closest(shared.layer.selector) || document.body, zIndex = layerNode === document.body ? "auto" : parseInt(window.getComputedStyle(layerNode).zIndex || "0", 10);
      return zIndex === "auto" || isNaN(zIndex) ? null : zIndex;
    }
    function isDocument(node) {
      return node === document;
    }
    exports.PositionedOverlay = PositionedOverlay;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tooltip/components/TooltipOverlay/TooltipOverlay.js
var require_TooltipOverlay = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tooltip/components/TooltipOverlay/TooltipOverlay.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), shared = require_shared(), TooltipOverlay_module = require_TooltipOverlay_css(), PositionedOverlay = require_PositionedOverlay(), hooks = require_hooks2(), tailUpPaths = /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("path", {
      d: "M18.829 8.171 11.862.921A3 3 0 0 0 7.619.838L0 8.171h1.442l6.87-6.612a2 2 0 0 1 2.83.055l6.3 6.557h1.387Z",
      fill: "var(--p-color-tooltip-tail-up-border-experimental)"
    }), /* @__PURE__ */ React2.createElement("path", {
      d: "M17.442 10.171h-16v-2l6.87-6.612a2 2 0 0 1 2.83.055l6.3 6.557v2Z",
      fill: "var(--p-color-bg-surface)"
    })), tailDownPaths = /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("path", {
      d: "m0 2 6.967 7.25a3 3 0 0 0 4.243.083L18.829 2h-1.442l-6.87 6.612a2 2 0 0 1-2.83-.055L1.387 2H0Z",
      fill: "var(--p-color-tooltip-tail-down-border-experimental)"
    }), /* @__PURE__ */ React2.createElement("path", {
      d: "M1.387 0h16v2l-6.87 6.612a2 2 0 0 1-2.83-.055L1.387 2V0Z",
      fill: "var(--p-color-bg-surface)"
    }));
    function TooltipOverlay({
      active,
      activator,
      preferredPosition = "above",
      preventInteraction,
      id,
      children,
      accessibilityLabel,
      width,
      padding,
      borderRadius,
      zIndexOverride,
      instant
    }) {
      let i18n = hooks.useI18n();
      return active ? /* @__PURE__ */ React2.createElement(PositionedOverlay.PositionedOverlay, {
        active,
        activator,
        preferredPosition,
        preventInteraction,
        render: renderTooltip,
        zIndexOverride
      }) : null;
      function renderTooltip(overlayDetails) {
        let {
          measuring,
          desiredHeight,
          positioning,
          chevronOffset
        } = overlayDetails, containerClassName = css.classNames(TooltipOverlay_module.default.TooltipOverlay, measuring && TooltipOverlay_module.default.measuring, !measuring && TooltipOverlay_module.default.measured, instant && TooltipOverlay_module.default.instant, positioning === "above" && TooltipOverlay_module.default.positionedAbove), contentClassName = css.classNames(TooltipOverlay_module.default.Content, width && TooltipOverlay_module.default[width]), contentStyles = measuring ? void 0 : {
          minHeight: desiredHeight
        }, style = {
          "--pc-tooltip-chevron-x-pos": `${chevronOffset}px`,
          "--pc-tooltip-border-radius": borderRadius ? `var(--p-border-radius-${borderRadius})` : void 0,
          "--pc-tooltip-padding": padding && padding === "default" ? "var(--p-space-100) var(--p-space-200)" : `var(--p-space-${padding})`
        };
        return /* @__PURE__ */ React2.createElement("div", Object.assign({
          style,
          className: containerClassName
        }, shared.layer.props), /* @__PURE__ */ React2.createElement("svg", {
          className: TooltipOverlay_module.default.Tail,
          width: "19",
          height: "11",
          fill: "none"
        }, positioning === "above" ? tailDownPaths : tailUpPaths), /* @__PURE__ */ React2.createElement("div", {
          id,
          role: "tooltip",
          className: contentClassName,
          style: {
            ...contentStyles,
            ...style
          },
          "aria-label": accessibilityLabel ? i18n.translate("Polaris.TooltipOverlay.accessibilityLabel", {
            label: accessibilityLabel
          }) : void 0
        }, children));
      }
    }
    exports.TooltipOverlay = TooltipOverlay;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tooltip/Tooltip.js
var require_Tooltip = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tooltip/Tooltip.js"(exports) {
    "use strict";
    var React2 = require_react(), focus = require_focus(), useToggle = require_use_toggle(), css = require_css(), Tooltip_module = require_Tooltip_css(), hooks = require_hooks3(), Portal = require_Portal(), TooltipOverlay = require_TooltipOverlay(), Text4 = require_Text(), HOVER_OUT_TIMEOUT = 150;
    function Tooltip({
      children,
      content,
      dismissOnMouseOut,
      active: originalActive,
      hoverDelay,
      preferredPosition = "above",
      activatorWrapper = "span",
      accessibilityLabel,
      width = "default",
      padding = "default",
      borderRadius: borderRadiusProp,
      zIndexOverride,
      hasUnderline,
      persistOnClick,
      onOpen,
      onClose
    }) {
      let borderRadius = borderRadiusProp || "200", WrapperComponent = activatorWrapper, {
        value: active,
        setTrue: setActiveTrue,
        setFalse: handleBlur
      } = useToggle.useToggle(Boolean(originalActive)), {
        value: persist,
        toggle: togglePersisting
      } = useToggle.useToggle(Boolean(originalActive) && Boolean(persistOnClick)), [activatorNode, setActivatorNode] = React2.useState(null), {
        presenceList,
        addPresence,
        removePresence
      } = hooks.useEphemeralPresenceManager(), id = React2.useId(), activatorContainer = React2.useRef(null), mouseEntered = React2.useRef(!1), [shouldAnimate, setShouldAnimate] = React2.useState(Boolean(!originalActive)), hoverDelayTimeout = React2.useRef(null), hoverOutTimeout = React2.useRef(null), handleFocus = React2.useCallback(() => {
        originalActive !== !1 && setActiveTrue();
      }, [originalActive, setActiveTrue]);
      React2.useEffect(() => {
        let accessibilityNode = (activatorContainer.current ? focus.findFirstFocusableNode(activatorContainer.current) : null) || activatorContainer.current;
        accessibilityNode && (accessibilityNode.tabIndex = 0, accessibilityNode.setAttribute("aria-describedby", id), accessibilityNode.setAttribute("data-polaris-tooltip-activator", "true"));
      }, [id, children]), React2.useEffect(() => () => {
        hoverDelayTimeout.current && clearTimeout(hoverDelayTimeout.current), hoverOutTimeout.current && clearTimeout(hoverOutTimeout.current);
      }, []);
      let handleOpen = React2.useCallback(() => {
        setShouldAnimate(!presenceList.tooltip && !active), onOpen?.(), addPresence("tooltip");
      }, [addPresence, presenceList.tooltip, onOpen, active]), handleClose = React2.useCallback(() => {
        onClose?.(), setShouldAnimate(!1), hoverOutTimeout.current = setTimeout(() => {
          removePresence("tooltip");
        }, HOVER_OUT_TIMEOUT);
      }, [removePresence, onClose]), handleKeyUp = React2.useCallback((event) => {
        event.key === "Escape" && (handleClose?.(), handleBlur(), persistOnClick && togglePersisting());
      }, [handleBlur, handleClose, persistOnClick, togglePersisting]);
      React2.useEffect(() => {
        originalActive === !1 && active && (handleClose(), handleBlur());
      }, [originalActive, active, handleClose, handleBlur]);
      let portal = activatorNode ? /* @__PURE__ */ React2.createElement(Portal.Portal, {
        idPrefix: "tooltip"
      }, /* @__PURE__ */ React2.createElement(TooltipOverlay.TooltipOverlay, {
        id,
        preferredPosition,
        activator: activatorNode,
        active,
        accessibilityLabel,
        onClose: noop,
        preventInteraction: dismissOnMouseOut,
        width,
        padding,
        borderRadius,
        zIndexOverride,
        instant: !shouldAnimate
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "bodyMd"
      }, content))) : null, wrapperClassNames = css.classNames(activatorWrapper === "div" && Tooltip_module.default.TooltipContainer, hasUnderline && Tooltip_module.default.HasUnderline);
      return /* @__PURE__ */ React2.createElement(WrapperComponent, {
        onFocus: () => {
          handleOpen(), handleFocus();
        },
        onBlur: () => {
          handleClose(), handleBlur(), persistOnClick && togglePersisting();
        },
        onMouseLeave: handleMouseLeave,
        onMouseOver: handleMouseEnterFix,
        onMouseDown: persistOnClick ? togglePersisting : void 0,
        ref: setActivator,
        onKeyUp: handleKeyUp,
        className: wrapperClassNames
      }, children, portal);
      function setActivator(node) {
        let activatorContainerRef = activatorContainer;
        if (node == null) {
          activatorContainerRef.current = null, setActivatorNode(null);
          return;
        }
        node.firstElementChild instanceof HTMLElement && setActivatorNode(node.firstElementChild), activatorContainerRef.current = node;
      }
      function handleMouseEnter() {
        mouseEntered.current = !0, hoverDelay && !presenceList.tooltip ? hoverDelayTimeout.current = setTimeout(() => {
          handleOpen(), handleFocus();
        }, hoverDelay) : (handleOpen(), handleFocus());
      }
      function handleMouseLeave() {
        hoverDelayTimeout.current && (clearTimeout(hoverDelayTimeout.current), hoverDelayTimeout.current = null), mouseEntered.current = !1, handleClose(), persist || handleBlur();
      }
      function handleMouseEnterFix() {
        !mouseEntered.current && handleMouseEnter();
      }
    }
    function noop() {
    }
    exports.Tooltip = Tooltip;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionList/components/Item/Item.js
var require_Item = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionList/components/Item/Item.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), ActionList_module = require_ActionList_css(), focus = require_focus(), useIsomorphicLayoutEffect = require_use_isomorphic_layout_effect(), useTheme = require_use_theme(), Badge4 = require_Badge(), Tooltip = require_Tooltip(), Icon2 = require_Icon(), Box4 = require_Box(), Text4 = require_Text(), Scrollable = require_Scrollable(), UnstyledLink = require_UnstyledLink(), InlineStack4 = require_InlineStack();
    function Item({
      id,
      badge,
      content,
      accessibilityLabel,
      helpText,
      url,
      onAction,
      onMouseEnter,
      icon,
      image,
      prefix,
      suffix,
      disabled,
      external,
      destructive,
      ellipsis,
      truncate,
      active,
      role,
      variant = "default"
    }) {
      let className = css.classNames(ActionList_module.default.Item, disabled && ActionList_module.default.disabled, destructive && ActionList_module.default.destructive, active && ActionList_module.default.active, variant === "default" && ActionList_module.default.default, variant === "indented" && ActionList_module.default.indented, variant === "menu" && ActionList_module.default.menu), prefixMarkup = null;
      prefix ? prefixMarkup = /* @__PURE__ */ React2.createElement("span", {
        className: ActionList_module.default.Prefix
      }, prefix) : icon ? prefixMarkup = /* @__PURE__ */ React2.createElement("span", {
        className: ActionList_module.default.Prefix
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: icon
      })) : image && (prefixMarkup = /* @__PURE__ */ React2.createElement("span", {
        role: "presentation",
        className: ActionList_module.default.Prefix,
        style: {
          backgroundImage: `url(${image}`
        }
      }));
      let contentText = content || "";
      truncate && content ? contentText = /* @__PURE__ */ React2.createElement(TruncateText, null, content) : ellipsis && (contentText = `${content}\u2026`);
      let contentMarkup = helpText ? /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(Box4.Box, null, contentText), /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "bodySm",
        tone: active || disabled ? void 0 : "subdued"
      }, helpText)) : /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "bodyMd",
        fontWeight: active ? "semibold" : "regular"
      }, contentText), badgeMarkup = badge && /* @__PURE__ */ React2.createElement("span", {
        className: ActionList_module.default.Suffix
      }, /* @__PURE__ */ React2.createElement(Badge4.Badge, {
        tone: badge.tone
      }, badge.content)), suffixMarkup = suffix && /* @__PURE__ */ React2.createElement(Box4.Box, null, /* @__PURE__ */ React2.createElement("span", {
        className: ActionList_module.default.Suffix
      }, suffix)), textMarkup = /* @__PURE__ */ React2.createElement("span", {
        className: ActionList_module.default.Text
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "bodyMd",
        fontWeight: active ? "semibold" : "regular"
      }, contentMarkup)), contentElement = /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        blockAlign: "center",
        gap: "150",
        wrap: !1
      }, prefixMarkup, textMarkup, badgeMarkup, suffixMarkup), contentWrapper = /* @__PURE__ */ React2.createElement(Box4.Box, {
        width: "100%"
      }, contentElement), scrollMarkup = active ? /* @__PURE__ */ React2.createElement(Scrollable.Scrollable.ScrollTo, null) : null, control = url ? /* @__PURE__ */ React2.createElement(UnstyledLink.UnstyledLink, {
        id,
        url: disabled ? null : url,
        className,
        external,
        "aria-label": accessibilityLabel,
        onClick: disabled ? null : onAction,
        role
      }, contentWrapper) : /* @__PURE__ */ React2.createElement("button", {
        id,
        type: "button",
        className,
        disabled,
        "aria-label": accessibilityLabel,
        onClick: onAction,
        onMouseUp: focus.handleMouseUpByBlurring,
        role,
        onMouseEnter
      }, contentWrapper);
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, scrollMarkup, control);
    }
    var TruncateText = ({
      children
    }) => {
      let theme = useTheme.useTheme(), textRef = React2.useRef(null), [isOverflowing, setIsOverflowing] = React2.useState(!1);
      useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
        textRef.current && setIsOverflowing(textRef.current.scrollWidth > textRef.current.offsetWidth);
      }, [children]);
      let text = /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        truncate: !0
      }, /* @__PURE__ */ React2.createElement(Box4.Box, {
        width: "100%",
        ref: textRef
      }, children));
      return isOverflowing ? /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, {
        zIndexOverride: Number(theme.zIndex["z-index-11"]),
        preferredPosition: "above",
        hoverDelay: 1e3,
        content: children,
        dismissOnMouseOut: !0
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        truncate: !0
      }, children)) : text;
    };
    exports.Item = Item;
    exports.TruncateText = TruncateText;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionList/components/Section/Section.js
var require_Section = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionList/components/Section/Section.js"(exports) {
    "use strict";
    var React2 = require_react(), Item = require_Item(), Box4 = require_Box(), InlineStack4 = require_InlineStack(), Text4 = require_Text(), BlockStack4 = require_BlockStack();
    function Section({
      section,
      hasMultipleSections,
      isFirst,
      actionRole,
      onActionAnyItem
    }) {
      let handleAction = (itemOnAction) => () => {
        itemOnAction && itemOnAction(), onActionAnyItem && onActionAnyItem();
      }, actionMarkup = section.items.map(({
        content,
        helpText,
        onAction,
        ...item
      }, index) => {
        let itemMarkup = /* @__PURE__ */ React2.createElement(Item.Item, Object.assign({
          content,
          helpText,
          role: actionRole,
          onAction: handleAction(onAction)
        }, item));
        return /* @__PURE__ */ React2.createElement(Box4.Box, {
          as: "li",
          key: `${content}-${index}`,
          role: actionRole === "menuitem" ? "presentation" : void 0
        }, /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
          wrap: !1
        }, itemMarkup));
      }), titleMarkup = null;
      section.title && (titleMarkup = typeof section.title == "string" ? /* @__PURE__ */ React2.createElement(Box4.Box, {
        paddingBlockStart: "300",
        paddingBlockEnd: "100",
        paddingInlineStart: "300",
        paddingInlineEnd: "300"
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "p",
        variant: "headingSm"
      }, section.title)) : /* @__PURE__ */ React2.createElement(Box4.Box, {
        padding: "200",
        paddingInlineEnd: "150"
      }, section.title));
      let sectionRole;
      switch (actionRole) {
        case "option":
          sectionRole = "presentation";
          break;
        case "menuitem":
          sectionRole = hasMultipleSections ? "presentation" : "menu";
          break;
        default:
          sectionRole = void 0;
          break;
      }
      let sectionMarkup = /* @__PURE__ */ React2.createElement(React2.Fragment, null, titleMarkup, /* @__PURE__ */ React2.createElement(Box4.Box, Object.assign({
        as: "div",
        padding: "150"
      }, hasMultipleSections && {
        paddingBlockStart: "0"
      }, {
        tabIndex: hasMultipleSections ? void 0 : -1
      }), /* @__PURE__ */ React2.createElement(BlockStack4.BlockStack, Object.assign({
        gap: "050",
        as: "ul"
      }, sectionRole && {
        role: sectionRole
      }), actionMarkup)));
      return hasMultipleSections ? /* @__PURE__ */ React2.createElement(Box4.Box, Object.assign({
        as: "li",
        role: "presentation",
        borderColor: "border-secondary"
      }, !isFirst && {
        borderBlockStartWidth: "025"
      }, !section.title && {
        paddingBlockStart: "150"
      }), sectionMarkup) : sectionMarkup;
    }
    exports.Section = Section;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/KeypressListener/KeypressListener.js
var require_KeypressListener = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/KeypressListener/KeypressListener.js"(exports) {
    "use strict";
    var React2 = require_react(), useIsomorphicLayoutEffect = require_use_isomorphic_layout_effect();
    function KeypressListener({
      keyCode,
      handler,
      keyEvent = "keyup",
      options,
      useCapture
    }) {
      let tracked = React2.useRef({
        handler,
        keyCode
      });
      useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
        tracked.current = {
          handler,
          keyCode
        };
      }, [handler, keyCode]);
      let handleKeyEvent = React2.useCallback((event) => {
        let {
          handler: handler2,
          keyCode: keyCode2
        } = tracked.current;
        event.keyCode === keyCode2 && handler2(event);
      }, []);
      return React2.useEffect(() => (document.addEventListener(keyEvent, handleKeyEvent, useCapture || options), () => {
        document.removeEventListener(keyEvent, handleKeyEvent, useCapture || options);
      }), [keyEvent, handleKeyEvent, useCapture, options]), null;
    }
    exports.KeypressListener = KeypressListener;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TextField/TextField.css.js
var require_TextField_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TextField/TextField.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      TextField: "Polaris-TextField",
      ClearButton: "Polaris-TextField__ClearButton",
      Loading: "Polaris-TextField__Loading",
      disabled: "Polaris-TextField--disabled",
      error: "Polaris-TextField--error",
      readOnly: "Polaris-TextField--readOnly",
      Input: "Polaris-TextField__Input",
      Backdrop: "Polaris-TextField__Backdrop",
      multiline: "Polaris-TextField--multiline",
      hasValue: "Polaris-TextField--hasValue",
      focus: "Polaris-TextField--focus",
      VerticalContent: "Polaris-TextField__VerticalContent",
      InputAndSuffixWrapper: "Polaris-TextField__InputAndSuffixWrapper",
      toneMagic: "Polaris-TextField--toneMagic",
      Prefix: "Polaris-TextField__Prefix",
      Suffix: "Polaris-TextField__Suffix",
      AutoSizeWrapper: "Polaris-TextField__AutoSizeWrapper",
      AutoSizeWrapperWithSuffix: "Polaris-TextField__AutoSizeWrapperWithSuffix",
      suggestion: "Polaris-TextField--suggestion",
      borderless: "Polaris-TextField--borderless",
      slim: "Polaris-TextField--slim",
      "Input-hasClearButton": "Polaris-TextField__Input--hasClearButton",
      "Input-suffixed": "Polaris-TextField__Input--suffixed",
      "Input-alignRight": "Polaris-TextField__Input--alignRight",
      "Input-alignLeft": "Polaris-TextField__Input--alignLeft",
      "Input-alignCenter": "Polaris-TextField__Input--alignCenter",
      "Input-autoSize": "Polaris-TextField__Input--autoSize",
      PrefixIcon: "Polaris-TextField__PrefixIcon",
      CharacterCount: "Polaris-TextField__CharacterCount",
      AlignFieldBottom: "Polaris-TextField__AlignFieldBottom",
      Spinner: "Polaris-TextField__Spinner",
      SpinnerIcon: "Polaris-TextField__SpinnerIcon",
      Resizer: "Polaris-TextField__Resizer",
      DummyInput: "Polaris-TextField__DummyInput",
      Segment: "Polaris-TextField__Segment",
      monospaced: "Polaris-TextField--monospaced"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TextField/components/Spinner/Spinner.js
var require_Spinner2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TextField/components/Spinner/Spinner.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), TextField_module = require_TextField_css(), Icon2 = require_Icon(), Spinner2 = /* @__PURE__ */ React2.forwardRef(function({
      onChange,
      onClick,
      onMouseDown,
      onMouseUp,
      onBlur
    }, ref) {
      function handleStep(step) {
        return () => onChange(step);
      }
      function handleMouseDown(onChange2) {
        return (event) => {
          event.button === 0 && onMouseDown?.(onChange2);
        };
      }
      return /* @__PURE__ */ React2.createElement("div", {
        className: TextField_module.default.Spinner,
        onClick,
        "aria-hidden": !0,
        ref
      }, /* @__PURE__ */ React2.createElement("div", {
        role: "button",
        className: TextField_module.default.Segment,
        tabIndex: -1,
        onClick: handleStep(1),
        onMouseDown: handleMouseDown(handleStep(1)),
        onMouseUp,
        onBlur
      }, /* @__PURE__ */ React2.createElement("div", {
        className: TextField_module.default.SpinnerIcon
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.ChevronUpIcon
      }))), /* @__PURE__ */ React2.createElement("div", {
        role: "button",
        className: TextField_module.default.Segment,
        tabIndex: -1,
        onClick: handleStep(-1),
        onMouseDown: handleMouseDown(handleStep(-1)),
        onMouseUp,
        onBlur
      }, /* @__PURE__ */ React2.createElement("div", {
        className: TextField_module.default.SpinnerIcon
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.ChevronDownIcon
      }))));
    });
    exports.Spinner = Spinner2;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Labelled/Labelled.css.js
var require_Labelled_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Labelled/Labelled.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      hidden: "Polaris-Labelled--hidden",
      LabelWrapper: "Polaris-Labelled__LabelWrapper",
      disabled: "Polaris-Labelled--disabled",
      HelpText: "Polaris-Labelled__HelpText",
      readOnly: "Polaris-Labelled--readOnly",
      Error: "Polaris-Labelled__Error",
      Action: "Polaris-Labelled__Action"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/InlineError/InlineError.css.js
var require_InlineError_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/InlineError/InlineError.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      InlineError: "Polaris-InlineError",
      Icon: "Polaris-InlineError__Icon"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/InlineError/InlineError.js
var require_InlineError = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/InlineError/InlineError.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), InlineError_module = require_InlineError_css(), Icon2 = require_Icon(), Text4 = require_Text();
    function InlineError({
      message,
      fieldID
    }) {
      return message ? /* @__PURE__ */ React2.createElement("div", {
        id: errorTextID(fieldID),
        className: InlineError_module.default.InlineError
      }, /* @__PURE__ */ React2.createElement("div", {
        className: InlineError_module.default.Icon
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.AlertCircleIcon
      })), /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "bodyMd"
      }, message)) : null;
    }
    function errorTextID(id) {
      return `${id}Error`;
    }
    exports.InlineError = InlineError;
    exports.errorTextID = errorTextID;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Label/Label.css.js
var require_Label_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Label/Label.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Label: "Polaris-Label",
      hidden: "Polaris-Label--hidden",
      Text: "Polaris-Label__Text",
      RequiredIndicator: "Polaris-Label__RequiredIndicator"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Label/Label.js
var require_Label = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Label/Label.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Label_module = require_Label_css(), Text4 = require_Text();
    function labelID(id) {
      return `${id}Label`;
    }
    function Label({
      children,
      id,
      hidden,
      requiredIndicator
    }) {
      let className = css.classNames(Label_module.default.Label, hidden && Label_module.default.hidden);
      return /* @__PURE__ */ React2.createElement("div", {
        className
      }, /* @__PURE__ */ React2.createElement("label", {
        id: labelID(id),
        htmlFor: id,
        className: css.classNames(Label_module.default.Text, requiredIndicator && Label_module.default.RequiredIndicator)
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "bodyMd"
      }, children)));
    }
    exports.Label = Label;
    exports.labelID = labelID;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Labelled/Labelled.js
var require_Labelled = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Labelled/Labelled.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Labelled_module = require_Labelled_css(), InlineError = require_InlineError(), Label = require_Label(), utils = require_utils(), Text4 = require_Text();
    function Labelled({
      id,
      label,
      error,
      action: action8,
      helpText,
      children,
      labelHidden,
      requiredIndicator,
      disabled,
      readOnly,
      ...rest
    }) {
      let className = css.classNames(labelHidden && Labelled_module.default.hidden, disabled && Labelled_module.default.disabled, readOnly && Labelled_module.default.readOnly), actionMarkup = action8 ? /* @__PURE__ */ React2.createElement("div", {
        className: Labelled_module.default.Action
      }, utils.buttonFrom(action8, {
        variant: "plain"
      })) : null, helpTextMarkup = helpText ? /* @__PURE__ */ React2.createElement("div", {
        className: Labelled_module.default.HelpText,
        id: helpTextID(id),
        "aria-disabled": disabled
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        tone: "subdued",
        variant: "bodyMd",
        breakWord: !0
      }, helpText)) : null, errorMarkup = error && typeof error != "boolean" && /* @__PURE__ */ React2.createElement("div", {
        className: Labelled_module.default.Error
      }, /* @__PURE__ */ React2.createElement(InlineError.InlineError, {
        message: error,
        fieldID: id
      })), labelMarkup = label ? /* @__PURE__ */ React2.createElement("div", {
        className: Labelled_module.default.LabelWrapper
      }, /* @__PURE__ */ React2.createElement(Label.Label, Object.assign({
        id,
        requiredIndicator
      }, rest, {
        hidden: !1
      }), label), actionMarkup) : null;
      return /* @__PURE__ */ React2.createElement("div", {
        className
      }, labelMarkup, children, errorMarkup, helpTextMarkup);
    }
    function helpTextID(id) {
      return `${id}HelpText`;
    }
    exports.labelID = Label.labelID;
    exports.Labelled = Labelled;
    exports.helpTextID = helpTextID;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Connected/Connected.css.js
var require_Connected_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Connected/Connected.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Connected: "Polaris-Connected",
      Item: "Polaris-Connected__Item",
      "Item-primary": "Polaris-Connected__Item--primary",
      "Item-focused": "Polaris-Connected__Item--focused"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Connected/components/Item/Item.js
var require_Item2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Connected/components/Item/Item.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), useToggle = require_use_toggle(), Connected_module = require_Connected_css();
    function Item({
      children,
      position
    }) {
      let {
        value: focused,
        setTrue: forceTrueFocused,
        setFalse: forceFalseFocused
      } = useToggle.useToggle(!1), className = css.classNames(Connected_module.default.Item, focused && Connected_module.default["Item-focused"], position === "primary" ? Connected_module.default["Item-primary"] : Connected_module.default["Item-connection"]);
      return /* @__PURE__ */ React2.createElement("div", {
        onBlur: forceFalseFocused,
        onFocus: forceTrueFocused,
        className
      }, children);
    }
    exports.Item = Item;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Connected/Connected.js
var require_Connected = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Connected/Connected.js"(exports) {
    "use strict";
    var React2 = require_react(), Connected_module = require_Connected_css(), Item = require_Item2();
    function Connected({
      children,
      left,
      right
    }) {
      let leftConnectionMarkup = left ? /* @__PURE__ */ React2.createElement(Item.Item, {
        position: "left"
      }, left) : null, rightConnectionMarkup = right ? /* @__PURE__ */ React2.createElement(Item.Item, {
        position: "right"
      }, right) : null;
      return /* @__PURE__ */ React2.createElement("div", {
        className: Connected_module.default.Connected
      }, leftConnectionMarkup, /* @__PURE__ */ React2.createElement(Item.Item, {
        position: "primary"
      }, children), rightConnectionMarkup);
    }
    exports.Connected = Connected;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TextField/components/Resizer/Resizer.js
var require_Resizer = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TextField/components/Resizer/Resizer.js"(exports) {
    "use strict";
    var React2 = require_react(), useIsomorphicLayoutEffect = require_use_isomorphic_layout_effect(), TextField_module = require_TextField_css(), EventListener = require_EventListener();
    function Resizer({
      contents,
      currentHeight: currentHeightProp = null,
      minimumLines,
      onHeightChange
    }) {
      let contentNode = React2.useRef(null), minimumLinesNode = React2.useRef(null), animationFrame = React2.useRef(), currentHeight = React2.useRef(currentHeightProp);
      currentHeightProp !== currentHeight.current && (currentHeight.current = currentHeightProp), React2.useEffect(() => () => {
        animationFrame.current && cancelAnimationFrame(animationFrame.current);
      }, []);
      let minimumLinesMarkup = minimumLines ? /* @__PURE__ */ React2.createElement("div", {
        ref: minimumLinesNode,
        className: TextField_module.default.DummyInput,
        dangerouslySetInnerHTML: {
          __html: getContentsForMinimumLines(minimumLines)
        }
      }) : null, handleHeightCheck = React2.useCallback(() => {
        animationFrame.current && cancelAnimationFrame(animationFrame.current), animationFrame.current = requestAnimationFrame(() => {
          if (!contentNode.current || !minimumLinesNode.current)
            return;
          let newHeight = Math.max(contentNode.current.offsetHeight, minimumLinesNode.current.offsetHeight);
          newHeight !== currentHeight.current && onHeightChange(newHeight);
        });
      }, [onHeightChange]);
      return useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
        handleHeightCheck();
      }), /* @__PURE__ */ React2.createElement("div", {
        "aria-hidden": !0,
        className: TextField_module.default.Resizer
      }, /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
        event: "resize",
        handler: handleHeightCheck
      }), /* @__PURE__ */ React2.createElement("div", {
        ref: contentNode,
        className: TextField_module.default.DummyInput,
        dangerouslySetInnerHTML: {
          __html: getFinalContents(contents)
        }
      }), minimumLinesMarkup);
    }
    var ENTITIES_TO_REPLACE = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      "\n": "<br>",
      "\r": ""
    }, REPLACE_REGEX = new RegExp(`[${Object.keys(ENTITIES_TO_REPLACE).join()}]`, "g");
    function replaceEntity(entity) {
      return ENTITIES_TO_REPLACE[entity];
    }
    function getContentsForMinimumLines(minimumLines) {
      let content = "";
      for (let line = 0; line < minimumLines; line++)
        content += "<br>";
      return content;
    }
    function getFinalContents(contents) {
      return contents ? `${contents.replace(REPLACE_REGEX, replaceEntity)}<br>` : "<br>";
    }
    exports.Resizer = Resizer;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TextField/TextField.js
var require_TextField = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TextField/TextField.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), useIsAfterInitialMount = require_use_is_after_initial_mount(), types = require_types(), useEventListener = require_use_event_listener(), TextField_module = require_TextField_css(), Spinner$1 = require_Spinner2(), Labelled = require_Labelled(), Connected = require_Connected(), Resizer = require_Resizer(), Label = require_Label(), hooks = require_hooks2(), Icon2 = require_Icon(), Text4 = require_Text(), Spinner2 = require_Spinner();
    function TextField2({
      prefix,
      suffix,
      verticalContent,
      placeholder,
      value = "",
      helpText,
      label,
      labelAction,
      labelHidden,
      disabled,
      clearButton,
      readOnly,
      autoFocus,
      focused,
      multiline,
      error,
      connectedRight,
      connectedLeft,
      type = "text",
      name,
      id: idProp,
      role,
      step,
      largeStep,
      autoComplete,
      max,
      maxLength,
      maxHeight,
      min,
      minLength,
      pattern,
      inputMode,
      spellCheck,
      ariaOwns,
      ariaControls,
      ariaExpanded,
      ariaActiveDescendant,
      ariaAutocomplete,
      showCharacterCount,
      align,
      requiredIndicator,
      monospaced,
      selectTextOnFocus,
      suggestion,
      variant = "inherit",
      size = "medium",
      onClearButtonClick,
      onChange,
      onSpinnerChange,
      onFocus,
      onBlur,
      tone,
      autoSize,
      loading
    }) {
      let i18n = hooks.useI18n(), [height, setHeight] = React2.useState(null), [focus, setFocus] = React2.useState(Boolean(focused)), isAfterInitial = useIsAfterInitialMount.useIsAfterInitialMount(), uniqId = React2.useId(), id = idProp ?? uniqId, textFieldRef = React2.useRef(null), inputRef = React2.useRef(null), textAreaRef = React2.useRef(null), prefixRef = React2.useRef(null), suffixRef = React2.useRef(null), loadingRef = React2.useRef(null), verticalContentRef = React2.useRef(null), buttonPressTimer = React2.useRef(), spinnerRef = React2.useRef(null), getInputRef = React2.useCallback(() => multiline ? textAreaRef.current : inputRef.current, [multiline]);
      React2.useEffect(() => {
        let input2 = getInputRef();
        !input2 || focused === void 0 || (focused ? input2.focus() : input2.blur());
      }, [focused, verticalContent, getInputRef]), React2.useEffect(() => {
        let input2 = inputRef.current;
        !input2 || !(type === "text" || type === "tel" || type === "search" || type === "url" || type === "password") || !suggestion || input2.setSelectionRange(value.length, suggestion.length);
      }, [focus, value, type, suggestion]);
      let normalizedValue = suggestion || value, normalizedStep = step ?? 1, normalizedMax = max ?? 1 / 0, normalizedMin = min ?? -1 / 0, className = css.classNames(TextField_module.default.TextField, Boolean(normalizedValue) && TextField_module.default.hasValue, disabled && TextField_module.default.disabled, readOnly && TextField_module.default.readOnly, error && TextField_module.default.error, tone && TextField_module.default[css.variationName("tone", tone)], multiline && TextField_module.default.multiline, focus && !disabled && TextField_module.default.focus, variant !== "inherit" && TextField_module.default[variant], size === "slim" && TextField_module.default.slim), inputType = type === "currency" ? "text" : type, isNumericType = type === "number" || type === "integer", iconPrefix = /* @__PURE__ */ React2.isValidElement(prefix) && prefix.type === Icon2.Icon, prefixMarkup = prefix ? /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(TextField_module.default.Prefix, iconPrefix && TextField_module.default.PrefixIcon),
        id: `${id}-Prefix`,
        ref: prefixRef
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "bodyMd"
      }, prefix)) : null, suffixMarkup = suffix ? /* @__PURE__ */ React2.createElement("div", {
        className: TextField_module.default.Suffix,
        id: `${id}-Suffix`,
        ref: suffixRef
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "bodyMd"
      }, suffix)) : null, loadingMarkup = loading ? /* @__PURE__ */ React2.createElement("div", {
        className: TextField_module.default.Loading,
        id: `${id}-Loading`,
        ref: loadingRef
      }, /* @__PURE__ */ React2.createElement(Spinner2.Spinner, {
        size: "small"
      })) : null, characterCountMarkup = null;
      if (showCharacterCount) {
        let characterCount = normalizedValue.length, characterCountLabel = maxLength ? i18n.translate("Polaris.TextField.characterCountWithMaxLength", {
          count: characterCount,
          limit: maxLength
        }) : i18n.translate("Polaris.TextField.characterCount", {
          count: characterCount
        }), characterCountClassName = css.classNames(TextField_module.default.CharacterCount, multiline && TextField_module.default.AlignFieldBottom), characterCountText = maxLength ? `${characterCount}/${maxLength}` : characterCount;
        characterCountMarkup = /* @__PURE__ */ React2.createElement("div", {
          id: `${id}-CharacterCounter`,
          className: characterCountClassName,
          "aria-label": characterCountLabel,
          "aria-live": focus ? "polite" : "off",
          "aria-atomic": "true",
          onClick: handleClickChild
        }, /* @__PURE__ */ React2.createElement(Text4.Text, {
          as: "span",
          variant: "bodyMd"
        }, characterCountText));
      }
      let clearButtonMarkup = clearButton && normalizedValue !== "" ? /* @__PURE__ */ React2.createElement("button", {
        type: "button",
        className: TextField_module.default.ClearButton,
        onClick: handleClearButtonPress,
        disabled
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        visuallyHidden: !0
      }, i18n.translate("Polaris.Common.clear")), /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.XCircleIcon,
        tone: "base"
      })) : null, handleNumberChange = React2.useCallback((steps, stepAmount = normalizedStep) => {
        if (onChange == null && onSpinnerChange == null)
          return;
        let dpl = (num) => (num.toString().split(".")[1] || []).length, numericValue = value ? parseFloat(value) : 0;
        if (isNaN(numericValue))
          return;
        let decimalPlaces = type === "integer" ? 0 : Math.max(dpl(numericValue), dpl(stepAmount)), newValue = Math.min(Number(normalizedMax), Math.max(numericValue + steps * stepAmount, Number(normalizedMin)));
        onSpinnerChange != null ? onSpinnerChange(String(newValue.toFixed(decimalPlaces)), id) : onChange?.(String(newValue.toFixed(decimalPlaces)), id);
      }, [id, normalizedMax, normalizedMin, onChange, onSpinnerChange, normalizedStep, type, value]), handleSpinnerButtonRelease = React2.useCallback(() => {
        clearTimeout(buttonPressTimer.current);
      }, []), handleSpinnerButtonPress = React2.useCallback((onChange2) => {
        let interval = 200, onChangeInterval = () => {
          interval > 50 && (interval -= 10), onChange2(0), buttonPressTimer.current = window.setTimeout(onChangeInterval, interval);
        };
        buttonPressTimer.current = window.setTimeout(onChangeInterval, interval), document.addEventListener("mouseup", handleSpinnerButtonRelease, {
          once: !0
        });
      }, [handleSpinnerButtonRelease]), spinnerMarkup = isNumericType && step !== 0 && !disabled && !readOnly ? /* @__PURE__ */ React2.createElement(Spinner$1.Spinner, {
        onClick: handleClickChild,
        onChange: handleNumberChange,
        onMouseDown: handleSpinnerButtonPress,
        onMouseUp: handleSpinnerButtonRelease,
        ref: spinnerRef,
        onBlur: handleOnBlur
      }) : null, style = multiline && height ? {
        height,
        maxHeight
      } : null, handleExpandingResize = React2.useCallback((height2) => {
        setHeight(height2);
      }, []), resizer = multiline && isAfterInitial ? /* @__PURE__ */ React2.createElement(Resizer.Resizer, {
        contents: normalizedValue || placeholder,
        currentHeight: height,
        minimumLines: typeof multiline == "number" ? multiline : 1,
        onHeightChange: handleExpandingResize
      }) : null, describedBy = [];
      error && describedBy.push(`${id}Error`), helpText && describedBy.push(Labelled.helpTextID(id)), showCharacterCount && describedBy.push(`${id}-CharacterCounter`);
      let labelledBy = [];
      prefix && labelledBy.push(`${id}-Prefix`), suffix && labelledBy.push(`${id}-Suffix`), verticalContent && labelledBy.push(`${id}-VerticalContent`), labelledBy.unshift(Label.labelID(id));
      let inputClassName = css.classNames(TextField_module.default.Input, align && TextField_module.default[css.variationName("Input-align", align)], suffix && TextField_module.default["Input-suffixed"], clearButton && TextField_module.default["Input-hasClearButton"], monospaced && TextField_module.default.monospaced, suggestion && TextField_module.default.suggestion, autoSize && TextField_module.default["Input-autoSize"]), handleOnFocus = (event) => {
        setFocus(!0), selectTextOnFocus && !suggestion && getInputRef()?.select(), onFocus && onFocus(event);
      };
      useEventListener.useEventListener("wheel", handleOnWheel, inputRef);
      function handleOnWheel(event) {
        document.activeElement === event.target && isNumericType && event.stopPropagation();
      }
      let input = /* @__PURE__ */ React2.createElement(multiline ? "textarea" : "input", {
        name,
        id,
        disabled,
        readOnly,
        role,
        autoFocus,
        value: normalizedValue,
        placeholder,
        style,
        autoComplete,
        className: inputClassName,
        ref: multiline ? textAreaRef : inputRef,
        min,
        max,
        step,
        minLength,
        maxLength,
        spellCheck,
        pattern,
        inputMode,
        type: inputType,
        rows: getRows(multiline),
        size: autoSize ? 1 : void 0,
        "aria-describedby": describedBy.length ? describedBy.join(" ") : void 0,
        "aria-labelledby": labelledBy.join(" "),
        "aria-invalid": Boolean(error),
        "aria-owns": ariaOwns,
        "aria-activedescendant": ariaActiveDescendant,
        "aria-autocomplete": ariaAutocomplete,
        "aria-controls": ariaControls,
        "aria-expanded": ariaExpanded,
        "aria-required": requiredIndicator,
        ...normalizeAriaMultiline(multiline),
        onFocus: handleOnFocus,
        onBlur: handleOnBlur,
        onClick: handleClickChild,
        onKeyPress: handleKeyPress,
        onKeyDown: handleKeyDown,
        onChange: suggestion ? void 0 : handleChange,
        onInput: suggestion ? handleChange : void 0,
        // 1Password disable data attribute
        "data-1p-ignore": autoComplete === "off" || void 0,
        // LastPass disable data attribute
        "data-lpignore": autoComplete === "off" || void 0,
        // Dashlane disable data attribute
        "data-form-type": autoComplete === "off" ? "other" : void 0
      }), inputWithVerticalContentMarkup = verticalContent ? /* @__PURE__ */ React2.createElement("div", {
        className: TextField_module.default.VerticalContent,
        id: `${id}-VerticalContent`,
        ref: verticalContentRef,
        onClick: handleClickChild
      }, verticalContent, input) : null, inputMarkup = verticalContent ? inputWithVerticalContentMarkup : input, backdropMarkup = /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(TextField_module.default.Backdrop, connectedLeft && TextField_module.default["Backdrop-connectedLeft"], connectedRight && TextField_module.default["Backdrop-connectedRight"])
      }), inputAndSuffixMarkup = autoSize ? /* @__PURE__ */ React2.createElement("div", {
        className: TextField_module.default.InputAndSuffixWrapper
      }, /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(TextField_module.default.AutoSizeWrapper, suffix && TextField_module.default.AutoSizeWrapperWithSuffix),
        "data-auto-size-value": value || placeholder
      }, inputMarkup), suffixMarkup) : /* @__PURE__ */ React2.createElement(React2.Fragment, null, inputMarkup, suffixMarkup);
      return /* @__PURE__ */ React2.createElement(Labelled.Labelled, {
        label,
        id,
        error,
        action: labelAction,
        labelHidden,
        helpText,
        requiredIndicator,
        disabled,
        readOnly
      }, /* @__PURE__ */ React2.createElement(Connected.Connected, {
        left: connectedLeft,
        right: connectedRight
      }, /* @__PURE__ */ React2.createElement("div", {
        className,
        onClick: handleClick,
        ref: textFieldRef
      }, prefixMarkup, inputAndSuffixMarkup, characterCountMarkup, loadingMarkup, clearButtonMarkup, spinnerMarkup, backdropMarkup, resizer)));
      function handleChange(event) {
        onChange && onChange(event.currentTarget.value, id);
      }
      function handleClick(event) {
        let {
          target
        } = event, inputRefRole = inputRef?.current?.getAttribute("role");
        if (target === inputRef.current && inputRefRole === "combobox") {
          inputRef.current?.focus(), handleOnFocus(event);
          return;
        }
        isPrefixOrSuffix(target) || isVerticalContent(target) || isInput(target) || isSpinner(target) || isLoadingSpinner(target) || focus || getInputRef()?.focus();
      }
      function handleClickChild(event) {
        !isSpinner(event.target) && !isInput(event.target) && event.stopPropagation(), !(isPrefixOrSuffix(event.target) || isVerticalContent(event.target) || isInput(event.target) || isLoadingSpinner(event.target) || focus) && (setFocus(!0), getInputRef()?.focus());
      }
      function handleClearButtonPress() {
        onClearButtonClick && onClearButtonClick(id);
      }
      function handleKeyPress(event) {
        let {
          key,
          which
        } = event, numbersSpec = /[\d.,eE+-]$/, integerSpec = /[\deE+-]$/;
        !isNumericType || which === types.Key.Enter || type === "number" && numbersSpec.test(key) || type === "integer" && integerSpec.test(key) || event.preventDefault();
      }
      function handleKeyDown(event) {
        if (!isNumericType)
          return;
        let {
          key,
          which
        } = event;
        type === "integer" && (key === "ArrowUp" || which === types.Key.UpArrow) && (handleNumberChange(1), event.preventDefault()), type === "integer" && (key === "ArrowDown" || which === types.Key.DownArrow) && (handleNumberChange(-1), event.preventDefault()), (which === types.Key.Home || key === "Home") && min !== void 0 && (onSpinnerChange != null ? onSpinnerChange(String(min), id) : onChange?.(String(min), id)), (which === types.Key.End || key === "End") && max !== void 0 && (onSpinnerChange != null ? onSpinnerChange(String(max), id) : onChange?.(String(max), id)), (which === types.Key.PageUp || key === "PageUp") && largeStep !== void 0 && handleNumberChange(1, largeStep), (which === types.Key.PageDown || key === "PageDown") && largeStep !== void 0 && handleNumberChange(-1, largeStep);
      }
      function handleOnBlur(event) {
        setFocus(!1), !textFieldRef.current?.contains(event?.relatedTarget) && onBlur && onBlur(event);
      }
      function isInput(target) {
        let input2 = getInputRef();
        return target instanceof HTMLElement && input2 && (input2.contains(target) || input2.contains(document.activeElement));
      }
      function isPrefixOrSuffix(target) {
        return target instanceof Element && (prefixRef.current && prefixRef.current.contains(target) || suffixRef.current && suffixRef.current.contains(target));
      }
      function isSpinner(target) {
        return target instanceof Element && spinnerRef.current && spinnerRef.current.contains(target);
      }
      function isLoadingSpinner(target) {
        return target instanceof Element && loadingRef.current && loadingRef.current.contains(target);
      }
      function isVerticalContent(target) {
        return target instanceof Element && verticalContentRef.current && (verticalContentRef.current.contains(target) || verticalContentRef.current.contains(document.activeElement));
      }
    }
    function getRows(multiline) {
      if (multiline)
        return typeof multiline == "number" ? multiline : 1;
    }
    function normalizeAriaMultiline(multiline) {
      if (multiline)
        return Boolean(multiline) || typeof multiline == "number" && multiline > 0 ? {
          "aria-multiline": !0
        } : void 0;
    }
    exports.TextField = TextField2;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionList/ActionList.js
var require_ActionList = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionList/ActionList.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), types = require_types(), focus = require_focus(), FilterActionsProvider = require_FilterActionsProvider(), Section = require_Section(), KeypressListener = require_KeypressListener(), TextField2 = require_TextField(), hooks = require_hooks2(), Box4 = require_Box(), Icon2 = require_Icon(), Item = require_Item(), FILTER_ACTIONS_THRESHOLD = 8;
    function ActionList({
      items,
      sections = [],
      actionRole,
      allowFiltering,
      onActionAnyItem
    }) {
      let i18n = hooks.useI18n(), filterActions = React2.useContext(FilterActionsProvider.FilterActionsContext), finalSections = [], actionListRef = React2.useRef(null), [searchText, setSearchText] = React2.useState("");
      items ? finalSections = [{
        items
      }, ...sections] : sections && (finalSections = sections);
      let isFilterable = finalSections?.some((section) => section.items.some((item) => typeof item.content == "string")), hasMultipleSections = finalSections.length > 1, elementRole = hasMultipleSections && actionRole === "menuitem" ? "menu" : void 0, elementTabIndex = hasMultipleSections && actionRole === "menuitem" ? -1 : void 0, filteredSections = finalSections?.map((section) => ({
        ...section,
        items: section.items.filter(({
          content
        }) => typeof content == "string" ? content?.toLowerCase().includes(searchText.toLowerCase()) : content)
      })), sectionMarkup = filteredSections.map((section, index) => section.items.length > 0 ? /* @__PURE__ */ React2.createElement(Section.Section, {
        key: typeof section.title == "string" ? section.title : index,
        section,
        hasMultipleSections,
        actionRole,
        onActionAnyItem,
        isFirst: index === 0
      }) : null), handleFocusPreviousItem = (evt) => {
        evt.preventDefault(), actionListRef.current && evt.target && actionListRef.current.contains(evt.target) && focus.wrapFocusPreviousFocusableMenuItem(actionListRef.current, evt.target);
      }, handleFocusNextItem = (evt) => {
        evt.preventDefault(), actionListRef.current && evt.target && actionListRef.current.contains(evt.target) && focus.wrapFocusNextFocusableMenuItem(actionListRef.current, evt.target);
      }, listeners = actionRole === "menuitem" ? /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
        keyEvent: "keydown",
        keyCode: types.Key.DownArrow,
        handler: handleFocusNextItem
      }), /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
        keyEvent: "keydown",
        keyCode: types.Key.UpArrow,
        handler: handleFocusPreviousItem
      })) : null, totalFilteredActions = React2.useMemo(() => filteredSections?.reduce((acc, section) => acc + section.items.length, 0) || 0, [filteredSections]), hasManyActions = (finalSections?.reduce((acc, section) => acc + section.items.length, 0) || 0) >= FILTER_ACTIONS_THRESHOLD;
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, (allowFiltering || filterActions) && hasManyActions && isFilterable && /* @__PURE__ */ React2.createElement(Box4.Box, {
        padding: "200",
        paddingBlockEnd: totalFilteredActions > 0 ? "0" : "200"
      }, /* @__PURE__ */ React2.createElement(TextField2.TextField, {
        clearButton: !0,
        labelHidden: !0,
        label: i18n.translate("Polaris.ActionList.SearchField.placeholder"),
        placeholder: i18n.translate("Polaris.ActionList.SearchField.placeholder"),
        autoComplete: "off",
        value: searchText,
        onChange: (value) => setSearchText(value),
        prefix: /* @__PURE__ */ React2.createElement(Icon2.Icon, {
          source: polarisIcons.SearchIcon
        }),
        onClearButtonClick: () => setSearchText("")
      })), /* @__PURE__ */ React2.createElement(Box4.Box, {
        as: hasMultipleSections ? "ul" : "div",
        ref: actionListRef,
        role: elementRole,
        tabIndex: elementTabIndex
      }, listeners, sectionMarkup));
    }
    ActionList.Item = Item.Item;
    exports.ActionList = ActionList;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionMenu/ActionMenu.css.js
var require_ActionMenu_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionMenu/ActionMenu.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ActionMenu: "Polaris-ActionMenu"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/RollupActions/RollupActions.css.js
var require_RollupActions_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/RollupActions/RollupActions.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      RollupActivator: "Polaris-ActionMenu-RollupActions__RollupActivator"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Popover/set-activator-attributes.js
var require_set_activator_attributes = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Popover/set-activator-attributes.js"(exports) {
    "use strict";
    function setActivatorAttributes(activator, {
      id,
      active = !1,
      ariaHaspopup,
      activatorDisabled = !1
    }) {
      activatorDisabled || (activator.tabIndex = activator.tabIndex || 0), activator.setAttribute("aria-controls", id), activator.setAttribute("aria-owns", id), activator.setAttribute("aria-expanded", String(active)), activator.setAttribute("data-state", active ? "open" : "closed"), ariaHaspopup != null && activator.setAttribute("aria-haspopup", String(ariaHaspopup));
    }
    exports.setActivatorAttributes = setActivatorAttributes;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/components.js
var require_components = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/components.js"(exports) {
    "use strict";
    var React2 = require_react();
    function wrapWithComponent(element, Component, props) {
      return element == null ? null : isElementOfType(element, Component) ? element : /* @__PURE__ */ React2.createElement(Component, props, element);
    }
    var isComponent = (AComponent, AnotherComponent) => AComponent === AnotherComponent;
    function isElementOfType(element, Component) {
      if (element == null || !/* @__PURE__ */ React2.isValidElement(element) || typeof element.type == "string")
        return !1;
      let {
        type: defaultType
      } = element, type = element.props?.__type__ || defaultType;
      return (Array.isArray(Component) ? Component : [Component]).some((AComponent) => typeof type != "string" && isComponent(AComponent, type));
    }
    function elementChildren(children, predicate = () => !0) {
      return React2.Children.toArray(children).filter((child) => /* @__PURE__ */ React2.isValidElement(child) && predicate(child));
    }
    function ConditionalWrapper({
      condition,
      wrapper,
      children
    }) {
      return condition ? wrapper(children) : children;
    }
    function ConditionalRender({
      condition,
      children
    }) {
      return condition ? children : null;
    }
    exports.ConditionalRender = ConditionalRender;
    exports.ConditionalWrapper = ConditionalWrapper;
    exports.elementChildren = elementChildren;
    exports.isElementOfType = isElementOfType;
    exports.wrapWithComponent = wrapWithComponent;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Popover/Popover.css.js
var require_Popover_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Popover/Popover.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Popover: "Polaris-Popover",
      PopoverOverlay: "Polaris-Popover__PopoverOverlay",
      "PopoverOverlay-noAnimation": "Polaris-Popover__PopoverOverlay--noAnimation",
      "PopoverOverlay-entering": "Polaris-Popover__PopoverOverlay--entering",
      "PopoverOverlay-open": "Polaris-Popover__PopoverOverlay--open",
      measuring: "Polaris-Popover--measuring",
      "PopoverOverlay-exiting": "Polaris-Popover__PopoverOverlay--exiting",
      fullWidth: "Polaris-Popover--fullWidth",
      Content: "Polaris-Popover__Content",
      positionedAbove: "Polaris-Popover--positionedAbove",
      positionedCover: "Polaris-Popover--positionedCover",
      ContentContainer: "Polaris-Popover__ContentContainer",
      "Content-fullHeight": "Polaris-Popover__Content--fullHeight",
      "Content-fluidContent": "Polaris-Popover__Content--fluidContent",
      Pane: "Polaris-Popover__Pane",
      "Pane-fixed": "Polaris-Popover__Pane--fixed",
      "Pane-subdued": "Polaris-Popover__Pane--subdued",
      "Pane-captureOverscroll": "Polaris-Popover__Pane--captureOverscroll",
      Section: "Polaris-Popover__Section",
      FocusTracker: "Polaris-Popover__FocusTracker",
      "PopoverOverlay-hideOnPrint": "Polaris-Popover__PopoverOverlay--hideOnPrint"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Popover/components/Section/Section.js
var require_Section2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Popover/components/Section/Section.js"(exports) {
    "use strict";
    var React2 = require_react(), Popover_module = require_Popover_css(), Box4 = require_Box();
    function Section({
      children
    }) {
      return /* @__PURE__ */ React2.createElement("div", {
        className: Popover_module.default.Section
      }, /* @__PURE__ */ React2.createElement(Box4.Box, {
        paddingInlineStart: "300",
        paddingInlineEnd: "300",
        paddingBlockStart: "200",
        paddingBlockEnd: "150"
      }, children));
    }
    exports.Section = Section;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Popover/components/Pane/Pane.js
var require_Pane = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Popover/components/Pane/Pane.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), components = require_components(), Popover_module = require_Popover_css(), Section = require_Section2(), Scrollable = require_Scrollable();
    function Pane({
      captureOverscroll = !1,
      fixed,
      sectioned,
      children,
      height,
      subdued,
      onScrolledToBottom
    }) {
      let className = css.classNames(Popover_module.default.Pane, fixed && Popover_module.default["Pane-fixed"], subdued && Popover_module.default["Pane-subdued"], captureOverscroll && Popover_module.default["Pane-captureOverscroll"]), content = sectioned ? components.wrapWithComponent(children, Section.Section, {}) : children, style = height ? {
        height,
        maxHeight: height,
        minHeight: height
      } : void 0;
      return fixed ? /* @__PURE__ */ React2.createElement("div", {
        style,
        className
      }, content) : /* @__PURE__ */ React2.createElement(Scrollable.Scrollable, {
        shadow: !0,
        className,
        style,
        onScrolledToBottom,
        scrollbarWidth: "thin"
      }, content);
    }
    exports.Pane = Pane;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Popover/components/PopoverOverlay/PopoverOverlay.js
var require_PopoverOverlay = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Popover/components/PopoverOverlay/PopoverOverlay.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisTokens = require("@shopify/polaris-tokens"), focus = require_focus(), css = require_css(), components = require_components(), types = require_types(), shared = require_shared(), Popover_module = require_Popover_css(), Pane = require_Pane(), context = require_context7(), EventListener = require_EventListener(), KeypressListener = require_KeypressListener(), PositionedOverlay = require_PositionedOverlay();
    exports.PopoverCloseSource = void 0;
    (function(PopoverCloseSource) {
      PopoverCloseSource[PopoverCloseSource.Click = 0] = "Click", PopoverCloseSource[PopoverCloseSource.EscapeKeypress = 1] = "EscapeKeypress", PopoverCloseSource[PopoverCloseSource.FocusOut = 2] = "FocusOut", PopoverCloseSource[PopoverCloseSource.ScrollOut = 3] = "ScrollOut";
    })(exports.PopoverCloseSource || (exports.PopoverCloseSource = {}));
    var TransitionStatus;
    (function(TransitionStatus2) {
      TransitionStatus2.Entering = "entering", TransitionStatus2.Entered = "entered", TransitionStatus2.Exiting = "exiting", TransitionStatus2.Exited = "exited";
    })(TransitionStatus || (TransitionStatus = {}));
    var PopoverOverlay = class extends React2.PureComponent {
      constructor(props) {
        super(props), this.state = {
          transitionStatus: this.props.active ? TransitionStatus.Entering : TransitionStatus.Exited
        }, this.contentNode = /* @__PURE__ */ React2.createRef(), this.renderPopover = (overlayDetails) => {
          let {
            measuring,
            desiredHeight,
            positioning
          } = overlayDetails, {
            id,
            children,
            sectioned,
            fullWidth,
            fullHeight,
            fluidContent,
            hideOnPrint,
            autofocusTarget,
            captureOverscroll
          } = this.props, isCovering = positioning === "cover", className = css.classNames(Popover_module.default.Popover, measuring && Popover_module.default.measuring, (fullWidth || isCovering) && Popover_module.default.fullWidth, hideOnPrint && Popover_module.default["PopoverOverlay-hideOnPrint"], positioning && Popover_module.default[css.variationName("positioned", positioning)]), contentStyles = measuring ? void 0 : {
            height: desiredHeight
          }, contentClassNames = css.classNames(Popover_module.default.Content, fullHeight && Popover_module.default["Content-fullHeight"], fluidContent && Popover_module.default["Content-fluidContent"]);
          return /* @__PURE__ */ React2.createElement("div", Object.assign({
            className
          }, shared.overlay.props), /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
            event: "click",
            handler: this.handleClick
          }), /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
            event: "touchstart",
            handler: this.handleClick
          }), /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
            keyCode: types.Key.Escape,
            handler: this.handleEscape
          }), /* @__PURE__ */ React2.createElement("div", {
            className: Popover_module.default.FocusTracker,
            tabIndex: 0,
            onFocus: this.handleFocusFirstItem
          }), /* @__PURE__ */ React2.createElement("div", {
            className: Popover_module.default.ContentContainer
          }, /* @__PURE__ */ React2.createElement("div", {
            id,
            tabIndex: autofocusTarget === "none" ? void 0 : -1,
            className: contentClassNames,
            style: contentStyles,
            ref: this.contentNode
          }, renderPopoverContent(children, {
            captureOverscroll,
            sectioned
          }))), /* @__PURE__ */ React2.createElement("div", {
            className: Popover_module.default.FocusTracker,
            tabIndex: 0,
            onFocus: this.handleFocusLastItem
          }));
        }, this.handleClick = (event) => {
          let target = event.target, {
            contentNode,
            props: {
              activator,
              onClose,
              preventCloseOnChildOverlayClick
            }
          } = this, composedPath = event.composedPath(), wasDescendant = preventCloseOnChildOverlayClick ? wasPolarisPortalDescendant(composedPath, this.context.container) : wasContentNodeDescendant(composedPath, contentNode), isActivatorDescendant = nodeContainsDescendant(activator, target);
          wasDescendant || isActivatorDescendant || this.state.transitionStatus !== TransitionStatus.Entered || onClose(exports.PopoverCloseSource.Click);
        }, this.handleScrollOut = () => {
          this.props.onClose(exports.PopoverCloseSource.ScrollOut);
        }, this.handleEscape = (event) => {
          let target = event.target, {
            contentNode,
            props: {
              activator
            }
          } = this, composedPath = event.composedPath(), wasDescendant = wasContentNodeDescendant(composedPath, contentNode), isActivatorDescendant = nodeContainsDescendant(activator, target);
          (wasDescendant || isActivatorDescendant) && this.props.onClose(exports.PopoverCloseSource.EscapeKeypress);
        }, this.handleFocusFirstItem = () => {
          this.props.onClose(exports.PopoverCloseSource.FocusOut);
        }, this.handleFocusLastItem = () => {
          this.props.onClose(exports.PopoverCloseSource.FocusOut);
        }, this.overlayRef = /* @__PURE__ */ React2.createRef();
      }
      forceUpdatePosition() {
        this.overlayRef.current?.forceUpdatePosition();
      }
      changeTransitionStatus(transitionStatus, cb) {
        this.setState({
          transitionStatus
        }, cb), this.contentNode.current && this.contentNode.current.getBoundingClientRect();
      }
      componentDidMount() {
        this.props.active && (this.focusContent(), this.changeTransitionStatus(TransitionStatus.Entered));
      }
      componentDidUpdate(oldProps) {
        this.props.active && !oldProps.active && (this.focusContent(), this.changeTransitionStatus(TransitionStatus.Entering, () => {
          this.clearTransitionTimeout(), this.enteringTimer = window.setTimeout(() => {
            this.setState({
              transitionStatus: TransitionStatus.Entered
            });
          }, parseInt(polarisTokens.themeDefault.motion["motion-duration-100"], 10));
        })), !this.props.active && oldProps.active && (this.clearTransitionTimeout(), this.setState({
          transitionStatus: TransitionStatus.Exited
        }));
      }
      componentWillUnmount() {
        this.clearTransitionTimeout();
      }
      render() {
        let {
          active,
          activator,
          fullWidth,
          preferredPosition = "below",
          preferredAlignment = "center",
          preferInputActivator = !0,
          fixed,
          zIndexOverride
        } = this.props, {
          transitionStatus
        } = this.state;
        if (transitionStatus === TransitionStatus.Exited && !active)
          return null;
        let className = css.classNames(Popover_module.default.PopoverOverlay, transitionStatus === TransitionStatus.Entering && Popover_module.default["PopoverOverlay-entering"], transitionStatus === TransitionStatus.Entered && Popover_module.default["PopoverOverlay-open"], transitionStatus === TransitionStatus.Exiting && Popover_module.default["PopoverOverlay-exiting"], preferredPosition === "cover" && Popover_module.default["PopoverOverlay-noAnimation"]);
        return /* @__PURE__ */ React2.createElement(PositionedOverlay.PositionedOverlay, {
          ref: this.overlayRef,
          fullWidth,
          active,
          activator,
          preferInputActivator,
          preferredPosition,
          preferredAlignment,
          render: this.renderPopover.bind(this),
          fixed,
          onScrollOut: this.handleScrollOut,
          classNames: className,
          zIndexOverride
        });
      }
      clearTransitionTimeout() {
        this.enteringTimer && window.clearTimeout(this.enteringTimer);
      }
      focusContent() {
        let {
          autofocusTarget = "container"
        } = this.props;
        autofocusTarget === "none" || this.contentNode == null || requestAnimationFrame(() => {
          if (this.contentNode.current == null)
            return;
          let focusableChild = focus.findFirstKeyboardFocusableNode(this.contentNode.current);
          focusableChild && autofocusTarget === "first-node" ? focusableChild.focus({
            preventScroll: !1
          }) : this.contentNode.current.focus({
            preventScroll: !1
          });
        });
      }
      // eslint-disable-next-line @shopify/react-no-multiple-render-methods
    };
    PopoverOverlay.contextType = context.PortalsManagerContext;
    function renderPopoverContent(children, props) {
      let childrenArray = React2.Children.toArray(children);
      return components.isElementOfType(childrenArray[0], Pane.Pane) ? childrenArray : components.wrapWithComponent(childrenArray, Pane.Pane, props);
    }
    function nodeContainsDescendant(rootNode, descendant) {
      if (rootNode === descendant)
        return !0;
      let parent = descendant.parentNode;
      for (; parent != null; ) {
        if (parent === rootNode)
          return !0;
        parent = parent.parentNode;
      }
      return !1;
    }
    function wasContentNodeDescendant(composedPath, contentNode) {
      return contentNode.current != null && composedPath.includes(contentNode.current);
    }
    function wasPolarisPortalDescendant(composedPath, portalsContainerElement) {
      return composedPath.some((eventTarget) => eventTarget instanceof Node && portalsContainerElement?.contains(eventTarget));
    }
    exports.PopoverOverlay = PopoverOverlay;
    exports.nodeContainsDescendant = nodeContainsDescendant;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Popover/Popover.js
var require_Popover = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Popover/Popover.js"(exports) {
    "use strict";
    var React2 = require_react(), focus = require_focus(), shared = require_shared(), setActivatorAttributes = require_set_activator_attributes(), PopoverOverlay = require_PopoverOverlay(), Pane = require_Pane(), Section = require_Section2(), Portal = require_Portal(), PopoverComponent = /* @__PURE__ */ React2.forwardRef(function({
      activatorWrapper = "div",
      children,
      onClose,
      activator,
      preventFocusOnClose,
      active,
      fixed,
      ariaHaspopup,
      preferInputActivator = !0,
      zIndexOverride,
      ...rest
    }, ref) {
      let [activatorNode, setActivatorNode] = React2.useState(), overlayRef = React2.useRef(null), activatorContainer = React2.useRef(null), WrapperComponent = activatorWrapper, id = React2.useId();
      function forceUpdatePosition() {
        overlayRef.current?.forceUpdatePosition();
      }
      React2.useImperativeHandle(ref, () => ({
        forceUpdatePosition
      }));
      let setAccessibilityAttributes = React2.useCallback(() => {
        if (activatorContainer.current == null)
          return;
        let focusableActivator = focus.findFirstFocusableNodeIncludingDisabled(activatorContainer.current) || activatorContainer.current, activatorDisabled = "disabled" in focusableActivator && Boolean(focusableActivator.disabled);
        setActivatorAttributes.setActivatorAttributes(focusableActivator, {
          id,
          active,
          ariaHaspopup,
          activatorDisabled
        });
      }, [id, active, ariaHaspopup]), handleClose = (source) => {
        if (onClose(source), !(activatorContainer.current == null || preventFocusOnClose)) {
          if (source === PopoverOverlay.PopoverCloseSource.FocusOut && activatorNode) {
            let focusableActivator = focus.findFirstFocusableNodeIncludingDisabled(activatorNode) || focus.findFirstFocusableNodeIncludingDisabled(activatorContainer.current) || activatorContainer.current;
            focus.focusNextFocusableNode(focusableActivator, isInPortal) || focusableActivator.focus();
          } else if (source === PopoverOverlay.PopoverCloseSource.EscapeKeypress && activatorNode) {
            let focusableActivator = focus.findFirstFocusableNodeIncludingDisabled(activatorNode) || focus.findFirstFocusableNodeIncludingDisabled(activatorContainer.current) || activatorContainer.current;
            focusableActivator ? focusableActivator.focus() : focus.focusNextFocusableNode(focusableActivator, isInPortal);
          }
        }
      };
      React2.useEffect(() => {
        (!activatorNode && activatorContainer.current || activatorNode && activatorContainer.current && !activatorContainer.current.contains(activatorNode)) && setActivatorNode(activatorContainer.current.firstElementChild), setAccessibilityAttributes();
      }, [activatorNode, setAccessibilityAttributes]), React2.useEffect(() => {
        activatorNode && activatorContainer.current && setActivatorNode(activatorContainer.current.firstElementChild), setAccessibilityAttributes();
      }, [activatorNode, setAccessibilityAttributes]);
      let portal = activatorNode ? /* @__PURE__ */ React2.createElement(Portal.Portal, {
        idPrefix: "popover"
      }, /* @__PURE__ */ React2.createElement(PopoverOverlay.PopoverOverlay, Object.assign({
        ref: overlayRef,
        id,
        activator: activatorNode,
        preferInputActivator,
        onClose: handleClose,
        active,
        fixed,
        zIndexOverride
      }, rest), children)) : null;
      return /* @__PURE__ */ React2.createElement(WrapperComponent, {
        ref: activatorContainer
      }, React2.Children.only(activator), portal);
    });
    function isInPortal(element) {
      let parentElement = element.parentElement;
      for (; parentElement; ) {
        if (parentElement.matches(shared.portal.selector))
          return !1;
        parentElement = parentElement.parentElement;
      }
      return !0;
    }
    var Popover = Object.assign(PopoverComponent, {
      Pane: Pane.Pane,
      Section: Section.Section
    });
    Object.defineProperty(exports, "PopoverCloseSource", {
      enumerable: !0,
      get: function() {
        return PopoverOverlay.PopoverCloseSource;
      }
    });
    exports.Popover = Popover;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/RollupActions/RollupActions.js
var require_RollupActions = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/RollupActions/RollupActions.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), useToggle = require_use_toggle(), RollupActions_module = require_RollupActions_css(), hooks = require_hooks2(), Button4 = require_Button(), Popover = require_Popover(), ActionList = require_ActionList();
    function RollupActions({
      accessibilityLabel,
      items = [],
      sections = []
    }) {
      let i18n = hooks.useI18n(), {
        value: rollupOpen,
        toggle: toggleRollupOpen
      } = useToggle.useToggle(!1);
      if (items.length === 0 && sections.length === 0)
        return null;
      let activatorMarkup = /* @__PURE__ */ React2.createElement("div", {
        className: RollupActions_module.default.RollupActivator
      }, /* @__PURE__ */ React2.createElement(Button4.Button, {
        icon: polarisIcons.MenuHorizontalIcon,
        accessibilityLabel: accessibilityLabel || i18n.translate("Polaris.ActionMenu.RollupActions.rollupButton"),
        onClick: toggleRollupOpen
      }));
      return /* @__PURE__ */ React2.createElement(Popover.Popover, {
        active: rollupOpen,
        activator: activatorMarkup,
        preferredAlignment: "right",
        onClose: toggleRollupOpen,
        hideOnPrint: !0
      }, /* @__PURE__ */ React2.createElement(ActionList.ActionList, {
        items,
        sections,
        onActionAnyItem: toggleRollupOpen
      }));
    }
    exports.RollupActions = RollupActions;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/Actions/Actions.css.js
var require_Actions_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/Actions/Actions.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ActionsLayoutOuter: "Polaris-ActionMenu-Actions__ActionsLayoutOuter",
      ActionsLayout: "Polaris-ActionMenu-Actions__ActionsLayout",
      "ActionsLayout--measuring": "Polaris-ActionMenu-Actions--actionsLayoutMeasuring",
      ActionsLayoutMeasurer: "Polaris-ActionMenu-Actions__ActionsLayoutMeasurer"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/Actions/utilities.js
var require_utilities = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/Actions/utilities.js"(exports) {
    "use strict";
    function getVisibleAndHiddenActionsIndices(actions = [], groups = [], disclosureWidth, actionsWidths, containerWidth) {
      let sumTabWidths = actionsWidths.reduce((sum, width) => sum + width, 0), arrayOfActionsIndices = actions.map((_, index) => index), arrayOfGroupsIndices = groups.map((_, index) => index), visibleActions = [], hiddenActions = [], visibleGroups = [], hiddenGroups = [];
      if (containerWidth > sumTabWidths)
        visibleActions.push(...arrayOfActionsIndices), visibleGroups.push(...arrayOfGroupsIndices);
      else {
        let accumulatedWidth = 0;
        arrayOfActionsIndices.forEach((currentActionsIndex) => {
          let currentActionsWidth = actionsWidths[currentActionsIndex];
          if (accumulatedWidth + currentActionsWidth >= containerWidth - disclosureWidth) {
            hiddenActions.push(currentActionsIndex);
            return;
          }
          visibleActions.push(currentActionsIndex), accumulatedWidth += currentActionsWidth;
        }), arrayOfGroupsIndices.forEach((currentGroupsIndex) => {
          let currentActionsWidth = actionsWidths[currentGroupsIndex + actions.length];
          if (accumulatedWidth + currentActionsWidth >= containerWidth - disclosureWidth) {
            hiddenGroups.push(currentGroupsIndex);
            return;
          }
          visibleGroups.push(currentGroupsIndex), accumulatedWidth += currentActionsWidth;
        });
      }
      return {
        visibleActions,
        hiddenActions,
        visibleGroups,
        hiddenGroups
      };
    }
    exports.getVisibleAndHiddenActionsIndices = getVisibleAndHiddenActionsIndices;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/MenuGroup/MenuGroup.css.js
var require_MenuGroup_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/MenuGroup/MenuGroup.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Details: "Polaris-ActionMenu-MenuGroup__Details"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/SecondaryAction/SecondaryAction.css.js
var require_SecondaryAction_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/SecondaryAction/SecondaryAction.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      SecondaryAction: "Polaris-ActionMenu-SecondaryAction",
      critical: "Polaris-ActionMenu-SecondaryAction--critical"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/SecondaryAction/SecondaryAction.js
var require_SecondaryAction = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/SecondaryAction/SecondaryAction.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), SecondaryAction_module = require_SecondaryAction_css(), Button4 = require_Button(), Tooltip = require_Tooltip();
    function SecondaryAction({
      children,
      tone,
      helpText,
      onAction,
      destructive,
      ...rest
    }) {
      let buttonMarkup = /* @__PURE__ */ React2.createElement(Button4.Button, Object.assign({
        onClick: onAction,
        tone: destructive ? "critical" : void 0
      }, rest), children), actionMarkup = helpText ? /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, {
        preferredPosition: "below",
        content: helpText
      }, buttonMarkup) : buttonMarkup;
      return /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(SecondaryAction_module.default.SecondaryAction, tone === "critical" && SecondaryAction_module.default.critical)
      }, actionMarkup);
    }
    exports.SecondaryAction = SecondaryAction;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/MenuGroup/MenuGroup.js
var require_MenuGroup = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/MenuGroup/MenuGroup.js"(exports) {
    "use strict";
    var React2 = require_react(), MenuGroup_module = require_MenuGroup_css(), Popover = require_Popover(), ActionList = require_ActionList(), SecondaryAction = require_SecondaryAction();
    function MenuGroup({
      accessibilityLabel,
      active,
      actions,
      details,
      title,
      icon,
      disabled,
      onClick,
      onClose,
      onOpen,
      sections
    }) {
      let handleClose = React2.useCallback(() => {
        onClose(title);
      }, [onClose, title]), handleOpen = React2.useCallback(() => {
        onOpen(title);
      }, [onOpen, title]), handleClick = React2.useCallback(() => {
        onClick ? onClick(handleOpen) : handleOpen();
      }, [onClick, handleOpen]), popoverActivator = /* @__PURE__ */ React2.createElement(SecondaryAction.SecondaryAction, {
        disclosure: !0,
        disabled,
        icon,
        accessibilityLabel,
        onClick: handleClick
      }, title);
      return /* @__PURE__ */ React2.createElement(Popover.Popover, {
        active: Boolean(active),
        activator: popoverActivator,
        preferredAlignment: "left",
        onClose: handleClose,
        hideOnPrint: !0
      }, /* @__PURE__ */ React2.createElement(ActionList.ActionList, {
        items: actions,
        sections,
        onActionAnyItem: handleClose
      }), details && /* @__PURE__ */ React2.createElement("div", {
        className: MenuGroup_module.default.Details
      }, details));
    }
    exports.MenuGroup = MenuGroup;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/Actions/components/ActionsMeasurer/ActionsMeasurer.js
var require_ActionsMeasurer = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/Actions/components/ActionsMeasurer/ActionsMeasurer.js"(exports) {
    "use strict";
    var React2 = require_react(), useEventListener = require_use_event_listener(), Actions_module = require_Actions_css(), hooks = require_hooks2(), SecondaryAction = require_SecondaryAction(), ACTION_SPACING = 8;
    function ActionsMeasurer({
      actions = [],
      groups = [],
      handleMeasurement: handleMeasurementProp
    }) {
      let i18n = hooks.useI18n(), containerNode = React2.useRef(null), defaultRollupGroup = {
        title: i18n.translate("Polaris.ActionMenu.Actions.moreActions"),
        actions: []
      }, activator = /* @__PURE__ */ React2.createElement(SecondaryAction.SecondaryAction, {
        disclosure: !0
      }, defaultRollupGroup.title), handleMeasurement = React2.useCallback(() => {
        if (!containerNode.current)
          return;
        let containerWidth = containerNode.current.offsetWidth, hiddenActionNodes = containerNode.current.children, hiddenActionsWidths = Array.from(hiddenActionNodes).map((node) => Math.ceil(node.getBoundingClientRect().width) + ACTION_SPACING), disclosureWidth = hiddenActionsWidths.pop() || 0;
        handleMeasurementProp({
          containerWidth,
          disclosureWidth,
          hiddenActionsWidths
        });
      }, [handleMeasurementProp]);
      React2.useEffect(() => {
        handleMeasurement();
      }, [handleMeasurement, actions, groups]);
      let actionsMarkup = actions.map((action8) => {
        let {
          content,
          onAction,
          ...rest
        } = action8;
        return /* @__PURE__ */ React2.createElement(SecondaryAction.SecondaryAction, Object.assign({
          key: content,
          onClick: onAction
        }, rest), content);
      }), groupsMarkup = groups.map((group) => {
        let {
          title,
          icon
        } = group;
        return /* @__PURE__ */ React2.createElement(SecondaryAction.SecondaryAction, {
          key: title,
          disclosure: !0,
          icon
        }, title);
      });
      return useEventListener.useEventListener("resize", handleMeasurement), /* @__PURE__ */ React2.createElement("div", {
        className: Actions_module.default.ActionsLayoutMeasurer,
        ref: containerNode
      }, actionsMarkup, groupsMarkup, activator);
    }
    exports.ActionsMeasurer = ActionsMeasurer;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/Actions/Actions.js
var require_Actions = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/Actions/Actions.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Actions_module = require_Actions_css(), utilities = require_utilities(), MenuGroup = require_MenuGroup(), ActionsMeasurer = require_ActionsMeasurer(), hooks = require_hooks2(), SecondaryAction = require_SecondaryAction();
    function Actions({
      actions,
      groups,
      onActionRollup
    }) {
      let i18n = hooks.useI18n(), rollupActiveRef = React2.useRef(null), [activeMenuGroup, setActiveMenuGroup] = React2.useState(void 0), [state, setState] = React2.useReducer((data, partialData) => ({
        ...data,
        ...partialData
      }), {
        disclosureWidth: 0,
        containerWidth: 1 / 0,
        actionsWidths: [],
        visibleActions: [],
        hiddenActions: [],
        visibleGroups: [],
        hiddenGroups: [],
        hasMeasured: !1
      }), {
        visibleActions,
        hiddenActions,
        visibleGroups,
        hiddenGroups,
        containerWidth,
        disclosureWidth,
        actionsWidths,
        hasMeasured
      } = state, defaultRollupGroup = {
        title: i18n.translate("Polaris.ActionMenu.Actions.moreActions"),
        actions: []
      }, handleMenuGroupToggle = React2.useCallback((group) => setActiveMenuGroup(activeMenuGroup ? void 0 : group), [activeMenuGroup]), handleMenuGroupClose = React2.useCallback(() => setActiveMenuGroup(void 0), []);
      React2.useEffect(() => {
        if (containerWidth === 0)
          return;
        let {
          visibleActions: visibleActions2,
          visibleGroups: visibleGroups2,
          hiddenActions: hiddenActions2,
          hiddenGroups: hiddenGroups2
        } = utilities.getVisibleAndHiddenActionsIndices(actions, groups, disclosureWidth, actionsWidths, containerWidth);
        setState({
          visibleActions: visibleActions2,
          visibleGroups: visibleGroups2,
          hiddenActions: hiddenActions2,
          hiddenGroups: hiddenGroups2,
          hasMeasured: containerWidth !== 1 / 0
        });
      }, [containerWidth, disclosureWidth, actions, groups, actionsWidths, setState]);
      let actionsOrDefault = React2.useMemo(() => actions ?? [], [actions]), groupsOrDefault = React2.useMemo(() => groups ?? [], [groups]), actionsMarkup = actionsOrDefault.filter((_, index) => !!visibleActions.includes(index)).map((action8) => {
        let {
          content,
          onAction,
          ...rest
        } = action8;
        return /* @__PURE__ */ React2.createElement(SecondaryAction.SecondaryAction, Object.assign({
          key: content,
          onClick: onAction
        }, rest), content);
      }), filteredGroups = (hiddenGroups.length > 0 || hiddenActions.length > 0 ? [...groupsOrDefault, defaultRollupGroup] : [...groupsOrDefault]).filter((group, index) => {
        let hasNoGroupsProp = groupsOrDefault.length === 0, isVisibleGroup = visibleGroups.includes(index), isDefaultGroup = group === defaultRollupGroup;
        return hasNoGroupsProp ? hiddenActions.length > 0 : isDefaultGroup ? !0 : isVisibleGroup;
      }), hiddenActionObjects = hiddenActions.map((index) => actionsOrDefault[index]).filter((action8) => action8 != null), hiddenGroupObjects = hiddenGroups.map((index) => groupsOrDefault[index]).filter((group) => group != null), groupsMarkup = filteredGroups.map((group) => {
        let {
          title,
          actions: groupActions,
          ...rest
        } = group, isDefaultGroup = group === defaultRollupGroup, allHiddenItems = [...hiddenActionObjects, ...hiddenGroupObjects], [finalRolledUpActions, finalRolledUpSectionGroups] = allHiddenItems.reduce(([actions2, sections], action8) => (isMenuGroup(action8) ? sections.push({
          title: action8.title,
          items: action8.actions.map((sectionAction) => ({
            ...sectionAction,
            disabled: action8.disabled || sectionAction.disabled
          }))
        }) : actions2.push(action8), [actions2, sections]), [[], []]);
        return isDefaultGroup ? /* @__PURE__ */ React2.createElement(MenuGroup.MenuGroup, Object.assign({
          key: title,
          title,
          active: title === activeMenuGroup,
          actions: [...finalRolledUpActions, ...groupActions],
          sections: finalRolledUpSectionGroups
        }, rest, {
          onOpen: handleMenuGroupToggle,
          onClose: handleMenuGroupClose
        })) : /* @__PURE__ */ React2.createElement(MenuGroup.MenuGroup, Object.assign({
          key: title,
          title,
          active: title === activeMenuGroup,
          actions: groupActions
        }, rest, {
          onOpen: handleMenuGroupToggle,
          onClose: handleMenuGroupClose
        }));
      }), handleMeasurement = React2.useCallback((measurements) => {
        let {
          hiddenActionsWidths: actionsWidths2,
          containerWidth: containerWidth2,
          disclosureWidth: disclosureWidth2
        } = measurements, {
          visibleActions: visibleActions2,
          hiddenActions: hiddenActions2,
          visibleGroups: visibleGroups2,
          hiddenGroups: hiddenGroups2
        } = utilities.getVisibleAndHiddenActionsIndices(actionsOrDefault, groupsOrDefault, disclosureWidth2, actionsWidths2, containerWidth2);
        if (onActionRollup) {
          let isRollupActive = hiddenActions2.length > 0 || hiddenGroups2.length > 0;
          rollupActiveRef.current !== isRollupActive && (onActionRollup(isRollupActive), rollupActiveRef.current = isRollupActive);
        }
        setState({
          visibleActions: visibleActions2,
          hiddenActions: hiddenActions2,
          visibleGroups: visibleGroups2,
          hiddenGroups: hiddenGroups2,
          actionsWidths: actionsWidths2,
          containerWidth: containerWidth2,
          disclosureWidth: disclosureWidth2,
          hasMeasured: !0
        });
      }, [actionsOrDefault, groupsOrDefault, onActionRollup]), actionsMeasurer = /* @__PURE__ */ React2.createElement(ActionsMeasurer.ActionsMeasurer, {
        actions,
        groups,
        handleMeasurement
      });
      return /* @__PURE__ */ React2.createElement("div", {
        className: Actions_module.default.ActionsLayoutOuter
      }, actionsMeasurer, /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Actions_module.default.ActionsLayout, !hasMeasured && Actions_module.default["ActionsLayout--measuring"])
      }, actionsMarkup, groupsMarkup));
    }
    function isMenuGroup(actionOrMenuGroup) {
      return "title" in actionOrMenuGroup;
    }
    exports.Actions = Actions;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionMenu/ActionMenu.js
var require_ActionMenu = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionMenu/ActionMenu.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), ActionMenu_module = require_ActionMenu_css(), RollupActions = require_RollupActions(), Actions = require_Actions();
    function ActionMenu({
      actions = [],
      groups = [],
      rollup,
      rollupActionsLabel,
      onActionRollup
    }) {
      if (actions.length === 0 && groups.length === 0)
        return null;
      let actionMenuClassNames = css.classNames(ActionMenu_module.default.ActionMenu, rollup && ActionMenu_module.default.rollup), rollupSections = groups.map((group) => convertGroupToSection(group));
      return /* @__PURE__ */ React2.createElement("div", {
        className: actionMenuClassNames
      }, rollup ? /* @__PURE__ */ React2.createElement(RollupActions.RollupActions, {
        accessibilityLabel: rollupActionsLabel,
        items: actions,
        sections: rollupSections
      }) : /* @__PURE__ */ React2.createElement(Actions.Actions, {
        actions,
        groups,
        onActionRollup
      }));
    }
    function hasGroupsWithActions(groups = []) {
      return groups.length === 0 ? !1 : groups.some((group) => group.actions.length > 0);
    }
    function convertGroupToSection({
      title,
      actions,
      disabled
    }) {
      return {
        title,
        items: actions.map((action8) => ({
          ...action8,
          disabled: disabled || action8.disabled
        }))
      };
    }
    exports.ActionMenu = ActionMenu;
    exports.hasGroupsWithActions = hasGroupsWithActions;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/options.js
var require_options = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/options.js"(exports) {
    "use strict";
    function isSection(arr) {
      return typeof arr[0] == "object" && Object.prototype.hasOwnProperty.call(arr[0], "options");
    }
    exports.isSection = isSection;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Autocomplete/Autocomplete.css.js
var require_Autocomplete_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Autocomplete/Autocomplete.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Loading: "Polaris-Autocomplete__Loading",
      SectionWrapper: "Polaris-Autocomplete__SectionWrapper"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Autocomplete/components/MappedOption/MappedOption.css.js
var require_MappedOption_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Autocomplete/components/MappedOption/MappedOption.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Content: "Polaris-Autocomplete-MappedOption__Content",
      Media: "Polaris-Autocomplete-MappedOption__Media",
      singleSelectionMedia: "Polaris-Autocomplete-MappedOption--singleSelectionMedia",
      disabledMedia: "Polaris-Autocomplete-MappedOption--disabledMedia"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/Listbox.css.js
var require_Listbox_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/Listbox.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Listbox: "Polaris-Listbox"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/combobox/context.js
var require_context11 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/combobox/context.js"(exports) {
    "use strict";
    var React2 = require_react(), ComboboxTextFieldContext = /* @__PURE__ */ React2.createContext(void 0), ComboboxListboxContext = /* @__PURE__ */ React2.createContext({}), ComboboxListboxOptionContext = /* @__PURE__ */ React2.createContext({});
    exports.ComboboxListboxContext = ComboboxListboxContext;
    exports.ComboboxListboxOptionContext = ComboboxListboxOptionContext;
    exports.ComboboxTextFieldContext = ComboboxTextFieldContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/combobox/hooks.js
var require_hooks5 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/combobox/hooks.js"(exports) {
    "use strict";
    var React2 = require_react(), context = require_context11();
    function useComboboxTextField() {
      let context$1 = React2.useContext(context.ComboboxTextFieldContext);
      if (!context$1)
        throw new Error("No Combobox was provided. Your component must be wrapped in a <Combobox> component.");
      return context$1;
    }
    function useComboboxListbox() {
      return React2.useContext(context.ComboboxListboxContext);
    }
    exports.useComboboxListbox = useComboboxListbox;
    exports.useComboboxTextField = useComboboxTextField;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/listbox/utilities.js
var require_utilities2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/listbox/utilities.js"(exports) {
    "use strict";
    function scrollOptionIntoView(option, scrollable) {
      let listTop = scrollable.scrollTop, listBottom = listTop + scrollable.clientHeight, {
        offsetHeight: optionHeight
      } = option, {
        offsetTop: optionTop
      } = option, optionBottom = optionTop + optionHeight;
      if (!(optionTop > listTop && optionBottom < listBottom)) {
        let top = 0;
        optionBottom > listBottom ? top = optionBottom + optionHeight * 0.85 - listBottom : optionTop < listTop && (top = optionTop - optionHeight * 0.15 - listTop), requestAnimationFrame(() => {
          scrollable.scrollBy({
            top,
            behavior: "auto"
          });
        });
      }
    }
    exports.scrollOptionIntoView = scrollOptionIntoView;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/listbox/context.js
var require_context12 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/listbox/context.js"(exports) {
    "use strict";
    var React2 = require_react(), ListboxContext = /* @__PURE__ */ React2.createContext(void 0), WithinListboxContext = /* @__PURE__ */ React2.createContext(!1), ActionContext = /* @__PURE__ */ React2.createContext(!1);
    exports.ActionContext = ActionContext;
    exports.ListboxContext = ListboxContext;
    exports.WithinListboxContext = WithinListboxContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/TextOption/TextOption.css.js
var require_TextOption_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/TextOption/TextOption.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      TextOption: "Polaris-Listbox-TextOption",
      allowMultiple: "Polaris-Listbox-TextOption--allowMultiple",
      isAction: "Polaris-Listbox-TextOption--isAction",
      disabled: "Polaris-Listbox-TextOption--disabled",
      selected: "Polaris-Listbox-TextOption--selected",
      Content: "Polaris-Listbox-TextOption__Content",
      Checkbox: "Polaris-Listbox-TextOption__Checkbox"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Checkbox/Checkbox.css.js
var require_Checkbox_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Checkbox/Checkbox.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Checkbox: "Polaris-Checkbox",
      ChoiceLabel: "Polaris-Checkbox__ChoiceLabel",
      Backdrop: "Polaris-Checkbox__Backdrop",
      Input: "Polaris-Checkbox__Input",
      "Input-indeterminate": "Polaris-Checkbox__Input--indeterminate",
      Icon: "Polaris-Checkbox__Icon",
      animated: "Polaris-Checkbox--animated",
      toneMagic: "Polaris-Checkbox--toneMagic",
      hover: "Polaris-Checkbox--hover",
      error: "Polaris-Checkbox--error",
      checked: "Polaris-Checkbox--checked",
      pathAnimation: "Polaris-Checkbox--pathAnimation"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Choice/Choice.css.js
var require_Choice_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Choice/Choice.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Choice: "Polaris-Choice",
      labelHidden: "Polaris-Choice--labelHidden",
      Label: "Polaris-Choice__Label",
      Control: "Polaris-Choice__Control",
      disabled: "Polaris-Choice--disabled",
      toneMagic: "Polaris-Choice--toneMagic",
      Descriptions: "Polaris-Choice__Descriptions",
      HelpText: "Polaris-Choice__HelpText"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Choice/Choice.js
var require_Choice = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Choice/Choice.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Choice_module = require_Choice_css(), Text4 = require_Text(), InlineError = require_InlineError();
    function Choice({
      id,
      label,
      disabled,
      error,
      children,
      labelHidden,
      helpText,
      onClick,
      labelClassName,
      fill,
      bleed,
      bleedBlockStart,
      bleedBlockEnd,
      bleedInlineStart,
      bleedInlineEnd,
      tone
    }) {
      let className = css.classNames(Choice_module.default.Choice, labelHidden && Choice_module.default.labelHidden, disabled && Choice_module.default.disabled, tone && Choice_module.default[css.variationName("tone", tone)], labelClassName), labelStyle = {
        // Pass through overrides for bleed values if they're set by the prop
        ...css.getResponsiveProps("choice", "bleed-block-end", "space", bleedBlockEnd || bleed),
        ...css.getResponsiveProps("choice", "bleed-block-start", "space", bleedBlockStart || bleed),
        ...css.getResponsiveProps("choice", "bleed-inline-start", "space", bleedInlineStart || bleed),
        ...css.getResponsiveProps("choice", "bleed-inline-end", "space", bleedInlineEnd || bleed),
        ...Object.fromEntries(Object.entries(css.getResponsiveValue("choice", "fill", fill)).map(
          // Map "true" => "100%" and "false" => "auto" for use in
          // inline/block-size calc()
          ([key, value]) => [key, value ? "100%" : "auto"]
        ))
      }, labelMarkup = (
        // NOTE: Can't use a Box here for a few reasons:
        // - as="label" fails `Element` typecheck (even though the JS works)
        // - Can't pass hard coded values to padding (forced to tokens)
        // - Can't pass negative values to padding
        // - Can't pass margins at all
        /* @__PURE__ */ React2.createElement("label", {
          className,
          htmlFor: id,
          onClick,
          style: css.sanitizeCustomProperties(labelStyle)
        }, /* @__PURE__ */ React2.createElement("span", {
          className: Choice_module.default.Control
        }, children), /* @__PURE__ */ React2.createElement("span", {
          className: Choice_module.default.Label
        }, /* @__PURE__ */ React2.createElement(Text4.Text, {
          as: "span",
          variant: "bodyMd"
        }, label)))
      ), helpTextMarkup = helpText ? /* @__PURE__ */ React2.createElement("div", {
        className: Choice_module.default.HelpText,
        id: helpTextID(id)
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        tone: disabled ? void 0 : "subdued"
      }, helpText)) : null, errorMarkup = error && typeof error != "boolean" && /* @__PURE__ */ React2.createElement("div", {
        className: Choice_module.default.Error
      }, /* @__PURE__ */ React2.createElement(InlineError.InlineError, {
        message: error,
        fieldID: id
      })), descriptionMarkup = helpTextMarkup || errorMarkup ? /* @__PURE__ */ React2.createElement("div", {
        className: Choice_module.default.Descriptions
      }, errorMarkup, helpTextMarkup) : null;
      return descriptionMarkup ? /* @__PURE__ */ React2.createElement("div", null, labelMarkup, descriptionMarkup) : labelMarkup;
    }
    function helpTextID(id) {
      return `${id}HelpText`;
    }
    exports.Choice = Choice;
    exports.helpTextID = helpTextID;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Checkbox/Checkbox.js
var require_Checkbox = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Checkbox/Checkbox.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), context = require_context12(), Checkbox_module = require_Checkbox_css(), Choice = require_Choice(), InlineError = require_InlineError(), Icon2 = require_Icon(), Checkbox = /* @__PURE__ */ React2.forwardRef(function({
      ariaControls,
      ariaDescribedBy: ariaDescribedByProp,
      label,
      labelHidden,
      checked = !1,
      helpText,
      disabled,
      id: idProp,
      name,
      value,
      error,
      onChange,
      onFocus,
      onBlur,
      labelClassName,
      fill,
      bleed,
      bleedBlockStart,
      bleedBlockEnd,
      bleedInlineStart,
      bleedInlineEnd,
      tone
    }, ref) {
      let inputNode = React2.useRef(null), uniqId = React2.useId(), id = idProp ?? uniqId, isWithinListbox = React2.useContext(context.WithinListboxContext);
      React2.useImperativeHandle(ref, () => ({
        focus: () => {
          inputNode.current && inputNode.current.focus();
        }
      }));
      let handleBlur = () => {
        onBlur && onBlur();
      }, handleOnClick = () => {
        onChange == null || inputNode.current == null || disabled || (onChange(inputNode.current.checked, id), inputNode.current.focus());
      }, describedBy = [];
      error && typeof error != "boolean" && describedBy.push(InlineError.errorTextID(id)), helpText && describedBy.push(Choice.helpTextID(id)), ariaDescribedByProp && describedBy.push(ariaDescribedByProp);
      let ariaDescribedBy = describedBy.length ? describedBy.join(" ") : void 0, wrapperClassName = css.classNames(Checkbox_module.default.Checkbox, error && Checkbox_module.default.error), isIndeterminate = checked === "indeterminate", isChecked = !isIndeterminate && Boolean(checked), indeterminateAttributes = isIndeterminate ? {
        indeterminate: "true",
        "aria-checked": "mixed"
      } : {
        "aria-checked": isChecked
      }, iconSource = /* @__PURE__ */ React2.createElement("svg", {
        viewBox: "0 0 16 16",
        shapeRendering: "geometricPrecision",
        textRendering: "geometricPrecision"
      }, /* @__PURE__ */ React2.createElement("path", {
        className: css.classNames(checked && Checkbox_module.default.checked),
        d: "M1.5,5.5L3.44655,8.22517C3.72862,8.62007,4.30578,8.64717,4.62362,8.28044L10.5,1.5",
        transform: "translate(2 2.980376)",
        opacity: "0",
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        pathLength: "1"
      })), inputClassName = css.classNames(Checkbox_module.default.Input, isIndeterminate && Checkbox_module.default["Input-indeterminate"], tone && Checkbox_module.default[css.variationName("tone", tone)]), extraChoiceProps = {
        helpText,
        error,
        bleed,
        bleedBlockStart,
        bleedBlockEnd,
        bleedInlineStart,
        bleedInlineEnd
      };
      return /* @__PURE__ */ React2.createElement(Choice.Choice, Object.assign({
        id,
        label,
        labelHidden,
        disabled,
        labelClassName: css.classNames(Checkbox_module.default.ChoiceLabel, labelClassName),
        fill,
        tone
      }, extraChoiceProps), /* @__PURE__ */ React2.createElement("span", {
        className: wrapperClassName
      }, /* @__PURE__ */ React2.createElement("input", Object.assign({
        ref: inputNode,
        id,
        name,
        value,
        type: "checkbox",
        checked: isChecked,
        disabled,
        className: inputClassName,
        onBlur: handleBlur,
        onChange: noop,
        onClick: handleOnClick,
        onFocus,
        "aria-invalid": error != null,
        "aria-controls": ariaControls,
        "aria-describedby": ariaDescribedBy,
        role: isWithinListbox ? "presentation" : "checkbox"
      }, indeterminateAttributes)), /* @__PURE__ */ React2.createElement("span", {
        className: Checkbox_module.default.Backdrop,
        onClick: stopPropagation,
        onKeyUp: stopPropagation
      }), /* @__PURE__ */ React2.createElement("span", {
        className: css.classNames(Checkbox_module.default.Icon, !isIndeterminate && Checkbox_module.default.animated)
      }, isIndeterminate ? /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.MinusIcon
      }) : iconSource)));
    });
    function noop() {
    }
    function stopPropagation(event) {
      event.stopPropagation();
    }
    exports.Checkbox = Checkbox;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/TextOption/TextOption.js
var require_TextOption = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/TextOption/TextOption.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), context = require_context11(), context$1 = require_context12(), TextOption_module = require_TextOption_css(), Checkbox = require_Checkbox(), Box4 = require_Box(), InlineStack4 = require_InlineStack(), Icon2 = require_Icon(), TextOption = /* @__PURE__ */ React2.memo(function({
      children,
      selected,
      disabled
    }) {
      let {
        allowMultiple
      } = React2.useContext(context.ComboboxListboxOptionContext), isAction = React2.useContext(context$1.ActionContext), textOptionClassName = css.classNames(TextOption_module.default.TextOption, selected && !allowMultiple && TextOption_module.default.selected, disabled && TextOption_module.default.disabled, allowMultiple && TextOption_module.default.allowMultiple, isAction && TextOption_module.default.isAction), optionMarkup = selected ? /* @__PURE__ */ React2.createElement(Box4.Box, {
        width: "100%"
      }, /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        wrap: !1,
        align: "space-between",
        gap: "200"
      }, children, /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        align: "end"
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.CheckIcon
      })))) : /* @__PURE__ */ React2.createElement(React2.Fragment, null, children);
      return /* @__PURE__ */ React2.createElement("div", {
        className: textOptionClassName
      }, /* @__PURE__ */ React2.createElement("div", {
        className: TextOption_module.default.Content
      }, allowMultiple && !isAction ? /* @__PURE__ */ React2.createElement("div", {
        className: TextOption_module.default.Checkbox
      }, /* @__PURE__ */ React2.createElement(Checkbox.Checkbox, {
        disabled,
        checked: selected,
        label: children
      })) : optionMarkup));
    });
    exports.TextOption = TextOption;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Loading/Loading.css.js
var require_Loading_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Loading/Loading.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ListItem: "Polaris-Listbox-Loading__ListItem",
      Loading: "Polaris-Listbox-Loading"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/listbox/hooks.js
var require_hooks6 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/listbox/hooks.js"(exports) {
    "use strict";
    var React2 = require_react(), context = require_context12();
    function useListbox() {
      let listbox = React2.useContext(context.ListboxContext);
      if (!listbox)
        throw new Error("No Listbox was provided. Listbox components must be wrapped in a Listbox");
      return listbox;
    }
    exports.useListbox = useListbox;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Loading/Loading.js
var require_Loading = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Loading/Loading.js"(exports) {
    "use strict";
    var React2 = require_react(), Loading_module = require_Loading_css(), hooks = require_hooks6(), Spinner2 = require_Spinner(), Loading = /* @__PURE__ */ React2.memo(function({
      children,
      accessibilityLabel: label
    }) {
      let {
        setLoading
      } = hooks.useListbox();
      return React2.useEffect(() => (setLoading(label), () => {
        setLoading(void 0);
      }), [label, setLoading]), /* @__PURE__ */ React2.createElement("li", {
        className: Loading_module.default.ListItem,
        role: "presentation"
      }, children || /* @__PURE__ */ React2.createElement("div", {
        className: Loading_module.default.Loading
      }, /* @__PURE__ */ React2.createElement(Spinner2.Spinner, {
        size: "small",
        accessibilityLabel: label
      })));
    });
    exports.Loading = Loading;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Section/selectors.js
var require_selectors = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Section/selectors.js"(exports) {
    "use strict";
    var listboxSectionDataSelector = {
      props: {
        "data-polaris-listbox-section-item": !0
      },
      selector: "[data-polaris-listbox-section-item]"
    }, listboxWithinSectionDataSelector = {
      attribute: "data-polaris-listbox-within-section-item"
    };
    exports.listboxSectionDataSelector = listboxSectionDataSelector;
    exports.listboxWithinSectionDataSelector = listboxWithinSectionDataSelector;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Section/context.js
var require_context13 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Section/context.js"(exports) {
    "use strict";
    var React2 = require_react(), SectionContext = /* @__PURE__ */ React2.createContext(null);
    exports.SectionContext = SectionContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Section/Section.css.js
var require_Section_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Section/Section.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      SectionGroup: "Polaris-Listbox-Section__SectionGroup",
      noDivider: "Polaris-Listbox-Section--noDivider"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Section/Section.js
var require_Section3 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Section/Section.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), selectors = require_selectors(), context = require_context13(), Section_module = require_Section_css();
    function Section({
      children,
      divider = !0,
      title
    }) {
      let id = React2.useId();
      return /* @__PURE__ */ React2.createElement(context.SectionContext.Provider, {
        value: id
      }, /* @__PURE__ */ React2.createElement("li", Object.assign({
        role: "presentation"
      }, selectors.listboxSectionDataSelector.props), title, /* @__PURE__ */ React2.createElement("ul", {
        role: "group",
        "aria-labelledby": id,
        className: css.classNames(Section_module.default.SectionGroup, !divider && Section_module.default.noDivider)
      }, children)));
    }
    exports.Section = Section;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Section/hooks.js
var require_hooks7 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Section/hooks.js"(exports) {
    "use strict";
    var React2 = require_react(), context = require_context13();
    function useSection() {
      return React2.useContext(context.SectionContext);
    }
    exports.useSection = useSection;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Header/Header.js
var require_Header = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Header/Header.js"(exports) {
    "use strict";
    var React2 = require_react(), hooks = require_hooks7(), Box4 = require_Box(), Text4 = require_Text();
    function Header({
      children
    }) {
      let sectionId = hooks.useSection() || "", content = typeof children == "string" ? /* @__PURE__ */ React2.createElement(Box4.Box, {
        paddingBlockStart: "200",
        paddingInlineStart: "400",
        paddingBlockEnd: "200",
        paddingInlineEnd: "400"
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "headingSm",
        tone: "subdued"
      }, children)) : children;
      return /* @__PURE__ */ React2.createElement("div", {
        "aria-hidden": !0,
        id: sectionId
      }, content);
    }
    exports.Header = Header;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Action/Action.css.js
var require_Action_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Action/Action.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Action: "Polaris-Listbox-Action",
      ActionDivider: "Polaris-Listbox-Action__ActionDivider",
      Icon: "Polaris-Listbox-Action__Icon"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Option/Option.css.js
var require_Option_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Option/Option.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Option: "Polaris-Listbox-Option",
      divider: "Polaris-Listbox-Option--divider"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/autocomplete/context.js
var require_context14 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/autocomplete/context.js"(exports) {
    "use strict";
    var React2 = require_react(), MappedActionContext = /* @__PURE__ */ React2.createContext({});
    exports.MappedActionContext = MappedActionContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Option/Option.js
var require_Option = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Option/Option.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), context = require_context12(), Option_module = require_Option_css(), hooks = require_hooks6(), context$1 = require_context14(), hooks$1 = require_hooks7(), selectors = require_selectors(), TextOption = require_TextOption(), UnstyledLink = require_UnstyledLink(), Option = /* @__PURE__ */ React2.memo(function({
      value,
      children,
      selected,
      disabled = !1,
      accessibilityLabel,
      divider
    }) {
      let {
        onOptionSelect
      } = hooks.useListbox(), isAction = React2.useContext(context.ActionContext), {
        role,
        url,
        external,
        onAction,
        destructive
      } = React2.useContext(context$1.MappedActionContext), listItemRef = React2.useRef(null), domId = React2.useId(), sectionId = hooks$1.useSection(), isWithinSection = Boolean(sectionId), handleOptionSelect = React2.useCallback((event) => {
        event.preventDefault(), event.stopPropagation(), onAction && onAction(), listItemRef.current && !onAction && onOptionSelect({
          domId,
          value,
          element: listItemRef.current,
          disabled
        });
      }, [domId, onOptionSelect, value, disabled, onAction]), handleMouseDown = (event) => {
        event.preventDefault();
      }, content = typeof children == "string" ? /* @__PURE__ */ React2.createElement(TextOption.TextOption, {
        selected,
        disabled
      }, children) : children, sectionAttributes = {
        [selectors.listboxWithinSectionDataSelector.attribute]: isWithinSection
      }, legacyRoleSupport = role || "option", contentMarkup = url ? /* @__PURE__ */ React2.createElement(UnstyledLink.UnstyledLink, {
        url,
        external
      }, content) : content;
      return /* @__PURE__ */ React2.createElement("li", Object.assign({}, sectionAttributes, {
        "data-listbox-option": !0,
        "data-listbox-option-action": isAction,
        "data-listbox-option-value": value,
        "data-listbox-option-destructive": destructive,
        "data-within-section": isWithinSection,
        className: css.classNames(Option_module.default.Option, divider && Option_module.default.divider),
        id: domId,
        ref: listItemRef,
        tabIndex: -1,
        role: legacyRoleSupport,
        "aria-label": accessibilityLabel,
        "aria-selected": selected,
        "aria-disabled": disabled,
        onClick: disabled ? void 0 : handleOptionSelect,
        onKeyDown: disabled ? void 0 : handleOptionSelect,
        onMouseDown: handleMouseDown
      }), contentMarkup);
    });
    exports.Option = Option;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Action/Action.js
var require_Action = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Action/Action.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), context = require_context12(), Action_module = require_Action_css(), Option = require_Option(), TextOption = require_TextOption(), Icon2 = require_Icon();
    function Action(props) {
      let {
        selected,
        disabled,
        children,
        icon,
        divider
      } = props, iconMarkup = icon && /* @__PURE__ */ React2.createElement("div", {
        className: Action_module.default.Icon
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        tone: "subdued",
        source: icon
      })), className = css.classNames(Action_module.default.Action, divider && Action_module.default.ActionDivider);
      return /* @__PURE__ */ React2.createElement(context.ActionContext.Provider, {
        value: !0
      }, /* @__PURE__ */ React2.createElement(Option.Option, props, /* @__PURE__ */ React2.createElement("div", {
        className
      }, /* @__PURE__ */ React2.createElement(TextOption.TextOption, {
        selected,
        disabled
      }, iconMarkup, children))));
    }
    exports.Action = Action;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/Listbox.js
var require_Listbox = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/Listbox.js"(exports) {
    "use strict";
    var React2 = require_react(), debounce = require_debounce(), useToggle = require_use_toggle(), types = require_types(), shared = require_shared(), Listbox_module = require_Listbox_css(), hooks = require_hooks5(), utilities = require_utilities2(), context = require_context12(), TextOption = require_TextOption(), Loading = require_Loading(), Section = require_Section3(), Header = require_Header(), Action = require_Action(), KeypressListener = require_KeypressListener(), Text4 = require_Text(), Option = require_Option();
    exports.AutoSelection = void 0;
    (function(AutoSelection) {
      AutoSelection.FirstSelected = "FIRST_SELECTED", AutoSelection.First = "FIRST", AutoSelection.None = "NONE";
    })(exports.AutoSelection || (exports.AutoSelection = {}));
    var OPTION_SELECTOR = "[data-listbox-option]", OPTION_VALUE_ATTRIBUTE = "data-listbox-option-value", OPTION_ACTION_ATTRIBUTE = "data-listbox-option-action", OPTION_FOCUS_ATTRIBUTE = "data-focused";
    function Listbox({
      children,
      autoSelection = exports.AutoSelection.FirstSelected,
      enableKeyboardControl,
      accessibilityLabel,
      customListId,
      onSelect,
      onActiveOptionChange
    }) {
      let [loading, setLoading] = React2.useState(), [activeOption, setActiveOption] = React2.useState(), [lazyLoading, setLazyLoading] = React2.useState(!1), [currentOptions, setCurrentOptions] = React2.useState([]), {
        value: keyboardEventsEnabled,
        setTrue: enableKeyboardEvents,
        setFalse: disableKeyboardEvents
      } = useToggle.useToggle(Boolean(enableKeyboardControl)), uniqueId = React2.useId(), listId = customListId || uniqueId, scrollableRef = React2.useRef(null), listboxRef = React2.useRef(null), {
        listboxId,
        textFieldLabelId,
        textFieldFocused,
        willLoadMoreOptions,
        setActiveOptionId,
        setListboxId,
        onOptionSelected,
        onKeyToBottom
      } = hooks.useComboboxListbox(), inCombobox = Boolean(setActiveOptionId);
      React2.useEffect(() => {
        setListboxId && !listboxId && setListboxId(listId);
      }, [setListboxId, listboxId, listId]);
      let getNavigableOptions = React2.useCallback(() => listboxRef.current ? [...new Set(listboxRef.current.querySelectorAll(OPTION_SELECTOR))] : [], []), getFirstNavigableOption = React2.useCallback((currentOptions2) => {
        let hasSelectedOptions = currentOptions2.some((option) => option.getAttribute("aria-selected") === "true"), elementIndex = 0, element = currentOptions2.find((option, index) => {
          let isInteractable = option.getAttribute("aria-disabled") !== "true", isFirstNavigableOption;
          return hasSelectedOptions && autoSelection === exports.AutoSelection.FirstSelected ? isFirstNavigableOption = option.getAttribute("aria-selected") === "true" && isInteractable : isFirstNavigableOption = isInteractable, isFirstNavigableOption && (elementIndex = index), isFirstNavigableOption;
        });
        if (element)
          return {
            element,
            index: elementIndex
          };
      }, [autoSelection]), handleScrollIntoView = React2.useCallback((option) => {
        let {
          current: scrollable
        } = scrollableRef;
        scrollable && utilities.scrollOptionIntoView(option.element, scrollable);
      }, []), handleScrollIntoViewDebounced = debounce.debounce(handleScrollIntoView, 50), handleKeyToBottom = React2.useCallback(() => {
        if (onKeyToBottom)
          return setLazyLoading(!0), Promise.resolve(onKeyToBottom());
      }, [onKeyToBottom]), handleChangeActiveOption = React2.useCallback((nextOption) => {
        if (!nextOption)
          return setActiveOption(void 0);
        activeOption?.element.removeAttribute(OPTION_FOCUS_ATTRIBUTE), nextOption.element.setAttribute(OPTION_FOCUS_ATTRIBUTE, "true"), handleScrollIntoViewDebounced(nextOption), setActiveOption(nextOption), setActiveOptionId?.(nextOption.domId), onActiveOptionChange?.(nextOption.value, nextOption.domId);
      }, [activeOption, setActiveOptionId, onActiveOptionChange, handleScrollIntoViewDebounced]), getFormattedOption = React2.useCallback((element, index) => ({
        element,
        index,
        domId: element.id,
        value: element.getAttribute(OPTION_VALUE_ATTRIBUTE) || "",
        disabled: element.getAttribute("aria-disabled") === "true",
        isAction: element.getAttribute(OPTION_ACTION_ATTRIBUTE) === "true"
      }), []), resetActiveOption = React2.useCallback(() => {
        let nextOption, nextOptions = getNavigableOptions(), nextActiveOption = getFirstNavigableOption(nextOptions);
        if (nextOptions.length === 0 && currentOptions.length > 0) {
          setCurrentOptions(nextOptions), handleChangeActiveOption();
          return;
        }
        if (nextActiveOption) {
          let {
            element,
            index
          } = nextActiveOption;
          nextOption = getFormattedOption(element, index);
        }
        let optionIsAlreadyActive = activeOption !== void 0 && nextOption?.domId === activeOption?.domId, actionContentHasUpdated = activeOption?.isAction && nextOption?.isAction && nextOption?.value !== activeOption?.value, currentValues = currentOptions.map((option) => option.getAttribute(OPTION_VALUE_ATTRIBUTE)), nextValues = nextOptions.map((option) => option.getAttribute(OPTION_VALUE_ATTRIBUTE)), listIsUnchanged = nextValues.length === currentValues.length && nextValues.every((value, index) => currentValues[index] === value), listIsAppended = currentValues.length !== 0 && nextValues.length > currentValues.length && currentValues.every((value, index) => nextValues[index] === value);
        if (listIsUnchanged) {
          optionIsAlreadyActive && actionContentHasUpdated && (setCurrentOptions(nextOptions), handleChangeActiveOption(nextOption));
          return;
        }
        if (listIsAppended) {
          setCurrentOptions(nextOptions);
          return;
        }
        if (setCurrentOptions(nextOptions), lazyLoading) {
          setLazyLoading(!1);
          return;
        }
        handleChangeActiveOption(nextOption);
      }, [lazyLoading, currentOptions, activeOption, getFirstNavigableOption, getNavigableOptions, getFormattedOption, handleChangeActiveOption]);
      React2.useEffect(() => {
        autoSelection !== exports.AutoSelection.None && !loading && children && React2.Children.count(children) > 0 && resetActiveOption();
      }, [children, autoSelection, activeOption, loading, resetActiveOption]), React2.useEffect(() => {
        listboxRef.current && (scrollableRef.current = listboxRef.current.closest(shared.scrollable.selector));
      }, []), React2.useEffect(() => {
        enableKeyboardControl && !keyboardEventsEnabled && enableKeyboardEvents();
      }, [enableKeyboardControl, keyboardEventsEnabled, enableKeyboardEvents]);
      let onOptionSelect = React2.useCallback((option) => {
        handleChangeActiveOption(option), onOptionSelected && onOptionSelected(), onSelect && onSelect(option.value);
      }, [handleChangeActiveOption, onSelect, onOptionSelected]), getNextIndex = React2.useCallback((currentIndex, lastIndex, direction) => {
        let nextIndex;
        return direction === "down" ? currentIndex === lastIndex ? nextIndex = willLoadMoreOptions ? currentIndex + 1 : 0 : nextIndex = currentIndex + 1 : nextIndex = currentIndex === 0 ? lastIndex : currentIndex - 1, nextIndex;
      }, [willLoadMoreOptions]), getNextValidOption = React2.useCallback(async (key) => {
        let lastIndex = currentOptions.length - 1, currentIndex = activeOption?.index || 0, nextIndex = 0, element = activeOption?.element, totalOptions = -1;
        if (!activeOption && autoSelection === exports.AutoSelection.None) {
          let nextOptions = getNavigableOptions(), nextActiveOption = getFirstNavigableOption(nextOptions);
          return setCurrentOptions(nextOptions), {
            element: nextActiveOption?.element,
            nextIndex: nextActiveOption?.index || 0
          };
        }
        for (; totalOptions++ < lastIndex; ) {
          nextIndex = getNextIndex(currentIndex, lastIndex, key), element = currentOptions[nextIndex];
          let triggerLazyLoad = nextIndex >= lastIndex, isDisabled = element?.getAttribute("aria-disabled") === "true";
          if (triggerLazyLoad && willLoadMoreOptions && await handleKeyToBottom(), isDisabled) {
            currentIndex = nextIndex, element = void 0;
            continue;
          }
          break;
        }
        return {
          element,
          nextIndex
        };
      }, [autoSelection, currentOptions, activeOption, willLoadMoreOptions, getNextIndex, handleKeyToBottom, getFirstNavigableOption, getNavigableOptions]), handleArrow = React2.useCallback(async (type, event) => {
        event.preventDefault();
        let {
          element,
          nextIndex
        } = await getNextValidOption(type);
        if (!element)
          return;
        let nextOption = getFormattedOption(element, nextIndex);
        handleChangeActiveOption(nextOption);
      }, [getFormattedOption, getNextValidOption, handleChangeActiveOption]), handleDownArrow = React2.useCallback((event) => {
        handleArrow("down", event);
      }, [handleArrow]), handleUpArrow = React2.useCallback((event) => {
        handleArrow("up", event);
      }, [handleArrow]), handleEnter = React2.useCallback((event) => {
        event.preventDefault(), event.stopPropagation(), activeOption && onOptionSelect(activeOption);
      }, [activeOption, onOptionSelect]), handleFocus = React2.useCallback(() => {
        enableKeyboardControl || enableKeyboardEvents();
      }, [enableKeyboardControl, enableKeyboardEvents]), handleBlur = React2.useCallback((event) => {
        if (event.stopPropagation(), keyboardEventsEnabled) {
          let nextActiveOption = getFirstNavigableOption(currentOptions);
          if (nextActiveOption) {
            let {
              element,
              index
            } = nextActiveOption, nextOption = getFormattedOption(element, index);
            handleChangeActiveOption(nextOption);
          }
        }
        enableKeyboardControl || disableKeyboardEvents();
      }, [enableKeyboardControl, currentOptions, keyboardEventsEnabled, disableKeyboardEvents, getFirstNavigableOption, getFormattedOption, handleChangeActiveOption]), listeners = keyboardEventsEnabled || textFieldFocused ? /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
        keyEvent: "keydown",
        keyCode: types.Key.DownArrow,
        handler: handleDownArrow
      }), /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
        keyEvent: "keydown",
        keyCode: types.Key.UpArrow,
        handler: handleUpArrow
      }), /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
        keyEvent: "keydown",
        keyCode: types.Key.Enter,
        handler: handleEnter
      })) : null, listboxContext = React2.useMemo(() => ({
        onOptionSelect,
        setLoading
      }), [onOptionSelect]);
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, listeners, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        visuallyHidden: !0
      }, /* @__PURE__ */ React2.createElement("div", {
        "aria-live": "polite"
      }, loading || null)), /* @__PURE__ */ React2.createElement(context.ListboxContext.Provider, {
        value: listboxContext
      }, /* @__PURE__ */ React2.createElement(context.WithinListboxContext.Provider, {
        value: !0
      }, children ? /* @__PURE__ */ React2.createElement("ul", {
        tabIndex: 0,
        role: "listbox",
        className: Listbox_module.default.Listbox,
        "aria-label": inCombobox ? void 0 : accessibilityLabel,
        "aria-labelledby": textFieldLabelId,
        "aria-busy": Boolean(loading),
        "aria-activedescendant": activeOption && activeOption.domId,
        id: listId,
        onFocus: inCombobox ? void 0 : handleFocus,
        onBlur: inCombobox ? void 0 : handleBlur,
        ref: listboxRef
      }, children) : null)));
    }
    Listbox.Option = Option.Option;
    Listbox.TextOption = TextOption.TextOption;
    Listbox.Loading = Loading.Loading;
    Listbox.Section = Section.Section;
    Listbox.Header = Header.Header;
    Listbox.Action = Action.Action;
    exports.Listbox = Listbox;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Autocomplete/components/MappedOption/MappedOption.js
var require_MappedOption = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Autocomplete/components/MappedOption/MappedOption.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), MappedOption_module = require_MappedOption_css(), Listbox = require_Listbox(), MappedOption = /* @__PURE__ */ React2.memo(function({
      label,
      value,
      disabled,
      media,
      selected,
      singleSelection
    }) {
      let mediaClassNames = css.classNames(MappedOption_module.default.Media, disabled && MappedOption_module.default.disabledMedia, singleSelection && MappedOption_module.default.singleSelectionMedia), mediaMarkup = media ? /* @__PURE__ */ React2.createElement("div", {
        className: mediaClassNames
      }, media) : null, accessibilityLabel = typeof label == "string" ? label : void 0;
      return /* @__PURE__ */ React2.createElement(Listbox.Listbox.Option, {
        accessibilityLabel,
        key: value,
        selected,
        value,
        disabled
      }, /* @__PURE__ */ React2.createElement(Listbox.Listbox.TextOption, {
        selected,
        disabled
      }, /* @__PURE__ */ React2.createElement("div", {
        className: MappedOption_module.default.Content
      }, mediaMarkup, label)));
    });
    exports.MappedOption = MappedOption;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Combobox/Combobox.css.js
var require_Combobox_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Combobox/Combobox.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Listbox: "Polaris-Combobox__Listbox"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Combobox/components/TextField/TextField.js
var require_TextField2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Combobox/components/TextField/TextField.js"(exports) {
    "use strict";
    var React2 = require_react(), hooks = require_hooks5(), Label = require_Label(), TextField$1 = require_TextField();
    function TextField2({
      value,
      id: idProp,
      type = "text",
      ariaAutocomplete = "list",
      onFocus,
      onBlur,
      onChange,
      ...rest
    }) {
      let comboboxTextFieldContext = hooks.useComboboxTextField(), {
        activeOptionId,
        listboxId,
        expanded,
        setTextFieldFocused,
        setTextFieldLabelId,
        onTextFieldFocus,
        onTextFieldChange,
        onTextFieldBlur
      } = comboboxTextFieldContext, uniqueId = React2.useId(), textFieldId = React2.useMemo(() => idProp || uniqueId, [uniqueId, idProp]), labelId = React2.useMemo(() => Label.labelID(idProp || uniqueId), [uniqueId, idProp]);
      React2.useEffect(() => {
        setTextFieldLabelId && setTextFieldLabelId(labelId);
      }, [labelId, setTextFieldLabelId]);
      let handleFocus = React2.useCallback((event) => {
        onFocus && onFocus(event), onTextFieldFocus && onTextFieldFocus(), setTextFieldFocused && setTextFieldFocused(!0);
      }, [onFocus, onTextFieldFocus, setTextFieldFocused]), handleBlur = React2.useCallback((event) => {
        onBlur && onBlur(event), onTextFieldBlur && onTextFieldBlur(), setTextFieldFocused && setTextFieldFocused(!1);
      }, [onBlur, onTextFieldBlur, setTextFieldFocused]), handleChange = React2.useCallback((value2, id) => {
        onChange && onChange(value2, id), onTextFieldChange && onTextFieldChange(value2);
      }, [onChange, onTextFieldChange]);
      return /* @__PURE__ */ React2.createElement(TextField$1.TextField, Object.assign({}, rest, {
        value,
        id: textFieldId,
        type,
        ariaAutocomplete,
        "aria-haspopup": "listbox",
        ariaActiveDescendant: activeOptionId,
        ariaControls: listboxId,
        role: "combobox",
        ariaExpanded: expanded,
        onFocus: handleFocus,
        onBlur: handleBlur,
        onChange: handleChange
      }));
    }
    exports.TextField = TextField2;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Combobox/Combobox.js
var require_Combobox = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Combobox/Combobox.js"(exports) {
    "use strict";
    var React2 = require_react(), Combobox_module = require_Combobox_css(), context = require_context11(), TextField2 = require_TextField2(), Popover = require_Popover();
    function Combobox({
      activator,
      allowMultiple,
      children,
      preferredPosition = "below",
      willLoadMoreOptions,
      height,
      onScrolledToBottom,
      onClose
    }) {
      let [popoverActive, setPopoverActive] = React2.useState(!1), [activeOptionId, setActiveOptionId] = React2.useState(), [textFieldLabelId, setTextFieldLabelId] = React2.useState(), [listboxId, setListboxId] = React2.useState(), [textFieldFocused, setTextFieldFocused] = React2.useState(!1), shouldOpen = !popoverActive, popoverActiveWithChildren = popoverActive && React2.Children.count(children) > 0, ref = React2.useRef(null), handleClose = React2.useCallback(() => {
        setPopoverActive(!1), onClose?.(), setActiveOptionId(void 0);
      }, [onClose]), handleOpen = React2.useCallback(() => {
        setPopoverActive(!0), setActiveOptionId(void 0);
      }, []), onOptionSelected = React2.useCallback(() => {
        if (!allowMultiple) {
          handleClose(), setActiveOptionId(void 0);
          return;
        }
        ref.current?.forceUpdatePosition();
      }, [allowMultiple, handleClose]), handleFocus = React2.useCallback(() => {
        shouldOpen && handleOpen();
      }, [shouldOpen, handleOpen]), handleChange = React2.useCallback(() => {
        shouldOpen && handleOpen();
      }, [shouldOpen, handleOpen]), handleBlur = React2.useCallback(() => {
        popoverActive && handleClose();
      }, [popoverActive, handleClose]), textFieldContextValue = React2.useMemo(() => ({
        activeOptionId,
        expanded: popoverActive,
        listboxId,
        setTextFieldFocused,
        setTextFieldLabelId,
        onTextFieldFocus: handleFocus,
        onTextFieldChange: handleChange,
        onTextFieldBlur: handleBlur
      }), [activeOptionId, popoverActive, listboxId, setTextFieldFocused, setTextFieldLabelId, handleFocus, handleChange, handleBlur]), listboxOptionContextValue = React2.useMemo(() => ({
        allowMultiple
      }), [allowMultiple]), listboxContextValue = React2.useMemo(() => ({
        listboxId,
        textFieldLabelId,
        textFieldFocused,
        willLoadMoreOptions,
        onOptionSelected,
        setActiveOptionId,
        setListboxId,
        onKeyToBottom: onScrolledToBottom
      }), [listboxId, textFieldLabelId, textFieldFocused, willLoadMoreOptions, onOptionSelected, setActiveOptionId, setListboxId, onScrolledToBottom]);
      return /* @__PURE__ */ React2.createElement(Popover.Popover, {
        ref,
        active: popoverActiveWithChildren,
        activator: /* @__PURE__ */ React2.createElement(context.ComboboxTextFieldContext.Provider, {
          value: textFieldContextValue
        }, activator),
        autofocusTarget: "none",
        preventFocusOnClose: !0,
        fullWidth: !0,
        preferInputActivator: !1,
        preferredPosition,
        onClose: handleClose
      }, React2.Children.count(children) > 0 ? /* @__PURE__ */ React2.createElement(Popover.Popover.Pane, {
        onScrolledToBottom,
        height
      }, /* @__PURE__ */ React2.createElement(context.ComboboxListboxContext.Provider, {
        value: listboxContextValue
      }, /* @__PURE__ */ React2.createElement(context.ComboboxListboxOptionContext.Provider, {
        value: listboxOptionContextValue
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Combobox_module.default.Listbox
      }, children)))) : null);
    }
    Combobox.TextField = TextField2.TextField;
    exports.Combobox = Combobox;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Autocomplete/components/MappedAction/MappedAction.css.js
var require_MappedAction_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Autocomplete/components/MappedAction/MappedAction.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ActionContainer: "Polaris-Autocomplete-MappedAction__ActionContainer",
      Action: "Polaris-Autocomplete-MappedAction__Action",
      destructive: "Polaris-Autocomplete-MappedAction--destructive",
      selected: "Polaris-Autocomplete-MappedAction--selected",
      disabled: "Polaris-Autocomplete-MappedAction--disabled",
      Prefix: "Polaris-Autocomplete-MappedAction__Prefix",
      Suffix: "Polaris-Autocomplete-MappedAction__Suffix",
      Content: "Polaris-Autocomplete-MappedAction__Content",
      Text: "Polaris-Autocomplete-MappedAction__Text"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Autocomplete/components/MappedAction/MappedAction.js
var require_MappedAction = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Autocomplete/components/MappedAction/MappedAction.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), MappedAction_module = require_MappedAction_css(), hooks = require_hooks2(), Icon2 = require_Icon(), Badge4 = require_Badge(), Text4 = require_Text(), context = require_context14(), Listbox = require_Listbox();
    function MappedAction({
      active,
      content,
      disabled,
      icon,
      image,
      prefix,
      suffix,
      ellipsis,
      role,
      url,
      external,
      onAction,
      destructive,
      badge,
      helpText,
      wrapOverflow = !1
    }) {
      let i18n = hooks.useI18n(), prefixMarkup = null;
      prefix ? prefixMarkup = /* @__PURE__ */ React2.createElement("div", {
        className: MappedAction_module.default.Prefix
      }, prefix) : icon ? prefixMarkup = /* @__PURE__ */ React2.createElement("div", {
        className: MappedAction_module.default.Prefix
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: icon
      })) : image && (prefixMarkup = /* @__PURE__ */ React2.createElement("div", {
        role: "presentation",
        className: MappedAction_module.default.Prefix,
        style: {
          backgroundImage: `url(${image}`
        }
      }));
      let badgeMarkup = badge && /* @__PURE__ */ React2.createElement("span", {
        className: MappedAction_module.default.Suffix
      }, /* @__PURE__ */ React2.createElement(Badge4.Badge, {
        tone: badge.tone
      }, badge.content)), suffixMarkup = suffix && /* @__PURE__ */ React2.createElement("span", {
        className: MappedAction_module.default.Suffix
      }, suffix), contentText = ellipsis && content ? i18n.translate("Polaris.Autocomplete.ellipsis", {
        content
      }) : content, contentMarkup = /* @__PURE__ */ React2.createElement("div", {
        className: MappedAction_module.default.Text
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "p",
        variant: "bodyMd",
        breakWord: wrapOverflow
      }, contentText), helpText ? /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "p",
        variant: "bodyMd",
        tone: "subdued"
      }, helpText) : null), context$1 = React2.useMemo(() => ({
        role,
        url,
        external,
        onAction,
        destructive
      }), [role, url, external, onAction, destructive]), actionClassNames = css.classNames(MappedAction_module.default.Action, disabled && MappedAction_module.default.disabled, destructive && MappedAction_module.default.destructive, active && MappedAction_module.default.selected);
      return /* @__PURE__ */ React2.createElement(context.MappedActionContext.Provider, {
        value: context$1
      }, /* @__PURE__ */ React2.createElement("div", {
        className: MappedAction_module.default.ActionContainer
      }, /* @__PURE__ */ React2.createElement(Listbox.Listbox.Action, {
        selected: active,
        disabled,
        value: content || ""
      }, /* @__PURE__ */ React2.createElement("div", {
        className: actionClassNames
      }, /* @__PURE__ */ React2.createElement("div", {
        className: MappedAction_module.default.Content
      }, prefixMarkup, contentMarkup, badgeMarkup, suffixMarkup)))));
    }
    exports.MappedAction = MappedAction;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Autocomplete/Autocomplete.js
var require_Autocomplete = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Autocomplete/Autocomplete.js"(exports) {
    "use strict";
    var React2 = require_react(), options = require_options(), Autocomplete_module = require_Autocomplete_css(), MappedOption = require_MappedOption(), Listbox = require_Listbox(), Combobox = require_Combobox(), MappedAction = require_MappedAction(), hooks = require_hooks2(), Autocomplete = function({
      options: options$1,
      selected,
      textField,
      preferredPosition,
      listTitle,
      allowMultiple,
      loading,
      actionBefore,
      willLoadMoreResults,
      emptyState,
      onSelect,
      onLoadMoreResults
    }) {
      let i18n = hooks.useI18n(), buildMappedOptionFromOption = React2.useCallback((options2) => options2.map((option) => /* @__PURE__ */ React2.createElement(MappedOption.MappedOption, Object.assign({
        key: option.id || option.value
      }, option, {
        selected: selected.includes(option.value),
        singleSelection: !allowMultiple
      }))), [selected, allowMultiple]), optionsMarkup = React2.useMemo(() => {
        let conditionalOptions = loading && !willLoadMoreResults ? [] : options$1;
        if (options.isSection(conditionalOptions)) {
          if (conditionalOptions.every(({
            options: options2
          }) => options2.length === 0))
            return null;
          let optionsMarkup2 = conditionalOptions.map(({
            options: options2,
            title
          }) => {
            if (options2.length === 0)
              return null;
            let optionMarkup = buildMappedOptionFromOption(options2);
            return /* @__PURE__ */ React2.createElement(Listbox.Listbox.Section, {
              divider: !1,
              title: /* @__PURE__ */ React2.createElement(Listbox.Listbox.Header, null, title),
              key: title
            }, optionMarkup);
          });
          return /* @__PURE__ */ React2.createElement("div", {
            className: Autocomplete_module.default.SectionWrapper
          }, optionsMarkup2);
        }
        let optionList = conditionalOptions.length > 0 ? buildMappedOptionFromOption(conditionalOptions) : null;
        return listTitle ? /* @__PURE__ */ React2.createElement(Listbox.Listbox.Section, {
          divider: !1,
          title: /* @__PURE__ */ React2.createElement(Listbox.Listbox.Header, null, listTitle)
        }, optionList) : optionList;
      }, [listTitle, loading, options$1, willLoadMoreResults, buildMappedOptionFromOption]), loadingMarkup = loading ? /* @__PURE__ */ React2.createElement(Listbox.Listbox.Loading, {
        accessibilityLabel: i18n.translate("Polaris.Autocomplete.spinnerAccessibilityLabel")
      }) : null, updateSelection = React2.useCallback((newSelection) => {
        if (actionBefore && newSelection === actionBefore.content) {
          actionBefore.onAction && actionBefore.onAction();
          return;
        }
        allowMultiple ? selected.includes(newSelection) ? onSelect(selected.filter((option) => option !== newSelection)) : onSelect([...selected, newSelection]) : onSelect([newSelection]);
      }, [allowMultiple, onSelect, selected, actionBefore]), actionMarkup = actionBefore && /* @__PURE__ */ React2.createElement(MappedAction.MappedAction, actionBefore), emptyStateMarkup = emptyState && options$1.length < 1 && !loading && /* @__PURE__ */ React2.createElement("div", {
        role: "status"
      }, emptyState), autoSelection = actionBefore ? Listbox.AutoSelection.First : void 0;
      return /* @__PURE__ */ React2.createElement(Combobox.Combobox, {
        activator: textField,
        allowMultiple,
        onScrolledToBottom: onLoadMoreResults,
        preferredPosition,
        willLoadMoreOptions: willLoadMoreResults
      }, actionMarkup || optionsMarkup || loadingMarkup || emptyStateMarkup ? /* @__PURE__ */ React2.createElement(Listbox.Listbox, {
        autoSelection,
        onSelect: updateSelection
      }, actionMarkup, optionsMarkup && (!loading || willLoadMoreResults) ? optionsMarkup : null, loadingMarkup, emptyStateMarkup) : null);
    };
    Autocomplete.TextField = Combobox.Combobox.TextField;
    exports.Autocomplete = Autocomplete;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Backdrop/Backdrop.css.js
var require_Backdrop_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Backdrop/Backdrop.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Backdrop: "Polaris-Backdrop",
      transparent: "Polaris-Backdrop--transparent",
      belowNavigation: "Polaris-Backdrop--belowNavigation"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ScrollLock/ScrollLock.css.js
var require_ScrollLock_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ScrollLock/ScrollLock.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var ScrollLock_module = {};
    exports.default = ScrollLock_module;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/scroll-lock-manager/hooks.js
var require_hooks8 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/scroll-lock-manager/hooks.js"(exports) {
    "use strict";
    var React2 = require_react(), errors = require_errors(), context = require_context3();
    function useScrollLockManager() {
      let scrollLockManager = React2.useContext(context.ScrollLockManagerContext);
      if (!scrollLockManager)
        throw new errors.MissingAppProviderError("No ScrollLockManager was provided.");
      return scrollLockManager;
    }
    exports.useScrollLockManager = useScrollLockManager;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ScrollLock/ScrollLock.js
var require_ScrollLock = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ScrollLock/ScrollLock.js"(exports) {
    "use strict";
    var React2 = require_react();
    require_ScrollLock_css();
    var hooks = require_hooks8();
    function ScrollLock(_) {
      let scrollLockManager = hooks.useScrollLockManager();
      return React2.useEffect(() => (scrollLockManager.registerScrollLock(), () => {
        scrollLockManager.unregisterScrollLock();
      }), [scrollLockManager]), null;
    }
    exports.ScrollLock = ScrollLock;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Backdrop/Backdrop.js
var require_Backdrop = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Backdrop/Backdrop.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Backdrop_module = require_Backdrop_css(), ScrollLock = require_ScrollLock();
    function Backdrop(props) {
      let {
        onClick,
        onTouchStart,
        belowNavigation,
        transparent,
        setClosing
      } = props, className = css.classNames(Backdrop_module.default.Backdrop, belowNavigation && Backdrop_module.default.belowNavigation, transparent && Backdrop_module.default.transparent), handleMouseDown = () => {
        setClosing && setClosing(!0);
      }, handleClick = () => {
        setClosing && setClosing(!1), onClick && onClick();
      };
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(ScrollLock.ScrollLock, null), /* @__PURE__ */ React2.createElement("div", {
        className,
        onClick: handleClick,
        onTouchStart,
        onMouseDown: handleMouseDown
      }));
    }
    exports.Backdrop = Backdrop;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/banner-context.js
var require_banner_context = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/banner-context.js"(exports) {
    "use strict";
    var React2 = require_react(), BannerContext = /* @__PURE__ */ React2.createContext(!1);
    exports.BannerContext = BannerContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Banner/Banner.css.js
var require_Banner_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Banner/Banner.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Banner: "Polaris-Banner",
      keyFocused: "Polaris-Banner--keyFocused",
      withinContentContainer: "Polaris-Banner--withinContentContainer",
      withinPage: "Polaris-Banner--withinPage",
      DismissIcon: "Polaris-Banner__DismissIcon",
      "text-success-on-bg-fill": "Polaris-Banner--textSuccessOnBgFill",
      "text-success": "Polaris-Banner__text--success",
      "text-warning-on-bg-fill": "Polaris-Banner--textWarningOnBgFill",
      "text-warning": "Polaris-Banner__text--warning",
      "text-critical-on-bg-fill": "Polaris-Banner--textCriticalOnBgFill",
      "text-critical": "Polaris-Banner__text--critical",
      "text-info-on-bg-fill": "Polaris-Banner--textInfoOnBgFill",
      "text-info": "Polaris-Banner__text--info",
      "icon-secondary": "Polaris-Banner__icon--secondary"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Banner/utilities.js
var require_utilities3 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Banner/utilities.js"(exports) {
    "use strict";
    var polarisIcons = require("@shopify/polaris-icons"), React2 = require_react(), bannerAttributes = {
      success: {
        withinPage: {
          background: "bg-fill-success",
          text: "text-success-on-bg-fill",
          icon: "text-success-on-bg-fill"
        },
        withinContentContainer: {
          background: "bg-surface-success",
          text: "text-success",
          icon: "text-success"
        },
        icon: polarisIcons.CheckIcon
      },
      warning: {
        withinPage: {
          background: "bg-fill-warning",
          text: "text-warning-on-bg-fill",
          icon: "text-warning-on-bg-fill"
        },
        withinContentContainer: {
          background: "bg-surface-warning",
          text: "text-warning",
          icon: "text-warning"
        },
        icon: polarisIcons.AlertTriangleIcon
      },
      critical: {
        withinPage: {
          background: "bg-fill-critical",
          text: "text-critical-on-bg-fill",
          icon: "text-critical-on-bg-fill"
        },
        withinContentContainer: {
          background: "bg-surface-critical",
          text: "text-critical",
          icon: "text-critical"
        },
        icon: polarisIcons.AlertDiamondIcon
      },
      info: {
        withinPage: {
          background: "bg-fill-info",
          text: "text-info-on-bg-fill",
          icon: "text-info-on-bg-fill"
        },
        withinContentContainer: {
          background: "bg-surface-info",
          text: "text-info",
          icon: "text-info"
        },
        icon: polarisIcons.InfoIcon
      }
    };
    function useBannerFocus(bannerRef) {
      let wrapperRef = React2.useRef(null), [shouldShowFocus, setShouldShowFocus] = React2.useState(!1);
      return React2.useImperativeHandle(bannerRef, () => ({
        focus: () => {
          wrapperRef.current?.focus(), setShouldShowFocus(!0);
        }
      }), []), {
        wrapperRef,
        handleKeyUp: (event) => {
          event.target === wrapperRef.current && setShouldShowFocus(!0);
        },
        handleBlur: () => setShouldShowFocus(!1),
        handleMouseUp: (event) => {
          event.currentTarget.blur(), setShouldShowFocus(!1);
        },
        shouldShowFocus
      };
    }
    exports.bannerAttributes = bannerAttributes;
    exports.useBannerFocus = useBannerFocus;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ButtonGroup/ButtonGroup.css.js
var require_ButtonGroup_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ButtonGroup/ButtonGroup.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ButtonGroup: "Polaris-ButtonGroup",
      Item: "Polaris-ButtonGroup__Item",
      "Item-plain": "Polaris-ButtonGroup__Item--plain",
      variantSegmented: "Polaris-ButtonGroup--variantSegmented",
      "Item-focused": "Polaris-ButtonGroup__Item--focused",
      fullWidth: "Polaris-ButtonGroup--fullWidth",
      extraTight: "Polaris-ButtonGroup--extraTight",
      tight: "Polaris-ButtonGroup--tight",
      loose: "Polaris-ButtonGroup--loose",
      noWrap: "Polaris-ButtonGroup--noWrap"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ButtonGroup/components/Item/Item.js
var require_Item3 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ButtonGroup/components/Item/Item.js"(exports) {
    "use strict";
    var React2 = require_react(), useToggle = require_use_toggle(), css = require_css(), ButtonGroup_module = require_ButtonGroup_css();
    function Item({
      button
    }) {
      let {
        value: focused,
        setTrue: forceTrueFocused,
        setFalse: forceFalseFocused
      } = useToggle.useToggle(!1), className = css.classNames(ButtonGroup_module.default.Item, focused && ButtonGroup_module.default["Item-focused"], button.props.variant === "plain" && ButtonGroup_module.default["Item-plain"]);
      return /* @__PURE__ */ React2.createElement("div", {
        className,
        onFocus: forceTrueFocused,
        onBlur: forceFalseFocused
      }, button);
    }
    exports.Item = Item;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ButtonGroup/ButtonGroup.js
var require_ButtonGroup = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ButtonGroup/ButtonGroup.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), components = require_components(), ButtonGroup_module = require_ButtonGroup_css(), Item = require_Item3();
    function ButtonGroup({
      children,
      gap,
      variant,
      fullWidth,
      connectedTop,
      noWrap
    }) {
      let className = css.classNames(ButtonGroup_module.default.ButtonGroup, gap && ButtonGroup_module.default[gap], variant && ButtonGroup_module.default[css.variationName("variant", variant)], fullWidth && ButtonGroup_module.default.fullWidth, noWrap && ButtonGroup_module.default.noWrap), contents = components.elementChildren(children).map((child, index) => /* @__PURE__ */ React2.createElement(Item.Item, {
        button: child,
        key: index
      }));
      return /* @__PURE__ */ React2.createElement("div", {
        className,
        "data-buttongroup-variant": variant,
        "data-buttongroup-connected-top": connectedTop,
        "data-buttongroup-full-width": fullWidth,
        "data-buttongroup-no-wrap": noWrap
      }, contents);
    }
    exports.ButtonGroup = ButtonGroup;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Banner/Banner.js
var require_Banner = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Banner/Banner.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), bannerContext = require_banner_context(), withinContentContext = require_within_content_context(), css = require_css(), breakpoints = require_breakpoints(), useEventListener = require_use_event_listener(), Banner_module = require_Banner_css(), utilities = require_utilities3(), ButtonGroup = require_ButtonGroup(), hooks = require_hooks2(), Text4 = require_Text(), Icon2 = require_Icon(), Button4 = require_Button(), Box4 = require_Box(), BlockStack4 = require_BlockStack(), InlineStack4 = require_InlineStack(), Banner3 = /* @__PURE__ */ React2.forwardRef(function(props, bannerRef) {
      let {
        tone,
        stopAnnouncements
      } = props, withinContentContainer = React2.useContext(withinContentContext.WithinContentContext), {
        wrapperRef,
        handleKeyUp,
        handleBlur,
        handleMouseUp,
        shouldShowFocus
      } = utilities.useBannerFocus(bannerRef), className = css.classNames(Banner_module.default.Banner, shouldShowFocus && Banner_module.default.keyFocused, withinContentContainer ? Banner_module.default.withinContentContainer : Banner_module.default.withinPage);
      return /* @__PURE__ */ React2.createElement(bannerContext.BannerContext.Provider, {
        value: !0
      }, /* @__PURE__ */ React2.createElement("div", {
        className,
        tabIndex: 0,
        ref: wrapperRef,
        role: tone === "warning" || tone === "critical" ? "alert" : "status",
        "aria-live": stopAnnouncements ? "off" : "polite",
        onMouseUp: handleMouseUp,
        onKeyUp: handleKeyUp,
        onBlur: handleBlur
      }, /* @__PURE__ */ React2.createElement(BannerLayout, props)));
    });
    function BannerLayout({
      tone = "info",
      icon,
      hideIcon,
      onDismiss,
      action: action8,
      secondaryAction,
      title,
      children
    }) {
      let i18n = hooks.useI18n(), withinContentContainer = React2.useContext(withinContentContext.WithinContentContext), isInlineIconBanner = !title && !withinContentContainer, bannerTone = Object.keys(utilities.bannerAttributes).includes(tone) ? tone : "info", bannerColors = utilities.bannerAttributes[bannerTone][withinContentContainer ? "withinContentContainer" : "withinPage"], sharedBannerProps = {
        backgroundColor: bannerColors.background,
        textColor: bannerColors.text,
        bannerTitle: title ? /* @__PURE__ */ React2.createElement(Text4.Text, {
          as: "h2",
          variant: "headingSm",
          breakWord: !0
        }, title) : null,
        bannerIcon: hideIcon ? null : /* @__PURE__ */ React2.createElement("span", {
          className: Banner_module.default[bannerColors.icon]
        }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
          source: icon ?? utilities.bannerAttributes[bannerTone].icon
        })),
        actionButtons: action8 || secondaryAction ? /* @__PURE__ */ React2.createElement(ButtonGroup.ButtonGroup, null, action8 && /* @__PURE__ */ React2.createElement(Button4.Button, Object.assign({
          onClick: action8.onAction
        }, action8), action8.content), secondaryAction && /* @__PURE__ */ React2.createElement(Button4.Button, Object.assign({
          onClick: secondaryAction.onAction
        }, secondaryAction), secondaryAction.content)) : null,
        dismissButton: onDismiss ? /* @__PURE__ */ React2.createElement(Button4.Button, {
          variant: "tertiary",
          icon: /* @__PURE__ */ React2.createElement("span", {
            className: Banner_module.default[isInlineIconBanner ? "icon-secondary" : bannerColors.icon]
          }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
            source: polarisIcons.XIcon
          })),
          onClick: onDismiss,
          accessibilityLabel: i18n.translate("Polaris.Banner.dismissButton")
        }) : null
      }, childrenMarkup = children ? /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "bodyMd"
      }, children) : null;
      return withinContentContainer ? /* @__PURE__ */ React2.createElement(WithinContentContainerBanner, sharedBannerProps, childrenMarkup) : isInlineIconBanner ? /* @__PURE__ */ React2.createElement(InlineIconBanner, sharedBannerProps, childrenMarkup) : /* @__PURE__ */ React2.createElement(DefaultBanner, sharedBannerProps, childrenMarkup);
    }
    function DefaultBanner({
      backgroundColor,
      textColor,
      bannerTitle,
      bannerIcon,
      actionButtons,
      dismissButton,
      children
    }) {
      let {
        smUp
      } = breakpoints.useBreakpoints(), hasContent = children || actionButtons;
      return /* @__PURE__ */ React2.createElement(Box4.Box, {
        width: "100%"
      }, /* @__PURE__ */ React2.createElement(BlockStack4.BlockStack, {
        align: "space-between"
      }, /* @__PURE__ */ React2.createElement(Box4.Box, {
        background: backgroundColor,
        color: textColor,
        borderStartStartRadius: smUp ? "300" : void 0,
        borderStartEndRadius: smUp ? "300" : void 0,
        borderEndStartRadius: !hasContent && smUp ? "300" : void 0,
        borderEndEndRadius: !hasContent && smUp ? "300" : void 0,
        padding: "300"
      }, /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        align: "space-between",
        blockAlign: "center",
        gap: "200",
        wrap: !1
      }, /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        gap: "100",
        wrap: !1
      }, bannerIcon, bannerTitle), dismissButton)), hasContent && /* @__PURE__ */ React2.createElement(Box4.Box, {
        padding: {
          xs: "300",
          md: "400"
        },
        paddingBlockStart: "300"
      }, /* @__PURE__ */ React2.createElement(BlockStack4.BlockStack, {
        gap: "200"
      }, /* @__PURE__ */ React2.createElement("div", null, children), actionButtons))));
    }
    function InlineIconBanner({
      backgroundColor,
      bannerIcon,
      actionButtons,
      dismissButton,
      children
    }) {
      let [blockAlign, setBlockAlign] = React2.useState("center"), contentNode = React2.useRef(null), iconNode = React2.useRef(null), dismissIconNode = React2.useRef(null), handleResize = React2.useCallback(() => {
        let contentHeight = contentNode.current?.offsetHeight, iconBoxHeight = iconNode.current?.offsetHeight || dismissIconNode.current?.offsetHeight;
        !contentHeight || !iconBoxHeight || (contentHeight > iconBoxHeight ? setBlockAlign("start") : setBlockAlign("center"));
      }, []);
      return React2.useEffect(() => handleResize(), [handleResize]), useEventListener.useEventListener("resize", handleResize), /* @__PURE__ */ React2.createElement(Box4.Box, {
        width: "100%",
        padding: "300",
        borderRadius: "300"
      }, /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        align: "space-between",
        blockAlign,
        wrap: !1
      }, /* @__PURE__ */ React2.createElement(Box4.Box, {
        width: "100%"
      }, /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        gap: "200",
        wrap: !1,
        blockAlign
      }, bannerIcon ? /* @__PURE__ */ React2.createElement("div", {
        ref: iconNode
      }, /* @__PURE__ */ React2.createElement(Box4.Box, {
        background: backgroundColor,
        borderRadius: "200",
        padding: "100"
      }, bannerIcon)) : null, /* @__PURE__ */ React2.createElement(Box4.Box, {
        ref: contentNode,
        width: "100%"
      }, /* @__PURE__ */ React2.createElement(BlockStack4.BlockStack, {
        gap: "200"
      }, /* @__PURE__ */ React2.createElement("div", null, children), actionButtons)))), /* @__PURE__ */ React2.createElement("div", {
        ref: dismissIconNode,
        className: Banner_module.default.DismissIcon
      }, dismissButton)));
    }
    function WithinContentContainerBanner({
      backgroundColor,
      textColor,
      bannerTitle,
      bannerIcon,
      actionButtons,
      dismissButton,
      children
    }) {
      return /* @__PURE__ */ React2.createElement(Box4.Box, {
        width: "100%",
        background: backgroundColor,
        padding: "200",
        borderRadius: "200",
        color: textColor
      }, /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        align: "space-between",
        blockAlign: "start",
        wrap: !1,
        gap: "200"
      }, /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        gap: "150",
        wrap: !1
      }, bannerIcon, /* @__PURE__ */ React2.createElement(Box4.Box, {
        width: "100%"
      }, /* @__PURE__ */ React2.createElement(BlockStack4.BlockStack, {
        gap: "200"
      }, /* @__PURE__ */ React2.createElement(BlockStack4.BlockStack, {
        gap: "050"
      }, bannerTitle, /* @__PURE__ */ React2.createElement("div", null, children)), actionButtons))), dismissButton));
    }
    exports.Banner = Banner3;
    exports.BannerLayout = BannerLayout;
    exports.DefaultBanner = DefaultBanner;
    exports.InlineIconBanner = InlineIconBanner;
    exports.WithinContentContainerBanner = WithinContentContainerBanner;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Bleed/Bleed.css.js
var require_Bleed_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Bleed/Bleed.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Bleed: "Polaris-Bleed"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Bleed/Bleed.js
var require_Bleed = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Bleed/Bleed.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Bleed_module = require_Bleed_css(), Bleed = ({
      marginInline,
      marginBlock,
      marginBlockStart,
      marginBlockEnd,
      marginInlineStart,
      marginInlineEnd,
      children
    }) => {
      let getNegativeMargins = (direction) => {
        let xAxis = ["marginInlineStart", "marginInlineEnd"], yAxis = ["marginBlockStart", "marginBlockEnd"], directionValues = {
          marginBlockStart,
          marginBlockEnd,
          marginInlineStart,
          marginInlineEnd,
          marginInline,
          marginBlock
        };
        if (directionValues[direction])
          return directionValues[direction];
        if (xAxis.includes(direction) && marginInline)
          return directionValues.marginInline;
        if (yAxis.includes(direction) && marginBlock)
          return directionValues.marginBlock;
      }, negativeMarginBlockStart = getNegativeMargins("marginBlockStart"), negativeMarginBlockEnd = getNegativeMargins("marginBlockEnd"), negativeMarginInlineStart = getNegativeMargins("marginInlineStart"), negativeMarginInlineEnd = getNegativeMargins("marginInlineEnd"), style = {
        ...css.getResponsiveProps("bleed", "margin-block-start", "space", negativeMarginBlockStart),
        ...css.getResponsiveProps("bleed", "margin-block-end", "space", negativeMarginBlockEnd),
        ...css.getResponsiveProps("bleed", "margin-inline-start", "space", negativeMarginInlineStart),
        ...css.getResponsiveProps("bleed", "margin-inline-end", "space", negativeMarginInlineEnd)
      };
      return /* @__PURE__ */ React2.createElement("div", {
        className: Bleed_module.default.Bleed,
        style: css.sanitizeCustomProperties(style)
      }, children);
    };
    exports.Bleed = Bleed;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Breadcrumbs/Breadcrumbs.js
var require_Breadcrumbs = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Breadcrumbs/Breadcrumbs.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), focus = require_focus(), Button4 = require_Button();
    function Breadcrumbs({
      backAction
    }) {
      let {
        content
      } = backAction;
      return /* @__PURE__ */ React2.createElement(Button4.Button, {
        key: content,
        url: "url" in backAction ? backAction.url : void 0,
        onClick: "onAction" in backAction ? backAction.onAction : void 0,
        onPointerDown: focus.handleMouseUpByBlurring,
        icon: polarisIcons.ArrowLeftIcon,
        accessibilityLabel: backAction.accessibilityLabel ?? content
      });
    }
    exports.Breadcrumbs = Breadcrumbs;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/BulkActions/utilities.js
var require_utilities4 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/BulkActions/utilities.js"(exports) {
    "use strict";
    function getVisibleAndHiddenActionsIndices(promotedActions = [], disclosureWidth, actionsWidths, containerWidth) {
      let sumTabWidths = actionsWidths.reduce((sum, width) => sum + width, 0), arrayOfPromotedActionsIndices = promotedActions.map((_, index) => index), visiblePromotedActions = [], hiddenPromotedActions = [];
      if (containerWidth > sumTabWidths)
        visiblePromotedActions.push(...arrayOfPromotedActionsIndices);
      else {
        let accumulatedWidth = 0, hasReturned = !1;
        arrayOfPromotedActionsIndices.forEach((currentPromotedActionsIndex) => {
          let currentActionsWidth = actionsWidths[currentPromotedActionsIndex];
          if (accumulatedWidth + currentActionsWidth >= containerWidth - disclosureWidth || hasReturned) {
            hiddenPromotedActions.push(currentPromotedActionsIndex), hasReturned = !0;
            return;
          }
          visiblePromotedActions.push(currentPromotedActionsIndex), accumulatedWidth += currentActionsWidth;
        });
      }
      return {
        visiblePromotedActions,
        hiddenPromotedActions
      };
    }
    function instanceOfBulkActionListSectionArray(actions) {
      let validList = actions.filter((action8) => action8.items);
      return actions.length === validList.length;
    }
    function instanceOfBulkActionArray(actions) {
      let validList = actions.filter((action8) => !action8.items);
      return actions.length === validList.length;
    }
    function instanceOfMenuGroupDescriptor(action8) {
      return "title" in action8 && "actions" in action8;
    }
    function instanceOfBulkActionListSection(action8) {
      return "items" in action8;
    }
    function getActionSections(actions) {
      if (!(!actions || actions.length === 0)) {
        if (instanceOfBulkActionListSectionArray(actions))
          return actions;
        if (instanceOfBulkActionArray(actions))
          return [{
            items: actions
          }];
      }
    }
    function isNewBadgeInBadgeActions(actionSections) {
      if (!actionSections)
        return !1;
      for (let action8 of actionSections)
        for (let item of action8.items)
          if (item.badge?.tone === "new")
            return !0;
      return !1;
    }
    exports.getActionSections = getActionSections;
    exports.getVisibleAndHiddenActionsIndices = getVisibleAndHiddenActionsIndices;
    exports.instanceOfBulkActionArray = instanceOfBulkActionArray;
    exports.instanceOfBulkActionListSection = instanceOfBulkActionListSection;
    exports.instanceOfBulkActionListSectionArray = instanceOfBulkActionListSectionArray;
    exports.instanceOfMenuGroupDescriptor = instanceOfMenuGroupDescriptor;
    exports.isNewBadgeInBadgeActions = isNewBadgeInBadgeActions;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/BulkActions/BulkActions.css.js
var require_BulkActions_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/BulkActions/BulkActions.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      BulkActionsOuterLayout: "Polaris-BulkActions__BulkActionsOuterLayout",
      BulkActionsSelectAllWrapper: "Polaris-BulkActions__BulkActionsSelectAllWrapper",
      BulkActionsPromotedActionsWrapper: "Polaris-BulkActions__BulkActionsPromotedActionsWrapper",
      BulkActionsLayout: "Polaris-BulkActions__BulkActionsLayout",
      "BulkActionsLayout--measuring": "Polaris-BulkActions--bulkActionsLayoutMeasuring",
      BulkActionsMeasurerLayout: "Polaris-BulkActions__BulkActionsMeasurerLayout",
      BulkActionButton: "Polaris-BulkActions__BulkActionButton",
      disabled: "Polaris-BulkActions--disabled",
      AllAction: "Polaris-BulkActions__AllAction"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Indicator/Indicator.css.js
var require_Indicator_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Indicator/Indicator.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Indicator: "Polaris-Indicator",
      pulseIndicator: "Polaris-Indicator--pulseIndicator"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Indicator/Indicator.js
var require_Indicator = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Indicator/Indicator.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Indicator_module = require_Indicator_css();
    function Indicator({
      pulse = !0
    }) {
      let className = css.classNames(Indicator_module.default.Indicator, pulse && Indicator_module.default.pulseIndicator);
      return /* @__PURE__ */ React2.createElement("span", {
        className
      });
    }
    exports.Indicator = Indicator;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/BulkActions/components/BulkActionButton/BulkActionButton.js
var require_BulkActionButton = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/BulkActions/components/BulkActionButton/BulkActionButton.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), useComponentDidMount = require_use_component_did_mount(), BulkActions_module = require_BulkActions_css(), Indicator = require_Indicator(), Tooltip = require_Tooltip(), Button4 = require_Button(), Icon2 = require_Icon();
    function BulkActionButton({
      handleMeasurement,
      url,
      external,
      onAction,
      content,
      disclosure,
      accessibilityLabel,
      disabled,
      destructive,
      indicator,
      showContentInButton,
      size
    }) {
      let bulkActionButton = React2.useRef(null);
      useComponentDidMount.useComponentDidMount(() => {
        if (handleMeasurement && bulkActionButton.current) {
          let width = bulkActionButton.current.getBoundingClientRect().width;
          handleMeasurement(width);
        }
      });
      let isActivatorForMoreActionsPopover = disclosure && !showContentInButton, buttonContent = isActivatorForMoreActionsPopover ? void 0 : content, buttonMarkup = /* @__PURE__ */ React2.createElement(Button4.Button, {
        external,
        url,
        accessibilityLabel: isActivatorForMoreActionsPopover ? content : accessibilityLabel,
        tone: destructive ? "critical" : void 0,
        disclosure: disclosure && showContentInButton,
        onClick: onAction,
        disabled,
        size,
        icon: isActivatorForMoreActionsPopover ? /* @__PURE__ */ React2.createElement(Icon2.Icon, {
          source: polarisIcons.MenuHorizontalIcon,
          tone: "base"
        }) : void 0
      }, buttonContent);
      return /* @__PURE__ */ React2.createElement("div", {
        className: BulkActions_module.default.BulkActionButton,
        ref: bulkActionButton
      }, isActivatorForMoreActionsPopover ? /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, {
        content,
        preferredPosition: "below"
      }, buttonMarkup) : buttonMarkup, indicator && /* @__PURE__ */ React2.createElement(Indicator.Indicator, null));
    }
    exports.BulkActionButton = BulkActionButton;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/BulkActions/components/BulkActionMenu/BulkActionMenu.js
var require_BulkActionMenu = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/BulkActions/components/BulkActionMenu/BulkActionMenu.js"(exports) {
    "use strict";
    var React2 = require_react(), useToggle = require_use_toggle(), BulkActionButton = require_BulkActionButton(), Popover = require_Popover(), ActionList = require_ActionList();
    function BulkActionMenu({
      title,
      actions,
      isNewBadgeInBadgeActions,
      size
    }) {
      let {
        value: isVisible,
        toggle: toggleMenuVisibility
      } = useToggle.useToggle(!1);
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(Popover.Popover, {
        active: isVisible,
        activator: /* @__PURE__ */ React2.createElement(BulkActionButton.BulkActionButton, {
          disclosure: !0,
          showContentInButton: !0,
          onAction: toggleMenuVisibility,
          content: title,
          indicator: isNewBadgeInBadgeActions,
          size
        }),
        onClose: toggleMenuVisibility,
        preferInputActivator: !0
      }, /* @__PURE__ */ React2.createElement(ActionList.ActionList, {
        items: actions,
        onActionAnyItem: toggleMenuVisibility
      })));
    }
    exports.BulkActionMenu = BulkActionMenu;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/CheckableButton/CheckableButton.css.js
var require_CheckableButton_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/CheckableButton/CheckableButton.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      CheckableButton: "Polaris-CheckableButton",
      Checkbox: "Polaris-CheckableButton__Checkbox",
      Label: "Polaris-CheckableButton__Label"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/CheckableButton/CheckableButton.js
var require_CheckableButton = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/CheckableButton/CheckableButton.js"(exports) {
    "use strict";
    var React2 = require_react(), CheckableButton_module = require_CheckableButton_css(), Checkbox = require_Checkbox(), Text4 = require_Text(), CheckableButton = /* @__PURE__ */ React2.forwardRef(function({
      accessibilityLabel,
      label = "",
      onToggleAll,
      selected,
      disabled,
      ariaLive
    }, ref) {
      let checkBoxRef = React2.useRef(null);
      function focus() {
        checkBoxRef?.current?.focus();
      }
      return React2.useImperativeHandle(ref, () => ({
        focus
      })), /* @__PURE__ */ React2.createElement("div", {
        className: CheckableButton_module.default.CheckableButton,
        onClick: onToggleAll
      }, /* @__PURE__ */ React2.createElement("div", {
        className: CheckableButton_module.default.Checkbox
      }, /* @__PURE__ */ React2.createElement(Checkbox.Checkbox, {
        label: accessibilityLabel,
        labelHidden: !0,
        checked: selected,
        disabled,
        onChange: onToggleAll,
        ref: checkBoxRef
      })), label ? /* @__PURE__ */ React2.createElement("span", {
        className: CheckableButton_module.default.Label,
        "aria-live": ariaLive
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "bodySm",
        fontWeight: "medium"
      }, label)) : null);
    });
    exports.CheckableButton = CheckableButton;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/BulkActions/components/BulkActionsMeasurer/BulkActionsMeasurer.js
var require_BulkActionsMeasurer = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/BulkActions/components/BulkActionsMeasurer/BulkActionsMeasurer.js"(exports) {
    "use strict";
    var React2 = require_react(), useEventListener = require_use_event_listener(), BulkActions_module = require_BulkActions_css(), utilities = require_utilities4(), hooks = require_hooks2(), BulkActionButton = require_BulkActionButton(), ACTION_SPACING = 4;
    function BulkActionsMeasurer({
      promotedActions = [],
      disabled,
      buttonSize,
      handleMeasurement: handleMeasurementProp
    }) {
      let i18n = hooks.useI18n(), containerNode = React2.useRef(null), activatorLabel = i18n.translate("Polaris.ResourceList.BulkActions.moreActionsActivatorLabel"), activator = /* @__PURE__ */ React2.createElement(BulkActionButton.BulkActionButton, {
        disclosure: !0,
        content: activatorLabel
      }), handleMeasurement = React2.useCallback(() => {
        if (!containerNode.current)
          return;
        let containerWidth = containerNode.current.offsetWidth, hiddenActionNodes = containerNode.current.children, hiddenActionsWidths = Array.from(hiddenActionNodes).map((node) => Math.ceil(node.getBoundingClientRect().width) + ACTION_SPACING), disclosureWidth = hiddenActionsWidths.pop() || 0;
        handleMeasurementProp({
          containerWidth,
          disclosureWidth,
          hiddenActionsWidths
        });
      }, [handleMeasurementProp]);
      React2.useEffect(() => {
        handleMeasurement();
      }, [handleMeasurement, promotedActions]);
      let promotedActionsMarkup = promotedActions.map((action8, index) => utilities.instanceOfMenuGroupDescriptor(action8) ? /* @__PURE__ */ React2.createElement(BulkActionButton.BulkActionButton, {
        key: index,
        disclosure: !0,
        showContentInButton: !0,
        content: action8.title,
        size: buttonSize
      }) : /* @__PURE__ */ React2.createElement(BulkActionButton.BulkActionButton, Object.assign({
        key: index,
        disabled
      }, action8, {
        size: buttonSize
      })));
      return useEventListener.useEventListener("resize", handleMeasurement), /* @__PURE__ */ React2.createElement("div", {
        className: BulkActions_module.default.BulkActionsMeasurerLayout,
        ref: containerNode
      }, promotedActionsMarkup, activator);
    }
    exports.BulkActionsMeasurer = BulkActionsMeasurer;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/BulkActions/BulkActions.js
var require_BulkActions = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/BulkActions/BulkActions.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), utilities = require_utilities4(), BulkActions_module = require_BulkActions_css(), BulkActionMenu = require_BulkActionMenu(), CheckableButton = require_CheckableButton(), BulkActionsMeasurer = require_BulkActionsMeasurer(), hooks = require_hooks2(), UnstyledButton = require_UnstyledButton(), Text4 = require_Text(), BulkActionButton = require_BulkActionButton(), Popover = require_Popover(), ActionList = require_ActionList(), InlineStack4 = require_InlineStack(), BulkActions = /* @__PURE__ */ React2.forwardRef(function({
      promotedActions,
      actions,
      disabled,
      buttonSize,
      paginatedSelectAllAction,
      paginatedSelectAllText,
      label,
      accessibilityLabel,
      selected,
      onToggleAll,
      onMoreActionPopoverToggle,
      width,
      selectMode
    }, ref) {
      let i18n = hooks.useI18n(), [popoverActive, setPopoverActive] = React2.useState(!1), [state, setState] = React2.useReducer((data, partialData) => ({
        ...data,
        ...partialData
      }), {
        disclosureWidth: 0,
        containerWidth: 1 / 0,
        actionsWidths: [],
        visiblePromotedActions: [],
        hiddenPromotedActions: [],
        hasMeasured: !1
      }), {
        visiblePromotedActions,
        hiddenPromotedActions,
        containerWidth,
        disclosureWidth,
        actionsWidths,
        hasMeasured
      } = state;
      React2.useEffect(() => {
        if (containerWidth === 0 || !promotedActions || promotedActions.length === 0)
          return;
        let {
          visiblePromotedActions: visiblePromotedActions2,
          hiddenPromotedActions: hiddenPromotedActions2
        } = utilities.getVisibleAndHiddenActionsIndices(promotedActions, disclosureWidth, actionsWidths, containerWidth);
        setState({
          visiblePromotedActions: visiblePromotedActions2,
          hiddenPromotedActions: hiddenPromotedActions2,
          hasMeasured: containerWidth !== 1 / 0
        });
      }, [containerWidth, disclosureWidth, promotedActions, actionsWidths]);
      let activatorLabel = !promotedActions || promotedActions && visiblePromotedActions.length === 0 ? i18n.translate("Polaris.ResourceList.BulkActions.actionsActivatorLabel") : i18n.translate("Polaris.ResourceList.BulkActions.moreActionsActivatorLabel"), paginatedSelectAllMarkup = paginatedSelectAllAction ? /* @__PURE__ */ React2.createElement(UnstyledButton.UnstyledButton, {
        className: BulkActions_module.default.AllAction,
        onClick: paginatedSelectAllAction.onAction,
        size: "slim",
        disabled
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "bodySm",
        fontWeight: "medium"
      }, paginatedSelectAllAction.content)) : null, hasTextAndAction = paginatedSelectAllText && paginatedSelectAllAction, checkableButtonProps = {
        accessibilityLabel,
        label: hasTextAndAction ? paginatedSelectAllText : label,
        selected,
        onToggleAll,
        disabled,
        ariaLive: hasTextAndAction ? "polite" : void 0,
        ref
      }, togglePopover = React2.useCallback(() => {
        onMoreActionPopoverToggle?.(popoverActive), setPopoverActive((popoverActive2) => !popoverActive2);
      }, [onMoreActionPopoverToggle, popoverActive]), handleMeasurement = React2.useCallback((measurements) => {
        let {
          hiddenActionsWidths: actionsWidths2,
          containerWidth: containerWidth2,
          disclosureWidth: disclosureWidth2
        } = measurements;
        if (!promotedActions || promotedActions.length === 0)
          return;
        let {
          visiblePromotedActions: visiblePromotedActions2,
          hiddenPromotedActions: hiddenPromotedActions2
        } = utilities.getVisibleAndHiddenActionsIndices(promotedActions, disclosureWidth2, actionsWidths2, containerWidth2);
        setState({
          visiblePromotedActions: visiblePromotedActions2,
          hiddenPromotedActions: hiddenPromotedActions2,
          actionsWidths: actionsWidths2,
          containerWidth: containerWidth2,
          disclosureWidth: disclosureWidth2,
          hasMeasured: !0
        });
      }, [promotedActions]), actionSections = utilities.getActionSections(actions), promotedActionsMarkup = promotedActions ? promotedActions.filter((_, index) => !!visiblePromotedActions.includes(index)).map((action8, index) => utilities.instanceOfMenuGroupDescriptor(action8) ? /* @__PURE__ */ React2.createElement(BulkActionMenu.BulkActionMenu, Object.assign({
        key: index
      }, action8, {
        isNewBadgeInBadgeActions: utilities.isNewBadgeInBadgeActions(actionSections),
        size: buttonSize
      })) : /* @__PURE__ */ React2.createElement(BulkActionButton.BulkActionButton, Object.assign({
        key: index,
        disabled
      }, action8, {
        size: buttonSize
      }))) : null, hiddenPromotedSection = {
        items: hiddenPromotedActions.map((index) => promotedActions?.[index]).reduce((memo, action8) => action8 ? utilities.instanceOfMenuGroupDescriptor(action8) ? memo.concat(action8.actions) : memo.concat(action8) : memo, [])
      }, allHiddenActions = React2.useMemo(() => {
        if (actionSections)
          return actionSections;
        if (!actions)
          return [];
        let isAFlatArray = !0;
        return actions.filter((action8) => action8).reduce((memo, action8) => {
          if (utilities.instanceOfBulkActionListSection(action8))
            return isAFlatArray = !1, memo.concat(action8);
          if (isAFlatArray) {
            if (memo.length === 0)
              return [{
                items: [action8]
              }];
            let lastItem = memo[memo.length - 1];
            return memo.splice(memo.length - 1, 1, {
              items: [...lastItem.items, action8]
            }), memo;
          }
          return isAFlatArray = !0, memo.concat({
            items: [action8]
          });
        }, []);
      }, [actions, actionSections]), activator = /* @__PURE__ */ React2.createElement(BulkActionButton.BulkActionButton, {
        disclosure: !0,
        showContentInButton: !promotedActionsMarkup,
        onAction: togglePopover,
        content: activatorLabel,
        disabled,
        indicator: utilities.isNewBadgeInBadgeActions(actionSections),
        size: buttonSize
      }), actionsMarkup = allHiddenActions.length > 0 ? /* @__PURE__ */ React2.createElement(Popover.Popover, {
        active: popoverActive,
        activator,
        preferredAlignment: "right",
        onClose: togglePopover
      }, /* @__PURE__ */ React2.createElement(ActionList.ActionList, {
        sections: hiddenPromotedSection.items.length > 0 ? [hiddenPromotedSection, ...allHiddenActions] : allHiddenActions,
        onActionAnyItem: togglePopover
      })) : null, measurerMarkup = /* @__PURE__ */ React2.createElement(BulkActionsMeasurer.BulkActionsMeasurer, {
        promotedActions,
        disabled,
        buttonSize,
        handleMeasurement
      });
      return /* @__PURE__ */ React2.createElement("div", {
        className: BulkActions_module.default.BulkActions,
        style: width ? {
          width
        } : void 0
      }, /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        gap: "400",
        blockAlign: "center"
      }, /* @__PURE__ */ React2.createElement("div", {
        className: BulkActions_module.default.BulkActionsSelectAllWrapper
      }, /* @__PURE__ */ React2.createElement(CheckableButton.CheckableButton, checkableButtonProps), paginatedSelectAllMarkup), selectMode ? /* @__PURE__ */ React2.createElement("div", {
        className: BulkActions_module.default.BulkActionsPromotedActionsWrapper
      }, /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        gap: "100",
        blockAlign: "center"
      }, /* @__PURE__ */ React2.createElement("div", {
        className: BulkActions_module.default.BulkActionsOuterLayout
      }, measurerMarkup, /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(BulkActions_module.default.BulkActionsLayout, !hasMeasured && BulkActions_module.default["BulkActionsLayout--measuring"])
      }, promotedActionsMarkup)), actionsMarkup)) : null));
    });
    exports.BulkActions = BulkActions;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/CalloutCard/CalloutCard.css.js
var require_CalloutCard_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/CalloutCard/CalloutCard.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      CalloutCard: "Polaris-CalloutCard",
      Image: "Polaris-CalloutCard__Image",
      DismissImage: "Polaris-CalloutCard__DismissImage",
      Content: "Polaris-CalloutCard__Content",
      Title: "Polaris-CalloutCard__Title",
      Buttons: "Polaris-CalloutCard__Buttons",
      Container: "Polaris-CalloutCard__Container",
      Dismiss: "Polaris-CalloutCard__Dismiss",
      hasDismiss: "Polaris-CalloutCard--hasDismiss"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyCard/LegacyCard.css.js
var require_LegacyCard_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyCard/LegacyCard.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      LegacyCard: "Polaris-LegacyCard",
      Section: "Polaris-LegacyCard__Section",
      subdued: "Polaris-LegacyCard--subdued",
      "Section-hideOnPrint": "Polaris-LegacyCard__Section--hideOnPrint",
      hideOnPrint: "Polaris-LegacyCard--hideOnPrint",
      Header: "Polaris-LegacyCard__Header",
      "Section-fullWidth": "Polaris-LegacyCard__Section--fullWidth",
      "Section-flush": "Polaris-LegacyCard__Section--flush",
      "Section-subdued": "Polaris-LegacyCard__Section--subdued",
      SectionHeader: "Polaris-LegacyCard__SectionHeader",
      Subsection: "Polaris-LegacyCard__Subsection",
      Footer: "Polaris-LegacyCard__Footer",
      LeftJustified: "Polaris-LegacyCard__LeftJustified",
      FirstSectionPadding: "Polaris-LegacyCard__FirstSectionPadding",
      LastSectionPadding: "Polaris-LegacyCard__LastSectionPadding"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyCard/components/Header/Header.js
var require_Header2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyCard/components/Header/Header.js"(exports) {
    "use strict";
    var React2 = require_react(), LegacyCard_module = require_LegacyCard_css(), utils = require_utils(), ButtonGroup = require_ButtonGroup(), InlineStack4 = require_InlineStack(), Text4 = require_Text();
    function Header({
      children,
      title,
      actions
    }) {
      let actionMarkup = actions ? /* @__PURE__ */ React2.createElement(ButtonGroup.ButtonGroup, null, utils.buttonsFrom(actions, {
        variant: "plain"
      })) : null, titleMarkup = /* @__PURE__ */ React2.isValidElement(title) ? title : /* @__PURE__ */ React2.createElement(Text4.Text, {
        variant: "headingSm",
        as: "h2"
      }, title), headingMarkup = actionMarkup || children ? /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        wrap: !1,
        gap: "200",
        align: "space-between",
        blockAlign: "center"
      }, titleMarkup, /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        wrap: !1,
        gap: "400",
        blockAlign: "center"
      }, actionMarkup, children)) : titleMarkup;
      return /* @__PURE__ */ React2.createElement("div", {
        className: LegacyCard_module.default.Header
      }, headingMarkup);
    }
    exports.Header = Header;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyStack/LegacyStack.css.js
var require_LegacyStack_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyStack/LegacyStack.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      LegacyStack: "Polaris-LegacyStack",
      Item: "Polaris-LegacyStack__Item",
      noWrap: "Polaris-LegacyStack--noWrap",
      spacingNone: "Polaris-LegacyStack--spacingNone",
      spacingExtraTight: "Polaris-LegacyStack--spacingExtraTight",
      spacingTight: "Polaris-LegacyStack--spacingTight",
      spacingBaseTight: "Polaris-LegacyStack--spacingBaseTight",
      spacingLoose: "Polaris-LegacyStack--spacingLoose",
      spacingExtraLoose: "Polaris-LegacyStack--spacingExtraLoose",
      distributionLeading: "Polaris-LegacyStack--distributionLeading",
      distributionTrailing: "Polaris-LegacyStack--distributionTrailing",
      distributionCenter: "Polaris-LegacyStack--distributionCenter",
      distributionEqualSpacing: "Polaris-LegacyStack--distributionEqualSpacing",
      distributionFill: "Polaris-LegacyStack--distributionFill",
      distributionFillEvenly: "Polaris-LegacyStack--distributionFillEvenly",
      alignmentLeading: "Polaris-LegacyStack--alignmentLeading",
      alignmentTrailing: "Polaris-LegacyStack--alignmentTrailing",
      alignmentCenter: "Polaris-LegacyStack--alignmentCenter",
      alignmentFill: "Polaris-LegacyStack--alignmentFill",
      alignmentBaseline: "Polaris-LegacyStack--alignmentBaseline",
      vertical: "Polaris-LegacyStack--vertical",
      "Item-fill": "Polaris-LegacyStack__Item--fill"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyStack/components/Item/Item.js
var require_Item4 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyStack/components/Item/Item.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), LegacyStack_module = require_LegacyStack_css();
    function Item({
      children,
      fill
    }) {
      let className = css.classNames(LegacyStack_module.default.Item, fill && LegacyStack_module.default["Item-fill"]);
      return /* @__PURE__ */ React2.createElement("div", {
        className
      }, children);
    }
    exports.Item = Item;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyStack/LegacyStack.js
var require_LegacyStack = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyStack/LegacyStack.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), components = require_components(), LegacyStack_module = require_LegacyStack_css(), Item = require_Item4(), LegacyStack = /* @__PURE__ */ React2.memo(function({
      children,
      vertical,
      spacing,
      distribution,
      alignment,
      wrap
    }) {
      let className = css.classNames(LegacyStack_module.default.LegacyStack, vertical && LegacyStack_module.default.vertical, spacing && LegacyStack_module.default[css.variationName("spacing", spacing)], distribution && LegacyStack_module.default[css.variationName("distribution", distribution)], alignment && LegacyStack_module.default[css.variationName("alignment", alignment)], wrap === !1 && LegacyStack_module.default.noWrap), itemMarkup = components.elementChildren(children).map((child, index) => {
        let props = {
          key: index
        };
        return components.wrapWithComponent(child, Item.Item, props);
      });
      return /* @__PURE__ */ React2.createElement("div", {
        className
      }, itemMarkup);
    });
    LegacyStack.Item = Item.Item;
    exports.LegacyStack = LegacyStack;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyCard/components/Section/Section.js
var require_Section4 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyCard/components/Section/Section.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), LegacyCard_module = require_LegacyCard_css(), LegacyStack = require_LegacyStack(), ButtonGroup = require_ButtonGroup(), utils = require_utils(), Text4 = require_Text();
    function Section({
      children,
      title,
      subdued,
      flush,
      fullWidth,
      actions,
      hideOnPrint
    }) {
      let className = css.classNames(LegacyCard_module.default.Section, flush && LegacyCard_module.default["Section-flush"], subdued && LegacyCard_module.default["Section-subdued"], fullWidth && LegacyCard_module.default["Section-fullWidth"], hideOnPrint && LegacyCard_module.default["Section-hideOnPrint"]), actionMarkup = actions ? /* @__PURE__ */ React2.createElement(ButtonGroup.ButtonGroup, null, utils.buttonsFrom(actions, {
        variant: "plain"
      })) : null, titleMarkup = typeof title == "string" ? /* @__PURE__ */ React2.createElement(Text4.Text, {
        variant: "headingSm",
        as: "h3",
        fontWeight: "medium"
      }, title) : title, titleAreaMarkup = titleMarkup || actionMarkup ? /* @__PURE__ */ React2.createElement("div", {
        className: LegacyCard_module.default.SectionHeader
      }, actionMarkup ? /* @__PURE__ */ React2.createElement(LegacyStack.LegacyStack, {
        alignment: "baseline"
      }, /* @__PURE__ */ React2.createElement(LegacyStack.LegacyStack.Item, {
        fill: !0
      }, titleMarkup), actionMarkup) : titleMarkup) : null;
      return /* @__PURE__ */ React2.createElement("div", {
        className
      }, titleAreaMarkup, children);
    }
    exports.Section = Section;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyCard/components/Subsection/Subsection.js
var require_Subsection = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyCard/components/Subsection/Subsection.js"(exports) {
    "use strict";
    var React2 = require_react(), LegacyCard_module = require_LegacyCard_css();
    function Subsection({
      children
    }) {
      return /* @__PURE__ */ React2.createElement("div", {
        className: LegacyCard_module.default.Subsection
      }, children);
    }
    exports.Subsection = Subsection;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyCard/LegacyCard.js
var require_LegacyCard = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyCard/LegacyCard.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), useToggle = require_use_toggle(), withinContentContext = require_within_content_context(), LegacyCard_module = require_LegacyCard_css(), Header = require_Header2(), Section = require_Section4(), Subsection = require_Subsection(), hooks = require_hooks2(), utils = require_utils(), Popover = require_Popover(), Button4 = require_Button(), ActionList = require_ActionList(), ButtonGroup = require_ButtonGroup(), LegacyCard = function({
      children,
      hideOnPrint,
      title,
      subdued,
      sectioned,
      actions,
      primaryFooterAction,
      secondaryFooterActions,
      secondaryFooterActionsDisclosureText,
      footerActionAlignment = "right"
    }) {
      let i18n = hooks.useI18n(), {
        value: secondaryActionsPopoverOpen,
        toggle: toggleSecondaryActionsPopoverOpen
      } = useToggle.useToggle(!1), legacyCard = useLegacyCardPaddingObserverRef(), className = css.classNames(LegacyCard_module.default.LegacyCard, subdued && LegacyCard_module.default.subdued, hideOnPrint && LegacyCard_module.default.hideOnPrint), headerMarkup = title || actions ? /* @__PURE__ */ React2.createElement(Header.Header, {
        actions,
        title
      }) : null, content = sectioned ? /* @__PURE__ */ React2.createElement(Section.Section, null, children) : children, primaryFooterActionMarkup = primaryFooterAction ? utils.buttonFrom(primaryFooterAction, {
        variant: "primary"
      }) : null, secondaryFooterActionsMarkup = null;
      secondaryFooterActions && secondaryFooterActions.length && (secondaryFooterActions.length === 1 ? secondaryFooterActionsMarkup = utils.buttonFrom(secondaryFooterActions[0]) : secondaryFooterActionsMarkup = /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(Popover.Popover, {
        active: secondaryActionsPopoverOpen,
        activator: /* @__PURE__ */ React2.createElement(Button4.Button, {
          disclosure: !0,
          onClick: toggleSecondaryActionsPopoverOpen
        }, secondaryFooterActionsDisclosureText || i18n.translate("Polaris.Common.more")),
        onClose: toggleSecondaryActionsPopoverOpen
      }, /* @__PURE__ */ React2.createElement(ActionList.ActionList, {
        items: secondaryFooterActions
      }))));
      let footerMarkup = primaryFooterActionMarkup || secondaryFooterActionsMarkup ? /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(LegacyCard_module.default.Footer, footerActionAlignment === "left" && LegacyCard_module.default.LeftJustified)
      }, footerActionAlignment === "right" ? /* @__PURE__ */ React2.createElement(ButtonGroup.ButtonGroup, null, secondaryFooterActionsMarkup, primaryFooterActionMarkup) : /* @__PURE__ */ React2.createElement(ButtonGroup.ButtonGroup, null, primaryFooterActionMarkup, secondaryFooterActionsMarkup)) : null;
      return /* @__PURE__ */ React2.createElement(withinContentContext.WithinContentContext.Provider, {
        value: !0
      }, /* @__PURE__ */ React2.createElement("div", {
        className,
        ref: legacyCard
      }, headerMarkup, content, footerMarkup));
    };
    LegacyCard.Header = Header.Header;
    LegacyCard.Section = Section.Section;
    LegacyCard.Subsection = Subsection.Subsection;
    function useLegacyCardPaddingObserverRef() {
      let legacyCard = React2.useRef(null);
      return React2.useEffect(() => {
        let legacyCardNode = legacyCard.current, firstSection, lastSection;
        if (legacyCardNode) {
          let updateFirstAndLastSectionPadding = () => {
            updatePadding(firstSection, "top", !1), updatePadding(lastSection, "bottom", !1);
            let currentElements = legacyCardNode.querySelectorAll(`.${LegacyCard_module.default.Section}, .${LegacyCard_module.default.Header}, .${LegacyCard_module.default.Footer}`);
            if (!currentElements?.length)
              return;
            let firstElement = currentElements[0], lastElement = getMostSeniorLastElement(currentElements);
            legacyCardNode.firstChild?.contains(firstElement) && (firstSection = firstElement, updatePadding(firstSection, "top", !0)), legacyCardNode.lastChild?.contains(lastElement) && (lastSection = lastElement, updatePadding(lastSection, "bottom", !0));
          };
          updateFirstAndLastSectionPadding();
          let observer = new MutationObserver(updateFirstAndLastSectionPadding);
          return observer.observe(legacyCardNode, {
            childList: !0,
            subtree: !0
          }), () => {
            updatePadding(firstSection, "top", !1), updatePadding(lastSection, "bottom", !1), observer.disconnect();
          };
        }
      }, []), legacyCard;
    }
    function updatePadding(element, area, add) {
      if (!(!element || element.className.includes(LegacyCard_module.default["Section-flush"])))
        switch (area) {
          case "top":
            element.classList.toggle(LegacyCard_module.default.FirstSectionPadding, add);
            return;
          case "bottom":
            element.classList.toggle(LegacyCard_module.default.LastSectionPadding, add);
        }
    }
    function getMostSeniorLastElement(elements) {
      let lastElement = elements[0];
      return elements.forEach((element) => {
        lastElement.contains(element) || (lastElement = element);
      }), lastElement;
    }
    exports.LegacyCard = LegacyCard;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/CalloutCard/CalloutCard.js
var require_CalloutCard = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/CalloutCard/CalloutCard.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), CalloutCard_module = require_CalloutCard_css(), LegacyCard = require_LegacyCard(), utils = require_utils(), Button4 = require_Button(), Text4 = require_Text(), BlockStack4 = require_BlockStack(), Image = require_Image(), ButtonGroup = require_ButtonGroup();
    function CalloutCard({
      title,
      children,
      illustration,
      primaryAction,
      secondaryAction,
      onDismiss
    }) {
      let primaryActionMarkup = utils.buttonFrom(primaryAction), secondaryActionMarkup = secondaryAction ? utils.buttonFrom(secondaryAction, {
        variant: secondaryAction.variant ?? "tertiary"
      }) : null, buttonMarkup = secondaryActionMarkup ? /* @__PURE__ */ React2.createElement(ButtonGroup.ButtonGroup, null, primaryActionMarkup, secondaryActionMarkup) : primaryActionMarkup, dismissButton = onDismiss ? /* @__PURE__ */ React2.createElement("div", {
        className: CalloutCard_module.default.Dismiss
      }, /* @__PURE__ */ React2.createElement(Button4.Button, {
        variant: "plain",
        icon: polarisIcons.XSmallIcon,
        onClick: onDismiss,
        accessibilityLabel: "Dismiss card"
      })) : null, imageClassName = css.classNames(CalloutCard_module.default.Image, onDismiss && CalloutCard_module.default.DismissImage), containerClassName = css.classNames(CalloutCard_module.default.Container, onDismiss && CalloutCard_module.default.hasDismiss);
      return /* @__PURE__ */ React2.createElement(LegacyCard.LegacyCard, null, /* @__PURE__ */ React2.createElement("div", {
        className: containerClassName
      }, dismissButton, /* @__PURE__ */ React2.createElement(LegacyCard.LegacyCard.Section, null, /* @__PURE__ */ React2.createElement("div", {
        className: CalloutCard_module.default.CalloutCard
      }, /* @__PURE__ */ React2.createElement("div", {
        className: CalloutCard_module.default.Content
      }, /* @__PURE__ */ React2.createElement("div", {
        className: CalloutCard_module.default.Title
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        variant: "headingSm",
        as: "h2"
      }, title)), /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "bodyMd"
      }, /* @__PURE__ */ React2.createElement(BlockStack4.BlockStack, null, children)), /* @__PURE__ */ React2.createElement("div", {
        className: CalloutCard_module.default.Buttons
      }, buttonMarkup)), /* @__PURE__ */ React2.createElement(Image.Image, {
        alt: "",
        className: imageClassName,
        source: illustration
      })))));
    }
    exports.CalloutCard = CalloutCard;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ChoiceList/ChoiceList.css.js
var require_ChoiceList_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ChoiceList/ChoiceList.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ChoiceChildren: "Polaris-ChoiceList__ChoiceChildren"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/RadioButton/RadioButton.css.js
var require_RadioButton_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/RadioButton/RadioButton.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      RadioButton: "Polaris-RadioButton",
      Input: "Polaris-RadioButton__Input",
      Backdrop: "Polaris-RadioButton__Backdrop",
      ChoiceLabel: "Polaris-RadioButton__ChoiceLabel",
      toneMagic: "Polaris-RadioButton--toneMagic"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/RadioButton/RadioButton.js
var require_RadioButton = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/RadioButton/RadioButton.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), RadioButton_module = require_RadioButton_css(), Choice = require_Choice();
    function RadioButton({
      ariaDescribedBy: ariaDescribedByProp,
      label,
      labelHidden,
      helpText,
      checked,
      disabled,
      onChange,
      onFocus,
      onBlur,
      id: idProp,
      name: nameProp,
      value,
      fill,
      bleed,
      bleedBlockStart,
      bleedBlockEnd,
      bleedInlineStart,
      bleedInlineEnd,
      tone
    }) {
      let uniqId = React2.useId(), id = idProp ?? uniqId, name = nameProp || id, inputNode = React2.useRef(null), handleBlur = () => {
        onBlur && onBlur();
      };
      function handleChange({
        currentTarget
      }) {
        onChange && onChange(currentTarget.checked, id);
      }
      let describedBy = [];
      helpText && describedBy.push(Choice.helpTextID(id)), ariaDescribedByProp && describedBy.push(ariaDescribedByProp);
      let ariaDescribedBy = describedBy.length ? describedBy.join(" ") : void 0, inputClassName = css.classNames(RadioButton_module.default.Input, tone && RadioButton_module.default[css.variationName("tone", tone)]), extraChoiceProps = {
        helpText,
        bleed,
        bleedBlockStart,
        bleedBlockEnd,
        bleedInlineStart,
        bleedInlineEnd
      };
      return /* @__PURE__ */ React2.createElement(Choice.Choice, Object.assign({
        label,
        labelHidden,
        disabled,
        id,
        labelClassName: RadioButton_module.default.ChoiceLabel,
        fill
      }, extraChoiceProps, checked ? {
        tone
      } : {}), /* @__PURE__ */ React2.createElement("span", {
        className: RadioButton_module.default.RadioButton
      }, /* @__PURE__ */ React2.createElement("input", {
        id,
        name,
        value,
        type: "radio",
        checked,
        disabled,
        className: inputClassName,
        onChange: handleChange,
        onFocus,
        onBlur: handleBlur,
        "aria-describedby": ariaDescribedBy,
        ref: inputNode
      }), /* @__PURE__ */ React2.createElement("span", {
        className: RadioButton_module.default.Backdrop
      })));
    }
    exports.RadioButton = RadioButton;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ChoiceList/ChoiceList.js
var require_ChoiceList = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ChoiceList/ChoiceList.js"(exports) {
    "use strict";
    var React2 = require_react(), ChoiceList_module = require_ChoiceList_css(), Bleed = require_Bleed(), RadioButton = require_RadioButton(), Box4 = require_Box(), InlineError = require_InlineError(), BlockStack4 = require_BlockStack(), Checkbox = require_Checkbox(), Text4 = require_Text();
    function ChoiceList({
      title,
      titleHidden,
      allowMultiple,
      choices,
      selected,
      onChange = noop,
      error,
      disabled = !1,
      name: nameProp,
      tone
    }) {
      let ControlComponent = allowMultiple ? Checkbox.Checkbox : RadioButton.RadioButton, uniqName = React2.useId(), name = nameProp ?? uniqName, finalName = allowMultiple ? `${name}[]` : name, titleMarkup = title ? /* @__PURE__ */ React2.createElement(Box4.Box, {
        as: "legend",
        paddingBlockEnd: {
          xs: "0",
          md: "100"
        }
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "bodyMd",
        visuallyHidden: titleHidden
      }, title)) : null, choicesMarkup = choices.map((choice) => {
        let {
          value,
          id,
          label,
          helpText,
          disabled: choiceDisabled,
          describedByError
        } = choice;
        function handleChange(checked) {
          onChange(updateSelectedChoices(choice, checked, selected, allowMultiple), name);
        }
        let isSelected = choiceIsSelected(choice, selected), renderedChildren = choice.renderChildren ? choice.renderChildren(isSelected) : null, children = renderedChildren ? /* @__PURE__ */ React2.createElement("div", {
          className: ChoiceList_module.default.ChoiceChildren
        }, /* @__PURE__ */ React2.createElement(Box4.Box, {
          paddingBlockStart: {
            xs: "400",
            md: "0"
          }
        }, renderedChildren)) : null;
        return /* @__PURE__ */ React2.createElement("li", {
          key: value
        }, /* @__PURE__ */ React2.createElement(Bleed.Bleed, {
          marginBlockEnd: helpText ? {
            xs: "100",
            md: "0"
          } : {
            xs: "0"
          }
        }, /* @__PURE__ */ React2.createElement(ControlComponent, {
          name: finalName,
          value,
          id,
          label,
          disabled: choiceDisabled || disabled,
          fill: {
            xs: !0,
            sm: !1
          },
          checked: choiceIsSelected(choice, selected),
          helpText,
          onChange: handleChange,
          ariaDescribedBy: error && describedByError ? InlineError.errorTextID(finalName) : null,
          tone
        }), children));
      }), errorMarkup = error && /* @__PURE__ */ React2.createElement(Box4.Box, {
        paddingBlockStart: {
          xs: "0",
          md: "100"
        },
        paddingBlockEnd: "200"
      }, /* @__PURE__ */ React2.createElement(InlineError.InlineError, {
        message: error,
        fieldID: finalName
      }));
      return /* @__PURE__ */ React2.createElement(BlockStack4.BlockStack, {
        as: "fieldset",
        gap: {
          xs: "400",
          md: "0"
        },
        "aria-invalid": error != null,
        id: finalName
      }, titleMarkup, /* @__PURE__ */ React2.createElement(BlockStack4.BlockStack, {
        as: "ul",
        gap: {
          xs: "400",
          md: "0"
        }
      }, choicesMarkup), errorMarkup);
    }
    function noop() {
    }
    function choiceIsSelected({
      value
    }, selected) {
      return selected.includes(value);
    }
    function updateSelectedChoices({
      value
    }, checked, selected, allowMultiple = !1) {
      return checked ? allowMultiple ? [...selected, value] : [value] : selected.filter((selectedChoice) => selectedChoice !== value);
    }
    exports.ChoiceList = ChoiceList;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Collapsible/Collapsible.css.js
var require_Collapsible_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Collapsible/Collapsible.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Collapsible: "Polaris-Collapsible",
      isFullyClosed: "Polaris-Collapsible--isFullyClosed",
      expandOnPrint: "Polaris-Collapsible--expandOnPrint"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Collapsible/Collapsible.js
var require_Collapsible = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Collapsible/Collapsible.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Collapsible_module = require_Collapsible_css();
    function Collapsible2({
      id,
      expandOnPrint,
      open,
      transition = !0,
      children,
      onAnimationEnd
    }) {
      let [height, setHeight] = React2.useState(0), [isOpen, setIsOpen] = React2.useState(open), [animationState, setAnimationState] = React2.useState("idle"), collapsibleContainer = React2.useRef(null), isFullyOpen = animationState === "idle" && open && isOpen, isFullyClosed = animationState === "idle" && !open && !isOpen, content = expandOnPrint || !isFullyClosed ? children : null, wrapperClassName = css.classNames(Collapsible_module.default.Collapsible, isFullyClosed && Collapsible_module.default.isFullyClosed, expandOnPrint && Collapsible_module.default.expandOnPrint), transitionDisabled = isTransitionDisabled(transition), collapsibleStyles = {
        ...typeof transition == "object" && {
          transitionDuration: transition.duration,
          transitionTimingFunction: transition.timingFunction
        },
        maxHeight: isFullyOpen ? "none" : `${height}px`,
        overflow: isFullyOpen ? "visible" : "hidden"
      }, handleCompleteAnimation = React2.useCallback(({
        target
      }) => {
        target === collapsibleContainer.current && (setAnimationState("idle"), setIsOpen(open), onAnimationEnd && onAnimationEnd());
      }, [onAnimationEnd, open]), startAnimation = React2.useCallback(() => {
        transitionDisabled ? (setIsOpen(open), setAnimationState("idle"), open && collapsibleContainer.current ? setHeight(collapsibleContainer.current.scrollHeight) : setHeight(0)) : setAnimationState("measuring");
      }, [open, transitionDisabled]);
      return React2.useEffect(() => {
        open !== isOpen && startAnimation();
      }, [open, isOpen]), React2.useEffect(() => {
        !open || !collapsibleContainer.current || setHeight(collapsibleContainer.current.scrollHeight);
      }, []), React2.useEffect(() => {
        if (collapsibleContainer.current)
          switch (animationState) {
            case "idle":
              break;
            case "measuring":
              setHeight(collapsibleContainer.current.scrollHeight), setAnimationState("animating");
              break;
            case "animating":
              setHeight(open ? collapsibleContainer.current.scrollHeight : 0);
          }
      }, [animationState, open, isOpen]), /* @__PURE__ */ React2.createElement("div", {
        id,
        style: collapsibleStyles,
        ref: collapsibleContainer,
        className: wrapperClassName,
        onTransitionEnd: handleCompleteAnimation,
        "aria-hidden": !open
      }, content);
    }
    var zeroDurationRegex = /^0(ms|s)$/;
    function isTransitionDisabled(transitionProp) {
      if (typeof transitionProp == "boolean")
        return !transitionProp;
      let {
        duration
      } = transitionProp;
      return !!(duration && zeroDurationRegex.test(duration.trim()));
    }
    exports.Collapsible = Collapsible2;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ColorPicker/ColorPicker.css.js
var require_ColorPicker_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ColorPicker/ColorPicker.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ColorPicker: "Polaris-ColorPicker",
      MainColor: "Polaris-ColorPicker__MainColor",
      fullWidth: "Polaris-ColorPicker--fullWidth",
      Dragger: "Polaris-ColorPicker__Dragger",
      ColorLayer: "Polaris-ColorPicker__ColorLayer",
      HuePicker: "Polaris-ColorPicker__HuePicker",
      AlphaPicker: "Polaris-ColorPicker__AlphaPicker",
      Slidable: "Polaris-ColorPicker__Slidable"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ColorPicker/components/AlphaPicker/utilities.js
var require_utilities5 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ColorPicker/components/AlphaPicker/utilities.js"(exports) {
    "use strict";
    var clamp = require_clamp(), VERTICAL_PADDING = 13;
    function calculateDraggerY(alpha, sliderHeight, draggerHeight) {
      let offset = offsetForAlpha(alpha, sliderHeight, draggerHeight);
      return clamp.clamp(offset, 0, sliderHeight);
    }
    function alphaForDraggerY(y, sliderHeight) {
      let offsetY = clamp.clamp(y, 0, sliderHeight);
      return alphaForOffset(offsetY, sliderHeight);
    }
    function alphaForOffset(offset, sliderHeight) {
      let selectionHeight = offset - VERTICAL_PADDING, slidableArea = sliderHeight - VERTICAL_PADDING * 2;
      return clamp.clamp(1 - selectionHeight / slidableArea, 0, 1);
    }
    function offsetForAlpha(alpha, sliderHeight, draggerHeight) {
      let slidableArea = sliderHeight - (draggerHeight + VERTICAL_PADDING);
      return clamp.clamp((1 - alpha) * slidableArea + VERTICAL_PADDING, 0, sliderHeight - draggerHeight);
    }
    exports.alphaForDraggerY = alphaForDraggerY;
    exports.alphaForOffset = alphaForOffset;
    exports.calculateDraggerY = calculateDraggerY;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ColorPicker/components/Slidable/Slidable.js
var require_Slidable = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ColorPicker/components/Slidable/Slidable.js"(exports) {
    "use strict";
    var React2 = require_react(), target = require_target(), ColorPicker_module = require_ColorPicker_css(), EventListener = require_EventListener(), isDragging = !1;
    target.isServer || window.addEventListener("touchmove", (event) => {
      isDragging && event.preventDefault();
    }, {
      passive: !1
    });
    var Slidable = class extends React2.PureComponent {
      constructor(...args) {
        super(...args), this.state = {
          dragging: !1
        }, this.node = null, this.draggerNode = null, this.setDraggerNode = (node) => {
          this.draggerNode = node;
        }, this.setNode = (node) => {
          this.node = node;
        }, this.startDrag = (event) => {
          isMouseDownEvent(event) && this.handleDraggerMove(event.clientX, event.clientY), isDragging = !0, this.setState({
            dragging: !0
          });
        }, this.handleDragEnd = () => {
          isDragging = !1, this.setState({
            dragging: !1
          });
        }, this.handleMove = (event) => {
          if (event.stopImmediatePropagation(), event.stopPropagation(), event.cancelable && event.preventDefault(), isMouseMoveEvent(event)) {
            this.handleDraggerMove(event.clientX, event.clientY);
            return;
          }
          this.handleDraggerMove(event.touches[0].clientX, event.touches[0].clientY);
        }, this.handleDraggerMove = (x, y) => {
          if (this.node == null)
            return;
          let {
            onChange
          } = this.props, rect = this.node.getBoundingClientRect(), offsetX = x - rect.left, offsetY = y - rect.top;
          onChange({
            x: offsetX,
            y: offsetY
          });
        };
      }
      componentDidMount() {
        let {
          onDraggerHeight
        } = this.props;
        if (onDraggerHeight == null)
          return;
        let {
          draggerNode
        } = this;
        draggerNode != null && onDraggerHeight(draggerNode.clientWidth);
      }
      render() {
        let {
          dragging
        } = this.state, {
          draggerX = 0,
          draggerY = 0
        } = this.props, draggerPositioning = {
          transform: `translate3d(${draggerX}px, ${draggerY}px, 0)`
        }, moveListener = dragging ? /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
          event: "mousemove",
          handler: this.handleMove,
          passive: !1
        }) : null, touchMoveListener = dragging ? /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
          event: "touchmove",
          handler: this.handleMove,
          passive: !1
        }) : null, endDragListener = dragging ? /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
          event: "mouseup",
          handler: this.handleDragEnd
        }) : null, touchEndListener = dragging ? /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
          event: "touchend",
          handler: this.handleDragEnd
        }) : null, touchCancelListener = dragging ? /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
          event: "touchcancel",
          handler: this.handleDragEnd
        }) : null;
        return /* @__PURE__ */ React2.createElement("div", {
          ref: this.setNode,
          className: ColorPicker_module.default.Slidable,
          onMouseDown: this.startDrag,
          onTouchStart: this.startDrag
        }, endDragListener, moveListener, touchMoveListener, touchEndListener, touchCancelListener, /* @__PURE__ */ React2.createElement("div", {
          style: draggerPositioning,
          className: ColorPicker_module.default.Dragger,
          ref: this.setDraggerNode
        }));
      }
    };
    function isMouseMoveEvent(event) {
      return event.type === "mousemove";
    }
    function isMouseDownEvent(event) {
      return event.type === "mousedown";
    }
    exports.Slidable = Slidable;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ColorPicker/components/AlphaPicker/AlphaPicker.js
var require_AlphaPicker = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ColorPicker/components/AlphaPicker/AlphaPicker.js"(exports) {
    "use strict";
    var React2 = require_react(), colorTransformers = require_color_transformers(), ColorPicker_module = require_ColorPicker_css(), utilities = require_utilities5(), Slidable = require_Slidable(), AlphaPicker = class extends React2.PureComponent {
      constructor(...args) {
        super(...args), this.state = {
          sliderHeight: 0,
          draggerHeight: 0
        }, this.setSliderHeight = (node) => {
          node != null && this.setState({
            sliderHeight: node.clientHeight
          });
        }, this.setDraggerHeight = (height) => {
          this.setState({
            draggerHeight: height
          });
        }, this.handleChange = ({
          y
        }) => {
          let {
            onChange
          } = this.props, {
            sliderHeight
          } = this.state, alpha = utilities.alphaForDraggerY(y, sliderHeight);
          onChange(alpha);
        };
      }
      render() {
        let {
          color,
          alpha
        } = this.props, {
          sliderHeight,
          draggerHeight
        } = this.state, draggerY = utilities.calculateDraggerY(alpha, sliderHeight, draggerHeight), background = alphaGradientForColor(color);
        return /* @__PURE__ */ React2.createElement("div", {
          className: ColorPicker_module.default.AlphaPicker,
          ref: this.setSliderHeight
        }, /* @__PURE__ */ React2.createElement("div", {
          className: ColorPicker_module.default.ColorLayer,
          style: {
            background
          }
        }), /* @__PURE__ */ React2.createElement(Slidable.Slidable, {
          draggerY,
          draggerX: 0,
          onChange: this.handleChange,
          onDraggerHeight: this.setDraggerHeight
        }));
      }
    };
    function alphaGradientForColor(color) {
      let {
        red,
        green,
        blue
      } = colorTransformers.hsbToRgb(color), rgb = `${red}, ${green}, ${blue}`;
      return `linear-gradient(to top, rgba(${rgb}, 0) 18px, rgba(${rgb}, 1) calc(100% - 18px))`;
    }
    exports.AlphaPicker = AlphaPicker;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ColorPicker/components/HuePicker/utilities.js
var require_utilities6 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ColorPicker/components/HuePicker/utilities.js"(exports) {
    "use strict";
    var clamp = require_clamp(), VERTICAL_PADDING = 13;
    function calculateDraggerY(hue, sliderHeight, draggerHeight) {
      let offset = offsetForHue(hue, sliderHeight, draggerHeight);
      return clamp.clamp(offset, 0, sliderHeight);
    }
    function hueForDraggerY(y, sliderHeight) {
      let offsetY = clamp.clamp(y, 0, sliderHeight);
      return hueForOffset(offsetY, sliderHeight);
    }
    function hueForOffset(offset, sliderHeight) {
      let selectionHeight = offset - VERTICAL_PADDING, slidableArea = sliderHeight - VERTICAL_PADDING * 2;
      return clamp.clamp(selectionHeight / slidableArea * 360, 0, 360);
    }
    function offsetForHue(hue, sliderHeight, draggerHeight) {
      let slidableArea = sliderHeight - (draggerHeight + VERTICAL_PADDING);
      return clamp.clamp(hue / 360 * slidableArea + VERTICAL_PADDING, 0, sliderHeight - draggerHeight);
    }
    exports.calculateDraggerY = calculateDraggerY;
    exports.hueForDraggerY = hueForDraggerY;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ColorPicker/components/HuePicker/HuePicker.js
var require_HuePicker = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ColorPicker/components/HuePicker/HuePicker.js"(exports) {
    "use strict";
    var React2 = require_react(), ColorPicker_module = require_ColorPicker_css(), utilities = require_utilities6(), Slidable = require_Slidable(), HuePicker = class extends React2.PureComponent {
      constructor(...args) {
        super(...args), this.state = {
          sliderHeight: 0,
          draggerHeight: 0
        }, this.setSliderHeight = (node) => {
          node != null && this.setState({
            sliderHeight: node.clientHeight
          });
        }, this.setDraggerHeight = (height) => {
          this.setState({
            draggerHeight: height
          });
        }, this.handleChange = ({
          y
        }) => {
          let {
            onChange
          } = this.props, {
            sliderHeight
          } = this.state, hue = utilities.hueForDraggerY(y, sliderHeight);
          onChange(hue);
        };
      }
      render() {
        let {
          hue
        } = this.props, {
          sliderHeight,
          draggerHeight
        } = this.state, draggerY = utilities.calculateDraggerY(hue, sliderHeight, draggerHeight);
        return /* @__PURE__ */ React2.createElement("div", {
          className: ColorPicker_module.default.HuePicker,
          ref: this.setSliderHeight
        }, /* @__PURE__ */ React2.createElement(Slidable.Slidable, {
          draggerY,
          draggerX: 0,
          onChange: this.handleChange,
          onDraggerHeight: this.setDraggerHeight
        }));
      }
    };
    exports.HuePicker = HuePicker;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ColorPicker/ColorPicker.js
var require_ColorPicker = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ColorPicker/ColorPicker.js"(exports) {
    "use strict";
    var React2 = require_react(), debounce = require_debounce(), clamp = require_clamp(), css = require_css(), colorTransformers = require_color_transformers(), ColorPicker_module = require_ColorPicker_css(), AlphaPicker = require_AlphaPicker(), HuePicker = require_HuePicker(), Slidable = require_Slidable(), EventListener = require_EventListener(), RESIZE_DEBOUNCE_TIME_MS = 200, ColorPicker = class extends React2.PureComponent {
      constructor(...args) {
        super(...args), this.state = {
          pickerSize: {
            width: 0,
            height: 0
          }
        }, this.colorNode = null, this.handleResize = debounce.debounce(() => {
          let {
            colorNode
          } = this;
          colorNode != null && this.setState({
            pickerSize: {
              width: colorNode.clientWidth,
              height: colorNode.clientHeight
            }
          });
        }, RESIZE_DEBOUNCE_TIME_MS, {
          leading: !0,
          trailing: !0,
          maxWait: RESIZE_DEBOUNCE_TIME_MS
        }), this.setColorNode = (node) => {
          this.colorNode = node;
        }, this.handleHueChange = (hue) => {
          let {
            color: {
              brightness,
              saturation,
              alpha = 1
            },
            onChange
          } = this.props;
          onChange({
            hue,
            brightness,
            saturation,
            alpha
          });
        }, this.handleAlphaChange = (alpha) => {
          let {
            color: {
              hue,
              brightness,
              saturation
            },
            onChange
          } = this.props;
          onChange({
            hue,
            brightness,
            saturation,
            alpha
          });
        }, this.handleDraggerMove = ({
          x,
          y
        }) => {
          let {
            pickerSize
          } = this.state, {
            color: {
              hue,
              alpha = 1
            },
            onChange
          } = this.props, saturation = clamp.clamp(x / pickerSize.width, 0, 1), brightness = clamp.clamp(1 - y / pickerSize.height, 0, 1);
          onChange({
            hue,
            saturation,
            brightness,
            alpha
          });
        }, this.handlePickerDrag = (event) => {
          event.preventDefault();
        };
      }
      componentDidMount() {
        let {
          colorNode
        } = this;
        colorNode != null && this.setState({
          pickerSize: {
            width: colorNode.clientWidth,
            height: colorNode.clientHeight
          }
        });
      }
      render() {
        let {
          id,
          color,
          allowAlpha,
          fullWidth
        } = this.props, {
          hue,
          saturation,
          brightness,
          alpha: providedAlpha
        } = color, {
          pickerSize
        } = this.state, alpha = providedAlpha != null && allowAlpha ? providedAlpha : 1, {
          red,
          green,
          blue
        } = colorTransformers.hsbToRgb({
          hue,
          saturation: 1,
          brightness: 1
        }), colorString = `rgba(${red}, ${green}, ${blue}, ${alpha})`, draggerX = clamp.clamp(saturation * pickerSize.width, 0, pickerSize.width), draggerY = clamp.clamp(pickerSize.height - brightness * pickerSize.height, 0, pickerSize.height), alphaSliderMarkup = allowAlpha ? /* @__PURE__ */ React2.createElement(AlphaPicker.AlphaPicker, {
          alpha,
          color,
          onChange: this.handleAlphaChange
        }) : null, className = css.classNames(ColorPicker_module.default.ColorPicker, fullWidth && ColorPicker_module.default.fullWidth);
        return /* @__PURE__ */ React2.createElement("div", {
          className,
          id,
          onMouseDown: this.handlePickerDrag
        }, /* @__PURE__ */ React2.createElement("div", {
          ref: this.setColorNode,
          className: ColorPicker_module.default.MainColor
        }, /* @__PURE__ */ React2.createElement("div", {
          className: ColorPicker_module.default.ColorLayer,
          style: {
            backgroundColor: colorString
          }
        }), /* @__PURE__ */ React2.createElement(Slidable.Slidable, {
          onChange: this.handleDraggerMove,
          draggerX,
          draggerY
        })), /* @__PURE__ */ React2.createElement(HuePicker.HuePicker, {
          hue,
          onChange: this.handleHueChange
        }), alphaSliderMarkup, /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
          event: "resize",
          handler: this.handleResize
        }));
      }
    };
    exports.ColorPicker = ColorPicker;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/InlineGrid/InlineGrid.css.js
var require_InlineGrid_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/InlineGrid/InlineGrid.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      InlineGrid: "Polaris-InlineGrid"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/InlineGrid/InlineGrid.js
var require_InlineGrid = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/InlineGrid/InlineGrid.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), InlineGrid_module = require_InlineGrid_css();
    function InlineGrid({
      children,
      columns,
      gap,
      alignItems
    }) {
      let style = {
        ...css.getResponsiveValue("inline-grid", "grid-template-columns", formatInlineGrid(columns)),
        ...css.getResponsiveProps("inline-grid", "gap", "space", gap),
        "--pc-inline-grid-align-items": alignItems
      };
      return /* @__PURE__ */ React2.createElement("div", {
        className: InlineGrid_module.default.InlineGrid,
        style: css.sanitizeCustomProperties(style)
      }, children);
    }
    function formatInlineGrid(columns) {
      return typeof columns == "object" && columns !== null && !Array.isArray(columns) ? Object.fromEntries(Object.entries(columns).map(([breakpointAlias, breakpointInlineGrid]) => [breakpointAlias, getColumnValue(breakpointInlineGrid)])) : getColumnValue(columns);
    }
    function getColumnValue(columns) {
      if (columns)
        return typeof columns == "number" || !isNaN(Number(columns)) ? `repeat(${Number(columns)}, minmax(0, 1fr))` : typeof columns == "string" ? columns : columns.map((column) => {
          switch (column) {
            case "oneThird":
              return "minmax(0, 1fr)";
            case "oneHalf":
              return "minmax(0, 1fr)";
            case "twoThirds":
              return "minmax(0, 2fr)";
          }
        }).join(" ");
    }
    exports.InlineGrid = InlineGrid;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/frame/context.js
var require_context15 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/frame/context.js"(exports) {
    "use strict";
    var React2 = require_react(), FrameContext = /* @__PURE__ */ React2.createContext(void 0);
    exports.FrameContext = FrameContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/frame/hooks.js
var require_hooks9 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/frame/hooks.js"(exports) {
    "use strict";
    var React2 = require_react(), context = require_context15();
    function useFrame() {
      let frame = React2.useContext(context.FrameContext);
      if (!frame)
        throw new Error("No Frame context was provided. Your component must be wrapped in a <Frame> component. See https://polaris.shopify.com/components/internal-only/frame for implementation instructions.");
      return frame;
    }
    exports.useFrame = useFrame;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ContextualSaveBar/ContextualSaveBar.js
var require_ContextualSaveBar = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ContextualSaveBar/ContextualSaveBar.js"(exports) {
    "use strict";
    var React2 = require_react(), hooks = require_hooks9(), ContextualSaveBar = /* @__PURE__ */ React2.memo(function({
      message,
      saveAction,
      discardAction,
      alignContentFlush,
      fullWidth,
      contextControl,
      secondaryMenu
    }) {
      let {
        setContextualSaveBar,
        removeContextualSaveBar
      } = hooks.useFrame();
      return React2.useEffect(() => {
        setContextualSaveBar({
          message,
          saveAction,
          discardAction,
          alignContentFlush,
          fullWidth,
          contextControl,
          secondaryMenu
        });
      }, [message, saveAction, discardAction, alignContentFlush, setContextualSaveBar, fullWidth, contextControl, secondaryMenu]), React2.useEffect(() => removeContextualSaveBar, [removeContextualSaveBar]), null;
    });
    exports.ContextualSaveBar = ContextualSaveBar;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DataTable/utilities.js
var require_utilities7 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DataTable/utilities.js"(exports) {
    "use strict";
    function measureColumn(tableData) {
      return function(column, index) {
        let {
          firstVisibleColumnIndex,
          tableLeftVisibleEdge: tableStart,
          tableRightVisibleEdge: tableEnd
        } = tableData, leftEdge = column.offsetLeft, rightEdge = leftEdge + column.offsetWidth, isVisibleLeft = isEdgeVisible(leftEdge, tableStart, tableEnd, "left"), isVisibleRight = isEdgeVisible(rightEdge, tableStart, tableEnd, "right"), isVisible = isVisibleLeft || isVisibleRight, width = column.offsetWidth;
        return isVisible && (tableData.firstVisibleColumnIndex = Math.min(firstVisibleColumnIndex, index)), {
          leftEdge,
          rightEdge,
          isVisible,
          width,
          index
        };
      };
    }
    function isEdgeVisible(position, start, end, edgeType) {
      return position >= start + (edgeType === "left" ? 0 : 30) && position <= end - 30;
    }
    function getPrevAndCurrentColumns(tableData, columnData) {
      let {
        firstVisibleColumnIndex
      } = tableData, previousColumnIndex = Math.max(firstVisibleColumnIndex - 1, 0), previousColumn = columnData[previousColumnIndex], currentColumn = columnData[firstVisibleColumnIndex];
      return {
        previousColumn,
        currentColumn
      };
    }
    exports.getPrevAndCurrentColumns = getPrevAndCurrentColumns;
    exports.isEdgeVisible = isEdgeVisible;
    exports.measureColumn = measureColumn;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DataTable/DataTable.css.js
var require_DataTable_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DataTable/DataTable.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      DataTable: "Polaris-DataTable",
      condensed: "Polaris-DataTable--condensed",
      Navigation: "Polaris-DataTable__Navigation",
      Pip: "Polaris-DataTable__Pip",
      "Pip-visible": "Polaris-DataTable__Pip--visible",
      ScrollContainer: "Polaris-DataTable__ScrollContainer",
      Table: "Polaris-DataTable__Table",
      TableRow: "Polaris-DataTable__TableRow",
      Cell: "Polaris-DataTable__Cell",
      IncreasedTableDensity: "Polaris-DataTable__IncreasedTableDensity",
      ZebraStripingOnData: "Polaris-DataTable__ZebraStripingOnData",
      RowCountIsEven: "Polaris-DataTable__RowCountIsEven",
      ShowTotalsInFooter: "Polaris-DataTable__ShowTotalsInFooter",
      "Cell-separate": "Polaris-DataTable__Cell--separate",
      "Cell-firstColumn": "Polaris-DataTable__Cell--firstColumn",
      "Cell-numeric": "Polaris-DataTable__Cell--numeric",
      "Cell-truncated": "Polaris-DataTable__Cell--truncated",
      "Cell-header": "Polaris-DataTable__Cell--header",
      "Cell-sortable": "Polaris-DataTable__Cell--sortable",
      "Heading-left": "Polaris-DataTable__Heading--left",
      "Cell-verticalAlignTop": "Polaris-DataTable__Cell--verticalAlignTop",
      "Cell-verticalAlignBottom": "Polaris-DataTable__Cell--verticalAlignBottom",
      "Cell-verticalAlignMiddle": "Polaris-DataTable__Cell--verticalAlignMiddle",
      "Cell-verticalAlignBaseline": "Polaris-DataTable__Cell--verticalAlignBaseline",
      hoverable: "Polaris-DataTable--hoverable",
      "Cell-hovered": "Polaris-DataTable__Cell--hovered",
      Icon: "Polaris-DataTable__Icon",
      Heading: "Polaris-DataTable__Heading",
      StickyHeaderEnabled: "Polaris-DataTable__StickyHeaderEnabled",
      StickyHeaderWrapper: "Polaris-DataTable__StickyHeaderWrapper",
      "Cell-sorted": "Polaris-DataTable__Cell--sorted",
      "Cell-total": "Polaris-DataTable__Cell--total",
      ShowTotals: "Polaris-DataTable__ShowTotals",
      "Cell-total-footer": "Polaris-DataTable--cellTotalFooter",
      Footer: "Polaris-DataTable__Footer",
      StickyHeaderInner: "Polaris-DataTable__StickyHeaderInner",
      "StickyHeaderInner-isSticky": "Polaris-DataTable__StickyHeaderInner--isSticky",
      StickyHeaderTable: "Polaris-DataTable__StickyHeaderTable",
      FixedFirstColumn: "Polaris-DataTable__FixedFirstColumn",
      StickyTableHeadingsRow: "Polaris-DataTable__StickyTableHeadingsRow",
      TooltipContent: "Polaris-DataTable__TooltipContent"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DataTable/components/Cell/Cell.js
var require_Cell = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DataTable/components/Cell/Cell.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), shared = require_shared(), DataTable_module = require_DataTable_css(), hooks = require_hooks2(), Tooltip = require_Tooltip(), Icon2 = require_Icon();
    function Cell({
      content,
      contentType,
      nthColumn,
      firstColumn,
      truncate,
      header,
      total,
      totalInFooter,
      sorted,
      sortable,
      sortDirection,
      inFixedNthColumn,
      verticalAlign = "top",
      defaultSortDirection = "ascending",
      onSort,
      colSpan,
      setRef = () => {
      },
      stickyHeadingCell = !1,
      stickyCellWidth,
      hovered = !1,
      handleFocus = () => {
      },
      hasFixedNthColumn = !1,
      fixedCellVisible = !1,
      firstColumnMinWidth,
      style,
      lastFixedFirstColumn
    }) {
      let i18n = hooks.useI18n(), numeric = contentType === "numeric", className = css.classNames(DataTable_module.default.Cell, DataTable_module.default[`Cell-${css.variationName("verticalAlign", verticalAlign)}`], firstColumn && DataTable_module.default["Cell-firstColumn"], truncate && DataTable_module.default["Cell-truncated"], header && DataTable_module.default["Cell-header"], total && DataTable_module.default["Cell-total"], totalInFooter && DataTable_module.default["Cell-total-footer"], numeric && DataTable_module.default["Cell-numeric"], sortable && DataTable_module.default["Cell-sortable"], sorted && DataTable_module.default["Cell-sorted"], stickyHeadingCell && DataTable_module.default.StickyHeaderCell, hovered && DataTable_module.default["Cell-hovered"], lastFixedFirstColumn && inFixedNthColumn && fixedCellVisible && DataTable_module.default["Cell-separate"], nthColumn && inFixedNthColumn && stickyHeadingCell && DataTable_module.default.FixedFirstColumn), headerClassName = css.classNames(header && DataTable_module.default.Heading, header && contentType === "text" && DataTable_module.default["Heading-left"]), iconClassName = css.classNames(sortable && DataTable_module.default.Icon), direction = sorted && sortDirection ? sortDirection : defaultSortDirection, source = direction === "descending" ? polarisIcons.SortDescendingIcon : polarisIcons.SortAscendingIcon, oppositeDirection = sortDirection === "ascending" ? "descending" : "ascending", sortAccessibilityLabel = i18n.translate("Polaris.DataTable.sortAccessibilityLabel", {
        direction: sorted ? oppositeDirection : direction
      }), iconMarkup = /* @__PURE__ */ React2.createElement("span", {
        className: iconClassName
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source,
        accessibilityLabel: sortAccessibilityLabel
      })), focusable = !(stickyHeadingCell && hasFixedNthColumn && nthColumn && !inFixedNthColumn), columnHeadingContent = sortable ? /* @__PURE__ */ React2.createElement("button", {
        className: headerClassName,
        onClick: onSort,
        onFocus: handleFocus,
        tabIndex: focusable ? 0 : -1
      }, iconMarkup, content) : content, colSpanProp = colSpan && colSpan > 1 ? {
        colSpan
      } : {}, minWidthStyles = nthColumn && firstColumnMinWidth ? {
        minWidth: firstColumnMinWidth
      } : {
        minWidth: stickyCellWidth
      }, stickyHeading = /* @__PURE__ */ React2.createElement("th", Object.assign({
        ref: setRef
      }, shared.headerCell.props, colSpanProp, {
        className,
        "aria-sort": sortDirection,
        style: {
          ...style,
          ...minWidthStyles
        },
        "data-index-table-sticky-heading": !0
      }), columnHeadingContent), headingMarkup = header ? /* @__PURE__ */ React2.createElement("th", Object.assign({}, shared.headerCell.props, {
        "aria-sort": sortDirection
      }, colSpanProp, {
        ref: setRef,
        className,
        scope: "col",
        style: {
          ...minWidthStyles
        }
      }), columnHeadingContent) : /* @__PURE__ */ React2.createElement("th", Object.assign({}, colSpanProp, {
        ref: setRef,
        className,
        scope: "row",
        style: {
          ...minWidthStyles
        }
      }), truncate ? /* @__PURE__ */ React2.createElement(TruncatedText, {
        className: DataTable_module.default.TooltipContent
      }, content) : content), cellMarkup = header || firstColumn || nthColumn ? headingMarkup : /* @__PURE__ */ React2.createElement("td", Object.assign({
        className
      }, colSpanProp), content);
      return stickyHeadingCell ? stickyHeading : cellMarkup;
    }
    var TruncatedText = ({
      children,
      className = ""
    }) => {
      let textRef = React2.useRef(null), {
        current
      } = textRef, text = /* @__PURE__ */ React2.createElement("span", {
        ref: textRef,
        className
      }, children);
      return current?.scrollWidth > current?.offsetWidth ? /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, {
        content: textRef.current.innerText
      }, text) : text;
    };
    exports.Cell = Cell;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/is-input-focused.js
var require_is_input_focused = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/is-input-focused.js"(exports) {
    "use strict";
    var EditableTarget;
    (function(EditableTarget2) {
      EditableTarget2.Input = "INPUT", EditableTarget2.Textarea = "TEXTAREA", EditableTarget2.Select = "SELECT", EditableTarget2.ContentEditable = "contenteditable";
    })(EditableTarget || (EditableTarget = {}));
    function isInputFocused() {
      if (document == null || document.activeElement == null)
        return !1;
      let {
        tagName
      } = document.activeElement;
      return tagName === EditableTarget.Input || tagName === EditableTarget.Textarea || tagName === EditableTarget.Select || document.activeElement.hasAttribute(EditableTarget.ContentEditable);
    }
    exports.isInputFocused = isInputFocused;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Pagination/Pagination.css.js
var require_Pagination_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Pagination/Pagination.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Pagination: "Polaris-Pagination",
      table: "Polaris-Pagination--table",
      TablePaginationActions: "Polaris-Pagination__TablePaginationActions"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Pagination/Pagination.js
var require_Pagination = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Pagination/Pagination.js"(exports) {
    "use strict";
    var polarisIcons = require("@shopify/polaris-icons"), React2 = require_react(), isInputFocused = require_is_input_focused(), css = require_css(), Pagination_module = require_Pagination_css(), hooks = require_hooks2(), KeypressListener = require_KeypressListener(), Box4 = require_Box(), InlineStack4 = require_InlineStack(), ButtonGroup = require_ButtonGroup(), Tooltip = require_Tooltip(), Text4 = require_Text(), Button4 = require_Button();
    function Pagination({
      hasNext,
      hasPrevious,
      nextURL,
      previousURL,
      onNext,
      onPrevious,
      nextTooltip,
      previousTooltip,
      nextKeys,
      previousKeys,
      accessibilityLabel,
      accessibilityLabels,
      label,
      type = "page"
    }) {
      let i18n = hooks.useI18n(), node = /* @__PURE__ */ React2.createRef(), navLabel = accessibilityLabel || i18n.translate("Polaris.Pagination.pagination"), previousLabel = accessibilityLabels?.previous || i18n.translate("Polaris.Pagination.previous"), nextLabel = accessibilityLabels?.next || i18n.translate("Polaris.Pagination.next"), prev = /* @__PURE__ */ React2.createElement(Button4.Button, {
        icon: polarisIcons.ChevronLeftIcon,
        accessibilityLabel: previousLabel,
        url: previousURL,
        onClick: onPrevious,
        disabled: !hasPrevious,
        id: "previousURL"
      }), constructedPrevious = previousTooltip && hasPrevious ? /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, {
        activatorWrapper: "span",
        content: previousTooltip,
        preferredPosition: "below"
      }, prev) : prev, next = /* @__PURE__ */ React2.createElement(Button4.Button, {
        icon: polarisIcons.ChevronRightIcon,
        accessibilityLabel: nextLabel,
        url: nextURL,
        onClick: onNext,
        disabled: !hasNext,
        id: "nextURL"
      }), constructedNext = nextTooltip && hasNext ? /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, {
        activatorWrapper: "span",
        content: nextTooltip,
        preferredPosition: "below"
      }, next) : next, previousHandler = onPrevious || noop, previousButtonEvents = previousKeys && (previousURL || onPrevious) && hasPrevious && previousKeys.map((key) => /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
        key,
        keyCode: key,
        handler: handleCallback(previousURL ? clickPaginationLink("previousURL", node) : previousHandler)
      })), nextHandler = onNext || noop, nextButtonEvents = nextKeys && (nextURL || onNext) && hasNext && nextKeys.map((key) => /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
        key,
        keyCode: key,
        handler: handleCallback(nextURL ? clickPaginationLink("nextURL", node) : nextHandler)
      }));
      if (type === "table") {
        let labelMarkup2 = label ? /* @__PURE__ */ React2.createElement(Box4.Box, {
          padding: "300",
          paddingBlockStart: "0",
          paddingBlockEnd: "0"
        }, /* @__PURE__ */ React2.createElement(Text4.Text, {
          as: "span",
          variant: "bodySm",
          fontWeight: "medium"
        }, label)) : null;
        return /* @__PURE__ */ React2.createElement("nav", {
          "aria-label": navLabel,
          ref: node,
          className: css.classNames(Pagination_module.default.Pagination, Pagination_module.default.table)
        }, previousButtonEvents, nextButtonEvents, /* @__PURE__ */ React2.createElement(Box4.Box, {
          background: "bg-surface-secondary",
          paddingBlockStart: "150",
          paddingBlockEnd: "150",
          paddingInlineStart: "300",
          paddingInlineEnd: "200"
        }, /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
          align: "center",
          blockAlign: "center"
        }, /* @__PURE__ */ React2.createElement("div", {
          className: Pagination_module.default.TablePaginationActions,
          "data-buttongroup-variant": "segmented"
        }, /* @__PURE__ */ React2.createElement("div", null, constructedPrevious), labelMarkup2, /* @__PURE__ */ React2.createElement("div", null, constructedNext)))));
      }
      let labelTextMarkup = hasNext && hasPrevious ? /* @__PURE__ */ React2.createElement("span", null, label) : /* @__PURE__ */ React2.createElement(Text4.Text, {
        tone: "subdued",
        as: "span"
      }, label), labelMarkup = label ? /* @__PURE__ */ React2.createElement(Box4.Box, {
        padding: "300",
        paddingBlockStart: "0",
        paddingBlockEnd: "0"
      }, /* @__PURE__ */ React2.createElement("div", {
        "aria-live": "polite"
      }, labelTextMarkup)) : null;
      return /* @__PURE__ */ React2.createElement("nav", {
        "aria-label": navLabel,
        ref: node,
        className: Pagination_module.default.Pagination
      }, previousButtonEvents, nextButtonEvents, /* @__PURE__ */ React2.createElement(ButtonGroup.ButtonGroup, {
        variant: "segmented"
      }, constructedPrevious, labelMarkup, constructedNext));
    }
    function clickPaginationLink(id, node) {
      return () => {
        if (node.current == null)
          return;
        let link = node.current.querySelector(`#${id}`);
        link && link.click();
      };
    }
    function handleCallback(fn) {
      return () => {
        isInputFocused.isInputFocused() || fn();
      };
    }
    function noop() {
    }
    exports.Pagination = Pagination;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/AfterInitialMount/AfterInitialMount.js
var require_AfterInitialMount = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/AfterInitialMount/AfterInitialMount.js"(exports) {
    "use strict";
    var React2 = require_react(), useIsAfterInitialMount = require_use_is_after_initial_mount();
    function AfterInitialMount({
      children,
      onMount,
      fallback = null
    }) {
      let isMounted = useIsAfterInitialMount.useIsAfterInitialMount(), content = isMounted ? children : fallback;
      return React2.useEffect(() => {
        isMounted && onMount && onMount();
      }, [isMounted, onMount]), /* @__PURE__ */ React2.createElement(React2.Fragment, null, content);
    }
    exports.AfterInitialMount = AfterInitialMount;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/sticky-manager/hooks.js
var require_hooks10 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/sticky-manager/hooks.js"(exports) {
    "use strict";
    var React2 = require_react(), errors = require_errors(), context = require_context4();
    function useStickyManager() {
      let stickyManager = React2.useContext(context.StickyManagerContext);
      if (!stickyManager)
        throw new errors.MissingAppProviderError("No StickyManager was provided.");
      return stickyManager;
    }
    exports.useStickyManager = useStickyManager;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Sticky/Sticky.js
var require_Sticky = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Sticky/Sticky.js"(exports) {
    "use strict";
    var React2 = require_react(), geometry = require_geometry(), hooks = require_hooks10(), StickyInner = class extends React2.Component {
      constructor(...args) {
        super(...args), this.state = {
          isSticky: !1,
          style: {}
        }, this.placeHolderNode = null, this.stickyNode = null, this.setPlaceHolderNode = (node) => {
          this.placeHolderNode = node;
        }, this.setStickyNode = (node) => {
          this.stickyNode = node;
        }, this.handlePositioning = (stick, top = 0, left = 0, width = 0) => {
          let {
            isSticky
          } = this.state;
          (stick && !isSticky || !stick && isSticky) && (this.adjustPlaceHolderNode(stick), this.setState({
            isSticky: !isSticky
          }, () => {
            if (this.props.onStickyChange == null || (this.props.onStickyChange(!isSticky), this.props.boundingElement == null))
              return null;
            this.props.boundingElement.toggleAttribute("data-sticky-active");
          }));
          let style = stick ? {
            position: "fixed",
            top,
            left,
            width
          } : {};
          this.setState({
            style
          });
        }, this.adjustPlaceHolderNode = (add) => {
          this.placeHolderNode && this.stickyNode && (this.placeHolderNode.style.paddingBottom = add ? `${geometry.getRectForNode(this.stickyNode).height}px` : "0px");
        };
      }
      componentDidMount() {
        let {
          boundingElement,
          offset = !1,
          disableWhenStacked = !1,
          stickyManager
        } = this.props;
        !this.stickyNode || !this.placeHolderNode || stickyManager.registerStickyItem({
          stickyNode: this.stickyNode,
          placeHolderNode: this.placeHolderNode,
          handlePositioning: this.handlePositioning,
          offset,
          boundingElement,
          disableWhenStacked
        });
      }
      componentWillUnmount() {
        let {
          stickyManager
        } = this.props;
        this.stickyNode && stickyManager.unregisterStickyItem(this.stickyNode);
      }
      render() {
        let {
          style,
          isSticky
        } = this.state, {
          children
        } = this.props, childrenContent = isFunction(children) ? children(isSticky) : children;
        return /* @__PURE__ */ React2.createElement("div", null, /* @__PURE__ */ React2.createElement("div", {
          ref: this.setPlaceHolderNode
        }), /* @__PURE__ */ React2.createElement("div", {
          ref: this.setStickyNode,
          style
        }, childrenContent));
      }
    };
    function isFunction(arg) {
      return typeof arg == "function";
    }
    function Sticky(props) {
      let stickyManager = hooks.useStickyManager();
      return /* @__PURE__ */ React2.createElement(StickyInner, Object.assign({}, props, {
        stickyManager
      }));
    }
    exports.Sticky = Sticky;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DataTable/components/Navigation/Navigation.js
var require_Navigation = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DataTable/components/Navigation/Navigation.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), DataTable_module = require_DataTable_css(), hooks = require_hooks2(), Button4 = require_Button();
    function Navigation({
      columnVisibilityData,
      isScrolledFarthestLeft,
      isScrolledFarthestRight,
      navigateTableLeft,
      navigateTableRight,
      fixedFirstColumns,
      setRef = () => {
      }
    }) {
      let i18n = hooks.useI18n(), pipMarkup = columnVisibilityData.map((column, index) => {
        if (index < fixedFirstColumns)
          return;
        let className = css.classNames(DataTable_module.default.Pip, column.isVisible && DataTable_module.default["Pip-visible"]);
        return /* @__PURE__ */ React2.createElement("div", {
          className,
          key: `pip-${index}`
        });
      }), leftA11yLabel = i18n.translate("Polaris.DataTable.navAccessibilityLabel", {
        direction: "left"
      }), rightA11yLabel = i18n.translate("Polaris.DataTable.navAccessibilityLabel", {
        direction: "right"
      });
      return /* @__PURE__ */ React2.createElement("div", {
        className: DataTable_module.default.Navigation,
        ref: setRef
      }, /* @__PURE__ */ React2.createElement(Button4.Button, {
        variant: "tertiary",
        icon: polarisIcons.ChevronLeftIcon,
        disabled: isScrolledFarthestLeft,
        accessibilityLabel: leftA11yLabel,
        onClick: navigateTableLeft
      }), pipMarkup, /* @__PURE__ */ React2.createElement(Button4.Button, {
        variant: "tertiary",
        icon: polarisIcons.ChevronRightIcon,
        disabled: isScrolledFarthestRight,
        accessibilityLabel: rightA11yLabel,
        onClick: navigateTableRight
      }));
    }
    exports.Navigation = Navigation;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DataTable/DataTable.js
var require_DataTable = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DataTable/DataTable.js"(exports) {
    "use strict";
    var React2 = require_react(), isEqual = require("react-fast-compare"), debounce = require_debounce(), css = require_css(), shared = require_shared(), utilities = require_utilities7(), DataTable_module = require_DataTable_css(), Cell = require_Cell(), Pagination = require_Pagination(), AfterInitialMount = require_AfterInitialMount(), Sticky = require_Sticky(), Navigation = require_Navigation(), hooks = require_hooks2(), EventListener = require_EventListener(), getRowClientHeights = (rows) => {
      let heights = [];
      return rows && rows.forEach((row) => {
        heights.push(row.clientHeight);
      }), heights;
    }, DataTableInner = class extends React2.PureComponent {
      constructor(...args) {
        super(...args), this.state = {
          condensed: !1,
          columnVisibilityData: [],
          isScrolledFarthestLeft: !0,
          isScrolledFarthestRight: !1,
          rowHovered: void 0
        }, this.dataTable = /* @__PURE__ */ React2.createRef(), this.scrollContainer = /* @__PURE__ */ React2.createRef(), this.table = /* @__PURE__ */ React2.createRef(), this.stickyTable = /* @__PURE__ */ React2.createRef(), this.stickyNav = null, this.headerNav = null, this.tableHeadings = [], this.stickyHeadings = [], this.tableHeadingWidths = [], this.stickyHeaderActive = !1, this.scrollStopTimer = null, this.handleResize = debounce.debounce(() => {
          let {
            table: {
              current: table
            },
            scrollContainer: {
              current: scrollContainer
            }
          } = this, condensed = !1;
          table && scrollContainer && (condensed = table.scrollWidth > scrollContainer.clientWidth + 1), this.setState({
            condensed,
            ...this.calculateColumnVisibilityData(condensed)
          });
        }), this.setCellRef = ({
          ref,
          index,
          inStickyHeader
        }) => {
          if (ref != null)
            if (inStickyHeader) {
              this.stickyHeadings[index] = ref;
              let button = ref.querySelector("button");
              if (button == null)
                return;
              button.addEventListener("focus", this.handleHeaderButtonFocus);
            } else
              this.tableHeadings[index] = ref, this.tableHeadingWidths[index] = ref.clientWidth;
        }, this.changeHeadingFocus = () => {
          let {
            tableHeadings,
            stickyHeadings,
            stickyNav,
            headerNav
          } = this, stickyFocusedItemIndex = stickyHeadings.findIndex((item) => item === document.activeElement?.parentElement), tableFocusedItemIndex = tableHeadings.findIndex((item) => item === document.activeElement?.parentElement), arrowsInStickyNav = stickyNav?.querySelectorAll("button"), arrowsInHeaderNav = headerNav?.querySelectorAll("button"), stickyFocusedNavIndex = -1;
          arrowsInStickyNav?.forEach((item, index) => {
            item === document.activeElement && (stickyFocusedNavIndex = index);
          });
          let headerFocusedNavIndex = -1;
          if (arrowsInHeaderNav?.forEach((item, index) => {
            item === document.activeElement && (headerFocusedNavIndex = index);
          }), stickyFocusedItemIndex < 0 && tableFocusedItemIndex < 0 && stickyFocusedNavIndex < 0 && headerFocusedNavIndex < 0)
            return null;
          let button;
          if (stickyFocusedItemIndex >= 0 ? button = tableHeadings[stickyFocusedItemIndex].querySelector("button") : tableFocusedItemIndex >= 0 && (button = stickyHeadings[tableFocusedItemIndex].querySelector("button")), stickyFocusedNavIndex >= 0 ? button = arrowsInHeaderNav?.[stickyFocusedNavIndex] : headerFocusedNavIndex >= 0 && (button = arrowsInStickyNav?.[headerFocusedNavIndex]), button == null)
            return null;
          button.style.visibility = "visible", button.focus(), button.style.removeProperty("visibility");
        }, this.calculateColumnVisibilityData = (condensed) => {
          let fixedFirstColumns = this.fixedFirstColumns(), {
            table: {
              current: table
            },
            scrollContainer: {
              current: scrollContainer
            },
            dataTable: {
              current: dataTable
            }
          } = this, {
            stickyHeader
          } = this.props;
          if ((stickyHeader || condensed) && table && scrollContainer && dataTable) {
            let headerCells = table.querySelectorAll(shared.headerCell.selector), rightMostHeader = headerCells[fixedFirstColumns - 1], nthColumnWidth = fixedFirstColumns ? rightMostHeader.offsetLeft + rightMostHeader.offsetWidth : 0;
            if (headerCells.length > 0) {
              let firstVisibleColumnIndex = headerCells.length - 1, tableLeftVisibleEdge = scrollContainer.scrollLeft + nthColumnWidth, tableRightVisibleEdge = scrollContainer.scrollLeft + dataTable.offsetWidth, tableData = {
                firstVisibleColumnIndex,
                tableLeftVisibleEdge,
                tableRightVisibleEdge
              }, columnVisibilityData = [...headerCells].map(utilities.measureColumn(tableData)), lastColumn = columnVisibilityData[columnVisibilityData.length - 1], isScrolledFarthestLeft = fixedFirstColumns ? tableLeftVisibleEdge === nthColumnWidth : tableLeftVisibleEdge === 0;
              return {
                columnVisibilityData,
                ...utilities.getPrevAndCurrentColumns(tableData, columnVisibilityData),
                isScrolledFarthestLeft,
                isScrolledFarthestRight: lastColumn.rightEdge <= tableRightVisibleEdge
              };
            }
          }
          return {
            columnVisibilityData: [],
            previousColumn: void 0,
            currentColumn: void 0
          };
        }, this.handleHeaderButtonFocus = (event) => {
          let fixedFirstColumns = this.fixedFirstColumns();
          if (this.scrollContainer.current == null || event.target == null || this.state.columnVisibilityData.length === 0)
            return;
          let currentCell = event.target.parentNode, tableScrollLeft = this.scrollContainer.current.scrollLeft, tableViewableWidth = this.scrollContainer.current.offsetWidth, tableRightEdge = tableScrollLeft + tableViewableWidth, nthColumnWidth = this.state.columnVisibilityData.length > 0 ? this.state.columnVisibilityData[fixedFirstColumns]?.rightEdge : 0, currentColumnLeftEdge = currentCell.offsetLeft, currentColumnRightEdge = currentCell.offsetLeft + currentCell.offsetWidth;
          tableScrollLeft > currentColumnLeftEdge - nthColumnWidth && (this.scrollContainer.current.scrollLeft = currentColumnLeftEdge - nthColumnWidth), currentColumnRightEdge > tableRightEdge && (this.scrollContainer.current.scrollLeft = currentColumnRightEdge - tableViewableWidth);
        }, this.stickyHeaderScrolling = () => {
          let {
            current: stickyTable
          } = this.stickyTable, {
            current: scrollContainer
          } = this.scrollContainer;
          stickyTable == null || scrollContainer == null || (stickyTable.scrollLeft = scrollContainer.scrollLeft);
        }, this.scrollListener = () => {
          this.scrollStopTimer && clearTimeout(this.scrollStopTimer), this.scrollStopTimer = setTimeout(() => {
            this.setState((prevState) => ({
              ...this.calculateColumnVisibilityData(prevState.condensed)
            }));
          }, 100), this.setState({
            isScrolledFarthestLeft: this.scrollContainer.current?.scrollLeft === 0
          }), this.props.stickyHeader && this.stickyHeaderActive && this.stickyHeaderScrolling();
        }, this.handleHover = (row) => () => {
          this.setState({
            rowHovered: row
          });
        }, this.handleFocus = (event) => {
          let fixedFirstColumns = this.fixedFirstColumns();
          if (this.scrollContainer.current == null || event.target == null)
            return;
          let currentCell = event.target.parentNode, nthColumnWidth = this.props ? this.state.columnVisibilityData[fixedFirstColumns]?.rightEdge : 0, desiredScrollLeft = currentCell.offsetLeft - nthColumnWidth;
          this.scrollContainer.current.scrollLeft > desiredScrollLeft && (this.scrollContainer.current.scrollLeft = desiredScrollLeft);
        }, this.navigateTable = (direction) => {
          let fixedFirstColumns = this.fixedFirstColumns(), {
            currentColumn,
            previousColumn
          } = this.state, nthColumnWidth = this.state.columnVisibilityData[fixedFirstColumns - 1]?.rightEdge;
          if (!currentColumn || !previousColumn)
            return;
          let prevWidths = 0;
          for (let index = 0; index < currentColumn.index; index++)
            prevWidths += this.state.columnVisibilityData[index].width;
          let {
            current: scrollContainer
          } = this.scrollContainer;
          return () => {
            let newScrollLeft = 0;
            fixedFirstColumns ? newScrollLeft = direction === "right" ? prevWidths - nthColumnWidth + currentColumn.width : prevWidths - previousColumn.width - nthColumnWidth : newScrollLeft = direction === "right" ? currentColumn.rightEdge : previousColumn.leftEdge, scrollContainer && (scrollContainer.scrollLeft = newScrollLeft, requestAnimationFrame(() => {
              this.setState((prevState) => ({
                ...this.calculateColumnVisibilityData(prevState.condensed)
              }));
            }));
          };
        }, this.renderHeading = ({
          heading,
          headingIndex,
          inFixedNthColumn,
          inStickyHeader
        }) => {
          let {
            sortable,
            truncate = !1,
            columnContentTypes,
            defaultSortDirection,
            initialSortColumnIndex = 0,
            verticalAlign,
            firstColumnMinWidth
          } = this.props, fixedFirstColumns = this.fixedFirstColumns(), {
            sortDirection = defaultSortDirection,
            sortedColumnIndex = initialSortColumnIndex,
            isScrolledFarthestLeft
          } = this.state, sortableHeadingProps, headingCellId = `heading-cell-${headingIndex}`, stickyHeaderId = `stickyheader-${headingIndex}`, id = inStickyHeader ? stickyHeaderId : headingCellId;
          if (sortable) {
            let isSortable = sortable[headingIndex], isSorted = isSortable && sortedColumnIndex === headingIndex;
            sortableHeadingProps = {
              defaultSortDirection,
              sorted: isSorted,
              sortable: isSortable,
              sortDirection: isSorted ? sortDirection : "none",
              onSort: this.defaultOnSort(headingIndex),
              fixedNthColumn: fixedFirstColumns,
              inFixedNthColumn: fixedFirstColumns
            };
          }
          let stickyCellWidth = inStickyHeader ? this.tableHeadingWidths[headingIndex] : void 0, fixedCellVisible = !isScrolledFarthestLeft, cellProps = {
            header: !0,
            stickyHeadingCell: inStickyHeader,
            content: heading,
            contentType: columnContentTypes[headingIndex],
            nthColumn: headingIndex < fixedFirstColumns,
            fixedFirstColumns,
            truncate,
            headingIndex,
            ...sortableHeadingProps,
            verticalAlign,
            handleFocus: this.handleFocus,
            stickyCellWidth,
            fixedCellVisible,
            firstColumnMinWidth
          };
          return inFixedNthColumn && inStickyHeader ? [/* @__PURE__ */ React2.createElement(Cell.Cell, Object.assign({
            key: id
          }, cellProps, {
            setRef: (ref) => {
              this.setCellRef({
                ref,
                index: headingIndex,
                inStickyHeader
              });
            },
            inFixedNthColumn: !1
          })), /* @__PURE__ */ React2.createElement(Cell.Cell, Object.assign({
            key: `${id}-sticky`
          }, cellProps, {
            setRef: (ref) => {
              this.setCellRef({
                ref,
                index: headingIndex,
                inStickyHeader
              });
            },
            inFixedNthColumn: Boolean(fixedFirstColumns),
            lastFixedFirstColumn: headingIndex === fixedFirstColumns - 1,
            style: {
              left: this.state.columnVisibilityData[headingIndex]?.leftEdge
            }
          }))] : /* @__PURE__ */ React2.createElement(Cell.Cell, Object.assign({
            key: id
          }, cellProps, {
            setRef: (ref) => {
              this.setCellRef({
                ref,
                index: headingIndex,
                inStickyHeader
              });
            },
            lastFixedFirstColumn: headingIndex === fixedFirstColumns - 1,
            inFixedNthColumn
          }));
        }, this.totalsRowHeading = () => {
          let {
            i18n,
            totals,
            totalsName
          } = this.props, totalsLabel = totalsName || {
            singular: i18n.translate("Polaris.DataTable.totalRowHeading"),
            plural: i18n.translate("Polaris.DataTable.totalsRowHeading")
          };
          return totals && totals.filter((total) => total !== "").length > 1 ? totalsLabel.plural : totalsLabel.singular;
        }, this.renderTotals = ({
          total,
          index
        }) => {
          let fixedFirstColumns = this.fixedFirstColumns(), id = `totals-cell-${index}`, {
            truncate = !1,
            verticalAlign,
            columnContentTypes
          } = this.props, content, contentType;
          index === 0 && (content = this.totalsRowHeading()), total !== "" && index > 0 && (contentType = columnContentTypes[index], content = total);
          let totalInFooter = this.props.showTotalsInFooter;
          return /* @__PURE__ */ React2.createElement(Cell.Cell, {
            total: !0,
            totalInFooter,
            nthColumn: index <= fixedFirstColumns - 1,
            firstColumn: index === 0,
            key: id,
            content,
            contentType,
            truncate,
            verticalAlign
          });
        }, this.getColSpan = (rowLength, headingsLength, contentTypesLength, cellIndex) => {
          if (this.fixedFirstColumns())
            return 1;
          let rowLen = rowLength || 1, colLen = headingsLength || contentTypesLength, colSpan = Math.floor(colLen / rowLen), remainder = colLen % rowLen;
          return cellIndex === 0 ? colSpan + remainder : colSpan;
        }, this.defaultRenderRow = ({
          row,
          index,
          inFixedNthColumn,
          rowHeights
        }) => {
          let {
            columnContentTypes,
            truncate = !1,
            verticalAlign,
            hoverable = !0,
            headings
          } = this.props, {
            condensed
          } = this.state, fixedFirstColumns = this.fixedFirstColumns(), className = css.classNames(DataTable_module.default.TableRow, hoverable && DataTable_module.default.hoverable);
          return /* @__PURE__ */ React2.createElement("tr", {
            key: `row-${index}`,
            className,
            onMouseEnter: this.handleHover(index),
            onMouseLeave: this.handleHover()
          }, row.map((content, cellIndex) => {
            let hovered = index === this.state.rowHovered, id = `cell-${cellIndex}-row-${index}`, colSpan = this.getColSpan(row.length, headings.length, columnContentTypes.length, cellIndex);
            return /* @__PURE__ */ React2.createElement(Cell.Cell, {
              key: id,
              content,
              contentType: columnContentTypes[cellIndex],
              nthColumn: cellIndex <= fixedFirstColumns - 1,
              firstColumn: cellIndex === 0,
              truncate,
              verticalAlign,
              colSpan,
              hovered,
              style: rowHeights ? {
                height: `${rowHeights[index]}px`
              } : {},
              inFixedNthColumn: condensed && inFixedNthColumn
            });
          }));
        }, this.defaultOnSort = (headingIndex) => {
          let {
            onSort,
            defaultSortDirection = "ascending",
            initialSortColumnIndex
          } = this.props, {
            sortDirection = defaultSortDirection,
            sortedColumnIndex = initialSortColumnIndex
          } = this.state, newSortDirection = defaultSortDirection;
          return sortedColumnIndex === headingIndex && (newSortDirection = sortDirection === "ascending" ? "descending" : "ascending"), () => {
            this.setState({
              sortDirection: newSortDirection,
              sortedColumnIndex: headingIndex
            }, () => {
              onSort && onSort(headingIndex, newSortDirection);
            });
          };
        };
      }
      componentDidMount() {
        this.handleResize();
      }
      componentDidUpdate(prevProps) {
        isEqual(prevProps, this.props) || this.handleResize();
      }
      componentWillUnmount() {
        this.handleResize.cancel();
      }
      render() {
        let {
          headings,
          totals,
          showTotalsInFooter,
          rows,
          footerContent,
          hideScrollIndicator = !1,
          increasedTableDensity = !1,
          hasZebraStripingOnData = !1,
          stickyHeader = !1,
          hasFixedFirstColumn: fixedFirstColumn = !1,
          pagination
        } = this.props, {
          condensed,
          columnVisibilityData,
          isScrolledFarthestLeft,
          isScrolledFarthestRight
        } = this.state, fixedFirstColumns = this.fixedFirstColumns(), rowCountIsEven = rows.length % 2 === 0, className = css.classNames(DataTable_module.default.DataTable, condensed && DataTable_module.default.condensed, totals && DataTable_module.default.ShowTotals, showTotalsInFooter && DataTable_module.default.ShowTotalsInFooter, hasZebraStripingOnData && DataTable_module.default.ZebraStripingOnData, hasZebraStripingOnData && rowCountIsEven && DataTable_module.default.RowCountIsEven), wrapperClassName = css.classNames(DataTable_module.default.TableWrapper, condensed && DataTable_module.default.condensed, increasedTableDensity && DataTable_module.default.IncreasedTableDensity, stickyHeader && DataTable_module.default.StickyHeaderEnabled), headingMarkup = /* @__PURE__ */ React2.createElement("tr", null, headings.map((heading, index) => this.renderHeading({
          heading,
          headingIndex: index,
          inFixedNthColumn: !1,
          inStickyHeader: !1
        }))), totalsMarkup = totals ? /* @__PURE__ */ React2.createElement("tr", null, totals.map((total, index) => this.renderTotals({
          total,
          index
        }))) : null, nthColumns = rows.map((row) => row.slice(0, fixedFirstColumns)), nthHeadings = headings.slice(0, fixedFirstColumns), nthTotals = totals?.slice(0, fixedFirstColumns), tableHeaderRows = this.table.current?.children[0].childNodes, tableBodyRows = this.table.current?.children[1].childNodes, headerRowHeights = getRowClientHeights(tableHeaderRows), bodyRowHeights = getRowClientHeights(tableBodyRows), fixedNthColumnMarkup = condensed && fixedFirstColumns !== 0 && /* @__PURE__ */ React2.createElement("table", {
          className: css.classNames(DataTable_module.default.FixedFirstColumn, !isScrolledFarthestLeft && DataTable_module.default.separate),
          style: {
            width: `${columnVisibilityData[fixedFirstColumns - 1]?.rightEdge}px`
          }
        }, /* @__PURE__ */ React2.createElement("thead", null, /* @__PURE__ */ React2.createElement("tr", {
          style: {
            height: `${headerRowHeights[0]}px`
          }
        }, nthHeadings.map((heading, index) => this.renderHeading({
          heading,
          headingIndex: index,
          inFixedNthColumn: !0,
          inStickyHeader: !1
        }))), totals && !showTotalsInFooter && /* @__PURE__ */ React2.createElement("tr", {
          style: {
            height: `${headerRowHeights[1]}px`
          }
        }, nthTotals?.map((total, index) => this.renderTotals({
          total,
          index
        })))), /* @__PURE__ */ React2.createElement("tbody", null, nthColumns.map((row, index) => this.defaultRenderRow({
          row,
          index,
          inFixedNthColumn: !0,
          rowHeights: bodyRowHeights
        }))), totals && showTotalsInFooter && /* @__PURE__ */ React2.createElement("tfoot", null, /* @__PURE__ */ React2.createElement("tr", null, nthTotals?.map((total, index) => this.renderTotals({
          total,
          index
        }))))), bodyMarkup = rows.map((row, index) => this.defaultRenderRow({
          row,
          index,
          inFixedNthColumn: !1
        })), footerMarkup = footerContent ? /* @__PURE__ */ React2.createElement("div", {
          className: DataTable_module.default.Footer
        }, footerContent) : null, paginationMarkup = pagination ? /* @__PURE__ */ React2.createElement(Pagination.Pagination, Object.assign({
          type: "table"
        }, pagination)) : null, headerTotalsMarkup = showTotalsInFooter ? null : totalsMarkup, footerTotalsMarkup = showTotalsInFooter ? /* @__PURE__ */ React2.createElement("tfoot", null, totalsMarkup) : null, navigationMarkup = (location) => hideScrollIndicator ? null : /* @__PURE__ */ React2.createElement(Navigation.Navigation, {
          columnVisibilityData,
          isScrolledFarthestLeft,
          isScrolledFarthestRight,
          navigateTableLeft: this.navigateTable("left"),
          navigateTableRight: this.navigateTable("right"),
          fixedFirstColumns,
          setRef: (ref) => {
            location === "header" ? this.headerNav = ref : location === "sticky" && (this.stickyNav = ref);
          }
        }), stickyHeaderMarkup = stickyHeader ? /* @__PURE__ */ React2.createElement(AfterInitialMount.AfterInitialMount, null, /* @__PURE__ */ React2.createElement("div", {
          className: DataTable_module.default.StickyHeaderWrapper,
          role: "presentation"
        }, /* @__PURE__ */ React2.createElement(Sticky.Sticky, {
          boundingElement: this.dataTable.current,
          onStickyChange: (isSticky) => {
            this.changeHeadingFocus(), this.stickyHeaderActive = isSticky;
          }
        }, (isSticky) => {
          let stickyHeaderInnerClassNames = css.classNames(DataTable_module.default.StickyHeaderInner, isSticky && DataTable_module.default["StickyHeaderInner-isSticky"]), stickyHeaderTableClassNames = css.classNames(DataTable_module.default.StickyHeaderTable, !isScrolledFarthestLeft && DataTable_module.default.separate);
          return /* @__PURE__ */ React2.createElement("div", {
            className: stickyHeaderInnerClassNames
          }, /* @__PURE__ */ React2.createElement("div", null, navigationMarkup("sticky")), /* @__PURE__ */ React2.createElement("table", {
            className: stickyHeaderTableClassNames,
            ref: this.stickyTable
          }, /* @__PURE__ */ React2.createElement("thead", null, /* @__PURE__ */ React2.createElement("tr", {
            className: DataTable_module.default.StickyTableHeadingsRow
          }, headings.map((heading, index) => this.renderHeading({
            heading,
            headingIndex: index,
            inFixedNthColumn: Boolean(index <= fixedFirstColumns - 1 && fixedFirstColumns),
            inStickyHeader: !0
          }))))));
        }))) : null;
        return /* @__PURE__ */ React2.createElement("div", {
          className: wrapperClassName,
          ref: this.dataTable
        }, stickyHeaderMarkup, navigationMarkup("header"), /* @__PURE__ */ React2.createElement("div", {
          className
        }, /* @__PURE__ */ React2.createElement("div", {
          className: DataTable_module.default.ScrollContainer,
          ref: this.scrollContainer
        }, /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
          event: "resize",
          handler: this.handleResize
        }), /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
          capture: !0,
          passive: !0,
          event: "scroll",
          handler: this.scrollListener
        }), fixedNthColumnMarkup, /* @__PURE__ */ React2.createElement("table", {
          className: DataTable_module.default.Table,
          ref: this.table
        }, /* @__PURE__ */ React2.createElement("thead", null, headingMarkup, headerTotalsMarkup), /* @__PURE__ */ React2.createElement("tbody", null, bodyMarkup), footerTotalsMarkup)), paginationMarkup, footerMarkup));
      }
      fixedFirstColumns() {
        let {
          hasFixedFirstColumn,
          fixedFirstColumns = 0,
          headings
        } = this.props, numberOfFixedFirstColumns = hasFixedFirstColumn && !fixedFirstColumns ? 1 : fixedFirstColumns;
        return numberOfFixedFirstColumns >= headings.length ? 0 : numberOfFixedFirstColumns;
      }
      // eslint-disable-next-line @shopify/react-no-multiple-render-methods
      // eslint-disable-next-line @shopify/react-no-multiple-render-methods
    };
    function DataTable4(props) {
      let i18n = hooks.useI18n();
      return /* @__PURE__ */ React2.createElement(DataTableInner, Object.assign({}, props, {
        i18n
      }));
    }
    exports.DataTable = DataTable4;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/dates.js
var require_dates = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/dates.js"(exports) {
    "use strict";
    function getWeeksForMonth(month, year, weekStartsOn = 0) {
      let firstOfMonth = new Date(year, month, 1), firstDayOfWeek = firstOfMonth.getDay(), weeks = [[]], currentWeek = weeks[0], currentDate = firstOfMonth, orderedWeekday = getOrderedWeekdays(weekStartsOn);
      for (let i = 0; i < orderedWeekday.indexOf(firstDayOfWeek); i++)
        currentWeek.push(null);
      for (; currentDate.getMonth() === month; )
        currentWeek.length === 7 && (currentWeek = [], weeks.push(currentWeek)), currentWeek.push(currentDate), currentDate = new Date(year, month, currentDate.getDate() + 1);
      for (; currentWeek.length < 7; )
        currentWeek.push(null);
      return weeks;
    }
    function dateIsInRange(day, range) {
      if (day == null)
        return !1;
      let {
        start,
        end
      } = range;
      return Boolean(start && day > start && end && day < end);
    }
    function dateIsSelected(day, range) {
      if (day == null)
        return !1;
      let {
        start,
        end
      } = range;
      return Boolean(start && isSameDay(start, day) || end && isSameDay(end, day));
    }
    function isSameDay(day1, day2) {
      return day1.getDate() === day2.getDate() && day1.getMonth() === day2.getMonth() && day1.getFullYear() === day2.getFullYear();
    }
    function getNewRange(range, selected) {
      if (range == null)
        return {
          start: selected,
          end: selected
        };
      let {
        start,
        end
      } = range;
      return end && (isDateAfter(start, end) || isDateBefore(start, end)) ? {
        start: selected,
        end: selected
      } : start ? isDateBefore(selected, start) ? {
        start: selected,
        end: selected
      } : {
        start,
        end: selected
      } : end ? isDateBefore(selected, end) ? {
        start: selected,
        end
      } : {
        start: start || end,
        end: selected
      } : {
        start: selected,
        end: selected
      };
    }
    function getNextDisplayMonth(month) {
      return month === 11 ? 0 : month + 1;
    }
    function getNextDisplayYear(month, year) {
      return month === 11 ? year + 1 : year;
    }
    function getPreviousDisplayMonth(month) {
      return month === 0 ? 11 : month - 1;
    }
    function getPreviousDisplayYear(month, year) {
      return month === 0 ? year - 1 : year;
    }
    function isDateAfter(date, dateToCompare) {
      return date.getTime() > dateToCompare.getTime();
    }
    function isDateBefore(date, dateToCompare) {
      return date.getTime() < dateToCompare.getTime();
    }
    function isDateDisabled(date, datesToCompare) {
      return datesToCompare.some((dateToCompare) => date.getTime() === dateToCompare.getTime());
    }
    var WEEKDAYS = [0, 1, 2, 3, 4, 5, 6];
    function getOrderedWeekdays(weekStartsOn) {
      let weekDays = [...WEEKDAYS];
      return [...weekDays.splice(weekStartsOn), ...weekDays];
    }
    exports.dateIsInRange = dateIsInRange;
    exports.dateIsSelected = dateIsSelected;
    exports.getNewRange = getNewRange;
    exports.getNextDisplayMonth = getNextDisplayMonth;
    exports.getNextDisplayYear = getNextDisplayYear;
    exports.getOrderedWeekdays = getOrderedWeekdays;
    exports.getPreviousDisplayMonth = getPreviousDisplayMonth;
    exports.getPreviousDisplayYear = getPreviousDisplayYear;
    exports.getWeeksForMonth = getWeeksForMonth;
    exports.isDateAfter = isDateAfter;
    exports.isDateBefore = isDateBefore;
    exports.isDateDisabled = isDateDisabled;
    exports.isSameDay = isSameDay;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DatePicker/utilities.js
var require_utilities8 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DatePicker/utilities.js"(exports) {
    "use strict";
    function monthName(month) {
      switch (month) {
        case 0:
          return "january";
        case 1:
          return "february";
        case 2:
          return "march";
        case 3:
          return "april";
        case 4:
          return "may";
        case 5:
          return "june";
        case 6:
          return "july";
        case 7:
          return "august";
        case 8:
          return "september";
        case 9:
          return "october";
        case 10:
          return "november";
        case 11:
          return "december";
      }
    }
    function weekdayName(weekday) {
      switch (weekday) {
        case 0:
          return "sunday";
        case 1:
          return "monday";
        case 2:
          return "tuesday";
        case 3:
          return "wednesday";
        case 4:
          return "thursday";
        case 5:
          return "friday";
        case 6:
          return "saturday";
      }
    }
    exports.monthName = monthName;
    exports.weekdayName = weekdayName;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DatePicker/DatePicker.css.js
var require_DatePicker_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DatePicker/DatePicker.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      DatePicker: "Polaris-DatePicker",
      MonthLayout: "Polaris-DatePicker__MonthLayout",
      MonthContainer: "Polaris-DatePicker__MonthContainer",
      Month: "Polaris-DatePicker__Month",
      DayCell: "Polaris-DatePicker__DayCell",
      "DayCell-inRange": "Polaris-DatePicker__DayCell--inRange",
      Day: "Polaris-DatePicker__Day",
      "Day-inRange": "Polaris-DatePicker__Day--inRange",
      "Day-selected": "Polaris-DatePicker__Day--selected",
      "Day-disabled": "Polaris-DatePicker__Day--disabled",
      EmptyDayCell: "Polaris-DatePicker__EmptyDayCell",
      Weekday: "Polaris-DatePicker__Weekday",
      Header: "Polaris-DatePicker__Header",
      Title: "Polaris-DatePicker__Title",
      "Day-firstInRange": "Polaris-DatePicker__Day--firstInRange",
      "Day-hasRange": "Polaris-DatePicker__Day--hasRange",
      "Day-hoverRight": "Polaris-DatePicker__Day--hoverRight",
      "Day-lastInRange": "Polaris-DatePicker__Day--lastInRange",
      Week: "Polaris-DatePicker__Week"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DatePicker/components/Weekday/Weekday.js
var require_Weekday = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DatePicker/components/Weekday/Weekday.js"(exports) {
    "use strict";
    var React2 = require_react(), DatePicker_module = require_DatePicker_css(), Text4 = require_Text(), Weekday = /* @__PURE__ */ React2.memo(function({
      label,
      title,
      current
    }) {
      return /* @__PURE__ */ React2.createElement("th", {
        "aria-label": label,
        scope: "col",
        className: DatePicker_module.default.Weekday
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "bodySm",
        alignment: "center",
        fontWeight: current ? "bold" : "regular",
        tone: current ? void 0 : "subdued"
      }, title));
    });
    exports.Weekday = Weekday;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DatePicker/components/Day/Day.js
var require_Day = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DatePicker/components/Day/Day.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), dates = require_dates(), utilities = require_utilities8(), DatePicker_module = require_DatePicker_css(), hooks = require_hooks2(), Text4 = require_Text(), Day = /* @__PURE__ */ React2.memo(function({
      day,
      focused,
      onClick,
      onHover = noop,
      onFocus = noop,
      selected,
      inRange,
      inHoveringRange,
      disabled,
      lastDayOfMonth,
      isLastSelectedDay,
      isFirstSelectedDay,
      isHoveringRight,
      rangeIsDifferent,
      weekday,
      selectedAccessibilityLabelPrefix
    }) {
      let i18n = hooks.useI18n(), dayNode = React2.useRef(null), hoverValue = lastDayOfMonth || day;
      if (React2.useEffect(() => {
        focused && dayNode.current && dayNode.current.focus();
      }, [focused]), !day)
        return /* @__PURE__ */ React2.createElement("td", {
          className: DatePicker_module.default.EmptyDayCell,
          onMouseOver: () => onHover(hoverValue)
        });
      let handleClick = onClick && !disabled ? onClick.bind(null, day) : noop, today = dates.isSameDay(/* @__PURE__ */ new Date(), day), dayCellClassName = css.classNames(DatePicker_module.default.DayCell, selected && DatePicker_module.default["DayCell-selected"], (inRange || inHoveringRange) && !disabled && DatePicker_module.default["DayCell-inRange"], isLastSelectedDay && DatePicker_module.default["DayCell-lastInRange"], isFirstSelectedDay && DatePicker_module.default["DayCell-firstInRange"], isHoveringRight && DatePicker_module.default["DayCell-hoverRight"], rangeIsDifferent && DatePicker_module.default["DayCell-hasRange"]), dayClassName = css.classNames(DatePicker_module.default.Day, selected && DatePicker_module.default["Day-selected"], disabled && DatePicker_module.default["Day-disabled"], (inRange || inHoveringRange) && !disabled && DatePicker_module.default["Day-inRange"], isLastSelectedDay && DatePicker_module.default["Day-lastInRange"], isFirstSelectedDay && DatePicker_module.default["Day-firstInRange"], isHoveringRight && DatePicker_module.default["Day-hoverRight"], rangeIsDifferent && DatePicker_module.default["Day-hasRange"]), date = day.getDate(), tabIndex = (focused || selected || today || date === 1) && !disabled ? 0 : -1, ariaLabel = [selected && selectedAccessibilityLabelPrefix ? `${selectedAccessibilityLabelPrefix} ` : "", `${today ? i18n.translate("Polaris.DatePicker.today") : ""}`, `${weekday || ""} `, `${i18n.translate(`Polaris.DatePicker.months.${utilities.monthName(day.getMonth())}`)} `, `${date} `, `${day.getFullYear()}`].join("");
      return /* @__PURE__ */ React2.createElement("td", {
        className: dayCellClassName
      }, /* @__PURE__ */ React2.createElement("button", {
        onFocus: () => onFocus(day),
        type: "button",
        ref: dayNode,
        tabIndex,
        className: dayClassName,
        onMouseOver: () => onHover(hoverValue),
        onClick: handleClick,
        "aria-label": ariaLabel,
        "aria-disabled": disabled,
        "aria-pressed": selected
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "bodySm",
        alignment: "center",
        fontWeight: today ? "bold" : "regular"
      }, date)));
    });
    function noop() {
    }
    exports.Day = Day;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DatePicker/components/Month/Month.js
var require_Month = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DatePicker/components/Month/Month.js"(exports) {
    "use strict";
    var React2 = require_react(), dates = require_dates(), DatePicker_module = require_DatePicker_css(), utilities = require_utilities8(), Weekday = require_Weekday(), Day = require_Day(), hooks = require_hooks2(), Text4 = require_Text();
    function Month({
      focusedDate,
      selected,
      hoverDate,
      disableDatesBefore,
      disableDatesAfter,
      disableSpecificDates,
      allowRange,
      onChange = noop,
      onHover = noop,
      onFocus = noop,
      month,
      year,
      weekStartsOn,
      accessibilityLabelPrefixes
    }) {
      let i18n = hooks.useI18n(), isInHoveringRange = allowRange ? hoveringDateIsInRange : () => !1, now = /* @__PURE__ */ new Date(), current = now.getMonth() === month && now.getFullYear() === year, weeks = React2.useMemo(() => dates.getWeeksForMonth(month, year, weekStartsOn), [month, weekStartsOn, year]), weekdays = dates.getOrderedWeekdays(weekStartsOn).map((weekday) => /* @__PURE__ */ React2.createElement(Weekday.Weekday, {
        key: weekday,
        title: i18n.translate(`Polaris.DatePicker.daysAbbreviated.${utilities.weekdayName(weekday)}`),
        label: weekdayLabel(weekday),
        current: current && (/* @__PURE__ */ new Date()).getDay() === weekday
      })), handleDateClick = React2.useCallback((selectedDate) => {
        onChange(dates.getNewRange(allowRange ? selected : void 0, selectedDate));
      }, [allowRange, onChange, selected]), lastDayOfMonth = React2.useMemo(() => new Date(year, month + 1, 0), [month, year]);
      function renderWeek(day, dayIndex) {
        if (day == null)
          return /* @__PURE__ */ React2.createElement(Day.Day, {
            key: dayIndex,
            onHover,
            lastDayOfMonth
          });
        let disabled = disableDatesBefore && dates.isDateBefore(day, disableDatesBefore) || disableDatesAfter && dates.isDateAfter(day, disableDatesAfter) || disableSpecificDates && dates.isDateDisabled(day, disableSpecificDates), isFirstSelectedDay = allowRange && selected && isDateStart(day, selected), isLastSelectedDay = allowRange && selected && (!dates.isSameDay(selected.start, selected.end) && isDateEnd(day, selected) || hoverDate && dates.isSameDay(selected.start, selected.end) && dates.isDateAfter(hoverDate, selected.start) && dates.isSameDay(day, hoverDate) && !isFirstSelectedDay), rangeIsDifferent = !(selected && dates.isSameDay(selected.start, selected.end)), isHoveringRight = hoverDate && dates.isDateBefore(day, hoverDate), [firstAccessibilityLabelPrefix, lastAccessibilityLabelPrefix] = accessibilityLabelPrefixes, accessibilityLabelPrefix;
        return allowRange && isFirstSelectedDay || !allowRange && firstAccessibilityLabelPrefix ? accessibilityLabelPrefix = firstAccessibilityLabelPrefix : allowRange && isLastSelectedDay && (accessibilityLabelPrefix = lastAccessibilityLabelPrefix), /* @__PURE__ */ React2.createElement(Day.Day, {
          selectedAccessibilityLabelPrefix: accessibilityLabelPrefix,
          weekday: weekdayLabel(dayIndex),
          focused: focusedDate != null && dates.isSameDay(day, focusedDate),
          day,
          key: dayIndex,
          onFocus,
          onClick: handleDateClick,
          onHover,
          selected: selected != null && dates.dateIsSelected(day, selected),
          inRange: selected != null && dates.dateIsInRange(day, selected),
          disabled,
          inHoveringRange: selected != null && hoverDate != null && isInHoveringRange(day, selected, hoverDate),
          isLastSelectedDay,
          isFirstSelectedDay,
          isHoveringRight,
          rangeIsDifferent
        });
      }
      let weeksMarkup = weeks.map((week, index) => /* @__PURE__ */ React2.createElement("tr", {
        className: DatePicker_module.default.Week,
        key: index
      }, week.map(renderWeek)));
      return /* @__PURE__ */ React2.createElement("div", {
        className: DatePicker_module.default.MonthContainer
      }, /* @__PURE__ */ React2.createElement("table", {
        role: "grid",
        className: DatePicker_module.default.Month
      }, /* @__PURE__ */ React2.createElement("caption", {
        className: DatePicker_module.default.Title
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "bodyMd",
        alignment: "center",
        fontWeight: current ? "bold" : "medium"
      }, i18n.translate(`Polaris.DatePicker.months.${utilities.monthName(month)}`), " ", year)), /* @__PURE__ */ React2.createElement("thead", null, /* @__PURE__ */ React2.createElement("tr", {
        className: DatePicker_module.default.WeekHeadings
      }, weekdays)), /* @__PURE__ */ React2.createElement("tbody", null, weeksMarkup)));
      function weekdayLabel(weekday) {
        return i18n.translate(`Polaris.DatePicker.days.${utilities.weekdayName(weekday)}`);
      }
    }
    function noop() {
    }
    function hoveringDateIsInRange(day, range, hoverEndDate) {
      if (day == null)
        return !1;
      let {
        start,
        end
      } = range;
      return Boolean(dates.isSameDay(start, end) && day > start && day <= hoverEndDate);
    }
    function isDateEnd(day, range) {
      if (day == null)
        return !1;
      let {
        end
      } = range;
      return Boolean(end && dates.isSameDay(end, day));
    }
    function isDateStart(day, range) {
      if (day == null)
        return !1;
      let {
        start
      } = range;
      return Boolean(start && dates.isSameDay(start, day));
    }
    exports.Month = Month;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DatePicker/DatePicker.js
var require_DatePicker = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DatePicker/DatePicker.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), dates = require_dates(), utilities = require_utilities8(), DatePicker_module = require_DatePicker_css(), Month = require_Month(), hooks = require_hooks2(), Button4 = require_Button();
    function DatePicker({
      id,
      selected,
      month,
      year,
      allowRange,
      multiMonth,
      disableDatesBefore,
      disableDatesAfter,
      disableSpecificDates,
      weekStartsOn = 0,
      dayAccessibilityLabelPrefix,
      onMonthChange,
      onChange = noop
    }) {
      let i18n = hooks.useI18n(), [hoverDate, setHoverDate] = React2.useState(void 0), [focusDate, setFocusDate] = React2.useState(void 0);
      React2.useEffect(() => {
        setFocusDate(void 0);
      }, [selected]);
      let handleFocus = React2.useCallback((date) => {
        setFocusDate(date);
      }, []), setFocusDateAndHandleMonthChange = React2.useCallback((date) => {
        onMonthChange && onMonthChange(date.getMonth(), date.getFullYear()), setHoverDate(date), setFocusDate(date);
      }, [onMonthChange]), handleDateSelection = React2.useCallback((range) => {
        let {
          end
        } = range;
        setHoverDate(end), setFocusDate(new Date(end)), onChange(range);
      }, [onChange]), handleMonthChangeClick = React2.useCallback((month2, year2) => {
        onMonthChange && (setFocusDate(void 0), onMonthChange(month2, year2));
      }, [onMonthChange]), handleHover = React2.useCallback((date) => {
        setHoverDate(date);
      }, []), handleKeyUp = React2.useCallback((event) => {
        let {
          key
        } = event, range = deriveRange(selected), focusedDate = focusDate || range && range.start;
        if (focusedDate != null) {
          if (key === "ArrowUp") {
            let previousWeek = new Date(focusedDate);
            previousWeek.setDate(focusedDate.getDate() - 7), disableDatesBefore && dates.isDateBefore(previousWeek, disableDatesBefore) || disableSpecificDates && dates.isDateDisabled(previousWeek, disableSpecificDates) || setFocusDateAndHandleMonthChange(previousWeek);
          }
          if (key === "ArrowDown") {
            let nextWeek = new Date(focusedDate);
            nextWeek.setDate(focusedDate.getDate() + 7), disableDatesAfter && dates.isDateAfter(nextWeek, disableDatesAfter) || disableSpecificDates && dates.isDateDisabled(nextWeek, disableSpecificDates) || setFocusDateAndHandleMonthChange(nextWeek);
          }
          if (key === "ArrowRight") {
            let tomorrow = new Date(focusedDate);
            tomorrow.setDate(focusedDate.getDate() + 1), disableDatesAfter && dates.isDateAfter(tomorrow, disableDatesAfter) || disableSpecificDates && dates.isDateDisabled(tomorrow, disableSpecificDates) || setFocusDateAndHandleMonthChange(tomorrow);
          }
          if (key === "ArrowLeft") {
            let yesterday = new Date(focusedDate);
            yesterday.setDate(focusedDate.getDate() - 1), disableDatesBefore && dates.isDateBefore(yesterday, disableDatesBefore) || disableSpecificDates && dates.isDateDisabled(yesterday, disableSpecificDates) || setFocusDateAndHandleMonthChange(yesterday);
          }
        }
      }, [disableDatesAfter, disableDatesBefore, disableSpecificDates, focusDate, selected, setFocusDateAndHandleMonthChange]), showNextYear = dates.getNextDisplayYear(month, year), showNextMonth = dates.getNextDisplayMonth(month), showNextToNextYear = dates.getNextDisplayYear(showNextMonth, showNextYear), showNextToNextMonth = dates.getNextDisplayMonth(showNextMonth), showPreviousYear = dates.getPreviousDisplayYear(month, year), showPreviousMonth = dates.getPreviousDisplayMonth(month), previousMonthName = i18n.translate(`Polaris.DatePicker.months.${utilities.monthName(showPreviousMonth)}`), nextMonth = multiMonth ? i18n.translate(`Polaris.DatePicker.months.${utilities.monthName(showNextToNextMonth)}`) : i18n.translate(`Polaris.DatePicker.months.${utilities.monthName(showNextMonth)}`), nextYear = multiMonth ? showNextToNextYear : showNextYear, monthIsSelected = React2.useMemo(() => deriveRange(selected), [selected]), firstDatePickerAccessibilityLabelPrefix = allowRange ? i18n.translate("Polaris.DatePicker.start") : dayAccessibilityLabelPrefix, secondDatePickerAccessibilityLabelPrefix = i18n.translate("Polaris.DatePicker.end"), accessibilityLabelPrefixes = [firstDatePickerAccessibilityLabelPrefix, secondDatePickerAccessibilityLabelPrefix], secondDatePicker = multiMonth ? /* @__PURE__ */ React2.createElement(Month.Month, {
        onFocus: handleFocus,
        focusedDate: focusDate,
        month: showNextMonth,
        year: showNextYear,
        selected: monthIsSelected,
        hoverDate,
        onChange: handleDateSelection,
        onHover: handleHover,
        disableDatesBefore,
        disableDatesAfter,
        disableSpecificDates,
        allowRange,
        weekStartsOn,
        accessibilityLabelPrefixes
      }) : null, datePickerClassName = css.classNames(DatePicker_module.default.DatePicker);
      return /* @__PURE__ */ React2.createElement("div", {
        id,
        className: datePickerClassName,
        onKeyDown: handleKeyDown,
        onKeyUp: handleKeyUp
      }, /* @__PURE__ */ React2.createElement("div", {
        className: DatePicker_module.default.Header
      }, /* @__PURE__ */ React2.createElement(Button4.Button, {
        variant: "tertiary",
        icon: polarisIcons.ArrowLeftIcon,
        accessibilityLabel: i18n.translate("Polaris.DatePicker.previousMonth", {
          previousMonthName,
          showPreviousYear
        }),
        onClick: () => handleMonthChangeClick(showPreviousMonth, showPreviousYear)
      }), /* @__PURE__ */ React2.createElement(Button4.Button, {
        variant: "tertiary",
        icon: polarisIcons.ArrowRightIcon,
        accessibilityLabel: i18n.translate("Polaris.DatePicker.nextMonth", {
          nextMonth,
          nextYear
        }),
        onClick: () => handleMonthChangeClick(showNextMonth, showNextYear)
      })), /* @__PURE__ */ React2.createElement("div", {
        className: DatePicker_module.default.MonthLayout
      }, /* @__PURE__ */ React2.createElement(Month.Month, {
        onFocus: handleFocus,
        focusedDate: focusDate,
        month,
        year,
        selected: deriveRange(selected),
        hoverDate,
        onChange: handleDateSelection,
        onHover: handleHover,
        disableDatesBefore,
        disableDatesAfter,
        disableSpecificDates,
        allowRange,
        weekStartsOn,
        accessibilityLabelPrefixes
      }), secondDatePicker));
    }
    function noop() {
    }
    function handleKeyDown(event) {
      let {
        key
      } = event;
      (key === "ArrowUp" || key === "ArrowDown" || key === "ArrowLeft" || key === "ArrowRight") && (event.preventDefault(), event.stopPropagation());
    }
    function deriveRange(selected) {
      return selected instanceof Date ? {
        start: selected,
        end: selected
      } : selected;
    }
    exports.DatePicker = DatePicker;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DescriptionList/DescriptionList.css.js
var require_DescriptionList_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DescriptionList/DescriptionList.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      DescriptionList: "Polaris-DescriptionList",
      Term: "Polaris-DescriptionList__Term",
      spacingTight: "Polaris-DescriptionList--spacingTight",
      Description: "Polaris-DescriptionList__Description"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DescriptionList/DescriptionList.js
var require_DescriptionList = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DescriptionList/DescriptionList.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), DescriptionList_module = require_DescriptionList_css(), Text4 = require_Text();
    function DescriptionList({
      items,
      gap = "loose"
    }) {
      let terms = items.reduce((allTerms, {
        term,
        description
      }, index) => [...allTerms, /* @__PURE__ */ React2.createElement("dt", {
        key: `dt${index}`,
        className: DescriptionList_module.default.Term
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "headingSm"
      }, term)), /* @__PURE__ */ React2.createElement("dd", {
        key: `dd${index}`,
        className: DescriptionList_module.default.Description
      }, description)], []), className = css.classNames(DescriptionList_module.default.DescriptionList, gap === "tight" && DescriptionList_module.default.spacingTight);
      return /* @__PURE__ */ React2.createElement("dl", {
        className
      }, terms);
    }
    exports.DescriptionList = DescriptionList;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Divider/Divider.css.js
var require_Divider_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Divider/Divider.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Divider: "Polaris-Divider"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Divider/Divider.js
var require_Divider = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Divider/Divider.js"(exports) {
    "use strict";
    var React2 = require_react(), Divider_module = require_Divider_css(), Divider2 = ({
      borderColor = "border-secondary",
      borderWidth = "025"
    }) => {
      let borderColorValue = borderColor === "transparent" ? borderColor : `var(--p-color-${borderColor})`;
      return /* @__PURE__ */ React2.createElement("hr", {
        className: Divider_module.default.Divider,
        style: {
          borderBlockStart: `var(--p-border-width-${borderWidth}) solid ${borderColorValue}`
        }
      });
    };
    exports.Divider = Divider2;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/capitalize.js
var require_capitalize = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/capitalize.js"(exports) {
    "use strict";
    function capitalize(word = "") {
      let wordLower = word.toLowerCase();
      return wordLower.charAt(0).toUpperCase() + wordLower.slice(1);
    }
    exports.capitalize = capitalize;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DropZone/utils/index.js
var require_utils3 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DropZone/utils/index.js"(exports) {
    "use strict";
    var dragEvents = ["dragover", "dragenter", "drop"];
    function fileAccepted(file, accept) {
      return file.type === "application/x-moz-file" || accepts(file, accept);
    }
    function getDataTransferFiles(event) {
      if (isDragEvent(event) && event.dataTransfer) {
        let dt = event.dataTransfer;
        if (dt.files && dt.files.length)
          return Array.from(dt.files);
        if (dt.items && dt.items.length)
          return Array.from(dt.items);
      } else if (isChangeEvent(event) && event.target.files)
        return Array.from(event.target.files);
      return [];
    }
    function accepts(file, acceptedFiles) {
      if (file && acceptedFiles) {
        let fileName = file.name || "", mimeType = file.type || "", baseMimeType = mimeType.replace(/\/.*$/, "");
        return (Array.isArray(acceptedFiles) ? acceptedFiles : acceptedFiles.split(",")).some((type) => {
          let validType = type.trim();
          return validType.startsWith(".") ? fileName.toLowerCase().endsWith(validType.toLowerCase()) : validType.endsWith("/*") ? baseMimeType === validType.replace(/\/.*$/, "") : mimeType === validType;
        });
      }
      return !0;
    }
    function isDragEvent(event) {
      return dragEvents.indexOf(event.type) > 0;
    }
    function isChangeEvent(event) {
      return Object.prototype.hasOwnProperty.call(event, "target");
    }
    var defaultAllowMultiple = !0;
    function createAllowMultipleKey(allowMultiple) {
      return allowMultiple ? "allowMultiple" : "single";
    }
    exports.createAllowMultipleKey = createAllowMultipleKey;
    exports.defaultAllowMultiple = defaultAllowMultiple;
    exports.fileAccepted = fileAccepted;
    exports.getDataTransferFiles = getDataTransferFiles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DropZone/context.js
var require_context16 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DropZone/context.js"(exports) {
    "use strict";
    var React2 = require_react(), index = require_utils3(), DropZoneContext = /* @__PURE__ */ React2.createContext({
      disabled: !1,
      focused: !1,
      size: "extraLarge",
      type: "file",
      measuring: !1,
      allowMultiple: index.defaultAllowMultiple
    });
    exports.DropZoneContext = DropZoneContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DropZone/DropZone.css.js
var require_DropZone_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DropZone/DropZone.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      DropZone: "Polaris-DropZone",
      focused: "Polaris-DropZone--focused",
      noOutline: "Polaris-DropZone--noOutline",
      hasOutline: "Polaris-DropZone--hasOutline",
      isDisabled: "Polaris-DropZone--isDisabled",
      isDragging: "Polaris-DropZone--isDragging",
      sizeLarge: "Polaris-DropZone--sizeLarge",
      sizeMedium: "Polaris-DropZone--sizeMedium",
      sizeSmall: "Polaris-DropZone--sizeSmall",
      measuring: "Polaris-DropZone--measuring",
      Container: "Polaris-DropZone__Container",
      Overlay: "Polaris-DropZone__Overlay",
      hasError: "Polaris-DropZone--hasError"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DropZone/components/FileUpload/FileUpload.css.js
var require_FileUpload_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DropZone/components/FileUpload/FileUpload.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      FileUpload: "Polaris-DropZone-FileUpload",
      large: "Polaris-DropZone-FileUpload--large",
      small: "Polaris-DropZone-FileUpload--small",
      ActionTitle: "Polaris-DropZone-FileUpload__ActionTitle",
      "ActionTitle-disabled": "Polaris-DropZone-FileUpload__ActionTitle--disabled",
      "ActionTitle-focused": "Polaris-DropZone-FileUpload__ActionTitle--focused",
      UploadIcon: "Polaris-DropZone-FileUpload__UploadIcon",
      disabled: "Polaris-DropZone-FileUpload--disabled"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DropZone/components/FileUpload/FileUpload.js
var require_FileUpload = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DropZone/components/FileUpload/FileUpload.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), capitalize = require_capitalize(), context = require_context16(), index = require_utils3(), FileUpload_module = require_FileUpload_css(), hooks = require_hooks2(), Icon2 = require_Icon(), BlockStack4 = require_BlockStack(), Button4 = require_Button(), Text4 = require_Text();
    function FileUpload(props) {
      let i18n = hooks.useI18n(), {
        size,
        measuring,
        type,
        disabled,
        allowMultiple
      } = React2.useContext(context.DropZoneContext), typeSuffix = capitalize.capitalize(type), allowMultipleKey = index.createAllowMultipleKey(allowMultiple), {
        actionTitle = i18n.translate(`Polaris.DropZone.${allowMultipleKey}.actionTitle${typeSuffix}`),
        actionHint
      } = props, actionMarkup = /* @__PURE__ */ React2.createElement(Button4.Button, {
        disabled
      }, actionTitle), fileUploadClassName = css.classNames(FileUpload_module.default.FileUpload, measuring && FileUpload_module.default.measuring, size === "large" && FileUpload_module.default.large, size === "small" && FileUpload_module.default.small), actionHintMarkup = actionHint && /* @__PURE__ */ React2.createElement(Text4.Text, {
        variant: "bodySm",
        as: "p",
        tone: "subdued"
      }, actionHint), viewMarkup;
      switch (size) {
        case "large":
        case "medium":
          viewMarkup = /* @__PURE__ */ React2.createElement(BlockStack4.BlockStack, {
            inlineAlign: "center",
            gap: "200"
          }, actionMarkup, actionHintMarkup);
          break;
        case "small":
          viewMarkup = /* @__PURE__ */ React2.createElement("div", {
            className: css.classNames(FileUpload_module.default.UploadIcon, disabled && FileUpload_module.default.disabled)
          }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
            source: polarisIcons.UploadIcon
          }));
          break;
      }
      return /* @__PURE__ */ React2.createElement("div", {
        className: fileUploadClassName
      }, viewMarkup);
    }
    exports.FileUpload = FileUpload;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DropZone/DropZone.js
var require_DropZone = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DropZone/DropZone.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), debounce = require_debounce(), css = require_css(), capitalize = require_capitalize(), target = require_target(), useComponentDidMount = require_use_component_did_mount(), useToggle = require_use_toggle(), useEventListener = require_use_event_listener(), context = require_context16(), index = require_utils3(), DropZone_module = require_DropZone_css(), FileUpload = require_FileUpload(), hooks = require_hooks2(), BlockStack4 = require_BlockStack(), Icon2 = require_Icon(), Text4 = require_Text(), Labelled = require_Labelled(), DropZone = function({
      dropOnPage,
      label,
      labelAction,
      labelHidden,
      children,
      disabled = !1,
      outline = !0,
      accept,
      active,
      overlay = !0,
      allowMultiple = index.defaultAllowMultiple,
      overlayText,
      errorOverlayText,
      id: idProp,
      type = "file",
      onClick,
      error,
      openFileDialog,
      variableHeight,
      onFileDialogClose,
      customValidator,
      onDrop,
      onDropAccepted,
      onDropRejected,
      onDragEnter,
      onDragOver,
      onDragLeave
    }) {
      let node = React2.useRef(null), inputRef = React2.useRef(null), dragTargets = React2.useRef([]), adjustSize = React2.useCallback(debounce.debounce(() => {
        if (!node.current)
          return;
        if (variableHeight) {
          setMeasuring(!1);
          return;
        }
        let size2 = "large", width = node.current.getBoundingClientRect().width;
        width < 100 ? size2 = "small" : width < 160 && (size2 = "medium"), setSize(size2), measuring && setMeasuring(!1);
      }, 50, {
        trailing: !0
      }), []), [dragging, setDragging] = React2.useState(!1), [internalError, setInternalError] = React2.useState(!1), {
        value: focused,
        setTrue: handleFocus,
        setFalse: handleBlur
      } = useToggle.useToggle(!1), [size, setSize] = React2.useState("large"), [measuring, setMeasuring] = React2.useState(!0), i18n = hooks.useI18n(), getValidatedFiles = React2.useCallback((files) => {
        let acceptedFiles = [], rejectedFiles = [];
        return Array.from(files).forEach((file) => {
          !index.fileAccepted(file, accept) || customValidator && !customValidator(file) ? rejectedFiles.push(file) : acceptedFiles.push(file);
        }), allowMultiple || (acceptedFiles.splice(1, acceptedFiles.length), rejectedFiles.push(...acceptedFiles.slice(1))), {
          files,
          acceptedFiles,
          rejectedFiles
        };
      }, [accept, allowMultiple, customValidator]), handleDrop = React2.useCallback((event) => {
        if (stopEvent(event), disabled)
          return;
        let fileList = index.getDataTransferFiles(event), {
          files,
          acceptedFiles,
          rejectedFiles
        } = getValidatedFiles(fileList);
        dragTargets.current = [], setDragging(!1), setInternalError(rejectedFiles.length > 0), onDrop && onDrop(files, acceptedFiles, rejectedFiles), onDropAccepted && acceptedFiles.length && onDropAccepted(acceptedFiles), onDropRejected && rejectedFiles.length && onDropRejected(rejectedFiles), event.target && "value" in event.target && (event.target.value = "");
      }, [disabled, getValidatedFiles, onDrop, onDropAccepted, onDropRejected]), handleDragEnter = React2.useCallback((event) => {
        if (stopEvent(event), disabled)
          return;
        let fileList = index.getDataTransferFiles(event);
        if (event.target && !dragTargets.current.includes(event.target) && dragTargets.current.push(event.target), dragging)
          return;
        let {
          rejectedFiles
        } = getValidatedFiles(fileList);
        setDragging(!0), setInternalError(rejectedFiles.length > 0), onDragEnter && onDragEnter();
      }, [disabled, dragging, getValidatedFiles, onDragEnter]), handleDragOver = React2.useCallback((event) => {
        stopEvent(event), !disabled && onDragOver && onDragOver();
      }, [disabled, onDragOver]), handleDragLeave = React2.useCallback((event) => {
        event.preventDefault(), !disabled && (dragTargets.current = dragTargets.current.filter((el) => {
          let compareNode = dropOnPage && !target.isServer ? document : node.current;
          return el !== event.target && compareNode && compareNode.contains(el);
        }), !(dragTargets.current.length > 0) && (setDragging(!1), setInternalError(!1), onDragLeave && onDragLeave()));
      }, [dropOnPage, disabled, onDragLeave]), dropNode = dropOnPage && !target.isServer ? document : node.current;
      useEventListener.useEventListener("drop", handleDrop, dropNode), useEventListener.useEventListener("dragover", handleDragOver, dropNode), useEventListener.useEventListener("dragenter", handleDragEnter, dropNode), useEventListener.useEventListener("dragleave", handleDragLeave, dropNode), useEventListener.useEventListener("resize", adjustSize, target.isServer ? null : window), useComponentDidMount.useComponentDidMount(() => {
        adjustSize();
      });
      let uniqId = React2.useId(), id = idProp ?? uniqId, typeSuffix = capitalize.capitalize(type), allowMultipleKey = index.createAllowMultipleKey(allowMultiple), overlayTextWithDefault = overlayText === void 0 ? i18n.translate(`Polaris.DropZone.${allowMultipleKey}.overlayText${typeSuffix}`) : overlayText, errorOverlayTextWithDefault = errorOverlayText === void 0 ? i18n.translate(`Polaris.DropZone.errorOverlayText${typeSuffix}`) : errorOverlayText, labelValue = label || i18n.translate(`Polaris.DropZone.${allowMultipleKey}.label${typeSuffix}`), labelHiddenValue = label ? labelHidden : !0, classes = css.classNames(DropZone_module.default.DropZone, outline && DropZone_module.default.hasOutline, !outline && DropZone_module.default.noOutline, focused && DropZone_module.default.focused, (active || dragging) && DropZone_module.default.isDragging, disabled && DropZone_module.default.isDisabled, (internalError || error) && DropZone_module.default.hasError, !variableHeight && DropZone_module.default[css.variationName("size", size)], measuring && DropZone_module.default.measuring), dragOverlay = (active || dragging) && !internalError && !error && overlay && overlayMarkup(polarisIcons.UploadIcon, overlayTextWithDefault), dragErrorOverlay = dragging && (internalError || error) && overlayMarkup(polarisIcons.AlertCircleIcon, errorOverlayTextWithDefault, "critical"), context$1 = React2.useMemo(() => ({
        disabled,
        focused,
        size,
        type: type || "file",
        measuring,
        allowMultiple
      }), [disabled, focused, measuring, size, type, allowMultiple]), open = React2.useCallback(() => {
        inputRef.current && inputRef.current.click();
      }, [inputRef]), triggerFileDialog = React2.useCallback(() => {
        open(), onFileDialogClose?.();
      }, [open, onFileDialogClose]);
      function overlayMarkup(icon, text, color) {
        return /* @__PURE__ */ React2.createElement("div", {
          className: DropZone_module.default.Overlay
        }, /* @__PURE__ */ React2.createElement(BlockStack4.BlockStack, {
          gap: "200",
          inlineAlign: "center"
        }, size === "small" && /* @__PURE__ */ React2.createElement(Icon2.Icon, {
          source: icon,
          tone: color
        }), (size === "medium" || size === "large") && /* @__PURE__ */ React2.createElement(Text4.Text, {
          variant: "bodySm",
          as: "p",
          fontWeight: "bold"
        }, text)));
      }
      function handleClick(event) {
        if (!disabled)
          return onClick ? onClick(event) : open();
      }
      return React2.useEffect(() => {
        openFileDialog && triggerFileDialog();
      }, [openFileDialog, triggerFileDialog]), /* @__PURE__ */ React2.createElement(context.DropZoneContext.Provider, {
        value: context$1
      }, /* @__PURE__ */ React2.createElement(Labelled.Labelled, {
        id,
        label: labelValue,
        action: labelAction,
        labelHidden: labelHiddenValue
      }, /* @__PURE__ */ React2.createElement("div", {
        ref: node,
        className: classes,
        "aria-disabled": disabled,
        onClick: handleClick,
        onDragStart: stopEvent
      }, dragOverlay, dragErrorOverlay, /* @__PURE__ */ React2.createElement(Text4.Text, {
        variant: "bodySm",
        as: "span",
        visuallyHidden: !0
      }, /* @__PURE__ */ React2.createElement("input", {
        id,
        accept,
        disabled,
        multiple: allowMultiple,
        onChange: handleDrop,
        onFocus: handleFocus,
        onBlur: handleBlur,
        type: "file",
        ref: inputRef,
        autoComplete: "off"
      })), /* @__PURE__ */ React2.createElement("div", {
        className: DropZone_module.default.Container
      }, children))));
    };
    function stopEvent(event) {
      event.preventDefault(), event.stopPropagation();
    }
    DropZone.FileUpload = FileUpload.FileUpload;
    exports.DropZone = DropZone;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/EmptySearchResult/illustrations/empty-search.svg.js
var require_empty_search_svg = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/EmptySearchResult/illustrations/empty-search.svg.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var img = "data:image/svg+xml,%3csvg width='60' height='60' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill-rule='evenodd' d='M41.87 24a17.87 17.87 0 11-35.74 0 17.87 17.87 0 0135.74 0zm-3.15 18.96a24 24 0 114.24-4.24L59.04 54.8a3 3 0 11-4.24 4.24L38.72 42.96z' fill='%238C9196'/%3e%3c/svg%3e", emptySearch = img;
    exports.default = emptySearch;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/EmptySearchResult/EmptySearchResult.js
var require_EmptySearchResult = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/EmptySearchResult/EmptySearchResult.js"(exports) {
    "use strict";
    var React2 = require_react(), emptySearch = require_empty_search_svg(), hooks = require_hooks2(), LegacyStack = require_LegacyStack(), Text4 = require_Text(), Image = require_Image();
    function EmptySearchResult({
      title,
      description,
      withIllustration
    }) {
      let altText = hooks.useI18n().translate("Polaris.EmptySearchResult.altText"), descriptionMarkup = description ? /* @__PURE__ */ React2.createElement("p", null, description) : null, illustrationMarkup = withIllustration ? /* @__PURE__ */ React2.createElement(Image.Image, {
        alt: altText,
        source: emptySearch.default,
        draggable: !1
      }) : null;
      return /* @__PURE__ */ React2.createElement(LegacyStack.LegacyStack, {
        alignment: "center",
        vertical: !0
      }, illustrationMarkup, /* @__PURE__ */ React2.createElement(Text4.Text, {
        variant: "headingLg",
        as: "p"
      }, title), /* @__PURE__ */ React2.createElement(Text4.Text, {
        tone: "subdued",
        as: "span"
      }, descriptionMarkup));
    }
    exports.EmptySearchResult = EmptySearchResult;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/EmptyState/EmptyState.css.js
var require_EmptyState_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/EmptyState/EmptyState.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ImageContainer: "Polaris-EmptyState__ImageContainer",
      Image: "Polaris-EmptyState__Image",
      loaded: "Polaris-EmptyState--loaded",
      imageContained: "Polaris-EmptyState--imageContained",
      SkeletonImageContainer: "Polaris-EmptyState__SkeletonImageContainer",
      SkeletonImage: "Polaris-EmptyState__SkeletonImage"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/EmptyState/EmptyState.js
var require_EmptyState = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/EmptyState/EmptyState.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), EmptyState_module = require_EmptyState_css(), utils = require_utils(), Box4 = require_Box(), BlockStack4 = require_BlockStack(), Image = require_Image(), Text4 = require_Text(), InlineStack4 = require_InlineStack();
    function EmptyState({
      children,
      heading,
      image,
      largeImage,
      imageContained,
      fullWidth = !1,
      action: action8,
      secondaryAction,
      footerContent
    }) {
      let [imageLoaded, setImageLoaded] = React2.useState(!1), handleLoad = React2.useCallback(() => {
        setImageLoaded(!0);
      }, []), imageClassNames = css.classNames(EmptyState_module.default.Image, imageLoaded && EmptyState_module.default.loaded, imageContained && EmptyState_module.default.imageContained), loadedImageMarkup = largeImage ? /* @__PURE__ */ React2.createElement(Image.Image, {
        alt: "",
        role: "presentation",
        source: largeImage,
        className: imageClassNames,
        sourceSet: [{
          source: image,
          descriptor: "568w"
        }, {
          source: largeImage,
          descriptor: "1136w"
        }],
        sizes: "(max-width: 568px) 60vw",
        onLoad: handleLoad
      }) : /* @__PURE__ */ React2.createElement(Image.Image, {
        alt: "",
        role: "presentation",
        className: imageClassNames,
        source: image,
        onLoad: handleLoad
      }), skeletonImageClassNames = css.classNames(EmptyState_module.default.SkeletonImage, imageLoaded && EmptyState_module.default.loaded), imageContainerClassNames = css.classNames(EmptyState_module.default.ImageContainer, !imageLoaded && EmptyState_module.default.SkeletonImageContainer), imageMarkup = /* @__PURE__ */ React2.createElement("div", {
        className: imageContainerClassNames
      }, loadedImageMarkup, /* @__PURE__ */ React2.createElement("div", {
        className: skeletonImageClassNames
      })), secondaryActionMarkup = secondaryAction ? utils.buttonFrom(secondaryAction, {}) : null, footerContentMarkup = footerContent ? /* @__PURE__ */ React2.createElement(Box4.Box, {
        paddingBlockStart: "400"
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        alignment: "center",
        variant: "bodySm"
      }, footerContent)) : null, primaryActionMarkup = action8 ? utils.buttonFrom(action8, {
        variant: "primary",
        size: "medium"
      }) : null, headingMarkup = heading ? /* @__PURE__ */ React2.createElement(Box4.Box, {
        paddingBlockEnd: "150"
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        variant: "headingMd",
        as: "p",
        alignment: "center"
      }, heading)) : null, childrenMarkup = children ? /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        alignment: "center",
        variant: "bodySm"
      }, children) : null, textContentMarkup = headingMarkup || children ? /* @__PURE__ */ React2.createElement(Box4.Box, {
        paddingBlockEnd: "400"
      }, headingMarkup, childrenMarkup) : null, actionsMarkup = primaryActionMarkup || secondaryActionMarkup ? /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        align: "center",
        gap: "200"
      }, secondaryActionMarkup, primaryActionMarkup) : null, detailsMarkup = textContentMarkup || actionsMarkup || footerContentMarkup ? /* @__PURE__ */ React2.createElement(Box4.Box, {
        maxWidth: fullWidth ? "100%" : "400px"
      }, /* @__PURE__ */ React2.createElement(BlockStack4.BlockStack, {
        inlineAlign: "center"
      }, textContentMarkup, actionsMarkup, footerContentMarkup)) : null;
      return /* @__PURE__ */ React2.createElement(Box4.Box, {
        paddingInlineStart: "0",
        paddingInlineEnd: "0",
        paddingBlockStart: "500",
        paddingBlockEnd: "1600"
      }, /* @__PURE__ */ React2.createElement(BlockStack4.BlockStack, {
        inlineAlign: "center"
      }, imageMarkup, detailsMarkup));
    }
    exports.EmptyState = EmptyState;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ExceptionList/ExceptionList.css.js
var require_ExceptionList_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ExceptionList/ExceptionList.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ExceptionList: "Polaris-ExceptionList",
      Item: "Polaris-ExceptionList__Item",
      Icon: "Polaris-ExceptionList__Icon",
      statusWarning: "Polaris-ExceptionList--statusWarning",
      statusCritical: "Polaris-ExceptionList--statusCritical",
      Bullet: "Polaris-ExceptionList__Bullet",
      Title: "Polaris-ExceptionList__Title",
      Description: "Polaris-ExceptionList__Description"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Truncate/Truncate.css.js
var require_Truncate_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Truncate/Truncate.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Truncate: "Polaris-Truncate"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Truncate/Truncate.js
var require_Truncate = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Truncate/Truncate.js"(exports) {
    "use strict";
    var React2 = require_react(), Truncate_module = require_Truncate_css();
    function Truncate({
      children
    }) {
      return /* @__PURE__ */ React2.createElement("span", {
        className: Truncate_module.default.Truncate
      }, children);
    }
    exports.Truncate = Truncate;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ExceptionList/ExceptionList.js
var require_ExceptionList = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ExceptionList/ExceptionList.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), ExceptionList_module = require_ExceptionList_css(), Truncate = require_Truncate(), Icon2 = require_Icon();
    function ExceptionList({
      items: itemsList
    }) {
      let items = itemsList.map((item, index) => {
        let {
          status,
          icon,
          title,
          description,
          truncate = !1
        } = item, itemClasses = css.classNames(ExceptionList_module.default.Item, status && ExceptionList_module.default[css.variationName("status", status)]), iconMarkup = icon ? /* @__PURE__ */ React2.createElement(Icon2.Icon, {
          source: icon
        }) : /* @__PURE__ */ React2.createElement("span", {
          className: ExceptionList_module.default.Bullet
        }), titleMarkup = title && /* @__PURE__ */ React2.createElement("span", {
          className: ExceptionList_module.default.Title
        }, title), descriptionMarkup = description && /* @__PURE__ */ React2.createElement("span", {
          className: ExceptionList_module.default.Description
        }, description), Element2 = truncate ? Truncate.Truncate : React2.Fragment;
        return /* @__PURE__ */ React2.createElement("li", {
          className: itemClasses,
          key: index
        }, /* @__PURE__ */ React2.createElement("span", {
          className: ExceptionList_module.default.Icon
        }, iconMarkup), /* @__PURE__ */ React2.createElement(Element2, null, titleMarkup, descriptionMarkup));
      });
      return /* @__PURE__ */ React2.createElement("ul", {
        className: ExceptionList_module.default.ExceptionList
      }, items);
    }
    exports.ExceptionList = ExceptionList;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Filters/Filters.css.js
var require_Filters_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Filters/Filters.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Container: "Polaris-Filters__Container",
      SearchField: "Polaris-Filters__SearchField",
      FiltersWrapper: "Polaris-Filters__FiltersWrapper",
      hideQueryField: "Polaris-Filters--hideQueryField",
      FiltersInner: "Polaris-Filters__FiltersInner",
      AddFilter: "Polaris-Filters__AddFilter",
      FiltersWrapperWithAddButton: "Polaris-Filters__FiltersWrapperWithAddButton",
      AddFilterActivatorMultiple: "Polaris-Filters__AddFilterActivatorMultiple",
      FiltersStickyArea: "Polaris-Filters__FiltersStickyArea",
      ClearAll: "Polaris-Filters__ClearAll",
      MultiplePinnedFilterClearAll: "Polaris-Filters__MultiplePinnedFilterClearAll"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Filters/components/SearchField/SearchField.js
var require_SearchField = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Filters/components/SearchField/SearchField.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), breakpoints = require_breakpoints(), hooks = require_hooks2(), Text4 = require_Text(), TextField2 = require_TextField(), Icon2 = require_Icon();
    function SearchField({
      onChange,
      onClear,
      onFocus,
      onBlur,
      focused,
      value,
      placeholder,
      disabled,
      borderlessQueryField,
      loading,
      selectedViewName
    }) {
      let i18n = hooks.useI18n(), id = React2.useId(), {
        mdUp
      } = breakpoints.useBreakpoints(), suffix = value && selectedViewName && mdUp ? /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "bodyMd",
        tone: "subdued"
      }, i18n.translate("Polaris.Filters.searchInView", {
        viewName: selectedViewName
      })) : null;
      function handleChange(eventValue) {
        onChange(eventValue ?? value);
      }
      function handleClear() {
        onClear ? onClear() : onChange("");
      }
      return /* @__PURE__ */ React2.createElement(TextField2.TextField, {
        id,
        value,
        onChange: handleChange,
        onFocus,
        onBlur,
        onClearButtonClick: handleClear,
        autoComplete: "off",
        placeholder,
        disabled,
        variant: borderlessQueryField ? "borderless" : "inherit",
        size: "slim",
        prefix: mdUp ? /* @__PURE__ */ React2.createElement(Icon2.Icon, {
          source: polarisIcons.SearchIcon
        }) : void 0,
        suffix,
        focused,
        label: placeholder,
        labelHidden: !0,
        clearButton: !0,
        autoSize: Boolean(suffix),
        loading
      });
    }
    exports.SearchField = SearchField;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-on-value-change.js
var require_use_on_value_change = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-on-value-change.js"(exports) {
    "use strict";
    var React2 = require_react();
    function useOnValueChange(value, onChange) {
      let tracked = React2.useRef(value);
      React2.useEffect(() => {
        let oldValue = tracked.current;
        value !== tracked.current && (tracked.current = value, onChange(value, oldValue));
      }, [value, onChange]);
    }
    exports.useOnValueChange = useOnValueChange;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Filters/components/FilterPill/FilterPill.css.js
var require_FilterPill_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Filters/components/FilterPill/FilterPill.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      FilterButton: "Polaris-Filters-FilterPill__FilterButton",
      focusedFilterButton: "Polaris-Filters-FilterPill--focusedFilterButton",
      ActiveFilterButton: "Polaris-Filters-FilterPill__ActiveFilterButton",
      PlainButton: "Polaris-Filters-FilterPill__PlainButton",
      ToggleButton: "Polaris-Filters-FilterPill__ToggleButton",
      clearButton: "Polaris-Filters-FilterPill--clearButton",
      IconWrapper: "Polaris-Filters-FilterPill__IconWrapper",
      PopoverWrapper: "Polaris-Filters-FilterPill__PopoverWrapper",
      ClearButtonWrapper: "Polaris-Filters-FilterPill__ClearButtonWrapper"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Filters/components/FilterPill/FilterPill.js
var require_FilterPill = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Filters/components/FilterPill/FilterPill.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), useToggle = require_use_toggle(), css = require_css(), FilterPill_module = require_FilterPill_css(), hooks = require_hooks2(), Icon2 = require_Icon(), UnstyledButton = require_UnstyledButton(), InlineStack4 = require_InlineStack(), Button4 = require_Button(), Popover = require_Popover(), BlockStack4 = require_BlockStack(), Box4 = require_Box(), Text4 = require_Text();
    function FilterPill({
      unsavedChanges = !1,
      filterKey,
      label,
      filter,
      disabled,
      hideClearButton,
      selected,
      initialActive,
      closeOnChildOverlayClick,
      onRemove,
      onClick
    }) {
      let i18n = hooks.useI18n(), elementRef = React2.useRef(null), {
        value: focused,
        setTrue: setFocusedTrue,
        setFalse: setFocusedFalse
      } = useToggle.useToggle(!1), [popoverActive, setPopoverActive] = React2.useState(initialActive);
      React2.useEffect(() => {
        let node = elementRef.current;
        if (!node || !popoverActive)
          return;
        let parent = node.parentElement?.parentElement;
        parent && parent.scroll?.({
          left: node.offsetLeft
        });
      }, [elementRef, popoverActive]);
      let togglePopoverActive = React2.useCallback(() => {
        filter && setPopoverActive((popoverActive2) => !popoverActive2), onClick && onClick(filterKey);
      }, [filter, filterKey, onClick]), handlePopoverClose = React2.useCallback(() => {
        togglePopoverActive(), selected || onRemove?.(filterKey);
      }, [onRemove, selected, filterKey, togglePopoverActive]), handleClear = () => {
        onRemove && onRemove(filterKey), setPopoverActive(!1);
      }, buttonClasses = css.classNames(FilterPill_module.default.FilterButton, selected && FilterPill_module.default.ActiveFilterButton, popoverActive && FilterPill_module.default.FocusFilterButton, focused && FilterPill_module.default.focusedFilterButton), clearButtonClassNames = css.classNames(FilterPill_module.default.PlainButton, FilterPill_module.default.clearButton), toggleButtonClassNames = css.classNames(FilterPill_module.default.PlainButton, FilterPill_module.default.ToggleButton), disclosureMarkup = selected ? null : /* @__PURE__ */ React2.createElement("div", {
        className: FilterPill_module.default.IconWrapper
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.ChevronDownIcon,
        tone: "base"
      })), labelMarkup = /* @__PURE__ */ React2.createElement(Box4.Box, {
        paddingInlineStart: unsavedChanges ? "0" : "050"
      }, /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, null, /* @__PURE__ */ React2.createElement(Text4.Text, {
        variant: "bodySm",
        as: "span"
      }, label))), unsavedPip = unsavedChanges ? /* @__PURE__ */ React2.createElement(Box4.Box, {
        paddingInlineEnd: "150"
      }, /* @__PURE__ */ React2.createElement(Box4.Box, {
        background: "bg-fill-emphasis",
        borderRadius: "050",
        width: "6px",
        minHeight: "6px"
      })) : null, removeFilterButtonMarkup = selected ? /* @__PURE__ */ React2.createElement(UnstyledButton.UnstyledButton, {
        onClick: handleClear,
        className: clearButtonClassNames,
        type: "button",
        "aria-label": i18n.translate("Polaris.FilterPill.clear")
      }, /* @__PURE__ */ React2.createElement("div", {
        className: FilterPill_module.default.IconWrapper
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.XSmallIcon,
        tone: "base"
      }))) : null, activator = /* @__PURE__ */ React2.createElement("div", {
        className: buttonClasses
      }, /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        gap: "0",
        wrap: !1
      }, /* @__PURE__ */ React2.createElement(UnstyledButton.UnstyledButton, {
        onFocus: setFocusedTrue,
        onBlur: setFocusedFalse,
        onClick: togglePopoverActive,
        className: toggleButtonClassNames,
        type: "button",
        accessibilityLabel: unsavedChanges ? i18n.translate("Polaris.FilterPill.unsavedChanges", {
          label
        }) : label
      }, /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        wrap: !1,
        align: "center",
        blockAlign: "center",
        gap: "0"
      }, unsavedPip, labelMarkup, disclosureMarkup)), removeFilterButtonMarkup)), clearButtonMarkup = !hideClearButton && /* @__PURE__ */ React2.createElement("div", {
        className: FilterPill_module.default.ClearButtonWrapper
      }, /* @__PURE__ */ React2.createElement(Button4.Button, {
        onClick: handleClear,
        variant: "plain",
        disabled: !selected,
        textAlign: "left"
      }, i18n.translate("Polaris.FilterPill.clear")));
      return disabled ? null : /* @__PURE__ */ React2.createElement("div", {
        ref: elementRef
      }, /* @__PURE__ */ React2.createElement(Popover.Popover, {
        active: popoverActive,
        activator,
        key: filterKey,
        onClose: handlePopoverClose,
        preferredAlignment: "left",
        preventCloseOnChildOverlayClick: !closeOnChildOverlayClick
      }, /* @__PURE__ */ React2.createElement("div", {
        className: FilterPill_module.default.PopoverWrapper
      }, /* @__PURE__ */ React2.createElement(Popover.Popover.Section, null, /* @__PURE__ */ React2.createElement(BlockStack4.BlockStack, {
        gap: "100"
      }, filter, clearButtonMarkup)))));
    }
    exports.FilterPill = FilterPill;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Filters/components/FiltersBar/FiltersBar.js
var require_FiltersBar = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Filters/components/FiltersBar/FiltersBar.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), useOnValueChange = require_use_on_value_change(), css = require_css(), Filters_module = require_Filters_css(), FilterPill = require_FilterPill(), hooks = require_hooks2(), UnstyledButton = require_UnstyledButton(), Text4 = require_Text(), Popover = require_Popover(), ActionList = require_ActionList(), Button4 = require_Button(), Box4 = require_Box(), InlineStack4 = require_InlineStack();
    function FiltersBar({
      filters,
      appliedFilters,
      onClearAll,
      disabled,
      hideQueryField,
      disableFilters,
      mountedStateStyles,
      onAddFilterClick,
      closeOnChildOverlayClick,
      children
    }) {
      let i18n = hooks.useI18n(), [popoverActive, setPopoverActive] = React2.useState(!1), hasMounted = React2.useRef(!1);
      React2.useEffect(() => {
        hasMounted.current = !0;
      });
      let togglePopoverActive = () => setPopoverActive((popoverActive2) => !popoverActive2), handleAddFilterClick = () => {
        onAddFilterClick?.(), togglePopoverActive();
      }, appliedFilterKeys = appliedFilters?.map(({
        key
      }) => key), pinnedFromPropsKeys = filters.filter(({
        pinned
      }) => pinned).map(({
        key
      }) => key), pinnedFiltersFromPropsAndAppliedFilters = filters.filter(({
        pinned,
        key
      }) => Boolean(pinned) || appliedFilterKeys?.includes(key)), [localPinnedFilters, setLocalPinnedFilters] = React2.useState(pinnedFiltersFromPropsAndAppliedFilters.map(({
        key
      }) => key));
      useOnValueChange.useOnValueChange(filters.length, () => {
        setLocalPinnedFilters(pinnedFiltersFromPropsAndAppliedFilters.map(({
          key
        }) => key));
      });
      let pinnedFilters = localPinnedFilters.map((key) => filters.find((filter) => filter.key === key)).reduce((acc, filter) => filter ? [...acc, filter] : acc, []), onFilterClick = ({
        key,
        onAction
      }) => () => {
        setTimeout(() => {
          setLocalPinnedFilters((currentLocalPinnedFilters) => [.../* @__PURE__ */ new Set([...currentLocalPinnedFilters, key])]), onAction?.(), togglePopoverActive();
        }, 0);
      }, filterToActionItem = (filter) => ({
        ...filter,
        content: filter.label,
        onAction: onFilterClick(filter)
      }), unpinnedFilters = filters.filter((filter) => !pinnedFilters.some(({
        key
      }) => key === filter.key)), unsectionedFilters = unpinnedFilters.filter((filter) => !filter.section && !filter.hidden).map(filterToActionItem), sectionedFilters = unpinnedFilters.filter((filter) => filter.section).reduce((acc, filter) => {
        let filterActionItem = filterToActionItem(filter), sectionIndex = acc.findIndex((section) => section.title === filter.section);
        return sectionIndex === -1 ? acc.push({
          title: filter.section,
          items: [filterActionItem]
        }) : acc[sectionIndex].items.push(filterActionItem), acc;
      }, []), hasOneOrMorePinnedFilters = pinnedFilters.length >= 1, addFilterActivator = /* @__PURE__ */ React2.createElement("div", null, /* @__PURE__ */ React2.createElement(UnstyledButton.UnstyledButton, {
        type: "button",
        className: Filters_module.default.AddFilter,
        onClick: handleAddFilterClick,
        "aria-label": i18n.translate("Polaris.Filters.addFilter"),
        disabled: disabled || unsectionedFilters.length === 0 && sectionedFilters.length === 0 || disableFilters
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "bodySm",
        tone: disabled ? "disabled" : "base"
      }, i18n.translate("Polaris.Filters.addFilter"), " "), /* @__PURE__ */ React2.createElement(polarisIcons.PlusIcon, null))), handleClearAllFilters = () => {
        setLocalPinnedFilters(pinnedFromPropsKeys), onClearAll?.();
      }, shouldShowAddButton = filters.some((filter) => !filter.pinned) || filters.length !== localPinnedFilters.length, pinnedFiltersMarkup = pinnedFilters.map(({
        key: filterKey,
        ...pinnedFilter
      }) => {
        let appliedFilter = appliedFilters?.find(({
          key
        }) => key === filterKey), handleFilterPillRemove = () => {
          setLocalPinnedFilters((currentLocalPinnedFilters) => currentLocalPinnedFilters.filter((key) => {
            let isMatchedFilters = key === filterKey, isPinnedFilterFromProps = pinnedFromPropsKeys.includes(key);
            return !isMatchedFilters || isPinnedFilterFromProps;
          })), appliedFilter?.onRemove(filterKey);
        };
        return /* @__PURE__ */ React2.createElement(FilterPill.FilterPill, Object.assign({
          key: filterKey
        }, pinnedFilter, {
          initialActive: hasMounted.current && !pinnedFilter.pinned && !appliedFilter,
          unsavedChanges: appliedFilter?.unsavedChanges,
          label: appliedFilter?.label || pinnedFilter.label,
          filterKey,
          selected: appliedFilterKeys?.includes(filterKey),
          onRemove: handleFilterPillRemove,
          disabled: pinnedFilter.disabled || disableFilters,
          closeOnChildOverlayClick
        }));
      }), addButton = shouldShowAddButton ? /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Filters_module.default.AddFilterActivator, hasOneOrMorePinnedFilters && Filters_module.default.AddFilterActivatorMultiple)
      }, /* @__PURE__ */ React2.createElement(Popover.Popover, {
        active: popoverActive && !disabled,
        activator: addFilterActivator,
        onClose: togglePopoverActive
      }, /* @__PURE__ */ React2.createElement(ActionList.ActionList, {
        actionRole: "menuitem",
        items: unsectionedFilters,
        sections: sectionedFilters
      }))) : null, clearAllMarkup = appliedFilters?.length ? /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Filters_module.default.ClearAll, hasOneOrMorePinnedFilters && shouldShowAddButton && Filters_module.default.MultiplePinnedFilterClearAll)
      }, /* @__PURE__ */ React2.createElement(Button4.Button, {
        size: "micro",
        onClick: handleClearAllFilters,
        variant: "monochromePlain"
      }, i18n.translate("Polaris.Filters.clearFilters"))) : null;
      return /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Filters_module.default.FiltersWrapper, shouldShowAddButton && hasOneOrMorePinnedFilters && Filters_module.default.FiltersWrapperWithAddButton),
        "aria-live": "polite",
        style: mountedStateStyles
      }, /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Filters_module.default.FiltersInner)
      }, /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Filters_module.default.FiltersStickyArea)
      }, pinnedFiltersMarkup, addButton, clearAllMarkup)), hideQueryField ? /* @__PURE__ */ React2.createElement(Box4.Box, {
        paddingInlineEnd: "300",
        paddingBlockStart: "200",
        paddingBlockEnd: "200"
      }, /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        align: "start",
        blockAlign: "center",
        gap: {
          xs: "400",
          md: "300"
        }
      }, children)) : null);
    }
    exports.FiltersBar = FiltersBar;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Filters/Filters.js
var require_Filters = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Filters/Filters.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Filters_module = require_Filters_css(), SearchField = require_SearchField(), FiltersBar = require_FiltersBar(), Box4 = require_Box(), InlineStack4 = require_InlineStack(), TRANSITION_DURATION = "var(--p-motion-duration-150)", TRANSITION_MARGIN = "-36px", defaultStyle = {
      transition: `opacity ${TRANSITION_DURATION} var(--p-motion-ease)`,
      opacity: 0
    }, transitionStyles = {
      entering: {
        opacity: 1
      },
      entered: {
        opacity: 1
      },
      exiting: {
        opacity: 0
      },
      exited: {
        opacity: 0
      },
      unmounted: {
        opacity: 0
      }
    }, defaultFilterStyles = {
      transition: `opacity ${TRANSITION_DURATION} var(--p-motion-ease), margin ${TRANSITION_DURATION} var(--p-motion-ease)`,
      opacity: 0,
      marginTop: TRANSITION_MARGIN
    }, transitionFilterStyles = {
      entering: {
        opacity: 1,
        marginTop: 0
      },
      entered: {
        opacity: 1,
        marginTop: 0
      },
      exiting: {
        opacity: 0,
        marginTop: TRANSITION_MARGIN
      },
      exited: {
        opacity: 0,
        marginTop: TRANSITION_MARGIN
      },
      unmounted: {
        opacity: 0,
        marginTop: TRANSITION_MARGIN
      }
    };
    function Filters({
      queryValue,
      queryPlaceholder,
      focused,
      filters,
      appliedFilters,
      onQueryChange,
      onQueryClear,
      onQueryBlur,
      onQueryFocus,
      onClearAll,
      children,
      disabled,
      hideFilters,
      hideQueryField,
      disableQueryField,
      borderlessQueryField,
      loading,
      disableFilters,
      mountedState,
      onAddFilterClick,
      closeOnChildOverlayClick,
      selectedViewName
    }) {
      let hideFilterBar = hideFilters || filters.length === 0, queryFieldMarkup = hideQueryField ? null : /* @__PURE__ */ React2.createElement("div", {
        className: Filters_module.default.Container
      }, /* @__PURE__ */ React2.createElement(Box4.Box, {
        padding: "200"
      }, /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        align: "start",
        blockAlign: "center",
        gap: {
          xs: "400",
          md: "300"
        }
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Filters_module.default.SearchField,
        style: mountedState ? {
          ...defaultStyle,
          ...transitionStyles[mountedState]
        } : void 0
      }, /* @__PURE__ */ React2.createElement(SearchField.SearchField, {
        onChange: onQueryChange,
        onFocus: onQueryFocus,
        onBlur: onQueryBlur,
        onClear: onQueryClear,
        value: queryValue,
        placeholder: queryPlaceholder,
        focused,
        disabled: disabled || disableQueryField,
        borderlessQueryField,
        loading,
        selectedViewName
      })), children))), mountedStateStyles = mountedState && !hideQueryField ? {
        ...defaultFilterStyles,
        ...transitionFilterStyles[mountedState]
      } : void 0, filtersMarkup = hideFilterBar ? null : /* @__PURE__ */ React2.createElement(FiltersBar.FiltersBar, {
        filters,
        appliedFilters,
        onClearAll,
        disabled,
        hideQueryField,
        disableFilters,
        onAddFilterClick,
        closeOnChildOverlayClick,
        mountedStateStyles
      }, children);
      return /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Filters_module.default.Filters, hideQueryField && Filters_module.default.hideQueryField)
      }, queryFieldMarkup, filtersMarkup);
    }
    exports.Filters = Filters;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Focus/Focus.js
var require_Focus = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Focus/Focus.js"(exports) {
    "use strict";
    var React2 = require_react(), focus = require_focus(), Focus = /* @__PURE__ */ React2.memo(function({
      children,
      disabled,
      root
    }) {
      return React2.useEffect(() => {
        if (disabled || !root)
          return;
        let node = isRef(root) ? root.current : root;
        !node || node.querySelector("[autofocus]") || focus.focusFirstFocusableNode(node, !1);
      }, [disabled, root]), /* @__PURE__ */ React2.createElement(React2.Fragment, null, children);
    });
    function isRef(ref) {
      return ref.current !== void 0;
    }
    exports.Focus = Focus;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/FooterHelp/FooterHelp.css.js
var require_FooterHelp_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/FooterHelp/FooterHelp.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      FooterHelp: "Polaris-FooterHelp"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/FooterHelp/FooterHelp.js
var require_FooterHelp = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/FooterHelp/FooterHelp.js"(exports) {
    "use strict";
    var React2 = require_react(), FooterHelp_module = require_FooterHelp_css(), Text4 = require_Text();
    function FooterHelp({
      children,
      align = "center"
    }) {
      let style = {
        "--pc-footer-help-align": align
      };
      return /* @__PURE__ */ React2.createElement("div", {
        className: FooterHelp_module.default.FooterHelp,
        style
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "p",
        variant: "bodyLg"
      }, children));
    }
    exports.FooterHelp = FooterHelp;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Form/Form.js
var require_Form = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Form/Form.js"(exports) {
    "use strict";
    var React2 = require_react(), hooks = require_hooks2(), Text4 = require_Text();
    function Form({
      acceptCharset,
      action: action8,
      autoComplete,
      children,
      encType,
      implicitSubmit = !0,
      method = "post",
      name,
      noValidate,
      preventDefault = !0,
      target,
      onSubmit
    }) {
      let i18n = hooks.useI18n(), handleSubmit = React2.useCallback((event) => {
        preventDefault && (event.preventDefault(), onSubmit(event));
      }, [onSubmit, preventDefault]), autoCompleteInputs = normalizeAutoComplete(autoComplete), submitMarkup = implicitSubmit ? /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        visuallyHidden: !0
      }, /* @__PURE__ */ React2.createElement("button", {
        type: "submit",
        "aria-hidden": "true",
        tabIndex: -1
      }, i18n.translate("Polaris.Common.submit"))) : null;
      return /* @__PURE__ */ React2.createElement("form", {
        acceptCharset,
        action: action8,
        autoComplete: autoCompleteInputs,
        encType,
        method,
        name,
        noValidate,
        target,
        onSubmit: handleSubmit
      }, submitMarkup, children);
    }
    function normalizeAutoComplete(autoComplete) {
      return autoComplete == null ? autoComplete : autoComplete ? "on" : "off";
    }
    exports.Form = Form;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/FormLayout/FormLayout.css.js
var require_FormLayout_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/FormLayout/FormLayout.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Item: "Polaris-FormLayout__Item",
      grouped: "Polaris-FormLayout--grouped",
      condensed: "Polaris-FormLayout--condensed"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/FormLayout/components/Item/Item.js
var require_Item5 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/FormLayout/components/Item/Item.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), FormLayout_module = require_FormLayout_css();
    function Item({
      children,
      condensed = !1
    }) {
      let className = css.classNames(FormLayout_module.default.Item, condensed ? FormLayout_module.default.condensed : FormLayout_module.default.grouped);
      return children ? /* @__PURE__ */ React2.createElement("div", {
        className
      }, children) : null;
    }
    exports.Item = Item;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/FormLayout/components/Group/Group.js
var require_Group = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/FormLayout/components/Group/Group.js"(exports) {
    "use strict";
    var React2 = require_react(), components = require_components(), Item = require_Item5(), BlockStack4 = require_BlockStack(), InlineStack4 = require_InlineStack(), Box4 = require_Box(), Text4 = require_Text();
    function Group({
      children,
      condensed,
      title,
      helpText
    }) {
      let id = React2.useId(), helpTextElement = null, helpTextId, titleElement = null, titleId;
      helpText && (helpTextId = `${id}HelpText`, helpTextElement = /* @__PURE__ */ React2.createElement(Box4.Box, {
        id: helpTextId,
        color: "text-secondary"
      }, helpText)), title && (titleId = `${id}Title`, titleElement = /* @__PURE__ */ React2.createElement(Text4.Text, {
        id: titleId,
        as: "p"
      }, title));
      let itemsMarkup = React2.Children.map(children, (child) => components.wrapWithComponent(child, Item.Item, {
        condensed
      }));
      return /* @__PURE__ */ React2.createElement(BlockStack4.BlockStack, {
        role: "group",
        gap: "200",
        "aria-labelledby": titleId,
        "aria-describedby": helpTextId
      }, titleElement, /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        gap: "300"
      }, itemsMarkup), helpTextElement);
    }
    exports.Group = Group;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/FormLayout/FormLayout.js
var require_FormLayout = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/FormLayout/FormLayout.js"(exports) {
    "use strict";
    var React2 = require_react(), components = require_components(), Group = require_Group(), BlockStack4 = require_BlockStack(), Item = require_Item5(), FormLayout = /* @__PURE__ */ React2.memo(function({
      children
    }) {
      return /* @__PURE__ */ React2.createElement(BlockStack4.BlockStack, {
        gap: "400"
      }, React2.Children.map(children, wrapChildren));
    });
    FormLayout.Group = Group.Group;
    function wrapChildren(child, index) {
      if (components.isElementOfType(child, Group.Group))
        return child;
      let props = {
        key: index
      };
      return components.wrapWithComponent(child, Item.Item, props);
    }
    exports.FormLayout = FormLayout;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/set-root-property.js
var require_set_root_property = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/set-root-property.js"(exports) {
    "use strict";
    function setRootProperty(name, value, node) {
      if (!document)
        return;
      (node || document.documentElement).style.setProperty(name, value);
    }
    exports.setRootProperty = setRootProperty;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/Frame.css.js
var require_Frame_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/Frame.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Frame: "Polaris-Frame",
      Navigation: "Polaris-Frame__Navigation",
      hasTopBar: "Polaris-Frame--hasTopBar",
      "Navigation-enter": "Polaris-Frame__Navigation--enter",
      "Navigation-enterActive": "Polaris-Frame__Navigation--enterActive",
      "Navigation-exit": "Polaris-Frame__Navigation--exit",
      "Navigation-exitActive": "Polaris-Frame__Navigation--exitActive",
      NavigationDismiss: "Polaris-Frame__NavigationDismiss",
      "Navigation-visible": "Polaris-Frame__Navigation--visible",
      TopBar: "Polaris-Frame__TopBar",
      ContextualSaveBar: "Polaris-Frame__ContextualSaveBar",
      Main: "Polaris-Frame__Main",
      hasNav: "Polaris-Frame--hasNav",
      Content: "Polaris-Frame__Content",
      hasSidebar: "Polaris-Frame--hasSidebar",
      GlobalRibbonContainer: "Polaris-Frame__GlobalRibbonContainer",
      LoadingBar: "Polaris-Frame__LoadingBar",
      Skip: "Polaris-Frame__Skip",
      focused: "Polaris-Frame--focused",
      pressed: "Polaris-Frame--pressed"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/media-query/hooks.js
var require_hooks11 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/media-query/hooks.js"(exports) {
    "use strict";
    var React2 = require_react(), context = require_context6();
    function useMediaQuery() {
      let mediaQuery = React2.useContext(context.MediaQueryContext);
      if (!mediaQuery)
        throw new Error("No mediaQuery was provided. Your application must be wrapped in an <AppProvider> component. See https://polaris.shopify.com/components/app-provider for implementation instructions.");
      return mediaQuery;
    }
    exports.useMediaQuery = useMediaQuery;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-is-mounted-ref.js
var require_use_is_mounted_ref = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-is-mounted-ref.js"(exports) {
    "use strict";
    var React2 = require_react();
    function useIsMountedRef() {
      let isMounted = React2.useRef(!1);
      return React2.useEffect(() => (isMounted.current = !0, () => {
        isMounted.current = !1;
      }), []), isMounted;
    }
    exports.useIsMountedRef = useIsMountedRef;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/components/Loading/Loading.css.js
var require_Loading_css2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/components/Loading/Loading.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Loading: "Polaris-Frame-Loading",
      Level: "Polaris-Frame-Loading__Level"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/components/Loading/Loading.js
var require_Loading2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/components/Loading/Loading.js"(exports) {
    "use strict";
    var React2 = require_react(), useIsMountedRef = require_use_is_mounted_ref(), Loading_module = require_Loading_css2(), hooks = require_hooks2(), STUCK_THRESHOLD = 99;
    function Loading() {
      let i18n = hooks.useI18n(), isMountedRef = useIsMountedRef.useIsMountedRef(), [progress, setProgress] = React2.useState(0), [animating, setAnimating] = React2.useState(!1);
      React2.useEffect(() => {
        progress >= STUCK_THRESHOLD || animating || requestAnimationFrame(() => {
          if (!isMountedRef.current)
            return;
          let step = Math.max((STUCK_THRESHOLD - progress) / 10, 1);
          setAnimating(!0), setProgress(progress + step);
        });
      }, [progress, animating, isMountedRef]);
      let customStyles = {
        transform: `scaleX(${Math.floor(progress) / 100})`
      };
      return /* @__PURE__ */ React2.createElement("div", {
        className: Loading_module.default.Loading,
        "aria-valuenow": progress,
        "aria-valuemin": 0,
        "aria-valuemax": 100,
        role: "progressbar",
        "aria-label": i18n.translate("Polaris.Loading.label")
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Loading_module.default.Level,
        style: customStyles,
        onTransitionEnd: () => setAnimating(!1)
      }));
    }
    exports.Loading = Loading;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/components/CSSAnimation/CSSAnimation.css.js
var require_CSSAnimation_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/components/CSSAnimation/CSSAnimation.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      startFade: "Polaris-Frame-CSSAnimation--startFade",
      endFade: "Polaris-Frame-CSSAnimation--endFade"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/components/CSSAnimation/CSSAnimation.js
var require_CSSAnimation = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/components/CSSAnimation/CSSAnimation.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), CSSAnimation_module = require_CSSAnimation_css(), TransitionStatus;
    (function(TransitionStatus2) {
      TransitionStatus2.Entering = "entering", TransitionStatus2.Entered = "entered", TransitionStatus2.Exiting = "exiting", TransitionStatus2.Exited = "exited";
    })(TransitionStatus || (TransitionStatus = {}));
    function CSSAnimation({
      in: inProp,
      className,
      type,
      children
    }) {
      let [transitionStatus, setTransitionStatus] = React2.useState(inProp ? TransitionStatus.Entering : TransitionStatus.Exited), isMounted = React2.useRef(!1), node = React2.useRef(null);
      React2.useEffect(() => {
        isMounted.current && transitionStatus === TransitionStatus.Entering && changeTransitionStatus(TransitionStatus.Entered);
      }, [transitionStatus]), React2.useEffect(() => {
        isMounted.current && (inProp && changeTransitionStatus(TransitionStatus.Entering), !inProp && changeTransitionStatus(TransitionStatus.Exiting));
      }, [inProp]), React2.useEffect(() => {
        isMounted.current = !0;
      }, []);
      let wrapperClassName = css.classNames(className, CSSAnimation_module.default[css.variationName("start", type)], inProp && CSSAnimation_module.default[css.variationName("end", type)]), content = transitionStatus === TransitionStatus.Exited && !inProp ? null : children;
      return /* @__PURE__ */ React2.createElement("div", {
        className: wrapperClassName,
        ref: node,
        onTransitionEnd: handleTransitionEnd
      }, content);
      function handleTransitionEnd() {
        transitionStatus === TransitionStatus.Exiting && changeTransitionStatus(TransitionStatus.Exited);
      }
      function changeTransitionStatus(transitionStatus2) {
        setTransitionStatus(transitionStatus2), transitionStatus2 === TransitionStatus.Entering && node.current && node.current.getBoundingClientRect();
      }
    }
    exports.CSSAnimation = CSSAnimation;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/pluck-deep.js
var require_pluck_deep = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/pluck-deep.js"(exports) {
    "use strict";
    var isObject = require_is_object();
    function pluckDeep(obj, key) {
      if (!obj)
        return null;
      let keys = Object.keys(obj);
      for (let currKey of keys) {
        if (currKey === key)
          return obj[key];
        if (isObject.isObject(obj[currKey])) {
          let plucked = pluckDeep(obj[currKey], key);
          if (plucked)
            return plucked;
        }
      }
      return null;
    }
    exports.pluckDeep = pluckDeep;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/get-width.js
var require_get_width = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/get-width.js"(exports) {
    "use strict";
    var pluckDeep = require_pluck_deep();
    function getWidth(value = {}, defaultWidth = 0, key = "width") {
      let width = typeof value == "number" ? value : pluckDeep.pluckDeep(value, key);
      return width ? `${width}px` : `${defaultWidth}px`;
    }
    exports.getWidth = getWidth;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/components/ContextualSaveBar/ContextualSaveBar.css.js
var require_ContextualSaveBar_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/components/ContextualSaveBar/ContextualSaveBar.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ContextualSaveBar: "Polaris-Frame-ContextualSaveBar",
      LogoContainer: "Polaris-Frame-ContextualSaveBar__LogoContainer",
      ContextControl: "Polaris-Frame-ContextualSaveBar__ContextControl",
      Contents: "Polaris-Frame-ContextualSaveBar__Contents",
      fullWidth: "Polaris-Frame-ContextualSaveBar--fullWidth",
      MessageContainer: "Polaris-Frame-ContextualSaveBar__MessageContainer",
      ActionContainer: "Polaris-Frame-ContextualSaveBar__ActionContainer",
      Action: "Polaris-Frame-ContextualSaveBar__Action"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Modal/Modal.css.js
var require_Modal_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Modal/Modal.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Body: "Polaris-Modal__Body",
      NoScrollBody: "Polaris-Modal__NoScrollBody",
      IFrame: "Polaris-Modal__IFrame"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Modal/components/Section/Section.css.js
var require_Section_css2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Modal/components/Section/Section.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Section: "Polaris-Modal-Section",
      titleHidden: "Polaris-Modal-Section--titleHidden"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Modal/components/Section/Section.js
var require_Section5 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Modal/components/Section/Section.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Section_module = require_Section_css2(), Box4 = require_Box();
    function Section({
      children,
      flush = !1,
      subdued = !1,
      titleHidden = !1
    }) {
      let className = css.classNames(Section_module.default.Section, titleHidden && Section_module.default.titleHidden);
      return /* @__PURE__ */ React2.createElement("div", {
        className
      }, /* @__PURE__ */ React2.createElement(Box4.Box, Object.assign({
        as: "section",
        padding: flush ? "0" : "400"
      }, titleHidden && {
        paddingInlineEnd: "0"
      }, subdued && {
        background: "bg-surface-tertiary"
      }), children));
    }
    exports.Section = Section;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Modal/components/Dialog/Dialog.css.js
var require_Dialog_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Modal/components/Dialog/Dialog.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Container: "Polaris-Modal-Dialog__Container",
      Dialog: "Polaris-Modal-Dialog",
      Modal: "Polaris-Modal-Dialog__Modal",
      limitHeight: "Polaris-Modal-Dialog--limitHeight",
      sizeSmall: "Polaris-Modal-Dialog--sizeSmall",
      sizeLarge: "Polaris-Modal-Dialog--sizeLarge",
      sizeFullScreen: "Polaris-Modal-Dialog--sizeFullScreen",
      animateFadeUp: "Polaris-Modal-Dialog--animateFadeUp",
      entering: "Polaris-Modal-Dialog--entering",
      exiting: "Polaris-Modal-Dialog--exiting",
      exited: "Polaris-Modal-Dialog--exited",
      entered: "Polaris-Modal-Dialog--entered"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/focus-manager/hooks.js
var require_hooks12 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/focus-manager/hooks.js"(exports) {
    "use strict";
    var React2 = require_react(), errors = require_errors(), context = require_context8();
    function useFocusManager({
      trapping
    }) {
      let focusManager = React2.useContext(context.FocusManagerContext), id = React2.useId();
      if (!focusManager)
        throw new errors.MissingAppProviderError("No FocusManager was provided.");
      let {
        trapFocusList,
        add: addFocusItem,
        remove: removeFocusItem
      } = focusManager, canSafelyFocus = trapFocusList[0] === id, value = React2.useMemo(() => ({
        canSafelyFocus
      }), [canSafelyFocus]);
      return React2.useEffect(() => {
        if (trapping)
          return addFocusItem(id), () => {
            removeFocusItem(id);
          };
      }, [addFocusItem, id, removeFocusItem, trapping]), value;
    }
    exports.useFocusManager = useFocusManager;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TrapFocus/TrapFocus.js
var require_TrapFocus = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TrapFocus/TrapFocus.js"(exports) {
    "use strict";
    var React2 = require_react(), types = require_types(), focus = require_focus(), shared = require_shared(), hooks = require_hooks12(), Focus = require_Focus(), EventListener = require_EventListener(), KeypressListener = require_KeypressListener();
    function TrapFocus({
      trapping = !0,
      children
    }) {
      let {
        canSafelyFocus
      } = hooks.useFocusManager({
        trapping
      }), focusTrapWrapper = React2.useRef(null), [disableFocus, setDisableFocus] = React2.useState(!0);
      React2.useEffect(() => {
        let disable = canSafelyFocus && !(focusTrapWrapper.current && focusTrapWrapper.current.contains(document.activeElement)) ? !trapping : !0;
        setDisableFocus(disable);
      }, [canSafelyFocus, trapping]);
      let handleFocusIn = (event) => {
        let containerContentsHaveFocus = focusTrapWrapper.current && focusTrapWrapper.current.contains(document.activeElement);
        trapping === !1 || !focusTrapWrapper.current || containerContentsHaveFocus || event.target instanceof Element && event.target.matches(`${shared.portal.selector} *`) || canSafelyFocus && event.target instanceof HTMLElement && focusTrapWrapper.current !== event.target && !focusTrapWrapper.current.contains(event.target) && focus.focusFirstFocusableNode(focusTrapWrapper.current);
      }, handleTab = (event) => {
        if (trapping === !1 || !focusTrapWrapper.current)
          return;
        let firstFocusableNode = focus.findFirstKeyboardFocusableNode(focusTrapWrapper.current), lastFocusableNode = focus.findLastKeyboardFocusableNode(focusTrapWrapper.current);
        event.target === lastFocusableNode && !event.shiftKey && (event.preventDefault(), focus.focusFirstKeyboardFocusableNode(focusTrapWrapper.current)), event.target === firstFocusableNode && event.shiftKey && (event.preventDefault(), focus.focusLastKeyboardFocusableNode(focusTrapWrapper.current));
      };
      return /* @__PURE__ */ React2.createElement(Focus.Focus, {
        disabled: disableFocus,
        root: focusTrapWrapper.current
      }, /* @__PURE__ */ React2.createElement("div", {
        ref: focusTrapWrapper
      }, /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
        event: "focusin",
        handler: handleFocusIn
      }), /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
        keyCode: types.Key.Tab,
        keyEvent: "keydown",
        handler: handleTab
      }), children));
    }
    exports.TrapFocus = TrapFocus;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Modal/components/Dialog/Dialog.js
var require_Dialog = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Modal/components/Dialog/Dialog.js"(exports) {
    "use strict";
    var React2 = require_react(), reactTransitionGroup = require("react-transition-group"), css = require_css(), focus = require_focus(), types = require_types(), useTheme = require_use_theme(), Dialog_module = require_Dialog_css(), context = require_context15(), TrapFocus = require_TrapFocus(), Text4 = require_Text(), KeypressListener = require_KeypressListener();
    function Dialog({
      instant,
      labelledBy,
      children,
      limitHeight,
      size,
      onClose,
      onExited,
      onEntered,
      setClosing,
      hasToasts,
      ...props
    }) {
      let theme = useTheme.useTheme(), containerNode = React2.useRef(null), frameContext = React2.useContext(context.FrameContext), toastMessages;
      frameContext && (toastMessages = frameContext.toastMessages);
      let classes = css.classNames(Dialog_module.default.Modal, size && Dialog_module.default[css.variationName("size", size)], limitHeight && Dialog_module.default.limitHeight), TransitionChild = instant ? reactTransitionGroup.Transition : FadeUp;
      React2.useEffect(() => {
        containerNode.current && !containerNode.current.contains(document.activeElement) && focus.focusFirstFocusableNode(containerNode.current);
      }, []);
      let handleKeyDown = () => {
        setClosing && setClosing(!0);
      }, handleKeyUp = () => {
        setClosing && setClosing(!1), onClose();
      }, ariaLiveAnnouncements = /* @__PURE__ */ React2.createElement("div", {
        "aria-live": "assertive"
      }, toastMessages ? toastMessages.map((toastMessage2) => /* @__PURE__ */ React2.createElement(Text4.Text, {
        visuallyHidden: !0,
        as: "p",
        key: toastMessage2.id
      }, toastMessage2.content)) : null);
      return /* @__PURE__ */ React2.createElement(TransitionChild, Object.assign({}, props, {
        nodeRef: containerNode,
        mountOnEnter: !0,
        unmountOnExit: !0,
        timeout: parseInt(theme.motion["motion-duration-200"], 10),
        onEntered,
        onExited
      }), /* @__PURE__ */ React2.createElement("div", {
        className: Dialog_module.default.Container,
        "data-polaris-layer": !0,
        "data-polaris-overlay": !0,
        ref: containerNode
      }, /* @__PURE__ */ React2.createElement(TrapFocus.TrapFocus, null, /* @__PURE__ */ React2.createElement("div", {
        role: "dialog",
        "aria-modal": !0,
        "aria-label": labelledBy,
        "aria-labelledby": labelledBy,
        tabIndex: -1,
        className: Dialog_module.default.Dialog
      }, /* @__PURE__ */ React2.createElement("div", {
        className: classes
      }, /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
        keyCode: types.Key.Escape,
        keyEvent: "keydown",
        handler: handleKeyDown
      }), /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
        keyCode: types.Key.Escape,
        handler: handleKeyUp
      }), children), ariaLiveAnnouncements))));
    }
    var fadeUpClasses = {
      appear: css.classNames(Dialog_module.default.animateFadeUp, Dialog_module.default.entering),
      appearActive: css.classNames(Dialog_module.default.animateFadeUp, Dialog_module.default.entered),
      enter: css.classNames(Dialog_module.default.animateFadeUp, Dialog_module.default.entering),
      enterActive: css.classNames(Dialog_module.default.animateFadeUp, Dialog_module.default.entered),
      exit: css.classNames(Dialog_module.default.animateFadeUp, Dialog_module.default.exiting),
      exitActive: css.classNames(Dialog_module.default.animateFadeUp, Dialog_module.default.exited)
    };
    function FadeUp({
      children,
      ...props
    }) {
      return /* @__PURE__ */ React2.createElement(reactTransitionGroup.CSSTransition, Object.assign({}, props, {
        classNames: fadeUpClasses
      }), children);
    }
    exports.Dialog = Dialog;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Modal/components/CloseButton/CloseButton.js
var require_CloseButton = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Modal/components/CloseButton/CloseButton.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), hooks = require_hooks2(), Button4 = require_Button();
    function CloseButton({
      pressed,
      onClick
    }) {
      let i18n = hooks.useI18n();
      return /* @__PURE__ */ React2.createElement(Button4.Button, {
        variant: "tertiary",
        pressed,
        icon: polarisIcons.XIcon,
        onClick,
        accessibilityLabel: i18n.translate("Polaris.Common.close")
      });
    }
    exports.CloseButton = CloseButton;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Modal/components/Header/Header.js
var require_Header3 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Modal/components/Header/Header.js"(exports) {
    "use strict";
    var React2 = require_react(), CloseButton = require_CloseButton(), InlineGrid = require_InlineGrid(), Box4 = require_Box(), InlineStack4 = require_InlineStack(), Text4 = require_Text();
    function Header({
      id,
      children,
      closing,
      titleHidden,
      onClose
    }) {
      let headerPaddingInline = "400", headerPaddingBlock = "400";
      return titleHidden || !children ? /* @__PURE__ */ React2.createElement(Box4.Box, {
        position: "absolute",
        insetInlineEnd: headerPaddingInline,
        insetBlockStart: headerPaddingBlock,
        zIndex: "1"
      }, /* @__PURE__ */ React2.createElement(CloseButton.CloseButton, {
        onClick: onClose
      })) : /* @__PURE__ */ React2.createElement(Box4.Box, {
        paddingBlockStart: "400",
        paddingBlockEnd: "400",
        paddingInlineStart: headerPaddingInline,
        paddingInlineEnd: headerPaddingInline,
        borderBlockEndWidth: "025",
        borderColor: "border",
        background: "bg-surface-tertiary"
      }, /* @__PURE__ */ React2.createElement(InlineGrid.InlineGrid, {
        columns: {
          xs: "1fr auto"
        },
        gap: "400"
      }, /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        gap: "400",
        blockAlign: "center"
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        id,
        as: "h2",
        variant: "headingMd",
        breakWord: !0
      }, children)), /* @__PURE__ */ React2.createElement(CloseButton.CloseButton, {
        pressed: closing,
        onClick: onClose
      })));
    }
    exports.Header = Header;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Modal/components/Footer/Footer.js
var require_Footer = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Modal/components/Footer/Footer.js"(exports) {
    "use strict";
    var React2 = require_react(), utils = require_utils(), InlineStack4 = require_InlineStack(), Box4 = require_Box();
    function Footer({
      primaryAction,
      secondaryActions,
      children
    }) {
      let primaryActionButton = primaryAction && utils.buttonsFrom(primaryAction, {
        variant: "primary"
      }) || null, secondaryActionButtons = secondaryActions && utils.buttonsFrom(secondaryActions) || null, actions = primaryActionButton || secondaryActionButtons ? /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        gap: "200"
      }, secondaryActionButtons, primaryActionButton) : null;
      return /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        gap: "400",
        blockAlign: "center"
      }, /* @__PURE__ */ React2.createElement(Box4.Box, {
        borderColor: "border",
        borderBlockStartWidth: "025",
        padding: "400",
        width: "100%"
      }, /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        gap: "400",
        blockAlign: "center",
        align: "space-between"
      }, /* @__PURE__ */ React2.createElement(Box4.Box, null, children), actions)));
    }
    exports.Footer = Footer;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Modal/Modal.js
var require_Modal = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Modal/Modal.js"(exports) {
    "use strict";
    var React2 = require_react(), reactTransitionGroup = require("react-transition-group"), focus = require_focus(), withinContentContext = require_within_content_context(), components = require_components(), Modal_module = require_Modal_css(), Section = require_Section5(), Dialog = require_Dialog(), Header = require_Header3(), Backdrop = require_Backdrop(), Footer = require_Footer(), hooks = require_hooks2(), Box4 = require_Box(), Scrollable = require_Scrollable(), Portal = require_Portal(), InlineStack4 = require_InlineStack(), Spinner2 = require_Spinner(), IFRAME_LOADING_HEIGHT = 200, DEFAULT_IFRAME_CONTENT_HEIGHT = 400, Modal3 = function({
      children,
      title,
      titleHidden = !1,
      src,
      iFrameName,
      open,
      instant,
      sectioned,
      loading,
      size,
      limitHeight,
      footer,
      primaryAction,
      secondaryActions,
      onScrolledToBottom,
      activator,
      activatorWrapper = "div",
      onClose,
      onIFrameLoad,
      onTransitionEnd,
      noScroll
    }) {
      let [iframeHeight, setIframeHeight] = React2.useState(IFRAME_LOADING_HEIGHT), [closing, setClosing] = React2.useState(!1), headerId = React2.useId(), activatorRef = React2.useRef(null), iframeTitle = hooks.useI18n().translate("Polaris.Modal.iFrameTitle"), dialog, backdrop, handleEntered = React2.useCallback(() => {
        onTransitionEnd && onTransitionEnd();
      }, [onTransitionEnd]), handleExited = React2.useCallback(() => {
        setIframeHeight(IFRAME_LOADING_HEIGHT);
        let activatorElement = activator && isRef(activator) ? activator && activator.current : activatorRef.current;
        activatorElement && requestAnimationFrame(() => focus.focusFirstFocusableNode(activatorElement));
      }, [activator]), handleIFrameLoad = React2.useCallback((evt) => {
        let iframe = evt.target;
        if (iframe && iframe.contentWindow)
          try {
            setIframeHeight(iframe.contentWindow.document.body.scrollHeight);
          } catch {
            setIframeHeight(DEFAULT_IFRAME_CONTENT_HEIGHT);
          }
        onIFrameLoad?.(evt);
      }, [onIFrameLoad]);
      if (open) {
        let footerMarkup = !footer && !primaryAction && !secondaryActions ? null : /* @__PURE__ */ React2.createElement(Footer.Footer, {
          primaryAction,
          secondaryActions
        }, footer), content = sectioned ? components.wrapWithComponent(children, Section.Section, {
          titleHidden
        }) : children, body = loading ? /* @__PURE__ */ React2.createElement(Box4.Box, {
          padding: "400"
        }, /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
          gap: "400",
          align: "center",
          blockAlign: "center"
        }, /* @__PURE__ */ React2.createElement(Spinner2.Spinner, null))) : content, scrollContainerMarkup = noScroll ? /* @__PURE__ */ React2.createElement("div", {
          className: Modal_module.default.NoScrollBody
        }, /* @__PURE__ */ React2.createElement(Box4.Box, {
          width: "100%",
          overflowX: "hidden",
          overflowY: "hidden"
        }, body)) : /* @__PURE__ */ React2.createElement(Scrollable.Scrollable, {
          shadow: !0,
          className: Modal_module.default.Body,
          onScrolledToBottom
        }, body), bodyMarkup = src ? /* @__PURE__ */ React2.createElement("iframe", {
          name: iFrameName,
          title: iframeTitle,
          src,
          className: Modal_module.default.IFrame,
          onLoad: handleIFrameLoad,
          style: {
            height: `${iframeHeight}px`
          }
        }) : scrollContainerMarkup;
        dialog = /* @__PURE__ */ React2.createElement(Dialog.Dialog, {
          instant,
          labelledBy: headerId,
          onClose,
          onEntered: handleEntered,
          onExited: handleExited,
          size,
          limitHeight,
          setClosing
        }, /* @__PURE__ */ React2.createElement(Header.Header, {
          titleHidden,
          id: headerId,
          closing,
          onClose
        }, title), bodyMarkup, footerMarkup), backdrop = /* @__PURE__ */ React2.createElement(Backdrop.Backdrop, {
          setClosing,
          onClick: onClose
        });
      }
      let animated = !instant, activatorMarkup = activator && !isRef(activator) ? /* @__PURE__ */ React2.createElement(Box4.Box, {
        ref: activatorRef,
        as: activatorWrapper
      }, activator) : null;
      return /* @__PURE__ */ React2.createElement(withinContentContext.WithinContentContext.Provider, {
        value: !0
      }, activatorMarkup, /* @__PURE__ */ React2.createElement(Portal.Portal, {
        idPrefix: "modal"
      }, /* @__PURE__ */ React2.createElement(reactTransitionGroup.TransitionGroup, {
        appear: animated,
        enter: animated,
        exit: animated
      }, dialog), backdrop));
    };
    function isRef(ref) {
      return Object.prototype.hasOwnProperty.call(ref, "current");
    }
    Modal3.Section = Section.Section;
    exports.Modal = Modal3;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/components/ContextualSaveBar/components/DiscardConfirmationModal/DiscardConfirmationModal.js
var require_DiscardConfirmationModal = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/components/ContextualSaveBar/components/DiscardConfirmationModal/DiscardConfirmationModal.js"(exports) {
    "use strict";
    var React2 = require_react(), Modal3 = require_Modal(), hooks = require_hooks2();
    function DiscardConfirmationModal({
      open,
      onDiscard,
      onCancel
    }) {
      let i18n = hooks.useI18n();
      return /* @__PURE__ */ React2.createElement(Modal3.Modal, {
        title: i18n.translate("Polaris.DiscardConfirmationModal.title"),
        open,
        onClose: onCancel,
        primaryAction: {
          content: i18n.translate("Polaris.DiscardConfirmationModal.primaryAction"),
          destructive: !0,
          onAction: onDiscard
        },
        secondaryActions: [{
          content: i18n.translate("Polaris.DiscardConfirmationModal.secondaryAction"),
          onAction: onCancel
        }],
        sectioned: !0
      }, i18n.translate("Polaris.DiscardConfirmationModal.message"));
    }
    exports.DiscardConfirmationModal = DiscardConfirmationModal;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/components/ContextualSaveBar/ContextualSaveBar.js
var require_ContextualSaveBar2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/components/ContextualSaveBar/ContextualSaveBar.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), getWidth = require_get_width(), useToggle = require_use_toggle(), ContextualSaveBar_module = require_ContextualSaveBar_css(), DiscardConfirmationModal = require_DiscardConfirmationModal(), hooks = require_hooks2(), hooks$1 = require_hooks9(), Button4 = require_Button(), Image = require_Image(), Icon2 = require_Icon(), Text4 = require_Text(), LegacyStack = require_LegacyStack();
    function ContextualSaveBar({
      alignContentFlush,
      message,
      saveAction,
      discardAction,
      fullWidth,
      contextControl,
      secondaryMenu
    }) {
      let i18n = hooks.useI18n(), {
        logo
      } = hooks$1.useFrame(), {
        value: discardConfirmationModalVisible,
        toggle: toggleDiscardConfirmationModal,
        setFalse: closeDiscardConfirmationModal
      } = useToggle.useToggle(!1), handleDiscardAction = React2.useCallback(() => {
        discardAction && discardAction.onAction && discardAction.onAction(), closeDiscardConfirmationModal();
      }, [closeDiscardConfirmationModal, discardAction]), discardActionContent = discardAction && discardAction.content ? discardAction.content : i18n.translate("Polaris.ContextualSaveBar.discard"), discardActionHandler;
      discardAction && discardAction.discardConfirmationModal ? discardActionHandler = toggleDiscardConfirmationModal : discardAction && (discardActionHandler = discardAction.onAction);
      let discardConfirmationModalMarkup = discardAction && discardAction.onAction && discardAction.discardConfirmationModal && /* @__PURE__ */ React2.createElement(DiscardConfirmationModal.DiscardConfirmationModal, {
        open: discardConfirmationModalVisible,
        onCancel: toggleDiscardConfirmationModal,
        onDiscard: handleDiscardAction
      }), discardActionMarkup = discardAction && /* @__PURE__ */ React2.createElement(Button4.Button, {
        variant: "tertiary",
        size: "large",
        url: discardAction.url,
        onClick: discardActionHandler,
        loading: discardAction.loading,
        disabled: discardAction.disabled,
        accessibilityLabel: discardAction.content
      }, discardActionContent), saveActionContent = saveAction && saveAction.content ? saveAction.content : i18n.translate("Polaris.ContextualSaveBar.save"), saveActionMarkup = saveAction && /* @__PURE__ */ React2.createElement(Button4.Button, {
        variant: "primary",
        tone: "success",
        size: "large",
        url: saveAction.url,
        onClick: saveAction.onAction,
        loading: saveAction.loading,
        disabled: saveAction.disabled,
        accessibilityLabel: saveAction.content
      }, saveActionContent), width = getWidth.getWidth(logo, 104), imageMarkup = logo && /* @__PURE__ */ React2.createElement(Image.Image, {
        style: {
          width
        },
        source: logo.contextualSaveBarSource || "",
        alt: ""
      }), logoMarkup = alignContentFlush || contextControl ? null : /* @__PURE__ */ React2.createElement("div", {
        className: ContextualSaveBar_module.default.LogoContainer,
        style: {
          width
        }
      }, imageMarkup), contextControlMarkup = contextControl ? /* @__PURE__ */ React2.createElement("div", {
        className: ContextualSaveBar_module.default.ContextControl
      }, contextControl) : null, contentsClassName = css.classNames(ContextualSaveBar_module.default.Contents, fullWidth && ContextualSaveBar_module.default.fullWidth);
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("div", {
        className: ContextualSaveBar_module.default.ContextualSaveBar
      }, contextControlMarkup, logoMarkup, /* @__PURE__ */ React2.createElement("div", {
        className: contentsClassName
      }, /* @__PURE__ */ React2.createElement("div", {
        className: ContextualSaveBar_module.default.MessageContainer
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.AlertTriangleIcon
      }), message && /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "h2",
        variant: "headingMd",
        tone: "text-inverse",
        truncate: !0
      }, message)), /* @__PURE__ */ React2.createElement("div", {
        className: ContextualSaveBar_module.default.ActionContainer
      }, /* @__PURE__ */ React2.createElement(LegacyStack.LegacyStack, {
        spacing: "tight",
        wrap: !1
      }, secondaryMenu, discardActionMarkup, saveActionMarkup)))), discardConfirmationModalMarkup);
    }
    exports.ContextualSaveBar = ContextualSaveBar;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-deep-compare-ref.js
var require_use_deep_compare_ref = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-deep-compare-ref.js"(exports) {
    "use strict";
    var React2 = require_react(), isEqual = require("react-fast-compare");
    function useDeepCompareRef(dependencies, comparator = isEqual) {
      let dependencyList = React2.useRef(dependencies);
      return comparator(dependencyList.current, dependencies) || (dependencyList.current = dependencies), dependencyList.current;
    }
    exports.useDeepCompareRef = useDeepCompareRef;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-deep-effect.js
var require_use_deep_effect = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-deep-effect.js"(exports) {
    "use strict";
    var React2 = require_react(), useDeepCompareRef = require_use_deep_compare_ref();
    function useDeepEffect(callback, dependencies, customCompare) {
      React2.useEffect(callback, useDeepCompareRef.useDeepCompareRef(dependencies, customCompare));
    }
    exports.useDeepEffect = useDeepEffect;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-deep-callback.js
var require_use_deep_callback = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-deep-callback.js"(exports) {
    "use strict";
    var React2 = require_react(), useDeepCompareRef = require_use_deep_compare_ref();
    function useDeepCallback(callback, dependencies, customCompare) {
      return React2.useCallback(callback, useDeepCompareRef.useDeepCompareRef(dependencies, customCompare));
    }
    exports.useDeepCallback = useDeepCallback;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/components/ToastManager/ToastManager.css.js
var require_ToastManager_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/components/ToastManager/ToastManager.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ToastManager: "Polaris-Frame-ToastManager",
      ToastWrapper: "Polaris-Frame-ToastManager__ToastWrapper",
      "ToastWrapper-enter": "Polaris-Frame-ToastManager__ToastWrapper--enter",
      "ToastWrapper-exit": "Polaris-Frame-ToastManager__ToastWrapper--exit",
      "ToastWrapper-enter-done": "Polaris-Frame-ToastManager--toastWrapperEnterDone",
      "ToastWrapper--hoverable": "Polaris-Frame-ToastManager--toastWrapperHoverable"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/components/Toast/Toast.css.js
var require_Toast_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/components/Toast/Toast.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Toast: "Polaris-Frame-Toast",
      Action: "Polaris-Frame-Toast__Action",
      error: "Polaris-Frame-Toast--error",
      CloseButton: "Polaris-Frame-Toast__CloseButton",
      LeadingIcon: "Polaris-Frame-Toast__LeadingIcon",
      toneMagic: "Polaris-Frame-Toast--toneMagic",
      WithActionOnComponent: "Polaris-Frame-Toast__WithActionOnComponent"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/components/Toast/Toast.js
var require_Toast = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/components/Toast/Toast.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), types = require_types(), Toast_module = require_Toast_css(), Icon2 = require_Icon(), Button4 = require_Button(), KeypressListener = require_KeypressListener(), InlineStack4 = require_InlineStack(), Text4 = require_Text(), DEFAULT_TOAST_DURATION = 5e3, DEFAULT_TOAST_DURATION_WITH_ACTION = 1e4;
    function Toast3({
      content,
      onDismiss,
      duration,
      error,
      action: action8,
      tone,
      onClick,
      icon,
      isHovered
    }) {
      let defaultDuration = action8 && !duration ? DEFAULT_TOAST_DURATION_WITH_ACTION : duration || DEFAULT_TOAST_DURATION, durationRemaining = React2.useRef(defaultDuration), timeoutStart = React2.useRef(null), timer = React2.useRef(null);
      React2.useEffect(() => {
        function resume() {
          timeoutStart.current = Date.now(), timer.current = setTimeout(() => {
            onDismiss();
          }, durationRemaining.current);
        }
        function pause() {
          timeoutStart.current && (durationRemaining.current -= Date.now() - timeoutStart.current), timer.current && clearTimeout(timer.current), timer.current = null;
        }
        return isHovered ? pause() : resume(), () => {
          timer.current && clearTimeout(timer.current);
        };
      }, [isHovered, onDismiss]), React2.useEffect(() => {
        action8 && duration && duration < DEFAULT_TOAST_DURATION_WITH_ACTION && console.log("Toast with action should persist for at least 10,000 milliseconds to give the merchant enough time to act on it.");
      }, [action8, duration]);
      let dismissMarkup = /* @__PURE__ */ React2.createElement("button", {
        type: "button",
        className: Toast_module.default.CloseButton,
        onClick: onDismiss
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.XSmallIcon,
        tone: "inherit"
      })), actionMarkup = action8 ? /* @__PURE__ */ React2.createElement("div", {
        className: Toast_module.default.Action
      }, /* @__PURE__ */ React2.createElement(Button4.Button, {
        variant: "monochromePlain",
        removeUnderline: !0,
        size: "slim",
        onClick: action8.onAction
      }, action8.content)) : null, leadingIconMarkup = null;
      error ? leadingIconMarkup = /* @__PURE__ */ React2.createElement("div", {
        className: Toast_module.default.LeadingIcon
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.AlertCircleIcon,
        tone: "inherit"
      })) : icon && (leadingIconMarkup = /* @__PURE__ */ React2.createElement("div", {
        className: Toast_module.default.LeadingIcon
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: icon,
        tone: "inherit"
      })));
      let className = css.classNames(Toast_module.default.Toast, error && Toast_module.default.error, tone && Toast_module.default[css.variationName("tone", tone)]);
      return !action8 && onClick ? /* @__PURE__ */ React2.createElement("button", {
        "aria-live": "assertive",
        className: css.classNames(className, Toast_module.default.WithActionOnComponent),
        type: "button",
        onClick
      }, /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
        keyCode: types.Key.Escape,
        handler: onDismiss
      }), leadingIconMarkup, /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        gap: "400",
        blockAlign: "center"
      }, /* @__PURE__ */ React2.createElement(Text4.Text, Object.assign({
        as: "span",
        variant: "bodyMd",
        fontWeight: "medium"
      }, tone === "magic" && {
        tone: "magic"
      }), content))) : /* @__PURE__ */ React2.createElement("div", {
        className,
        "aria-live": "assertive"
      }, /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
        keyCode: types.Key.Escape,
        handler: onDismiss
      }), leadingIconMarkup, /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        gap: "400",
        blockAlign: "center"
      }, /* @__PURE__ */ React2.createElement(Text4.Text, Object.assign({
        as: "span",
        variant: "bodyMd",
        fontWeight: "medium"
      }, tone === "magic" && {
        tone: "magic"
      }), content)), actionMarkup, dismissMarkup);
    }
    exports.DEFAULT_TOAST_DURATION = DEFAULT_TOAST_DURATION;
    exports.DEFAULT_TOAST_DURATION_WITH_ACTION = DEFAULT_TOAST_DURATION_WITH_ACTION;
    exports.Toast = Toast3;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/components/ToastManager/ToastManager.js
var require_ToastManager = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/components/ToastManager/ToastManager.js"(exports) {
    "use strict";
    var React2 = require_react(), reactTransitionGroup = require("react-transition-group"), css = require_css(), useDeepEffect = require_use_deep_effect(), useDeepCallback = require_use_deep_callback(), ToastManager_module = require_ToastManager_css(), Toast3 = require_Toast(), Portal = require_Portal(), EventListener = require_EventListener(), ADDITIONAL_TOAST_BASE_MOVEMENT = 10, TOAST_TRANSITION_DELAY = 30;
    function generateAdditionalVerticalMovement(index) {
      let getAmountToRemove = (idx) => (idx - 1) * idx / 2;
      return index * ADDITIONAL_TOAST_BASE_MOVEMENT - getAmountToRemove(index);
    }
    var ToastManager = /* @__PURE__ */ React2.memo(function({
      toastMessages
    }) {
      let toastNodes = [], [shouldExpand, setShouldExpand] = React2.useState(!1), isFullyExpanded = React2.useRef(!1), fullyExpandedTimeout = React2.useRef(null), firstToast = React2.useRef(null), updateToasts = useDeepCallback.useDeepCallback(() => {
        let zeroIndexTotalMessages = toastMessages.length - 1;
        toastMessages.forEach((_, index) => {
          let reversedOrder = zeroIndexTotalMessages - index, currentToast = toastNodes[index];
          if (!currentToast.current)
            return;
          let toastHeight = currentToast.current.clientHeight, scale = shouldExpand ? 1 : 0.9 ** reversedOrder, additionalVerticalMovement = generateAdditionalVerticalMovement(reversedOrder), targetInPos = shouldExpand ? toastHeight + (toastHeight - 8) * reversedOrder : toastHeight + additionalVerticalMovement;
          currentToast.current.style.setProperty("--pc-toast-manager-translate-y-in", `-${targetInPos}px`), currentToast.current.style.setProperty("--pc-toast-manager-scale-in", `${scale}`), currentToast.current.style.setProperty("--pc-toast-manager-blur-in", shouldExpand ? "0" : `${reversedOrder * 0.5}px`), currentToast.current.style.setProperty("--pc-toast-manager-transition-delay-in", `${shouldExpand ? reversedOrder * TOAST_TRANSITION_DELAY : 0}ms`), currentToast.current.style.setProperty("--pc-toast-manager-scale-out", `${reversedOrder === 0 ? 0.85 : scale ** 2}`), currentToast.current.style.setProperty("--pc-toast-manager-translate-y-out", `${-targetInPos}px`);
        });
      }, [toastMessages, toastNodes, shouldExpand]);
      useDeepEffect.useDeepEffect(() => {
        updateToasts(), toastMessages.length === 0 && setShouldExpand(!1), shouldExpand ? fullyExpandedTimeout.current = setTimeout(() => {
          isFullyExpanded.current = !0;
        }, toastMessages.length * TOAST_TRANSITION_DELAY + 400) : fullyExpandedTimeout.current && (clearTimeout(fullyExpandedTimeout.current), isFullyExpanded.current = !1);
      }, [toastMessages, shouldExpand]);
      let toastsMarkup = toastMessages.map((toast, index) => {
        let reverseOrderIndex = toastMessages.length - index - 1, toastNode = /* @__PURE__ */ React2.createRef();
        toastNodes[index] = toastNode;
        function handleMouseEnter() {
          setShouldExpand(!0);
        }
        function handleMouseEnterFirstToast() {
          isFullyExpanded.current && setShouldExpand(!1);
        }
        return /* @__PURE__ */ React2.createElement(reactTransitionGroup.CSSTransition, {
          nodeRef: toastNodes[index],
          key: toast.id,
          timeout: {
            enter: 0,
            exit: 200
          },
          classNames: toastClasses
        }, /* @__PURE__ */ React2.createElement("div", {
          ref: toastNode,
          onMouseEnter: reverseOrderIndex > 0 ? handleMouseEnter : handleMouseEnterFirstToast
        }, /* @__PURE__ */ React2.createElement("div", {
          ref: (node) => reverseOrderIndex === 0 ? firstToast.current = node : null
        }, /* @__PURE__ */ React2.createElement(Toast3.Toast, Object.assign({}, toast, {
          isHovered: shouldExpand
        })))));
      });
      return /* @__PURE__ */ React2.createElement(Portal.Portal, {
        idPrefix: "toast"
      }, /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
        event: "resize",
        handler: updateToasts
      }), /* @__PURE__ */ React2.createElement("div", {
        className: ToastManager_module.default.ToastManager,
        "aria-live": "assertive",
        onMouseEnter: function(event) {
          let target = event.target, isInFirstToast = firstToast.current?.contains(target);
          setShouldExpand(!isInFirstToast);
        },
        onMouseLeave: function() {
          setShouldExpand(!1);
        }
      }, /* @__PURE__ */ React2.createElement(reactTransitionGroup.TransitionGroup, {
        component: null
      }, toastsMarkup)));
    }), toastClasses = {
      enter: css.classNames(ToastManager_module.default.ToastWrapper, ToastManager_module.default["ToastWrapper-enter"]),
      enterDone: css.classNames(ToastManager_module.default.ToastWrapper, ToastManager_module.default["ToastWrapper-enter-done"]),
      exit: css.classNames(ToastManager_module.default.ToastWrapper, ToastManager_module.default["ToastWrapper-exit"])
    };
    exports.ToastManager = ToastManager;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/Frame.js
var require_Frame = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/Frame.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), reactTransitionGroup = require("react-transition-group"), css = require_css(), shared = require_shared(), setRootProperty = require_set_root_property(), useTheme = require_use_theme(), Frame_module = require_Frame_css(), hooks$1 = require_hooks11(), Loading = require_Loading2(), CSSAnimation = require_CSSAnimation(), ContextualSaveBar = require_ContextualSaveBar2(), ToastManager = require_ToastManager(), hooks = require_hooks2(), Text4 = require_Text(), Backdrop = require_Backdrop(), context = require_context15(), EventListener = require_EventListener(), TrapFocus = require_TrapFocus(), Icon2 = require_Icon(), APP_FRAME_MAIN = "AppFrameMain", APP_FRAME_NAV = "AppFrameNav", APP_FRAME_TOP_BAR = "AppFrameTopBar", APP_FRAME_LOADING_BAR = "AppFrameLoadingBar", FrameInner = class extends React2.PureComponent {
      constructor(...args) {
        super(...args), this.state = {
          skipFocused: !1,
          globalRibbonHeight: 0,
          loadingStack: 0,
          toastMessages: [],
          showContextualSaveBar: !1
        }, this.contextualSaveBar = null, this.globalRibbonContainer = null, this.navigationNode = /* @__PURE__ */ React2.createRef(), this.setGlobalRibbonHeight = () => {
          let {
            globalRibbonContainer
          } = this;
          globalRibbonContainer && this.setState({
            globalRibbonHeight: globalRibbonContainer.offsetHeight
          }, this.setGlobalRibbonRootProperty);
        }, this.setOffset = () => {
          let {
            offset = "0px"
          } = this.props;
          setRootProperty.setRootProperty("--pc-frame-offset", offset);
        }, this.setGlobalRibbonRootProperty = () => {
          let {
            globalRibbonHeight
          } = this.state;
          setRootProperty.setRootProperty("--pc-frame-global-ribbon-height", `${globalRibbonHeight}px`);
        }, this.showToast = (toast) => {
          this.setState(({
            toastMessages
          }) => ({
            toastMessages: toastMessages.find(({
              id
            }) => id === toast.id) != null ? toastMessages : [...toastMessages, toast]
          }));
        }, this.hideToast = ({
          id
        }) => {
          this.setState(({
            toastMessages
          }) => ({
            toastMessages: toastMessages.filter(({
              id: toastId
            }) => id !== toastId)
          }));
        }, this.setContextualSaveBar = (props) => {
          let {
            showContextualSaveBar
          } = this.state;
          this.contextualSaveBar = {
            ...props
          }, showContextualSaveBar === !0 ? this.forceUpdate() : this.setState({
            showContextualSaveBar: !0
          });
        }, this.removeContextualSaveBar = () => {
          this.contextualSaveBar = null, this.setState({
            showContextualSaveBar: !1
          });
        }, this.startLoading = () => {
          this.setState(({
            loadingStack
          }) => ({
            loadingStack: loadingStack + 1
          }));
        }, this.stopLoading = () => {
          this.setState(({
            loadingStack
          }) => ({
            loadingStack: Math.max(0, loadingStack - 1)
          }));
        }, this.handleResize = () => {
          this.props.globalRibbon && this.setGlobalRibbonHeight();
        }, this.handleFocus = () => {
          this.setState({
            skipFocused: !0
          });
        }, this.handleBlur = () => {
          this.setState({
            skipFocused: !1
          });
        }, this.handleClick = (event) => {
          let {
            skipToContentTarget
          } = this.props;
          skipToContentTarget && skipToContentTarget.current && (skipToContentTarget.current.focus(), event?.preventDefault());
        }, this.handleNavigationDismiss = () => {
          let {
            onNavigationDismiss
          } = this.props;
          onNavigationDismiss?.();
        }, this.setGlobalRibbonContainer = (node) => {
          this.globalRibbonContainer = node;
        }, this.handleNavKeydown = (event) => {
          let {
            key
          } = event, {
            mediaQuery: {
              isNavigationCollapsed
            },
            showMobileNavigation
          } = this.props;
          isNavigationCollapsed && showMobileNavigation && key === "Escape" && this.handleNavigationDismiss();
        };
      }
      componentDidMount() {
        this.handleResize(), !this.props.globalRibbon && (this.setGlobalRibbonRootProperty(), this.setOffset());
      }
      componentDidUpdate(prevProps) {
        this.props.globalRibbon !== prevProps.globalRibbon && this.setGlobalRibbonHeight(), this.setOffset();
      }
      render() {
        let {
          skipFocused,
          loadingStack,
          toastMessages,
          showContextualSaveBar
        } = this.state, {
          logo,
          children,
          navigation,
          topBar,
          globalRibbon,
          showMobileNavigation = !1,
          skipToContentTarget,
          i18n,
          sidebar,
          mediaQuery: {
            isNavigationCollapsed
          }
        } = this.props, navClassName = css.classNames(Frame_module.default.Navigation, showMobileNavigation && Frame_module.default["Navigation-visible"]), mobileNavHidden = isNavigationCollapsed && !showMobileNavigation, mobileNavShowing = isNavigationCollapsed && showMobileNavigation, tabIndex = mobileNavShowing ? 0 : -1, mobileNavAttributes = {
          ...mobileNavShowing && {
            "aria-modal": !0,
            role: "dialog"
          }
        }, navigationMarkup = navigation ? /* @__PURE__ */ React2.createElement(useTheme.UseTheme, null, (theme) => /* @__PURE__ */ React2.createElement(TrapFocus.TrapFocus, {
          trapping: mobileNavShowing
        }, /* @__PURE__ */ React2.createElement(reactTransitionGroup.CSSTransition, {
          nodeRef: this.navigationNode,
          appear: isNavigationCollapsed,
          exit: isNavigationCollapsed,
          in: showMobileNavigation,
          timeout: parseInt(theme.motion["motion-duration-300"], 10),
          classNames: navTransitionClasses
        }, /* @__PURE__ */ React2.createElement("div", Object.assign({
          key: "NavContent"
        }, mobileNavAttributes, {
          "aria-label": i18n.translate("Polaris.Frame.navigationLabel"),
          ref: this.navigationNode,
          className: navClassName,
          onKeyDown: this.handleNavKeydown,
          id: APP_FRAME_NAV,
          hidden: mobileNavHidden
        }), navigation, /* @__PURE__ */ React2.createElement("button", {
          type: "button",
          className: Frame_module.default.NavigationDismiss,
          onClick: this.handleNavigationDismiss,
          "aria-hidden": mobileNavHidden || !isNavigationCollapsed && !showMobileNavigation,
          "aria-label": i18n.translate("Polaris.Frame.Navigation.closeMobileNavigationLabel"),
          tabIndex
        }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
          source: polarisIcons.XIcon
        })))))) : null, loadingMarkup = loadingStack > 0 ? /* @__PURE__ */ React2.createElement("div", {
          className: Frame_module.default.LoadingBar,
          id: APP_FRAME_LOADING_BAR
        }, /* @__PURE__ */ React2.createElement(Loading.Loading, null)) : null, topBarMarkup = topBar ? /* @__PURE__ */ React2.createElement("div", Object.assign({
          className: Frame_module.default.TopBar
        }, shared.layer.props, shared.dataPolarisTopBar.props, {
          id: APP_FRAME_TOP_BAR
        }), topBar) : null, globalRibbonMarkup = globalRibbon ? /* @__PURE__ */ React2.createElement("div", {
          className: Frame_module.default.GlobalRibbonContainer,
          ref: this.setGlobalRibbonContainer
        }, globalRibbon) : null, skipClassName = css.classNames(Frame_module.default.Skip, skipFocused && Frame_module.default.focused), skipTarget = skipToContentTarget?.current ? skipToContentTarget.current.id : APP_FRAME_MAIN, skipMarkup = /* @__PURE__ */ React2.createElement("div", {
          className: skipClassName
        }, /* @__PURE__ */ React2.createElement("a", {
          href: `#${skipTarget}`,
          onFocus: this.handleFocus,
          onBlur: this.handleBlur,
          onClick: this.handleClick
        }, /* @__PURE__ */ React2.createElement(Text4.Text, {
          as: "span",
          variant: "bodyLg",
          fontWeight: "medium"
        }, i18n.translate("Polaris.Frame.skipToContent")))), navigationAttributes = navigation ? {
          "data-has-navigation": !0
        } : {}, frameClassName = css.classNames(Frame_module.default.Frame, navigation && Frame_module.default.hasNav, topBar && Frame_module.default.hasTopBar, sidebar && Frame_module.default.hasSidebar), contextualSaveBarMarkup = /* @__PURE__ */ React2.createElement(CSSAnimation.CSSAnimation, {
          in: showContextualSaveBar,
          className: Frame_module.default.ContextualSaveBar,
          type: "fade"
        }, /* @__PURE__ */ React2.createElement(ContextualSaveBar.ContextualSaveBar, this.contextualSaveBar)), navigationOverlayMarkup = showMobileNavigation && isNavigationCollapsed ? /* @__PURE__ */ React2.createElement(Backdrop.Backdrop, {
          belowNavigation: !0,
          onClick: this.handleNavigationDismiss,
          onTouchStart: this.handleNavigationDismiss
        }) : null, context$1 = {
          logo,
          showToast: this.showToast,
          hideToast: this.hideToast,
          toastMessages,
          startLoading: this.startLoading,
          stopLoading: this.stopLoading,
          setContextualSaveBar: this.setContextualSaveBar,
          removeContextualSaveBar: this.removeContextualSaveBar
        };
        return /* @__PURE__ */ React2.createElement(context.FrameContext.Provider, {
          value: context$1
        }, /* @__PURE__ */ React2.createElement("div", Object.assign({
          className: frameClassName
        }, shared.layer.props, navigationAttributes), skipMarkup, topBarMarkup, navigationMarkup, contextualSaveBarMarkup, loadingMarkup, navigationOverlayMarkup, /* @__PURE__ */ React2.createElement("main", {
          className: Frame_module.default.Main,
          id: APP_FRAME_MAIN,
          "data-has-global-ribbon": Boolean(globalRibbon)
        }, /* @__PURE__ */ React2.createElement("div", {
          className: Frame_module.default.Content
        }, children)), /* @__PURE__ */ React2.createElement(ToastManager.ToastManager, {
          toastMessages
        }), globalRibbonMarkup, /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
          event: "resize",
          handler: this.handleResize
        })));
      }
    }, navTransitionClasses = {
      enter: css.classNames(Frame_module.default["Navigation-enter"]),
      enterActive: css.classNames(Frame_module.default["Navigation-enterActive"]),
      enterDone: css.classNames(Frame_module.default["Navigation-enterActive"]),
      exit: css.classNames(Frame_module.default["Navigation-exit"]),
      exitActive: css.classNames(Frame_module.default["Navigation-exitActive"])
    };
    function Frame(props) {
      let i18n = hooks.useI18n(), mediaQuery = hooks$1.useMediaQuery();
      return /* @__PURE__ */ React2.createElement(FrameInner, Object.assign({}, props, {
        i18n,
        mediaQuery
      }));
    }
    exports.Frame = Frame;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/FullscreenBar/FullscreenBar.css.js
var require_FullscreenBar_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/FullscreenBar/FullscreenBar.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      FullscreenBar: "Polaris-FullscreenBar",
      BackAction: "Polaris-FullscreenBar__BackAction"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/FullscreenBar/FullscreenBar.js
var require_FullscreenBar = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/FullscreenBar/FullscreenBar.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), FullscreenBar_module = require_FullscreenBar_css(), hooks = require_hooks2(), Text4 = require_Text(), Icon2 = require_Icon();
    function FullscreenBar({
      onAction,
      children
    }) {
      let i18n = hooks.useI18n(), backButtonMarkup = /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "bodyLg"
      }, i18n.translate("Polaris.FullscreenBar.back"));
      return /* @__PURE__ */ React2.createElement("div", {
        className: FullscreenBar_module.default.FullscreenBar
      }, /* @__PURE__ */ React2.createElement("button", {
        className: FullscreenBar_module.default.BackAction,
        onClick: onAction,
        "aria-label": i18n.translate("Polaris.FullscreenBar.accessibilityLabel")
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.ExitIcon
      }), backButtonMarkup), children);
    }
    exports.FullscreenBar = FullscreenBar;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Grid/Grid.css.js
var require_Grid_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Grid/Grid.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Grid: "Polaris-Grid"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Grid/components/Cell/Cell.css.js
var require_Cell_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Grid/components/Cell/Cell.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Cell: "Polaris-Grid-Cell",
      "Cell-1-column-xs": "Polaris-Grid-Cell--cell_1ColumnXs",
      "Cell-2-column-xs": "Polaris-Grid-Cell--cell_2ColumnXs",
      "Cell-3-column-xs": "Polaris-Grid-Cell--cell_3ColumnXs",
      "Cell-4-column-xs": "Polaris-Grid-Cell--cell_4ColumnXs",
      "Cell-5-column-xs": "Polaris-Grid-Cell--cell_5ColumnXs",
      "Cell-6-column-xs": "Polaris-Grid-Cell--cell_6ColumnXs",
      "Cell-1-column-sm": "Polaris-Grid-Cell--cell_1ColumnSm",
      "Cell-2-column-sm": "Polaris-Grid-Cell--cell_2ColumnSm",
      "Cell-3-column-sm": "Polaris-Grid-Cell--cell_3ColumnSm",
      "Cell-4-column-sm": "Polaris-Grid-Cell--cell_4ColumnSm",
      "Cell-5-column-sm": "Polaris-Grid-Cell--cell_5ColumnSm",
      "Cell-6-column-sm": "Polaris-Grid-Cell--cell_6ColumnSm",
      "Cell-1-column-md": "Polaris-Grid-Cell--cell_1ColumnMd",
      "Cell-2-column-md": "Polaris-Grid-Cell--cell_2ColumnMd",
      "Cell-3-column-md": "Polaris-Grid-Cell--cell_3ColumnMd",
      "Cell-4-column-md": "Polaris-Grid-Cell--cell_4ColumnMd",
      "Cell-5-column-md": "Polaris-Grid-Cell--cell_5ColumnMd",
      "Cell-6-column-md": "Polaris-Grid-Cell--cell_6ColumnMd",
      "Cell-1-column-lg": "Polaris-Grid-Cell--cell_1ColumnLg",
      "Cell-2-column-lg": "Polaris-Grid-Cell--cell_2ColumnLg",
      "Cell-3-column-lg": "Polaris-Grid-Cell--cell_3ColumnLg",
      "Cell-4-column-lg": "Polaris-Grid-Cell--cell_4ColumnLg",
      "Cell-5-column-lg": "Polaris-Grid-Cell--cell_5ColumnLg",
      "Cell-6-column-lg": "Polaris-Grid-Cell--cell_6ColumnLg",
      "Cell-7-column-lg": "Polaris-Grid-Cell--cell_7ColumnLg",
      "Cell-8-column-lg": "Polaris-Grid-Cell--cell_8ColumnLg",
      "Cell-9-column-lg": "Polaris-Grid-Cell--cell_9ColumnLg",
      "Cell-10-column-lg": "Polaris-Grid-Cell--cell_10ColumnLg",
      "Cell-11-column-lg": "Polaris-Grid-Cell--cell_11ColumnLg",
      "Cell-12-column-lg": "Polaris-Grid-Cell--cell_12ColumnLg",
      "Cell-1-column-xl": "Polaris-Grid-Cell--cell_1ColumnXl",
      "Cell-2-column-xl": "Polaris-Grid-Cell--cell_2ColumnXl",
      "Cell-3-column-xl": "Polaris-Grid-Cell--cell_3ColumnXl",
      "Cell-4-column-xl": "Polaris-Grid-Cell--cell_4ColumnXl",
      "Cell-5-column-xl": "Polaris-Grid-Cell--cell_5ColumnXl",
      "Cell-6-column-xl": "Polaris-Grid-Cell--cell_6ColumnXl",
      "Cell-7-column-xl": "Polaris-Grid-Cell--cell_7ColumnXl",
      "Cell-8-column-xl": "Polaris-Grid-Cell--cell_8ColumnXl",
      "Cell-9-column-xl": "Polaris-Grid-Cell--cell_9ColumnXl",
      "Cell-10-column-xl": "Polaris-Grid-Cell--cell_10ColumnXl",
      "Cell-11-column-xl": "Polaris-Grid-Cell--cell_11ColumnXl",
      "Cell-12-column-xl": "Polaris-Grid-Cell--cell_12ColumnXl"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Grid/components/Cell/Cell.js
var require_Cell2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Grid/components/Cell/Cell.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Cell_module = require_Cell_css();
    function Cell({
      area: gridArea,
      column,
      columnSpan,
      row,
      children
    }) {
      let className = css.classNames(Cell_module.default.Cell, columnSpan?.xs && Cell_module.default[`Cell-${columnSpan.xs}-column-xs`], columnSpan?.sm && Cell_module.default[`Cell-${columnSpan.sm}-column-sm`], columnSpan?.md && Cell_module.default[`Cell-${columnSpan.md}-column-md`], columnSpan?.lg && Cell_module.default[`Cell-${columnSpan.lg}-column-lg`], columnSpan?.xl && Cell_module.default[`Cell-${columnSpan.xl}-column-xl`]), style = {
        gridArea,
        "--pc-column-xs": column?.xs,
        "--pc-column-sm": column?.sm,
        "--pc-column-md": column?.md,
        "--pc-column-lg": column?.lg,
        "--pc-column-xl": column?.xl,
        "--pc-row-xs": row?.xs,
        "--pc-row-sm": row?.sm,
        "--pc-row-md": row?.md,
        "--pc-row-lg": row?.lg,
        "--pc-row-xl": row?.xl
      };
      return /* @__PURE__ */ React2.createElement("div", {
        className,
        style
      }, children);
    }
    exports.Cell = Cell;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Grid/Grid.js
var require_Grid = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Grid/Grid.js"(exports) {
    "use strict";
    var React2 = require_react(), Grid_module = require_Grid_css(), Cell = require_Cell2(), Grid = function({
      gap,
      areas,
      children,
      columns
    }) {
      let style = {
        "--pc-grid-gap-xs": gap?.xs,
        "--pc-grid-gap-sm": gap?.sm,
        "--pc-grid-gap-md": gap?.md,
        "--pc-grid-gap-lg": gap?.lg,
        "--pc-grid-gap-xl": gap?.xl,
        "--pc-grid-columns-xs": columns?.xs,
        "--pc-grid-columns-sm": columns?.sm,
        "--pc-grid-columns-md": columns?.md,
        "--pc-grid-columns-lg": columns?.lg,
        "--pc-grid-columns-xl": columns?.xl,
        "--pc-grid-areas-xs": formatAreas(areas?.xs),
        "--pc-grid-areas-sm": formatAreas(areas?.sm),
        "--pc-grid-areas-md": formatAreas(areas?.md),
        "--pc-grid-areas-lg": formatAreas(areas?.lg),
        "--pc-grid-areas-xl": formatAreas(areas?.xl)
      };
      return /* @__PURE__ */ React2.createElement("div", {
        className: Grid_module.default.Grid,
        style
      }, children);
    };
    function formatAreas(areas) {
      if (areas)
        return `'${areas?.join("' '")}'`;
    }
    Grid.Cell = Cell.Cell;
    exports.Grid = Grid;
    exports.formatAreas = formatAreas;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/types.js
var require_types3 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/types.js"(exports) {
    "use strict";
    exports.IndexFiltersMode = void 0;
    (function(IndexFiltersMode) {
      IndexFiltersMode.Default = "DEFAULT", IndexFiltersMode.Filtering = "FILTERING", IndexFiltersMode.EditingColumns = "EDITING_COLUMNS";
    })(exports.IndexFiltersMode || (exports.IndexFiltersMode = {}));
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/IndexFilters.css.js
var require_IndexFilters_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/IndexFilters.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      IndexFiltersWrapper: "Polaris-IndexFilters__IndexFiltersWrapper",
      IndexFilters: "Polaris-IndexFilters",
      IndexFiltersSticky: "Polaris-IndexFilters__IndexFiltersSticky",
      IndexFiltersStickyFlush: "Polaris-IndexFilters__IndexFiltersStickyFlush",
      TabsWrapper: "Polaris-IndexFilters__TabsWrapper",
      SmallScreenTabsWrapper: "Polaris-IndexFilters__SmallScreenTabsWrapper",
      TabsWrapperLoading: "Polaris-IndexFilters__TabsWrapperLoading",
      DesktopLoading: "Polaris-IndexFilters__DesktopLoading",
      TabsLoading: "Polaris-IndexFilters__TabsLoading",
      ActionWrap: "Polaris-IndexFilters__ActionWrap",
      Spinner: "Polaris-IndexFilters__Spinner",
      ButtonWrap: "Polaris-IndexFilters__ButtonWrap"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/hooks/useIsSticky/useIsSticky.js
var require_useIsSticky = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/hooks/useIsSticky/useIsSticky.js"(exports) {
    "use strict";
    var React2 = require_react(), debounce = require_debounce(), DEBOUNCE_PERIOD = 250;
    function useIsSticky(mode2, disabled, isFlushWhenSticky) {
      let hasIOSupport = typeof window < "u" && Boolean(window.IntersectionObserver), options = {
        root: null,
        rootMargin: `${isFlushWhenSticky ? "0px" : "-56px"} 0px 0px 0px`,
        threshold: 0
      }, [indexFilteringHeight, setIndexFiltersHeight] = React2.useState(0), [isSticky, setIsSticky] = React2.useState(!1), measurerRef = React2.useRef(null), intersectionRef = React2.useRef(null), handleIntersect = (entries) => {
        entries.forEach((entry2) => {
          setIsSticky(!entry2.isIntersecting);
        });
      }, observerRef = React2.useRef(hasIOSupport ? new IntersectionObserver(handleIntersect, options) : null);
      return React2.useEffect(() => {
        function computeDimensions() {
          let node = measurerRef.current;
          if (!node)
            return {
              height: 0
            };
          let height = node.getBoundingClientRect().height;
          setIndexFiltersHeight(height);
        }
        computeDimensions();
        let debouncedComputeDimensions = debounce.debounce(computeDimensions, DEBOUNCE_PERIOD, {
          trailing: !0
        });
        return window.addEventListener("resize", debouncedComputeDimensions), () => window.removeEventListener("resize", debouncedComputeDimensions);
      }, [measurerRef, mode2]), React2.useEffect(() => {
        let observer = observerRef.current;
        if (!observer)
          return;
        let node = intersectionRef.current;
        return node && observer.observe(node), () => {
          observer?.disconnect();
        };
      }, [intersectionRef]), {
        intersectionRef,
        measurerRef,
        isSticky: isSticky && !disabled,
        indexFilteringHeight
      };
    }
    exports.useIsSticky = useIsSticky;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-is-touch-device.js
var require_use_is_touch_device = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-is-touch-device.js"(exports) {
    "use strict";
    var React2 = require_react(), useEventListener = require_use_event_listener();
    function useIsTouchDevice() {
      let [isTouchDevice, setIsTouchDevice] = React2.useState(!1), handleTouchStart = React2.useCallback(() => setIsTouchDevice(!0), []);
      return useEventListener.useEventListener("touchstart", handleTouchStart), isTouchDevice;
    }
    exports.useIsTouchDevice = useIsTouchDevice;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/UpdateButtons/UpdateButtons.js
var require_UpdateButtons = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/UpdateButtons/UpdateButtons.js"(exports) {
    "use strict";
    var React2 = require_react(), focus = require_focus(), useIsTouchDevice = require_use_is_touch_device(), hooks = require_hooks2(), Button4 = require_Button(), InlineStack4 = require_InlineStack(), Modal3 = require_Modal(), Form = require_Form(), FormLayout = require_FormLayout(), TextField2 = require_TextField(), MAX_VIEW_NAME_LENGTH = 40;
    function UpdateButtons({
      primaryAction,
      cancelAction,
      viewNames,
      disabled
    }) {
      let i18n = hooks.useI18n(), [savedViewName, setSavedViewName] = React2.useState(""), [savedViewModalOpen, setSavedViewModalOpen] = React2.useState(!1), container = React2.useRef(null), isTouchDevice = useIsTouchDevice.useIsTouchDevice();
      React2.useEffect(() => {
        !container.current || isTouchDevice || savedViewModalOpen && focus.focusFirstFocusableNode(container.current);
      }, [savedViewModalOpen, isTouchDevice]);
      async function handleClickSaveButton() {
        primaryAction?.type === "save-as" ? handleOpenModal() : await primaryAction?.onAction("");
      }
      function handleOpenModal() {
        setSavedViewModalOpen(!0);
      }
      function handleCloseModal() {
        setSavedViewModalOpen(!1);
      }
      function handleChange(value) {
        setSavedViewName(value);
      }
      async function handlePrimaryAction() {
        isPrimaryActionDisabled || (await primaryAction?.onAction(savedViewName), handleCloseModal());
      }
      let buttonText = React2.useMemo(() => {
        switch (primaryAction?.type) {
          case "save":
            return i18n.translate("Polaris.IndexFilters.UpdateButtons.save");
          case "save-as":
          default:
            return i18n.translate("Polaris.IndexFilters.UpdateButtons.saveAs");
        }
      }, [primaryAction?.type, i18n]), saveButton = /* @__PURE__ */ React2.createElement(Button4.Button, {
        size: "micro",
        onClick: handleClickSaveButton,
        disabled: primaryAction?.disabled || disabled
      }, buttonText), hasSameNameError = viewNames.some((name) => name.trim().toLowerCase() === savedViewName.trim().toLowerCase()), isPrimaryActionDisabled = hasSameNameError || !savedViewName || primaryAction?.loading || savedViewName.length > MAX_VIEW_NAME_LENGTH, cancelButtonMarkup = cancelAction ? /* @__PURE__ */ React2.createElement(Button4.Button, {
        variant: "tertiary",
        size: "micro",
        onClick: cancelAction.onAction,
        disabled
      }, i18n.translate("Polaris.IndexFilters.UpdateButtons.cancel")) : null;
      return primaryAction ? /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        align: "start",
        blockAlign: "center",
        gap: "100"
      }, cancelButtonMarkup, primaryAction.type === "save-as" ? /* @__PURE__ */ React2.createElement(Modal3.Modal, {
        activator: /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, null, saveButton),
        open: savedViewModalOpen,
        title: i18n.translate("Polaris.IndexFilters.UpdateButtons.modal.title"),
        onClose: handleCloseModal,
        primaryAction: {
          onAction: handlePrimaryAction,
          content: i18n.translate("Polaris.IndexFilters.UpdateButtons.modal.save"),
          disabled: isPrimaryActionDisabled
        },
        secondaryActions: [{
          onAction: handleCloseModal,
          content: i18n.translate("Polaris.IndexFilters.UpdateButtons.modal.cancel")
        }]
      }, /* @__PURE__ */ React2.createElement(Modal3.Modal.Section, null, /* @__PURE__ */ React2.createElement(Form.Form, {
        onSubmit: handlePrimaryAction
      }, /* @__PURE__ */ React2.createElement(FormLayout.FormLayout, null, /* @__PURE__ */ React2.createElement("div", {
        ref: container
      }, /* @__PURE__ */ React2.createElement(TextField2.TextField, {
        label: i18n.translate("Polaris.IndexFilters.UpdateButtons.modal.label"),
        value: savedViewName,
        onChange: handleChange,
        autoComplete: "off",
        maxLength: MAX_VIEW_NAME_LENGTH,
        showCharacterCount: !0,
        error: hasSameNameError ? i18n.translate("Polaris.IndexFilters.UpdateButtons.modal.sameName", {
          name: savedViewName
        }) : void 0
      })))))) : saveButton) : cancelButtonMarkup;
    }
    exports.UpdateButtons = UpdateButtons;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/SortButton/components/DirectionButton/DirectionButton.css.js
var require_DirectionButton_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/SortButton/components/DirectionButton/DirectionButton.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      DirectionButton: "Polaris-SortButton-DirectionButton",
      "DirectionButton-active": "Polaris-SortButton-DirectionButton__DirectionButton--active"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/SortButton/components/DirectionButton/DirectionButton.js
var require_DirectionButton = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/SortButton/components/DirectionButton/DirectionButton.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), DirectionButton_module = require_DirectionButton_css(), UnstyledButton = require_UnstyledButton(), Icon2 = require_Icon(), Text4 = require_Text();
    function DirectionButton({
      onClick,
      active,
      children,
      direction,
      value
    }) {
      let classes = css.classNames(DirectionButton_module.default.DirectionButton, active && DirectionButton_module.default["DirectionButton-active"]);
      function handleClick() {
        onClick([value]);
      }
      return /* @__PURE__ */ React2.createElement(UnstyledButton.UnstyledButton, {
        className: classes,
        onClick: handleClick
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: direction === "asc" ? polarisIcons.ArrowUpIcon : polarisIcons.ArrowDownIcon,
        tone: "base"
      }), /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "bodySm",
        fontWeight: "medium"
      }, children));
    }
    exports.DirectionButton = DirectionButton;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/SortButton/SortButton.js
var require_SortButton = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/SortButton/SortButton.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), ChoiceList = require_ChoiceList(), DirectionButton = require_DirectionButton(), hooks = require_hooks2(), Tooltip = require_Tooltip(), Button4 = require_Button(), Popover = require_Popover(), Box4 = require_Box();
    exports.SortButtonDirection = void 0;
    (function(SortButtonDirection) {
      SortButtonDirection.Asc = "asc", SortButtonDirection.Desc = "desc";
    })(exports.SortButtonDirection || (exports.SortButtonDirection = {}));
    function SortButton({
      choices,
      selected,
      onChange,
      disabled,
      onChangeKey,
      onChangeDirection
    }) {
      let i18n = hooks.useI18n(), [active, setActive] = React2.useState(!1), [selectedValueKey, selectedDirection] = selected[0].split(" ");
      function handleClick() {
        setActive((pastActive) => !pastActive);
      }
      function handleClose() {
        setActive(!1);
      }
      function handleChangeChoiceList(sel) {
        if (onChangeKey) {
          let [key] = sel[0].split(" ");
          onChangeKey(key);
        } else
          onChange(sel);
      }
      function handleChangeDirection(sel) {
        if (onChangeDirection) {
          let [, direction] = sel[0].split(" ");
          onChangeDirection(direction);
        } else
          onChange(sel);
      }
      let choiceListChoices = React2.useMemo(() => choices.reduce((acc, curr) => {
        let alreadyExists = acc.some((option) => option.label === curr.label), [, currentValueDirection] = curr.value.split(" "), isSameDirection = currentValueDirection === selectedDirection;
        return alreadyExists ? isSameDirection ? acc.map((option) => option.label === curr.label ? curr : option) : acc : [...acc, curr];
      }, []), [choices, selectedDirection]), selectedChoices = choices.filter((choice) => {
        let [currentKey] = choice.value.split(" ");
        return currentKey === selectedValueKey;
      }), sortButton = /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, {
        content: i18n.translate("Polaris.IndexFilters.SortButton.tooltip"),
        preferredPosition: "above",
        hoverDelay: 400
      }, /* @__PURE__ */ React2.createElement(Button4.Button, {
        size: "slim",
        icon: polarisIcons.SortIcon,
        onClick: handleClick,
        disabled,
        accessibilityLabel: i18n.translate("Polaris.IndexFilters.SortButton.ariaLabel")
      }));
      return /* @__PURE__ */ React2.createElement(Popover.Popover, {
        active: active && !disabled,
        activator: sortButton,
        autofocusTarget: "first-node",
        onClose: handleClose,
        preferredAlignment: "right",
        fluidContent: !0
      }, /* @__PURE__ */ React2.createElement(Box4.Box, {
        minWidth: "148px",
        paddingInlineStart: "300",
        paddingInlineEnd: "300",
        paddingBlockStart: "200",
        paddingBlockEnd: "200",
        borderBlockEndWidth: "025",
        borderColor: "border-secondary"
      }, /* @__PURE__ */ React2.createElement(ChoiceList.ChoiceList, {
        title: i18n.translate("Polaris.IndexFilters.SortButton.title"),
        choices: choiceListChoices,
        selected,
        onChange: handleChangeChoiceList
      })), /* @__PURE__ */ React2.createElement(Box4.Box, {
        paddingInlineStart: "150",
        paddingInlineEnd: "150",
        paddingBlockStart: "200",
        paddingBlockEnd: "200"
      }, /* @__PURE__ */ React2.createElement(DirectionButton.DirectionButton, {
        direction: "asc",
        active: selectedDirection === exports.SortButtonDirection.Asc,
        onClick: handleChangeDirection,
        value: selectedChoices?.[0]?.value
      }, selectedChoices?.[0]?.directionLabel), /* @__PURE__ */ React2.createElement(DirectionButton.DirectionButton, {
        direction: "desc",
        active: selectedDirection === exports.SortButtonDirection.Desc,
        onClick: handleChangeDirection,
        value: selectedChoices?.[1]?.value
      }, selectedChoices?.[1]?.directionLabel)));
    }
    exports.SortButton = SortButton;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/Container/Container.css.js
var require_Container_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/Container/Container.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Container: "Polaris-IndexFilters-Container"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/Container/Container.js
var require_Container = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/Container/Container.js"(exports) {
    "use strict";
    var React2 = require_react(), Container_module = require_Container_css(), Container = ({
      children
    }) => /* @__PURE__ */ React2.createElement("div", {
      className: Container_module.default.Container
    }, children);
    exports.Container = Container;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-previous.js
var require_use_previous = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-previous.js"(exports) {
    "use strict";
    var React2 = require_react();
    function usePrevious(value) {
      let ref = React2.useRef();
      return React2.useEffect(() => {
        ref.current = value;
      }, [value]), ref.current;
    }
    exports.usePrevious = usePrevious;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tabs/utilities.js
var require_utilities9 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tabs/utilities.js"(exports) {
    "use strict";
    function getVisibleAndHiddenTabIndices(tabs, selected, disclosureWidth, tabWidths, containerWidth) {
      let sumTabWidths = tabWidths.reduce((sum, width) => sum + width, 0), arrayOfTabIndices = tabs.map((_, index) => index), visibleTabs = [], hiddenTabs = [];
      if (containerWidth > sumTabWidths)
        visibleTabs.push(...arrayOfTabIndices);
      else {
        visibleTabs.push(selected);
        let tabListWidth = tabWidths[selected];
        arrayOfTabIndices.forEach((currentTabIndex) => {
          if (currentTabIndex !== selected) {
            let currentTabWidth = tabWidths[currentTabIndex];
            if (tabListWidth + currentTabWidth >= containerWidth - disclosureWidth) {
              hiddenTabs.push(currentTabIndex);
              return;
            }
            visibleTabs.push(currentTabIndex), tabListWidth += currentTabWidth;
          }
        });
      }
      return {
        visibleTabs,
        hiddenTabs
      };
    }
    exports.getVisibleAndHiddenTabIndices = getVisibleAndHiddenTabIndices;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tabs/Tabs.css.js
var require_Tabs_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tabs/Tabs.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Outer: "Polaris-Tabs__Outer",
      Wrapper: "Polaris-Tabs__Wrapper",
      WrapperWithNewButton: "Polaris-Tabs__WrapperWithNewButton",
      ButtonWrapper: "Polaris-Tabs__ButtonWrapper",
      Tabs: "Polaris-Tabs",
      Tab: "Polaris-Tabs__Tab",
      "Tab-active": "Polaris-Tabs__Tab--active",
      "Tab-hasActions": "Polaris-Tabs__Tab--hasActions",
      "Tab-iconOnly": "Polaris-Tabs__Tab--iconOnly",
      fillSpace: "Polaris-Tabs--fillSpace",
      TabContainer: "Polaris-Tabs__TabContainer",
      fitted: "Polaris-Tabs--fitted",
      titleWithIcon: "Polaris-Tabs--titleWithIcon",
      List: "Polaris-Tabs__List",
      Item: "Polaris-Tabs__Item",
      DisclosureTab: "Polaris-Tabs__DisclosureTab",
      "DisclosureTab-visible": "Polaris-Tabs__DisclosureTab--visible",
      DisclosureActivator: "Polaris-Tabs__DisclosureActivator",
      TabsMeasurer: "Polaris-Tabs__TabsMeasurer",
      NewTab: "Polaris-Tabs__NewTab",
      ActionListWrap: "Polaris-Tabs__ActionListWrap",
      Panel: "Polaris-Tabs__Panel",
      "Panel-hidden": "Polaris-Tabs__Panel--hidden"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tabs/components/Tab/components/DuplicateModal/DuplicateModal.js
var require_DuplicateModal = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tabs/components/Tab/components/DuplicateModal/DuplicateModal.js"(exports) {
    "use strict";
    var React2 = require_react(), focus = require_focus(), hooks = require_hooks2(), Modal3 = require_Modal(), Form = require_Form(), FormLayout = require_FormLayout(), TextField2 = require_TextField(), MAX_VIEW_NAME_LENGTH = 40;
    function DuplicateModal({
      open,
      isModalLoading,
      name,
      onClose,
      onClickPrimaryAction,
      onClickSecondaryAction,
      helpText,
      viewNames
    }) {
      let i18n = hooks.useI18n(), [value, setValue] = React2.useState(name), container = React2.useRef(null), hasSameNameError = viewNames?.some((viewName) => viewName.trim().toLowerCase() === value.trim().toLowerCase()), isPrimaryActionDisabled = isModalLoading || hasSameNameError || !value || value.length > MAX_VIEW_NAME_LENGTH;
      React2.useEffect(() => {
        container.current && open && focus.focusFirstFocusableNode(container.current);
      }, [open]), React2.useEffect(() => {
        open && setValue(name.slice(0, MAX_VIEW_NAME_LENGTH));
      }, [name, open]);
      let handleChange = React2.useCallback((newValue) => {
        setValue(newValue);
      }, []);
      async function handlePrimaryAction() {
        isPrimaryActionDisabled || (await onClickPrimaryAction(value), setValue(""), onClose());
      }
      function handleSecondaryAction() {
        onClickSecondaryAction?.(), setValue(name), onClose();
      }
      return /* @__PURE__ */ React2.createElement(Modal3.Modal, {
        open,
        onClose,
        title: i18n.translate("Polaris.Tabs.DuplicateModal.title"),
        primaryAction: {
          content: i18n.translate("Polaris.Tabs.DuplicateModal.create"),
          onAction: handlePrimaryAction,
          disabled: isPrimaryActionDisabled
        },
        secondaryActions: [{
          content: i18n.translate("Polaris.Tabs.DuplicateModal.cancel"),
          onAction: handleSecondaryAction
        }],
        instant: !0
      }, /* @__PURE__ */ React2.createElement(Modal3.Modal.Section, null, /* @__PURE__ */ React2.createElement(Form.Form, {
        onSubmit: handlePrimaryAction
      }, /* @__PURE__ */ React2.createElement(FormLayout.FormLayout, null, /* @__PURE__ */ React2.createElement("div", {
        ref: container
      }, /* @__PURE__ */ React2.createElement(TextField2.TextField, {
        label: i18n.translate("Polaris.Tabs.DuplicateModal.label"),
        value,
        onChange: handleChange,
        autoComplete: "off",
        helpText,
        maxLength: MAX_VIEW_NAME_LENGTH,
        showCharacterCount: !0,
        error: hasSameNameError ? i18n.translate("Polaris.Tabs.DuplicateModal.errors.sameName", {
          name: value
        }) : void 0
      }))))));
    }
    exports.DuplicateModal = DuplicateModal;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tabs/components/Tab/components/RenameModal/RenameModal.js
var require_RenameModal = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tabs/components/Tab/components/RenameModal/RenameModal.js"(exports) {
    "use strict";
    var React2 = require_react(), focus = require_focus(), Form = require_Form(), FormLayout = require_FormLayout(), hooks = require_hooks2(), Modal3 = require_Modal(), TextField2 = require_TextField();
    function RenameModal({
      open,
      isModalLoading,
      name,
      onClose,
      onClickPrimaryAction,
      onClickSecondaryAction,
      helpText,
      viewNames
    }) {
      let i18n = hooks.useI18n(), [value, setValue] = React2.useState(name), container = React2.useRef(null), hasSameNameError = viewNames?.filter((viewName) => viewName !== name).some((viewName) => viewName.trim().toLowerCase() === value.trim().toLowerCase()), isPrimaryActionDisabled = isModalLoading || hasSameNameError || value === name || !value;
      React2.useEffect(() => {
        container.current && open && focus.focusFirstFocusableNode(container.current);
      }, [open]), React2.useEffect(() => {
        open && setValue(name);
      }, [name, open]);
      let handleChange = React2.useCallback((newValue) => {
        setValue(newValue);
      }, []);
      async function handlePrimaryAction() {
        isPrimaryActionDisabled || (await onClickPrimaryAction(value), setValue(""), onClose());
      }
      function handleSecondaryAction() {
        onClickSecondaryAction?.(), setValue(name), onClose();
      }
      return /* @__PURE__ */ React2.createElement(Modal3.Modal, {
        open,
        onClose,
        title: i18n.translate("Polaris.Tabs.RenameModal.title"),
        primaryAction: {
          content: i18n.translate("Polaris.Tabs.RenameModal.create"),
          onAction: handlePrimaryAction,
          disabled: isPrimaryActionDisabled
        },
        secondaryActions: [{
          content: i18n.translate("Polaris.Tabs.RenameModal.cancel"),
          onAction: handleSecondaryAction
        }],
        instant: !0
      }, /* @__PURE__ */ React2.createElement(Modal3.Modal.Section, null, /* @__PURE__ */ React2.createElement(Form.Form, {
        onSubmit: handlePrimaryAction
      }, /* @__PURE__ */ React2.createElement(FormLayout.FormLayout, null, /* @__PURE__ */ React2.createElement("div", {
        ref: container
      }, /* @__PURE__ */ React2.createElement(TextField2.TextField, {
        label: i18n.translate("Polaris.Tabs.RenameModal.label"),
        value,
        onChange: handleChange,
        autoComplete: "off",
        helpText,
        maxLength: 40,
        showCharacterCount: !0,
        error: hasSameNameError ? i18n.translate("Polaris.Tabs.RenameModal.errors.sameName", {
          name: value
        }) : void 0
      }))))));
    }
    exports.RenameModal = RenameModal;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tabs/components/Tab/Tab.js
var require_Tab = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tabs/components/Tab/Tab.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), focus = require_focus(), Tabs_module = require_Tabs_css(), DuplicateModal = require_DuplicateModal(), RenameModal = require_RenameModal(), hooks = require_hooks2(), Icon2 = require_Icon(), Modal3 = require_Modal(), Popover = require_Popover(), ActionList = require_ActionList(), InlineStack4 = require_InlineStack(), Text4 = require_Text(), UnstyledLink = require_UnstyledLink(), UnstyledButton = require_UnstyledButton(), Badge4 = require_Badge(), Tab = /* @__PURE__ */ React2.forwardRef(({
      content,
      accessibilityLabel,
      badge,
      id,
      panelID,
      url,
      onAction,
      actions,
      disabled,
      isModalLoading,
      icon,
      siblingTabHasFocus,
      measuring,
      focused,
      selected,
      onToggleModal,
      onTogglePopover,
      viewNames,
      tabIndexOverride,
      onFocus
    }, ref) => {
      let i18n = hooks.useI18n(), [popoverActive, setPopoverActive] = React2.useState(!1), [activeModalType, setActiveModalType] = React2.useState(null), wasSelected = React2.useRef(selected), panelFocused = React2.useRef(!1), node = React2.useRef(null);
      React2.useEffect(() => {
        onTogglePopover(popoverActive);
      }, [popoverActive, onTogglePopover]), React2.useEffect(() => {
        onToggleModal(Boolean(activeModalType));
      }, [activeModalType, onToggleModal]), React2.useEffect(() => () => {
        onToggleModal(!1), onTogglePopover(!1);
      }, [onToggleModal, onTogglePopover]), React2.useEffect(() => {
        if (measuring)
          return;
        (focused || document.activeElement && document.activeElement.id === id) && selected && panelID != null && !panelFocused.current && (focusPanelID(panelID), panelFocused.current = !0), selected && !wasSelected.current && panelID != null ? focusPanelID(panelID) : focused && node.current != null && activeModalType == null && !disabled && focus.focusFirstFocusableNode(node.current), wasSelected.current = selected;
      }, [focused, id, content, measuring, panelID, selected, activeModalType, disabled]);
      let tabIndex;
      selected && !siblingTabHasFocus && !measuring || focused && !measuring ? tabIndex = 0 : tabIndex = -1, tabIndexOverride != null && (tabIndex = tabIndexOverride);
      let renameAction = actions?.find((action8) => action8.type === "rename"), duplicateAction = actions?.find((action8) => action8.type === "duplicate"), deleteAction = actions?.find((action8) => action8.type === "delete"), togglePopoverActive = React2.useCallback(() => {
        actions?.length && setPopoverActive((popoverActive2) => !popoverActive2);
      }, [actions]), handleClick = React2.useCallback(() => {
        disabled || (selected ? togglePopoverActive() : onAction?.());
      }, [selected, onAction, togglePopoverActive, disabled]), handleModalOpen = (type) => {
        setActiveModalType(type);
      }, handleModalClose = () => {
        setActiveModalType(null);
      }, handleSaveRenameModal = React2.useCallback(async (value) => {
        await renameAction?.onPrimaryAction?.(value), setTimeout(() => {
          node.current && focus.focusFirstFocusableNode(node.current);
        }, 250);
      }, [renameAction]), handleConfirmDeleteView = React2.useCallback(async () => {
        await deleteAction?.onPrimaryAction?.(content), handleModalClose();
      }, [deleteAction, content]), handleSaveDuplicateModal = React2.useCallback(async (duplicateName) => {
        await duplicateAction?.onPrimaryAction?.(duplicateName);
      }, [duplicateAction]), actionContent = {
        rename: {
          icon: polarisIcons.InfoIcon,
          content: i18n.translate("Polaris.Tabs.Tab.rename")
        },
        duplicate: {
          icon: polarisIcons.DuplicateIcon,
          content: i18n.translate("Polaris.Tabs.Tab.duplicate")
        },
        edit: {
          icon: polarisIcons.EditIcon,
          content: i18n.translate("Polaris.Tabs.Tab.edit")
        },
        "edit-columns": {
          icon: polarisIcons.LayoutColumns3Icon,
          content: i18n.translate("Polaris.Tabs.Tab.editColumns")
        },
        delete: {
          icon: polarisIcons.DeleteIcon,
          content: i18n.translate("Polaris.Tabs.Tab.delete"),
          destructive: !0
        }
      }, formattedActions = actions?.map(({
        type,
        onAction: onAction2,
        onPrimaryAction,
        ...additionalOptions
      }) => {
        let isModalActivator = !type.includes("edit");
        return {
          ...actionContent[type],
          ...additionalOptions,
          onAction: () => {
            onAction2?.(content), togglePopoverActive(), isModalActivator && handleModalOpen(type);
          }
        };
      }), handleKeyDown = React2.useCallback((event) => {
        event.key === " " && (event.preventDefault(), handleClick());
      }, [handleClick]), tabContainerClassNames = css.classNames(Tabs_module.default.TabContainer, selected && Tabs_module.default.Underline), urlIfNotDisabledOrSelected = disabled || selected ? void 0 : url, BaseComponent = urlIfNotDisabledOrSelected ? UnstyledLink.UnstyledLink : UnstyledButton.UnstyledButton, tabClassName = css.classNames(Tabs_module.default.Tab, icon && Tabs_module.default["Tab-iconOnly"], popoverActive && Tabs_module.default["Tab-popoverActive"], selected && Tabs_module.default["Tab-active"], selected && actions?.length && Tabs_module.default["Tab-hasActions"]), badgeMarkup = badge ? /* @__PURE__ */ React2.createElement(Badge4.Badge, {
        tone: selected ? void 0 : "new"
      }, badge) : null, disclosureMarkup = selected && actions?.length ? /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Tabs_module.default.IconWrap)
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.ChevronDownIcon
      })) : null, activator = /* @__PURE__ */ React2.createElement(BaseComponent, {
        id,
        className: tabClassName,
        tabIndex,
        "aria-selected": selected,
        "aria-controls": panelID,
        "aria-label": accessibilityLabel,
        role: tabIndexOverride == null ? "tab" : void 0,
        disabled,
        url: urlIfNotDisabledOrSelected,
        onFocus,
        onMouseUp: focus.handleMouseUpByBlurring,
        onClick: handleClick,
        onKeyDown: handleKeyDown
      }, /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        gap: "200",
        align: "center",
        blockAlign: "center",
        wrap: !1
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "bodySm",
        fontWeight: "medium"
      }, icon ?? content), badgeMarkup), disclosureMarkup), isPlainButton = !selected || !actions?.length, renameModal = renameAction ? /* @__PURE__ */ React2.createElement(RenameModal.RenameModal, {
        name: content,
        open: activeModalType === "rename",
        onClose: handleModalClose,
        onClickPrimaryAction: handleSaveRenameModal,
        isModalLoading,
        viewNames
      }) : null, duplicateModal = duplicateAction ? /* @__PURE__ */ React2.createElement(DuplicateModal.DuplicateModal, {
        open: activeModalType === "duplicate",
        name: i18n.translate("Polaris.Tabs.Tab.copy", {
          name: content
        }),
        onClose: handleModalClose,
        onClickPrimaryAction: handleSaveDuplicateModal,
        isModalLoading,
        viewNames: viewNames || []
      }) : null, deleteModal = deleteAction ? /* @__PURE__ */ React2.createElement(Modal3.Modal, {
        open: activeModalType === "delete",
        onClose: handleModalClose,
        primaryAction: {
          content: i18n.translate("Polaris.Tabs.Tab.deleteModal.delete"),
          onAction: handleConfirmDeleteView,
          destructive: !0,
          disabled: isModalLoading
        },
        secondaryActions: [{
          content: i18n.translate("Polaris.Tabs.Tab.deleteModal.cancel"),
          onAction: handleModalClose
        }],
        title: i18n.translate("Polaris.Tabs.Tab.deleteModal.title"),
        instant: !0
      }, /* @__PURE__ */ React2.createElement(Modal3.Modal.Section, null, i18n.translate("Polaris.Tabs.Tab.deleteModal.description", {
        viewName: content
      }))) : null, markup = isPlainButton || disabled ? activator : /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(Popover.Popover, {
        active: popoverActive,
        activator,
        autofocusTarget: "first-node",
        onClose: togglePopoverActive
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Tabs_module.default.ActionListWrap
      }, /* @__PURE__ */ React2.createElement(ActionList.ActionList, {
        actionRole: "menuitem",
        items: formattedActions
      }))), renameModal, duplicateModal, deleteModal);
      return icon ? markup : /* @__PURE__ */ React2.createElement("li", {
        className: tabContainerClassNames,
        ref: mergeRefs([node, ref]),
        role: "presentation"
      }, markup);
    });
    Tab.displayName = "Tab";
    function focusPanelID(panelID) {
      let panel = document.getElementById(panelID);
      panel && panel.focus({
        preventScroll: !0
      });
    }
    function mergeRefs(refs) {
      return (node) => {
        for (let ref of refs)
          ref != null && (ref.current = node);
      };
    }
    exports.Tab = Tab;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tabs/components/TabMeasurer/TabMeasurer.js
var require_TabMeasurer = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tabs/components/TabMeasurer/TabMeasurer.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), useComponentDidMount = require_use_component_did_mount(), useEventListener = require_use_event_listener(), Tabs_module = require_Tabs_css(), Tab = require_Tab(), TabMeasurer = /* @__PURE__ */ React2.memo(function({
      selected,
      tabs,
      activator,
      tabToFocus,
      siblingTabHasFocus,
      handleMeasurement: handleMeasurementProp
    }) {
      let containerNode = React2.useRef(null), animationFrame = React2.useRef(null), handleMeasurement = React2.useCallback(() => {
        animationFrame.current && cancelAnimationFrame(animationFrame.current), animationFrame.current = requestAnimationFrame(() => {
          if (!containerNode.current)
            return;
          let containerWidth = containerNode.current.offsetWidth - 20 - 28, hiddenTabNodes = containerNode.current.children, hiddenTabWidths = Array.from(hiddenTabNodes).map((node) => Math.ceil(node.getBoundingClientRect().width) + 4), disclosureWidth = hiddenTabWidths.pop() || 0;
          handleMeasurementProp({
            containerWidth,
            disclosureWidth,
            hiddenTabWidths
          });
        });
      }, [handleMeasurementProp]);
      React2.useEffect(() => {
        handleMeasurement();
      }, [handleMeasurement, tabs]), useComponentDidMount.useComponentDidMount(() => {
      });
      let tabsMarkup = tabs.map((tab, index) => /* @__PURE__ */ React2.createElement(Tab.Tab, {
        measuring: !0,
        key: `$${tab.id}Hidden`,
        id: `${tab.id}Measurer`,
        siblingTabHasFocus,
        focused: index === tabToFocus,
        selected: index === selected,
        url: tab.url,
        content: tab.content,
        onTogglePopover: noop,
        onToggleModal: noop
      })), classname = css.classNames(Tabs_module.default.Tabs, Tabs_module.default.TabsMeasurer);
      return useEventListener.useEventListener("resize", handleMeasurement), /* @__PURE__ */ React2.createElement("div", {
        className: classname,
        ref: containerNode
      }, tabsMarkup, activator);
    });
    function noop() {
    }
    exports.TabMeasurer = TabMeasurer;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tabs/components/Panel/Panel.js
var require_Panel = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tabs/components/Panel/Panel.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Tabs_module = require_Tabs_css();
    function Panel({
      hidden,
      id,
      tabID,
      children
    }) {
      let className = css.classNames(Tabs_module.default.Panel, hidden && Tabs_module.default["Panel-hidden"]);
      return /* @__PURE__ */ React2.createElement("div", {
        className,
        id,
        role: "tabpanel",
        "aria-labelledby": tabID,
        tabIndex: -1
      }, children);
    }
    exports.Panel = Panel;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tabs/components/Item/Item.js
var require_Item6 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tabs/components/Item/Item.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Tabs_module = require_Tabs_css(), UnstyledLink = require_UnstyledLink(), Item = /* @__PURE__ */ React2.memo(function({
      id,
      focused,
      children,
      url,
      accessibilityLabel,
      onClick = noop
    }) {
      let focusedNode = React2.useRef(null);
      React2.useEffect(() => {
        focusedNode.current && focusedNode.current instanceof HTMLElement && focused && focusedNode.current.focus();
      }, [focusedNode, focused]);
      let classname = css.classNames(Tabs_module.default.Item), sharedProps = {
        id,
        ref: focusedNode,
        onClick,
        className: classname,
        "aria-selected": !1,
        "aria-label": accessibilityLabel
      }, markup = url ? /* @__PURE__ */ React2.createElement(UnstyledLink.UnstyledLink, Object.assign({}, sharedProps, {
        url
      }), children) : /* @__PURE__ */ React2.createElement("button", Object.assign({}, sharedProps, {
        ref: focusedNode,
        type: "button"
      }), children);
      return /* @__PURE__ */ React2.createElement("li", null, markup);
    });
    function noop() {
    }
    exports.Item = Item;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tabs/components/List/List.js
var require_List = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tabs/components/List/List.js"(exports) {
    "use strict";
    var React2 = require_react(), Tabs_module = require_Tabs_css(), Item = require_Item6();
    function List({
      focusIndex,
      disclosureTabs,
      onClick = noop,
      onKeyPress = noop
    }) {
      let tabs = disclosureTabs.map(({
        id,
        content,
        ...tabProps
      }, index) => /* @__PURE__ */ React2.createElement(Item.Item, Object.assign({
        key: id
      }, tabProps, {
        id,
        focused: index === focusIndex,
        onClick: onClick.bind(null, id)
      }), content));
      return /* @__PURE__ */ React2.createElement("ul", {
        className: Tabs_module.default.List,
        onKeyDown: handleKeyDown,
        onKeyUp: onKeyPress
      }, tabs);
    }
    function noop() {
    }
    function handleKeyDown(event) {
      let {
        key
      } = event;
      (key === "ArrowLeft" || key === "ArrowRight") && (event.preventDefault(), event.stopPropagation());
    }
    exports.List = List;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tabs/components/CreateViewModal/CreateViewModal.js
var require_CreateViewModal = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tabs/components/CreateViewModal/CreateViewModal.js"(exports) {
    "use strict";
    var React2 = require_react(), useIsTouchDevice = require_use_is_touch_device(), focus = require_focus(), hooks = require_hooks2(), Modal3 = require_Modal(), Form = require_Form(), FormLayout = require_FormLayout(), TextField2 = require_TextField(), MAX_VIEW_NAME_LENGTH = 40;
    function CreateViewModal({
      activator,
      open,
      onClose,
      onClickPrimaryAction,
      onClickSecondaryAction,
      viewNames
    }) {
      let i18n = hooks.useI18n(), [value, setValue] = React2.useState(""), [loading, setLoading] = React2.useState(!1), container = React2.useRef(null), isTouchDevice = useIsTouchDevice.useIsTouchDevice(), hasSameNameError = viewNames.some((viewName) => viewName.trim().toLowerCase() === value.trim().toLowerCase()), isPrimaryActionDisabled = !value || hasSameNameError || loading || value.length > MAX_VIEW_NAME_LENGTH;
      React2.useEffect(() => {
        if (!(!container.current || isTouchDevice) && open) {
          focus.focusFirstFocusableNode(container.current);
          let timeout = setTimeout(() => {
            container.current && focus.focusFirstFocusableNode(container.current);
          }, 50);
          return () => clearTimeout(timeout);
        }
      }, [open, isTouchDevice]);
      let handleChange = React2.useCallback((newValue) => {
        setValue(newValue);
      }, []);
      async function handlePrimaryAction() {
        hasSameNameError || isPrimaryActionDisabled || (setLoading(!0), await onClickPrimaryAction(value), setLoading(!1), setValue(""), onClose());
      }
      function handleSecondaryAction() {
        onClickSecondaryAction?.(), setValue(""), onClose();
      }
      return /* @__PURE__ */ React2.createElement(Modal3.Modal, {
        activator,
        open,
        onClose,
        title: i18n.translate("Polaris.Tabs.CreateViewModal.title"),
        primaryAction: {
          content: i18n.translate("Polaris.Tabs.CreateViewModal.create"),
          onAction: handlePrimaryAction,
          disabled: isPrimaryActionDisabled
        },
        secondaryActions: [{
          content: i18n.translate("Polaris.Tabs.CreateViewModal.cancel"),
          onAction: handleSecondaryAction
        }]
      }, /* @__PURE__ */ React2.createElement(Modal3.Modal.Section, null, /* @__PURE__ */ React2.createElement(Form.Form, {
        onSubmit: handlePrimaryAction
      }, /* @__PURE__ */ React2.createElement(FormLayout.FormLayout, null, /* @__PURE__ */ React2.createElement("div", {
        ref: container
      }, /* @__PURE__ */ React2.createElement(TextField2.TextField, {
        label: i18n.translate("Polaris.Tabs.CreateViewModal.label"),
        value,
        onChange: handleChange,
        autoComplete: "off",
        maxLength: MAX_VIEW_NAME_LENGTH,
        showCharacterCount: !0,
        error: hasSameNameError ? i18n.translate("Polaris.Tabs.CreateViewModal.errors.sameName", {
          name: value
        }) : void 0
      }))))));
    }
    exports.CreateViewModal = CreateViewModal;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tabs/Tabs.js
var require_Tabs = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tabs/Tabs.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), breakpoints = require_breakpoints(), usePrevious = require_use_previous(), utilities = require_utilities9(), Tabs_module = require_Tabs_css(), Tab = require_Tab(), TabMeasurer = require_TabMeasurer(), Panel = require_Panel(), List = require_List(), CreateViewModal = require_CreateViewModal(), hooks = require_hooks2(), Text4 = require_Text(), Icon2 = require_Icon(), UnstyledButton = require_UnstyledButton(), Box4 = require_Box(), Popover = require_Popover(), Tooltip = require_Tooltip(), CREATE_NEW_VIEW_ID = "create-new-view", Tabs = ({
      tabs,
      children,
      selected,
      newViewAccessibilityLabel,
      canCreateNewView,
      disabled,
      onCreateNewView,
      onSelect,
      fitted,
      disclosureText
    }) => {
      let i18n = hooks.useI18n(), {
        mdDown
      } = breakpoints.useBreakpoints(), scrollRef = React2.useRef(null), wrapRef = React2.useRef(null), selectedTabRef = React2.useRef(null), [state, setState] = React2.useReducer((data, partialData) => ({
        ...data,
        ...partialData
      }), {
        disclosureWidth: 0,
        containerWidth: 1 / 0,
        tabWidths: [],
        visibleTabs: [],
        hiddenTabs: [],
        showDisclosure: !1,
        tabToFocus: -1,
        isNewViewModalActive: !1,
        modalSubmitted: !1,
        isTabsFocused: !1,
        isTabPopoverOpen: !1,
        isTabModalOpen: !1
      }), {
        tabToFocus,
        visibleTabs,
        hiddenTabs,
        showDisclosure,
        isNewViewModalActive,
        modalSubmitted,
        disclosureWidth,
        tabWidths,
        containerWidth,
        isTabsFocused,
        isTabModalOpen,
        isTabPopoverOpen
      } = state, prevModalOpen = usePrevious.usePrevious(isTabModalOpen), prevPopoverOpen = usePrevious.usePrevious(isTabPopoverOpen);
      React2.useEffect(() => {
        prevModalOpen && !isTabModalOpen ? setState({
          isTabsFocused: !0,
          tabToFocus: selected
        }) : prevPopoverOpen && !isTabPopoverOpen && !isTabModalOpen && setState({
          isTabsFocused: !0,
          tabToFocus: selected
        });
      }, [prevPopoverOpen, isTabPopoverOpen, prevModalOpen, isTabModalOpen, selected, tabToFocus]);
      let handleTogglePopover = React2.useCallback((isOpen) => setState({
        isTabPopoverOpen: isOpen
      }), []), handleToggleModal = React2.useCallback((isOpen) => setState({
        isTabModalOpen: isOpen
      }), []), handleCloseNewViewModal = () => {
        setState({
          isNewViewModalActive: !1
        });
      }, handleSaveNewViewModal = async (value) => {
        if (!onCreateNewView)
          return !1;
        let hasExecuted = await onCreateNewView?.(value);
        return hasExecuted && setState({
          modalSubmitted: !0
        }), hasExecuted;
      }, handleClickNewTab = () => {
        setState({
          isNewViewModalActive: !0
        });
      }, handleTabClick = React2.useCallback((id) => {
        let tab = tabs.find((aTab) => aTab.id === id);
        if (tab == null)
          return null;
        let selectedIndex = tabs.indexOf(tab);
        onSelect?.(selectedIndex);
      }, [tabs, onSelect]), renderTabMarkup = React2.useCallback((tab, index) => {
        let handleClick = () => {
          handleTabClick(tab.id), tab.onAction?.();
        }, viewNames2 = tabs.map(({
          content
        }) => content), tabPanelID = tab.panelID || `${tab.id}-panel`;
        return /* @__PURE__ */ React2.createElement(Tab.Tab, Object.assign({}, tab, {
          key: `${index}-${tab.id}`,
          id: tab.id,
          panelID: children ? tabPanelID : void 0,
          disabled: disabled || tab.disabled,
          siblingTabHasFocus: tabToFocus > -1,
          focused: index === tabToFocus,
          selected: index === selected,
          onAction: handleClick,
          accessibilityLabel: tab.accessibilityLabel,
          url: tab.url,
          content: tab.content,
          onToggleModal: handleToggleModal,
          onTogglePopover: handleTogglePopover,
          viewNames: viewNames2,
          ref: index === selected ? selectedTabRef : null
        }));
      }, [disabled, handleTabClick, tabs, children, selected, tabToFocus, handleToggleModal, handleTogglePopover]), handleFocus = React2.useCallback((event) => {
        let target = event.target, isItem = target.classList.contains(Tabs_module.default.Item), isInNaturalDOMOrder = target.closest("[data-tabs-focus-catchment]") || isItem;
        target.classList.contains(Tabs_module.default.DisclosureActivator) || !isInNaturalDOMOrder || setState({
          isTabsFocused: !0
        });
      }, []), handleBlur = React2.useCallback((event) => {
        let target = event.target, relatedTarget = event.relatedTarget, isInNaturalDOMOrder = relatedTarget?.closest?.(`.${Tabs_module.default.Tabs}`), targetIsATab = target?.classList?.contains?.(Tabs_module.default.Tab), focusReceiverIsAnItem = relatedTarget?.classList.contains(Tabs_module.default.Item);
        if (!relatedTarget && !isTabModalOpen && !targetIsATab && !focusReceiverIsAnItem) {
          setState({
            tabToFocus: -1
          });
          return;
        }
        if (!isInNaturalDOMOrder && !isTabModalOpen && !targetIsATab && !focusReceiverIsAnItem) {
          setState({
            tabToFocus: -1
          });
          return;
        }
        setState({
          isTabsFocused: !1
        });
      }, [isTabModalOpen]), handleKeyDown = (event) => {
        if (isTabPopoverOpen || isTabModalOpen || isNewViewModalActive)
          return;
        let {
          key
        } = event;
        (key === "ArrowLeft" || key === "ArrowRight") && (event.preventDefault(), event.stopPropagation());
      };
      React2.useEffect(() => {
        let {
          visibleTabs: visibleTabs2,
          hiddenTabs: hiddenTabs2
        } = utilities.getVisibleAndHiddenTabIndices(tabs, selected, disclosureWidth, tabWidths, containerWidth);
        setState({
          visibleTabs: visibleTabs2,
          hiddenTabs: hiddenTabs2
        });
      }, [containerWidth, disclosureWidth, tabs, selected, tabWidths, setState]);
      let moveToSelectedTab = React2.useCallback(() => {
        let activeButton = selectedTabRef.current?.querySelector(`.${Tabs_module.default["Tab-active"]}`);
        activeButton && moveToActiveTab(activeButton.offsetLeft);
      }, []);
      React2.useEffect(() => {
        mdDown && moveToSelectedTab();
      }, [moveToSelectedTab, selected, mdDown]), React2.useEffect(() => {
        isTabsFocused && !showDisclosure && setState({
          tabToFocus: selected
        });
      }, [isTabsFocused, selected, setState, showDisclosure]);
      let handleKeyPress = (event) => {
        let {
          showDisclosure: showDisclosure2,
          visibleTabs: visibleTabs2,
          hiddenTabs: hiddenTabs2,
          tabToFocus: tabToFocus2,
          isNewViewModalActive: isNewViewModalActive2
        } = state;
        if (isTabModalOpen || isTabPopoverOpen || isNewViewModalActive2)
          return;
        let key = event.key, tabsArrayInOrder = showDisclosure2 || mdDown ? visibleTabs2.concat(hiddenTabs2) : [...visibleTabs2], newFocus = tabsArrayInOrder.indexOf(tabToFocus2);
        key === "ArrowRight" && (newFocus += 1, newFocus === tabsArrayInOrder.length && (newFocus = 0)), key === "ArrowLeft" && (newFocus === -1 || newFocus === 0 ? newFocus = tabsArrayInOrder.length - 1 : newFocus -= 1);
        let buttonToFocus = tabsArrayInOrder[newFocus];
        buttonToFocus != null && setState({
          tabToFocus: buttonToFocus
        });
      }, handleDisclosureActivatorClick = () => {
        setState({
          showDisclosure: !showDisclosure,
          tabToFocus: hiddenTabs[0]
        });
      }, handleClose = () => {
        setState({
          showDisclosure: !1
        });
      }, handleMeasurement = React2.useCallback((measurements) => {
        let {
          hiddenTabWidths: tabWidths2,
          containerWidth: containerWidth2,
          disclosureWidth: disclosureWidth2
        } = measurements, {
          visibleTabs: visibleTabs2,
          hiddenTabs: hiddenTabs2
        } = utilities.getVisibleAndHiddenTabIndices(tabs, selected, disclosureWidth2, tabWidths2, containerWidth2);
        setState({
          visibleTabs: visibleTabs2,
          hiddenTabs: hiddenTabs2,
          disclosureWidth: disclosureWidth2,
          containerWidth: containerWidth2,
          tabWidths: tabWidths2
        });
      }, [tabs, selected, setState]), handleListTabClick = (id) => {
        handleTabClick(id), handleClose(), setState({
          isTabsFocused: !0
        });
      }, moveToActiveTab = (offsetLeft) => {
        setTimeout(() => {
          if (scrollRef.current && typeof scrollRef.current.scroll == "function") {
            let scrollRefOffset = wrapRef?.current?.offsetLeft || 0;
            scrollRef?.current?.scroll({
              left: offsetLeft - scrollRefOffset
            });
          }
        }, 0);
      }, createViewA11yLabel = newViewAccessibilityLabel || i18n.translate("Polaris.Tabs.newViewAccessibilityLabel"), tabsToShow = mdDown ? [...visibleTabs, ...hiddenTabs] : visibleTabs, tabsMarkup = tabsToShow.sort((tabA, tabB) => tabA - tabB).filter((tabIndex) => tabs[tabIndex]).map((tabIndex) => renderTabMarkup(tabs[tabIndex], tabIndex)), disclosureActivatorVisible = visibleTabs.length < tabs.length && !mdDown, classname = css.classNames(Tabs_module.default.Tabs, fitted && Tabs_module.default.fitted, disclosureActivatorVisible && Tabs_module.default.fillSpace), wrapperClassNames = css.classNames(Tabs_module.default.Wrapper, canCreateNewView && Tabs_module.default.WrapperWithNewButton), disclosureTabClassName = css.classNames(Tabs_module.default.DisclosureTab, disclosureActivatorVisible && Tabs_module.default["DisclosureTab-visible"]), disclosureButtonClassName = css.classNames(Tabs_module.default.DisclosureActivator), disclosureButtonContent = /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "bodySm",
        fontWeight: "medium"
      }, disclosureText ?? i18n.translate("Polaris.Tabs.toggleTabsLabel")), /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Tabs_module.default.IconWrap, disclosureActivatorVisible && showDisclosure && Tabs_module.default["IconWrap-open"])
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.ChevronDownIcon,
        tone: "subdued"
      }))), activator = /* @__PURE__ */ React2.createElement(UnstyledButton.UnstyledButton, {
        type: "button",
        className: disclosureButtonClassName,
        onClick: handleDisclosureActivatorClick,
        "aria-label": disclosureText ?? i18n.translate("Polaris.Tabs.toggleTabsLabel"),
        disabled
      }, disclosureButtonContent), disclosureTabs = hiddenTabs.map((tabIndex) => tabs[tabIndex]), viewNames = tabs.map(({
        content
      }) => content), tabMeasurer = /* @__PURE__ */ React2.createElement(TabMeasurer.TabMeasurer, {
        tabToFocus,
        activator,
        selected,
        tabs,
        siblingTabHasFocus: tabToFocus > -1,
        handleMeasurement
      }), newTab = /* @__PURE__ */ React2.createElement(Tab.Tab, {
        id: CREATE_NEW_VIEW_ID,
        content: createViewA11yLabel,
        actions: [],
        onAction: handleClickNewTab,
        onFocus: () => {
          modalSubmitted && setState({
            tabToFocus: selected,
            modalSubmitted: !1
          });
        },
        icon: /* @__PURE__ */ React2.createElement(Icon2.Icon, {
          source: polarisIcons.PlusIcon,
          accessibilityLabel: createViewA11yLabel
        }),
        disabled,
        onTogglePopover: handleTogglePopover,
        onToggleModal: handleToggleModal,
        tabIndexOverride: 0
      }), panelMarkup = children ? tabs.map((_tab, index) => selected === index ? /* @__PURE__ */ React2.createElement(Panel.Panel, {
        id: tabs[index].panelID || `${tabs[index].id}-panel`,
        tabID: tabs[index].id,
        key: tabs[index].id
      }, children) : /* @__PURE__ */ React2.createElement(Panel.Panel, {
        id: tabs[index].panelID || `${tabs[index].id}-panel`,
        tabID: tabs[index].id,
        key: tabs[index].id,
        hidden: !0
      })) : null;
      return /* @__PURE__ */ React2.createElement("div", {
        className: Tabs_module.default.Outer
      }, /* @__PURE__ */ React2.createElement(Box4.Box, {
        padding: {
          md: "200"
        }
      }, tabMeasurer, /* @__PURE__ */ React2.createElement("div", {
        className: wrapperClassNames,
        ref: scrollRef
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Tabs_module.default.ButtonWrapper,
        ref: wrapRef
      }, /* @__PURE__ */ React2.createElement("ul", {
        role: tabsMarkup.length > 0 ? "tablist" : void 0,
        className: classname,
        onFocus: handleFocus,
        onBlur: handleBlur,
        onKeyDown: handleKeyDown,
        onKeyUp: handleKeyPress,
        "data-tabs-focus-catchment": !0
      }, tabsMarkup, mdDown || tabsToShow.length === 0 ? null : /* @__PURE__ */ React2.createElement("li", {
        className: disclosureTabClassName,
        role: "presentation"
      }, /* @__PURE__ */ React2.createElement(Popover.Popover, {
        preferredPosition: "below",
        preferredAlignment: "left",
        activator,
        active: disclosureActivatorVisible && showDisclosure,
        onClose: handleClose,
        autofocusTarget: "first-node"
      }, /* @__PURE__ */ React2.createElement(List.List, {
        focusIndex: hiddenTabs.indexOf(tabToFocus),
        disclosureTabs,
        onClick: handleListTabClick,
        onKeyPress: handleKeyPress
      })))), canCreateNewView && tabsToShow.length > 0 ? /* @__PURE__ */ React2.createElement("div", {
        className: Tabs_module.default.NewTab
      }, /* @__PURE__ */ React2.createElement(CreateViewModal.CreateViewModal, {
        open: isNewViewModalActive,
        onClose: handleCloseNewViewModal,
        onClickPrimaryAction: handleSaveNewViewModal,
        viewNames,
        activator: disabled ? newTab : /* @__PURE__ */ React2.createElement("div", null, /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, {
          content: i18n.translate("Polaris.Tabs.newViewTooltip"),
          preferredPosition: "above",
          hoverDelay: 400
        }, newTab))
      })) : null))), panelMarkup);
    };
    exports.Tabs = Tabs;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/SearchFilterButton/SearchFilterButton.js
var require_SearchFilterButton = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/SearchFilterButton/SearchFilterButton.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), Tooltip = require_Tooltip(), Button4 = require_Button(), Text4 = require_Text(), InlineStack4 = require_InlineStack(), Icon2 = require_Icon();
    function SearchFilterButton({
      onClick,
      label,
      disabled,
      tooltipContent,
      style,
      hideFilters,
      hideQueryField
    }) {
      let iconMarkup = /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        gap: "0"
      }, hideQueryField ? null : /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.SearchIcon,
        tone: "base"
      }), hideFilters ? null : /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.FilterIcon,
        tone: "base"
      })), activator = /* @__PURE__ */ React2.createElement("div", {
        style
      }, /* @__PURE__ */ React2.createElement(Button4.Button, {
        size: "slim",
        onClick,
        disabled,
        icon: iconMarkup,
        accessibilityLabel: label
      })), content = /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "bodyMd",
        alignment: "center"
      }, tooltipContent);
      return /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, {
        content,
        preferredPosition: "above",
        hoverDelay: 400
      }, activator);
    }
    exports.SearchFilterButton = SearchFilterButton;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/EditColumnsButton/EditColumnsButton.js
var require_EditColumnsButton = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/EditColumnsButton/EditColumnsButton.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), hooks = require_hooks2(), Text4 = require_Text(), Tooltip = require_Tooltip(), Button4 = require_Button();
    function EditColumnsButton({
      onClick,
      disabled
    }) {
      let i18n = hooks.useI18n(), tooltipContent = /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "bodyMd",
        alignment: "center"
      }, i18n.translate("Polaris.IndexFilters.EditColumnsButton.tooltip"));
      return /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, {
        content: tooltipContent,
        preferredPosition: "above",
        hoverDelay: 400
      }, /* @__PURE__ */ React2.createElement(Button4.Button, {
        size: "slim",
        onClick,
        disabled,
        icon: polarisIcons.LayoutColumns3Icon,
        accessibilityLabel: i18n.translate("Polaris.IndexFilters.EditColumnsButton.accessibilityLabel")
      }));
    }
    exports.EditColumnsButton = EditColumnsButton;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/IndexFilters.js
var require_IndexFilters = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/IndexFilters.js"(exports) {
    "use strict";
    var React2 = require_react(), reactTransitionGroup = require("react-transition-group"), css = require_css(), useEventListener = require_use_event_listener(), useToggle = require_use_toggle(), useOnValueChange = require_use_on_value_change(), breakpoints = require_breakpoints(), types = require_types3(), IndexFilters_module = require_IndexFilters_css(), useIsSticky = require_useIsSticky(), UpdateButtons = require_UpdateButtons(), SortButton = require_SortButton(), Container = require_Container(), Tabs = require_Tabs(), SearchFilterButton = require_SearchFilterButton(), Filters = require_Filters(), EditColumnsButton = require_EditColumnsButton(), hooks = require_hooks2(), InlineStack4 = require_InlineStack(), Spinner2 = require_Spinner(), DEFAULT_IGNORED_TAGS = ["INPUT", "SELECT", "TEXTAREA"], TRANSITION_DURATION = 150, defaultStyle = {
      transition: `opacity ${TRANSITION_DURATION}ms var(--p-motion-ease)`,
      opacity: 0
    }, transitionStyles = {
      entering: {
        opacity: 1
      },
      entered: {
        opacity: 1
      },
      exiting: {
        opacity: 0
      },
      exited: {
        opacity: 0
      },
      unmounted: {
        opacity: 0
      }
    };
    function IndexFilters({
      tabs,
      selected,
      onSelect,
      onSort,
      onSortKeyChange,
      onSortDirectionChange,
      onAddFilterClick,
      sortOptions,
      sortSelected,
      queryValue = "",
      queryPlaceholder,
      primaryAction,
      cancelAction,
      filters,
      appliedFilters,
      onClearAll,
      onQueryChange,
      onQueryFocus,
      onQueryClear,
      onEditStart,
      disabled,
      disableQueryField,
      hideFilters,
      loading,
      mode: mode2,
      setMode,
      disableStickyMode,
      isFlushWhenSticky = !1,
      canCreateNewView = !0,
      onCreateNewView,
      filteringAccessibilityLabel,
      filteringAccessibilityTooltip,
      hideQueryField,
      closeOnChildOverlayClick,
      disableKeyboardShortcuts,
      showEditColumnsButton,
      autoFocusSearchField = !0
    }) {
      let i18n = hooks.useI18n(), {
        mdDown
      } = breakpoints.useBreakpoints(), defaultRef = React2.useRef(null), filteringRef = React2.useRef(null), {
        value: filtersFocused,
        setFalse: setFiltersUnFocused,
        setTrue: setFiltersFocused
      } = useToggle.useToggle(mode2 === types.IndexFiltersMode.Filtering && autoFocusSearchField), handleModeChange = (newMode) => {
        newMode === types.IndexFiltersMode.Filtering && autoFocusSearchField ? setFiltersFocused() : setFiltersUnFocused();
      };
      useOnValueChange.useOnValueChange(mode2, handleModeChange), useEventListener.useEventListener("keydown", (event) => {
        if (disableKeyboardShortcuts || hideQueryField && hideFilters)
          return;
        let {
          key
        } = event, tag = document?.activeElement?.tagName;
        if (mode2 !== types.IndexFiltersMode.Default && event.key === "Escape" && onPressEscape(), key === "f" && mode2 === types.IndexFiltersMode.Default) {
          if (tag && DEFAULT_IGNORED_TAGS.includes(tag))
            return;
          onPressF(), event.preventDefault();
        }
      });
      let {
        intersectionRef,
        measurerRef,
        indexFilteringHeight,
        isSticky
      } = useIsSticky.useIsSticky(mode2, Boolean(disableStickyMode), isFlushWhenSticky), viewNames = tabs.map(({
        content
      }) => content), handleChangeSortButton = React2.useCallback((value) => {
        onSort?.(value);
      }, [onSort]), handleChangeSearch = React2.useCallback((value) => {
        onQueryChange(value);
      }, [onQueryChange]), onExecutedPrimaryAction = ((action8, afterEffect) => React2.useCallback(async (name) => {
        await action8?.(name) && (setMode(types.IndexFiltersMode.Default), afterEffect?.());
      }, [action8, afterEffect]))(primaryAction?.onAction), onExecutedCancelAction = React2.useCallback(() => {
        cancelAction?.onAction?.(), setMode(types.IndexFiltersMode.Default);
      }, [cancelAction, setMode]), enhancedPrimaryAction = React2.useMemo(() => primaryAction ? {
        ...primaryAction,
        onAction: onExecutedPrimaryAction
      } : void 0, [onExecutedPrimaryAction, primaryAction]), enhancedCancelAction = React2.useMemo(() => cancelAction ? {
        ...cancelAction,
        onAction: onExecutedCancelAction
      } : void 0, [cancelAction, onExecutedCancelAction]), beginEdit = React2.useCallback((mode3) => {
        setMode(mode3), onEditStart?.(mode3);
      }, [onEditStart, setMode]), updateButtonsMarkup = React2.useMemo(() => enhancedCancelAction || enhancedPrimaryAction ? /* @__PURE__ */ React2.createElement(UpdateButtons.UpdateButtons, {
        primaryAction: enhancedPrimaryAction,
        cancelAction: enhancedCancelAction,
        viewNames,
        disabled
      }) : null, [enhancedPrimaryAction, enhancedCancelAction, disabled, viewNames]), sortMarkup = React2.useMemo(() => sortOptions?.length ? /* @__PURE__ */ React2.createElement(SortButton.SortButton, {
        choices: sortOptions,
        selected: sortSelected,
        onChange: handleChangeSortButton,
        onChangeKey: onSortKeyChange,
        onChangeDirection: onSortDirectionChange,
        disabled
      }) : null, [handleChangeSortButton, onSortDirectionChange, onSortKeyChange, sortOptions, sortSelected, disabled]);
      function handleClickEditColumnsButton() {
        beginEdit(types.IndexFiltersMode.EditingColumns);
      }
      let editColumnsMarkup = showEditColumnsButton ? /* @__PURE__ */ React2.createElement(EditColumnsButton.EditColumnsButton, {
        onClick: handleClickEditColumnsButton,
        disabled
      }) : null, isActionLoading = primaryAction?.loading || cancelAction?.loading;
      function handleClickFilterButton() {
        beginEdit(types.IndexFiltersMode.Filtering);
      }
      let searchFilterTooltipLabelId = disableKeyboardShortcuts ? "Polaris.IndexFilters.searchFilterTooltip" : "Polaris.IndexFilters.searchFilterTooltipWithShortcut", searchFilterTooltip = filteringAccessibilityTooltip || i18n.translate(searchFilterTooltipLabelId), searchFilterAriaLabel = filteringAccessibilityLabel || i18n.translate("Polaris.IndexFilters.searchFilterAccessibilityLabel"), isLoading = loading || isActionLoading;
      function onPressEscape() {
        cancelAction?.onAction(), setMode(types.IndexFiltersMode.Default);
      }
      function handleClearSearch() {
        onQueryClear?.();
      }
      function handleQueryBlur() {
        setFiltersUnFocused();
      }
      function handleQueryFocus() {
        setFiltersFocused(), onQueryFocus?.();
      }
      function onPressF() {
        mode2 === types.IndexFiltersMode.Default && beginEdit(types.IndexFiltersMode.Filtering);
      }
      return /* @__PURE__ */ React2.createElement("div", {
        className: IndexFilters_module.default.IndexFiltersWrapper,
        style: {
          height: indexFilteringHeight
        }
      }, /* @__PURE__ */ React2.createElement("div", {
        ref: intersectionRef
      }), /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(IndexFilters_module.default.IndexFilters, isSticky && IndexFilters_module.default.IndexFiltersSticky, isSticky && isFlushWhenSticky && IndexFilters_module.default.IndexFiltersStickyFlush),
        ref: measurerRef
      }, /* @__PURE__ */ React2.createElement(reactTransitionGroup.Transition, {
        nodeRef: defaultRef,
        in: mode2 !== types.IndexFiltersMode.Filtering,
        timeout: TRANSITION_DURATION
      }, (state) => /* @__PURE__ */ React2.createElement("div", {
        ref: defaultRef
      }, mode2 !== types.IndexFiltersMode.Filtering ? /* @__PURE__ */ React2.createElement(Container.Container, null, /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        align: "start",
        blockAlign: "center",
        gap: {
          xs: "0",
          md: "200"
        },
        wrap: !1
      }, /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(IndexFilters_module.default.TabsWrapper, mdDown && IndexFilters_module.default.SmallScreenTabsWrapper, isLoading && IndexFilters_module.default.TabsWrapperLoading)
      }, /* @__PURE__ */ React2.createElement("div", {
        className: IndexFilters_module.default.TabsInner,
        style: {
          ...defaultStyle,
          ...transitionStyles[state]
        }
      }, /* @__PURE__ */ React2.createElement(Tabs.Tabs, {
        tabs,
        selected,
        onSelect,
        disabled: Boolean(mode2 !== types.IndexFiltersMode.Default || disabled),
        canCreateNewView,
        onCreateNewView
      })), isLoading && mdDown && /* @__PURE__ */ React2.createElement("div", {
        className: IndexFilters_module.default.TabsLoading
      }, /* @__PURE__ */ React2.createElement(Spinner2.Spinner, {
        size: "small"
      }))), /* @__PURE__ */ React2.createElement("div", {
        className: IndexFilters_module.default.ActionWrap
      }, isLoading && !mdDown && /* @__PURE__ */ React2.createElement("div", {
        className: IndexFilters_module.default.DesktopLoading
      }, isLoading ? /* @__PURE__ */ React2.createElement(Spinner2.Spinner, {
        size: "small"
      }) : null), mode2 === types.IndexFiltersMode.Default ? /* @__PURE__ */ React2.createElement(React2.Fragment, null, hideFilters && hideQueryField ? null : /* @__PURE__ */ React2.createElement(SearchFilterButton.SearchFilterButton, {
        onClick: handleClickFilterButton,
        label: searchFilterAriaLabel,
        tooltipContent: searchFilterTooltip,
        disabled,
        hideFilters,
        hideQueryField,
        style: {
          ...defaultStyle,
          ...transitionStyles[state]
        }
      }), editColumnsMarkup, sortMarkup) : null, mode2 === types.IndexFiltersMode.EditingColumns ? updateButtonsMarkup : null))) : null)), /* @__PURE__ */ React2.createElement(reactTransitionGroup.Transition, {
        nodeRef: filteringRef,
        in: mode2 === types.IndexFiltersMode.Filtering,
        timeout: TRANSITION_DURATION
      }, (state) => /* @__PURE__ */ React2.createElement("div", {
        ref: filteringRef
      }, mode2 === types.IndexFiltersMode.Filtering ? /* @__PURE__ */ React2.createElement(Filters.Filters, {
        queryValue,
        queryPlaceholder,
        onQueryChange: handleChangeSearch,
        onQueryClear: handleClearSearch,
        onQueryFocus: handleQueryFocus,
        onQueryBlur: handleQueryBlur,
        onAddFilterClick,
        filters,
        appliedFilters,
        onClearAll,
        disableFilters: disabled,
        hideFilters,
        hideQueryField,
        disableQueryField: disabled || disableQueryField,
        loading: loading || isActionLoading,
        focused: filtersFocused,
        mountedState: mdDown ? void 0 : state,
        borderlessQueryField: !0,
        closeOnChildOverlayClick
      }, /* @__PURE__ */ React2.createElement("div", {
        className: IndexFilters_module.default.ButtonWrap
      }, /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        gap: "200",
        align: "start",
        blockAlign: "center"
      }, /* @__PURE__ */ React2.createElement("div", {
        style: {
          ...defaultStyle,
          ...transitionStyles[state]
        }
      }, updateButtonsMarkup), sortMarkup))) : null))));
    }
    exports.IndexFilters = IndexFilters;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/hooks/useSetIndexFiltersMode/useSetIndexFiltersMode.js
var require_useSetIndexFiltersMode = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/hooks/useSetIndexFiltersMode/useSetIndexFiltersMode.js"(exports) {
    "use strict";
    var React2 = require_react(), types = require_types3();
    function useSetIndexFiltersMode(defaultMode = types.IndexFiltersMode.Default) {
      let [mode2, setMode] = React2.useState(defaultMode);
      return {
        mode: mode2,
        setMode
      };
    }
    exports.useSetIndexFiltersMode = useSetIndexFiltersMode;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexTable/IndexTable.css.js
var require_IndexTable_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexTable/IndexTable.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      IndexTable: "Polaris-IndexTable",
      IndexTableWrapper: "Polaris-IndexTable__IndexTableWrapper",
      "IndexTableWrapper-scrollBarHidden": "Polaris-IndexTable__IndexTableWrapper--scrollBarHidden",
      IndexTableWrapperWithSelectAllActions: "Polaris-IndexTable__IndexTableWrapperWithSelectAllActions",
      "LoadingContainer-enter": "Polaris-IndexTable__LoadingContainer--enter",
      "LoadingContainer-enter-active": "Polaris-IndexTable--loadingContainerEnterActive",
      "LoadingContainer-exit": "Polaris-IndexTable__LoadingContainer--exit",
      "LoadingContainer-exit-active": "Polaris-IndexTable--loadingContainerExitActive",
      LoadingPanel: "Polaris-IndexTable__LoadingPanel",
      LoadingPanelRow: "Polaris-IndexTable__LoadingPanelRow",
      LoadingPanelText: "Polaris-IndexTable__LoadingPanelText",
      Table: "Polaris-IndexTable__Table",
      "Table-scrolling": "Polaris-IndexTable__Table--scrolling",
      "TableCell-first": "Polaris-IndexTable__TableCell--first",
      "StickyTable-scrolling": "Polaris-IndexTable__StickyTable--scrolling",
      TableCell: "Polaris-IndexTable__TableCell",
      "TableHeading-first": "Polaris-IndexTable__TableHeading--first",
      "TableHeading-second": "Polaris-IndexTable__TableHeading--second",
      "Table-sticky": "Polaris-IndexTable__Table--sticky",
      StickyTable: "Polaris-IndexTable__StickyTable",
      "Table-unselectable": "Polaris-IndexTable__Table--unselectable",
      TableRow: "Polaris-IndexTable__TableRow",
      "TableRow-unclickable": "Polaris-IndexTable__TableRow--unclickable",
      toneSuccess: "Polaris-IndexTable--toneSuccess",
      "TableRow-child": "Polaris-IndexTable__TableRow--child",
      toneWarning: "Polaris-IndexTable--toneWarning",
      toneCritical: "Polaris-IndexTable--toneCritical",
      toneSubdued: "Polaris-IndexTable--toneSubdued",
      "TableRow-subheader": "Polaris-IndexTable__TableRow--subheader",
      "TableRow-selected": "Polaris-IndexTable__TableRow--selected",
      "TableRow-hovered": "Polaris-IndexTable__TableRow--hovered",
      "TableRow-disabled": "Polaris-IndexTable__TableRow--disabled",
      ZebraStriping: "Polaris-IndexTable__ZebraStriping",
      TableHeading: "Polaris-IndexTable__TableHeading",
      "TableHeading-flush": "Polaris-IndexTable__TableHeading--flush",
      "TableHeading-align-center": "Polaris-IndexTable--tableHeadingAlignCenter",
      "TableHeading-align-end": "Polaris-IndexTable--tableHeadingAlignEnd",
      "TableHeading-extra-padding-right": "Polaris-IndexTable--tableHeadingExtraPaddingRight",
      "TableHeading-sortable": "Polaris-IndexTable__TableHeading--sortable",
      TableHeadingSortButton: "Polaris-IndexTable__TableHeadingSortButton",
      TableHeadingSortIcon: "Polaris-IndexTable__TableHeadingSortIcon",
      "TableHeadingSortButton-heading-align-end": "Polaris-IndexTable--tableHeadingSortButtonHeadingAlignEnd",
      "TableHeadingSortButton-heading-align-end-currently-sorted": "Polaris-IndexTable--tableHeadingSortButtonHeadingAlignEndCurrentlySorted",
      "TableHeadingSortIcon-heading-align-end": "Polaris-IndexTable--tableHeadingSortIconHeadingAlignEnd",
      "TableHeadingSortButton-heading-align-end-previously-sorted": "Polaris-IndexTable--tableHeadingSortButtonHeadingAlignEndPreviouslySorted",
      "right-aligned-sort-button-slide-out": "Polaris-IndexTable--rightAlignedSortButtonSlideOut",
      "reveal-right-aligned-sort-button-icon": "Polaris-IndexTable--revealRightAlignedSortButtonIcon",
      TableHeadingUnderline: "Polaris-IndexTable__TableHeadingUnderline",
      TableHeadingTooltipUnderlinePlaceholder: "Polaris-IndexTable__TableHeadingTooltipUnderlinePlaceholder",
      "TableHeadingSortIcon-visible": "Polaris-IndexTable__TableHeadingSortIcon--visible",
      TableHeadingSortSvg: "Polaris-IndexTable__TableHeadingSortSvg",
      SortableTableHeadingWithCustomMarkup: "Polaris-IndexTable__SortableTableHeadingWithCustomMarkup",
      SortableTableHeaderWrapper: "Polaris-IndexTable__SortableTableHeaderWrapper",
      ColumnHeaderCheckboxWrapper: "Polaris-IndexTable__ColumnHeaderCheckboxWrapper",
      FirstStickyHeaderElement: "Polaris-IndexTable__FirstStickyHeaderElement",
      "TableHeading-unselectable": "Polaris-IndexTable__TableHeading--unselectable",
      "TableCell-flush": "Polaris-IndexTable__TableCell--flush",
      "Table-sticky-scrolling": "Polaris-IndexTable--tableStickyScrolling",
      "StickyTableHeader-sticky-scrolling": "Polaris-IndexTable--stickyTableHeaderStickyScrolling",
      "TableHeading-last": "Polaris-IndexTable__TableHeading--last",
      "Table-sticky-last": "Polaris-IndexTable--tableStickyLast",
      "StickyTableHeader-sticky-last": "Polaris-IndexTable--stickyTableHeaderStickyLast",
      "Table-sortable": "Polaris-IndexTable__Table--sortable",
      StickyTableHeader: "Polaris-IndexTable__StickyTableHeader",
      "StickyTableHeader-isSticky": "Polaris-IndexTable__StickyTableHeader--isSticky",
      StickyTableHeadings: "Polaris-IndexTable__StickyTableHeadings",
      "StickyTableHeading-second": "Polaris-IndexTable__StickyTableHeading--second",
      unselectable: "Polaris-IndexTable--unselectable",
      "StickyTableHeading-second-scrolling": "Polaris-IndexTable--stickyTableHeadingSecondScrolling",
      ScrollLeft: "Polaris-IndexTable__ScrollLeft",
      ScrollRight: "Polaris-IndexTable__ScrollRight",
      "ScrollRight-onboarding": "Polaris-IndexTable__ScrollRight--onboarding",
      SelectAllActionsWrapper: "Polaris-IndexTable__SelectAllActionsWrapper",
      SelectAllActionsWrapperWithPagination: "Polaris-IndexTable__SelectAllActionsWrapperWithPagination",
      SelectAllActionsWrapperSticky: "Polaris-IndexTable__SelectAllActionsWrapperSticky",
      SelectAllActionsWrapperAtEnd: "Polaris-IndexTable__SelectAllActionsWrapperAtEnd",
      SelectAllActionsWrapperAtEndAppear: "Polaris-IndexTable__SelectAllActionsWrapperAtEndAppear",
      BulkActionsWrapper: "Polaris-IndexTable__BulkActionsWrapper",
      BulkActionsWrapperVisible: "Polaris-IndexTable__BulkActionsWrapperVisible",
      PaginationWrapper: "Polaris-IndexTable__PaginationWrapper",
      PaginationWrapperScrolledPastTop: "Polaris-IndexTable__PaginationWrapperScrolledPastTop",
      ScrollBarContainer: "Polaris-IndexTable__ScrollBarContainer",
      ScrollBarContainerWithPagination: "Polaris-IndexTable__ScrollBarContainerWithPagination",
      ScrollBarContainerScrolledPastTop: "Polaris-IndexTable__ScrollBarContainerScrolledPastTop",
      ScrollBarContainerWithSelectAllActions: "Polaris-IndexTable__ScrollBarContainerWithSelectAllActions",
      ScrollBarContainerSelectAllActionsSticky: "Polaris-IndexTable__ScrollBarContainerSelectAllActionsSticky",
      scrollBarContainerCondensed: "Polaris-IndexTable--scrollBarContainerCondensed",
      scrollBarContainerHidden: "Polaris-IndexTable--scrollBarContainerHidden",
      ScrollBar: "Polaris-IndexTable__ScrollBar",
      disableTextSelection: "Polaris-IndexTable--disableTextSelection",
      EmptySearchResultWrapper: "Polaris-IndexTable__EmptySearchResultWrapper",
      condensedRow: "Polaris-IndexTable--condensedRow",
      CondensedList: "Polaris-IndexTable__CondensedList",
      HeaderWrapper: "Polaris-IndexTable__HeaderWrapper",
      "StickyTable-condensed": "Polaris-IndexTable__StickyTable--condensed",
      "StickyTableHeader-condensed": "Polaris-IndexTable__StickyTableHeader--condensed",
      ScrollBarContent: "Polaris-IndexTable__ScrollBarContent"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/index-provider/types.js
var require_types4 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/index-provider/types.js"(exports) {
    "use strict";
    var SELECT_ALL_ITEMS = "All";
    exports.SelectionType = void 0;
    (function(SelectionType) {
      SelectionType.All = "all", SelectionType.Page = "page", SelectionType.Multi = "multi", SelectionType.Single = "single", SelectionType.Range = "range";
    })(exports.SelectionType || (exports.SelectionType = {}));
    exports.SELECT_ALL_ITEMS = SELECT_ALL_ITEMS;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/index-provider/context.js
var require_context17 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/index-provider/context.js"(exports) {
    "use strict";
    var React2 = require_react(), IndexContext = /* @__PURE__ */ React2.createContext(void 0), IndexSelectionChangeContext = /* @__PURE__ */ React2.createContext(void 0), IndexRowContext = /* @__PURE__ */ React2.createContext(void 0);
    exports.IndexContext = IndexContext;
    exports.IndexRowContext = IndexRowContext;
    exports.IndexSelectionChangeContext = IndexSelectionChangeContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/index-provider/hooks.js
var require_hooks13 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/index-provider/hooks.js"(exports) {
    "use strict";
    var React2 = require_react(), types = require_types4(), context = require_context17(), hooks = require_hooks2();
    function useIndexSelectionChange() {
      let onSelectionChange = React2.useContext(context.IndexSelectionChangeContext);
      if (!onSelectionChange)
        throw new Error("Missing IndexProvider context");
      return onSelectionChange;
    }
    function useIndexRow() {
      let indexRow = React2.useContext(context.IndexRowContext);
      if (!indexRow)
        throw new Error("Missing IndexProvider context");
      return indexRow;
    }
    function useIndexValue() {
      let index = React2.useContext(context.IndexContext);
      if (!index)
        throw new Error("Missing IndexProvider context");
      return index;
    }
    function useBulkSelectionData({
      selectedItemsCount,
      itemCount,
      hasMoreItems,
      resourceName: passedResourceName,
      defaultPaginatedSelectAllText
    }) {
      let i18n = hooks.useI18n(), selectable = Boolean(selectedItemsCount), selectMode = selectedItemsCount === "All" || selectedItemsCount > 0, defaultResourceName = {
        singular: i18n.translate("Polaris.IndexProvider.defaultItemSingular"),
        plural: i18n.translate("Polaris.IndexProvider.defaultItemPlural")
      }, resourceName = passedResourceName || defaultResourceName, paginatedSelectAllText = getPaginatedSelectAllText(), bulkActionsLabel = getBulkActionsLabel(), bulkActionsAccessibilityLabel = getBulkActionsAccessibilityLabel(), bulkSelectState = "indeterminate";
      return !selectedItemsCount || selectedItemsCount === 0 ? bulkSelectState = void 0 : (selectedItemsCount === types.SELECT_ALL_ITEMS || selectedItemsCount === itemCount) && (bulkSelectState = !0), {
        paginatedSelectAllText,
        bulkActionsLabel,
        bulkActionsAccessibilityLabel,
        resourceName,
        selectMode,
        bulkSelectState,
        selectable
      };
      function getPaginatedSelectAllText() {
        if (!(!selectable || !hasMoreItems) && selectedItemsCount === types.SELECT_ALL_ITEMS)
          return defaultPaginatedSelectAllText || i18n.translate("Polaris.IndexProvider.allItemsSelected", {
            itemsLength: itemCount,
            resourceNamePlural: resourceName.plural.toLocaleLowerCase()
          });
      }
      function getBulkActionsLabel() {
        let selectedItemsCountLabel = selectedItemsCount === types.SELECT_ALL_ITEMS ? `${itemCount}+` : selectedItemsCount;
        return i18n.translate("Polaris.IndexProvider.selected", {
          selectedItemsCount: selectedItemsCountLabel
        });
      }
      function getBulkActionsAccessibilityLabel() {
        let totalItemsCount = itemCount, allSelected = selectedItemsCount === totalItemsCount;
        return totalItemsCount === 1 && allSelected ? i18n.translate("Polaris.IndexProvider.a11yCheckboxDeselectAllSingle", {
          resourceNameSingular: resourceName.singular
        }) : totalItemsCount === 1 ? i18n.translate("Polaris.IndexProvider.a11yCheckboxSelectAllSingle", {
          resourceNameSingular: resourceName.singular
        }) : allSelected ? i18n.translate("Polaris.IndexProvider.a11yCheckboxDeselectAllMultiple", {
          itemsLength: itemCount,
          resourceNamePlural: resourceName.plural
        }) : i18n.translate("Polaris.IndexProvider.a11yCheckboxSelectAllMultiple", {
          itemsLength: itemCount,
          resourceNamePlural: resourceName.plural
        });
      }
    }
    function useHandleBulkSelection({
      onSelectionChange = () => {
      }
    }) {
      let lastSelected = React2.useRef(null);
      return React2.useCallback((selectionType, toggleType, selection, sortOrder) => {
        let prevSelected = lastSelected.current;
        if (types.SelectionType.Multi && typeof sortOrder == "number" && (lastSelected.current = sortOrder), selectionType === types.SelectionType.Single || selectionType === types.SelectionType.Multi && (typeof prevSelected != "number" || typeof sortOrder != "number"))
          onSelectionChange(types.SelectionType.Single, toggleType, selection);
        else if (selectionType === types.SelectionType.Multi) {
          let min = Math.min(prevSelected, sortOrder), max = Math.max(prevSelected, sortOrder);
          onSelectionChange(selectionType, toggleType, [min, max]);
        } else
          selectionType === types.SelectionType.Page || selectionType === types.SelectionType.All ? onSelectionChange(selectionType, toggleType) : selectionType === types.SelectionType.Range && onSelectionChange(types.SelectionType.Range, toggleType, selection);
      }, [onSelectionChange]);
    }
    exports.useBulkSelectionData = useBulkSelectionData;
    exports.useHandleBulkSelection = useHandleBulkSelection;
    exports.useIndexRow = useIndexRow;
    exports.useIndexSelectionChange = useIndexSelectionChange;
    exports.useIndexValue = useIndexValue;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexProvider/IndexProvider.js
var require_IndexProvider = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexProvider/IndexProvider.js"(exports) {
    "use strict";
    var React2 = require_react(), hooks = require_hooks13(), context = require_context17();
    function IndexProvider({
      children,
      resourceName: passedResourceName,
      loading,
      onSelectionChange,
      selectedItemsCount = 0,
      itemCount,
      hasMoreItems,
      condensed,
      selectable: isSelectableIndex = !0,
      paginatedSelectAllText: defaultPaginatedSelectAllText
    }) {
      let {
        paginatedSelectAllText,
        bulkActionsLabel,
        bulkActionsAccessibilityLabel,
        resourceName,
        selectMode,
        bulkSelectState
      } = hooks.useBulkSelectionData({
        selectedItemsCount,
        itemCount,
        hasMoreItems,
        resourceName: passedResourceName,
        defaultPaginatedSelectAllText
      }), handleSelectionChange = hooks.useHandleBulkSelection({
        onSelectionChange
      }), contextValue = React2.useMemo(() => ({
        itemCount,
        selectMode: selectMode && isSelectableIndex,
        selectable: isSelectableIndex,
        resourceName,
        loading,
        paginatedSelectAllText,
        hasMoreItems,
        bulkActionsLabel,
        bulkActionsAccessibilityLabel,
        bulkSelectState,
        selectedItemsCount,
        condensed
      }), [itemCount, selectMode, isSelectableIndex, resourceName, loading, paginatedSelectAllText, hasMoreItems, bulkActionsLabel, bulkActionsAccessibilityLabel, bulkSelectState, selectedItemsCount, condensed]), rowContextValue = React2.useMemo(() => ({
        selectable: isSelectableIndex,
        selectMode: selectMode && isSelectableIndex,
        condensed
      }), [condensed, selectMode, isSelectableIndex]);
      return /* @__PURE__ */ React2.createElement(context.IndexContext.Provider, {
        value: contextValue
      }, /* @__PURE__ */ React2.createElement(context.IndexRowContext.Provider, {
        value: rowContextValue
      }, /* @__PURE__ */ React2.createElement(context.IndexSelectionChangeContext.Provider, {
        value: handleSelectionChange
      }, children)));
    }
    exports.IndexProvider = IndexProvider;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexTable/components/Cell/Cell.js
var require_Cell3 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexTable/components/Cell/Cell.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), IndexTable_module = require_IndexTable_css(), Cell = /* @__PURE__ */ React2.memo(function({
      children,
      className: customClassName,
      flush,
      colSpan,
      headers,
      scope,
      as = "td",
      id
    }) {
      let className = css.classNames(customClassName, IndexTable_module.default.TableCell, flush && IndexTable_module.default["TableCell-flush"]);
      return /* @__PURE__ */ React2.createElement(as, {
        id,
        colSpan,
        headers,
        scope,
        className
      }, children);
    });
    exports.Cell = Cell;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexTable/components/Checkbox/Checkbox.css.js
var require_Checkbox_css2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexTable/components/Checkbox/Checkbox.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      TableCellContentContainer: "Polaris-IndexTable-Checkbox__TableCellContentContainer",
      Wrapper: "Polaris-IndexTable-Checkbox__Wrapper"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/index-table/context.js
var require_context18 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/index-table/context.js"(exports) {
    "use strict";
    var React2 = require_react(), RowContext = /* @__PURE__ */ React2.createContext({}), RowHoveredContext = /* @__PURE__ */ React2.createContext(void 0), scrollDefaultContext = {
      scrollableContainer: null,
      canScrollLeft: !1,
      canScrollRight: !1
    }, ScrollContext = /* @__PURE__ */ React2.createContext(scrollDefaultContext);
    exports.RowContext = RowContext;
    exports.RowHoveredContext = RowHoveredContext;
    exports.ScrollContext = ScrollContext;
    exports.scrollDefaultContext = scrollDefaultContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexTable/components/Checkbox/Checkbox.js
var require_Checkbox2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexTable/components/Checkbox/Checkbox.js"(exports) {
    "use strict";
    var React2 = require_react(), debounce = require_debounce(), css = require_css(), setRootProperty = require_set_root_property(), IndexTable_module = require_IndexTable_css(), Checkbox_module = require_Checkbox_css2(), hooks$1 = require_hooks13(), context = require_context18(), hooks = require_hooks2(), Checkbox$1 = require_Checkbox(), Checkbox = /* @__PURE__ */ React2.memo(function({
      accessibilityLabel
    }) {
      let i18n = hooks.useI18n(), {
        resourceName
      } = hooks$1.useIndexValue(), {
        itemId,
        selected,
        disabled,
        onInteraction
      } = React2.useContext(context.RowContext), label = accessibilityLabel || i18n.translate("Polaris.IndexTable.selectItem", {
        resourceName: resourceName.singular
      });
      return /* @__PURE__ */ React2.createElement(CheckboxWrapper, null, /* @__PURE__ */ React2.createElement("div", {
        className: Checkbox_module.default.TableCellContentContainer
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Checkbox_module.default.Wrapper,
        onClick: onInteraction,
        onKeyUp: noop
      }, /* @__PURE__ */ React2.createElement(Checkbox$1.Checkbox, {
        id: `Select-${itemId}`,
        label,
        labelHidden: !0,
        checked: selected,
        disabled
      }))));
    });
    function CheckboxWrapper({
      children
    }) {
      let {
        position
      } = React2.useContext(context.RowContext), checkboxNode = React2.useRef(null), handleResize = React2.useCallback(debounce.debounce(() => {
        if (position !== 0 || !checkboxNode.current)
          return;
        let {
          width
        } = checkboxNode.current.getBoundingClientRect();
        setRootProperty.setRootProperty("--pc-checkbox-offset", `${width}px`);
      }), [position]);
      React2.useEffect(() => {
        handleResize();
      }, [handleResize]), React2.useEffect(() => {
        if (checkboxNode.current)
          return window.addEventListener("resize", handleResize), () => {
            window.removeEventListener("resize", handleResize);
          };
      }, [handleResize]);
      let checkboxClassName = css.classNames(IndexTable_module.default.TableCell, IndexTable_module.default["TableCell-first"]);
      return /* @__PURE__ */ React2.createElement("td", {
        className: checkboxClassName,
        ref: checkboxNode
      }, children);
    }
    function noop() {
    }
    exports.Checkbox = Checkbox;
    exports.CheckboxWrapper = CheckboxWrapper;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexTable/components/Row/Row.js
var require_Row = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexTable/components/Row/Row.js"(exports) {
    "use strict";
    var React2 = require_react(), useToggle = require_use_toggle(), css = require_css(), IndexTable_module = require_IndexTable_css(), hooks = require_hooks13(), types = require_types4(), Checkbox = require_Checkbox2(), context = require_context18(), Row = /* @__PURE__ */ React2.memo(function({
      children,
      selected,
      id,
      position,
      tone,
      disabled,
      selectionRange,
      rowType = "data",
      accessibilityLabel,
      onNavigation,
      onClick
    }) {
      let {
        selectable,
        selectMode,
        condensed
      } = hooks.useIndexRow(), onSelectionChange = hooks.useIndexSelectionChange(), {
        value: hovered,
        setTrue: setHoverIn,
        setFalse: setHoverOut
      } = useToggle.useToggle(!1), handleInteraction = React2.useCallback((event) => {
        event.stopPropagation();
        let selectionType = types.SelectionType.Single;
        if ("key" in event && event.key !== " " || !onSelectionChange)
          return;
        event.nativeEvent.shiftKey ? selectionType = types.SelectionType.Multi : selectionRange && (selectionType = types.SelectionType.Range), onSelectionChange(selectionType, !selected, selectionRange ?? id, position);
      }, [id, onSelectionChange, selected, selectionRange, position]), contextValue = React2.useMemo(() => ({
        itemId: id,
        selected,
        position,
        onInteraction: handleInteraction,
        disabled
      }), [id, selected, disabled, position, handleInteraction]), primaryLinkElement = React2.useRef(null), isNavigating = React2.useRef(!1), tableRowRef = React2.useRef(null), tableRowCallbackRef = React2.useCallback((node) => {
        tableRowRef.current = node;
        let el = node?.querySelector("[data-primary-link]");
        el && (primaryLinkElement.current = el);
      }, []), rowClassName = css.classNames(IndexTable_module.default.TableRow, rowType === "subheader" && IndexTable_module.default["TableRow-subheader"], rowType === "child" && IndexTable_module.default["TableRow-child"], selectable && condensed && IndexTable_module.default.condensedRow, selected && IndexTable_module.default["TableRow-selected"], hovered && !condensed && IndexTable_module.default["TableRow-hovered"], disabled && IndexTable_module.default["TableRow-disabled"], tone && IndexTable_module.default[css.variationName("tone", tone)], !selectable && !onClick && !primaryLinkElement.current && IndexTable_module.default["TableRow-unclickable"]), handleRowClick;
      (!disabled && selectable || onClick || primaryLinkElement.current) && (handleRowClick = (event) => {
        if (rowType !== "subheader" && !(!tableRowRef.current || isNavigating.current)) {
          if (event.stopPropagation(), event.preventDefault(), onClick) {
            onClick();
            return;
          }
          if (primaryLinkElement.current && !selectMode) {
            isNavigating.current = !0;
            let {
              ctrlKey,
              metaKey
            } = event.nativeEvent;
            if (onNavigation && onNavigation(id), (ctrlKey || metaKey) && primaryLinkElement.current instanceof HTMLAnchorElement) {
              isNavigating.current = !1, window.open(primaryLinkElement.current.href, "_blank");
              return;
            }
            primaryLinkElement.current.dispatchEvent(new MouseEvent(event.type, event.nativeEvent));
          } else
            isNavigating.current = !1, handleInteraction(event);
        }
      });
      let RowWrapper = condensed ? "li" : "tr", checkboxMarkup = selectable ? /* @__PURE__ */ React2.createElement(Checkbox.Checkbox, {
        accessibilityLabel
      }) : null;
      return /* @__PURE__ */ React2.createElement(context.RowContext.Provider, {
        value: contextValue
      }, /* @__PURE__ */ React2.createElement(context.RowHoveredContext.Provider, {
        value: hovered
      }, /* @__PURE__ */ React2.createElement(RowWrapper, {
        key: id,
        id,
        className: rowClassName,
        onMouseEnter: setHoverIn,
        onMouseLeave: setHoverOut,
        onClick: handleRowClick,
        ref: tableRowCallbackRef
      }, checkboxMarkup, children)));
    });
    exports.Row = Row;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexTable/utilities/utilities.js
var require_utilities10 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexTable/utilities/utilities.js"(exports) {
    "use strict";
    function getTableHeadingsBySelector(wrapperElement, selector) {
      return wrapperElement ? Array.from(wrapperElement.querySelectorAll(selector)) : [];
    }
    exports.getTableHeadingsBySelector = getTableHeadingsBySelector;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexTable/components/ScrollContainer/ScrollContainer.css.js
var require_ScrollContainer_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexTable/components/ScrollContainer/ScrollContainer.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ScrollContainer: "Polaris-IndexTable-ScrollContainer"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexTable/components/ScrollContainer/ScrollContainer.js
var require_ScrollContainer = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexTable/components/ScrollContainer/ScrollContainer.js"(exports) {
    "use strict";
    var React2 = require_react(), debounce = require_debounce(), ScrollContainer_module = require_ScrollContainer_css(), context = require_context18();
    function ScrollContainer({
      children,
      scrollableContainerRef,
      onScroll
    }) {
      React2.useEffect(() => {
        scrollableContainerRef.current && scrollableContainerRef.current.dispatchEvent(new Event("scroll"));
      }, [scrollableContainerRef]);
      let [containerScroll, setContainerScroll] = React2.useState(context.scrollDefaultContext), handleScroll = React2.useCallback(debounce.debounce(() => {
        if (!scrollableContainerRef.current)
          return;
        let availableScrollAmount = scrollableContainerRef.current.scrollWidth - scrollableContainerRef.current.offsetWidth, canScrollLeft = scrollableContainerRef.current.scrollLeft > 0, canScrollRight = scrollableContainerRef.current.scrollLeft < availableScrollAmount;
        onScroll(canScrollLeft, canScrollRight), setContainerScroll({
          scrollableContainer: scrollableContainerRef.current,
          canScrollLeft,
          canScrollRight
        });
      }, 40, {
        trailing: !0,
        leading: !0,
        maxWait: 40
      }), [onScroll, scrollableContainerRef]);
      return /* @__PURE__ */ React2.createElement(context.ScrollContext.Provider, {
        value: containerScroll
      }, /* @__PURE__ */ React2.createElement("div", {
        className: ScrollContainer_module.default.ScrollContainer,
        ref: scrollableContainerRef,
        onScroll: handleScroll
      }, children));
    }
    exports.ScrollContainer = ScrollContainer;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexTable/IndexTable.js
var require_IndexTable = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexTable/IndexTable.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), reactTransitionGroup = require("react-transition-group"), debounce = require_debounce(), useToggle = require_use_toggle(), css = require_css(), useTheme = require_use_theme(), IndexTable_module = require_IndexTable_css(), IndexProvider = require_IndexProvider(), Cell = require_Cell3(), Row = require_Row(), types = require_types4(), utilities = require_utilities10(), EmptySearchResult = require_EmptySearchResult(), ScrollContainer = require_ScrollContainer(), BulkActions = require_BulkActions(), hooks = require_hooks13(), hooks$1 = require_hooks2(), Spinner2 = require_Spinner(), AfterInitialMount = require_AfterInitialMount(), EventListener = require_EventListener(), Pagination = require_Pagination(), Checkbox = require_Checkbox(), Text4 = require_Text(), LegacyStack = require_LegacyStack(), Badge4 = require_Badge(), UnstyledButton = require_UnstyledButton(), Tooltip = require_Tooltip(), Sticky = require_Sticky(), SCROLL_BAR_PADDING = 16, SCROLL_BAR_DEBOUNCE_PERIOD = 300;
    function IndexTableBase({
      headings,
      bulkActions = [],
      promotedBulkActions = [],
      children,
      emptyState,
      sort,
      paginatedSelectAllActionText,
      lastColumnSticky = !1,
      sortable,
      sortDirection,
      defaultSortDirection = "descending",
      sortColumnIndex,
      onSort,
      sortToggleLabels,
      hasZebraStriping,
      pagination,
      ...restProps
    }) {
      let theme = useTheme.useTheme(), {
        loading,
        bulkSelectState,
        resourceName,
        bulkActionsAccessibilityLabel,
        selectMode,
        selectable = restProps.selectable,
        paginatedSelectAllText,
        itemCount,
        hasMoreItems,
        selectedItemsCount,
        condensed
      } = hooks.useIndexValue(), handleSelectionChange = hooks.useIndexSelectionChange(), i18n = hooks$1.useI18n(), {
        value: hasMoreLeftColumns,
        toggle: toggleHasMoreLeftColumns
      } = useToggle.useToggle(!1), tablePosition = React2.useRef({
        top: 0,
        left: 0
      }), tableHeadingRects = React2.useRef([]), scrollableContainerElement = React2.useRef(null), tableElement = React2.useRef(null), tableBodyElement = React2.useRef(null), condensedListElement = React2.useRef(null), loadingElement = React2.useRef(null), [tableInitialized, setTableInitialized] = React2.useState(!1), [stickyWrapper, setStickyWrapper] = React2.useState(null), [hideScrollContainer, setHideScrollContainer] = React2.useState(!0), tableHeadings = React2.useRef([]), stickyTableHeadings = React2.useRef([]), stickyHeaderWrapperElement = React2.useRef(null), firstStickyHeaderElement = React2.useRef(null), stickyHeaderElement = React2.useRef(null), scrollBarElement = React2.useRef(null), scrollContainerElement = React2.useRef(null), scrollingWithBar = React2.useRef(!1), scrollingContainer = React2.useRef(!1), lastSortedColumnIndex = React2.useRef(sortColumnIndex), renderAfterSelectEvent = React2.useRef(!1), lastSelectedItemsCount = React2.useRef(0), hasSelected = React2.useRef(!1);
      selectedItemsCount !== lastSelectedItemsCount.current && (renderAfterSelectEvent.current = !0, lastSelectedItemsCount.current = selectedItemsCount), !hasSelected.current && selectedItemsCount !== 0 && (hasSelected.current = !0);
      let tableBodyRef = React2.useCallback((node) => {
        node !== null && !tableInitialized && setTableInitialized(!0), tableBodyElement.current = node;
      }, [tableInitialized]), handleSelectAllItemsInStore = React2.useCallback(() => {
        handleSelectionChange(selectedItemsCount === types.SELECT_ALL_ITEMS ? types.SelectionType.Page : types.SelectionType.All, !0);
      }, [handleSelectionChange, selectedItemsCount]), resizeTableHeadings = React2.useMemo(() => debounce.debounce(() => {
        if (!tableElement.current || !scrollableContainerElement.current)
          return;
        let boundingRect = scrollableContainerElement.current.getBoundingClientRect();
        tablePosition.current = {
          top: boundingRect.top,
          left: boundingRect.left
        }, tableHeadingRects.current = tableHeadings.current.map((heading) => ({
          offsetWidth: heading.offsetWidth || 0,
          offsetLeft: heading.offsetLeft || 0
        })), tableHeadings.current.length !== 0 && (selectable && tableHeadings.current.length > 1 && (tableHeadings.current[1].style.left = `${tableHeadingRects.current[0].offsetWidth}px`, stickyTableHeadings.current?.length && (stickyTableHeadings.current[1].style.left = `${tableHeadingRects.current[0].offsetWidth}px`)), stickyTableHeadings.current?.length && stickyTableHeadings.current.forEach((heading, index) => {
          heading.style.minWidth = `${tableHeadingRects.current[index]?.offsetWidth || 0}px`;
        }));
      }), [selectable]), resizeTableScrollBar = React2.useCallback(() => {
        scrollBarElement.current && tableElement.current && tableInitialized && (scrollBarElement.current.style.setProperty("--pc-index-table-scroll-bar-content-width", `${tableElement.current.offsetWidth - SCROLL_BAR_PADDING}px`), setHideScrollContainer(scrollContainerElement.current?.offsetWidth === tableElement.current?.offsetWidth));
      }, [tableInitialized]), debounceResizeTableScrollbar = React2.useCallback(debounce.debounce(resizeTableScrollBar, SCROLL_BAR_DEBOUNCE_PERIOD, {
        trailing: !0
      }), [resizeTableScrollBar]), [canScrollRight, setCanScrollRight] = React2.useState(!0), handleCanScrollRight = React2.useCallback(debounce.debounce(() => {
        if (!lastColumnSticky || !tableElement.current || !scrollableContainerElement.current)
          return;
        let tableRect = tableElement.current.getBoundingClientRect(), scrollableRect = scrollableContainerElement.current.getBoundingClientRect();
        setCanScrollRight(tableRect.width > scrollableRect.width);
      }), [lastColumnSticky]);
      React2.useEffect(() => {
        handleCanScrollRight();
      }, [handleCanScrollRight]);
      let [canFitStickyColumn, setCanFitStickyColumn] = React2.useState(!0), handleCanFitStickyColumn = React2.useCallback(() => {
        if (!scrollableContainerElement.current || !tableHeadings.current.length)
          return;
        let scrollableRect = scrollableContainerElement.current.getBoundingClientRect(), checkboxColumnWidth = selectable ? tableHeadings.current[0].getBoundingClientRect().width : 0, firstStickyColumnWidth = tableHeadings.current[selectable ? 1 : 0].getBoundingClientRect().width, lastColumnIsNotTheFirst = selectable ? tableHeadings.current.length > 2 : 1, lastStickyColumnWidth = lastColumnSticky && lastColumnIsNotTheFirst ? tableHeadings.current[tableHeadings.current.length - 1].getBoundingClientRect().width : 0, restOfContentMinWidth = 100;
        setCanFitStickyColumn(scrollableRect.width > firstStickyColumnWidth + checkboxColumnWidth + lastStickyColumnWidth + restOfContentMinWidth);
      }, [lastColumnSticky, selectable]);
      React2.useEffect(() => {
        tableInitialized && handleCanFitStickyColumn();
      }, [handleCanFitStickyColumn, tableInitialized]);
      let handleResize = React2.useCallback(() => {
        scrollBarElement.current?.style.setProperty("--pc-index-table-scroll-bar-content-width", "0px"), resizeTableHeadings(), debounceResizeTableScrollbar(), handleCanScrollRight(), handleCanFitStickyColumn();
      }, [resizeTableHeadings, debounceResizeTableScrollbar, handleCanScrollRight, handleCanFitStickyColumn]), handleScrollContainerScroll = React2.useCallback((canScrollLeft, canScrollRight2) => {
        !scrollableContainerElement.current || !scrollBarElement.current || (scrollingWithBar.current || (scrollingContainer.current = !0, scrollBarElement.current.scrollLeft = scrollableContainerElement.current.scrollLeft), scrollingWithBar.current = !1, stickyHeaderElement.current && (stickyHeaderElement.current.scrollLeft = scrollableContainerElement.current.scrollLeft), (canScrollLeft && !hasMoreLeftColumns || !canScrollLeft && hasMoreLeftColumns) && toggleHasMoreLeftColumns(), setCanScrollRight(canScrollRight2));
      }, [hasMoreLeftColumns, toggleHasMoreLeftColumns]), handleScrollBarScroll = React2.useCallback(() => {
        !scrollableContainerElement.current || !scrollBarElement.current || (scrollingContainer.current || (scrollingWithBar.current = !0, scrollableContainerElement.current.scrollLeft = scrollBarElement.current.scrollLeft), scrollingContainer.current = !1);
      }, []);
      React2.useLayoutEffect(() => {
        tableHeadings.current = utilities.getTableHeadingsBySelector(tableElement.current, "[data-index-table-heading]"), stickyTableHeadings.current = utilities.getTableHeadingsBySelector(stickyHeaderWrapperElement.current, "[data-index-table-sticky-heading]"), resizeTableHeadings();
      }, [headings, resizeTableHeadings, firstStickyHeaderElement, tableInitialized]), React2.useEffect(() => {
        resizeTableScrollBar(), setStickyWrapper(condensed ? condensedListElement.current : tableElement.current);
      }, [tableInitialized, resizeTableScrollBar, condensed]);
      let headingsMarkup = headings.map((heading, index) => renderHeading(heading, index, "th", {
        "data-index-table-heading": !0
      }, heading.id)), stickyHeadingsMarkup = headings.map((heading, index) => (
        // NOTE: No id since it would be a duplicate of the non-sticky header's id
        renderHeading(heading, index, "div", {
          "data-index-table-sticky-heading": !0
        })
      )), [selectedItemsCountValue, setSelectedItemsCountValue] = React2.useState(selectedItemsCount === types.SELECT_ALL_ITEMS ? `${itemCount}+` : selectedItemsCount);
      React2.useEffect(() => {
        (selectedItemsCount === types.SELECT_ALL_ITEMS || selectedItemsCount > 0) && setSelectedItemsCountValue(selectedItemsCount === types.SELECT_ALL_ITEMS ? `${itemCount}+` : selectedItemsCount);
      }, [selectedItemsCount, itemCount]);
      let selectAllActionsLabel = i18n.translate("Polaris.IndexTable.selected", {
        selectedItemsCount: selectedItemsCountValue
      }), handleTogglePage = React2.useCallback(() => {
        handleSelectionChange(types.SelectionType.Page, Boolean(!bulkSelectState || bulkSelectState === "indeterminate"));
      }, [bulkSelectState, handleSelectionChange]), paginatedSelectAllAction = getPaginatedSelectAllAction(), loadingTransitionClassNames = {
        enter: IndexTable_module.default["LoadingContainer-enter"],
        enterActive: IndexTable_module.default["LoadingContainer-enter-active"],
        exit: IndexTable_module.default["LoadingContainer-exit"],
        exitActive: IndexTable_module.default["LoadingContainer-exit-active"]
      }, loadingMarkup = /* @__PURE__ */ React2.createElement(reactTransitionGroup.CSSTransition, {
        in: loading,
        classNames: loadingTransitionClassNames,
        timeout: parseInt(theme.motion["motion-duration-100"], 10),
        nodeRef: loadingElement,
        appear: !0,
        unmountOnExit: !0
      }, /* @__PURE__ */ React2.createElement("div", {
        className: IndexTable_module.default.LoadingPanel,
        ref: loadingElement
      }, /* @__PURE__ */ React2.createElement("div", {
        className: IndexTable_module.default.LoadingPanelRow
      }, /* @__PURE__ */ React2.createElement(Spinner2.Spinner, {
        size: "small"
      }), /* @__PURE__ */ React2.createElement("span", {
        className: IndexTable_module.default.LoadingPanelText
      }, i18n.translate("Polaris.IndexTable.resourceLoadingAccessibilityLabel", {
        resourceNamePlural: resourceName.plural.toLocaleLowerCase()
      }))))), stickyTableClassNames = css.classNames(IndexTable_module.default.StickyTable, hasMoreLeftColumns && IndexTable_module.default["StickyTable-scrolling"], condensed && IndexTable_module.default["StickyTable-condensed"]), shouldShowActions = !condensed || selectedItemsCount, promotedActions = shouldShowActions ? promotedBulkActions : [], actions = shouldShowActions ? bulkActions : [], stickyHeaderMarkup = /* @__PURE__ */ React2.createElement("div", {
        className: stickyTableClassNames,
        role: "presentation"
      }, /* @__PURE__ */ React2.createElement(Sticky.Sticky, {
        boundingElement: stickyWrapper
      }, (isSticky) => {
        let stickyHeaderClassNames = css.classNames(
          IndexTable_module.default.StickyTableHeader,
          isSticky && IndexTable_module.default["StickyTableHeader-isSticky"],
          // Has a sticky left column enabled
          canFitStickyColumn && IndexTable_module.default["StickyTableHeader-sticky"],
          // ie; is scrolled to the right
          hasMoreLeftColumns && IndexTable_module.default["StickyTableHeader-scrolling"],
          // Has a sticky right column enabled
          canFitStickyColumn && lastColumnSticky && IndexTable_module.default["StickyTableHeader-sticky-last"],
          // ie; is scrolled to the left
          canFitStickyColumn && lastColumnSticky && canScrollRight && IndexTable_module.default["StickyTableHeader-sticky-scrolling"]
        ), bulkActionsClassName = css.classNames(IndexTable_module.default.BulkActionsWrapper, selectMode && IndexTable_module.default.BulkActionsWrapperVisible, condensed && IndexTable_module.default["StickyTableHeader-condensed"], isSticky && IndexTable_module.default["StickyTableHeader-isSticky"]), bulkActionsMarkup = shouldShowActions && !condensed ? /* @__PURE__ */ React2.createElement("div", {
          className: bulkActionsClassName
        }, /* @__PURE__ */ React2.createElement(BulkActions.BulkActions, {
          selectMode,
          onToggleAll: handleTogglePage,
          paginatedSelectAllText,
          paginatedSelectAllAction,
          accessibilityLabel: bulkActionsAccessibilityLabel,
          selected: bulkSelectState,
          promotedActions,
          actions,
          onSelectModeToggle: condensed ? handleSelectModeToggle : void 0,
          label: selectAllActionsLabel,
          buttonSize: "micro"
        })) : null, headerMarkup = condensed ? /* @__PURE__ */ React2.createElement("div", {
          className: css.classNames(IndexTable_module.default.HeaderWrapper, (!selectable || condensed) && IndexTable_module.default.unselectable)
        }, loadingMarkup, sort) : /* @__PURE__ */ React2.createElement("div", {
          className: stickyHeaderClassNames,
          ref: stickyHeaderWrapperElement
        }, loadingMarkup, /* @__PURE__ */ React2.createElement("div", {
          className: IndexTable_module.default.StickyTableHeadings,
          ref: stickyHeaderElement
        }, stickyHeadingsMarkup));
        return /* @__PURE__ */ React2.createElement(React2.Fragment, null, headerMarkup, bulkActionsMarkup);
      })), scrollBarWrapperClassNames = css.classNames(IndexTable_module.default.ScrollBarContainer, pagination && IndexTable_module.default.ScrollBarContainerWithPagination, condensed && IndexTable_module.default.scrollBarContainerCondensed, hideScrollContainer && IndexTable_module.default.scrollBarContainerHidden), scrollBarClassNames = css.classNames(tableElement.current && tableInitialized && IndexTable_module.default.ScrollBarContent), scrollBarMarkup = itemCount > 0 ? /* @__PURE__ */ React2.createElement(AfterInitialMount.AfterInitialMount, {
        onMount: resizeTableScrollBar
      }, /* @__PURE__ */ React2.createElement("div", {
        className: scrollBarWrapperClassNames,
        ref: scrollContainerElement
      }, /* @__PURE__ */ React2.createElement("div", {
        onScroll: handleScrollBarScroll,
        className: IndexTable_module.default.ScrollBar,
        ref: scrollBarElement
      }, /* @__PURE__ */ React2.createElement("div", {
        className: scrollBarClassNames
      })))) : null, isSortable = sortable?.some((value) => value), tableClassNames = css.classNames(IndexTable_module.default.Table, hasMoreLeftColumns && IndexTable_module.default["Table-scrolling"], selectMode && IndexTable_module.default.disableTextSelection, !selectable && IndexTable_module.default["Table-unselectable"], canFitStickyColumn && IndexTable_module.default["Table-sticky"], isSortable && IndexTable_module.default["Table-sortable"], canFitStickyColumn && lastColumnSticky && IndexTable_module.default["Table-sticky-last"], canFitStickyColumn && lastColumnSticky && canScrollRight && IndexTable_module.default["Table-sticky-scrolling"], hasZebraStriping && IndexTable_module.default.ZebraStriping), emptyStateMarkup = emptyState || /* @__PURE__ */ React2.createElement(EmptySearchResult.EmptySearchResult, {
        title: i18n.translate("Polaris.IndexTable.emptySearchTitle", {
          resourceNamePlural: resourceName.plural
        }),
        description: i18n.translate("Polaris.IndexTable.emptySearchDescription"),
        withIllustration: !0
      }), sharedMarkup = /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
        event: "resize",
        handler: handleResize
      }), stickyHeaderMarkup), condensedClassNames = css.classNames(IndexTable_module.default.CondensedList, hasZebraStriping && IndexTable_module.default.ZebraStriping), bodyMarkup = condensed ? /* @__PURE__ */ React2.createElement(React2.Fragment, null, sharedMarkup, /* @__PURE__ */ React2.createElement("ul", {
        "data-selectmode": Boolean(selectMode),
        className: condensedClassNames,
        ref: condensedListElement
      }, children)) : /* @__PURE__ */ React2.createElement(React2.Fragment, null, sharedMarkup, /* @__PURE__ */ React2.createElement(ScrollContainer.ScrollContainer, {
        scrollableContainerRef: scrollableContainerElement,
        onScroll: handleScrollContainerScroll
      }, /* @__PURE__ */ React2.createElement("table", {
        ref: tableElement,
        className: tableClassNames
      }, /* @__PURE__ */ React2.createElement("thead", null, /* @__PURE__ */ React2.createElement("tr", {
        className: IndexTable_module.default.HeadingRow
      }, headingsMarkup)), /* @__PURE__ */ React2.createElement("tbody", {
        ref: tableBodyRef
      }, children)))), tableContentMarkup = itemCount > 0 ? bodyMarkup : /* @__PURE__ */ React2.createElement("div", {
        className: IndexTable_module.default.EmptySearchResultWrapper
      }, emptyStateMarkup), paginationMarkup = pagination ? /* @__PURE__ */ React2.createElement("div", {
        className: IndexTable_module.default.PaginationWrapper
      }, /* @__PURE__ */ React2.createElement(Pagination.Pagination, Object.assign({
        type: "table"
      }, pagination))) : null;
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("div", {
        className: IndexTable_module.default.IndexTable
      }, /* @__PURE__ */ React2.createElement("div", {
        className: IndexTable_module.default.IndexTableWrapper
      }, !condensed && loadingMarkup, tableContentMarkup, scrollBarMarkup, paginationMarkup)));
      function renderHeading(heading, index, Tag, tagProps, id) {
        let isSecond = index === 0, isLast = index === headings.length - 1, hasSortable = sortable?.some((value) => value === !0), headingAlignment = heading.alignment || "start", headingContentClassName = css.classNames(IndexTable_module.default.TableHeading, headingAlignment === "center" && IndexTable_module.default["TableHeading-align-center"], headingAlignment === "end" && IndexTable_module.default["TableHeading-align-end"], hasSortable && IndexTable_module.default["TableHeading-sortable"], isSecond && IndexTable_module.default["TableHeading-second"], isLast && !heading.hidden && IndexTable_module.default["TableHeading-last"], !selectable && IndexTable_module.default["TableHeading-unselectable"], heading.flush && IndexTable_module.default["TableHeading-flush"]), stickyPositioningStyle = selectable !== !1 && isSecond && tableHeadingRects.current && tableHeadingRects.current.length > 0 ? {
          left: tableHeadingRects.current[0].offsetWidth
        } : void 0, headingContent = /* @__PURE__ */ React2.createElement(Tag, Object.assign({
          id,
          className: headingContentClassName,
          key: getHeadingKey(heading),
          style: stickyPositioningStyle
        }, tagProps), renderHeadingContent(heading, index));
        if (index !== 0 || !selectable)
          return headingContent;
        let checkboxClassName = css.classNames(IndexTable_module.default.TableHeading, hasSortable && IndexTable_module.default["TableHeading-sortable"], index === 0 && IndexTable_module.default["TableHeading-first"]);
        return [/* @__PURE__ */ React2.createElement(Tag, Object.assign({
          className: checkboxClassName,
          key: `${heading}-${index}`
        }, tagProps), renderCheckboxContent()), headingContent];
      }
      function renderCheckboxContent() {
        return /* @__PURE__ */ React2.createElement("div", {
          className: IndexTable_module.default.ColumnHeaderCheckboxWrapper
        }, /* @__PURE__ */ React2.createElement(Checkbox.Checkbox, {
          label: i18n.translate("Polaris.IndexTable.selectAllLabel", {
            resourceNamePlural: resourceName.plural
          }),
          labelHidden: !0,
          onChange: handleSelectPage,
          checked: bulkSelectState
        }));
      }
      function handleSortHeadingClick(index, direction) {
        renderAfterSelectEvent.current = !1, hasSelected.current = !1, lastSortedColumnIndex.current = sortColumnIndex, onSort?.(index, direction);
      }
      function renderHeadingContent(heading, index) {
        let headingContent, defaultTooltipProps = {
          width: heading.tooltipWidth ?? "default",
          activatorWrapper: "div",
          dismissOnMouseOut: !0,
          persistOnClick: heading.tooltipPersistsOnClick
        }, defaultHeaderTooltipProps = {
          ...defaultTooltipProps,
          padding: "400",
          borderRadius: "200",
          content: heading.tooltipContent,
          preferredPosition: "above"
        }, headingTitle = /* @__PURE__ */ React2.createElement(Text4.Text, {
          as: "span",
          variant: "bodySm",
          fontWeight: "medium",
          visuallyHidden: heading.hidden
        }, heading.title);
        heading.new ? headingContent = /* @__PURE__ */ React2.createElement(LegacyStack.LegacyStack, {
          wrap: !1,
          alignment: "center"
        }, headingTitle, /* @__PURE__ */ React2.createElement(Badge4.Badge, {
          tone: "new"
        }, i18n.translate("Polaris.IndexTable.onboardingBadgeText"))) : headingContent = headingTitle;
        let style = {
          "--pc-index-table-heading-extra-padding-right": heading.paddingBlockEnd ? `var(--p-space-${heading.paddingBlockEnd})` : "0"
        };
        if (sortable?.[index]) {
          let isCurrentlySorted = index === sortColumnIndex, isPreviouslySorted = !isCurrentlySorted && index === lastSortedColumnIndex.current, isRenderAfterSelectEvent = renderAfterSelectEvent.current || !hasSelected.current && selectedItemsCount !== 0, isAscending = sortDirection === "ascending", newDirection = heading.defaultSortDirection ?? defaultSortDirection, SourceComponent = newDirection === "ascending" ? polarisIcons.SortAscendingIcon : polarisIcons.SortDescendingIcon;
          isCurrentlySorted && (newDirection = isAscending ? "descending" : "ascending", SourceComponent = sortDirection === "ascending" ? polarisIcons.SortAscendingIcon : polarisIcons.SortDescendingIcon);
          let iconMarkup = /* @__PURE__ */ React2.createElement("span", {
            className: css.classNames(IndexTable_module.default.TableHeadingSortIcon, heading?.alignment === "end" && IndexTable_module.default["TableHeadingSortIcon-heading-align-end"], isCurrentlySorted && IndexTable_module.default["TableHeadingSortIcon-visible"])
          }, /* @__PURE__ */ React2.createElement(SourceComponent, {
            focusable: "false",
            "aria-hidden": "true",
            className: IndexTable_module.default.TableHeadingSortSvg
          })), defaultSortButtonProps = {
            onClick: () => handleSortHeadingClick(index, newDirection),
            className: css.classNames(IndexTable_module.default.TableHeadingSortButton, !isCurrentlySorted && heading?.alignment === "end" && IndexTable_module.default["TableHeadingSortButton-heading-align-end"], isCurrentlySorted && heading?.alignment === "end" && IndexTable_module.default["TableHeadingSortButton-heading-align-end-currently-sorted"], isPreviouslySorted && !isRenderAfterSelectEvent && heading?.alignment === "end" && IndexTable_module.default["TableHeadingSortButton-heading-align-end-previously-sorted"]),
            tabIndex: selectMode ? -1 : 0
          }, sortMarkup = /* @__PURE__ */ React2.createElement(UnstyledButton.UnstyledButton, defaultSortButtonProps, iconMarkup, /* @__PURE__ */ React2.createElement("span", {
            className: css.classNames(sortToggleLabels && selectMode && heading.tooltipContent && IndexTable_module.default.TableHeadingTooltipUnderlinePlaceholder)
          }, headingContent));
          if (!sortToggleLabels || selectMode)
            return /* @__PURE__ */ React2.createElement("div", {
              className: IndexTable_module.default.SortableTableHeadingWithCustomMarkup
            }, sortMarkup);
          let tooltipDirection = isCurrentlySorted ? sortDirection : newDirection, sortTooltipContent = sortToggleLabels[index][tooltipDirection];
          if (!heading.tooltipContent)
            return (
              // Regular header with sort icon and sort direction tooltip
              /* @__PURE__ */ React2.createElement("div", {
                style,
                className: css.classNames(heading.paddingBlockEnd && IndexTable_module.default["TableHeading-extra-padding-right"])
              }, /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, Object.assign({}, defaultTooltipProps, {
                content: sortTooltipContent,
                preferredPosition: "above"
              }), sortMarkup))
            );
          if (heading.tooltipContent)
            return (
              // Header text and sort icon have separate tooltips
              /* @__PURE__ */ React2.createElement("div", {
                className: css.classNames(IndexTable_module.default.SortableTableHeadingWithCustomMarkup, heading.paddingBlockEnd && IndexTable_module.default["TableHeading-extra-padding-right"]),
                style
              }, /* @__PURE__ */ React2.createElement(UnstyledButton.UnstyledButton, defaultSortButtonProps, /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, defaultHeaderTooltipProps, /* @__PURE__ */ React2.createElement("span", {
                className: IndexTable_module.default.TableHeadingUnderline
              }, headingContent)), /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, Object.assign({}, defaultTooltipProps, {
                content: sortTooltipContent,
                preferredPosition: "above"
              }), iconMarkup)))
            );
        }
        return heading.tooltipContent ? (
          // Non-sortable header with tooltip
          /* @__PURE__ */ React2.createElement("div", {
            style,
            className: css.classNames(heading.paddingBlockEnd && IndexTable_module.default["TableHeading-extra-padding-right"])
          }, /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, Object.assign({}, defaultHeaderTooltipProps, {
            activatorWrapper: "span"
          }), /* @__PURE__ */ React2.createElement("span", {
            className: css.classNames(IndexTable_module.default.TableHeadingUnderline, IndexTable_module.default.SortableTableHeaderWrapper)
          }, headingContent)))
        ) : /* @__PURE__ */ React2.createElement("div", {
          style,
          className: css.classNames(heading.paddingBlockEnd && IndexTable_module.default["TableHeading-extra-padding-right"])
        }, headingContent);
      }
      function handleSelectPage(checked) {
        handleSelectionChange(types.SelectionType.Page, checked);
      }
      function getPaginatedSelectAllAction() {
        if (!selectable || !hasMoreItems)
          return;
        let customActionText = paginatedSelectAllActionText ?? i18n.translate("Polaris.IndexTable.selectAllItems", {
          itemsLength: itemCount,
          resourceNamePlural: resourceName.plural.toLocaleLowerCase()
        });
        return {
          content: selectedItemsCount === types.SELECT_ALL_ITEMS ? i18n.translate("Polaris.IndexTable.undo") : customActionText,
          onAction: handleSelectAllItemsInStore
        };
      }
      function handleSelectModeToggle() {
        handleSelectionChange(types.SelectionType.All, !1);
      }
    }
    function getHeadingKey(heading) {
      return heading.id ? heading.id : typeof heading.title == "string" ? heading.title : "";
    }
    function IndexTable({
      children,
      selectable = !0,
      itemCount,
      selectedItemsCount = 0,
      resourceName: passedResourceName,
      loading,
      hasMoreItems,
      condensed,
      onSelectionChange,
      paginatedSelectAllText,
      ...indexTableBaseProps
    }) {
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(IndexProvider.IndexProvider, {
        selectable: selectable && !condensed,
        itemCount,
        selectedItemsCount,
        resourceName: passedResourceName,
        loading,
        hasMoreItems,
        condensed,
        onSelectionChange,
        paginatedSelectAllText
      }, /* @__PURE__ */ React2.createElement(IndexTableBase, indexTableBaseProps, children)));
    }
    IndexTable.Cell = Cell.Cell;
    IndexTable.Row = Row.Row;
    exports.IndexTable = IndexTable;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/InlineCode/InlineCode.css.js
var require_InlineCode_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/InlineCode/InlineCode.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Code: "Polaris-InlineCode__Code"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/InlineCode/InlineCode.js
var require_InlineCode = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/InlineCode/InlineCode.js"(exports) {
    "use strict";
    var React2 = require_react(), InlineCode_module = require_InlineCode_css(), InlineCode = ({
      children
    }) => /* @__PURE__ */ React2.createElement("code", {
      className: InlineCode_module.default.Code
    }, children);
    exports.InlineCode = InlineCode;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/KeyboardKey/KeyboardKey.css.js
var require_KeyboardKey_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/KeyboardKey/KeyboardKey.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      KeyboardKey: "Polaris-KeyboardKey",
      small: "Polaris-KeyboardKey--small"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/KeyboardKey/KeyboardKey.js
var require_KeyboardKey = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/KeyboardKey/KeyboardKey.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), KeyboardKey_module = require_KeyboardKey_css();
    function KeyboardKey({
      children = "",
      size
    }) {
      let key = !size && children.length > 1 ? children.toLowerCase() : children.toUpperCase(), className = css.classNames(KeyboardKey_module.default.KeyboardKey, size && KeyboardKey_module.default[size]);
      return /* @__PURE__ */ React2.createElement("kbd", {
        className
      }, key);
    }
    exports.KeyboardKey = KeyboardKey;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Layout/Layout.css.js
var require_Layout_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Layout/Layout.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Layout: "Polaris-Layout",
      Section: "Polaris-Layout__Section",
      "Section-fullWidth": "Polaris-Layout__Section--fullWidth",
      "Section-oneHalf": "Polaris-Layout__Section--oneHalf",
      "Section-oneThird": "Polaris-Layout__Section--oneThird",
      AnnotatedSection: "Polaris-Layout__AnnotatedSection",
      AnnotationWrapper: "Polaris-Layout__AnnotationWrapper",
      AnnotationContent: "Polaris-Layout__AnnotationContent",
      Annotation: "Polaris-Layout__Annotation"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TextContainer/TextContainer.css.js
var require_TextContainer_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TextContainer/TextContainer.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      TextContainer: "Polaris-TextContainer",
      spacingTight: "Polaris-TextContainer--spacingTight",
      spacingLoose: "Polaris-TextContainer--spacingLoose"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TextContainer/TextContainer.js
var require_TextContainer = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TextContainer/TextContainer.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), TextContainer_module = require_TextContainer_css();
    function TextContainer({
      spacing,
      children
    }) {
      let className = css.classNames(TextContainer_module.default.TextContainer, spacing && TextContainer_module.default[css.variationName("spacing", spacing)]);
      return /* @__PURE__ */ React2.createElement("div", {
        className
      }, children);
    }
    exports.TextContainer = TextContainer;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Layout/components/AnnotatedSection/AnnotatedSection.js
var require_AnnotatedSection = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Layout/components/AnnotatedSection/AnnotatedSection.js"(exports) {
    "use strict";
    var React2 = require_react(), Layout_module = require_Layout_css(), TextContainer = require_TextContainer(), Text4 = require_Text(), Box4 = require_Box();
    function AnnotatedSection({
      children,
      title,
      description,
      id
    }) {
      let descriptionMarkup = typeof description == "string" ? /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "p",
        variant: "bodyMd"
      }, description) : description;
      return /* @__PURE__ */ React2.createElement("div", {
        className: Layout_module.default.AnnotatedSection
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Layout_module.default.AnnotationWrapper
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Layout_module.default.Annotation
      }, /* @__PURE__ */ React2.createElement(TextContainer.TextContainer, {
        spacing: "tight"
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        id,
        variant: "headingMd",
        as: "h2"
      }, title), descriptionMarkup && /* @__PURE__ */ React2.createElement(Box4.Box, {
        color: "text-secondary"
      }, descriptionMarkup))), /* @__PURE__ */ React2.createElement("div", {
        className: Layout_module.default.AnnotationContent
      }, children)));
    }
    exports.AnnotatedSection = AnnotatedSection;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Layout/components/Section/Section.js
var require_Section6 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Layout/components/Section/Section.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Layout_module = require_Layout_css();
    function Section({
      children,
      variant
    }) {
      let className = css.classNames(Layout_module.default.Section, Layout_module.default[`Section-${variant}`]);
      return /* @__PURE__ */ React2.createElement("div", {
        className
      }, children);
    }
    exports.Section = Section;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Layout/Layout.js
var require_Layout = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Layout/Layout.js"(exports) {
    "use strict";
    var React2 = require_react(), Layout_module = require_Layout_css(), AnnotatedSection = require_AnnotatedSection(), Section = require_Section6(), Layout3 = function({
      sectioned,
      children
    }) {
      let content = sectioned ? /* @__PURE__ */ React2.createElement(Section.Section, null, children) : children;
      return /* @__PURE__ */ React2.createElement("div", {
        className: Layout_module.default.Layout
      }, content);
    };
    Layout3.AnnotatedSection = AnnotatedSection.AnnotatedSection;
    Layout3.Section = Section.Section;
    exports.Layout = Layout3;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyFilters/LegacyFilters.css.js
var require_LegacyFilters_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyFilters/LegacyFilters.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      LegacyFilters: "Polaris-LegacyFilters",
      LegacyFiltersContainer: "Polaris-LegacyFilters__LegacyFiltersContainer",
      LegacyFiltersContainerHeader: "Polaris-LegacyFilters__LegacyFiltersContainerHeader",
      LegacyFiltersDesktopContainerContent: "Polaris-LegacyFilters__LegacyFiltersDesktopContainerContent",
      LegacyFiltersMobileContainerContent: "Polaris-LegacyFilters__LegacyFiltersMobileContainerContent",
      LegacyFiltersContainerFooter: "Polaris-LegacyFilters__LegacyFiltersContainerFooter",
      LegacyFiltersMobileContainerFooter: "Polaris-LegacyFilters__LegacyFiltersMobileContainerFooter",
      EmptyFooterState: "Polaris-LegacyFilters__EmptyFooterState",
      FilterTriggerContainer: "Polaris-LegacyFilters__FilterTriggerContainer",
      FilterTrigger: "Polaris-LegacyFilters__FilterTrigger",
      FilterTriggerTitle: "Polaris-LegacyFilters__FilterTriggerTitle",
      AppliedFilterBadgeContainer: "Polaris-LegacyFilters__AppliedFilterBadgeContainer",
      open: "Polaris-LegacyFilters--open",
      FilterTriggerLabelContainer: "Polaris-LegacyFilters__FilterTriggerLabelContainer",
      first: "Polaris-LegacyFilters--first",
      last: "Polaris-LegacyFilters--last",
      FilterNodeContainer: "Polaris-LegacyFilters__FilterNodeContainer",
      SearchIcon: "Polaris-LegacyFilters__SearchIcon",
      Backdrop: "Polaris-LegacyFilters__Backdrop",
      HelpText: "Polaris-LegacyFilters__HelpText",
      TagsContainer: "Polaris-LegacyFilters__TagsContainer"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/resource-list/context.js
var require_context19 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/resource-list/context.js"(exports) {
    "use strict";
    var React2 = require_react(), ResourceListContext = /* @__PURE__ */ React2.createContext({});
    exports.ResourceListContext = ResourceListContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyFilters/components/ConnectedFilterControl/ConnectedFilterControl.css.js
var require_ConnectedFilterControl_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyFilters/components/ConnectedFilterControl/ConnectedFilterControl.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ConnectedFilterControl: "Polaris-LegacyFilters-ConnectedFilterControl",
      CenterContainer: "Polaris-LegacyFilters-ConnectedFilterControl__CenterContainer",
      right: "Polaris-LegacyFilters-ConnectedFilterControl--right",
      Item: "Polaris-LegacyFilters-ConnectedFilterControl__Item",
      "Item-focused": "Polaris-LegacyFilters-ConnectedFilterControl__Item--focused",
      ProxyButtonContainer: "Polaris-LegacyFilters-ConnectedFilterControl__ProxyButtonContainer",
      RightContainer: "Polaris-LegacyFilters-ConnectedFilterControl__RightContainer",
      MoreFiltersButtonContainer: "Polaris-LegacyFilters-ConnectedFilterControl__MoreFiltersButtonContainer",
      queryFieldHidden: "Polaris-LegacyFilters-ConnectedFilterControl--queryFieldHidden",
      RightContainerWithoutMoreFilters: "Polaris-LegacyFilters-ConnectedFilterControl__RightContainerWithoutMoreFilters",
      onlyButtonVisible: "Polaris-LegacyFilters-ConnectedFilterControl--onlyButtonVisible",
      Wrapper: "Polaris-LegacyFilters-ConnectedFilterControl__Wrapper",
      AuxiliaryContainer: "Polaris-LegacyFilters-ConnectedFilterControl__AuxiliaryContainer"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyFilters/components/ConnectedFilterControl/components/Item/Item.js
var require_Item7 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyFilters/components/ConnectedFilterControl/components/Item/Item.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), useToggle = require_use_toggle(), ConnectedFilterControl_module = require_ConnectedFilterControl_css();
    function Item({
      children
    }) {
      let {
        value: focused,
        setTrue: forceTrueFocused,
        setFalse: forceFalseFocused
      } = useToggle.useToggle(!1), className = css.classNames(ConnectedFilterControl_module.default.Item, focused && ConnectedFilterControl_module.default["Item-focused"]);
      return /* @__PURE__ */ React2.createElement("div", {
        onBlur: forceFalseFocused,
        onFocus: forceTrueFocused,
        className
      }, children);
    }
    exports.Item = Item;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyFilters/components/ConnectedFilterControl/ConnectedFilterControl.js
var require_ConnectedFilterControl = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyFilters/components/ConnectedFilterControl/ConnectedFilterControl.js"(exports) {
    "use strict";
    var React2 = require_react(), debounce = require_debounce(), css = require_css(), ConnectedFilterControl_module = require_ConnectedFilterControl_css(), Item = require_Item7(), EventListener = require_EventListener(), Button4 = require_Button(), Popover = require_Popover(), FILTER_FIELD_MIN_WIDTH = 150, ConnectedFilterControl = class extends React2.Component {
      constructor(...args) {
        super(...args), this.state = {
          availableWidth: 0,
          proxyButtonsWidth: {}
        }, this.container = /* @__PURE__ */ React2.createRef(), this.proxyButtonContainer = /* @__PURE__ */ React2.createRef(), this.moreFiltersButtonContainer = /* @__PURE__ */ React2.createRef(), this.handleResize = debounce.debounce(() => {
          this.measureProxyButtons(), this.measureAvailableWidth();
        }, 40, {
          leading: !0,
          trailing: !0,
          maxWait: 40
        });
      }
      componentDidMount() {
        this.handleResize();
      }
      render() {
        let {
          children,
          rightPopoverableActions,
          rightAction,
          auxiliary,
          forceShowMorefiltersButton = !0,
          queryFieldHidden
        } = this.props, actionsToRender = rightPopoverableActions != null ? this.getActionsToRender(rightPopoverableActions) : [], className = css.classNames(ConnectedFilterControl_module.default.ConnectedFilterControl, rightPopoverableActions && ConnectedFilterControl_module.default.right), shouldRenderMoreFiltersButton = forceShowMorefiltersButton || rightPopoverableActions && rightPopoverableActions.length !== actionsToRender.length, RightContainerClassName = css.classNames(ConnectedFilterControl_module.default.RightContainer, !shouldRenderMoreFiltersButton && ConnectedFilterControl_module.default.RightContainerWithoutMoreFilters, queryFieldHidden && ConnectedFilterControl_module.default.queryFieldHidden), rightMarkup = actionsToRender.length > 0 ? /* @__PURE__ */ React2.createElement("div", {
          className: RightContainerClassName
        }, this.popoverFrom(actionsToRender)) : null, moreFiltersButtonContainerClassname = css.classNames(ConnectedFilterControl_module.default.MoreFiltersButtonContainer, actionsToRender.length === 0 && ConnectedFilterControl_module.default.onlyButtonVisible), rightActionMarkup = rightAction ? /* @__PURE__ */ React2.createElement("div", {
          ref: this.moreFiltersButtonContainer,
          className: moreFiltersButtonContainerClassname
        }, shouldRenderMoreFiltersButton && /* @__PURE__ */ React2.createElement(Item.Item, null, rightAction)) : null, proxyButtonMarkup = rightPopoverableActions ? /* @__PURE__ */ React2.createElement("div", {
          className: ConnectedFilterControl_module.default.ProxyButtonContainer,
          ref: this.proxyButtonContainer,
          "aria-hidden": !0
        }, rightPopoverableActions.map((action8) => /* @__PURE__ */ React2.createElement("div", {
          key: action8.key,
          "data-key": action8.key
        }, this.activatorButtonFrom(action8, {
          proxy: !0
        })))) : null, auxMarkup = auxiliary ? /* @__PURE__ */ React2.createElement("div", {
          className: ConnectedFilterControl_module.default.AuxiliaryContainer
        }, auxiliary) : null;
        return /* @__PURE__ */ React2.createElement(React2.Fragment, null, proxyButtonMarkup, /* @__PURE__ */ React2.createElement("div", {
          className: ConnectedFilterControl_module.default.Wrapper
        }, /* @__PURE__ */ React2.createElement("div", {
          className,
          ref: this.container
        }, children ? /* @__PURE__ */ React2.createElement("div", {
          className: ConnectedFilterControl_module.default.CenterContainer
        }, /* @__PURE__ */ React2.createElement(Item.Item, null, children)) : null, rightMarkup, rightActionMarkup, /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
          event: "resize",
          handler: this.handleResize
        })), auxMarkup));
      }
      measureProxyButtons() {
        if (this.proxyButtonContainer.current) {
          let proxyButtonsWidth = {};
          this.proxyButtonContainer.current && Array.from(this.proxyButtonContainer.current.children).forEach((element) => {
            let buttonWidth = element.getBoundingClientRect().width + 78, buttonKey = element instanceof HTMLElement && element.dataset.key;
            buttonKey && (proxyButtonsWidth[buttonKey] = buttonWidth);
          }), this.setState({
            proxyButtonsWidth
          });
        }
      }
      measureAvailableWidth() {
        if (this.container.current && this.moreFiltersButtonContainer.current) {
          let containerWidth = this.container.current.getBoundingClientRect().width, moreFiltersButtonWidth = this.moreFiltersButtonContainer.current.getBoundingClientRect().width, filtersActionWidth = 0, filterFieldMinWidth = this.props.queryFieldHidden ? 0 : FILTER_FIELD_MIN_WIDTH, availableWidth = containerWidth - filterFieldMinWidth - moreFiltersButtonWidth - filtersActionWidth;
          this.setState({
            availableWidth
          });
        }
      }
      getActionsToRender(actions) {
        let remainingWidth = this.state.availableWidth, actionsToReturn = [];
        for (let i = 0; remainingWidth > 0 && i < actions.length; i++) {
          let action8 = actions[i], actionWidth = this.state.proxyButtonsWidth[action8.key];
          if (actionWidth <= remainingWidth)
            actionsToReturn.push(action8), remainingWidth -= actionWidth;
          else
            break;
        }
        return actionsToReturn;
      }
      activatorButtonFrom(action8, options) {
        let id = options?.proxy ? void 0 : `Activator-${action8.key}`;
        return /* @__PURE__ */ React2.createElement(Button4.Button, {
          onClick: action8.onAction,
          disclosure: !0,
          disabled: this.props.disabled || action8.disabled,
          id,
          size: "large"
        }, action8.content);
      }
      popoverFrom(actions) {
        return actions.map((action8) => /* @__PURE__ */ React2.createElement(Item.Item, {
          key: action8.key
        }, /* @__PURE__ */ React2.createElement(Popover.Popover, {
          active: action8.popoverOpen,
          activator: this.activatorButtonFrom(action8),
          onClose: action8.onAction,
          preferredAlignment: "left",
          sectioned: !0
        }, action8.popoverContent)));
      }
    };
    exports.ConnectedFilterControl = ConnectedFilterControl;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyFilters/components/TagsWrapper/TagsWrapper.js
var require_TagsWrapper = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyFilters/components/TagsWrapper/TagsWrapper.js"(exports) {
    "use strict";
    var React2 = require_react(), Text4 = require_Text();
    function TagsWrapper({
      children,
      hidden
    }) {
      return hidden ? /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        visuallyHidden: !0
      }, children) : /* @__PURE__ */ React2.createElement(React2.Fragment, null, children);
    }
    exports.TagsWrapper = TagsWrapper;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tag/Tag.css.js
var require_Tag_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tag/Tag.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Tag: "Polaris-Tag",
      disabled: "Polaris-Tag--disabled",
      clickable: "Polaris-Tag--clickable",
      linkable: "Polaris-Tag--linkable",
      removable: "Polaris-Tag--removable",
      Button: "Polaris-Tag__Button",
      Link: "Polaris-Tag__Link",
      segmented: "Polaris-Tag--segmented",
      Text: "Polaris-Tag__Text",
      sizeLarge: "Polaris-Tag--sizeLarge",
      overlay: "Polaris-Tag--overlay"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tag/Tag.js
var require_Tag = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tag/Tag.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), focus = require_focus(), Tag_module = require_Tag_css(), hooks = require_hooks2(), Text4 = require_Text(), Icon2 = require_Icon();
    function Tag({
      children,
      disabled = !1,
      onClick,
      onRemove,
      accessibilityLabel,
      url,
      size
    }) {
      let i18n = hooks.useI18n(), segmented = onRemove && url, className = css.classNames(Tag_module.default.Tag, disabled && Tag_module.default.disabled, onClick && Tag_module.default.clickable, onRemove && Tag_module.default.removable, url && !disabled && Tag_module.default.linkable, segmented && Tag_module.default.segmented, size && Tag_module.default[css.variationName("size", size)]), tagTitle = accessibilityLabel;
      tagTitle || (tagTitle = typeof children == "string" ? children : void 0);
      let tagText = /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "bodySm",
        truncate: !0
      }, /* @__PURE__ */ React2.createElement("span", {
        title: tagTitle,
        className: Tag_module.default.Text
      }, children));
      if (onClick)
        return /* @__PURE__ */ React2.createElement("button", {
          type: "button",
          disabled,
          className,
          onClick
        }, tagText);
      let ariaLabel = i18n.translate("Polaris.Tag.ariaLabel", {
        children: tagTitle || ""
      }), removeButton = onRemove ? /* @__PURE__ */ React2.createElement("button", {
        type: "button",
        "aria-label": ariaLabel,
        className: css.classNames(Tag_module.default.Button, segmented && Tag_module.default.segmented),
        onClick: onRemove,
        onMouseUp: focus.handleMouseUpByBlurring,
        disabled
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.XSmallIcon
      })) : null, tagContent = url && !disabled ? /* @__PURE__ */ React2.createElement("a", {
        className: css.classNames(Tag_module.default.Link, segmented && Tag_module.default.segmented),
        href: url
      }, tagText) : tagText;
      return /* @__PURE__ */ React2.createElement("span", {
        className,
        "aria-disabled": disabled
      }, tagContent, size === "large" && /* @__PURE__ */ React2.createElement("span", {
        className: Tag_module.default.overlay
      }), removeButton);
    }
    exports.Tag = Tag;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Sheet/Sheet.css.js
var require_Sheet_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Sheet/Sheet.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Sheet: "Polaris-Sheet",
      Container: "Polaris-Sheet__Container",
      Bottom: "Polaris-Sheet__Bottom",
      enterBottom: "Polaris-Sheet--enterBottom",
      enterBottomActive: "Polaris-Sheet--enterBottomActive",
      exitBottom: "Polaris-Sheet--exitBottom",
      exitBottomActive: "Polaris-Sheet--exitBottomActive",
      Right: "Polaris-Sheet__Right",
      enterRight: "Polaris-Sheet--enterRight",
      enterRightActive: "Polaris-Sheet--enterRightActive",
      exitRight: "Polaris-Sheet--exitRight",
      exitRightActive: "Polaris-Sheet--exitRightActive"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Sheet/Sheet.js
var require_Sheet = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Sheet/Sheet.js"(exports) {
    "use strict";
    var React2 = require_react(), reactTransitionGroup = require("react-transition-group"), focus = require_focus(), css = require_css(), types = require_types(), shared = require_shared(), useTheme = require_use_theme(), Sheet_module = require_Sheet_css(), hooks = require_hooks11(), Portal = require_Portal(), TrapFocus = require_TrapFocus(), KeypressListener = require_KeypressListener(), Backdrop = require_Backdrop(), BOTTOM_CLASS_NAMES = {
      enter: css.classNames(Sheet_module.default.Bottom, Sheet_module.default.enterBottom),
      enterActive: css.classNames(Sheet_module.default.Bottom, Sheet_module.default.enterBottomActive),
      exit: css.classNames(Sheet_module.default.Bottom, Sheet_module.default.exitBottom),
      exitActive: css.classNames(Sheet_module.default.Bottom, Sheet_module.default.exitBottomActive)
    }, RIGHT_CLASS_NAMES = {
      enter: css.classNames(Sheet_module.default.Right, Sheet_module.default.enterRight),
      enterActive: css.classNames(Sheet_module.default.Right, Sheet_module.default.enterRightActive),
      exit: css.classNames(Sheet_module.default.Right, Sheet_module.default.exitRight),
      exitActive: css.classNames(Sheet_module.default.Right, Sheet_module.default.exitRightActive)
    };
    function Sheet({
      children,
      open,
      onClose,
      onEntered,
      onExit,
      accessibilityLabel,
      activator
    }) {
      let theme = useTheme.useTheme(), {
        isNavigationCollapsed
      } = hooks.useMediaQuery(), container = React2.useRef(null), activatorRef = React2.useRef(null), handleClose = React2.useCallback(() => {
        onClose();
        let activatorElement = activator && isRef(activator) ? activator && activator.current : activatorRef.current;
        activatorElement && requestAnimationFrame(() => focus.focusFirstFocusableNode(activatorElement));
      }, [activator, onClose]);
      React2.useEffect(() => {
      }, []);
      let activatorMarkup = activator && !isRef(activator) ? /* @__PURE__ */ React2.createElement("div", {
        ref: activatorRef
      }, activator) : null;
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, activatorMarkup, /* @__PURE__ */ React2.createElement(Portal.Portal, {
        idPrefix: "sheet"
      }, /* @__PURE__ */ React2.createElement(reactTransitionGroup.CSSTransition, {
        nodeRef: container,
        classNames: isNavigationCollapsed ? BOTTOM_CLASS_NAMES : RIGHT_CLASS_NAMES,
        timeout: parseInt(theme.motion["motion-duration-300"], 10),
        in: open,
        mountOnEnter: !0,
        unmountOnExit: !0,
        onEntered,
        onExit
      }, /* @__PURE__ */ React2.createElement("div", Object.assign({
        className: Sheet_module.default.Container
      }, shared.layer.props, shared.overlay.props, {
        ref: container
      }), /* @__PURE__ */ React2.createElement(TrapFocus.TrapFocus, {
        trapping: open
      }, /* @__PURE__ */ React2.createElement("div", {
        role: "dialog",
        "aria-modal": !0,
        tabIndex: -1,
        className: Sheet_module.default.Sheet,
        "aria-label": accessibilityLabel
      }, children)))), /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
        keyCode: types.Key.Escape,
        handler: handleClose
      }), open && /* @__PURE__ */ React2.createElement(Backdrop.Backdrop, {
        transparent: !0,
        onClick: handleClose
      })));
    }
    function isRef(ref) {
      return Object.prototype.hasOwnProperty.call(ref, "current");
    }
    exports.Sheet = Sheet;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyFilters/LegacyFilters.js
var require_LegacyFilters = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyFilters/LegacyFilters.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), focus = require_focus(), withinFilterContext = require_within_filter_context(), types = require_types(), LegacyFilters_module = require_LegacyFilters_css(), context = require_context19(), Collapsible2 = require_Collapsible(), ConnectedFilterControl = require_ConnectedFilterControl(), TagsWrapper = require_TagsWrapper(), Tag = require_Tag(), Sheet = require_Sheet(), hooks = require_hooks2(), hooks$1 = require_hooks11(), ScrollLock = require_ScrollLock(), Badge4 = require_Badge(), Text4 = require_Text(), Icon2 = require_Icon(), Focus = require_Focus(), Button4 = require_Button(), TextField2 = require_TextField(), Scrollable = require_Scrollable(), KeypressListener = require_KeypressListener(), LegacyStack = require_LegacyStack(), Suffix;
    (function(Suffix2) {
      Suffix2.Filter = "Filter", Suffix2.Shortcut = "Shortcut";
    })(Suffix || (Suffix = {}));
    var LegacyFiltersInner = class extends React2.Component {
      constructor(...args) {
        super(...args), this.state = {
          open: !1,
          readyForFocus: !1
        }, this.moreFiltersButtonContainer = /* @__PURE__ */ React2.createRef(), this.moreFiltersDoneButtonContainer = /* @__PURE__ */ React2.createRef(), this.focusNode = /* @__PURE__ */ React2.createRef(), this.closeFilters = () => {
          this.setState({
            open: !1
          }, () => {
            this.moreFiltersButtonContainer.current && focus.focusFirstFocusableNode(this.moreFiltersButtonContainer.current, !1);
          });
        }, this.toggleFilters = () => {
          this.state.open === !0 ? this.closeFilters() : this.openFilters();
        }, this.setReadyForFocus = (newState) => () => {
          this.setState({
            readyForFocus: newState
          });
        }, this.handleClearAll = () => {
          this.props.onClearAll(), this.moreFiltersDoneButtonContainer.current && focus.focusFirstFocusableNode(this.moreFiltersDoneButtonContainer.current, !1);
        };
      }
      render() {
        let {
          filters,
          queryValue,
          onQueryBlur,
          onQueryChange,
          onQueryFocus,
          focused,
          onClearAll,
          appliedFilters,
          onQueryClear,
          queryPlaceholder,
          children,
          disabled = !1,
          helpText,
          hideTags,
          hideQueryField,
          disableQueryField = !1,
          i18n,
          mediaQuery: {
            isNavigationCollapsed
          }
        } = this.props, {
          resourceName
        } = this.context, {
          open,
          readyForFocus
        } = this.state, backdropMarkup = open ? /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(ScrollLock.ScrollLock, null), /* @__PURE__ */ React2.createElement("div", {
          className: LegacyFilters_module.default.Backdrop,
          onClick: this.closeFilters
        })) : null, filtersContentMarkup = filters.map((filter, index) => {
          let filterIsOpen = this.state[`${filter.key}${Suffix.Filter}`] === !0, icon = filterIsOpen ? polarisIcons.ChevronUpIcon : polarisIcons.ChevronDownIcon, className = css.classNames(LegacyFilters_module.default.FilterTriggerContainer, filterIsOpen && LegacyFilters_module.default.open, index === 0 && LegacyFilters_module.default.first, filters.length !== 1 && index === filters.length - 1 && LegacyFilters_module.default.last), appliedFilterContent = this.getAppliedFilterContent(filter.key), appliedFilterBadgeMarkup = appliedFilterContent ? /* @__PURE__ */ React2.createElement("div", {
            className: LegacyFilters_module.default.AppliedFilterBadgeContainer
          }, /* @__PURE__ */ React2.createElement(Badge4.Badge, {
            tone: "new"
          }, appliedFilterContent)) : null, collapsibleID = `${filter.key}Collapsible`, buttonClassName = css.classNames(LegacyFilters_module.default.FilterTrigger);
          return /* @__PURE__ */ React2.createElement("div", {
            key: filter.key,
            className
          }, /* @__PURE__ */ React2.createElement("button", {
            onClick: () => this.toggleFilter(filter.key),
            className: buttonClassName,
            id: `${filter.key}ToggleButton`,
            type: "button",
            "aria-controls": collapsibleID,
            "aria-expanded": filterIsOpen
          }, /* @__PURE__ */ React2.createElement("div", {
            className: LegacyFilters_module.default.FilterTriggerLabelContainer
          }, /* @__PURE__ */ React2.createElement("h3", {
            className: LegacyFilters_module.default.FilterTriggerTitle
          }, /* @__PURE__ */ React2.createElement(Text4.Text, {
            as: "span",
            tone: this.props.disabled || filter.disabled ? "subdued" : void 0
          }, filter.label)), /* @__PURE__ */ React2.createElement("span", {
            className: LegacyFilters_module.default.FilterTriggerIcon
          }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
            source: icon,
            tone: "base"
          }))), appliedFilterBadgeMarkup), /* @__PURE__ */ React2.createElement(Collapsible2.Collapsible, {
            id: collapsibleID,
            open: filterIsOpen,
            onAnimationEnd: this.setReadyForFocus(!0)
          }, /* @__PURE__ */ React2.createElement("div", {
            className: LegacyFilters_module.default.FilterNodeContainer
          }, /* @__PURE__ */ React2.createElement(Focus.Focus, {
            disabled: !filterIsOpen || !readyForFocus || !open,
            root: this.focusNode
          }, this.generateFilterMarkup(filter)))));
        }), appliedFiltersCount = appliedFilters ? appliedFilters.length : 0, moreFiltersLabel = hideTags && appliedFiltersCount > 0 ? i18n.translate("Polaris.Filters.moreFiltersWithCount", {
          count: appliedFiltersCount
        }) : i18n.translate("Polaris.Filters.moreFilters"), rightActionMarkup = filters.length ? /* @__PURE__ */ React2.createElement("div", {
          ref: this.moreFiltersButtonContainer
        }, /* @__PURE__ */ React2.createElement(Button4.Button, {
          onClick: this.toggleFilters,
          disabled,
          size: "large"
        }, moreFiltersLabel)) : null, filterResourceName = resourceName || {
          singular: i18n.translate("Polaris.ResourceList.defaultItemSingular"),
          plural: i18n.translate("Polaris.ResourceList.defaultItemPlural")
        }, transformedFilters = this.transformFilters(filters), filtersControlMarkup = /* @__PURE__ */ React2.createElement(ConnectedFilterControl.ConnectedFilterControl, {
          rightPopoverableActions: transformedFilters,
          rightAction: rightActionMarkup,
          auxiliary: children,
          disabled,
          forceShowMorefiltersButton: filters.length > transformedFilters.length,
          queryFieldHidden: hideQueryField
        }, hideQueryField ? null : /* @__PURE__ */ React2.createElement(TextField2.TextField, {
          placeholder: queryPlaceholder || i18n.translate("Polaris.Filters.filter", {
            resourceName: filterResourceName.plural
          }),
          onChange: onQueryChange,
          onBlur: onQueryBlur,
          onFocus: onQueryFocus,
          value: queryValue,
          focused,
          label: queryPlaceholder || i18n.translate("Polaris.Filters.filter", {
            resourceName: filterResourceName.plural
          }),
          labelHidden: !0,
          prefix: /* @__PURE__ */ React2.createElement("span", {
            className: LegacyFilters_module.default.SearchIcon
          }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
            source: polarisIcons.SearchIcon
          })),
          clearButton: !0,
          onClearButtonClick: onQueryClear,
          disabled: disabled || disableQueryField,
          autoComplete: "off"
        })), filtersContainerHeaderClassname = css.classNames(LegacyFilters_module.default.LegacyFiltersContainerHeader), filtersDesktopHeaderMarkup = /* @__PURE__ */ React2.createElement("div", {
          className: filtersContainerHeaderClassname
        }, /* @__PURE__ */ React2.createElement(Text4.Text, {
          variant: "headingLg",
          as: "h3"
        }, moreFiltersLabel), /* @__PURE__ */ React2.createElement(Button4.Button, {
          icon: polarisIcons.XSmallIcon,
          variant: "plain",
          accessibilityLabel: i18n.translate("Polaris.Filters.cancel"),
          onClick: this.closeFilters
        })), filtersMobileHeaderMarkup = /* @__PURE__ */ React2.createElement("div", {
          className: filtersContainerHeaderClassname
        }, /* @__PURE__ */ React2.createElement(Button4.Button, {
          icon: polarisIcons.XSmallIcon,
          variant: "plain",
          accessibilityLabel: i18n.translate("Polaris.Filters.cancel"),
          onClick: this.closeFilters
        }), /* @__PURE__ */ React2.createElement(Text4.Text, {
          variant: "headingLg",
          as: "h3"
        }, moreFiltersLabel), /* @__PURE__ */ React2.createElement(Button4.Button, {
          onClick: this.closeFilters,
          variant: "primary"
        }, i18n.translate("Polaris.Filters.done"))), filtersDesktopFooterClassname = css.classNames(LegacyFilters_module.default.LegacyFiltersContainerFooter), filtersDesktopFooterMarkup = /* @__PURE__ */ React2.createElement("div", {
          className: filtersDesktopFooterClassname
        }, /* @__PURE__ */ React2.createElement(Button4.Button, {
          onClick: this.handleClearAll,
          disabled: !this.hasAppliedFilters()
        }, i18n.translate("Polaris.Filters.clearAllFilters")), /* @__PURE__ */ React2.createElement("div", {
          ref: this.moreFiltersDoneButtonContainer
        }, /* @__PURE__ */ React2.createElement(Button4.Button, {
          onClick: this.closeFilters,
          variant: "primary"
        }, i18n.translate("Polaris.Filters.done")))), filtersMobileFooterMarkup = /* @__PURE__ */ React2.createElement("div", {
          className: LegacyFilters_module.default.LegacyFiltersMobileContainerFooter
        }, this.hasAppliedFilters() ? /* @__PURE__ */ React2.createElement(Button4.Button, {
          onClick: onClearAll,
          fullWidth: !0
        }, i18n.translate("Polaris.Filters.clearAllFilters")) : /* @__PURE__ */ React2.createElement("div", {
          className: LegacyFilters_module.default.EmptyFooterState
        }, /* @__PURE__ */ React2.createElement(Text4.Text, {
          tone: "subdued",
          as: "span"
        }, /* @__PURE__ */ React2.createElement("p", null, i18n.translate("Polaris.Filters.noFiltersApplied"))))), shouldHideTagsContainer = !appliedFilters || appliedFilters.length < 1, tagsMarkup = hideTags ? null : /* @__PURE__ */ React2.createElement(TagsWrapper.TagsWrapper, {
          hidden: shouldHideTagsContainer
        }, /* @__PURE__ */ React2.createElement("div", {
          className: LegacyFilters_module.default.TagsContainer,
          "aria-live": "polite"
        }, (appliedFilters || []).map((filter) => /* @__PURE__ */ React2.createElement(Tag.Tag, {
          key: filter.key,
          onRemove: () => {
            filter.onRemove(filter.key);
          },
          disabled
        }, filter.label)))), filtersMobileContainerContentClassName = css.classNames(LegacyFilters_module.default.LegacyFiltersMobileContainerContent), filtersDesktopContainerContentClassName = css.classNames(LegacyFilters_module.default.LegacyFiltersDesktopContainerContent), filtersContainerMarkup = isNavigationCollapsed ? /* @__PURE__ */ React2.createElement(Sheet.Sheet, {
          accessibilityLabel: moreFiltersLabel,
          open,
          onClose: this.closeFilters,
          onEntered: this.setReadyForFocus(!0),
          onExit: this.setReadyForFocus(!1)
        }, filtersMobileHeaderMarkup, /* @__PURE__ */ React2.createElement(Scrollable.Scrollable, {
          className: filtersMobileContainerContentClassName,
          shadow: !0
        }, filtersContentMarkup, filtersMobileFooterMarkup)) : /* @__PURE__ */ React2.createElement(Sheet.Sheet, {
          accessibilityLabel: moreFiltersLabel,
          open,
          onClose: this.closeFilters,
          onEntered: this.setReadyForFocus(!0),
          onExit: this.setReadyForFocus(!1)
        }, /* @__PURE__ */ React2.createElement("div", {
          className: LegacyFilters_module.default.LegacyFiltersContainer
        }, filtersDesktopHeaderMarkup, /* @__PURE__ */ React2.createElement(Scrollable.Scrollable, {
          className: filtersDesktopContainerContentClassName,
          shadow: !0
        }, filtersContentMarkup), filtersDesktopFooterMarkup)), helpTextMarkup = helpText ? /* @__PURE__ */ React2.createElement("div", {
          id: "FiltersHelpText",
          className: LegacyFilters_module.default.HelpText
        }, /* @__PURE__ */ React2.createElement(Text4.Text, {
          tone: "subdued",
          as: "span"
        }, helpText)) : null;
        return /* @__PURE__ */ React2.createElement(withinFilterContext.WithinFilterContext.Provider, {
          value: !0
        }, /* @__PURE__ */ React2.createElement("div", {
          className: LegacyFilters_module.default.LegacyFilters
        }, filtersControlMarkup, filtersContainerMarkup, tagsMarkup, helpTextMarkup, backdropMarkup, /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
          keyCode: types.Key.Escape,
          handler: this.closeFilters
        })));
      }
      hasAppliedFilters() {
        let {
          appliedFilters,
          queryValue
        } = this.props, filtersApplied = Boolean(appliedFilters && appliedFilters.length > 0), queryApplied = Boolean(queryValue && queryValue !== "");
        return filtersApplied || queryApplied;
      }
      getAppliedFilterContent(key) {
        let {
          appliedFilters
        } = this.props;
        if (!appliedFilters)
          return;
        let filter = appliedFilters.find((filter2) => filter2.key === key);
        return filter?.label;
      }
      getAppliedFilterRemoveHandler(key) {
        let {
          appliedFilters
        } = this.props;
        if (!appliedFilters)
          return;
        let filter = appliedFilters.find((filter2) => filter2.key === key);
        return filter?.onRemove;
      }
      openFilters() {
        this.setState({
          open: !0
        });
      }
      toggleFilter(key) {
        this.state[`${key}${Suffix.Filter}`] === !0 ? this.setState({
          readyForFocus: !1,
          [`${key}${Suffix.Filter}`]: !1
        }) : this.setState({
          readyForFocus: !1,
          [`${key}${Suffix.Filter}`]: !0
        });
      }
      openFilterShortcut(key) {
        this.setState({
          [`${key}${Suffix.Shortcut}`]: !0
        });
      }
      closeFilterShortcut(key) {
        this.setState({
          [`${key}${Suffix.Shortcut}`]: !1
        });
      }
      toggleFilterShortcut(key) {
        this.state[`${key}${Suffix.Shortcut}`] === !0 ? this.closeFilterShortcut(key) : this.openFilterShortcut(key);
      }
      transformFilters(filters) {
        let transformedActions = [];
        return getShortcutFilters(filters).forEach((filter) => {
          let {
            key,
            label,
            disabled
          } = filter;
          transformedActions.push({
            popoverContent: this.generateFilterMarkup(filter),
            popoverOpen: Boolean(this.state[`${key}${Suffix.Shortcut}`]),
            key,
            content: label,
            disabled,
            onAction: () => this.toggleFilterShortcut(key)
          });
        }), transformedActions;
      }
      generateFilterMarkup(filter) {
        let i18n = this.props.i18n, removeCallback = this.getAppliedFilterRemoveHandler(filter.key), removeHandler = removeCallback == null ? void 0 : () => {
          removeCallback(filter.key);
        }, clearButtonMarkup = !filter.hideClearButton && /* @__PURE__ */ React2.createElement(Button4.Button, {
          variant: "plain",
          disabled: removeHandler == null,
          onClick: removeHandler,
          accessibilityLabel: i18n.translate("Polaris.Filters.clearLabel", {
            filterName: filter.label
          })
        }, i18n.translate("Polaris.Filters.clear"));
        return /* @__PURE__ */ React2.createElement("div", {
          ref: this.focusNode
        }, /* @__PURE__ */ React2.createElement(LegacyStack.LegacyStack, {
          vertical: !0,
          spacing: "tight"
        }, filter.filter, clearButtonMarkup));
      }
    };
    LegacyFiltersInner.contextType = context.ResourceListContext;
    function getShortcutFilters(filters) {
      return filters.filter((filter) => filter.shortcut === !0);
    }
    function LegacyFilters(props) {
      let i18n = hooks.useI18n(), mediaQuery = hooks$1.useMediaQuery();
      return /* @__PURE__ */ React2.createElement(LegacyFiltersInner, Object.assign({}, props, {
        i18n,
        mediaQuery
      }));
    }
    exports.LegacyFilters = LegacyFilters;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/utilities.js
var require_utilities11 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/utilities.js"(exports) {
    "use strict";
    function getVisibleAndHiddenTabIndices(tabs, selected, disclosureWidth, tabWidths, containerWidth) {
      let sumTabWidths = tabWidths.reduce((sum, width) => sum + width, 0), arrayOfTabIndices = tabs.map((_, index) => index), visibleTabs = [], hiddenTabs = [];
      if (containerWidth > sumTabWidths)
        visibleTabs.push(...arrayOfTabIndices);
      else {
        visibleTabs.push(selected);
        let tabListWidth = tabWidths[selected];
        arrayOfTabIndices.forEach((currentTabIndex) => {
          if (currentTabIndex !== selected) {
            let currentTabWidth = tabWidths[currentTabIndex];
            if (tabListWidth + currentTabWidth >= containerWidth - disclosureWidth) {
              hiddenTabs.push(currentTabIndex);
              return;
            }
            visibleTabs.push(currentTabIndex), tabListWidth += currentTabWidth;
          }
        });
      }
      return {
        visibleTabs,
        hiddenTabs
      };
    }
    exports.getVisibleAndHiddenTabIndices = getVisibleAndHiddenTabIndices;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/LegacyTabs.css.js
var require_LegacyTabs_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/LegacyTabs.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      LegacyTabs: "Polaris-LegacyTabs",
      fitted: "Polaris-LegacyTabs--fitted",
      TabContainer: "Polaris-LegacyTabs__TabContainer",
      Title: "Polaris-LegacyTabs__Title",
      fillSpace: "Polaris-LegacyTabs--fillSpace",
      Tab: "Polaris-LegacyTabs__Tab",
      "Tab-selected": "Polaris-LegacyTabs__Tab--selected",
      titleWithIcon: "Polaris-LegacyTabs--titleWithIcon",
      Panel: "Polaris-LegacyTabs__Panel",
      "Panel-hidden": "Polaris-LegacyTabs__Panel--hidden",
      Item: "Polaris-LegacyTabs__Item",
      DisclosureTab: "Polaris-LegacyTabs__DisclosureTab",
      "DisclosureTab-visible": "Polaris-LegacyTabs__DisclosureTab--visible",
      DisclosureActivator: "Polaris-LegacyTabs__DisclosureActivator",
      TabMeasurer: "Polaris-LegacyTabs__TabMeasurer"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/components/Panel/Panel.js
var require_Panel2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/components/Panel/Panel.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), LegacyTabs_module = require_LegacyTabs_css();
    function Panel({
      hidden,
      id,
      tabID,
      children
    }) {
      let className = css.classNames(LegacyTabs_module.default.Panel, hidden && LegacyTabs_module.default["Panel-hidden"]);
      return /* @__PURE__ */ React2.createElement("div", {
        className,
        id,
        role: "tabpanel",
        "aria-labelledby": tabID,
        tabIndex: -1
      }, children);
    }
    exports.Panel = Panel;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/components/Tab/Tab.js
var require_Tab2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/components/Tab/Tab.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), focus = require_focus(), LegacyTabs_module = require_LegacyTabs_css(), UnstyledLink = require_UnstyledLink(), Text4 = require_Text();
    function Tab({
      id,
      focused,
      siblingTabHasFocus,
      children,
      onClick,
      selected,
      url,
      panelID,
      measuring,
      accessibilityLabel
    }) {
      let wasSelected = React2.useRef(selected), panelFocused = React2.useRef(!1), node = React2.useRef(null);
      React2.useEffect(() => {
        if (measuring)
          return;
        (focused || document.activeElement && document.activeElement.id === id) && selected && panelID != null && !panelFocused.current && (focusPanelID(panelID), panelFocused.current = !0), selected && !wasSelected.current && panelID != null ? focusPanelID(panelID) : focused && node.current != null && focus.focusFirstFocusableNode(node.current), wasSelected.current = selected;
      }, [focused, id, measuring, panelID, selected]);
      let handleClick = onClick && onClick.bind(null, id), className = css.classNames(LegacyTabs_module.default.Tab, selected && LegacyTabs_module.default["Tab-selected"]), tabIndex;
      selected && !siblingTabHasFocus && !measuring || focused && !measuring ? tabIndex = 0 : tabIndex = -1;
      let tabContainerClassNames = css.classNames(LegacyTabs_module.default.TabContainer, selected && LegacyTabs_module.default.Underline), markup = url ? /* @__PURE__ */ React2.createElement(UnstyledLink.UnstyledLink, {
        id,
        url,
        role: "tab",
        tabIndex,
        onClick: handleClick,
        className,
        "aria-selected": selected,
        "aria-controls": panelID,
        "aria-label": accessibilityLabel,
        onMouseUp: focus.handleMouseUpByBlurring
      }, /* @__PURE__ */ React2.createElement("span", {
        className: LegacyTabs_module.default.Title
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "bodyMd",
        fontWeight: "semibold"
      }, children))) : /* @__PURE__ */ React2.createElement("button", {
        id,
        role: "tab",
        type: "button",
        tabIndex,
        className,
        onClick: handleClick,
        "aria-selected": selected,
        "aria-controls": panelID,
        "aria-label": accessibilityLabel,
        onMouseUp: focus.handleMouseUpByBlurring
      }, /* @__PURE__ */ React2.createElement("span", {
        className: LegacyTabs_module.default.Title
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "bodyMd",
        fontWeight: "semibold"
      }, children)));
      return /* @__PURE__ */ React2.createElement("li", {
        className: tabContainerClassNames,
        ref: node,
        role: "presentation"
      }, markup);
    }
    function focusPanelID(panelID) {
      let panel = document.getElementById(panelID);
      panel && panel.focus({
        preventScroll: !0
      });
    }
    exports.Tab = Tab;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/components/TabMeasurer/TabMeasurer.js
var require_TabMeasurer2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/components/TabMeasurer/TabMeasurer.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), useComponentDidMount = require_use_component_did_mount(), LegacyTabs_module = require_LegacyTabs_css(), Tab = require_Tab2(), EventListener = require_EventListener(), TabMeasurer = /* @__PURE__ */ React2.memo(function({
      selected,
      tabs,
      activator,
      tabToFocus,
      siblingTabHasFocus,
      handleMeasurement: handleMeasurementProp
    }) {
      let containerNode = React2.useRef(null), animationFrame = React2.useRef(null), handleMeasurement = React2.useCallback(() => {
        animationFrame.current && cancelAnimationFrame(animationFrame.current), animationFrame.current = requestAnimationFrame(() => {
          if (!containerNode.current)
            return;
          let containerWidth = containerNode.current.offsetWidth, hiddenTabNodes = containerNode.current.children, hiddenTabWidths = Array.from(hiddenTabNodes).map((node) => Math.ceil(node.getBoundingClientRect().width)), disclosureWidth = hiddenTabWidths.pop() || 0;
          handleMeasurementProp({
            containerWidth,
            disclosureWidth,
            hiddenTabWidths
          });
        });
      }, [handleMeasurementProp]);
      React2.useEffect(() => {
        handleMeasurement();
      }, [handleMeasurement, tabs]), useComponentDidMount.useComponentDidMount(() => {
      });
      let tabsMarkup = tabs.map((tab, index) => /* @__PURE__ */ React2.createElement(Tab.Tab, {
        measuring: !0,
        key: `${index}${tab.id}Hidden`,
        id: `${tab.id}Measurer`,
        siblingTabHasFocus,
        focused: index === tabToFocus,
        selected: index === selected,
        onClick: noop,
        url: tab.url
      }, tab.content)), classname = css.classNames(LegacyTabs_module.default.LegacyTabs, LegacyTabs_module.default.TabMeasurer);
      return /* @__PURE__ */ React2.createElement("div", {
        className: classname,
        ref: containerNode
      }, /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
        event: "resize",
        handler: handleMeasurement
      }), tabsMarkup, activator);
    });
    function noop() {
    }
    exports.TabMeasurer = TabMeasurer;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/components/Item/Item.js
var require_Item8 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/components/Item/Item.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), LegacyTabs_module = require_LegacyTabs_css(), UnstyledLink = require_UnstyledLink(), context = require_context(), Item = class extends React2.PureComponent {
      constructor(...args) {
        super(...args), this.focusedNode = null, this.setFocusedNode = (node) => {
          this.focusedNode = node;
        };
      }
      componentDidMount() {
        let {
          focusedNode
        } = this, {
          focused
        } = this.props;
        focusedNode && focusedNode instanceof HTMLElement && focused && focusedNode.focus();
      }
      componentDidUpdate() {
        let {
          focusedNode
        } = this, {
          focused
        } = this.props;
        focusedNode && focusedNode instanceof HTMLElement && focused && focusedNode.focus();
      }
      render() {
        let {
          id,
          panelID,
          children,
          url,
          accessibilityLabel,
          onClick = noop
        } = this.props, classname = css.classNames(LegacyTabs_module.default.Item), sharedProps = {
          id,
          ref: this.setFocusedNode,
          onClick,
          className: classname,
          "aria-controls": panelID,
          "aria-selected": !1,
          "aria-label": accessibilityLabel
        }, markup = url ? /* @__PURE__ */ React2.createElement(UnstyledLink.UnstyledLink, Object.assign({}, sharedProps, {
          url
        }), children) : /* @__PURE__ */ React2.createElement("button", Object.assign({}, sharedProps, {
          type: "button"
        }), children);
        return /* @__PURE__ */ React2.createElement("li", null, markup);
      }
    };
    Item.contextType = context.FeaturesContext;
    function noop() {
    }
    exports.Item = Item;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/components/List/List.js
var require_List2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/components/List/List.js"(exports) {
    "use strict";
    var React2 = require_react(), Item = require_Item8(), Box4 = require_Box();
    function List({
      focusIndex,
      disclosureTabs,
      onClick = noop,
      onKeyPress = noop
    }) {
      let tabs = disclosureTabs.map(({
        id,
        content,
        ...tabProps
      }, index) => /* @__PURE__ */ React2.createElement(Item.Item, Object.assign({
        key: id
      }, tabProps, {
        id,
        focused: index === focusIndex,
        onClick: onClick.bind(null, id)
      }), content));
      return /* @__PURE__ */ React2.createElement("div", {
        onKeyDown: handleKeyDown,
        onKeyUp: onKeyPress
      }, /* @__PURE__ */ React2.createElement(Box4.Box, {
        as: "ul",
        padding: "200"
      }, tabs));
    }
    function noop() {
    }
    function handleKeyDown(event) {
      let {
        key
      } = event;
      (key === "ArrowLeft" || key === "ArrowRight") && (event.preventDefault(), event.stopPropagation());
    }
    exports.List = List;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/LegacyTabs.js
var require_LegacyTabs = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/LegacyTabs.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), utilities = require_utilities11(), LegacyTabs_module = require_LegacyTabs_css(), Panel = require_Panel2(), TabMeasurer = require_TabMeasurer2(), List = require_List2(), hooks = require_hooks2(), Tab = require_Tab2(), Icon2 = require_Icon(), Box4 = require_Box(), Popover = require_Popover(), TabsInner = class extends React2.PureComponent {
      constructor(...args) {
        super(...args), this.state = {
          disclosureWidth: 0,
          containerWidth: 1 / 0,
          tabWidths: [],
          visibleTabs: [],
          hiddenTabs: [],
          showDisclosure: !1,
          tabToFocus: -1
        }, this.handleKeyPress = (event) => {
          let {
            tabToFocus,
            visibleTabs,
            hiddenTabs,
            showDisclosure
          } = this.state, key = event.key, tabsArrayInOrder = showDisclosure ? visibleTabs.concat(hiddenTabs) : [...visibleTabs], newFocus = tabsArrayInOrder.indexOf(tabToFocus);
          key === "ArrowRight" && (newFocus += 1, newFocus === tabsArrayInOrder.length && (newFocus = 0)), key === "ArrowLeft" && (newFocus === -1 || newFocus === 0 ? newFocus = tabsArrayInOrder.length - 1 : newFocus -= 1), this.setState({
            tabToFocus: tabsArrayInOrder[newFocus]
          });
        }, this.renderTabMarkup = (tab, index) => {
          let {
            selected,
            children
          } = this.props, {
            tabToFocus
          } = this.state, tabPanelID = tab.panelID || `${tab.id}-panel`;
          return /* @__PURE__ */ React2.createElement(Tab.Tab, {
            key: `${index}-${tab.id}`,
            id: tab.id,
            siblingTabHasFocus: tabToFocus > -1,
            focused: index === tabToFocus,
            selected: index === selected,
            onClick: this.handleTabClick,
            panelID: children ? tabPanelID : void 0,
            accessibilityLabel: tab.accessibilityLabel,
            url: tab.url
          }, tab.content);
        }, this.handleFocus = (event) => {
          let {
            selected,
            tabs
          } = this.props, target = event.target;
          if (target.classList.contains(LegacyTabs_module.default.Tab) || target.classList.contains(LegacyTabs_module.default.Item)) {
            let tabToFocus = -1;
            tabs.every((tab, index) => tab.id === target.id ? (tabToFocus = index, !1) : !0), this.setState({
              tabToFocus
            });
            return;
          }
          if (target.classList.contains(LegacyTabs_module.default.DisclosureActivator))
            return;
          if (!event.relatedTarget) {
            this.setState({
              tabToFocus: selected
            });
            return;
          }
          let relatedTarget = event.relatedTarget;
          relatedTarget instanceof HTMLElement && !relatedTarget.classList.contains(LegacyTabs_module.default.Tab) && !relatedTarget.classList.contains(LegacyTabs_module.default.Item) && !relatedTarget.classList.contains(LegacyTabs_module.default.DisclosureActivator) && this.setState({
            tabToFocus: selected
          });
        }, this.handleBlur = (event) => {
          if (event.relatedTarget == null) {
            this.setState({
              tabToFocus: -1
            });
            return;
          }
          let target = event.relatedTarget;
          target instanceof HTMLElement && !target.classList.contains(LegacyTabs_module.default.Tab) && !target.classList.contains(LegacyTabs_module.default.Item) && this.setState({
            tabToFocus: -1
          });
        }, this.handleDisclosureActivatorClick = () => {
          this.setState(({
            showDisclosure
          }) => ({
            showDisclosure: !showDisclosure
          }));
        }, this.handleClose = () => {
          this.setState({
            showDisclosure: !1
          });
        }, this.handleMeasurement = (measurements) => {
          let {
            tabs,
            selected
          } = this.props, {
            tabToFocus
          } = this.state, {
            hiddenTabWidths: tabWidths,
            containerWidth,
            disclosureWidth
          } = measurements, {
            visibleTabs,
            hiddenTabs
          } = utilities.getVisibleAndHiddenTabIndices(tabs, selected, disclosureWidth, tabWidths, containerWidth);
          this.setState({
            tabToFocus: tabToFocus === -1 ? -1 : selected,
            visibleTabs,
            hiddenTabs,
            disclosureWidth,
            containerWidth,
            tabWidths
          });
        }, this.handleTabClick = (id) => {
          let {
            tabs,
            onSelect = noop
          } = this.props, tab = tabs.find((aTab) => aTab.id === id);
          if (tab == null)
            return;
          let selectedIndex = tabs.indexOf(tab);
          onSelect(selectedIndex);
        };
      }
      static getDerivedStateFromProps(nextProps, prevState) {
        let {
          disclosureWidth,
          tabWidths,
          containerWidth
        } = prevState, {
          visibleTabs,
          hiddenTabs
        } = utilities.getVisibleAndHiddenTabIndices(nextProps.tabs, nextProps.selected, disclosureWidth, tabWidths, containerWidth);
        return {
          visibleTabs,
          hiddenTabs,
          selected: nextProps.selected
        };
      }
      render() {
        let {
          tabs,
          selected,
          fitted,
          children,
          i18n,
          disclosureText
        } = this.props, {
          tabToFocus,
          visibleTabs,
          hiddenTabs,
          showDisclosure
        } = this.state, disclosureTabs = hiddenTabs.map((tabIndex) => tabs[tabIndex]), panelMarkup = children ? tabs.map((_tab, index) => selected === index ? /* @__PURE__ */ React2.createElement(Panel.Panel, {
          id: tabs[index].panelID || `${tabs[index].id}-panel`,
          tabID: tabs[index].id,
          key: tabs[index].id
        }, children) : /* @__PURE__ */ React2.createElement(Panel.Panel, {
          id: tabs[index].panelID || `${tabs[index].id}-panel`,
          tabID: tabs[index].id,
          key: tabs[index].id,
          hidden: !0
        })) : null, tabsMarkup = visibleTabs.sort((tabA, tabB) => tabA - tabB).map((tabIndex) => this.renderTabMarkup(tabs[tabIndex], tabIndex)), disclosureActivatorVisible = visibleTabs.length < tabs.length, hasCustomDisclosure = Boolean(disclosureText), classname = css.classNames(LegacyTabs_module.default.LegacyTabs, fitted && LegacyTabs_module.default.fitted, disclosureActivatorVisible && LegacyTabs_module.default.fillSpace), disclosureTabClassName = css.classNames(LegacyTabs_module.default.DisclosureTab, disclosureActivatorVisible && LegacyTabs_module.default["DisclosureTab-visible"]), disclosureButtonClassName = css.classNames(LegacyTabs_module.default.DisclosureActivator, hasCustomDisclosure && LegacyTabs_module.default.Tab), disclosureButtonContentWrapperClassName = css.classNames(LegacyTabs_module.default.Title, hasCustomDisclosure && LegacyTabs_module.default.titleWithIcon), disclosureButtonContent = hasCustomDisclosure ? /* @__PURE__ */ React2.createElement(React2.Fragment, null, disclosureText, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
          source: polarisIcons.ChevronDownIcon,
          tone: "subdued"
        })) : /* @__PURE__ */ React2.createElement(Icon2.Icon, {
          source: polarisIcons.MenuHorizontalIcon,
          tone: "subdued"
        }), disclosureButton = /* @__PURE__ */ React2.createElement("button", {
          type: "button",
          className: disclosureButtonClassName,
          onClick: this.handleDisclosureActivatorClick,
          "aria-label": i18n.translate("Polaris.Tabs.toggleTabsLabel")
        }, /* @__PURE__ */ React2.createElement("span", {
          className: disclosureButtonContentWrapperClassName
        }, disclosureButtonContent)), activator = disclosureText ? /* @__PURE__ */ React2.createElement("div", {
          className: LegacyTabs_module.default.TabContainer
        }, disclosureButton) : disclosureButton;
        return /* @__PURE__ */ React2.createElement("div", null, /* @__PURE__ */ React2.createElement(Box4.Box, {
          borderBlockEndWidth: "025",
          borderColor: "border-secondary",
          paddingInlineStart: "200",
          paddingInlineEnd: "200"
        }, /* @__PURE__ */ React2.createElement(TabMeasurer.TabMeasurer, {
          tabToFocus,
          activator,
          selected,
          tabs,
          siblingTabHasFocus: tabToFocus > -1,
          handleMeasurement: this.handleMeasurement
        }), /* @__PURE__ */ React2.createElement("ul", {
          role: "tablist",
          className: classname,
          onFocus: this.handleFocus,
          onBlur: this.handleBlur,
          onKeyDown: handleKeyDown,
          onKeyUp: this.handleKeyPress
        }, tabsMarkup, /* @__PURE__ */ React2.createElement("li", {
          className: disclosureTabClassName,
          role: "presentation"
        }, /* @__PURE__ */ React2.createElement(Popover.Popover, {
          preferredPosition: "below",
          activator,
          active: disclosureActivatorVisible && showDisclosure,
          onClose: this.handleClose,
          autofocusTarget: "first-node"
        }, /* @__PURE__ */ React2.createElement(List.List, {
          focusIndex: hiddenTabs.indexOf(tabToFocus),
          disclosureTabs,
          onClick: this.handleTabClick,
          onKeyPress: this.handleKeyPress
        }))))), panelMarkup);
      }
      // eslint-disable-next-line @shopify/react-no-multiple-render-methods
    };
    function noop() {
    }
    function handleKeyDown(event) {
      let {
        key
      } = event;
      (key === "ArrowLeft" || key === "ArrowRight") && (event.preventDefault(), event.stopPropagation());
    }
    function LegacyTabs(props) {
      let i18n = hooks.useI18n();
      return /* @__PURE__ */ React2.createElement(TabsInner, Object.assign({}, props, {
        i18n
      }));
    }
    exports.LegacyTabs = LegacyTabs;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Link/Link.css.js
var require_Link_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Link/Link.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Link: "Polaris-Link",
      monochrome: "Polaris-Link--monochrome",
      removeUnderline: "Polaris-Link--removeUnderline"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Link/Link.js
var require_Link = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Link/Link.js"(exports) {
    "use strict";
    var React2 = require_react(), bannerContext = require_banner_context(), css = require_css(), Link_module = require_Link_css(), UnstyledLink = require_UnstyledLink();
    function Link({
      url,
      children,
      onClick,
      external,
      target,
      id,
      monochrome,
      removeUnderline,
      accessibilityLabel,
      dataPrimaryLink
    }) {
      return /* @__PURE__ */ React2.createElement(bannerContext.BannerContext.Consumer, null, (BannerContext) => {
        let shouldBeMonochrome = monochrome || BannerContext, className = css.classNames(Link_module.default.Link, shouldBeMonochrome && Link_module.default.monochrome, removeUnderline && Link_module.default.removeUnderline);
        return url ? /* @__PURE__ */ React2.createElement(UnstyledLink.UnstyledLink, {
          onClick,
          className,
          url,
          external,
          target,
          id,
          "aria-label": accessibilityLabel,
          "data-primary-link": dataPrimaryLink
        }, children) : /* @__PURE__ */ React2.createElement("button", {
          type: "button",
          onClick,
          className,
          id,
          "aria-label": accessibilityLabel,
          "data-primary-link": dataPrimaryLink
        }, children);
      });
    }
    exports.Link = Link;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/List/List.css.js
var require_List_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/List/List.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      List: "Polaris-List",
      typeNumber: "Polaris-List--typeNumber",
      Item: "Polaris-List__Item",
      spacingLoose: "Polaris-List--spacingLoose"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/List/components/Item/Item.js
var require_Item9 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/List/components/Item/Item.js"(exports) {
    "use strict";
    var React2 = require_react(), List_module = require_List_css();
    function Item({
      children
    }) {
      return /* @__PURE__ */ React2.createElement("li", {
        className: List_module.default.Item
      }, children);
    }
    exports.Item = Item;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/List/List.js
var require_List3 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/List/List.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), List_module = require_List_css(), Item = require_Item9(), List = function({
      children,
      gap = "loose",
      type = "bullet"
    }) {
      let className = css.classNames(List_module.default.List, gap && List_module.default[css.variationName("spacing", gap)], type && List_module.default[css.variationName("type", type)]), ListElement = type === "bullet" ? "ul" : "ol";
      return /* @__PURE__ */ React2.createElement(ListElement, {
        className
      }, children);
    };
    List.Item = Item.Item;
    exports.List = List;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Loading/Loading.js
var require_Loading3 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Loading/Loading.js"(exports) {
    "use strict";
    var React2 = require_react(), hooks = require_hooks9(), Loading = /* @__PURE__ */ React2.memo(function() {
      let {
        startLoading,
        stopLoading
      } = hooks.useFrame();
      return React2.useEffect(() => (startLoading(), () => {
        stopLoading();
      }), [startLoading, stopLoading]), null;
    });
    exports.Loading = Loading;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/MediaCard/MediaCard.css.js
var require_MediaCard_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/MediaCard/MediaCard.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      MediaCard: "Polaris-MediaCard",
      portrait: "Polaris-MediaCard--portrait",
      MediaContainer: "Polaris-MediaCard__MediaContainer",
      sizeSmall: "Polaris-MediaCard--sizeSmall",
      InfoContainer: "Polaris-MediaCard__InfoContainer",
      ActionContainer: "Polaris-MediaCard__ActionContainer"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/MediaCard/MediaCard.js
var require_MediaCard = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/MediaCard/MediaCard.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), useToggle = require_use_toggle(), css = require_css(), MediaCard_module = require_MediaCard_css(), hooks = require_hooks2(), Button4 = require_Button(), InlineStack4 = require_InlineStack(), Popover = require_Popover(), ActionList = require_ActionList(), utils = require_utils(), LegacyCard = require_LegacyCard(), Box4 = require_Box(), BlockStack4 = require_BlockStack(), Text4 = require_Text(), ButtonGroup = require_ButtonGroup();
    function MediaCard({
      title,
      children,
      primaryAction,
      secondaryAction,
      description,
      popoverActions = [],
      portrait = !1,
      size = "medium",
      onDismiss
    }) {
      let i18n = hooks.useI18n(), {
        value: popoverActive,
        toggle: togglePopoverActive
      } = useToggle.useToggle(!1), headerMarkup = null;
      if (title) {
        let headerContent = typeof title == "string" ? /* @__PURE__ */ React2.createElement(Text4.Text, {
          variant: "headingSm",
          as: "h2"
        }, title) : title;
        headerMarkup = /* @__PURE__ */ React2.createElement("div", null, headerContent);
      }
      let dismissButtonMarkup = onDismiss ? /* @__PURE__ */ React2.createElement(Button4.Button, {
        icon: polarisIcons.XIcon,
        onClick: onDismiss,
        size: "slim",
        accessibilityLabel: i18n.translate("Polaris.MediaCard.dismissButton"),
        variant: "tertiary"
      }) : null, popoverActivator = /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        blockAlign: "center"
      }, /* @__PURE__ */ React2.createElement(Button4.Button, {
        icon: polarisIcons.MenuHorizontalIcon,
        onClick: togglePopoverActive,
        size: "slim",
        accessibilityLabel: i18n.translate("Polaris.MediaCard.popoverButton"),
        variant: "tertiary"
      })), popoverActionsMarkup = popoverActions.length > 0 ? /* @__PURE__ */ React2.createElement(Popover.Popover, {
        active: popoverActive,
        activator: popoverActivator,
        onClose: togglePopoverActive,
        preferredAlignment: "left",
        preferredPosition: "below"
      }, /* @__PURE__ */ React2.createElement(ActionList.ActionList, {
        items: popoverActions,
        onActionAnyItem: togglePopoverActive
      })) : null, primaryActionMarkup = primaryAction ? /* @__PURE__ */ React2.createElement("div", null, utils.buttonFrom(primaryAction)) : null, secondaryActionMarkup = secondaryAction ? /* @__PURE__ */ React2.createElement("div", null, utils.buttonFrom(secondaryAction)) : null, actionClassName = css.classNames(MediaCard_module.default.ActionContainer, portrait && MediaCard_module.default.portrait), actionMarkup = primaryActionMarkup || secondaryActionMarkup ? /* @__PURE__ */ React2.createElement("div", {
        className: actionClassName
      }, /* @__PURE__ */ React2.createElement(ButtonGroup.ButtonGroup, null, primaryActionMarkup, secondaryActionMarkup)) : null, mediaCardClassName = css.classNames(MediaCard_module.default.MediaCard, portrait && MediaCard_module.default.portrait), mediaContainerClassName = css.classNames(MediaCard_module.default.MediaContainer, portrait && MediaCard_module.default.portrait, size === "small" && MediaCard_module.default.sizeSmall), infoContainerClassName = css.classNames(MediaCard_module.default.InfoContainer, portrait && MediaCard_module.default.portrait, size === "small" && MediaCard_module.default.sizeSmall), popoverOrDismissMarkup = popoverActionsMarkup || dismissButtonMarkup ? /* @__PURE__ */ React2.createElement(Box4.Box, {
        position: "absolute",
        insetInlineEnd: "500",
        zIndex: "var(--p-z-index-2)"
      }, /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        gap: "100",
        wrap: !1
      }, popoverActionsMarkup, dismissButtonMarkup)) : null;
      return /* @__PURE__ */ React2.createElement(LegacyCard.LegacyCard, null, /* @__PURE__ */ React2.createElement("div", {
        className: mediaCardClassName
      }, /* @__PURE__ */ React2.createElement("div", {
        className: mediaContainerClassName
      }, children), /* @__PURE__ */ React2.createElement("div", {
        className: infoContainerClassName
      }, /* @__PURE__ */ React2.createElement(Box4.Box, {
        padding: "500"
      }, /* @__PURE__ */ React2.createElement(BlockStack4.BlockStack, {
        gap: "200"
      }, /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        wrap: !1,
        align: "space-between",
        gap: "200"
      }, headerMarkup, popoverOrDismissMarkup), /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "p",
        variant: "bodySm"
      }, description), actionMarkup)))));
    }
    exports.MediaCard = MediaCard;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Navigation/context.js
var require_context20 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Navigation/context.js"(exports) {
    "use strict";
    var React2 = require_react(), NavigationContext = /* @__PURE__ */ React2.createContext({
      location: ""
    });
    exports.NavigationContext = NavigationContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Navigation/Navigation.css.js
var require_Navigation_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Navigation/Navigation.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Navigation: "Polaris-Navigation",
      UserMenu: "Polaris-Navigation__UserMenu",
      ContextControl: "Polaris-Navigation__ContextControl",
      PrimaryNavigation: "Polaris-Navigation__PrimaryNavigation",
      LogoContainer: "Polaris-Navigation__LogoContainer",
      hasLogoSuffix: "Polaris-Navigation--hasLogoSuffix",
      Logo: "Polaris-Navigation__Logo",
      LogoLink: "Polaris-Navigation__LogoLink",
      Item: "Polaris-Navigation__Item",
      "Icon-resized": "Polaris-Navigation__Icon--resized",
      Badge: "Polaris-Navigation__Badge",
      ItemInnerWrapper: "Polaris-Navigation__ItemInnerWrapper",
      ItemWrapper: "Polaris-Navigation__ItemWrapper",
      ItemInnerDisabled: "Polaris-Navigation__ItemInnerDisabled",
      "ItemInnerWrapper-display-actions-on-hover": "Polaris-Navigation--itemInnerWrapperDisplayActionsOnHover",
      SecondaryActions: "Polaris-Navigation__SecondaryActions",
      "ItemInnerWrapper-selected": "Polaris-Navigation__ItemInnerWrapper--selected",
      Text: "Polaris-Navigation__Text",
      "ItemInnerWrapper-open": "Polaris-Navigation__ItemInnerWrapper--open",
      "Item-selected": "Polaris-Navigation__Item--selected",
      "Item-child-active": "Polaris-Navigation--itemChildActive",
      "Item-disabled": "Polaris-Navigation__Item--disabled",
      Icon: "Polaris-Navigation__Icon",
      "ListItem-hasAction": "Polaris-Navigation__ListItem--hasAction",
      subNavigationActive: "Polaris-Navigation--subNavigationActive",
      ListItem: "Polaris-Navigation__ListItem",
      RollupSection: "Polaris-Navigation__RollupSection",
      SecondaryNavigation: "Polaris-Navigation__SecondaryNavigation",
      "Text-truncated": "Polaris-Navigation__Text--truncated",
      ItemWithFloatingActions: "Polaris-Navigation__ItemWithFloatingActions",
      SecondaryAction: "Polaris-Navigation__SecondaryAction",
      List: "Polaris-Navigation__List",
      "Item-line": "Polaris-Navigation__Item--line",
      "Item-hover-line": "Polaris-Navigation--itemHoverLine",
      "Item-line-pointer": "Polaris-Navigation--itemLinePointer",
      "Item-hover-pointer": "Polaris-Navigation--itemHoverPointer",
      "SecondaryNavigation-noIcon": "Polaris-Navigation__SecondaryNavigation--noIcon",
      Section: "Polaris-Navigation__Section",
      "Section-fill": "Polaris-Navigation__Section--fill",
      "Section-withSeparator": "Polaris-Navigation__Section--withSeparator",
      SectionHeading: "Polaris-Navigation__SectionHeading",
      Action: "Polaris-Navigation__Action",
      RollupToggle: "Polaris-Navigation__RollupToggle",
      Indicator: "Polaris-Navigation__Indicator",
      SecondaryNavigationOpen: "Polaris-Navigation__SecondaryNavigationOpen",
      "snappy-grow": "Polaris-Navigation__snappy--grow"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Navigation/types.js
var require_types5 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Navigation/types.js"(exports) {
    "use strict";
    exports.MatchState = void 0;
    (function(MatchState) {
      MatchState[MatchState.MatchForced = 0] = "MatchForced", MatchState[MatchState.MatchUrl = 1] = "MatchUrl", MatchState[MatchState.MatchPaths = 2] = "MatchPaths", MatchState[MatchState.Excluded = 3] = "Excluded", MatchState[MatchState.NoMatch = 4] = "NoMatch";
    })(exports.MatchState || (exports.MatchState = {}));
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Navigation/components/Item/components/SecondaryNavigation/SecondaryNavigation.js
var require_SecondaryNavigation = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Navigation/components/Item/components/SecondaryNavigation/SecondaryNavigation.js"(exports) {
    "use strict";
    var React2 = require_react(), isEqual = require("react-fast-compare"), css = require_css(), context = require_context20(), Navigation_module = require_Navigation_css(), Collapsible2 = require_Collapsible();
    function SecondaryNavigation({
      ItemComponent,
      icon,
      longestMatch,
      subNavigationItems,
      showExpanded,
      truncateText,
      secondaryNavigationId
    }) {
      let uid = React2.useId(), {
        onNavigationDismiss
      } = React2.useContext(context.NavigationContext), [hoveredItem, setHoveredItem] = React2.useState(), matchedItemPosition = subNavigationItems.findIndex((item) => isEqual(item, longestMatch)), hoveredItemPosition = subNavigationItems.findIndex((item) => isEqual(item, hoveredItem));
      return /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Navigation_module.default.SecondaryNavigation, showExpanded && Navigation_module.default.SecondaryNavigationOpen, !icon && Navigation_module.default["SecondaryNavigation-noIcon"])
      }, /* @__PURE__ */ React2.createElement(Collapsible2.Collapsible, {
        id: secondaryNavigationId || uid,
        open: showExpanded,
        transition: !1
      }, /* @__PURE__ */ React2.createElement("ul", {
        className: Navigation_module.default.List
      }, subNavigationItems.map((item, index) => {
        let {
          label,
          ...rest
        } = item, onClick = () => {
          onNavigationDismiss?.(), item.onClick && item.onClick !== onNavigationDismiss && item.onClick();
        }, shouldShowVerticalLine = index < matchedItemPosition;
        return /* @__PURE__ */ React2.createElement(ItemComponent, Object.assign({
          key: label
        }, rest, {
          label,
          showVerticalLine: shouldShowVerticalLine,
          showVerticalHoverPointer: index === hoveredItemPosition,
          level: 1,
          onMouseEnter: item.disabled ? void 0 : () => setHoveredItem(item),
          onMouseLeave: item.disabled ? void 0 : () => setHoveredItem(void 0),
          matches: isEqual(item, longestMatch),
          onClick,
          truncateText
        }));
      }))));
    }
    exports.SecondaryNavigation = SecondaryNavigation;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Navigation/components/Item/Item.js
var require_Item10 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Navigation/components/Item/Item.js"(exports) {
    "use strict";
    var React2 = require_react(), useIsomorphicLayoutEffect = require_use_isomorphic_layout_effect(), css = require_css(), context = require_context20(), Navigation_module = require_Navigation_css(), types = require_types5(), SecondaryNavigation = require_SecondaryNavigation(), hooks = require_hooks2(), hooks$1 = require_hooks11(), Indicator = require_Indicator(), Icon2 = require_Icon(), Badge4 = require_Badge(), Text4 = require_Text(), UnstyledLink = require_UnstyledLink(), UnstyledButton = require_UnstyledButton(), Tooltip = require_Tooltip(), MAX_SECONDARY_ACTIONS = 2, TOOLTIP_HOVER_DELAY = 1e3;
    function Item({
      url,
      icon: baseIcon,
      matchedItemIcon,
      label,
      subNavigationItems = [],
      secondaryAction,
      secondaryActions,
      displayActionsOnHover,
      disabled,
      onClick,
      accessibilityLabel,
      selected: selectedOverride,
      badge,
      new: isNew,
      matches,
      exactMatch,
      matchPaths,
      excludePaths,
      external,
      onToggleExpandedState,
      expanded,
      shouldResizeIcon,
      truncateText,
      showVerticalLine,
      showVerticalHoverPointer,
      level = 0,
      onMouseEnter,
      onMouseLeave
    }) {
      let i18n = hooks.useI18n(), {
        isNavigationCollapsed
      } = hooks$1.useMediaQuery(), secondaryNavigationId = React2.useId(), {
        location,
        onNavigationDismiss
      } = React2.useContext(context.NavigationContext), navTextRef = React2.useRef(null), [isTruncated, setIsTruncated] = React2.useState(!1);
      React2.useEffect(() => {
        !isNavigationCollapsed && expanded && onToggleExpandedState?.();
      }, [expanded, isNavigationCollapsed, onToggleExpandedState]), useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
        let navTextNode = navTextRef.current;
        truncateText && navTextNode && setIsTruncated(navTextNode.scrollHeight > navTextNode.clientHeight);
      }, [truncateText]);
      let tabIndex = disabled ? -1 : 0, indicatorMarkup = subNavigationItems.filter((subNavigationItem) => subNavigationItem.new).length > 0 ? /* @__PURE__ */ React2.createElement("span", {
        className: Navigation_module.default.Indicator
      }, /* @__PURE__ */ React2.createElement(Indicator.Indicator, {
        pulse: !0
      })) : null, matchState = matchStateForItem({
        url,
        matches,
        exactMatch,
        matchPaths,
        excludePaths
      }, location), matchingSubNavigationItems = subNavigationItems.filter((item) => {
        let subMatchState = matchStateForItem(item, location);
        return subMatchState === types.MatchState.MatchForced || subMatchState === types.MatchState.MatchUrl || subMatchState === types.MatchState.MatchPaths;
      }), childIsActive = matchingSubNavigationItems.length > 0, selected = selectedOverride ?? (matchState === types.MatchState.MatchForced || matchState === types.MatchState.MatchUrl || matchState === types.MatchState.MatchPaths), icon = selected || childIsActive ? matchedItemIcon ?? baseIcon : baseIcon, iconMarkup = icon ? /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Navigation_module.default.Icon, shouldResizeIcon && Navigation_module.default["Icon-resized"])
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: icon
      })) : null, badgeMarkup = null;
      isNew ? badgeMarkup = /* @__PURE__ */ React2.createElement(Badge4.Badge, {
        tone: "new"
      }, i18n.translate("Polaris.Badge.TONE_LABELS.new")) : typeof badge == "string" ? badgeMarkup = /* @__PURE__ */ React2.createElement(Badge4.Badge, {
        tone: "new"
      }, badge) : badgeMarkup = badge;
      let wrappedBadgeMarkup = badgeMarkup == null ? null : /* @__PURE__ */ React2.createElement("div", {
        className: Navigation_module.default.Badge
      }, badgeMarkup), tone = !showVerticalHoverPointer && !matches && level !== 0 ? "subdued" : void 0, fontWeight = "regular";
      (matches || selected) && !childIsActive ? fontWeight = "semibold" : (level === 0 || showVerticalHoverPointer) && (fontWeight = "medium");
      let itemLabelMarkup = /* @__PURE__ */ React2.createElement("span", {
        className: css.classNames(Navigation_module.default.Text, truncateText && Navigation_module.default["Text-truncated"]),
        ref: navTextRef
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "bodyMd",
        tone,
        fontWeight
      }, label), indicatorMarkup);
      if (url == null) {
        let className2 = css.classNames(Navigation_module.default.Item, disabled && Navigation_module.default["Item-disabled"], selectedOverride && Navigation_module.default["Item-selected"]);
        return /* @__PURE__ */ React2.createElement("li", {
          className: Navigation_module.default.ListItem
        }, /* @__PURE__ */ React2.createElement("div", {
          className: Navigation_module.default.ItemWrapper
        }, /* @__PURE__ */ React2.createElement("div", {
          className: css.classNames(Navigation_module.default.ItemInnerWrapper, disabled && Navigation_module.default.ItemInnerDisabled, selectedOverride && Navigation_module.default["ItemInnerWrapper-selected"])
        }, /* @__PURE__ */ React2.createElement("button", {
          type: "button",
          className: className2,
          disabled,
          "aria-disabled": disabled,
          "aria-label": accessibilityLabel,
          onClick: getClickHandler(onClick)
        }, iconMarkup, itemLabelMarkup, wrappedBadgeMarkup))));
      }
      let actions = secondaryActions || secondaryAction && [secondaryAction];
      actions && actions.length > MAX_SECONDARY_ACTIONS && (actions.length = MAX_SECONDARY_ACTIONS);
      let secondaryActionMarkup = actions?.length ? /* @__PURE__ */ React2.createElement("span", {
        className: Navigation_module.default.SecondaryActions
      }, actions.map((action8) => /* @__PURE__ */ React2.createElement(ItemSecondaryAction, Object.assign({
        key: action8.accessibilityLabel
      }, action8, {
        tabIndex,
        disabled
      })))) : null, itemContentMarkup = /* @__PURE__ */ React2.createElement(React2.Fragment, null, iconMarkup, itemLabelMarkup, secondaryActionMarkup ? null : wrappedBadgeMarkup), outerContentMarkup = /* @__PURE__ */ React2.createElement(React2.Fragment, null, secondaryActionMarkup ? wrappedBadgeMarkup : null), showExpanded = selected || expanded || childIsActive, itemClassName = css.classNames(Navigation_module.default.Item, disabled && Navigation_module.default["Item-disabled"], (selected || childIsActive) && Navigation_module.default["Item-selected"], showExpanded && Navigation_module.default.subNavigationActive, childIsActive && Navigation_module.default["Item-child-active"], showVerticalLine && Navigation_module.default["Item-line"], matches && Navigation_module.default["Item-line-pointer"], showVerticalHoverPointer && Navigation_module.default["Item-hover-pointer"]), secondaryNavigationMarkup = null;
      if (subNavigationItems.length > 0) {
        let longestMatch = matchingSubNavigationItems.sort(({
          url: firstUrl
        }, {
          url: secondUrl
        }) => secondUrl.length - firstUrl.length)[0];
        secondaryNavigationMarkup = /* @__PURE__ */ React2.createElement(SecondaryNavigation.SecondaryNavigation, {
          ItemComponent: Item,
          icon,
          longestMatch,
          subNavigationItems,
          showExpanded,
          truncateText,
          secondaryNavigationId
        });
      }
      let className = css.classNames(Navigation_module.default.ListItem, Boolean(actions && actions.length) && Navigation_module.default["ListItem-hasAction"]), itemLinkMarkup = () => {
        let linkMarkup = /* @__PURE__ */ React2.createElement(UnstyledLink.UnstyledLink, Object.assign({
          url,
          className: itemClassName,
          external,
          tabIndex,
          "aria-disabled": disabled,
          "aria-label": accessibilityLabel,
          onClick: getClickHandler(onClick)
        }, normalizeAriaAttributes(secondaryNavigationId, subNavigationItems.length > 0, showExpanded)), itemContentMarkup);
        return isTruncated ? /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, {
          hoverDelay: TOOLTIP_HOVER_DELAY,
          content: label,
          preferredPosition: "above"
        }, linkMarkup) : linkMarkup;
      };
      return /* @__PURE__ */ React2.createElement("li", {
        className,
        onMouseEnter: () => {
          onMouseEnter?.(label);
        },
        onMouseLeave
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Navigation_module.default.ItemWrapper
      }, /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Navigation_module.default.ItemInnerWrapper, selected && childIsActive && Navigation_module.default["ItemInnerWrapper-open"] || selected && !childIsActive && Navigation_module.default["ItemInnerWrapper-selected"], displayActionsOnHover && Navigation_module.default["ItemInnerWrapper-display-actions-on-hover"], disabled && Navigation_module.default.ItemInnerDisabled)
      }, displayActionsOnHover && secondaryActionMarkup && wrappedBadgeMarkup ? /* @__PURE__ */ React2.createElement("span", {
        className: Navigation_module.default.ItemWithFloatingActions
      }, itemLinkMarkup(), secondaryActionMarkup) : /* @__PURE__ */ React2.createElement(React2.Fragment, null, itemLinkMarkup(), secondaryActionMarkup), outerContentMarkup)), secondaryNavigationMarkup);
      function getClickHandler(onClick2) {
        return (event) => {
          let {
            currentTarget
          } = event;
          if (currentTarget.getAttribute("href") === location && event.preventDefault(), subNavigationItems && subNavigationItems.length > 0 && isNavigationCollapsed)
            event.preventDefault(), onToggleExpandedState?.();
          else if (onNavigationDismiss) {
            onNavigationDismiss(), onClick2 && onClick2 !== onNavigationDismiss && onClick2();
            return;
          }
          onClick2 && onClick2();
        };
      }
    }
    function ItemSecondaryAction({
      url,
      icon,
      accessibilityLabel,
      tooltip,
      onClick,
      disabled,
      tabIndex
    }) {
      let markup = url ? /* @__PURE__ */ React2.createElement(UnstyledLink.UnstyledLink, {
        external: !0,
        url,
        className: Navigation_module.default.SecondaryAction,
        tabIndex,
        "aria-disabled": disabled,
        "aria-label": accessibilityLabel,
        onClick
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: icon
      })) : /* @__PURE__ */ React2.createElement(UnstyledButton.UnstyledButton, {
        className: Navigation_module.default.SecondaryAction,
        tabIndex,
        disabled,
        accessibilityLabel,
        onClick
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: icon
      }));
      return tooltip ? /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, tooltip, " ", markup, " ") : markup;
    }
    function isNavigationItemActive(navigationItem, currentPath) {
      let matchState = matchStateForItem(navigationItem, currentPath), matchingSubNavigationItems = navigationItem.subNavigationItems && navigationItem.subNavigationItems.filter((item) => {
        let subMatchState = matchStateForItem(item, currentPath);
        return subMatchState === types.MatchState.MatchForced || subMatchState === types.MatchState.MatchUrl || subMatchState === types.MatchState.MatchPaths;
      }), childIsActive = matchingSubNavigationItems && matchingSubNavigationItems.length > 0;
      return matchState === types.MatchState.MatchForced || matchState === types.MatchState.MatchUrl || matchState === types.MatchState.MatchPaths || childIsActive;
    }
    function normalizePathname(pathname) {
      let barePathname = pathname.split("?")[0].split("#")[0];
      return barePathname.endsWith("/") ? barePathname : `${barePathname}/`;
    }
    function safeEqual(location, path) {
      return normalizePathname(location) === normalizePathname(path);
    }
    function safeStartsWith(location, path) {
      return normalizePathname(location).startsWith(normalizePathname(path));
    }
    function matchStateForItem({
      url,
      matches,
      exactMatch,
      matchPaths,
      excludePaths
    }, location) {
      return url == null ? types.MatchState.NoMatch : matches ? types.MatchState.MatchForced : matches === !1 || excludePaths && excludePaths.some((path) => safeStartsWith(location, path)) ? types.MatchState.Excluded : matchPaths && matchPaths.some((path) => safeStartsWith(location, path)) ? types.MatchState.MatchPaths : (exactMatch ? safeEqual(location, url) : safeStartsWith(location, url)) ? types.MatchState.MatchUrl : types.MatchState.NoMatch;
    }
    function normalizeAriaAttributes(controlId, hasSubMenu, expanded) {
      return hasSubMenu ? {
        "aria-expanded": expanded,
        "aria-controls": controlId
      } : void 0;
    }
    exports.Item = Item;
    exports.ItemSecondaryAction = ItemSecondaryAction;
    exports.MAX_SECONDARY_ACTIONS = MAX_SECONDARY_ACTIONS;
    exports.isNavigationItemActive = isNavigationItemActive;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Navigation/components/Section/Section.js
var require_Section7 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Navigation/components/Section/Section.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), useToggle = require_use_toggle(), Navigation_module = require_Navigation_css(), Item = require_Item10(), hooks = require_hooks11(), Icon2 = require_Icon(), Tooltip = require_Tooltip(), Text4 = require_Text(), Collapsible2 = require_Collapsible();
    function Section({
      title,
      fill,
      action: action8,
      items,
      rollup,
      separator
    }) {
      let {
        value: expanded,
        toggle: toggleExpanded,
        setFalse: setExpandedFalse
      } = useToggle.useToggle(!1), animationFrame = React2.useRef(null), {
        isNavigationCollapsed
      } = hooks.useMediaQuery(), [expandedIndex, setExpandedIndex] = React2.useState(), handleClick = (onClick, hasSubNavItems) => () => {
        onClick && onClick(), animationFrame.current && cancelAnimationFrame(animationFrame.current), (!hasSubNavItems || !isNavigationCollapsed) && (animationFrame.current = requestAnimationFrame(setExpandedFalse));
      };
      React2.useEffect(() => () => {
        animationFrame.current && cancelAnimationFrame(animationFrame.current);
      });
      let className = css.classNames(Navigation_module.default.Section, separator && Navigation_module.default["Section-withSeparator"], fill && Navigation_module.default["Section-fill"]), buttonMarkup = action8 && /* @__PURE__ */ React2.createElement("button", {
        type: "button",
        className: Navigation_module.default.Action,
        "aria-label": action8.accessibilityLabel,
        onClick: action8.onClick
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: action8.icon
      })), actionMarkup = action8 && (action8.tooltip ? /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, action8.tooltip, buttonMarkup) : buttonMarkup), sectionHeadingMarkup = title && /* @__PURE__ */ React2.createElement("li", {
        className: Navigation_module.default.SectionHeading
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "bodySm",
        fontWeight: "medium",
        tone: "subdued"
      }, title), actionMarkup), itemsMarkup = items.map((item, index) => {
        let {
          onClick,
          label,
          subNavigationItems,
          ...rest
        } = item, hasSubNavItems = subNavigationItems != null && subNavigationItems.length > 0, handleToggleExpandedState = () => {
          setExpandedIndex(expandedIndex === index ? -1 : index);
        };
        return /* @__PURE__ */ React2.createElement(Item.Item, Object.assign({
          key: label
        }, rest, {
          label,
          subNavigationItems,
          onClick: handleClick(onClick, hasSubNavItems),
          onToggleExpandedState: handleToggleExpandedState,
          expanded: expandedIndex === index
        }));
      }), toggleClassName = css.classNames(Navigation_module.default.Item, Navigation_module.default.RollupToggle), ariaLabel = rollup && (expanded ? rollup.hide : rollup.view), toggleRollup = rollup && items.length > rollup.after && /* @__PURE__ */ React2.createElement("div", {
        className: Navigation_module.default.ListItem,
        key: "List Item"
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Navigation_module.default.ItemWrapper
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Navigation_module.default.ItemInnerWrapper
      }, /* @__PURE__ */ React2.createElement("button", {
        type: "button",
        className: toggleClassName,
        onClick: toggleExpanded,
        "aria-label": ariaLabel
      }, /* @__PURE__ */ React2.createElement("span", {
        className: Navigation_module.default.Icon
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.MenuHorizontalIcon
      })))))), activeItemIndex = items.findIndex((item) => rollup ? rollup.activePath === item.url || item.url && rollup.activePath.startsWith(item.url) || (item.subNavigationItems ? item.subNavigationItems.some(({
        url: itemUrl
      }) => rollup.activePath.startsWith(itemUrl)) : !1) : !1), sectionItems = rollup ? itemsMarkup.slice(0, rollup.after) : itemsMarkup, additionalItems = rollup ? itemsMarkup.slice(rollup.after) : [];
      rollup && activeItemIndex !== -1 && activeItemIndex > rollup.after - 1 && sectionItems.push(...additionalItems.splice(activeItemIndex - rollup.after, 1));
      let additionalItemsId = React2.useId(), activeItemsMarkup = rollup && additionalItems.length > 0 && /* @__PURE__ */ React2.createElement("li", {
        className: Navigation_module.default.RollupSection
      }, /* @__PURE__ */ React2.createElement(Collapsible2.Collapsible, {
        id: additionalItemsId,
        open: expanded
      }, /* @__PURE__ */ React2.createElement("ul", {
        className: Navigation_module.default.List
      }, additionalItems)), toggleRollup);
      return /* @__PURE__ */ React2.createElement("ul", {
        className
      }, sectionHeadingMarkup, sectionItems, activeItemsMarkup);
    }
    exports.Section = Section;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Navigation/Navigation.js
var require_Navigation2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Navigation/Navigation.js"(exports) {
    "use strict";
    var React2 = require_react(), withinContentContext = require_within_content_context(), css = require_css(), getWidth = require_get_width(), context = require_context20(), Navigation_module = require_Navigation_css(), Section = require_Section7(), hooks = require_hooks9(), UnstyledLink = require_UnstyledLink(), Image = require_Image(), Scrollable = require_Scrollable(), Item = require_Item10(), Navigation = function({
      children,
      contextControl,
      location,
      onDismiss,
      ariaLabelledBy,
      logoSuffix
    }) {
      let {
        logo
      } = hooks.useFrame(), width = getWidth.getWidth(logo, 104), logoMarkup = logo ? /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Navigation_module.default.LogoContainer, logoSuffix && Navigation_module.default.hasLogoSuffix)
      }, /* @__PURE__ */ React2.createElement(UnstyledLink.UnstyledLink, {
        url: logo.url || "",
        className: Navigation_module.default.LogoLink,
        style: {
          width
        }
      }, /* @__PURE__ */ React2.createElement(Image.Image, {
        source: logo.topBarSource || "",
        alt: logo.accessibilityLabel || "",
        className: Navigation_module.default.Logo,
        style: {
          width
        }
      })), logoSuffix) : null, mediaMarkup = contextControl ? /* @__PURE__ */ React2.createElement("div", {
        className: Navigation_module.default.ContextControl
      }, contextControl) : logoMarkup, context$1 = React2.useMemo(() => ({
        location,
        onNavigationDismiss: onDismiss
      }), [location, onDismiss]);
      return /* @__PURE__ */ React2.createElement(context.NavigationContext.Provider, {
        value: context$1
      }, /* @__PURE__ */ React2.createElement(withinContentContext.WithinContentContext.Provider, {
        value: !0
      }, /* @__PURE__ */ React2.createElement("nav", {
        className: Navigation_module.default.Navigation,
        "aria-labelledby": ariaLabelledBy
      }, mediaMarkup, /* @__PURE__ */ React2.createElement(Scrollable.Scrollable, {
        className: Navigation_module.default.PrimaryNavigation
      }, children))));
    };
    Navigation.Item = Item.Item;
    Navigation.Section = Section.Section;
    exports.Navigation = Navigation;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/arrays.js
var require_arrays = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/arrays.js"(exports) {
    "use strict";
    function arraysAreEqual(firstArray, secondArray, comparator) {
      return firstArray.length !== secondArray.length ? !1 : firstArray.every((firstItem, index) => {
        let secondItem = secondArray[index];
        return comparator != null ? comparator(firstItem, secondItem) : firstItem === secondItem;
      });
    }
    exports.arraysAreEqual = arraysAreEqual;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/OptionList/components/Option/Option.css.js
var require_Option_css2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/OptionList/components/Option/Option.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Option: "Polaris-OptionList-Option",
      SingleSelectOption: "Polaris-OptionList-Option__SingleSelectOption",
      focused: "Polaris-OptionList-Option--focused",
      active: "Polaris-OptionList-Option--active",
      disabled: "Polaris-OptionList-Option--disabled",
      select: "Polaris-OptionList-Option--select",
      Media: "Polaris-OptionList-Option__Media",
      Label: "Polaris-OptionList-Option__Label",
      MultiSelectOption: "Polaris-OptionList-Option__MultiSelectOption",
      CheckboxLabel: "Polaris-OptionList-Option__CheckboxLabel",
      verticalAlignTop: "Polaris-OptionList-Option--verticalAlignTop",
      verticalAlignCenter: "Polaris-OptionList-Option--verticalAlignCenter",
      verticalAlignBottom: "Polaris-OptionList-Option--verticalAlignBottom",
      Icon: "Polaris-OptionList-Option__Icon",
      Checkbox: "Polaris-OptionList-Option__Checkbox"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/OptionList/components/Option/Option.js
var require_Option2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/OptionList/components/Option/Option.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), useToggle = require_use_toggle(), css = require_css(), Option_module = require_Option_css2(), Checkbox = require_Checkbox(), InlineStack4 = require_InlineStack(), Icon2 = require_Icon(), Scrollable = require_Scrollable();
    function Option({
      label,
      value,
      id,
      select,
      active,
      allowMultiple,
      disabled,
      media,
      onClick,
      section,
      index,
      verticalAlign,
      onPointerEnter,
      onFocus
    }) {
      let {
        value: focused,
        toggle: toggleFocused
      } = useToggle.useToggle(!1), handleClick = React2.useCallback(() => {
        disabled || onClick(section, index);
      }, [disabled, index, onClick, section]), handlePointerEnter = React2.useCallback(() => {
        disabled || onPointerEnter(section, index);
      }, [disabled, onPointerEnter, section, index]), handleFocus = React2.useCallback(() => {
        toggleFocused(), onFocus(section, index);
      }, [toggleFocused, onFocus, section, index]), mediaMarkup = media ? /* @__PURE__ */ React2.createElement("div", {
        className: Option_module.default.Media
      }, media) : null, singleSelectClassName = css.classNames(Option_module.default.SingleSelectOption, focused && Option_module.default.focused, disabled && Option_module.default.disabled, select && Option_module.default.select, active && Option_module.default.active, verticalAlign && Option_module.default[css.variationName("verticalAlign", verticalAlign)]), multiSelectClassName = css.classNames(Option_module.default.Label, disabled && Option_module.default.disabled, active && Option_module.default.active, select && Option_module.default.select, verticalAlign && Option_module.default[css.variationName("verticalAlign", verticalAlign)], allowMultiple && Option_module.default.CheckboxLabel, allowMultiple && Option_module.default.MultiSelectOption), optionMarkup = allowMultiple ? /* @__PURE__ */ React2.createElement("label", {
        htmlFor: id,
        className: multiSelectClassName
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Option_module.default.Checkbox
      }, /* @__PURE__ */ React2.createElement(Checkbox.Checkbox, {
        id,
        label: "",
        ariaDescribedBy: `${id}-label`,
        value,
        checked: select,
        disabled,
        onChange: handleClick
      })), mediaMarkup, /* @__PURE__ */ React2.createElement("span", {
        id: `${id}-label`
      }, label)) : /* @__PURE__ */ React2.createElement("button", {
        id,
        type: "button",
        className: singleSelectClassName,
        onClick: handleClick,
        disabled,
        onFocus: handleFocus,
        onBlur: toggleFocused,
        "aria-pressed": active || select
      }, /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        wrap: !1,
        blockAlign: verticalAlignToBlockAlign(verticalAlign)
      }, mediaMarkup, label), (select || active) && /* @__PURE__ */ React2.createElement("span", {
        className: Option_module.default.Icon
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.CheckIcon
      })))), scrollMarkup = active ? /* @__PURE__ */ React2.createElement(Scrollable.Scrollable.ScrollTo, null) : null;
      return /* @__PURE__ */ React2.createElement("li", {
        key: id,
        className: Option_module.default.Option,
        tabIndex: -1,
        onPointerEnter: handlePointerEnter
      }, scrollMarkup, optionMarkup);
    }
    function verticalAlignToBlockAlign(verticalAlign) {
      switch (verticalAlign) {
        case "top":
          return "start";
        case "center":
          return "center";
        case "bottom":
          return "end";
        default:
          return "start";
      }
    }
    exports.Option = Option;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/OptionList/OptionList.js
var require_OptionList = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/OptionList/OptionList.js"(exports) {
    "use strict";
    var React2 = require_react(), options = require_options(), arrays = require_arrays(), useDeepEffect = require_use_deep_effect(), Option = require_Option2(), Box4 = require_Box(), BlockStack4 = require_BlockStack(), Text4 = require_Text();
    function OptionList({
      options: options2,
      sections,
      title,
      selected,
      allowMultiple,
      role,
      verticalAlign,
      onChange,
      id: idProp,
      onPointerEnterOption,
      onFocusOption
    }) {
      let [normalizedOptions, setNormalizedOptions] = React2.useState(createNormalizedOptions(options2, sections, title)), uniqId = React2.useId(), id = idProp ?? uniqId;
      useDeepEffect.useDeepEffect(() => {
        setNormalizedOptions(createNormalizedOptions(options2 || [], sections || [], title));
      }, [options2, sections, title], optionArraysAreEqual);
      let handleClick = React2.useCallback((sectionIndex, optionIndex) => {
        let selectedValue = normalizedOptions[sectionIndex].options[optionIndex].value, foundIndex = selected.indexOf(selectedValue);
        if (allowMultiple) {
          let newSelection = foundIndex === -1 ? [selectedValue, ...selected] : [...selected.slice(0, foundIndex), ...selected.slice(foundIndex + 1, selected.length)];
          onChange(newSelection);
          return;
        }
        onChange([selectedValue]);
      }, [normalizedOptions, selected, allowMultiple, onChange]), handlePointerEnter = React2.useCallback((sectionIndex, optionIndex) => {
        if (!onPointerEnterOption)
          return;
        let selectedValue = normalizedOptions[sectionIndex].options[optionIndex].value;
        onPointerEnterOption(selectedValue);
      }, [normalizedOptions, onPointerEnterOption]), handleFocus = React2.useCallback((sectionIndex, optionIndex) => {
        if (!onFocusOption)
          return;
        let selectedValue = normalizedOptions[sectionIndex].options[optionIndex].value;
        onFocusOption(selectedValue);
      }, [normalizedOptions, onFocusOption]), optionsMarkup = normalizedOptions.length > 0 ? normalizedOptions.map(({
        title: title2,
        options: options3
      }, sectionIndex) => {
        let isFirstOption = sectionIndex === 0, titleLevel = isFirstOption ? "h2" : "h3", titleMarkup = title2 ? /* @__PURE__ */ React2.createElement(Box4.Box, {
          paddingBlockStart: isFirstOption ? "050" : "300",
          paddingInlineStart: "150",
          paddingBlockEnd: "100",
          paddingInlineEnd: "150",
          borderColor: "border-secondary"
        }, /* @__PURE__ */ React2.createElement(Text4.Text, {
          as: titleLevel,
          variant: "headingSm"
        }, title2)) : null, optionsMarkup2 = options3 && options3.map((option2, optionIndex) => {
          let isSelected = selected.includes(option2.value), optionId = option2.id || `${id}-${sectionIndex}-${optionIndex}`;
          return /* @__PURE__ */ React2.createElement(Option.Option, Object.assign({
            key: optionId
          }, option2, {
            id: optionId,
            section: sectionIndex,
            index: optionIndex,
            onClick: handleClick,
            select: isSelected,
            allowMultiple,
            verticalAlign,
            onPointerEnter: handlePointerEnter,
            onFocus: handleFocus
          }));
        }), option = /* @__PURE__ */ React2.createElement(Box4.Box, {
          as: "ul",
          id: `${id}-${sectionIndex}`,
          role
        }, optionsMarkup2), blockStartPadding = isFirstOption ? title2 ? "100" : "0" : title2 ? "050" : "0";
        return /* @__PURE__ */ React2.createElement(Box4.Box, {
          key: title2 || `noTitle-${sectionIndex}`,
          as: "li",
          paddingBlockStart: blockStartPadding
        }, /* @__PURE__ */ React2.createElement(BlockStack4.BlockStack, {
          gap: isFirstOption && sections ? void 0 : "0"
        }, titleMarkup, option));
      }) : null;
      return /* @__PURE__ */ React2.createElement(Box4.Box, {
        as: "ul",
        role,
        padding: "150"
      }, optionsMarkup);
    }
    function createNormalizedOptions(options2, sections, title) {
      if (options2 == null) {
        let section = {
          options: [],
          title
        };
        return sections == null ? [] : [section, ...sections];
      }
      return sections == null ? [{
        title,
        options: options2
      }] : [{
        title,
        options: options2
      }, ...sections];
    }
    function optionArraysAreEqual(firstArray, secondArray) {
      return options.isSection(firstArray) && options.isSection(secondArray) ? arrays.arraysAreEqual(firstArray, secondArray, testSectionsPropEquality) : arrays.arraysAreEqual(firstArray, secondArray);
    }
    function testSectionsPropEquality(previousSection, currentSection) {
      let {
        options: previousOptions
      } = previousSection, {
        options: currentOptions
      } = currentSection, optionsAreEqual = arrays.arraysAreEqual(previousOptions, currentOptions), titlesAreEqual = previousSection.title === currentSection.title;
      return optionsAreEqual && titlesAreEqual;
    }
    exports.OptionList = OptionList;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/is-interface.js
var require_is_interface = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/is-interface.js"(exports) {
    "use strict";
    var React2 = require_react();
    function isInterface(x) {
      return !/* @__PURE__ */ React2.isValidElement(x) && x !== void 0;
    }
    exports.isInterface = isInterface;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/is-react-element.js
var require_is_react_element = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/is-react-element.js"(exports) {
    "use strict";
    var React2 = require_react();
    function isReactElement(x) {
      return /* @__PURE__ */ React2.isValidElement(x) && x !== void 0;
    }
    exports.isReactElement = isReactElement;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Page/Page.css.js
var require_Page_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Page/Page.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Page: "Polaris-Page",
      fullWidth: "Polaris-Page--fullWidth",
      narrowWidth: "Polaris-Page--narrowWidth",
      Content: "Polaris-Page__Content"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Page/components/Header/Header.css.js
var require_Header_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Page/components/Header/Header.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      TitleWrapper: "Polaris-Page-Header__TitleWrapper",
      TitleWrapperExpand: "Polaris-Page-Header__TitleWrapperExpand",
      BreadcrumbWrapper: "Polaris-Page-Header__BreadcrumbWrapper",
      PaginationWrapper: "Polaris-Page-Header__PaginationWrapper",
      PrimaryActionWrapper: "Polaris-Page-Header__PrimaryActionWrapper",
      Row: "Polaris-Page-Header__Row",
      mobileView: "Polaris-Page-Header--mobileView",
      RightAlign: "Polaris-Page-Header__RightAlign",
      noBreadcrumbs: "Polaris-Page-Header--noBreadcrumbs",
      AdditionalMetaData: "Polaris-Page-Header__AdditionalMetaData",
      Actions: "Polaris-Page-Header__Actions",
      longTitle: "Polaris-Page-Header--longTitle",
      mediumTitle: "Polaris-Page-Header--mediumTitle",
      isSingleRow: "Polaris-Page-Header--isSingleRow"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Page/components/Header/components/Title/Title.css.js
var require_Title_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Page/components/Header/components/Title/Title.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Title: "Polaris-Header-Title",
      TitleWithSubtitle: "Polaris-Header-Title__TitleWithSubtitle",
      TitleWrapper: "Polaris-Header-Title__TitleWrapper",
      SubTitle: "Polaris-Header-Title__SubTitle",
      SubtitleCompact: "Polaris-Header-Title__SubtitleCompact",
      SubtitleMaxWidth: "Polaris-Header-Title__SubtitleMaxWidth"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Page/components/Header/components/Title/Title.js
var require_Title = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Page/components/Header/components/Title/Title.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Title_module = require_Title_css(), Text4 = require_Text(), Bleed = require_Bleed();
    function Title({
      title,
      subtitle,
      titleMetadata,
      compactTitle,
      hasSubtitleMaxWidth
    }) {
      let className = css.classNames(Title_module.default.Title, subtitle && Title_module.default.TitleWithSubtitle), titleMarkup = title ? /* @__PURE__ */ React2.createElement("h1", {
        className
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "headingLg",
        fontWeight: "bold"
      }, title)) : null, titleMetadataMarkup = titleMetadata ? /* @__PURE__ */ React2.createElement(Bleed.Bleed, {
        marginBlock: "100"
      }, titleMetadata) : null, wrappedTitleMarkup = /* @__PURE__ */ React2.createElement("div", {
        className: Title_module.default.TitleWrapper
      }, titleMarkup, titleMetadataMarkup), subtitleMarkup = subtitle ? /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Title_module.default.SubTitle, compactTitle && Title_module.default.SubtitleCompact, hasSubtitleMaxWidth && Title_module.default.SubtitleMaxWidth)
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "p",
        variant: "bodySm",
        tone: "subdued"
      }, subtitle)) : null;
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, wrappedTitleMarkup, subtitleMarkup);
    }
    exports.Title = Title;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Page/components/Header/Header.js
var require_Header4 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Page/components/Header/Header.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), components = require_components(), isInterface = require_is_interface(), isReactElement = require_is_react_element(), Header_module = require_Header_css(), Breadcrumbs = require_Breadcrumbs(), Title = require_Title(), ActionMenu = require_ActionMenu(), FilterActionsProvider = require_FilterActionsProvider(), hooks = require_hooks2(), hooks$1 = require_hooks11(), Box4 = require_Box(), Pagination = require_Pagination(), Text4 = require_Text(), InlineStack4 = require_InlineStack(), utils = require_utils(), Tooltip = require_Tooltip(), SHORT_TITLE = 20, REALLY_SHORT_TITLE = 8, LONG_TITLE = 34;
    function Header({
      title,
      subtitle,
      pageReadyAccessibilityLabel,
      titleMetadata,
      additionalMetadata,
      titleHidden = !1,
      primaryAction,
      pagination,
      filterActions,
      backAction,
      secondaryActions = [],
      actionGroups = [],
      compactTitle = !1,
      onActionRollup
    }) {
      let i18n = hooks.useI18n(), {
        isNavigationCollapsed
      } = hooks$1.useMediaQuery(), isSingleRow = !primaryAction && !pagination && (isInterface.isInterface(secondaryActions) && !secondaryActions.length || isReactElement.isReactElement(secondaryActions)) && !actionGroups.length, hasActionGroupsOrSecondaryActions = actionGroups.length > 0 || isInterface.isInterface(secondaryActions) && secondaryActions.length > 0 || isReactElement.isReactElement(secondaryActions), breadcrumbMarkup = backAction ? /* @__PURE__ */ React2.createElement("div", {
        className: Header_module.default.BreadcrumbWrapper
      }, /* @__PURE__ */ React2.createElement(Box4.Box, {
        maxWidth: "100%",
        paddingInlineEnd: "100",
        printHidden: !0
      }, /* @__PURE__ */ React2.createElement(Breadcrumbs.Breadcrumbs, {
        backAction
      }))) : null, paginationMarkup = pagination && !isNavigationCollapsed ? /* @__PURE__ */ React2.createElement("div", {
        className: Header_module.default.PaginationWrapper
      }, /* @__PURE__ */ React2.createElement(Box4.Box, {
        printHidden: !0
      }, /* @__PURE__ */ React2.createElement(Pagination.Pagination, Object.assign({}, pagination, {
        hasPrevious: pagination.hasPrevious,
        hasNext: pagination.hasNext
      })))) : null, pageTitleMarkup = /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Header_module.default.TitleWrapper, !hasActionGroupsOrSecondaryActions && Header_module.default.TitleWrapperExpand)
      }, /* @__PURE__ */ React2.createElement(Title.Title, {
        title,
        subtitle,
        titleMetadata,
        compactTitle,
        hasSubtitleMaxWidth: hasActionGroupsOrSecondaryActions
      })), labelForPageReadyAccessibilityLabel = pageReadyAccessibilityLabel || title, pageReadyAccessibilityLabelMarkup = labelForPageReadyAccessibilityLabel ? /* @__PURE__ */ React2.createElement("div", {
        role: "status"
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        visuallyHidden: !0,
        as: "p"
      }, i18n.translate("Polaris.Page.Header.pageReadyAccessibilityLabel", {
        title: labelForPageReadyAccessibilityLabel
      }))) : void 0, primaryActionMarkup = primaryAction ? /* @__PURE__ */ React2.createElement(PrimaryActionMarkup, {
        primaryAction
      }) : null, actionMenuMarkup = null;
      isInterface.isInterface(secondaryActions) && (secondaryActions.length > 0 || ActionMenu.hasGroupsWithActions(actionGroups)) ? actionMenuMarkup = /* @__PURE__ */ React2.createElement(ActionMenu.ActionMenu, {
        actions: secondaryActions,
        groups: actionGroups,
        rollup: isNavigationCollapsed,
        rollupActionsLabel: title ? i18n.translate("Polaris.Page.Header.rollupActionsLabel", {
          title
        }) : void 0,
        onActionRollup
      }) : isReactElement.isReactElement(secondaryActions) && (actionMenuMarkup = /* @__PURE__ */ React2.createElement(React2.Fragment, null, secondaryActions));
      let navigationMarkup = breadcrumbMarkup || paginationMarkup ? /* @__PURE__ */ React2.createElement(Box4.Box, {
        printHidden: !0,
        paddingBlockEnd: "100",
        paddingInlineEnd: actionMenuMarkup && isNavigationCollapsed ? "1000" : void 0
      }, /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        gap: "400",
        align: "space-between",
        blockAlign: "center"
      }, breadcrumbMarkup, paginationMarkup)) : null, additionalMetadataMarkup = additionalMetadata ? /* @__PURE__ */ React2.createElement("div", {
        className: Header_module.default.AdditionalMetaData
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        tone: "subdued",
        as: "span",
        variant: "bodySm"
      }, additionalMetadata)) : null, headerClassNames = css.classNames(isSingleRow && Header_module.default.isSingleRow, navigationMarkup && Header_module.default.hasNavigation, actionMenuMarkup && Header_module.default.hasActionMenu, isNavigationCollapsed && Header_module.default.mobileView, !backAction && Header_module.default.noBreadcrumbs, title && title.length < LONG_TITLE && Header_module.default.mediumTitle, title && title.length > LONG_TITLE && Header_module.default.longTitle), {
        slot1,
        slot2,
        slot3,
        slot4,
        slot5
      } = determineLayout({
        actionMenuMarkup,
        additionalMetadataMarkup,
        breadcrumbMarkup,
        isNavigationCollapsed,
        pageTitleMarkup,
        paginationMarkup,
        primaryActionMarkup,
        title
      });
      return /* @__PURE__ */ React2.createElement(Box4.Box, {
        position: "relative",
        paddingBlockStart: {
          xs: "400",
          md: "600"
        },
        paddingBlockEnd: {
          xs: "400",
          md: "600"
        },
        paddingInlineStart: {
          xs: "400",
          sm: "0"
        },
        paddingInlineEnd: {
          xs: "400",
          sm: "0"
        },
        visuallyHidden: titleHidden
      }, pageReadyAccessibilityLabelMarkup, /* @__PURE__ */ React2.createElement("div", {
        className: headerClassNames
      }, /* @__PURE__ */ React2.createElement(FilterActionsProvider.FilterActionsProvider, {
        filterActions: Boolean(filterActions)
      }, /* @__PURE__ */ React2.createElement(components.ConditionalRender, {
        condition: [slot1, slot2, slot3, slot4].some(notNull)
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Header_module.default.Row
      }, slot1, slot2, /* @__PURE__ */ React2.createElement(components.ConditionalRender, {
        condition: [slot3, slot4].some(notNull)
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Header_module.default.RightAlign
      }, /* @__PURE__ */ React2.createElement(components.ConditionalWrapper, {
        condition: [slot3, slot4].every(notNull),
        wrapper: (children) => /* @__PURE__ */ React2.createElement("div", {
          className: Header_module.default.Actions
        }, children)
      }, slot3, slot4))))), /* @__PURE__ */ React2.createElement(components.ConditionalRender, {
        condition: [slot5].some(notNull)
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Header_module.default.Row
      }, /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        gap: "400"
      }, slot5))))));
    }
    function PrimaryActionMarkup({
      primaryAction
    }) {
      let {
        isNavigationCollapsed
      } = hooks$1.useMediaQuery(), actionMarkup;
      if (isInterface.isInterface(primaryAction)) {
        let {
          primary: isPrimary,
          helpText
        } = primaryAction, primary = isPrimary === void 0 ? !0 : isPrimary, content = utils.buttonFrom(shouldShowIconOnly(isNavigationCollapsed, primaryAction), {
          variant: primary ? "primary" : void 0
        });
        actionMarkup = helpText ? /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, {
          content: helpText
        }, content) : content;
      } else
        actionMarkup = primaryAction;
      return /* @__PURE__ */ React2.createElement("div", {
        className: Header_module.default.PrimaryActionWrapper
      }, /* @__PURE__ */ React2.createElement(Box4.Box, {
        printHidden: !0
      }, actionMarkup));
    }
    function shouldShowIconOnly(isMobile, action8) {
      let {
        content,
        accessibilityLabel
      } = action8, {
        icon
      } = action8;
      return icon == null ? {
        ...action8,
        icon: void 0
      } : (isMobile && (accessibilityLabel = accessibilityLabel || content, content = void 0), {
        ...action8,
        content,
        accessibilityLabel,
        icon
      });
    }
    function notNull(value) {
      return value != null;
    }
    function determineLayout({
      actionMenuMarkup,
      additionalMetadataMarkup,
      breadcrumbMarkup,
      isNavigationCollapsed,
      pageTitleMarkup,
      paginationMarkup,
      primaryActionMarkup,
      title
    }) {
      let layouts = {
        mobileCompact: {
          slots: {
            slot1: null,
            slot2: pageTitleMarkup,
            slot3: actionMenuMarkup,
            slot4: primaryActionMarkup,
            slot5: additionalMetadataMarkup
          },
          condition: isNavigationCollapsed && breadcrumbMarkup == null && title != null && title.length <= REALLY_SHORT_TITLE
        },
        mobileDefault: {
          slots: {
            slot1: breadcrumbMarkup,
            slot2: pageTitleMarkup,
            slot3: actionMenuMarkup,
            slot4: primaryActionMarkup,
            slot5: additionalMetadataMarkup
          },
          condition: isNavigationCollapsed
        },
        desktopCompact: {
          slots: {
            slot1: breadcrumbMarkup,
            slot2: pageTitleMarkup,
            slot3: actionMenuMarkup,
            slot4: primaryActionMarkup,
            slot5: additionalMetadataMarkup
          },
          condition: !isNavigationCollapsed && paginationMarkup == null && actionMenuMarkup == null && title != null && title.length <= SHORT_TITLE
        },
        desktopDefault: {
          slots: {
            slot1: breadcrumbMarkup,
            slot2: pageTitleMarkup,
            slot3: /* @__PURE__ */ React2.createElement(React2.Fragment, null, actionMenuMarkup, primaryActionMarkup),
            slot4: paginationMarkup,
            slot5: additionalMetadataMarkup
          },
          condition: !isNavigationCollapsed
        }
      };
      return (Object.values(layouts).find((layout2) => layout2.condition) || layouts.desktopDefault).slots;
    }
    exports.Header = Header;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Page/Page.js
var require_Page = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Page/Page.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), isInterface = require_is_interface(), isReactElement = require_is_react_element(), Page_module = require_Page_css(), Header = require_Header4();
    function Page3({
      children,
      fullWidth,
      narrowWidth,
      ...rest
    }) {
      let pageClassName = css.classNames(Page_module.default.Page, fullWidth && Page_module.default.fullWidth, narrowWidth && Page_module.default.narrowWidth), hasHeaderContent = rest.title != null && rest.title !== "" || rest.subtitle != null && rest.subtitle !== "" || rest.primaryAction != null || rest.secondaryActions != null && (isInterface.isInterface(rest.secondaryActions) && rest.secondaryActions.length > 0 || isReactElement.isReactElement(rest.secondaryActions)) || rest.actionGroups != null && rest.actionGroups.length > 0 || rest.backAction != null, contentClassName = css.classNames(!hasHeaderContent && Page_module.default.Content), headerMarkup = hasHeaderContent ? /* @__PURE__ */ React2.createElement(Header.Header, Object.assign({
        filterActions: !0
      }, rest)) : null;
      return /* @__PURE__ */ React2.createElement("div", {
        className: pageClassName
      }, headerMarkup, /* @__PURE__ */ React2.createElement("div", {
        className: contentClassName
      }, children));
    }
    exports.Page = Page3;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/PageActions/PageActions.css.js
var require_PageActions_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/PageActions/PageActions.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      PageActions: "Polaris-PageActions"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/PageActions/PageActions.js
var require_PageActions = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/PageActions/PageActions.js"(exports) {
    "use strict";
    var React2 = require_react(), isInterface = require_is_interface(), isReactElement = require_is_react_element(), PageActions_module = require_PageActions_css(), utils = require_utils(), ButtonGroup = require_ButtonGroup(), LegacyStack = require_LegacyStack();
    function PageActions({
      primaryAction,
      secondaryActions
    }) {
      let primaryActionMarkup = null;
      isReactElement.isReactElement(primaryAction) ? primaryActionMarkup = /* @__PURE__ */ React2.createElement(React2.Fragment, null, primaryAction) : primaryAction && (primaryActionMarkup = utils.buttonsFrom(primaryAction, {
        variant: "primary"
      }));
      let secondaryActionsMarkup = null;
      return isInterface.isInterface(secondaryActions) && secondaryActions.length > 0 ? secondaryActionsMarkup = /* @__PURE__ */ React2.createElement(ButtonGroup.ButtonGroup, null, utils.buttonsFrom(secondaryActions)) : isReactElement.isReactElement(secondaryActions) && (secondaryActionsMarkup = /* @__PURE__ */ React2.createElement(React2.Fragment, null, secondaryActions)), /* @__PURE__ */ React2.createElement("div", {
        className: PageActions_module.default.PageActions
      }, /* @__PURE__ */ React2.createElement(LegacyStack.LegacyStack, {
        distribution: "trailing",
        spacing: "tight"
      }, secondaryActionsMarkup, primaryActionMarkup));
    }
    exports.PageActions = PageActions;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/string.js
var require_string = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/string.js"(exports) {
    "use strict";
    function escapeRegex(str) {
      return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    }
    exports.escapeRegex = escapeRegex;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Picker/components/Activator/Activator.css.js
var require_Activator_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Picker/components/Activator/Activator.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Activator: "Polaris-Picker-Activator",
      disabled: "Polaris-Picker-Activator--disabled"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Picker/components/Activator/Activator.js
var require_Activator = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Picker/components/Activator/Activator.js"(exports) {
    "use strict";
    var polarisIcons = require("@shopify/polaris-icons"), React2 = require_react(), css = require_css(), Activator_module = require_Activator_css(), BlockStack4 = require_BlockStack(), Text4 = require_Text(), Icon2 = require_Icon(), Activator = /* @__PURE__ */ React2.forwardRef(({
      disabled,
      label,
      placeholder,
      selected,
      onClick
    }, ref) => /* @__PURE__ */ React2.createElement("button", {
      ref,
      disabled,
      onClick,
      className: css.classNames(Activator_module.default.Activator, disabled && Activator_module.default.disabled)
    }, /* @__PURE__ */ React2.createElement(BlockStack4.BlockStack, {
      as: "span",
      gap: "100"
    }, label && /* @__PURE__ */ React2.createElement(Text4.Text, {
      as: "span",
      variant: "bodySm",
      alignment: "start",
      tone: "subdued"
    }, label), (selected !== "" || placeholder) && /* @__PURE__ */ React2.createElement(Text4.Text, {
      as: "span",
      variant: "bodyMd",
      alignment: "start",
      tone: selected ? void 0 : "subdued"
    }, selected || placeholder)), /* @__PURE__ */ React2.createElement("span", null, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
      tone: "subdued",
      source: polarisIcons.SelectIcon
    }))));
    Activator.displayName = "Activator";
    exports.Activator = Activator;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Picker/components/SearchField/SearchField.css.js
var require_SearchField_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Picker/components/SearchField/SearchField.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      SearchField: "Polaris-Picker-SearchField"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Picker/components/SearchField/SearchField.js
var require_SearchField2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Picker/components/SearchField/SearchField.js"(exports) {
    "use strict";
    var React2 = require_react(), SearchField_module = require_SearchField_css(), hooks = require_hooks5(), Label = require_Label(), InlineStack4 = require_InlineStack(), Text4 = require_Text();
    function SearchField({
      value,
      id: idProp,
      type = "text",
      onFocus,
      onBlur,
      onChange,
      label,
      prefix,
      placeholder,
      focused
    }) {
      let inputRef = React2.useRef(null), comboboxTextFieldContext = hooks.useComboboxTextField(), {
        activeOptionId,
        listboxId,
        setTextFieldFocused,
        setTextFieldLabelId,
        onTextFieldFocus,
        onTextFieldChange,
        onTextFieldBlur
      } = comboboxTextFieldContext, uniqueId = React2.useId(), textFieldId = React2.useMemo(() => idProp || uniqueId, [uniqueId, idProp]), labelId = React2.useMemo(() => Label.labelID(idProp || uniqueId), [uniqueId, idProp]);
      React2.useEffect(() => {
        setTextFieldLabelId && setTextFieldLabelId(labelId);
      }, [labelId, setTextFieldLabelId]);
      let handleFocus = React2.useCallback((event) => {
        onFocus && onFocus(event), onTextFieldFocus && onTextFieldFocus(), setTextFieldFocused && setTextFieldFocused(!0);
      }, [onFocus, onTextFieldFocus, setTextFieldFocused]), handleBlur = React2.useCallback((event) => {
        onBlur && onBlur(event), onTextFieldBlur && onTextFieldBlur(), setTextFieldFocused && setTextFieldFocused(!1);
      }, [onBlur, onTextFieldBlur, setTextFieldFocused]), handleChange = React2.useCallback((value2, id) => {
        onChange && onChange(value2, id), onTextFieldChange && onTextFieldChange(value2);
      }, [onChange, onTextFieldChange]);
      return focused && document.activeElement !== inputRef.current && inputRef.current?.focus(), /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        gap: "100",
        blockAlign: "center"
      }, /* @__PURE__ */ React2.createElement(Label.Label, {
        id: textFieldId
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        visuallyHidden: !0
      }, label), /* @__PURE__ */ React2.createElement("span", null, prefix)), /* @__PURE__ */ React2.createElement("input", {
        ref: inputRef,
        id: textFieldId,
        className: SearchField_module.default.SearchField,
        value,
        type,
        "aria-activedescendant": activeOptionId,
        role: "combobox",
        "aria-haspopup": "listbox",
        "aria-autocomplete": "list",
        "aria-expanded": "true",
        placeholder,
        "aria-controls": listboxId,
        onFocus: handleFocus,
        onBlur: handleBlur,
        onChange: ({
          target
        }) => handleChange(target.value, textFieldId)
      }));
    }
    exports.SearchField = SearchField;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Picker/Picker.js
var require_Picker = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Picker/Picker.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), string = require_string(), Activator = require_Activator(), SearchField = require_SearchField2(), Popover = require_Popover(), Box4 = require_Box(), context = require_context11(), Icon2 = require_Icon(), Listbox = require_Listbox(), FILTER_REGEX = (value) => new RegExp(value, "i"), QUERY_REGEX = (value) => new RegExp(`^${string.escapeRegex(value)}$`, "i");
    function Picker({
      activator,
      allowMultiple,
      searchField,
      options = [],
      willLoadMoreOptions,
      height,
      addAction,
      onScrolledToBottom,
      onClose,
      ...listboxProps
    }) {
      let activatorRef = /* @__PURE__ */ React2.createRef(), [activeItems, setActiveItems] = React2.useState([]), [popoverActive, setPopoverActive] = React2.useState(!1), [activeOptionId, setActiveOptionId] = React2.useState(), [textFieldLabelId, setTextFieldLabelId] = React2.useState(), [listboxId, setListboxId] = React2.useState(), [query, setQuery] = React2.useState(""), [filteredOptions, setFilteredOptions] = React2.useState(options), shouldOpen = !popoverActive, handleClose = React2.useCallback(() => {
        setPopoverActive(!1), onClose?.(), activatorRef.current?.focus();
      }, [activatorRef, onClose]), handleOpen = React2.useCallback(() => {
        setPopoverActive(!0);
      }, []), handleFocus = React2.useCallback(() => {
        shouldOpen && handleOpen();
      }, [shouldOpen, handleOpen]), handleChange = React2.useCallback(() => {
        shouldOpen && handleOpen();
      }, [shouldOpen, handleOpen]), handleBlur = React2.useCallback(() => {
        popoverActive && (handleClose(), setQuery(""), setFilteredOptions(options));
      }, [popoverActive, handleClose, options]), textFieldContextValue = React2.useMemo(() => ({
        activeOptionId,
        expanded: popoverActive,
        listboxId,
        setTextFieldLabelId,
        onTextFieldFocus: handleFocus,
        onTextFieldChange: handleChange,
        onTextFieldBlur: handleBlur
      }), [activeOptionId, popoverActive, listboxId, setTextFieldLabelId, handleFocus, handleChange, handleBlur]), listboxOptionContextValue = React2.useMemo(() => ({
        allowMultiple
      }), [allowMultiple]), listboxContextValue = React2.useMemo(() => ({
        listboxId,
        textFieldLabelId,
        textFieldFocused: popoverActive,
        willLoadMoreOptions,
        setActiveOptionId,
        setListboxId,
        onKeyToBottom: onScrolledToBottom
      }), [listboxId, textFieldLabelId, popoverActive, willLoadMoreOptions, setActiveOptionId, setListboxId, onScrolledToBottom]), updateText = React2.useCallback((value) => {
        if (setQuery(value), value === "") {
          setFilteredOptions(options);
          return;
        }
        let resultOptions = options?.filter((option) => FILTER_REGEX(value).exec(reactChildrenText(option.children)));
        setFilteredOptions(resultOptions ?? []);
      }, [options]), handleSelect = React2.useCallback((selected) => {
        if (setQuery(""), updateText(""), listboxProps.onSelect?.(selected), !allowMultiple) {
          handleClose(), setActiveItems([selected]);
          return;
        }
        setActiveItems((selectedOptions) => activeItems.includes(selected) ? selectedOptions.filter((option) => option !== selected) : [...selectedOptions, selected]);
      }, [updateText, listboxProps, allowMultiple, activeItems, handleClose]), firstSelectedOption = reactChildrenText(options.find((option) => option.value === activeItems?.[0])?.children), queryMatchesExistingOption = options.some((option) => {
        let matcher = QUERY_REGEX(query);
        return reactChildrenText(option.children).match(matcher);
      });
      return /* @__PURE__ */ React2.createElement(Popover.Popover, {
        activator: /* @__PURE__ */ React2.createElement(Activator.Activator, Object.assign({}, activator, {
          onClick: handleOpen,
          selected: firstSelectedOption || "",
          placeholder: activator.placeholder,
          ref: activatorRef
        })),
        active: popoverActive,
        autofocusTarget: "none",
        onClose: handleClose,
        preferredPosition: "cover",
        preventFocusOnClose: !0
      }, /* @__PURE__ */ React2.createElement(Popover.Popover.Pane, {
        onScrolledToBottom,
        height
      }, searchField ? /* @__PURE__ */ React2.createElement(Box4.Box, {
        paddingBlockStart: "200",
        paddingBlockEnd: "100",
        paddingInline: "200",
        borderBlockEndWidth: "025",
        borderColor: "border"
      }, /* @__PURE__ */ React2.createElement(context.ComboboxTextFieldContext.Provider, {
        value: textFieldContextValue
      }, /* @__PURE__ */ React2.createElement(SearchField.SearchField, Object.assign({}, searchField, {
        value: query,
        onChange: (value) => {
          updateText(value), searchField.onChange?.(value, searchField.id ?? "");
        },
        prefix: /* @__PURE__ */ React2.createElement(Icon2.Icon, {
          source: polarisIcons.SearchIcon
        }),
        labelHidden: !0,
        focused: popoverActive
      })))) : null, /* @__PURE__ */ React2.createElement(context.ComboboxListboxContext.Provider, {
        value: listboxContextValue
      }, /* @__PURE__ */ React2.createElement(context.ComboboxListboxOptionContext.Provider, {
        value: listboxOptionContextValue
      }, /* @__PURE__ */ React2.createElement(Box4.Box, {
        paddingBlock: "200"
      }, /* @__PURE__ */ React2.createElement(Listbox.Listbox, Object.assign({}, listboxProps, {
        onSelect: handleSelect
      }), filteredOptions?.map((option) => /* @__PURE__ */ React2.createElement(Listbox.Listbox.Option, Object.assign({
        key: option.value,
        selected: activeItems.some((item) => item === option.value)
      }, option))), addAction && query !== "" && !queryMatchesExistingOption ? /* @__PURE__ */ React2.createElement(Listbox.Listbox.Action, Object.assign({}, addAction, {
        value: query
      })) : null))))));
    }
    var reactChildrenText = (children) => typeof children == "string" ? children : /* @__PURE__ */ React2.isValidElement(children) ? reactChildrenText(children?.props?.children) : "";
    exports.Picker = Picker;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/PolarisTestProvider/PolarisTestProvider.js
var require_PolarisTestProvider = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/PolarisTestProvider/PolarisTestProvider.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisTokens = require("@shopify/polaris-tokens"), merge = require_merge(), useTheme = require_use_theme(), I18n = require_I18n(), scrollLockManager = require_scroll_lock_manager(), stickyManager = require_sticky_manager(), context = require_context(), context$1 = require_context2(), context$2 = require_context3(), context$3 = require_context4(), context$4 = require_context5(), context$5 = require_context6(), PortalsManager = require_PortalsManager(), FocusManager = require_FocusManager(), EphemeralPresenceManager = require_EphemeralPresenceManager(), context$6 = require_context15(), defaultMediaQuery = {
      isNavigationCollapsed: !1
    };
    function PolarisTestProvider({
      strict,
      children,
      i18n,
      link,
      mediaQuery,
      features,
      frame,
      theme: themeName = polarisTokens.themeNameDefault
    }) {
      let Wrapper = strict ? React2.StrictMode : React2.Fragment, intl = React2.useMemo(() => new I18n.I18n(i18n || {}), [i18n]), scrollLockManager$1 = React2.useMemo(() => new scrollLockManager.ScrollLockManager(), []), stickyManager$1 = React2.useMemo(() => new stickyManager.StickyManager(), []), mergedFrame = createFrameContext(frame), mergedMediaQuery = merge.merge(defaultMediaQuery, mediaQuery);
      return /* @__PURE__ */ React2.createElement(Wrapper, null, /* @__PURE__ */ React2.createElement(useTheme.ThemeNameContext.Provider, {
        value: themeName
      }, /* @__PURE__ */ React2.createElement(useTheme.ThemeContext.Provider, {
        value: useTheme.getTheme(themeName)
      }, /* @__PURE__ */ React2.createElement(context.FeaturesContext.Provider, {
        value: features
      }, /* @__PURE__ */ React2.createElement(context$1.I18nContext.Provider, {
        value: intl
      }, /* @__PURE__ */ React2.createElement(context$2.ScrollLockManagerContext.Provider, {
        value: scrollLockManager$1
      }, /* @__PURE__ */ React2.createElement(context$3.StickyManagerContext.Provider, {
        value: stickyManager$1
      }, /* @__PURE__ */ React2.createElement(context$4.LinkContext.Provider, {
        value: link
      }, /* @__PURE__ */ React2.createElement(context$5.MediaQueryContext.Provider, {
        value: mergedMediaQuery
      }, /* @__PURE__ */ React2.createElement(PortalsManager.PortalsManager, null, /* @__PURE__ */ React2.createElement(FocusManager.FocusManager, null, /* @__PURE__ */ React2.createElement(EphemeralPresenceManager.EphemeralPresenceManager, null, /* @__PURE__ */ React2.createElement(context$6.FrameContext.Provider, {
        value: mergedFrame
      }, children)))))))))))));
    }
    function noop() {
    }
    function createFrameContext({
      logo = void 0,
      showToast = noop,
      hideToast = noop,
      toastMessages = [],
      setContextualSaveBar = noop,
      removeContextualSaveBar = noop,
      startLoading = noop,
      stopLoading = noop
    } = {}) {
      return {
        logo,
        showToast,
        hideToast,
        toastMessages,
        setContextualSaveBar,
        removeContextualSaveBar,
        startLoading,
        stopLoading
      };
    }
    exports.PolarisTestProvider = PolarisTestProvider;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ProgressBar/ProgressBar.css.js
var require_ProgressBar_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ProgressBar/ProgressBar.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ProgressBar: "Polaris-ProgressBar",
      sizeSmall: "Polaris-ProgressBar--sizeSmall",
      sizeMedium: "Polaris-ProgressBar--sizeMedium",
      sizeLarge: "Polaris-ProgressBar--sizeLarge",
      toneHighlight: "Polaris-ProgressBar--toneHighlight",
      tonePrimary: "Polaris-ProgressBar--tonePrimary",
      toneSuccess: "Polaris-ProgressBar--toneSuccess",
      toneCritical: "Polaris-ProgressBar--toneCritical",
      Indicator: "Polaris-ProgressBar__Indicator",
      IndicatorAppearActive: "Polaris-ProgressBar__IndicatorAppearActive",
      IndicatorAppearDone: "Polaris-ProgressBar__IndicatorAppearDone",
      Progress: "Polaris-ProgressBar__Progress",
      Label: "Polaris-ProgressBar__Label"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ProgressBar/ProgressBar.js
var require_ProgressBar = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ProgressBar/ProgressBar.js"(exports) {
    "use strict";
    var React2 = require_react(), reactTransitionGroup = require("react-transition-group"), css = require_css(), useTheme = require_use_theme(), ProgressBar_module = require_ProgressBar_css(), hooks = require_hooks2();
    function ProgressBar4({
      progress = 0,
      size = "medium",
      tone = "highlight",
      animated: hasAppearAnimation = !0,
      ariaLabelledBy
    }) {
      let theme = useTheme.useTheme(), i18n = hooks.useI18n(), indicatorRef = React2.useRef(null), className = css.classNames(ProgressBar_module.default.ProgressBar, size && ProgressBar_module.default[css.variationName("size", size)], tone && ProgressBar_module.default[css.variationName("tone", tone)]), warningMessage = i18n.translate(progress < 0 ? "Polaris.ProgressBar.negativeWarningMessage" : "Polaris.ProgressBar.exceedWarningMessage", {
        progress
      }), parsedProgress = parseProgress(progress, warningMessage), progressBarDuration = hasAppearAnimation ? theme.motion["motion-duration-500"] : theme.motion["motion-duration-0"];
      return /* @__PURE__ */ React2.createElement("div", {
        className
      }, /* @__PURE__ */ React2.createElement("progress", {
        "aria-labelledby": ariaLabelledBy,
        className: ProgressBar_module.default.Progress,
        value: parsedProgress,
        max: "100"
      }), /* @__PURE__ */ React2.createElement(reactTransitionGroup.CSSTransition, {
        in: !0,
        appear: !0,
        timeout: parseInt(progressBarDuration, 10),
        nodeRef: indicatorRef,
        classNames: {
          appearActive: ProgressBar_module.default.IndicatorAppearActive,
          appearDone: ProgressBar_module.default.IndicatorAppearDone
        }
      }, /* @__PURE__ */ React2.createElement("div", {
        ref: indicatorRef,
        className: ProgressBar_module.default.Indicator,
        style: {
          "--pc-progress-bar-duration": progressBarDuration,
          "--pc-progress-bar-percent": parsedProgress / 100
        }
      }, /* @__PURE__ */ React2.createElement("span", {
        className: ProgressBar_module.default.Label
      }, parsedProgress, "%"))));
    }
    function parseProgress(progress, warningMessage) {
      let progressWidth;
      return progress < 0 ? progressWidth = 0 : progress > 100 ? progressWidth = 100 : progressWidth = progress, progressWidth;
    }
    exports.ProgressBar = ProgressBar4;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/RangeSlider/RangeSlider.css.js
var require_RangeSlider_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/RangeSlider/RangeSlider.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var sharedStyles = {
      RangeSlider: "Polaris-RangeSlider",
      "Track--dashed-after": "Polaris-RangeSlider--trackDashedAfter",
      "Track--dashed": "Polaris-RangeSlider--trackDashed"
    };
    exports.default = sharedStyles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/RangeSlider/components/DualThumb/DualThumb.css.js
var require_DualThumb_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/RangeSlider/components/DualThumb/DualThumb.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      DualThumb: "Polaris-RangeSlider-DualThumb",
      TrackWrapper: "Polaris-RangeSlider-DualThumb__TrackWrapper",
      disabled: "Polaris-RangeSlider-DualThumb--disabled",
      Track: "Polaris-RangeSlider-DualThumb__Track",
      error: "Polaris-RangeSlider-DualThumb--error",
      Thumbs: "Polaris-RangeSlider-DualThumb__Thumbs",
      Prefix: "Polaris-RangeSlider-DualThumb__Prefix",
      Suffix: "Polaris-RangeSlider-DualThumb__Suffix",
      Output: "Polaris-RangeSlider-DualThumb__Output",
      OutputBubble: "Polaris-RangeSlider-DualThumb__OutputBubble"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/RangeSlider/components/DualThumb/DualThumb.js
var require_DualThumb = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/RangeSlider/components/DualThumb/DualThumb.js"(exports) {
    "use strict";
    var React2 = require_react(), debounce = require_debounce(), css = require_css(), types = require_types(), RangeSlider_module = require_RangeSlider_css(), DualThumb_module = require_DualThumb_css(), Text4 = require_Text(), Labelled = require_Labelled(), Label = require_Label(), EventListener = require_EventListener(), context = require_context(), Control;
    (function(Control2) {
      Control2[Control2.Lower = 0] = "Lower", Control2[Control2.Upper = 1] = "Upper";
    })(Control || (Control = {}));
    var DualThumb = class extends React2.Component {
      constructor(...args) {
        super(...args), this.state = {
          value: sanitizeValue(this.props.value, this.props.min, this.props.max, this.props.step),
          trackWidth: 0,
          trackLeft: 0
        }, this.track = /* @__PURE__ */ React2.createRef(), this.trackWrapper = /* @__PURE__ */ React2.createRef(), this.thumbLower = /* @__PURE__ */ React2.createRef(), this.thumbUpper = /* @__PURE__ */ React2.createRef(), this.setTrackPosition = debounce.debounce(() => {
          if (this.track.current) {
            let {
              width,
              left
            } = this.track.current.getBoundingClientRect(), adjustedTrackWidth = width - 16, adjustedTrackLeft = left + 16 / 2, range = this.props.max - this.props.min, minValuePosition = this.props.min / range * adjustedTrackWidth;
            this.setState({
              trackWidth: adjustedTrackWidth,
              trackLeft: adjustedTrackLeft - minValuePosition
            });
          }
        }, 40, {
          leading: !0,
          trailing: !0,
          maxWait: 40
        }), this.handleMouseDownThumbLower = (event) => {
          event.button !== 0 || this.props.disabled || (registerMouseMoveHandler(this.handleMouseMoveThumbLower), event.stopPropagation());
        }, this.handleMouseMoveThumbLower = (event) => {
          let valueUpper = this.state.value[1];
          this.setValue([this.actualXPosition(event.clientX), valueUpper], Control.Upper);
        }, this.handleTouchStartThumbLower = (event) => {
          this.props.disabled || (registerTouchMoveHandler(this.handleTouchMoveThumbLower), event.stopPropagation());
        }, this.handleTouchMoveThumbLower = (event) => {
          event.preventDefault();
          let valueUpper = this.state.value[1];
          this.setValue([this.actualXPosition(event.touches[0].clientX), valueUpper], Control.Upper);
        }, this.handleMouseDownThumbUpper = (event) => {
          event.button !== 0 || this.props.disabled || (registerMouseMoveHandler(this.handleMouseMoveThumbUpper), event.stopPropagation());
        }, this.handleMouseMoveThumbUpper = (event) => {
          let valueLower = this.state.value[0];
          this.setValue([valueLower, this.actualXPosition(event.clientX)], Control.Lower);
        }, this.handleTouchStartThumbUpper = (event) => {
          this.props.disabled || (registerTouchMoveHandler(this.handleTouchMoveThumbUpper), event.stopPropagation());
        }, this.handleTouchMoveThumbUpper = (event) => {
          event.preventDefault();
          let valueLower = this.state.value[0];
          this.setValue([valueLower, this.actualXPosition(event.touches[0].clientX)], Control.Lower);
        }, this.handleKeypressLower = (event) => {
          if (this.props.disabled)
            return;
          let {
            incrementValueLower,
            decrementValueLower
          } = this, handler = {
            [types.Key.UpArrow]: incrementValueLower,
            [types.Key.RightArrow]: incrementValueLower,
            [types.Key.DownArrow]: decrementValueLower,
            [types.Key.LeftArrow]: decrementValueLower
          }[event.keyCode];
          handler != null && (event.preventDefault(), event.stopPropagation(), handler());
        }, this.handleKeypressUpper = (event) => {
          if (this.props.disabled)
            return;
          let {
            incrementValueUpper,
            decrementValueUpper
          } = this, handler = {
            [types.Key.UpArrow]: incrementValueUpper,
            [types.Key.RightArrow]: incrementValueUpper,
            [types.Key.DownArrow]: decrementValueUpper,
            [types.Key.LeftArrow]: decrementValueUpper
          }[event.keyCode];
          handler != null && (event.preventDefault(), event.stopPropagation(), handler());
        }, this.incrementValueLower = () => {
          this.setValue([this.state.value[0] + this.props.step, this.state.value[1]], Control.Upper);
        }, this.decrementValueLower = () => {
          this.setValue([this.state.value[0] - this.props.step, this.state.value[1]], Control.Upper);
        }, this.incrementValueUpper = () => {
          this.setValue([this.state.value[0], this.state.value[1] + this.props.step], Control.Lower);
        }, this.decrementValueUpper = () => {
          this.setValue([this.state.value[0], this.state.value[1] - this.props.step], Control.Lower);
        }, this.dispatchValue = () => {
          let {
            onChange,
            id
          } = this.props, {
            value
          } = this.state;
          onChange(value, id);
        }, this.setValue = (dirtyValue, control) => {
          let {
            props: {
              min,
              max,
              step
            },
            state: {
              value
            }
          } = this, sanitizedValue = sanitizeValue(dirtyValue, min, max, step, control);
          isTupleEqual(sanitizedValue, value) === !1 && this.setState({
            value: sanitizedValue
          }, this.dispatchValue);
        }, this.handleMouseDownTrack = (event) => {
          if (event.button !== 0 || this.props.disabled)
            return;
          event.preventDefault();
          let clickXPosition = this.actualXPosition(event.clientX), {
            value
          } = this.state, distanceFromLowerThumb = Math.abs(value[0] - clickXPosition), distanceFromUpperThumb = Math.abs(value[1] - clickXPosition);
          distanceFromLowerThumb <= distanceFromUpperThumb ? (this.setValue([clickXPosition, value[1]], Control.Upper), registerMouseMoveHandler(this.handleMouseMoveThumbLower), this.thumbLower.current != null && this.thumbLower.current.focus()) : (this.setValue([value[0], clickXPosition], Control.Lower), registerMouseMoveHandler(this.handleMouseMoveThumbUpper), this.thumbUpper.current != null && this.thumbUpper.current.focus());
        }, this.handleTouchStartTrack = (event) => {
          if (this.props.disabled)
            return;
          event.preventDefault();
          let clickXPosition = this.actualXPosition(event.touches[0].clientX), {
            value
          } = this.state, distanceFromLowerThumb = Math.abs(value[0] - clickXPosition), distanceFromUpperThumb = Math.abs(value[1] - clickXPosition);
          distanceFromLowerThumb <= distanceFromUpperThumb ? (this.setValue([clickXPosition, value[1]], Control.Upper), registerTouchMoveHandler(this.handleTouchMoveThumbLower), this.thumbLower.current != null && this.thumbLower.current.focus()) : (this.setValue([value[0], clickXPosition], Control.Lower), registerTouchMoveHandler(this.handleTouchMoveThumbUpper), this.thumbUpper.current != null && this.thumbUpper.current.focus());
        }, this.actualXPosition = (dirtyXPosition) => {
          if (this.track.current) {
            let {
              min,
              max
            } = this.props, {
              trackLeft,
              trackWidth
            } = this.state;
            return (dirtyXPosition - trackLeft) / trackWidth * (max - min);
          } else
            return 0;
        };
      }
      static getDerivedStateFromProps(props, state) {
        let {
          min,
          step,
          max,
          value,
          onChange,
          id
        } = props, {
          prevValue
        } = state;
        if (isTupleEqual(prevValue, value))
          return null;
        let sanitizedValue = sanitizeValue(value, min, max, step);
        return isTupleEqual(value, sanitizedValue) || onChange(sanitizedValue, id), {
          prevValue: value,
          value: sanitizedValue
        };
      }
      componentDidMount() {
        this.setTrackPosition(), this.trackWrapper.current != null && this.trackWrapper.current.addEventListener("touchstart", this.handleTouchStartTrack, {
          passive: !1
        });
      }
      componentWillUnmount() {
        this.trackWrapper.current != null && this.trackWrapper.current.removeEventListener("touchstart", this.handleTouchStartTrack);
      }
      render() {
        let {
          id,
          min,
          max,
          prefix,
          suffix,
          disabled,
          output,
          error,
          onFocus,
          onBlur,
          label,
          labelAction,
          labelHidden,
          helpText
        } = this.props, {
          value
        } = this.state, idLower = id, idUpper = `${id}Upper`, describedBy = [];
        error && describedBy.push(`${id}Error`);
        let ariaDescribedBy = describedBy.length ? describedBy.join(" ") : void 0, trackWrapperClassName = css.classNames(DualThumb_module.default.TrackWrapper, error && DualThumb_module.default.error, disabled && DualThumb_module.default.disabled), thumbLowerClassName = css.classNames(DualThumb_module.default.Thumbs, DualThumb_module.default.ThumbLower, disabled && DualThumb_module.default.disabled), thumbUpperClassName = css.classNames(DualThumb_module.default.Thumbs, DualThumb_module.default.ThumbUpper, disabled && DualThumb_module.default.disabled), trackWidth = this.state.trackWidth, range = max - min, minValuePosition = min / range * trackWidth, leftPositionThumbLower = value[0] / range * trackWidth - minValuePosition, leftPositionThumbUpper = value[1] / range * trackWidth - minValuePosition, outputLowerClassName = css.classNames(DualThumb_module.default.Output, DualThumb_module.default.OutputLower), outputMarkupLower = !disabled && output ? /* @__PURE__ */ React2.createElement("output", {
          htmlFor: idLower,
          className: outputLowerClassName,
          style: {
            left: `${leftPositionThumbLower}px`
          }
        }, /* @__PURE__ */ React2.createElement("div", {
          className: DualThumb_module.default.OutputBubble
        }, /* @__PURE__ */ React2.createElement(Text4.Text, {
          as: "span",
          variant: "headingSm",
          alignment: "center"
        }, value[0]))) : null, outputUpperClassName = css.classNames(DualThumb_module.default.Output, DualThumb_module.default.OutputUpper), outputMarkupUpper = !disabled && output ? /* @__PURE__ */ React2.createElement("output", {
          htmlFor: idUpper,
          className: outputUpperClassName,
          style: {
            left: `${leftPositionThumbUpper}px`
          }
        }, /* @__PURE__ */ React2.createElement("div", {
          className: DualThumb_module.default.OutputBubble
        }, /* @__PURE__ */ React2.createElement(Text4.Text, {
          as: "span",
          variant: "headingSm",
          alignment: "center"
        }, value[1]))) : null, cssVars = {
          "--pc-range-slider-progress-lower": `${leftPositionThumbLower}px`,
          "--pc-range-slider-progress-upper": `${leftPositionThumbUpper}px`
        }, prefixMarkup = prefix && /* @__PURE__ */ React2.createElement("div", {
          className: DualThumb_module.default.Prefix
        }, prefix), suffixMarkup = suffix && /* @__PURE__ */ React2.createElement("div", {
          className: DualThumb_module.default.Suffix
        }, suffix);
        return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(Labelled.Labelled, {
          id,
          label,
          error,
          action: labelAction,
          labelHidden,
          helpText
        }, /* @__PURE__ */ React2.createElement("div", {
          className: css.classNames(DualThumb_module.default.DualThumb, RangeSlider_module.default.RangeSlider)
        }, prefixMarkup, /* @__PURE__ */ React2.createElement("div", {
          className: trackWrapperClassName,
          onMouseDown: this.handleMouseDownTrack,
          ref: this.trackWrapper
        }, /* @__PURE__ */ React2.createElement("div", {
          className: DualThumb_module.default.Track,
          style: cssVars,
          ref: this.track
        }), /* @__PURE__ */ React2.createElement("div", {
          className: RangeSlider_module.default["Track--dashed"]
        }), /* @__PURE__ */ React2.createElement("div", {
          id: idLower,
          className: thumbLowerClassName,
          style: {
            left: `${leftPositionThumbLower}px`
          },
          role: "slider",
          "aria-disabled": disabled,
          "aria-valuemin": min,
          "aria-valuemax": max,
          "aria-valuenow": value[0],
          "aria-invalid": Boolean(error),
          "aria-describedby": ariaDescribedBy,
          "aria-labelledby": Label.labelID(id),
          onFocus,
          onBlur,
          tabIndex: 0,
          onKeyDown: this.handleKeypressLower,
          onMouseDown: this.handleMouseDownThumbLower,
          onTouchStart: this.handleTouchStartThumbLower,
          ref: this.thumbLower
        }), outputMarkupLower, /* @__PURE__ */ React2.createElement("div", {
          id: idUpper,
          className: thumbUpperClassName,
          style: {
            left: `${leftPositionThumbUpper}px`
          },
          role: "slider",
          "aria-disabled": disabled,
          "aria-valuemin": min,
          "aria-valuemax": max,
          "aria-valuenow": value[1],
          "aria-invalid": Boolean(error),
          "aria-describedby": ariaDescribedBy,
          "aria-labelledby": Label.labelID(id),
          onFocus,
          onBlur,
          tabIndex: 0,
          onKeyDown: this.handleKeypressUpper,
          onMouseDown: this.handleMouseDownThumbUpper,
          onTouchStart: this.handleTouchStartThumbUpper,
          ref: this.thumbUpper
        }), outputMarkupUpper), suffixMarkup)), /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
          event: "resize",
          handler: this.setTrackPosition
        }));
      }
    };
    DualThumb.contextType = context.FeaturesContext;
    function registerMouseMoveHandler(handler) {
      document.addEventListener("mousemove", handler), document.addEventListener("mouseup", () => {
        document.removeEventListener("mousemove", handler);
      }, {
        once: !0
      });
    }
    function registerTouchMoveHandler(handler) {
      let removeHandler = () => {
        document.removeEventListener("touchmove", handler), document.removeEventListener("touchend", removeHandler), document.removeEventListener("touchcancel", removeHandler);
      };
      document.addEventListener("touchmove", handler, {
        passive: !1
      }), document.addEventListener("touchend", removeHandler, {
        once: !0
      }), document.addEventListener("touchcancel", removeHandler, {
        once: !0
      });
    }
    function sanitizeValue(value, min, max, step, control = Control.Upper) {
      let upperValue = inBoundsUpper(roundedToStep(value[1])), lowerValue = inBoundsLower(roundedToStep(value[0])), maxLowerValue = upperValue - step, minUpperValue = lowerValue + step;
      return control === Control.Upper && lowerValue > maxLowerValue ? lowerValue = maxLowerValue : control === Control.Lower && upperValue < minUpperValue && (upperValue = minUpperValue), [lowerValue, upperValue];
      function inBoundsUpper(value2) {
        let lowerMin = min + step;
        return value2 < lowerMin ? lowerMin : value2 > max ? max : value2;
      }
      function inBoundsLower(value2) {
        let upperMax = max - step;
        return value2 < min ? min : value2 > upperMax ? upperMax : value2;
      }
      function roundedToStep(value2) {
        return Math.round(value2 / step) * step;
      }
    }
    function isTupleEqual(a, b) {
      return a == null || b == null ? !1 : a[0] === b[0] && a[1] === b[1];
    }
    exports.DualThumb = DualThumb;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/RangeSlider/components/SingleThumb/SingleThumb.css.js
var require_SingleThumb_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/RangeSlider/components/SingleThumb/SingleThumb.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      SingleThumb: "Polaris-RangeSlider-SingleThumb",
      disabled: "Polaris-RangeSlider-SingleThumb--disabled",
      InputWrapper: "Polaris-RangeSlider-SingleThumb__InputWrapper",
      Prefix: "Polaris-RangeSlider-SingleThumb__Prefix",
      Suffix: "Polaris-RangeSlider-SingleThumb__Suffix",
      Input: "Polaris-RangeSlider-SingleThumb__Input",
      error: "Polaris-RangeSlider-SingleThumb--error",
      Output: "Polaris-RangeSlider-SingleThumb__Output",
      OutputBubble: "Polaris-RangeSlider-SingleThumb__OutputBubble"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/RangeSlider/utilities/invertNumber.js
var require_invertNumber = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/RangeSlider/utilities/invertNumber.js"(exports) {
    "use strict";
    function invertNumber(number) {
      return Math.sign(number) === 1 ? -Math.abs(number) : Math.sign(number) === -1 ? Math.abs(number) : 0;
    }
    exports.invertNumber = invertNumber;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/RangeSlider/components/SingleThumb/SingleThumb.js
var require_SingleThumb = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/RangeSlider/components/SingleThumb/SingleThumb.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), clamp = require_clamp(), RangeSlider_module = require_RangeSlider_css(), SingleThumb_module = require_SingleThumb_css(), invertNumber = require_invertNumber(), Text4 = require_Text(), Labelled = require_Labelled();
    function SingleThumb(props) {
      let {
        id,
        error,
        helpText,
        value,
        min,
        max,
        disabled,
        output,
        prefix,
        suffix,
        label,
        labelAction,
        labelHidden,
        step,
        onBlur,
        onFocus
      } = props, clampedValue = clamp.clamp(value, min, max), describedBy = [];
      error && describedBy.push(`${id}Error`), helpText && describedBy.push(Labelled.helpTextID(id));
      let ariaDescribedBy = describedBy.length ? describedBy.join(" ") : void 0, sliderProgress = (clampedValue - min) * 100 / (max - min), outputFactor = invertNumber.invertNumber((sliderProgress - 50) / 100), cssVars = {
        "--pc-range-slider-min": min,
        "--pc-range-slider-max": max,
        "--pc-range-slider-current": clampedValue,
        "--pc-range-slider-progress": `${sliderProgress}%`,
        "--pc-range-slider-output-factor": `${outputFactor}`
      }, outputMarkup = !disabled && output && /* @__PURE__ */ React2.createElement("output", {
        htmlFor: id,
        className: SingleThumb_module.default.Output
      }, /* @__PURE__ */ React2.createElement("div", {
        className: SingleThumb_module.default.OutputBubble
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "headingSm",
        alignment: "center"
      }, clampedValue))), prefixMarkup = prefix && /* @__PURE__ */ React2.createElement("div", {
        className: SingleThumb_module.default.Prefix
      }, prefix), suffixMarkup = suffix && /* @__PURE__ */ React2.createElement("div", {
        className: SingleThumb_module.default.Suffix
      }, suffix), className = css.classNames(SingleThumb_module.default.SingleThumb, RangeSlider_module.default.RangeSlider, error && SingleThumb_module.default.error, disabled && SingleThumb_module.default.disabled);
      return /* @__PURE__ */ React2.createElement(Labelled.Labelled, {
        id,
        label,
        error,
        action: labelAction,
        labelHidden,
        helpText
      }, /* @__PURE__ */ React2.createElement("div", {
        className,
        style: cssVars
      }, prefixMarkup, /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(SingleThumb_module.default.InputWrapper, RangeSlider_module.default["Track--dashed-after"])
      }, /* @__PURE__ */ React2.createElement("input", {
        type: "range",
        className: SingleThumb_module.default.Input,
        id,
        name: id,
        min,
        max,
        step,
        value: clampedValue,
        disabled,
        onChange: handleChange,
        onFocus,
        onBlur,
        "aria-valuemin": min,
        "aria-valuemax": max,
        "aria-valuenow": clampedValue,
        "aria-invalid": Boolean(error),
        "aria-describedby": ariaDescribedBy
      }), outputMarkup), suffixMarkup));
      function handleChange(event) {
        let {
          onChange
        } = props;
        onChange && onChange(parseFloat(event.currentTarget.value), id);
      }
    }
    exports.SingleThumb = SingleThumb;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/RangeSlider/RangeSlider.js
var require_RangeSlider = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/RangeSlider/RangeSlider.js"(exports) {
    "use strict";
    var React2 = require_react(), DualThumb = require_DualThumb(), SingleThumb = require_SingleThumb();
    function RangeSlider({
      min = 0,
      max = 100,
      step = 1,
      value,
      ...rest
    }) {
      let sharedProps = {
        id: React2.useId(),
        min,
        max,
        step,
        ...rest
      };
      return isDualThumb(value) ? /* @__PURE__ */ React2.createElement(DualThumb.DualThumb, Object.assign({
        value
      }, sharedProps)) : /* @__PURE__ */ React2.createElement(SingleThumb.SingleThumb, Object.assign({
        value
      }, sharedProps));
    }
    function isDualThumb(value) {
      return Array.isArray(value);
    }
    exports.RangeSlider = RangeSlider;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ResourceItem/ResourceItem.css.js
var require_ResourceItem_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ResourceItem/ResourceItem.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ResourceItem: "Polaris-ResourceItem",
      Actions: "Polaris-ResourceItem__Actions",
      ItemWrapper: "Polaris-ResourceItem__ItemWrapper",
      CheckboxWrapper: "Polaris-ResourceItem__CheckboxWrapper",
      focusedInner: "Polaris-ResourceItem--focusedInner",
      focused: "Polaris-ResourceItem--focused",
      selected: "Polaris-ResourceItem--selected",
      Link: "Polaris-ResourceItem__Link",
      Button: "Polaris-ResourceItem__Button",
      selectable: "Polaris-ResourceItem--selectable",
      disabled: "Polaris-ResourceItem--disabled",
      ListItem: "Polaris-ResourceItem__ListItem",
      hasBulkActions: "Polaris-ResourceItem--hasBulkActions"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/resource-list/types.js
var require_types6 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/resource-list/types.js"(exports) {
    "use strict";
    var SELECT_ALL_ITEMS = "All";
    exports.SELECT_ALL_ITEMS = SELECT_ALL_ITEMS;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ResourceItem/ResourceItem.js
var require_ResourceItem = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ResourceItem/ResourceItem.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), isEqual = require("react-fast-compare"), breakpoints = require_breakpoints(), css = require_css(), ResourceItem_module = require_ResourceItem_css(), types = require_types6(), context = require_context19(), hooks = require_hooks2(), Checkbox = require_Checkbox(), ButtonGroup = require_ButtonGroup(), utils = require_utils(), Popover = require_Popover(), Button4 = require_Button(), ActionList = require_ActionList(), Box4 = require_Box(), InlineGrid = require_InlineGrid(), InlineStack4 = require_InlineStack(), UnstyledLink = require_UnstyledLink(), BaseResourceItem = class extends React2.Component {
      constructor(...args) {
        super(...args), this.state = {
          actionsMenuVisible: !1,
          focused: !1,
          focusedInner: !1,
          selected: isSelected(this.props.id, this.props.context.selectedItems)
        }, this.node = null, this.overlayRef = /* @__PURE__ */ React2.createRef(), this.buttonOverlay = /* @__PURE__ */ React2.createRef(), this.setNode = (node) => {
          this.node = node;
        }, this.handleFocus = (event) => {
          event.target === this.buttonOverlay.current || this.node && event.target === this.overlayRef.current ? this.setState({
            focused: !0,
            focusedInner: !1
          }) : this.node && this.node.contains(event.target) && this.setState({
            focused: !0,
            focusedInner: !0
          });
        }, this.handleBlur = ({
          relatedTarget
        }) => {
          this.node && relatedTarget instanceof Element && this.node.contains(relatedTarget) || this.setState({
            focused: !1,
            focusedInner: !1
          });
        }, this.handleMouseOut = () => {
          this.state.focused && this.setState({
            focused: !1,
            focusedInner: !1
          }), this.props.onMouseOut && this.props.onMouseOut();
        }, this.handleLargerSelectionArea = (event) => {
          stopPropagation(event), this.handleSelection(!this.state.selected, event.nativeEvent.shiftKey);
        }, this.handleSelection = (value, shiftKey) => {
          let {
            id,
            sortOrder,
            context: {
              onSelectionChange
            }
          } = this.props;
          id == null || onSelectionChange == null || (this.setState({
            focused: value,
            focusedInner: value
          }), onSelectionChange(value, id, sortOrder, shiftKey));
        }, this.handleClick = (event) => {
          stopPropagation(event);
          let {
            id,
            onClick,
            url,
            context: {
              selectMode
            }
          } = this.props, {
            ctrlKey,
            metaKey
          } = event.nativeEvent, anchor = this.node && this.node.querySelector("a");
          if (selectMode) {
            this.handleLargerSelectionArea(event);
            return;
          }
          if (anchor !== event.target) {
            if (onClick && onClick(id), url && (ctrlKey || metaKey)) {
              window.open(url, "_blank");
              return;
            }
            url && anchor && anchor.click();
          }
        }, this.handleKeyUp = (event) => {
          let {
            disabled,
            onClick = noop,
            context: {
              selectMode
            }
          } = this.props, {
            key
          } = event;
          key === "Enter" && this.props.url && !selectMode && !disabled && onClick();
        }, this.handleActionsClick = () => {
          this.setState(({
            actionsMenuVisible
          }) => ({
            actionsMenuVisible: !actionsMenuVisible
          }));
        }, this.handleCloseRequest = () => {
          this.setState({
            actionsMenuVisible: !1
          });
        };
      }
      static getDerivedStateFromProps(nextProps, prevState) {
        let selected = isSelected(nextProps.id, nextProps.context.selectedItems);
        return prevState.selected === selected ? null : {
          selected
        };
      }
      shouldComponentUpdate(nextProps, nextState) {
        let {
          children: nextChildren,
          context: {
            selectedItems: nextSelectedItems,
            ...restNextContext
          },
          ...restNextProps
        } = nextProps, {
          children,
          context: {
            selectedItems,
            ...restContext
          },
          ...restProps
        } = this.props, nextSelectMode = nextProps.context.selectMode;
        return !isEqual(this.state, nextState) || this.props.context.selectMode !== nextSelectMode || !nextProps.context.selectMode && (!isEqual(restProps, restNextProps) || !isEqual(restContext, restNextContext));
      }
      render() {
        let {
          children,
          url,
          external,
          media,
          shortcutActions,
          ariaControls,
          ariaExpanded,
          persistActions = !1,
          accessibilityLabel,
          name,
          context: {
            selectable,
            selectMode,
            hasBulkActions,
            loading,
            resourceName
          },
          i18n,
          verticalAlignment,
          dataHref,
          breakpoints: breakpoints2,
          onMouseOver,
          disabled
        } = this.props, {
          actionsMenuVisible,
          focused,
          focusedInner,
          selected
        } = this.state, ownedMarkup = null, handleMarkup = null;
        if (selectable) {
          let checkboxAccessibilityLabel = name || accessibilityLabel || i18n.translate("Polaris.Common.checkbox");
          handleMarkup = /* @__PURE__ */ React2.createElement("div", {
            className: ResourceItem_module.default.CheckboxWrapper,
            onClick: stopPropagation,
            onChange: this.handleLargerSelectionArea
          }, /* @__PURE__ */ React2.createElement(UseId, null, (id) => /* @__PURE__ */ React2.createElement(Checkbox.Checkbox, {
            id,
            label: checkboxAccessibilityLabel,
            labelHidden: !0,
            checked: selected,
            disabled: loading || disabled,
            bleedInlineStart: "300",
            bleedInlineEnd: "300",
            bleedBlockStart: "300",
            bleedBlockEnd: "300",
            fill: !0,
            labelClassName: ResourceItem_module.default.CheckboxLabel
          })));
        }
        (media || selectable) && (ownedMarkup = /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
          gap: "300",
          blockAlign: media && selectable ? "center" : getAlignment(verticalAlignment)
        }, handleMarkup, media));
        let className = css.classNames(ResourceItem_module.default.ResourceItem, focused && ResourceItem_module.default.focused, selectable && ResourceItem_module.default.selectable, selected && ResourceItem_module.default.selected, selectMode && ResourceItem_module.default.selectMode, persistActions && ResourceItem_module.default.persistActions, focusedInner && ResourceItem_module.default.focusedInner, disabled && ResourceItem_module.default.disabled), listItemClassName = css.classNames(ResourceItem_module.default.ListItem, focused && !focusedInner && ResourceItem_module.default.focused, hasBulkActions && ResourceItem_module.default.hasBulkActions, selected && ResourceItem_module.default.selected, selectable && ResourceItem_module.default.selectable), actionsMarkup = null, disclosureMarkup = null;
        if (shortcutActions && !loading)
          if (persistActions) {
            actionsMarkup = breakpoints2?.lgUp ? /* @__PURE__ */ React2.createElement("div", {
              className: ResourceItem_module.default.Actions,
              onClick: stopPropagation
            }, /* @__PURE__ */ React2.createElement(ButtonGroup.ButtonGroup, null, utils.buttonsFrom(shortcutActions, {
              variant: "tertiary"
            }))) : null;
            let disclosureAccessibilityLabel = name ? i18n.translate("Polaris.ResourceList.Item.actionsDropdownLabel", {
              accessibilityLabel: name
            }) : i18n.translate("Polaris.ResourceList.Item.actionsDropdown");
            disclosureMarkup = !selectMode && breakpoints2?.lgDown ? /* @__PURE__ */ React2.createElement("div", {
              onClick: stopPropagation
            }, /* @__PURE__ */ React2.createElement(Popover.Popover, {
              activator: /* @__PURE__ */ React2.createElement(Button4.Button, {
                accessibilityLabel: disclosureAccessibilityLabel,
                onClick: this.handleActionsClick,
                variant: "tertiary",
                icon: polarisIcons.MenuHorizontalIcon
              }),
              onClose: this.handleCloseRequest,
              active: actionsMenuVisible
            }, /* @__PURE__ */ React2.createElement(ActionList.ActionList, {
              items: shortcutActions
            }))) : null;
          } else
            breakpoints2?.lgUp && (actionsMarkup = /* @__PURE__ */ React2.createElement("div", {
              className: ResourceItem_module.default.Actions,
              onClick: stopPropagation
            }, /* @__PURE__ */ React2.createElement(Box4.Box, {
              position: "absolute",
              insetBlockStart: "400",
              insetInlineEnd: "500"
            }, /* @__PURE__ */ React2.createElement(ButtonGroup.ButtonGroup, {
              variant: "segmented"
            }, utils.buttonsFrom(shortcutActions, {
              size: "slim"
            })))));
        let containerMarkup = /* @__PURE__ */ React2.createElement(Box4.Box, {
          id: this.props.id,
          position: "relative",
          paddingInlineStart: "300",
          paddingInlineEnd: "300",
          paddingBlockStart: "300",
          paddingBlockEnd: "300",
          zIndex: "var(--pc-resource-item-content-stacking-order)"
        }, /* @__PURE__ */ React2.createElement(InlineGrid.InlineGrid, {
          columns: {
            xs: "1fr auto"
          }
        }, /* @__PURE__ */ React2.createElement(InlineGrid.InlineGrid, {
          columns: {
            xs: media || selectable ? "auto 1fr" : "1fr"
          },
          gap: "300"
        }, ownedMarkup, /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
          blockAlign: getAlignment(verticalAlignment)
        }, /* @__PURE__ */ React2.createElement(Box4.Box, {
          width: "100%",
          padding: "0"
        }, children))), actionsMarkup, disclosureMarkup)), tabIndex = loading ? -1 : 0, ariaLabel = accessibilityLabel || i18n.translate("Polaris.ResourceList.Item.viewItem", {
          itemName: name || resourceName && resourceName.singular || ""
        }), accessibleMarkup = url ? /* @__PURE__ */ React2.createElement(UseId, null, (id) => /* @__PURE__ */ React2.createElement(UnstyledLink.UnstyledLink, {
          "aria-describedby": this.props.id,
          "aria-label": ariaLabel,
          className: ResourceItem_module.default.Link,
          url,
          external,
          tabIndex,
          id,
          ref: this.overlayRef
        })) : /* @__PURE__ */ React2.createElement("button", {
          className: ResourceItem_module.default.Button,
          "aria-label": ariaLabel,
          "aria-controls": ariaControls,
          "aria-expanded": ariaExpanded,
          onClick: this.handleClick,
          tabIndex,
          ref: this.buttonOverlay
        });
        return /* @__PURE__ */ React2.createElement("li", {
          className: listItemClassName,
          "data-href": dataHref
        }, /* @__PURE__ */ React2.createElement("div", {
          className: ResourceItem_module.default.ItemWrapper
        }, /* @__PURE__ */ React2.createElement("div", {
          ref: this.setNode,
          className,
          onClick: disabled ? () => {
          } : this.handleClick,
          onFocus: this.handleFocus,
          onBlur: this.handleBlur,
          onKeyUp: this.handleKeyUp,
          onMouseOver,
          onMouseOut: this.handleMouseOut,
          "data-href": url
        }, disabled ? null : accessibleMarkup, containerMarkup)));
      }
      // This fires onClick when there is a URL on the item
    };
    function noop() {
    }
    function stopPropagation(event) {
      event.stopPropagation();
    }
    function isSelected(id, selectedItems) {
      return Boolean(selectedItems && (Array.isArray(selectedItems) && selectedItems.includes(id) || selectedItems === types.SELECT_ALL_ITEMS));
    }
    function ResourceItem(props) {
      let breakpoints$1 = breakpoints.useBreakpoints();
      return /* @__PURE__ */ React2.createElement(BaseResourceItem, Object.assign({}, props, {
        breakpoints: breakpoints$1,
        context: React2.useContext(context.ResourceListContext),
        i18n: hooks.useI18n()
      }));
    }
    function getAlignment(alignment) {
      switch (alignment) {
        case "leading":
          return "start";
        case "trailing":
          return "end";
        case "center":
          return "center";
        case "fill":
          return "stretch";
        case "baseline":
          return "baseline";
        default:
          return "start";
      }
    }
    function UseId(props) {
      let id = React2.useId();
      return props.children(id);
    }
    exports.ResourceItem = ResourceItem;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ResourceList/ResourceList.css.js
var require_ResourceList_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ResourceList/ResourceList.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      FiltersWrapper: "Polaris-ResourceList__FiltersWrapper",
      ResourceListWrapper: "Polaris-ResourceList__ResourceListWrapper",
      ResourceList: "Polaris-ResourceList",
      HeaderOuterWrapper: "Polaris-ResourceList__HeaderOuterWrapper",
      BulkActionsWrapper: "Polaris-ResourceList__BulkActionsWrapper",
      "HeaderWrapper-disabled": "Polaris-ResourceList__HeaderWrapper--disabled",
      "HeaderWrapper-overlay": "Polaris-ResourceList__HeaderWrapper--overlay",
      HeaderWrapper: "Polaris-ResourceList__HeaderWrapper",
      "HeaderWrapper-isSticky": "Polaris-ResourceList__HeaderWrapper--isSticky",
      HeaderContentWrapper: "Polaris-ResourceList__HeaderContentWrapper",
      "HeaderWrapper-inSelectMode": "Polaris-ResourceList__HeaderWrapper--inSelectMode",
      SortWrapper: "Polaris-ResourceList__SortWrapper",
      AlternateToolWrapper: "Polaris-ResourceList__AlternateToolWrapper",
      "HeaderWrapper-hasSelect": "Polaris-ResourceList__HeaderWrapper--hasSelect",
      "HeaderWrapper-hasAlternateTool": "Polaris-ResourceList__HeaderWrapper--hasAlternateTool",
      "HeaderWrapper-hasSort": "Polaris-ResourceList__HeaderWrapper--hasSort",
      HeaderTitleWrapper: "Polaris-ResourceList__HeaderTitleWrapper",
      SelectAllActionsWrapper: "Polaris-ResourceList__SelectAllActionsWrapper",
      SelectAllActionsWrapperSticky: "Polaris-ResourceList__SelectAllActionsWrapperSticky",
      SelectAllActionsWrapperAtEnd: "Polaris-ResourceList__SelectAllActionsWrapperAtEnd",
      SelectAllActionsWrapperAtEndAppear: "Polaris-ResourceList__SelectAllActionsWrapperAtEndAppear",
      BulkActionsWrapperVisible: "Polaris-ResourceList__BulkActionsWrapperVisible",
      PaginationWrapper: "Polaris-ResourceList__PaginationWrapper",
      CheckableButtonWrapper: "Polaris-ResourceList__CheckableButtonWrapper",
      SelectButtonWrapper: "Polaris-ResourceList__SelectButtonWrapper",
      EmptySearchResultWrapper: "Polaris-ResourceList__EmptySearchResultWrapper",
      ItemWrapper: "Polaris-ResourceList__ItemWrapper",
      "ItemWrapper-isLoading": "Polaris-ResourceList__ItemWrapper--isLoading",
      SpinnerContainer: "Polaris-ResourceList__SpinnerContainer",
      LoadingOverlay: "Polaris-ResourceList__LoadingOverlay",
      DisabledPointerEvents: "Polaris-ResourceList__DisabledPointerEvents",
      disableTextSelection: "Polaris-ResourceList--disableTextSelection"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Select/Select.css.js
var require_Select_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Select/Select.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Select: "Polaris-Select",
      disabled: "Polaris-Select--disabled",
      error: "Polaris-Select--error",
      Backdrop: "Polaris-Select__Backdrop",
      Input: "Polaris-Select__Input",
      Content: "Polaris-Select__Content",
      InlineLabel: "Polaris-Select__InlineLabel",
      Icon: "Polaris-Select__Icon",
      SelectedOption: "Polaris-Select__SelectedOption",
      Prefix: "Polaris-Select__Prefix",
      hover: "Polaris-Select--hover",
      toneMagic: "Polaris-Select--toneMagic"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Select/Select.js
var require_Select = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Select/Select.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), useToggle = require_use_toggle(), Select_module = require_Select_css(), Icon2 = require_Icon(), Labelled = require_Labelled(), Box4 = require_Box(), Text4 = require_Text(), PLACEHOLDER_VALUE = "";
    function Select2({
      options: optionsProp,
      label,
      labelAction,
      labelHidden: labelHiddenProp,
      labelInline,
      disabled,
      helpText,
      placeholder,
      id: idProp,
      name,
      value = PLACEHOLDER_VALUE,
      error,
      onChange,
      onFocus,
      onBlur,
      requiredIndicator,
      tone
    }) {
      let {
        value: focused,
        toggle: toggleFocused
      } = useToggle.useToggle(!1), uniqId = React2.useId(), id = idProp ?? uniqId, labelHidden = labelInline ? !0 : labelHiddenProp, className = css.classNames(Select_module.default.Select, error && Select_module.default.error, tone && Select_module.default[css.variationName("tone", tone)], disabled && Select_module.default.disabled), handleFocus = React2.useCallback((event) => {
        toggleFocused(), onFocus?.(event);
      }, [onFocus, toggleFocused]), handleBlur = React2.useCallback((event) => {
        toggleFocused(), onBlur?.(event);
      }, [onBlur, toggleFocused]), handleChange = onChange ? (event) => onChange(event.currentTarget.value, id) : void 0, describedBy = [];
      helpText && describedBy.push(Labelled.helpTextID(id)), error && describedBy.push(`${id}Error`);
      let normalizedOptions = (optionsProp || []).map(normalizeOption);
      placeholder && (normalizedOptions = [{
        label: placeholder,
        value: PLACEHOLDER_VALUE,
        disabled: !0
      }, ...normalizedOptions]);
      let inlineLabelMarkup = labelInline && /* @__PURE__ */ React2.createElement(Box4.Box, {
        paddingInlineEnd: "100"
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "bodyMd",
        tone: tone && tone === "magic" && !focused ? "magic-subdued" : "subdued",
        truncate: !0
      }, label)), selectedOption = getSelectedOption(normalizedOptions, value), prefixMarkup = selectedOption.prefix && /* @__PURE__ */ React2.createElement("div", {
        className: Select_module.default.Prefix
      }, selectedOption.prefix), contentMarkup = /* @__PURE__ */ React2.createElement("div", {
        className: Select_module.default.Content,
        "aria-hidden": !0,
        "aria-disabled": disabled
      }, inlineLabelMarkup, prefixMarkup, /* @__PURE__ */ React2.createElement("span", {
        className: Select_module.default.SelectedOption
      }, selectedOption.label), /* @__PURE__ */ React2.createElement("span", {
        className: Select_module.default.Icon
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.SelectIcon
      }))), optionsMarkup = normalizedOptions.map(renderOption);
      return /* @__PURE__ */ React2.createElement(Labelled.Labelled, {
        id,
        label,
        error,
        action: labelAction,
        labelHidden,
        helpText,
        requiredIndicator,
        disabled
      }, /* @__PURE__ */ React2.createElement("div", {
        className
      }, /* @__PURE__ */ React2.createElement("select", {
        id,
        name,
        value,
        className: Select_module.default.Input,
        disabled,
        onFocus: handleFocus,
        onBlur: handleBlur,
        onChange: handleChange,
        "aria-invalid": Boolean(error),
        "aria-describedby": describedBy.length ? describedBy.join(" ") : void 0,
        "aria-required": requiredIndicator
      }, optionsMarkup), contentMarkup, /* @__PURE__ */ React2.createElement("div", {
        className: Select_module.default.Backdrop
      })));
    }
    function isString(option) {
      return typeof option == "string";
    }
    function isGroup(option) {
      return typeof option == "object" && "options" in option && option.options != null;
    }
    function normalizeStringOption(option) {
      return {
        label: option,
        value: option
      };
    }
    function normalizeOption(option) {
      if (isString(option))
        return normalizeStringOption(option);
      if (isGroup(option)) {
        let {
          title,
          options
        } = option;
        return {
          title,
          options: options.map((option2) => isString(option2) ? normalizeStringOption(option2) : option2)
        };
      }
      return option;
    }
    function getSelectedOption(options, value) {
      let flatOptions = flattenOptions(options), selectedOption = flatOptions.find((option) => value === option.value);
      return selectedOption === void 0 && (selectedOption = flatOptions.find((option) => !option.hidden)), selectedOption || {
        value: "",
        label: ""
      };
    }
    function flattenOptions(options) {
      let flatOptions = [];
      return options.forEach((optionOrGroup) => {
        isGroup(optionOrGroup) ? flatOptions = flatOptions.concat(optionOrGroup.options) : flatOptions.push(optionOrGroup);
      }), flatOptions;
    }
    function renderSingleOption(option) {
      let {
        value,
        label,
        prefix: _prefix,
        key,
        ...rest
      } = option;
      return /* @__PURE__ */ React2.createElement("option", Object.assign({
        key: key ?? value,
        value
      }, rest), label);
    }
    function renderOption(optionOrGroup) {
      if (isGroup(optionOrGroup)) {
        let {
          title,
          options
        } = optionOrGroup;
        return /* @__PURE__ */ React2.createElement("optgroup", {
          label: title,
          key: title
        }, options.map(renderSingleOption));
      }
      return renderSingleOption(optionOrGroup);
    }
    exports.Select = Select2;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ResourceList/ResourceList.js
var require_ResourceList = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ResourceList/ResourceList.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), polarisTokens = require("@shopify/polaris-tokens"), debounce = require_debounce(), css = require_css(), components = require_components(), useLazyRef = require_use_lazy_ref(), useEventListener = require_use_event_listener(), ResourceList_module = require_ResourceList_css(), types = require_types6(), Select2 = require_Select(), ResourceItem = require_ResourceItem(), hooks = require_hooks2(), Text4 = require_Text(), Button4 = require_Button(), CheckableButton = require_CheckableButton(), Sticky = require_Sticky(), EmptySearchResult = require_EmptySearchResult(), Spinner2 = require_Spinner(), Pagination = require_Pagination(), context = require_context19(), BulkActions = require_BulkActions(), SMALL_SPINNER_HEIGHT = 28, LARGE_SPINNER_HEIGHT = 45;
    function getAllItemsOnPage(items, idForItem) {
      return items.map((item, index) => idForItem(item, index));
    }
    var isBreakpointsXS = () => typeof window > "u" ? !1 : window.innerWidth < parseFloat(polarisTokens.toPx(polarisTokens.themeDefault.breakpoints["breakpoints-sm"]) ?? "");
    function defaultIdForItem(item, index) {
      return Object.prototype.hasOwnProperty.call(item, "id") ? item.id : index.toString();
    }
    function ResourceList({
      items,
      filterControl,
      flushFilters,
      emptyState,
      emptySearchState,
      resourceName: resourceNameProp,
      promotedBulkActions,
      bulkActions,
      selectedItems = [],
      isFiltered,
      selectable,
      hasMoreItems,
      loading,
      headerContent,
      showHeader,
      totalItemsCount,
      sortValue,
      sortOptions,
      alternateTool,
      onSortChange,
      onSelectionChange,
      renderItem,
      idForItem = defaultIdForItem,
      resolveItemId,
      pagination
    }) {
      let i18n = hooks.useI18n(), [selectMode, setSelectMode] = React2.useState(Boolean(selectedItems && selectedItems.length > 0)), [loadingPosition, setLoadingPositionState] = React2.useState(0), [lastSelected, setLastSelected] = React2.useState(), [smallScreen, setSmallScreen] = React2.useState(isBreakpointsXS()), forceUpdate = React2.useReducer((x = 0) => x + 1, 0)[1], checkableButtonRef = React2.useRef(null), defaultResourceName = useLazyRef.useLazyRef(() => ({
        singular: i18n.translate("Polaris.ResourceList.defaultItemSingular"),
        plural: i18n.translate("Polaris.ResourceList.defaultItemPlural")
      })), listRef = React2.useRef(null), handleSelectMode = (selectMode2) => {
        setSelectMode(selectMode2), !selectMode2 && onSelectionChange && onSelectionChange([]);
      }, handleResize = debounce.debounce(() => {
        let newSmallScreen = isBreakpointsXS();
        selectedItems && selectedItems.length === 0 && selectMode && !newSmallScreen && handleSelectMode(!1), smallScreen !== newSmallScreen && setSmallScreen(newSmallScreen);
      }, 50, {
        leading: !0,
        trailing: !0,
        maxWait: 50
      });
      useEventListener.useEventListener("resize", handleResize);
      let isSelectable = Boolean(promotedBulkActions && promotedBulkActions.length > 0 || bulkActions && bulkActions.length > 0 || selectable) && !smallScreen, selectAllSelectState = React2.useMemo(() => {
        let selectState = "indeterminate";
        return !selectedItems || Array.isArray(selectedItems) && selectedItems.length === 0 ? selectState = !1 : (selectedItems === types.SELECT_ALL_ITEMS || Array.isArray(selectedItems) && selectedItems.length === items.length) && (selectState = !0), selectState;
      }, [items.length, selectedItems]), resourceName = resourceNameProp || defaultResourceName.current, headerTitle = () => {
        let itemsCount = items.length, resource = !loading && (!totalItemsCount && itemsCount === 1 || totalItemsCount === 1) ? resourceName.singular : resourceName.plural;
        return loading ? i18n.translate("Polaris.ResourceList.loading", {
          resource
        }) : totalItemsCount ? i18n.translate("Polaris.ResourceList.showingTotalCount", {
          itemsCount,
          totalItemsCount,
          resource
        }) : headerContent || i18n.translate("Polaris.ResourceList.showing", {
          itemsCount,
          resource
        });
      }, [selectedItemsCount, setSelectedItemsCount] = React2.useState(selectedItems === types.SELECT_ALL_ITEMS ? `${items.length}+` : selectedItems.length);
      React2.useEffect(() => {
        (selectedItems === types.SELECT_ALL_ITEMS || selectedItems.length > 0) && setSelectedItemsCount(selectedItems === types.SELECT_ALL_ITEMS ? `${items.length}+` : selectedItems.length);
      }, [selectedItems, items.length]);
      let selectAllActionsLabel = i18n.translate("Polaris.ResourceList.selected", {
        selectedItemsCount
      }), bulkActionsAccessibilityLabel = React2.useMemo(() => {
        let selectedItemsCount2 = selectedItems.length, totalItemsCount2 = items.length, allSelected = selectedItemsCount2 === totalItemsCount2;
        return totalItemsCount2 === 1 && allSelected ? i18n.translate("Polaris.ResourceList.a11yCheckboxDeselectAllSingle", {
          resourceNameSingular: resourceName.singular
        }) : totalItemsCount2 === 1 ? i18n.translate("Polaris.ResourceList.a11yCheckboxSelectAllSingle", {
          resourceNameSingular: resourceName.singular
        }) : allSelected ? i18n.translate("Polaris.ResourceList.a11yCheckboxDeselectAllMultiple", {
          itemsLength: items.length,
          resourceNamePlural: resourceName.plural
        }) : i18n.translate("Polaris.ResourceList.a11yCheckboxSelectAllMultiple", {
          itemsLength: items.length,
          resourceNamePlural: resourceName.plural
        });
      }, [i18n, items.length, resourceName.singular, resourceName.plural, selectedItems.length]), paginatedSelectAllText = React2.useMemo(() => {
        if (!(!isSelectable || !hasMoreItems) && selectedItems === types.SELECT_ALL_ITEMS)
          return i18n.translate(isFiltered ? "Polaris.ResourceList.allFilteredItemsSelected" : "Polaris.ResourceList.allItemsSelected", {
            itemsLength: items.length,
            resourceNamePlural: resourceName.plural
          });
      }, [hasMoreItems, i18n, isFiltered, isSelectable, items, resourceName.plural, selectedItems]), handleSelectAllItemsInStore = React2.useCallback(() => {
        let newlySelectedItems = selectedItems === types.SELECT_ALL_ITEMS ? getAllItemsOnPage(items, idForItem) : types.SELECT_ALL_ITEMS;
        onSelectionChange && onSelectionChange(newlySelectedItems);
      }, [idForItem, items, onSelectionChange, selectedItems]), paginatedSelectAllAction = React2.useMemo(() => !isSelectable || !hasMoreItems ? void 0 : {
        content: selectedItems === types.SELECT_ALL_ITEMS ? i18n.translate("Polaris.Common.undo") : i18n.translate(isFiltered ? "Polaris.ResourceList.selectAllFilteredItems" : "Polaris.ResourceList.selectAllItems", {
          itemsLength: items.length,
          resourceNamePlural: resourceName.plural
        }),
        onAction: handleSelectAllItemsInStore
      }, [handleSelectAllItemsInStore, hasMoreItems, i18n, isFiltered, isSelectable, items.length, resourceName.plural, selectedItems]), emptySearchResultText = {
        title: i18n.translate("Polaris.ResourceList.emptySearchResultTitle", {
          resourceNamePlural: resourceName.plural
        }),
        description: i18n.translate("Polaris.ResourceList.emptySearchResultDescription")
      }, setLoadingPosition = React2.useCallback(() => {
        if (listRef.current != null) {
          if (typeof window > "u")
            return;
          let overlay = listRef.current.getBoundingClientRect(), viewportHeight = Math.max(document.documentElement ? document.documentElement.clientHeight : 0, window.innerHeight || 0), overflow = viewportHeight - overlay.height, spinnerHeight = items.length === 1 ? SMALL_SPINNER_HEIGHT : LARGE_SPINNER_HEIGHT, spinnerPosition = overflow > 0 ? (overlay.height - spinnerHeight) / 2 : (viewportHeight - overlay.top - spinnerHeight) / 2;
          setLoadingPositionState(spinnerPosition);
        }
      }, [listRef, items.length]), itemsExist = items.length > 0;
      React2.useEffect(() => {
        loading && setLoadingPosition();
      }, [loading, setLoadingPosition]), React2.useEffect(() => {
        selectedItems && selectedItems.length > 0 && !selectMode && setSelectMode(!0), (!selectedItems || selectedItems.length === 0) && !isBreakpointsXS() && setSelectMode(!1);
      }, [selectedItems, selectMode]), React2.useEffect(() => {
        forceUpdate();
      }, [forceUpdate, items]);
      let renderItemWithId = (item, index) => {
        let id = idForItem(item, index);
        return renderItem(item, id, index);
      }, handleMultiSelectionChange = (lastSelected2, currentSelected, resolveItemId2) => {
        let min = Math.min(lastSelected2, currentSelected), max = Math.max(lastSelected2, currentSelected);
        return items.slice(min, max + 1).map(resolveItemId2);
      }, handleSelectionChange = (selected, id, sortOrder, shiftKey) => {
        if (selectedItems == null || onSelectionChange == null)
          return;
        let newlySelectedItems = selectedItems === types.SELECT_ALL_ITEMS ? getAllItemsOnPage(items, idForItem) : [...selectedItems];
        sortOrder !== void 0 && setLastSelected(sortOrder);
        let lastSelectedFromState = lastSelected, selectedIds = [id];
        if (shiftKey && lastSelectedFromState != null && sortOrder !== void 0 && resolveItemId && (selectedIds = handleMultiSelectionChange(lastSelectedFromState, sortOrder, resolveItemId)), newlySelectedItems = [.../* @__PURE__ */ new Set([...newlySelectedItems, ...selectedIds])], !selected)
          for (let selectedId of selectedIds)
            newlySelectedItems.splice(newlySelectedItems.indexOf(selectedId), 1);
        newlySelectedItems.length === 0 && !isBreakpointsXS() ? handleSelectMode(!1) : newlySelectedItems.length > 0 && handleSelectMode(!0), onSelectionChange && onSelectionChange(newlySelectedItems);
      }, handleToggleAll = () => {
        let newlySelectedItems;
        Array.isArray(selectedItems) && selectedItems.length === items.length || selectedItems === types.SELECT_ALL_ITEMS ? newlySelectedItems = [] : newlySelectedItems = items.map((item, index) => idForItem(item, index)), newlySelectedItems.length === 0 && !isBreakpointsXS() ? handleSelectMode(!1) : newlySelectedItems.length > 0 && handleSelectMode(!0), onSelectionChange && onSelectionChange(newlySelectedItems), setTimeout(() => {
          checkableButtonRef?.current?.focus();
        }, 0);
      }, bulkActionClassNames = css.classNames(ResourceList_module.default.BulkActionsWrapper, selectMode && ResourceList_module.default.BulkActionsWrapperVisible), bulkActionsMarkup = isSelectable ? /* @__PURE__ */ React2.createElement("div", {
        className: bulkActionClassNames
      }, /* @__PURE__ */ React2.createElement(BulkActions.BulkActions, {
        selectMode,
        onSelectModeToggle: handleSelectMode,
        label: selectAllActionsLabel,
        paginatedSelectAllAction,
        paginatedSelectAllText,
        promotedActions: promotedBulkActions,
        actions: bulkActions,
        disabled: loading,
        accessibilityLabel: bulkActionsAccessibilityLabel,
        selected: selectAllSelectState,
        onToggleAll: handleToggleAll,
        ref: checkableButtonRef,
        buttonSize: "medium"
      })) : null, filterControlMarkup = filterControl ? /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(!flushFilters && ResourceList_module.default.FiltersWrapper)
      }, filterControl) : null, sortingSelectMarkup = sortOptions && sortOptions.length > 0 && !alternateTool ? /* @__PURE__ */ React2.createElement("div", {
        className: ResourceList_module.default.SortWrapper
      }, /* @__PURE__ */ React2.createElement(Select2.Select, {
        label: i18n.translate("Polaris.ResourceList.sortingLabel"),
        labelInline: !smallScreen,
        labelHidden: smallScreen,
        options: sortOptions,
        onChange: onSortChange,
        value: sortValue,
        disabled: selectMode
      })) : null, alternateToolMarkup = alternateTool && !sortingSelectMarkup ? /* @__PURE__ */ React2.createElement("div", {
        className: ResourceList_module.default.AlternateToolWrapper
      }, alternateTool) : null, headerTitleMarkup = /* @__PURE__ */ React2.createElement("div", {
        className: ResourceList_module.default.HeaderTitleWrapper
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "bodyMd"
      }, headerTitle())), selectButtonMarkup = isSelectable ? /* @__PURE__ */ React2.createElement("div", {
        className: ResourceList_module.default.SelectButtonWrapper
      }, /* @__PURE__ */ React2.createElement(Button4.Button, {
        disabled: selectMode,
        icon: polarisIcons.CheckboxIcon,
        onClick: () => handleSelectMode(!0)
      }, i18n.translate("Polaris.ResourceList.selectButtonText"))) : null, checkableButtonMarkup = isSelectable ? /* @__PURE__ */ React2.createElement("div", {
        className: ResourceList_module.default.CheckableButtonWrapper
      }, /* @__PURE__ */ React2.createElement(CheckableButton.CheckableButton, {
        accessibilityLabel: bulkActionsAccessibilityLabel,
        label: headerTitle(),
        onToggleAll: handleToggleAll,
        disabled: loading,
        ref: checkableButtonRef,
        selected: selectAllSelectState
      })) : null, needsHeader = isSelectable || sortOptions && sortOptions.length > 0 || alternateTool, headerWrapperOverlay = loading ? /* @__PURE__ */ React2.createElement("div", {
        className: ResourceList_module.default["HeaderWrapper-overlay"]
      }) : null, showEmptyState = emptyState && !itemsExist && !loading, showEmptySearchState = !showEmptyState && filterControl && !itemsExist && !loading, headerMarkup = !showEmptyState && showHeader !== !1 && !showEmptySearchState && (showHeader || needsHeader) && listRef.current && /* @__PURE__ */ React2.createElement("div", {
        className: ResourceList_module.default.HeaderOuterWrapper
      }, /* @__PURE__ */ React2.createElement(Sticky.Sticky, {
        boundingElement: listRef.current
      }, (isSticky) => {
        let headerClassName = css.classNames(ResourceList_module.default.HeaderWrapper, sortOptions && sortOptions.length > 0 && !alternateTool && ResourceList_module.default["HeaderWrapper-hasSort"], alternateTool && ResourceList_module.default["HeaderWrapper-hasAlternateTool"], isSelectable && ResourceList_module.default["HeaderWrapper-hasSelect"], loading && ResourceList_module.default["HeaderWrapper-disabled"], isSelectable && selectMode && bulkActionsMarkup && ResourceList_module.default["HeaderWrapper-inSelectMode"], isSticky && ResourceList_module.default["HeaderWrapper-isSticky"]);
        return /* @__PURE__ */ React2.createElement("div", {
          className: headerClassName
        }, headerWrapperOverlay, /* @__PURE__ */ React2.createElement("div", {
          className: ResourceList_module.default.HeaderContentWrapper
        }, headerTitleMarkup, checkableButtonMarkup, alternateToolMarkup, sortingSelectMarkup, selectButtonMarkup), bulkActionsMarkup);
      })), emptySearchStateMarkup = showEmptySearchState ? emptySearchState || /* @__PURE__ */ React2.createElement("div", {
        className: ResourceList_module.default.EmptySearchResultWrapper
      }, /* @__PURE__ */ React2.createElement(EmptySearchResult.EmptySearchResult, Object.assign({}, emptySearchResultText, {
        withIllustration: !0
      }))) : null, emptyStateMarkup = showEmptyState ? emptyState : null, defaultTopPadding = 8, spinnerStyle = {
        paddingTop: `${loadingPosition > 0 ? loadingPosition : defaultTopPadding}px`
      }, spinnerSize = items.length < 2 ? "small" : "large", loadingOverlay = loading ? /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("li", {
        className: ResourceList_module.default.SpinnerContainer,
        style: spinnerStyle
      }, /* @__PURE__ */ React2.createElement(Spinner2.Spinner, {
        size: spinnerSize,
        accessibilityLabel: "Items are loading"
      })), /* @__PURE__ */ React2.createElement("li", {
        className: ResourceList_module.default.LoadingOverlay
      })) : null, className = css.classNames(ResourceList_module.default.ItemWrapper, loading && ResourceList_module.default["ItemWrapper-isLoading"]), loadingWithoutItemsMarkup = loading && !itemsExist ? /* @__PURE__ */ React2.createElement("div", {
        className,
        tabIndex: -1
      }, loadingOverlay) : null, resourceListClassName = css.classNames(ResourceList_module.default.ResourceList, loading && ResourceList_module.default.disabledPointerEvents, selectMode && ResourceList_module.default.disableTextSelection), listMarkup = itemsExist ? /* @__PURE__ */ React2.createElement("ul", {
        className: resourceListClassName,
        ref: listRef,
        "aria-live": "polite",
        "aria-busy": loading
      }, loadingOverlay, React2.Children.toArray(items.map(renderItemWithId))) : null, paginationMarkup = pagination ? /* @__PURE__ */ React2.createElement("div", {
        className: ResourceList_module.default.PaginationWrapper
      }, /* @__PURE__ */ React2.createElement(Pagination.Pagination, Object.assign({
        type: "table"
      }, pagination))) : null, context$1 = {
        selectable: isSelectable,
        selectedItems,
        selectMode,
        hasBulkActions: Boolean(bulkActions),
        resourceName,
        loading,
        onSelectionChange: handleSelectionChange
      };
      return /* @__PURE__ */ React2.createElement(context.ResourceListContext.Provider, {
        value: context$1
      }, filterControlMarkup, /* @__PURE__ */ React2.createElement("div", {
        className: ResourceList_module.default.ResourceListWrapper
      }, headerMarkup, listMarkup, emptySearchStateMarkup, emptyStateMarkup, loadingWithoutItemsMarkup, paginationMarkup));
    }
    ResourceList.Item = ResourceItem.ResourceItem;
    exports.ResourceList = ResourceList;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SelectAllActions/SelectAllActions.css.js
var require_SelectAllActions_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SelectAllActions/SelectAllActions.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      SelectAllActions: "Polaris-SelectAllActions",
      "SelectAllActions-not-sticky": "Polaris-SelectAllActions--selectAllActionsNotSticky",
      "SelectAllActions-entering": "Polaris-SelectAllActions__SelectAllActions--entering",
      "SelectAllActions-exiting": "Polaris-SelectAllActions__SelectAllActions--exiting",
      "SelectAllActions-hasPagination": "Polaris-SelectAllActions__SelectAllActions--hasPagination",
      "SelectAllActions-exited": "Polaris-SelectAllActions__SelectAllActions--exited",
      "SelectAllActions-entered": "Polaris-SelectAllActions__SelectAllActions--entered",
      AllAction: "Polaris-SelectAllActions__AllAction"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SelectAllActions/SelectAllActions.js
var require_SelectAllActions = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SelectAllActions/SelectAllActions.js"(exports) {
    "use strict";
    var React2 = require_react(), reactTransitionGroup = require("react-transition-group"), css = require_css(), SelectAllActions_module = require_SelectAllActions_css(), UnstyledButton = require_UnstyledButton(), Text4 = require_Text(), CheckableButton = require_CheckableButton(), Box4 = require_Box(), InlineStack4 = require_InlineStack(), SelectAllActions = /* @__PURE__ */ React2.forwardRef(function({
      label,
      selectMode,
      paginatedSelectAllText,
      paginatedSelectAllAction,
      disabled,
      isSticky,
      hasPagination,
      accessibilityLabel,
      selected,
      onToggleAll
    }, ref) {
      let nodeRef = React2.useRef(null), paginatedSelectAllMarkup = paginatedSelectAllAction ? /* @__PURE__ */ React2.createElement(UnstyledButton.UnstyledButton, {
        className: SelectAllActions_module.default.AllAction,
        onClick: paginatedSelectAllAction.onAction,
        size: "slim",
        disabled
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        variant: "bodySm",
        fontWeight: "medium"
      }, paginatedSelectAllAction.content)) : null, hasTextAndAction = paginatedSelectAllText && paginatedSelectAllAction, checkableButtonProps = {
        accessibilityLabel,
        label: hasTextAndAction ? paginatedSelectAllText : label,
        selected,
        onToggleAll,
        disabled,
        ariaLive: hasTextAndAction ? "polite" : void 0,
        ref
      }, checkableButtonMarkup = accessibilityLabel && onToggleAll ? /* @__PURE__ */ React2.createElement(CheckableButton.CheckableButton, checkableButtonProps) : null;
      return /* @__PURE__ */ React2.createElement(reactTransitionGroup.Transition, {
        timeout: 0,
        in: selectMode,
        key: "markup",
        nodeRef
      }, (status) => {
        let wrapperClasses = css.classNames(SelectAllActions_module.default.SelectAllActions, hasPagination && SelectAllActions_module.default["SelectAllActions-hasPagination"], !isSticky && SelectAllActions_module.default["SelectAllActions-not-sticky"], status && SelectAllActions_module.default[`SelectAllActions-${status}`]);
        return /* @__PURE__ */ React2.createElement("div", {
          className: wrapperClasses,
          ref: nodeRef
        }, /* @__PURE__ */ React2.createElement(Box4.Box, {
          background: "bg-surface-secondary",
          borderBlockStartWidth: "025",
          borderColor: "border",
          width: "100%",
          paddingBlockStart: "300",
          paddingBlockEnd: "300",
          paddingInlineStart: "300",
          paddingInlineEnd: "400"
        }, /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
          gap: "200",
          align: "start",
          blockAlign: "center"
        }, checkableButtonMarkup, /* @__PURE__ */ React2.createElement(Text4.Text, {
          as: "span",
          variant: "bodySm",
          fontWeight: "medium"
        }, hasTextAndAction ? paginatedSelectAllText : label), paginatedSelectAllMarkup)));
      });
    });
    exports.SelectAllActions = SelectAllActions;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SettingToggle/SettingToggle.js
var require_SettingToggle = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SettingToggle/SettingToggle.js"(exports) {
    "use strict";
    var React2 = require_react(), utils = require_utils(), LegacyCard = require_LegacyCard(), SettingAction = require_SettingAction();
    function SettingToggle({
      enabled,
      action: action8,
      children
    }) {
      let id = React2.useId(), actionMarkup = action8 ? utils.buttonFrom(action8, {
        role: "switch",
        ariaChecked: enabled ? "true" : "false",
        size: "slim"
      }) : null;
      return /* @__PURE__ */ React2.createElement(LegacyCard.LegacyCard, {
        sectioned: !0
      }, /* @__PURE__ */ React2.createElement(SettingAction.SettingAction, {
        action: actionMarkup
      }, /* @__PURE__ */ React2.createElement("label", {
        htmlFor: id
      }, children)));
    }
    exports.SettingToggle = SettingToggle;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SkeletonBodyText/SkeletonBodyText.css.js
var require_SkeletonBodyText_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SkeletonBodyText/SkeletonBodyText.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      SkeletonBodyTextContainer: "Polaris-SkeletonBodyText__SkeletonBodyTextContainer",
      SkeletonBodyText: "Polaris-SkeletonBodyText"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SkeletonBodyText/SkeletonBodyText.js
var require_SkeletonBodyText = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SkeletonBodyText/SkeletonBodyText.js"(exports) {
    "use strict";
    var React2 = require_react(), SkeletonBodyText_module = require_SkeletonBodyText_css();
    function SkeletonBodyText({
      lines = 3
    }) {
      let bodyTextLines = [];
      for (let i = 0; i < lines; i++)
        bodyTextLines.push(/* @__PURE__ */ React2.createElement("div", {
          className: SkeletonBodyText_module.default.SkeletonBodyText,
          key: i
        }));
      return /* @__PURE__ */ React2.createElement("div", {
        className: SkeletonBodyText_module.default.SkeletonBodyTextContainer
      }, bodyTextLines);
    }
    exports.SkeletonBodyText = SkeletonBodyText;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SkeletonDisplayText/SkeletonDisplayText.css.js
var require_SkeletonDisplayText_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SkeletonDisplayText/SkeletonDisplayText.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      DisplayText: "Polaris-SkeletonDisplayText__DisplayText",
      sizeSmall: "Polaris-SkeletonDisplayText--sizeSmall",
      sizeMedium: "Polaris-SkeletonDisplayText--sizeMedium",
      sizeLarge: "Polaris-SkeletonDisplayText--sizeLarge",
      sizeExtraLarge: "Polaris-SkeletonDisplayText--sizeExtraLarge"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SkeletonDisplayText/SkeletonDisplayText.js
var require_SkeletonDisplayText = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SkeletonDisplayText/SkeletonDisplayText.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), SkeletonDisplayText_module = require_SkeletonDisplayText_css();
    function SkeletonDisplayText({
      size = "medium",
      maxWidth
    }) {
      let className = css.classNames(SkeletonDisplayText_module.default.DisplayText, size && SkeletonDisplayText_module.default[css.variationName("size", size)]), style = {
        "--pc-skeleton-display-text-max-width": maxWidth ?? void 0
      };
      return /* @__PURE__ */ React2.createElement("div", {
        className,
        style: css.sanitizeCustomProperties(style)
      });
    }
    exports.SkeletonDisplayText = SkeletonDisplayText;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SkeletonPage/SkeletonPage.css.js
var require_SkeletonPage_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SkeletonPage/SkeletonPage.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      SkeletonTitle: "Polaris-SkeletonPage__SkeletonTitle"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SkeletonPage/SkeletonPage.js
var require_SkeletonPage = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SkeletonPage/SkeletonPage.js"(exports) {
    "use strict";
    var React2 = require_react(), SkeletonPage_module = require_SkeletonPage_css(), hooks = require_hooks2(), Text4 = require_Text(), Box4 = require_Box(), BlockStack4 = require_BlockStack(), InlineStack4 = require_InlineStack();
    function SkeletonPage({
      children,
      fullWidth,
      narrowWidth,
      primaryAction,
      title = "",
      backAction
    }) {
      let i18n = hooks.useI18n(), titleContent = title ? /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "h1",
        variant: "headingLg",
        fontWeight: "bold"
      }, title) : /* @__PURE__ */ React2.createElement("div", {
        className: SkeletonPage_module.default.SkeletonTitle
      }, /* @__PURE__ */ React2.createElement(Box4.Box, {
        background: "bg-fill-tertiary",
        minWidth: "120px",
        minHeight: "28px",
        borderRadius: "100"
      })), primaryActionMarkup = primaryAction ? /* @__PURE__ */ React2.createElement(Box4.Box, {
        id: "SkeletonPage-PrimaryAction",
        borderRadius: "100",
        background: "bg-fill-tertiary",
        minHeight: "2.25rem",
        minWidth: "6.25rem"
      }) : null, backActionMarkup = backAction ? /* @__PURE__ */ React2.createElement(Box4.Box, {
        borderRadius: "100",
        background: "bg-fill-tertiary",
        minHeight: "2.25rem",
        minWidth: "2.25rem",
        maxWidth: "2.25rem"
      }) : null;
      return /* @__PURE__ */ React2.createElement(BlockStack4.BlockStack, {
        gap: "400",
        inlineAlign: "center"
      }, /* @__PURE__ */ React2.createElement(Box4.Box, Object.assign({
        width: "100%",
        padding: "0",
        paddingInlineStart: {
          sm: "600"
        },
        paddingInlineEnd: {
          sm: "600"
        },
        maxWidth: "var(--pc-skeleton-page-max-width)",
        "aria-label": i18n.translate("Polaris.SkeletonPage.loadingLabel"),
        role: "status"
      }, narrowWidth && {
        maxWidth: "var(--pc-skeleton-page-max-width-narrow)"
      }, fullWidth && {
        maxWidth: "none"
      }), /* @__PURE__ */ React2.createElement(BlockStack4.BlockStack, null, /* @__PURE__ */ React2.createElement(Box4.Box, {
        paddingBlockStart: {
          xs: "400",
          md: "500"
        },
        paddingBlockEnd: {
          xs: "400",
          md: "500"
        },
        paddingInlineStart: {
          xs: "400",
          sm: "0"
        },
        paddingInlineEnd: {
          xs: "400",
          sm: "0"
        },
        width: "100%"
      }, /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        gap: "400",
        align: "space-between",
        blockAlign: "center"
      }, /* @__PURE__ */ React2.createElement(InlineStack4.InlineStack, {
        gap: "400"
      }, backActionMarkup, /* @__PURE__ */ React2.createElement(Box4.Box, {
        paddingBlockStart: "100",
        paddingBlockEnd: "100"
      }, titleContent)), primaryActionMarkup)), /* @__PURE__ */ React2.createElement(Box4.Box, {
        paddingBlockEnd: "200",
        width: "100%"
      }, children))));
    }
    exports.SkeletonPage = SkeletonPage;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SkeletonTabs/SkeletonTabs.css.js
var require_SkeletonTabs_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SkeletonTabs/SkeletonTabs.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Tabs: "Polaris-SkeletonTabs__Tabs",
      Tab: "Polaris-SkeletonTabs__Tab",
      TabText: "Polaris-SkeletonTabs__TabText",
      fitted: "Polaris-SkeletonTabs--fitted"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SkeletonTabs/SkeletonTabs.js
var require_SkeletonTabs = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SkeletonTabs/SkeletonTabs.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), SkeletonTabs_module = require_SkeletonTabs_css();
    function SkeletonTabs({
      count = 2,
      fitted = !1
    }) {
      return /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(SkeletonTabs_module.default.Tabs, fitted && SkeletonTabs_module.default.fitted)
      }, [...Array(count).keys()].map((key) => /* @__PURE__ */ React2.createElement("div", {
        key,
        className: css.classNames(SkeletonTabs_module.default.Tab)
      }, /* @__PURE__ */ React2.createElement("div", {
        className: SkeletonTabs_module.default.TabText
      }))));
    }
    exports.SkeletonTabs = SkeletonTabs;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SkeletonThumbnail/SkeletonThumbnail.css.js
var require_SkeletonThumbnail_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SkeletonThumbnail/SkeletonThumbnail.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      SkeletonThumbnail: "Polaris-SkeletonThumbnail",
      sizeExtraSmall: "Polaris-SkeletonThumbnail--sizeExtraSmall",
      sizeSmall: "Polaris-SkeletonThumbnail--sizeSmall",
      sizeMedium: "Polaris-SkeletonThumbnail--sizeMedium",
      sizeLarge: "Polaris-SkeletonThumbnail--sizeLarge"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SkeletonThumbnail/SkeletonThumbnail.js
var require_SkeletonThumbnail = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SkeletonThumbnail/SkeletonThumbnail.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), SkeletonThumbnail_module = require_SkeletonThumbnail_css();
    function SkeletonThumbnail({
      size = "medium"
    }) {
      let className = css.classNames(SkeletonThumbnail_module.default.SkeletonThumbnail, size && SkeletonThumbnail_module.default[css.variationName("size", size)]);
      return /* @__PURE__ */ React2.createElement("div", {
        className
      });
    }
    exports.SkeletonThumbnail = SkeletonThumbnail;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Thumbnail/Thumbnail.css.js
var require_Thumbnail_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Thumbnail/Thumbnail.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Thumbnail: "Polaris-Thumbnail",
      sizeExtraSmall: "Polaris-Thumbnail--sizeExtraSmall",
      sizeSmall: "Polaris-Thumbnail--sizeSmall",
      sizeMedium: "Polaris-Thumbnail--sizeMedium",
      sizeLarge: "Polaris-Thumbnail--sizeLarge",
      transparent: "Polaris-Thumbnail--transparent"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Thumbnail/Thumbnail.js
var require_Thumbnail = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Thumbnail/Thumbnail.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Thumbnail_module = require_Thumbnail_css(), Image = require_Image(), Icon2 = require_Icon();
    function Thumbnail({
      source,
      alt,
      size = "medium",
      transparent
    }) {
      let className = css.classNames(Thumbnail_module.default.Thumbnail, size && Thumbnail_module.default[css.variationName("size", size)], transparent && Thumbnail_module.default.transparent), content = typeof source == "string" ? /* @__PURE__ */ React2.createElement(Image.Image, {
        alt,
        source
      }) : /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        accessibilityLabel: alt,
        source
      });
      return /* @__PURE__ */ React2.createElement("span", {
        className
      }, content);
    }
    exports.Thumbnail = Thumbnail;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Toast/Toast.js
var require_Toast2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Toast/Toast.js"(exports) {
    "use strict";
    var React2 = require_react(), useDeepEffect = require_use_deep_effect(), hooks = require_hooks9(), Toast3 = /* @__PURE__ */ React2.memo(function(props) {
      let id = React2.useId(), {
        showToast,
        hideToast
      } = hooks.useFrame();
      return useDeepEffect.useDeepEffect(() => (showToast({
        id,
        ...props
      }), () => {
        hideToast({
          id
        });
      }), [props]), null;
    });
    exports.Toast = Toast3;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/TopBar.css.js
var require_TopBar_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/TopBar.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      TopBar: "Polaris-TopBar",
      Container: "Polaris-TopBar__Container",
      LogoDisplayControl: "Polaris-TopBar__LogoDisplayControl",
      LogoDisplayContainer: "Polaris-TopBar__LogoDisplayContainer",
      LogoContainer: "Polaris-TopBar__LogoContainer",
      hasLogoSuffix: "Polaris-TopBar--hasLogoSuffix",
      Logo: "Polaris-TopBar__Logo",
      LogoLink: "Polaris-TopBar__LogoLink",
      ContextControl: "Polaris-TopBar__ContextControl",
      NavigationIcon: "Polaris-TopBar__NavigationIcon",
      focused: "Polaris-TopBar--focused",
      IconWrapper: "Polaris-TopBar__IconWrapper",
      LeftContent: "Polaris-TopBar__LeftContent",
      Search: "Polaris-TopBar__Search",
      RightContent: "Polaris-TopBar__RightContent",
      SecondaryMenu: "Polaris-TopBar__SecondaryMenu"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/components/Search/Search.css.js
var require_Search_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/components/Search/Search.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Search: "Polaris-TopBar-Search",
      SearchContent: "Polaris-TopBar-Search__SearchContent",
      visible: "Polaris-TopBar-Search--visible",
      Results: "Polaris-TopBar-Search__Results"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/components/SearchDismissOverlay/SearchDismissOverlay.css.js
var require_SearchDismissOverlay_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/components/SearchDismissOverlay/SearchDismissOverlay.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      SearchDismissOverlay: "Polaris-TopBar-SearchDismissOverlay",
      visible: "Polaris-TopBar-SearchDismissOverlay--visible"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/components/SearchDismissOverlay/SearchDismissOverlay.js
var require_SearchDismissOverlay = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/components/SearchDismissOverlay/SearchDismissOverlay.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), SearchDismissOverlay_module = require_SearchDismissOverlay_css(), ScrollLock = require_ScrollLock();
    function SearchDismissOverlay({
      onDismiss,
      visible
    }) {
      let node = React2.useRef(null), handleDismiss = React2.useCallback(({
        target
      }) => {
        target === node.current && onDismiss != null && onDismiss();
      }, [onDismiss]);
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, visible ? /* @__PURE__ */ React2.createElement(ScrollLock.ScrollLock, null) : null, /* @__PURE__ */ React2.createElement("div", {
        ref: node,
        className: css.classNames(SearchDismissOverlay_module.default.SearchDismissOverlay, visible && SearchDismissOverlay_module.default.visible),
        onClick: handleDismiss
      }));
    }
    exports.SearchDismissOverlay = SearchDismissOverlay;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/components/Search/Search.js
var require_Search = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/components/Search/Search.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Search_module = require_Search_css(), SearchDismissOverlay = require_SearchDismissOverlay();
    function Search({
      visible,
      children,
      onDismiss,
      overlayVisible = !1
    }) {
      if (children == null)
        return null;
      let overlayMarkup = visible ? /* @__PURE__ */ React2.createElement(SearchDismissOverlay.SearchDismissOverlay, {
        onDismiss,
        visible: overlayVisible
      }) : null;
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, overlayMarkup, /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Search_module.default.Search, visible && Search_module.default.visible)
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Search_module.default.SearchContent
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Search_module.default.Results
      }, children))));
    }
    exports.Search = Search;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/components/SearchField/SearchField.css.js
var require_SearchField_css2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/components/SearchField/SearchField.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      SearchField: "Polaris-TopBar-SearchField",
      focused: "Polaris-TopBar-SearchField--focused",
      Input: "Polaris-TopBar-SearchField__Input",
      Backdrop: "Polaris-TopBar-SearchField__Backdrop",
      BackdropShowFocusBorder: "Polaris-TopBar-SearchField__BackdropShowFocusBorder",
      Icon: "Polaris-TopBar-SearchField__Icon",
      Clear: "Polaris-TopBar-SearchField__Clear"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/components/SearchField/SearchField.js
var require_SearchField3 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/components/SearchField/SearchField.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), SearchField_module = require_SearchField_css2(), hooks = require_hooks2(), Icon2 = require_Icon(), Text4 = require_Text();
    function SearchField({
      value,
      focused,
      active,
      placeholder,
      onChange,
      onFocus,
      onBlur,
      onCancel,
      showFocusBorder
    }) {
      let i18n = hooks.useI18n(), [forceActive, setForceActive] = React2.useState(!1), input = React2.useRef(null), searchId = React2.useId(), handleChange = React2.useCallback(({
        currentTarget
      }) => {
        onChange(currentTarget.value);
      }, [onChange]), handleFocus = React2.useCallback(() => onFocus && onFocus(), [onFocus]), handleBlur = React2.useCallback(() => onBlur && onBlur(), [onBlur]), handleClear = React2.useCallback(() => {
        onCancel && onCancel(), input.current && (input.current.value = "", onChange(""), input.current.focus());
      }, [onCancel, onChange]);
      React2.useEffect(() => {
        input.current && (focused ? input.current.focus() : input.current.blur());
      }, [focused]);
      let clearMarkup = value !== "" && /* @__PURE__ */ React2.createElement("button", {
        type: "button",
        "aria-label": i18n.translate("Polaris.TopBar.SearchField.clearButtonLabel"),
        className: SearchField_module.default.Clear,
        onClick: handleClear,
        onBlur: () => {
          setForceActive(!1), handleClear();
        },
        onFocus: () => {
          handleFocus(), setForceActive(!0);
        }
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.XCircleIcon
      })), className = css.classNames(SearchField_module.default.SearchField, (focused || active || forceActive) && SearchField_module.default.focused);
      return /* @__PURE__ */ React2.createElement("div", {
        className,
        onFocus: handleFocus,
        onBlur: handleBlur
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "span",
        visuallyHidden: !0
      }, /* @__PURE__ */ React2.createElement("label", {
        htmlFor: searchId
      }, i18n.translate("Polaris.TopBar.SearchField.search"))), /* @__PURE__ */ React2.createElement("input", {
        id: searchId,
        className: SearchField_module.default.Input,
        placeholder,
        type: "search",
        autoCapitalize: "off",
        autoComplete: "off",
        autoCorrect: "off",
        ref: input,
        value,
        onChange: handleChange,
        onKeyDown: preventDefault
      }), /* @__PURE__ */ React2.createElement("span", {
        className: SearchField_module.default.Icon
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.SearchIcon
      })), clearMarkup, /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(SearchField_module.default.Backdrop, showFocusBorder && SearchField_module.default.BackdropShowFocusBorder)
      }));
    }
    function preventDefault(event) {
      event.key === "Enter" && event.preventDefault();
    }
    exports.SearchField = SearchField;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/components/UserMenu/UserMenu.css.js
var require_UserMenu_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/components/UserMenu/UserMenu.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Details: "Polaris-TopBar-UserMenu__Details"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/MessageIndicator/MessageIndicator.css.js
var require_MessageIndicator_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/MessageIndicator/MessageIndicator.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      MessageIndicatorWrapper: "Polaris-MessageIndicator__MessageIndicatorWrapper",
      MessageIndicator: "Polaris-MessageIndicator"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/MessageIndicator/MessageIndicator.js
var require_MessageIndicator = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/MessageIndicator/MessageIndicator.js"(exports) {
    "use strict";
    var React2 = require_react(), MessageIndicator_module = require_MessageIndicator_css();
    function MessageIndicator({
      children,
      active
    }) {
      let indicatorMarkup = active && /* @__PURE__ */ React2.createElement("div", {
        className: MessageIndicator_module.default.MessageIndicator
      });
      return /* @__PURE__ */ React2.createElement("div", {
        className: MessageIndicator_module.default.MessageIndicatorWrapper
      }, indicatorMarkup, children);
    }
    exports.MessageIndicator = MessageIndicator;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/components/Menu/Menu.css.js
var require_Menu_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/components/Menu/Menu.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ActivatorWrapper: "Polaris-TopBar-Menu__ActivatorWrapper",
      Activator: "Polaris-TopBar-Menu__Activator",
      "Activator-userMenu": "Polaris-TopBar-Menu__Activator--userMenu",
      Section: "Polaris-TopBar-Menu__Section"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/components/Menu/components/Message/Message.css.js
var require_Message_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/components/Menu/components/Message/Message.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Section: "Polaris-Menu-Message__Section"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/components/Menu/components/Message/Message.js
var require_Message = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/components/Menu/components/Message/Message.js"(exports) {
    "use strict";
    var React2 = require_react(), Message_module = require_Message_css(), Link = require_Link(), Badge4 = require_Badge(), Popover = require_Popover(), LegacyStack = require_LegacyStack(), TextContainer = require_TextContainer(), Text4 = require_Text(), Button4 = require_Button();
    function Message({
      title,
      description,
      action: action8,
      link,
      badge
    }) {
      let badgeMarkup = badge && /* @__PURE__ */ React2.createElement(Badge4.Badge, {
        tone: badge.tone
      }, badge.content), {
        to,
        content: linkContent
      } = link, {
        onClick,
        content: actionContent
      } = action8;
      return /* @__PURE__ */ React2.createElement("div", {
        className: Message_module.default.Section
      }, /* @__PURE__ */ React2.createElement(Popover.Popover.Section, null, /* @__PURE__ */ React2.createElement(LegacyStack.LegacyStack, {
        vertical: !0,
        spacing: "tight"
      }, /* @__PURE__ */ React2.createElement(TextContainer.TextContainer, null, /* @__PURE__ */ React2.createElement(Text4.Text, {
        variant: "headingMd",
        as: "h2"
      }, title, badgeMarkup), /* @__PURE__ */ React2.createElement("p", null, description)), /* @__PURE__ */ React2.createElement(Link.Link, {
        url: to
      }, linkContent), /* @__PURE__ */ React2.createElement(Button4.Button, {
        variant: "plain",
        onClick
      }, actionContent))));
    }
    exports.Message = Message;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/components/Menu/Menu.js
var require_Menu = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/components/Menu/Menu.js"(exports) {
    "use strict";
    var React2 = require_react(), css = require_css(), Menu_module = require_Menu_css(), Message = require_Message(), Popover = require_Popover(), Box4 = require_Box(), ActionList = require_ActionList();
    function Menu(props) {
      let {
        actions,
        onOpen,
        onClose,
        open,
        activatorContent,
        message,
        accessibilityLabel,
        customWidth,
        userMenu
      } = props, badgeProps = message && message.badge && {
        content: message.badge.content,
        tone: message.badge.tone
      }, messageMarkup = message && /* @__PURE__ */ React2.createElement(Message.Message, {
        title: message.title,
        description: message.description,
        action: {
          onClick: message.action.onClick,
          content: message.action.content
        },
        link: {
          to: message.link.to,
          content: message.link.content
        },
        badge: badgeProps
      });
      return /* @__PURE__ */ React2.createElement(Popover.Popover, {
        activator: /* @__PURE__ */ React2.createElement("div", {
          className: Menu_module.default.ActivatorWrapper
        }, /* @__PURE__ */ React2.createElement("button", {
          type: "button",
          className: css.classNames(Menu_module.default.Activator, userMenu && Menu_module.default["Activator-userMenu"]),
          onClick: onOpen,
          "aria-label": accessibilityLabel
        }, activatorContent)),
        active: open,
        onClose,
        fixed: !0,
        fullHeight: !0,
        preferredAlignment: "right"
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Menu_module.default.MenuItems
      }, /* @__PURE__ */ React2.createElement(Box4.Box, {
        width: customWidth
      }, /* @__PURE__ */ React2.createElement(ActionList.ActionList, {
        actionRole: "menuitem",
        onActionAnyItem: onClose,
        sections: actions
      }), messageMarkup)));
    }
    exports.Menu = Menu;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/components/UserMenu/UserMenu.js
var require_UserMenu = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/components/UserMenu/UserMenu.js"(exports) {
    "use strict";
    var React2 = require_react(), UserMenu_module = require_UserMenu_css(), MessageIndicator = require_MessageIndicator(), Menu = require_Menu(), Text4 = require_Text(), Avatar = require_Avatar();
    function UserMenu({
      name,
      detail,
      avatar,
      initials,
      actions,
      message,
      onToggle,
      open,
      accessibilityLabel,
      customActivator,
      customWidth
    }) {
      let showIndicator = Boolean(message), activatorContentMarkup = customActivator || /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("span", {
        className: UserMenu_module.default.Details
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "p",
        variant: "bodySm",
        alignment: "start",
        fontWeight: "medium",
        truncate: !0
      }, name), /* @__PURE__ */ React2.createElement("span", {
        className: UserMenu_module.default.Message
      }, /* @__PURE__ */ React2.createElement(Text4.Text, {
        as: "p",
        variant: "bodyXs",
        alignment: "start",
        tone: "text-inverse-secondary",
        truncate: !0
      }, detail))), /* @__PURE__ */ React2.createElement(MessageIndicator.MessageIndicator, {
        active: showIndicator
      }, /* @__PURE__ */ React2.createElement(Avatar.Avatar, {
        size: "md",
        initials: initials && initials.replace(" ", ""),
        source: avatar,
        name
      })));
      return /* @__PURE__ */ React2.createElement(Menu.Menu, {
        activatorContent: activatorContentMarkup,
        open,
        onOpen: onToggle,
        onClose: onToggle,
        actions,
        message,
        accessibilityLabel,
        customWidth,
        userMenu: !0
      });
    }
    exports.UserMenu = UserMenu;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/TopBar.js
var require_TopBar = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/TopBar.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), getWidth = require_get_width(), useToggle = require_use_toggle(), TopBar_module = require_TopBar_css(), Search = require_Search(), SearchField = require_SearchField3(), UserMenu = require_UserMenu(), hooks = require_hooks2(), hooks$1 = require_hooks9(), Icon2 = require_Icon(), UnstyledLink = require_UnstyledLink(), Image = require_Image(), Menu = require_Menu(), TopBar = function({
      showNavigationToggle,
      userMenu,
      searchResults,
      searchField,
      secondaryMenu,
      searchResultsVisible,
      searchResultsOverlayVisible = !1,
      onNavigationToggle,
      onSearchResultsDismiss,
      contextControl,
      logoSuffix
    }) {
      let i18n = hooks.useI18n(), {
        logo
      } = hooks$1.useFrame(), {
        value: focused,
        setTrue: forceTrueFocused,
        setFalse: forceFalseFocused
      } = useToggle.useToggle(!1), iconClassName = css.classNames(TopBar_module.default.NavigationIcon, focused && TopBar_module.default.focused), navigationButtonMarkup = showNavigationToggle ? /* @__PURE__ */ React2.createElement("button", {
        type: "button",
        className: iconClassName,
        onClick: onNavigationToggle,
        onFocus: forceTrueFocused,
        onBlur: forceFalseFocused,
        "aria-label": i18n.translate("Polaris.TopBar.toggleMenuLabel")
      }, /* @__PURE__ */ React2.createElement("div", {
        className: TopBar_module.default.IconWrapper
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.MenuIcon
      }))) : null, width = getWidth.getWidth(logo, 104), contextMarkup;
      if (contextControl)
        contextMarkup = /* @__PURE__ */ React2.createElement("div", {
          className: TopBar_module.default.ContextControl
        }, contextControl);
      else if (logo) {
        let className = css.classNames(TopBar_module.default.LogoContainer, showNavigationToggle || searchField ? TopBar_module.default.LogoDisplayControl : TopBar_module.default.LogoDisplayContainer, logoSuffix && TopBar_module.default.hasLogoSuffix);
        contextMarkup = /* @__PURE__ */ React2.createElement("div", {
          className
        }, /* @__PURE__ */ React2.createElement(UnstyledLink.UnstyledLink, {
          url: logo.url || "",
          className: TopBar_module.default.LogoLink,
          style: {
            width
          }
        }, /* @__PURE__ */ React2.createElement(Image.Image, {
          source: logo.topBarSource || "",
          alt: logo.accessibilityLabel || "",
          className: TopBar_module.default.Logo,
          style: {
            width
          }
        })), logoSuffix);
      }
      let searchMarkup = searchField ? /* @__PURE__ */ React2.createElement(React2.Fragment, null, searchField, /* @__PURE__ */ React2.createElement(Search.Search, {
        visible: searchResultsVisible,
        onDismiss: onSearchResultsDismiss,
        overlayVisible: searchResultsOverlayVisible
      }, searchResults)) : null;
      return /* @__PURE__ */ React2.createElement("div", {
        className: TopBar_module.default.TopBar
      }, /* @__PURE__ */ React2.createElement("div", {
        className: TopBar_module.default.Container
      }, /* @__PURE__ */ React2.createElement("div", {
        className: TopBar_module.default.LeftContent
      }, navigationButtonMarkup, contextMarkup), /* @__PURE__ */ React2.createElement("div", {
        className: TopBar_module.default.Search
      }, searchMarkup), /* @__PURE__ */ React2.createElement("div", {
        className: TopBar_module.default.RightContent
      }, /* @__PURE__ */ React2.createElement("div", {
        className: TopBar_module.default.SecondaryMenu
      }, secondaryMenu), userMenu)));
    };
    TopBar.Menu = Menu.Menu;
    TopBar.SearchField = SearchField.SearchField;
    TopBar.UserMenu = UserMenu.UserMenu;
    exports.TopBar = TopBar;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/UnstyledButton/utils.js
var require_utils4 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/UnstyledButton/utils.js"(exports) {
    "use strict";
    var React2 = require_react(), UnstyledButton = require_UnstyledButton();
    function unstyledButtonFrom({
      content,
      onAction,
      ...action8
    }, overrides, key) {
      return /* @__PURE__ */ React2.createElement(UnstyledButton.UnstyledButton, Object.assign({
        key,
        onClick: onAction
      }, action8, overrides), content);
    }
    exports.unstyledButtonFrom = unstyledButtonFrom;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/duration.js
var require_duration = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/duration.js"(exports) {
    "use strict";
    function ensureTwoDigits(num) {
      return num > 9 ? String(num) : `0${num}`;
    }
    function secondsToTimeComponents(seconds) {
      return {
        hours: Math.floor(seconds / 3600),
        minutes: Math.floor(seconds % 3600 / 60),
        seconds: seconds % 60
      };
    }
    function secondsToTimestamp(numSeconds) {
      let {
        hours,
        minutes,
        seconds
      } = secondsToTimeComponents(numSeconds), hasHours = numSeconds > 3600, hoursText = hasHours ? `${hours}:` : "", minutesText = `${hasHours ? ensureTwoDigits(minutes) : minutes}:`, secondsText = `${ensureTwoDigits(seconds)}`;
      return `${hoursText}${minutesText}${secondsText}`;
    }
    function secondsToDurationTranslationKey(numSeconds) {
      let {
        hours,
        minutes,
        seconds
      } = secondsToTimeComponents(numSeconds), durationKey = "Polaris.VideoThumbnail.playButtonA11yLabel.duration";
      return hours ? (durationKey += `.hours.${hours > 1 ? "other" : "one"}`, seconds ? minutes > 1 ? durationKey += `${seconds > 1 ? ".minutesAndSeconds" : ".minutesAndSecond"}` : minutes === 1 ? durationKey += `${seconds > 1 ? ".minuteAndSeconds" : ".minuteAndSecond"}` : durationKey += `${seconds > 1 ? ".andSeconds" : ".andSecond"}` : minutes ? durationKey += `${minutes > 1 ? ".andMinutes" : ".andMinute"}` : durationKey += ".only") : minutes ? (durationKey += `.minutes.${minutes > 1 ? "other" : "one"}`, seconds ? durationKey += `${seconds > 1 ? ".andSeconds" : ".andSecond"}` : durationKey += ".only") : seconds && (durationKey += seconds > 1 ? ".seconds.other" : ".seconds.one"), durationKey;
    }
    exports.ensureTwoDigits = ensureTwoDigits;
    exports.secondsToDurationTranslationKey = secondsToDurationTranslationKey;
    exports.secondsToTimeComponents = secondsToTimeComponents;
    exports.secondsToTimestamp = secondsToTimestamp;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/VideoThumbnail/VideoThumbnail.css.js
var require_VideoThumbnail_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/VideoThumbnail/VideoThumbnail.css.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Thumbnail: "Polaris-VideoThumbnail__Thumbnail",
      ThumbnailContainer: "Polaris-VideoThumbnail__ThumbnailContainer",
      PlayButton: "Polaris-VideoThumbnail__PlayButton",
      Timestamp: "Polaris-VideoThumbnail__Timestamp",
      PlayIcon: "Polaris-VideoThumbnail__PlayIcon",
      Progress: "Polaris-VideoThumbnail__Progress",
      Indicator: "Polaris-VideoThumbnail__Indicator",
      ProgressBar: "Polaris-VideoThumbnail__ProgressBar",
      Label: "Polaris-VideoThumbnail__Label"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/VideoThumbnail/VideoThumbnail.js
var require_VideoThumbnail = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/VideoThumbnail/VideoThumbnail.js"(exports) {
    "use strict";
    var React2 = require_react(), polarisIcons = require("@shopify/polaris-icons"), duration = require_duration(), VideoThumbnail_module = require_VideoThumbnail_css(), hooks = require_hooks2(), hooks$1 = require_hooks11(), LegacyStack = require_LegacyStack(), Icon2 = require_Icon(), Text4 = require_Text();
    function VideoThumbnail({
      thumbnailUrl,
      videoLength = 0,
      videoProgress = 0,
      showVideoProgress = !1,
      accessibilityLabel,
      onClick,
      onBeforeStartPlaying
    }) {
      let i18n = hooks.useI18n(), {
        isNavigationCollapsed
      } = hooks$1.useMediaQuery(), buttonLabel;
      if (accessibilityLabel)
        buttonLabel = accessibilityLabel;
      else if (videoLength) {
        let {
          hours,
          minutes,
          seconds
        } = duration.secondsToTimeComponents(videoLength);
        buttonLabel = i18n.translate("Polaris.VideoThumbnail.playButtonA11yLabel.defaultWithDuration", {
          duration: i18n.translate(duration.secondsToDurationTranslationKey(videoLength), {
            hourCount: hours,
            minuteCount: minutes,
            secondCount: seconds
          })
        });
      } else
        buttonLabel = i18n.translate("Polaris.VideoThumbnail.playButtonA11yLabel.default");
      let timeStampMarkup = videoLength ? /* @__PURE__ */ React2.createElement("div", {
        className: VideoThumbnail_module.default.Timestamp
      }, /* @__PURE__ */ React2.createElement(LegacyStack.LegacyStack, {
        alignment: "center",
        spacing: "extraTight"
      }, /* @__PURE__ */ React2.createElement("span", {
        className: VideoThumbnail_module.default.PlayIcon
      }, /* @__PURE__ */ React2.createElement(Icon2.Icon, {
        source: polarisIcons.PlayIcon
      })), /* @__PURE__ */ React2.createElement(Text4.Text, {
        variant: isNavigationCollapsed ? "bodyLg" : "bodyMd",
        as: "p",
        fontWeight: "semibold"
      }, duration.secondsToTimestamp(videoLength)))) : null, progressMarkup = null;
      if (showVideoProgress) {
        let progressValue = calculateProgress(videoLength, videoProgress), progressValuePercents = Math.round(progressValue * 100);
        progressMarkup = /* @__PURE__ */ React2.createElement("div", {
          className: VideoThumbnail_module.default.Progress
        }, /* @__PURE__ */ React2.createElement("progress", {
          className: VideoThumbnail_module.default.ProgressBar,
          value: progressValuePercents,
          max: "100"
        }), /* @__PURE__ */ React2.createElement("div", {
          className: VideoThumbnail_module.default.Indicator,
          style: {
            transform: `scaleX(${progressValue})`
          }
        }, /* @__PURE__ */ React2.createElement("span", {
          className: VideoThumbnail_module.default.Label
        }, progressValuePercents, "%")));
      }
      return /* @__PURE__ */ React2.createElement("div", {
        className: VideoThumbnail_module.default.ThumbnailContainer
      }, /* @__PURE__ */ React2.createElement("div", {
        className: VideoThumbnail_module.default.Thumbnail,
        style: {
          backgroundImage: `url(${thumbnailUrl})`
        }
      }), /* @__PURE__ */ React2.createElement("button", {
        type: "button",
        className: VideoThumbnail_module.default.PlayButton,
        "aria-label": buttonLabel,
        onClick,
        onMouseEnter: onBeforeStartPlaying,
        onFocus: onBeforeStartPlaying,
        onTouchStart: onBeforeStartPlaying
      }, timeStampMarkup), progressMarkup);
    }
    function calculateProgress(videoLength, videoProgress) {
      if (videoProgress > videoLength, videoProgress > 0 && videoLength > 0) {
        let progress = parseFloat((videoProgress / videoLength).toFixed(2));
        return progress > 1 ? 1 : progress;
      }
      return 0;
    }
    exports.VideoThumbnail = VideoThumbnail;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/index-table/hooks.js
var require_hooks14 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/index-table/hooks.js"(exports) {
    "use strict";
    var React2 = require_react(), context = require_context18();
    function useRowHovered() {
      return React2.useContext(context.RowHoveredContext);
    }
    function useRowSelected() {
      let {
        selected
      } = React2.useContext(context.RowContext);
      return selected;
    }
    function useContainerScroll() {
      return React2.useContext(context.ScrollContext);
    }
    exports.useContainerScroll = useContainerScroll;
    exports.useRowHovered = useRowHovered;
    exports.useRowSelected = useRowSelected;
  }
});

// node_modules/@shopify/polaris/build/cjs/index.js
var require_cjs = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/index.js"(exports) {
    "use strict";
    var configure = require_configure(), types = require_types(), shared = require_shared(), ThemeProvider = require_ThemeProvider(), colorTransformers = require_color_transformers(), withinContentContext = require_within_content_context(), useCopyToClipboard = require_use_copy_to_clipboard(), useEventListener = require_use_event_listener(), useFocus = require_use_focus(), useHover = require_use_hover(), useMediaQuery = require_use_media_query(), useTheme = require_use_theme(), useIndexResourceState = require_use_index_resource_state(), breakpoints = require_breakpoints(), AppProvider = require_AppProvider(), AccountConnection = require_AccountConnection(), ActionList = require_ActionList(), ActionMenu = require_ActionMenu(), Autocomplete = require_Autocomplete(), Avatar = require_Avatar(), Backdrop = require_Backdrop(), Badge4 = require_Badge(), types$1 = require_types2(), Banner3 = require_Banner(), Bleed = require_Bleed(), Box4 = require_Box(), Breadcrumbs = require_Breadcrumbs(), BulkActions = require_BulkActions(), Button4 = require_Button(), utils = require_utils(), ButtonGroup = require_ButtonGroup(), CalloutCard = require_CalloutCard(), Card4 = require_Card(), Checkbox = require_Checkbox(), ChoiceList = require_ChoiceList(), Collapsible2 = require_Collapsible(), ColorPicker = require_ColorPicker(), InlineGrid = require_InlineGrid(), Combobox = require_Combobox(), Connected = require_Connected(), ContextualSaveBar = require_ContextualSaveBar(), DataTable4 = require_DataTable(), DatePicker = require_DatePicker(), DescriptionList = require_DescriptionList(), Divider2 = require_Divider(), DropZone = require_DropZone(), EmptySearchResult = require_EmptySearchResult(), EmptyState = require_EmptyState(), EventListener = require_EventListener(), ExceptionList = require_ExceptionList(), Filters = require_Filters(), Focus = require_Focus(), FooterHelp = require_FooterHelp(), Form = require_Form(), FormLayout = require_FormLayout(), Frame = require_Frame(), Toast3 = require_Toast(), FullscreenBar = require_FullscreenBar(), Grid = require_Grid(), Icon2 = require_Icon(), Image = require_Image(), IndexFilters = require_IndexFilters(), useSetIndexFiltersMode = require_useSetIndexFiltersMode(), types$2 = require_types3(), IndexTable = require_IndexTable(), Indicator = require_Indicator(), InlineStack4 = require_InlineStack(), InlineCode = require_InlineCode(), InlineError = require_InlineError(), KeyboardKey = require_KeyboardKey(), KeypressListener = require_KeypressListener(), Label = require_Label(), Labelled = require_Labelled(), Layout3 = require_Layout(), LegacyCard = require_LegacyCard(), LegacyFilters = require_LegacyFilters(), LegacyStack = require_LegacyStack(), LegacyTabs = require_LegacyTabs(), Link = require_Link(), List = require_List3(), Listbox = require_Listbox(), Loading = require_Loading3(), MediaCard = require_MediaCard(), Modal3 = require_Modal(), Navigation = require_Navigation2(), Item = require_Item10(), OptionList = require_OptionList(), Page3 = require_Page(), PageActions = require_PageActions(), Pagination = require_Pagination(), Picker = require_Picker(), PolarisTestProvider = require_PolarisTestProvider(), Popover = require_Popover(), PopoverOverlay = require_PopoverOverlay(), Portal = require_Portal(), PortalsManager = require_PortalsManager(), PositionedOverlay = require_PositionedOverlay(), ProgressBar4 = require_ProgressBar(), RadioButton = require_RadioButton(), RangeSlider = require_RangeSlider(), ResourceItem = require_ResourceItem(), ResourceList = require_ResourceList(), Scrollable = require_Scrollable(), ScrollLock = require_ScrollLock(), Select2 = require_Select(), SelectAllActions = require_SelectAllActions(), SettingToggle = require_SettingToggle(), Sheet = require_Sheet(), SkeletonBodyText = require_SkeletonBodyText(), SkeletonDisplayText = require_SkeletonDisplayText(), SkeletonPage = require_SkeletonPage(), SkeletonTabs = require_SkeletonTabs(), SkeletonThumbnail = require_SkeletonThumbnail(), Spinner2 = require_Spinner(), Sticky = require_Sticky(), Tabs = require_Tabs(), Tag = require_Tag(), Text4 = require_Text(), TextContainer = require_TextContainer(), TextField2 = require_TextField(), Thumbnail = require_Thumbnail(), Toast$1 = require_Toast2(), Tooltip = require_Tooltip(), TopBar = require_TopBar(), TrapFocus = require_TrapFocus(), Truncate = require_Truncate(), UnstyledButton = require_UnstyledButton(), utils$1 = require_utils4(), UnstyledLink = require_UnstyledLink(), BlockStack4 = require_BlockStack(), VideoThumbnail = require_VideoThumbnail(), hooks = require_hooks9(), context = require_context15(), context$1 = require_context3(), hooks$1 = require_hooks14(), types$3 = require_types4(), hooks$2 = require_hooks3();
    exports.DEFAULT_LOCALE = configure.DEFAULT_LOCALE;
    exports.SUPPORTED_LOCALES = configure.SUPPORTED_LOCALES;
    Object.defineProperty(exports, "Key", {
      enumerable: !0,
      get: function() {
        return types.Key;
      }
    });
    exports.DATA_ATTRIBUTE = shared.DATA_ATTRIBUTE;
    exports.ThemeProvider = ThemeProvider.ThemeProvider;
    exports.hexToRgb = colorTransformers.hexToRgb;
    exports.hsbToHex = colorTransformers.hsbToHex;
    exports.hsbToRgb = colorTransformers.hsbToRgb;
    exports.hslToRgb = colorTransformers.hslToRgb;
    exports.rgbString = colorTransformers.rgbString;
    exports.rgbToHex = colorTransformers.rgbToHex;
    exports.rgbToHsb = colorTransformers.rgbToHsb;
    exports.rgbToHsl = colorTransformers.rgbToHsl;
    exports.rgbaString = colorTransformers.rgbaString;
    exports._SECRET_INTERNAL_WITHIN_CONTENT_CONTEXT = withinContentContext.WithinContentContext;
    exports.useCopyToClipboard = useCopyToClipboard.useCopyToClipboard;
    exports.useEventListener = useEventListener.useEventListener;
    exports.useFocus = useFocus.useFocus;
    exports.useFocusIn = useFocus.useFocusIn;
    exports.useHover = useHover.useHover;
    exports.useMediaQuery = useMediaQuery.useMediaQuery;
    exports.useTheme = useTheme.useTheme;
    exports.useIndexResourceState = useIndexResourceState.useIndexResourceState;
    exports.useBreakpoints = breakpoints.useBreakpoints;
    exports.AppProvider = AppProvider.AppProvider;
    exports.AccountConnection = AccountConnection.AccountConnection;
    exports.ActionList = ActionList.ActionList;
    exports.ActionMenu = ActionMenu.ActionMenu;
    exports.Autocomplete = Autocomplete.Autocomplete;
    exports.Avatar = Avatar.Avatar;
    exports.Backdrop = Backdrop.Backdrop;
    exports.Badge = Badge4.Badge;
    Object.defineProperty(exports, "BadgeProgressValue", {
      enumerable: !0,
      get: function() {
        return types$1.ProgressValue;
      }
    });
    Object.defineProperty(exports, "BadgeStatusValue", {
      enumerable: !0,
      get: function() {
        return types$1.ToneValue;
      }
    });
    exports.Banner = Banner3.Banner;
    exports.Bleed = Bleed.Bleed;
    exports.Box = Box4.Box;
    exports.Breadcrumbs = Breadcrumbs.Breadcrumbs;
    exports.UnstableBulkActions = BulkActions.BulkActions;
    exports.Button = Button4.Button;
    exports.buttonFrom = utils.buttonFrom;
    exports.buttonsFrom = utils.buttonsFrom;
    exports.ButtonGroup = ButtonGroup.ButtonGroup;
    exports.CalloutCard = CalloutCard.CalloutCard;
    exports.Card = Card4.Card;
    exports.Checkbox = Checkbox.Checkbox;
    exports.ChoiceList = ChoiceList.ChoiceList;
    exports.Collapsible = Collapsible2.Collapsible;
    exports.ColorPicker = ColorPicker.ColorPicker;
    exports.InlineGrid = InlineGrid.InlineGrid;
    exports.Combobox = Combobox.Combobox;
    exports.Connected = Connected.Connected;
    exports.ContextualSaveBar = ContextualSaveBar.ContextualSaveBar;
    exports.DataTable = DataTable4.DataTable;
    exports.DatePicker = DatePicker.DatePicker;
    exports.DescriptionList = DescriptionList.DescriptionList;
    exports.Divider = Divider2.Divider;
    exports.DropZone = DropZone.DropZone;
    exports.EmptySearchResult = EmptySearchResult.EmptySearchResult;
    exports.EmptyState = EmptyState.EmptyState;
    exports.EventListener = EventListener.EventListener;
    exports.ExceptionList = ExceptionList.ExceptionList;
    exports.Filters = Filters.Filters;
    exports.Focus = Focus.Focus;
    exports.FooterHelp = FooterHelp.FooterHelp;
    exports.Form = Form.Form;
    exports.FormLayout = FormLayout.FormLayout;
    exports.Frame = Frame.Frame;
    exports.DEFAULT_TOAST_DURATION = Toast3.DEFAULT_TOAST_DURATION;
    exports.DEFAULT_TOAST_DURATION_WITH_ACTION = Toast3.DEFAULT_TOAST_DURATION_WITH_ACTION;
    exports.FullscreenBar = FullscreenBar.FullscreenBar;
    exports.Grid = Grid.Grid;
    exports.Icon = Icon2.Icon;
    exports.Image = Image.Image;
    exports.IndexFilters = IndexFilters.IndexFilters;
    exports.useSetIndexFiltersMode = useSetIndexFiltersMode.useSetIndexFiltersMode;
    Object.defineProperty(exports, "IndexFiltersMode", {
      enumerable: !0,
      get: function() {
        return types$2.IndexFiltersMode;
      }
    });
    exports.IndexTable = IndexTable.IndexTable;
    exports.Indicator = Indicator.Indicator;
    exports.InlineStack = InlineStack4.InlineStack;
    exports.InlineCode = InlineCode.InlineCode;
    exports.InlineError = InlineError.InlineError;
    exports.errorTextID = InlineError.errorTextID;
    exports.KeyboardKey = KeyboardKey.KeyboardKey;
    exports.KeypressListener = KeypressListener.KeypressListener;
    exports.Label = Label.Label;
    exports.labelID = Label.labelID;
    exports.Labelled = Labelled.Labelled;
    exports.Layout = Layout3.Layout;
    exports.LegacyCard = LegacyCard.LegacyCard;
    exports.LegacyFilters = LegacyFilters.LegacyFilters;
    exports.LegacyStack = LegacyStack.LegacyStack;
    exports.LegacyTabs = LegacyTabs.LegacyTabs;
    exports.Link = Link.Link;
    exports.List = List.List;
    Object.defineProperty(exports, "AutoSelection", {
      enumerable: !0,
      get: function() {
        return Listbox.AutoSelection;
      }
    });
    exports.Listbox = Listbox.Listbox;
    exports.Loading = Loading.Loading;
    exports.MediaCard = MediaCard.MediaCard;
    exports.Modal = Modal3.Modal;
    exports.Navigation = Navigation.Navigation;
    exports.isNavigationItemActive = Item.isNavigationItemActive;
    exports.OptionList = OptionList.OptionList;
    exports.Page = Page3.Page;
    exports.PageActions = PageActions.PageActions;
    exports.Pagination = Pagination.Pagination;
    exports.AlphaPicker = Picker.Picker;
    exports.PolarisTestProvider = PolarisTestProvider.PolarisTestProvider;
    exports.Popover = Popover.Popover;
    Object.defineProperty(exports, "PopoverCloseSource", {
      enumerable: !0,
      get: function() {
        return PopoverOverlay.PopoverCloseSource;
      }
    });
    exports.Portal = Portal.Portal;
    exports.PortalsManager = PortalsManager.PortalsManager;
    exports.PositionedOverlay = PositionedOverlay.PositionedOverlay;
    exports.ProgressBar = ProgressBar4.ProgressBar;
    exports.RadioButton = RadioButton.RadioButton;
    exports.RangeSlider = RangeSlider.RangeSlider;
    exports.ResourceItem = ResourceItem.ResourceItem;
    exports.ResourceList = ResourceList.ResourceList;
    exports.Scrollable = Scrollable.Scrollable;
    exports.ScrollLock = ScrollLock.ScrollLock;
    exports.Select = Select2.Select;
    exports.SelectAllActions = SelectAllActions.SelectAllActions;
    exports.SettingToggle = SettingToggle.SettingToggle;
    exports.Sheet = Sheet.Sheet;
    exports.SkeletonBodyText = SkeletonBodyText.SkeletonBodyText;
    exports.SkeletonDisplayText = SkeletonDisplayText.SkeletonDisplayText;
    exports.SkeletonPage = SkeletonPage.SkeletonPage;
    exports.SkeletonTabs = SkeletonTabs.SkeletonTabs;
    exports.SkeletonThumbnail = SkeletonThumbnail.SkeletonThumbnail;
    exports.Spinner = Spinner2.Spinner;
    exports.Sticky = Sticky.Sticky;
    exports.Tabs = Tabs.Tabs;
    exports.Tag = Tag.Tag;
    exports.Text = Text4.Text;
    exports.TextContainer = TextContainer.TextContainer;
    exports.TextField = TextField2.TextField;
    exports.Thumbnail = Thumbnail.Thumbnail;
    exports.Toast = Toast$1.Toast;
    exports.Tooltip = Tooltip.Tooltip;
    exports.TopBar = TopBar.TopBar;
    exports.TrapFocus = TrapFocus.TrapFocus;
    exports.Truncate = Truncate.Truncate;
    exports.UnstyledButton = UnstyledButton.UnstyledButton;
    exports.unstyledButtonFrom = utils$1.unstyledButtonFrom;
    exports.UnstyledLink = UnstyledLink.UnstyledLink;
    exports.BlockStack = BlockStack4.BlockStack;
    exports.VideoThumbnail = VideoThumbnail.VideoThumbnail;
    exports.useFrame = hooks.useFrame;
    exports.FrameContext = context.FrameContext;
    exports._SECRET_INTERNAL_SCROLL_LOCK_MANAGER_CONTEXT = context$1.ScrollLockManagerContext;
    exports.useIndexTableContainerScroll = hooks$1.useContainerScroll;
    exports.useIndexTableRowHovered = hooks$1.useRowHovered;
    exports.useIndexTableRowSelected = hooks$1.useRowSelected;
    exports.INDEX_TABLE_SELECT_ALL_ITEMS = types$3.SELECT_ALL_ITEMS;
    Object.defineProperty(exports, "IndexTableSelectionType", {
      enumerable: !0,
      get: function() {
        return types$3.SelectionType;
      }
    });
    exports.useEphemeralPresenceManager = hooks$2.useReadOnlyEphemeralPresenceManager;
  }
});

// app/utils/openaiSpec.ts
function getFieldInputType(fieldName) {
  return FIELD_INPUT_TYPES.customer_input_required.includes(fieldName) ? "customer_required" : FIELD_INPUT_TYPES.ai_generatable.includes(fieldName) ? "ai_generatable" : FIELD_INPUT_TYPES.core_required.includes(fieldName) ? "core_required" : "customer_required";
}
var OPENAI_PRODUCT_SCHEMA, FIELD_WEIGHTS, FIELD_POINTS, FIELD_INPUT_TYPES, FIELD_LABELS, init_openaiSpec = __esm({
  "app/utils/openaiSpec.ts"() {
    "use strict";
    OPENAI_PRODUCT_SCHEMA = {
      type: "object",
      required: [
        "title",
        "description",
        "price",
        "availability",
        "category"
      ],
      properties: {
        // Core Product Information
        title: {
          type: "string",
          maxLength: 150,
          description: "Product title - clear, descriptive, keyword-rich"
        },
        description: {
          type: "string",
          minLength: 100,
          maxLength: 4e3,
          description: "Detailed product description with features, benefits, use cases"
        },
        price: {
          type: "string",
          pattern: "^\\d+\\.\\d{2} [A-Z]{3}$",
          description: "Price in format 'XX.XX USD'"
        },
        availability: {
          type: "string",
          enum: ["in_stock", "out_of_stock", "pre_order", "discontinued"],
          description: "Current availability status"
        },
        category: {
          type: "string",
          description: "Product category for classification"
        },
        // Physical Attributes
        material: {
          type: "string",
          description: "Primary material composition"
        },
        dimensions: {
          type: "object",
          properties: {
            length: { type: "string", description: "Length with unit" },
            width: { type: "string", description: "Width with unit" },
            height: { type: "string", description: "Height with unit" }
          },
          description: "Product dimensions"
        },
        weight: {
          type: "string",
          description: "Product weight with unit"
        },
        color: {
          type: "string",
          description: "Primary color"
        },
        size: {
          type: "string",
          description: "Size information"
        },
        // Functional Attributes
        brand: {
          type: "string",
          description: "Brand or manufacturer"
        },
        model: {
          type: "string",
          description: "Model number or name"
        },
        sku: {
          type: "string",
          description: "Stock keeping unit"
        },
        upc: {
          type: "string",
          description: "Universal Product Code"
        },
        // Usage and Context
        use_cases: {
          type: "array",
          items: { type: "string" },
          description: "List of use cases and applications"
        },
        target_audience: {
          type: "string",
          description: "Primary target audience"
        },
        age_range: {
          type: "string",
          description: "Recommended age range"
        },
        gender: {
          type: "string",
          enum: ["male", "female", "unisex", "kids"],
          description: "Target gender"
        },
        // Technical Specifications
        features: {
          type: "array",
          items: { type: "string" },
          description: "Key product features"
        },
        specifications: {
          type: "object",
          description: "Technical specifications as key-value pairs"
        },
        compatibility: {
          type: "array",
          items: { type: "string" },
          description: "Compatibility information"
        },
        // SEO and Search
        keywords: {
          type: "array",
          items: { type: "string" },
          description: "SEO keywords for search optimization"
        },
        tags: {
          type: "array",
          items: { type: "string" },
          description: "Product tags for categorization"
        },
        // Media and Links
        image_urls: {
          type: "array",
          items: { type: "string" },
          description: "High-quality product image URLs"
        },
        video_urls: {
          type: "array",
          items: { type: "string" },
          description: "Product video URLs"
        },
        documentation_url: {
          type: "string",
          format: "uri",
          description: "Link to product documentation"
        },
        // Business Information
        vendor: {
          type: "string",
          description: "Vendor or supplier"
        },
        warranty: {
          type: "string",
          description: "Warranty information"
        },
        return_policy: {
          type: "string",
          description: "Return policy information"
        },
        shipping_info: {
          type: "string",
          description: "Shipping information"
        },
        // AI-Specific Fields
        ai_search_queries: {
          type: "array",
          items: { type: "string" },
          description: "Sample AI search queries this product should match"
        },
        semantic_description: {
          type: "string",
          description: "AI-optimized semantic description for better matching"
        }
      }
    }, FIELD_WEIGHTS = {
      // Required fields (must be 100% complete) - Higher impact
      required: {
        title: 2.5,
        description: 2.5,
        price: 2,
        availability: 2,
        category: 2
      },
      // High importance optional fields (critical for AI search) - Meaningful impact
      high: {
        material: 2,
        dimensions: 2,
        weight: 1.8,
        brand: 2,
        use_cases: 2.2,
        features: 2,
        image_urls: 1.8
      },
      // Medium importance fields (enhance discoverability) - Good impact
      medium: {
        color: 1.5,
        size: 1.5,
        target_audience: 1.8,
        keywords: 1.8,
        upc: 1.2,
        compatibility: 1.5,
        age_range: 1.2,
        gender: 1.2,
        video_urls: 1.5
      },
      // Low importance fields (nice to have) - Still meaningful
      low: {
        model: 1,
        sku: 1.2,
        tags: 1.2,
        vendor: 1,
        warranty: 1,
        return_policy: 1,
        shipping_info: 1,
        documentation_url: 1,
        specifications: 1.2,
        ai_search_queries: 1,
        semantic_description: 1
      }
    }, FIELD_POINTS = {
      required: {
        title: 25,
        description: 25,
        price: 20,
        availability: 20,
        category: 20
      },
      high: {
        material: 20,
        dimensions: 20,
        weight: 18,
        brand: 20,
        use_cases: 22,
        features: 20,
        image_urls: 18
      },
      medium: {
        color: 15,
        size: 15,
        target_audience: 18,
        keywords: 18,
        upc: 12,
        compatibility: 15,
        age_range: 12,
        gender: 12,
        video_urls: 15
      },
      low: {
        model: 10,
        sku: 12,
        tags: 12,
        vendor: 10,
        warranty: 10,
        return_policy: 10,
        shipping_info: 10,
        documentation_url: 10,
        specifications: 12,
        ai_search_queries: 10,
        semantic_description: 10
      }
    }, FIELD_INPUT_TYPES = {
      // Fields that REQUIRE customer/brand input - AI cannot determine these accurately
      customer_input_required: [
        // Physical specifications (only the brand/manufacturer knows these)
        "material",
        "dimensions",
        "weight",
        "color",
        "size",
        // Identification & business info (brand-specific data)
        "brand",
        "model",
        "upc",
        "vendor",
        // Age/gender restrictions (brand policy)
        "age_range",
        "gender",
        "compatibility",
        // Business policies (company-specific)
        "warranty",
        "return_policy",
        "shipping_info",
        "specifications",
        "documentation_url",
        "video_urls"
      ],
      // Fields that AI can generate based on product info
      ai_generatable: [
        // Marketing content (AI can create based on existing product data)
        "description",
        "use_cases",
        "features",
        "keywords",
        "tags",
        "target_audience",
        "sku",
        "ai_search_queries",
        "semantic_description"
      ],
      // Core required fields (must exist, usually already present)
      core_required: [
        "title",
        "price",
        "availability",
        "category",
        "image_urls"
      ]
    };
    FIELD_LABELS = {
      material: "Material",
      dimensions: "Dimensions",
      weight: "Weight",
      color: "Color",
      size: "Size",
      brand: "Brand",
      model: "Model",
      upc: "UPC/Barcode",
      vendor: "Vendor",
      age_range: "Age Range",
      gender: "Target Gender",
      compatibility: "Compatibility",
      warranty: "Warranty Info",
      return_policy: "Return Policy",
      shipping_info: "Shipping Info",
      specifications: "Technical Specs",
      documentation_url: "Documentation URL",
      video_urls: "Video URLs"
    };
  }
});

// node_modules/graphql-request/build/legacy/classes/ClientError.js
var ClientError, init_ClientError = __esm({
  "node_modules/graphql-request/build/legacy/classes/ClientError.js"() {
    ClientError = class extends Error {
      response;
      request;
      constructor(response, request2) {
        let message = `${ClientError.extractMessage(response)}: ${JSON.stringify({
          response,
          request: request2
        })}`;
        super(message), Object.setPrototypeOf(this, ClientError.prototype), this.response = response, this.request = request2, typeof Error.captureStackTrace == "function" && Error.captureStackTrace(this, ClientError);
      }
      static extractMessage(response) {
        return response.errors?.[0]?.message ?? `GraphQL Error (Code: ${String(response.status)})`;
      }
    };
  }
});

// node_modules/graphql-request/build/lib/prelude.js
var uppercase, callOrIdentity, zip, HeadersInitToPlainObject, HeadersInstanceToPlainObject, tryCatch, errorFromMaybeError, isPromiseLikeValue, casesExhausted, isPlainObject, init_prelude = __esm({
  "node_modules/graphql-request/build/lib/prelude.js"() {
    uppercase = (str) => str.toUpperCase(), callOrIdentity = (value) => typeof value == "function" ? value() : value, zip = (a, b) => a.map((k, i) => [k, b[i]]), HeadersInitToPlainObject = (headers) => {
      let oHeaders = {};
      return headers instanceof Headers ? oHeaders = HeadersInstanceToPlainObject(headers) : Array.isArray(headers) ? headers.forEach(([name, value]) => {
        name && value !== void 0 && (oHeaders[name] = value);
      }) : headers && (oHeaders = headers), oHeaders;
    }, HeadersInstanceToPlainObject = (headers) => {
      let o = {};
      return headers.forEach((v, k) => {
        o[k] = v;
      }), o;
    }, tryCatch = (fn) => {
      try {
        let result = fn();
        return isPromiseLikeValue(result) ? result.catch((error) => errorFromMaybeError(error)) : result;
      } catch (error) {
        return errorFromMaybeError(error);
      }
    }, errorFromMaybeError = (maybeError) => maybeError instanceof Error ? maybeError : new Error(String(maybeError)), isPromiseLikeValue = (value) => typeof value == "object" && value !== null && "then" in value && typeof value.then == "function" && "catch" in value && typeof value.catch == "function" && "finally" in value && typeof value.finally == "function", casesExhausted = (value) => {
      throw new Error(`Unhandled case: ${String(value)}`);
    }, isPlainObject = (value) => typeof value == "object" && value !== null && !Array.isArray(value);
  }
});

// node_modules/graphql-request/build/legacy/functions/batchRequests.js
var batchRequests, parseBatchRequestsArgsExtended, parseBatchRequestArgs, init_batchRequests = __esm({
  "node_modules/graphql-request/build/legacy/functions/batchRequests.js"() {
    init_GraphQLClient();
    batchRequests = async (...args) => {
      let params = parseBatchRequestsArgsExtended(args);
      return new GraphQLClient(params.url).batchRequests(params);
    }, parseBatchRequestsArgsExtended = (args) => args.length === 1 ? args[0] : {
      url: args[0],
      documents: args[1],
      requestHeaders: args[2],
      signal: void 0
    }, parseBatchRequestArgs = (documentsOrOptions, requestHeaders) => documentsOrOptions.documents ? documentsOrOptions : {
      documents: documentsOrOptions,
      requestHeaders,
      signal: void 0
    };
  }
});

// node_modules/graphql-request/build/legacy/functions/rawRequest.js
var rawRequest, parseRawRequestExtendedArgs, parseRawRequestArgs, init_rawRequest = __esm({
  "node_modules/graphql-request/build/legacy/functions/rawRequest.js"() {
    init_GraphQLClient();
    rawRequest = async (...args) => {
      let [urlOrOptions, query, ...variablesAndRequestHeaders] = args, requestOptions = parseRawRequestExtendedArgs(urlOrOptions, query, ...variablesAndRequestHeaders);
      return new GraphQLClient(requestOptions.url).rawRequest({
        ...requestOptions
      });
    }, parseRawRequestExtendedArgs = (urlOrOptions, query, ...variablesAndRequestHeaders) => {
      let [variables, requestHeaders] = variablesAndRequestHeaders;
      return typeof urlOrOptions == "string" ? {
        url: urlOrOptions,
        query,
        variables,
        requestHeaders,
        signal: void 0
      } : urlOrOptions;
    }, parseRawRequestArgs = (queryOrOptions, variables, requestHeaders) => queryOrOptions.query ? queryOrOptions : {
      query: queryOrOptions,
      variables,
      requestHeaders,
      signal: void 0
    };
  }
});

// node_modules/graphql/version.js
var require_version = __commonJS({
  "node_modules/graphql/version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.versionInfo = exports.version = void 0;
    var version = "16.11.0";
    exports.version = version;
    var versionInfo = Object.freeze({
      major: 16,
      minor: 11,
      patch: 0,
      preReleaseTag: null
    });
    exports.versionInfo = versionInfo;
  }
});

// node_modules/graphql/jsutils/devAssert.js
var require_devAssert = __commonJS({
  "node_modules/graphql/jsutils/devAssert.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.devAssert = devAssert;
    function devAssert(condition, message) {
      if (!Boolean(condition))
        throw new Error(message);
    }
  }
});

// node_modules/graphql/jsutils/isPromise.js
var require_isPromise = __commonJS({
  "node_modules/graphql/jsutils/isPromise.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.isPromise = isPromise;
    function isPromise(value) {
      return typeof value?.then == "function";
    }
  }
});

// node_modules/graphql/jsutils/isObjectLike.js
var require_isObjectLike = __commonJS({
  "node_modules/graphql/jsutils/isObjectLike.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.isObjectLike = isObjectLike;
    function isObjectLike(value) {
      return typeof value == "object" && value !== null;
    }
  }
});

// node_modules/graphql/jsutils/invariant.js
var require_invariant = __commonJS({
  "node_modules/graphql/jsutils/invariant.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.invariant = invariant;
    function invariant(condition, message) {
      if (!Boolean(condition))
        throw new Error(
          message ?? "Unexpected invariant triggered."
        );
    }
  }
});

// node_modules/graphql/language/location.js
var require_location = __commonJS({
  "node_modules/graphql/language/location.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.getLocation = getLocation;
    var _invariant = require_invariant(), LineRegExp = /\r\n|[\n\r]/g;
    function getLocation(source, position) {
      let lastLineStart = 0, line = 1;
      for (let match of source.body.matchAll(LineRegExp)) {
        if (typeof match.index == "number" || (0, _invariant.invariant)(!1), match.index >= position)
          break;
        lastLineStart = match.index + match[0].length, line += 1;
      }
      return {
        line,
        column: position + 1 - lastLineStart
      };
    }
  }
});

// node_modules/graphql/language/printLocation.js
var require_printLocation = __commonJS({
  "node_modules/graphql/language/printLocation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.printLocation = printLocation;
    exports.printSourceLocation = printSourceLocation;
    var _location = require_location();
    function printLocation(location) {
      return printSourceLocation(
        location.source,
        (0, _location.getLocation)(location.source, location.start)
      );
    }
    function printSourceLocation(source, sourceLocation) {
      let firstLineColumnOffset = source.locationOffset.column - 1, body = "".padStart(firstLineColumnOffset) + source.body, lineIndex = sourceLocation.line - 1, lineOffset = source.locationOffset.line - 1, lineNum = sourceLocation.line + lineOffset, columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0, columnNum = sourceLocation.column + columnOffset, locationStr = `${source.name}:${lineNum}:${columnNum}
`, lines = body.split(/\r\n|[\n\r]/g), locationLine = lines[lineIndex];
      if (locationLine.length > 120) {
        let subLineIndex = Math.floor(columnNum / 80), subLineColumnNum = columnNum % 80, subLines = [];
        for (let i = 0; i < locationLine.length; i += 80)
          subLines.push(locationLine.slice(i, i + 80));
        return locationStr + printPrefixedLines([
          [`${lineNum} |`, subLines[0]],
          ...subLines.slice(1, subLineIndex + 1).map((subLine) => ["|", subLine]),
          ["|", "^".padStart(subLineColumnNum)],
          ["|", subLines[subLineIndex + 1]]
        ]);
      }
      return locationStr + printPrefixedLines([
        // Lines specified like this: ["prefix", "string"],
        [`${lineNum - 1} |`, lines[lineIndex - 1]],
        [`${lineNum} |`, locationLine],
        ["|", "^".padStart(columnNum)],
        [`${lineNum + 1} |`, lines[lineIndex + 1]]
      ]);
    }
    function printPrefixedLines(lines) {
      let existingLines = lines.filter(([_, line]) => line !== void 0), padLen = Math.max(...existingLines.map(([prefix]) => prefix.length));
      return existingLines.map(([prefix, line]) => prefix.padStart(padLen) + (line ? " " + line : "")).join(`
`);
    }
  }
});

// node_modules/graphql/error/GraphQLError.js
var require_GraphQLError = __commonJS({
  "node_modules/graphql/error/GraphQLError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.GraphQLError = void 0;
    exports.formatError = formatError;
    exports.printError = printError;
    var _isObjectLike = require_isObjectLike(), _location = require_location(), _printLocation = require_printLocation();
    function toNormalizedOptions(args) {
      let firstArg = args[0];
      return firstArg == null || "kind" in firstArg || "length" in firstArg ? {
        nodes: firstArg,
        source: args[1],
        positions: args[2],
        path: args[3],
        originalError: args[4],
        extensions: args[5]
      } : firstArg;
    }
    var GraphQLError = class extends Error {
      /**
       * An array of `{ line, column }` locations within the source GraphQL document
       * which correspond to this error.
       *
       * Errors during validation often contain multiple locations, for example to
       * point out two things with the same name. Errors during execution include a
       * single location, the field which produced the error.
       *
       * Enumerable, and appears in the result of JSON.stringify().
       */
      /**
       * An array describing the JSON-path into the execution response which
       * corresponds to this error. Only included for errors during execution.
       *
       * Enumerable, and appears in the result of JSON.stringify().
       */
      /**
       * An array of GraphQL AST Nodes corresponding to this error.
       */
      /**
       * The source GraphQL document for the first location of this error.
       *
       * Note that if this Error represents more than one node, the source may not
       * represent nodes after the first node.
       */
      /**
       * An array of character offsets within the source GraphQL document
       * which correspond to this error.
       */
      /**
       * The original error thrown from a field resolver during execution.
       */
      /**
       * Extension fields to add to the formatted error.
       */
      /**
       * @deprecated Please use the `GraphQLErrorOptions` constructor overload instead.
       */
      constructor(message, ...rawArgs) {
        var _this$nodes, _nodeLocations$, _ref;
        let { nodes, source, positions, path, originalError, extensions } = toNormalizedOptions(rawArgs);
        super(message), this.name = "GraphQLError", this.path = path ?? void 0, this.originalError = originalError ?? void 0, this.nodes = undefinedIfEmpty(
          Array.isArray(nodes) ? nodes : nodes ? [nodes] : void 0
        );
        let nodeLocations = undefinedIfEmpty(
          (_this$nodes = this.nodes) === null || _this$nodes === void 0 ? void 0 : _this$nodes.map((node) => node.loc).filter((loc) => loc != null)
        );
        this.source = source ?? (nodeLocations == null || (_nodeLocations$ = nodeLocations[0]) === null || _nodeLocations$ === void 0 ? void 0 : _nodeLocations$.source), this.positions = positions ?? nodeLocations?.map((loc) => loc.start), this.locations = positions && source ? positions.map((pos) => (0, _location.getLocation)(source, pos)) : nodeLocations?.map(
          (loc) => (0, _location.getLocation)(loc.source, loc.start)
        );
        let originalExtensions = (0, _isObjectLike.isObjectLike)(
          originalError?.extensions
        ) ? originalError?.extensions : void 0;
        this.extensions = (_ref = extensions ?? originalExtensions) !== null && _ref !== void 0 ? _ref : /* @__PURE__ */ Object.create(null), Object.defineProperties(this, {
          message: {
            writable: !0,
            enumerable: !0
          },
          name: {
            enumerable: !1
          },
          nodes: {
            enumerable: !1
          },
          source: {
            enumerable: !1
          },
          positions: {
            enumerable: !1
          },
          originalError: {
            enumerable: !1
          }
        }), originalError != null && originalError.stack ? Object.defineProperty(this, "stack", {
          value: originalError.stack,
          writable: !0,
          configurable: !0
        }) : Error.captureStackTrace ? Error.captureStackTrace(this, GraphQLError) : Object.defineProperty(this, "stack", {
          value: Error().stack,
          writable: !0,
          configurable: !0
        });
      }
      get [Symbol.toStringTag]() {
        return "GraphQLError";
      }
      toString() {
        let output = this.message;
        if (this.nodes)
          for (let node of this.nodes)
            node.loc && (output += `

` + (0, _printLocation.printLocation)(node.loc));
        else if (this.source && this.locations)
          for (let location of this.locations)
            output += `

` + (0, _printLocation.printSourceLocation)(this.source, location);
        return output;
      }
      toJSON() {
        let formattedError = {
          message: this.message
        };
        return this.locations != null && (formattedError.locations = this.locations), this.path != null && (formattedError.path = this.path), this.extensions != null && Object.keys(this.extensions).length > 0 && (formattedError.extensions = this.extensions), formattedError;
      }
    };
    exports.GraphQLError = GraphQLError;
    function undefinedIfEmpty(array) {
      return array === void 0 || array.length === 0 ? void 0 : array;
    }
    function printError(error) {
      return error.toString();
    }
    function formatError(error) {
      return error.toJSON();
    }
  }
});

// node_modules/graphql/error/syntaxError.js
var require_syntaxError = __commonJS({
  "node_modules/graphql/error/syntaxError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.syntaxError = syntaxError;
    var _GraphQLError = require_GraphQLError();
    function syntaxError(source, position, description) {
      return new _GraphQLError.GraphQLError(`Syntax Error: ${description}`, {
        source,
        positions: [position]
      });
    }
  }
});

// node_modules/graphql/language/ast.js
var require_ast = __commonJS({
  "node_modules/graphql/language/ast.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.Token = exports.QueryDocumentKeys = exports.OperationTypeNode = exports.Location = void 0;
    exports.isNode = isNode;
    var Location = class {
      /**
       * The character offset at which this Node begins.
       */
      /**
       * The character offset at which this Node ends.
       */
      /**
       * The Token at which this Node begins.
       */
      /**
       * The Token at which this Node ends.
       */
      /**
       * The Source document the AST represents.
       */
      constructor(startToken, endToken, source) {
        this.start = startToken.start, this.end = endToken.end, this.startToken = startToken, this.endToken = endToken, this.source = source;
      }
      get [Symbol.toStringTag]() {
        return "Location";
      }
      toJSON() {
        return {
          start: this.start,
          end: this.end
        };
      }
    };
    exports.Location = Location;
    var Token = class {
      /**
       * The kind of Token.
       */
      /**
       * The character offset at which this Node begins.
       */
      /**
       * The character offset at which this Node ends.
       */
      /**
       * The 1-indexed line number on which this Token appears.
       */
      /**
       * The 1-indexed column number at which this Token begins.
       */
      /**
       * For non-punctuation tokens, represents the interpreted value of the token.
       *
       * Note: is undefined for punctuation tokens, but typed as string for
       * convenience in the parser.
       */
      /**
       * Tokens exist as nodes in a double-linked-list amongst all tokens
       * including ignored tokens. <SOF> is always the first node and <EOF>
       * the last.
       */
      constructor(kind, start, end, line, column, value) {
        this.kind = kind, this.start = start, this.end = end, this.line = line, this.column = column, this.value = value, this.prev = null, this.next = null;
      }
      get [Symbol.toStringTag]() {
        return "Token";
      }
      toJSON() {
        return {
          kind: this.kind,
          value: this.value,
          line: this.line,
          column: this.column
        };
      }
    };
    exports.Token = Token;
    var QueryDocumentKeys = {
      Name: [],
      Document: ["definitions"],
      OperationDefinition: [
        "name",
        "variableDefinitions",
        "directives",
        "selectionSet"
      ],
      VariableDefinition: ["variable", "type", "defaultValue", "directives"],
      Variable: ["name"],
      SelectionSet: ["selections"],
      Field: ["alias", "name", "arguments", "directives", "selectionSet"],
      Argument: ["name", "value"],
      FragmentSpread: ["name", "directives"],
      InlineFragment: ["typeCondition", "directives", "selectionSet"],
      FragmentDefinition: [
        "name",
        // Note: fragment variable definitions are deprecated and will removed in v17.0.0
        "variableDefinitions",
        "typeCondition",
        "directives",
        "selectionSet"
      ],
      IntValue: [],
      FloatValue: [],
      StringValue: [],
      BooleanValue: [],
      NullValue: [],
      EnumValue: [],
      ListValue: ["values"],
      ObjectValue: ["fields"],
      ObjectField: ["name", "value"],
      Directive: ["name", "arguments"],
      NamedType: ["name"],
      ListType: ["type"],
      NonNullType: ["type"],
      SchemaDefinition: ["description", "directives", "operationTypes"],
      OperationTypeDefinition: ["type"],
      ScalarTypeDefinition: ["description", "name", "directives"],
      ObjectTypeDefinition: [
        "description",
        "name",
        "interfaces",
        "directives",
        "fields"
      ],
      FieldDefinition: ["description", "name", "arguments", "type", "directives"],
      InputValueDefinition: [
        "description",
        "name",
        "type",
        "defaultValue",
        "directives"
      ],
      InterfaceTypeDefinition: [
        "description",
        "name",
        "interfaces",
        "directives",
        "fields"
      ],
      UnionTypeDefinition: ["description", "name", "directives", "types"],
      EnumTypeDefinition: ["description", "name", "directives", "values"],
      EnumValueDefinition: ["description", "name", "directives"],
      InputObjectTypeDefinition: ["description", "name", "directives", "fields"],
      DirectiveDefinition: ["description", "name", "arguments", "locations"],
      SchemaExtension: ["directives", "operationTypes"],
      ScalarTypeExtension: ["name", "directives"],
      ObjectTypeExtension: ["name", "interfaces", "directives", "fields"],
      InterfaceTypeExtension: ["name", "interfaces", "directives", "fields"],
      UnionTypeExtension: ["name", "directives", "types"],
      EnumTypeExtension: ["name", "directives", "values"],
      InputObjectTypeExtension: ["name", "directives", "fields"]
    };
    exports.QueryDocumentKeys = QueryDocumentKeys;
    var kindValues = new Set(Object.keys(QueryDocumentKeys));
    function isNode(maybeNode) {
      let maybeKind = maybeNode?.kind;
      return typeof maybeKind == "string" && kindValues.has(maybeKind);
    }
    var OperationTypeNode;
    exports.OperationTypeNode = OperationTypeNode;
    (function(OperationTypeNode2) {
      OperationTypeNode2.QUERY = "query", OperationTypeNode2.MUTATION = "mutation", OperationTypeNode2.SUBSCRIPTION = "subscription";
    })(OperationTypeNode || (exports.OperationTypeNode = OperationTypeNode = {}));
  }
});

// node_modules/graphql/language/directiveLocation.js
var require_directiveLocation = __commonJS({
  "node_modules/graphql/language/directiveLocation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.DirectiveLocation = void 0;
    var DirectiveLocation;
    exports.DirectiveLocation = DirectiveLocation;
    (function(DirectiveLocation2) {
      DirectiveLocation2.QUERY = "QUERY", DirectiveLocation2.MUTATION = "MUTATION", DirectiveLocation2.SUBSCRIPTION = "SUBSCRIPTION", DirectiveLocation2.FIELD = "FIELD", DirectiveLocation2.FRAGMENT_DEFINITION = "FRAGMENT_DEFINITION", DirectiveLocation2.FRAGMENT_SPREAD = "FRAGMENT_SPREAD", DirectiveLocation2.INLINE_FRAGMENT = "INLINE_FRAGMENT", DirectiveLocation2.VARIABLE_DEFINITION = "VARIABLE_DEFINITION", DirectiveLocation2.SCHEMA = "SCHEMA", DirectiveLocation2.SCALAR = "SCALAR", DirectiveLocation2.OBJECT = "OBJECT", DirectiveLocation2.FIELD_DEFINITION = "FIELD_DEFINITION", DirectiveLocation2.ARGUMENT_DEFINITION = "ARGUMENT_DEFINITION", DirectiveLocation2.INTERFACE = "INTERFACE", DirectiveLocation2.UNION = "UNION", DirectiveLocation2.ENUM = "ENUM", DirectiveLocation2.ENUM_VALUE = "ENUM_VALUE", DirectiveLocation2.INPUT_OBJECT = "INPUT_OBJECT", DirectiveLocation2.INPUT_FIELD_DEFINITION = "INPUT_FIELD_DEFINITION";
    })(DirectiveLocation || (exports.DirectiveLocation = DirectiveLocation = {}));
  }
});

// node_modules/graphql/language/kinds.js
var require_kinds = __commonJS({
  "node_modules/graphql/language/kinds.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.Kind = void 0;
    var Kind2;
    exports.Kind = Kind2;
    (function(Kind3) {
      Kind3.NAME = "Name", Kind3.DOCUMENT = "Document", Kind3.OPERATION_DEFINITION = "OperationDefinition", Kind3.VARIABLE_DEFINITION = "VariableDefinition", Kind3.SELECTION_SET = "SelectionSet", Kind3.FIELD = "Field", Kind3.ARGUMENT = "Argument", Kind3.FRAGMENT_SPREAD = "FragmentSpread", Kind3.INLINE_FRAGMENT = "InlineFragment", Kind3.FRAGMENT_DEFINITION = "FragmentDefinition", Kind3.VARIABLE = "Variable", Kind3.INT = "IntValue", Kind3.FLOAT = "FloatValue", Kind3.STRING = "StringValue", Kind3.BOOLEAN = "BooleanValue", Kind3.NULL = "NullValue", Kind3.ENUM = "EnumValue", Kind3.LIST = "ListValue", Kind3.OBJECT = "ObjectValue", Kind3.OBJECT_FIELD = "ObjectField", Kind3.DIRECTIVE = "Directive", Kind3.NAMED_TYPE = "NamedType", Kind3.LIST_TYPE = "ListType", Kind3.NON_NULL_TYPE = "NonNullType", Kind3.SCHEMA_DEFINITION = "SchemaDefinition", Kind3.OPERATION_TYPE_DEFINITION = "OperationTypeDefinition", Kind3.SCALAR_TYPE_DEFINITION = "ScalarTypeDefinition", Kind3.OBJECT_TYPE_DEFINITION = "ObjectTypeDefinition", Kind3.FIELD_DEFINITION = "FieldDefinition", Kind3.INPUT_VALUE_DEFINITION = "InputValueDefinition", Kind3.INTERFACE_TYPE_DEFINITION = "InterfaceTypeDefinition", Kind3.UNION_TYPE_DEFINITION = "UnionTypeDefinition", Kind3.ENUM_TYPE_DEFINITION = "EnumTypeDefinition", Kind3.ENUM_VALUE_DEFINITION = "EnumValueDefinition", Kind3.INPUT_OBJECT_TYPE_DEFINITION = "InputObjectTypeDefinition", Kind3.DIRECTIVE_DEFINITION = "DirectiveDefinition", Kind3.SCHEMA_EXTENSION = "SchemaExtension", Kind3.SCALAR_TYPE_EXTENSION = "ScalarTypeExtension", Kind3.OBJECT_TYPE_EXTENSION = "ObjectTypeExtension", Kind3.INTERFACE_TYPE_EXTENSION = "InterfaceTypeExtension", Kind3.UNION_TYPE_EXTENSION = "UnionTypeExtension", Kind3.ENUM_TYPE_EXTENSION = "EnumTypeExtension", Kind3.INPUT_OBJECT_TYPE_EXTENSION = "InputObjectTypeExtension";
    })(Kind2 || (exports.Kind = Kind2 = {}));
  }
});

// node_modules/graphql/language/characterClasses.js
var require_characterClasses = __commonJS({
  "node_modules/graphql/language/characterClasses.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.isDigit = isDigit;
    exports.isLetter = isLetter;
    exports.isNameContinue = isNameContinue;
    exports.isNameStart = isNameStart;
    exports.isWhiteSpace = isWhiteSpace;
    function isWhiteSpace(code) {
      return code === 9 || code === 32;
    }
    function isDigit(code) {
      return code >= 48 && code <= 57;
    }
    function isLetter(code) {
      return code >= 97 && code <= 122 || // A-Z
      code >= 65 && code <= 90;
    }
    function isNameStart(code) {
      return isLetter(code) || code === 95;
    }
    function isNameContinue(code) {
      return isLetter(code) || isDigit(code) || code === 95;
    }
  }
});

// node_modules/graphql/language/blockString.js
var require_blockString = __commonJS({
  "node_modules/graphql/language/blockString.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.dedentBlockStringLines = dedentBlockStringLines;
    exports.isPrintableAsBlockString = isPrintableAsBlockString;
    exports.printBlockString = printBlockString;
    var _characterClasses = require_characterClasses();
    function dedentBlockStringLines(lines) {
      var _firstNonEmptyLine2;
      let commonIndent = Number.MAX_SAFE_INTEGER, firstNonEmptyLine = null, lastNonEmptyLine = -1;
      for (let i = 0; i < lines.length; ++i) {
        var _firstNonEmptyLine;
        let line = lines[i], indent = leadingWhitespace(line);
        indent !== line.length && (firstNonEmptyLine = (_firstNonEmptyLine = firstNonEmptyLine) !== null && _firstNonEmptyLine !== void 0 ? _firstNonEmptyLine : i, lastNonEmptyLine = i, i !== 0 && indent < commonIndent && (commonIndent = indent));
      }
      return lines.map((line, i) => i === 0 ? line : line.slice(commonIndent)).slice(
        (_firstNonEmptyLine2 = firstNonEmptyLine) !== null && _firstNonEmptyLine2 !== void 0 ? _firstNonEmptyLine2 : 0,
        lastNonEmptyLine + 1
      );
    }
    function leadingWhitespace(str) {
      let i = 0;
      for (; i < str.length && (0, _characterClasses.isWhiteSpace)(str.charCodeAt(i)); )
        ++i;
      return i;
    }
    function isPrintableAsBlockString(value) {
      if (value === "")
        return !0;
      let isEmptyLine = !0, hasIndent = !1, hasCommonIndent = !0, seenNonEmptyLine = !1;
      for (let i = 0; i < value.length; ++i)
        switch (value.codePointAt(i)) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 11:
          case 12:
          case 14:
          case 15:
            return !1;
          case 13:
            return !1;
          case 10:
            if (isEmptyLine && !seenNonEmptyLine)
              return !1;
            seenNonEmptyLine = !0, isEmptyLine = !0, hasIndent = !1;
            break;
          case 9:
          case 32:
            hasIndent || (hasIndent = isEmptyLine);
            break;
          default:
            hasCommonIndent && (hasCommonIndent = hasIndent), isEmptyLine = !1;
        }
      return !(isEmptyLine || hasCommonIndent && seenNonEmptyLine);
    }
    function printBlockString(value, options) {
      let escapedValue = value.replace(/"""/g, '\\"""'), lines = escapedValue.split(/\r\n|[\n\r]/g), isSingleLine = lines.length === 1, forceLeadingNewLine = lines.length > 1 && lines.slice(1).every(
        (line) => line.length === 0 || (0, _characterClasses.isWhiteSpace)(line.charCodeAt(0))
      ), hasTrailingTripleQuotes = escapedValue.endsWith('\\"""'), hasTrailingQuote = value.endsWith('"') && !hasTrailingTripleQuotes, hasTrailingSlash = value.endsWith("\\"), forceTrailingNewline = hasTrailingQuote || hasTrailingSlash, printAsMultipleLines = !(options != null && options.minimize) && // add leading and trailing new lines only if it improves readability
      (!isSingleLine || value.length > 70 || forceTrailingNewline || forceLeadingNewLine || hasTrailingTripleQuotes), result = "", skipLeadingNewLine = isSingleLine && (0, _characterClasses.isWhiteSpace)(value.charCodeAt(0));
      return (printAsMultipleLines && !skipLeadingNewLine || forceLeadingNewLine) && (result += `
`), result += escapedValue, (printAsMultipleLines || forceTrailingNewline) && (result += `
`), '"""' + result + '"""';
    }
  }
});

// node_modules/graphql/language/tokenKind.js
var require_tokenKind = __commonJS({
  "node_modules/graphql/language/tokenKind.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.TokenKind = void 0;
    var TokenKind;
    exports.TokenKind = TokenKind;
    (function(TokenKind2) {
      TokenKind2.SOF = "<SOF>", TokenKind2.EOF = "<EOF>", TokenKind2.BANG = "!", TokenKind2.DOLLAR = "$", TokenKind2.AMP = "&", TokenKind2.PAREN_L = "(", TokenKind2.PAREN_R = ")", TokenKind2.SPREAD = "...", TokenKind2.COLON = ":", TokenKind2.EQUALS = "=", TokenKind2.AT = "@", TokenKind2.BRACKET_L = "[", TokenKind2.BRACKET_R = "]", TokenKind2.BRACE_L = "{", TokenKind2.PIPE = "|", TokenKind2.BRACE_R = "}", TokenKind2.NAME = "Name", TokenKind2.INT = "Int", TokenKind2.FLOAT = "Float", TokenKind2.STRING = "String", TokenKind2.BLOCK_STRING = "BlockString", TokenKind2.COMMENT = "Comment";
    })(TokenKind || (exports.TokenKind = TokenKind = {}));
  }
});

// node_modules/graphql/language/lexer.js
var require_lexer = __commonJS({
  "node_modules/graphql/language/lexer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.Lexer = void 0;
    exports.isPunctuatorTokenKind = isPunctuatorTokenKind;
    var _syntaxError = require_syntaxError(), _ast = require_ast(), _blockString = require_blockString(), _characterClasses = require_characterClasses(), _tokenKind = require_tokenKind(), Lexer = class {
      /**
       * The previously focused non-ignored token.
       */
      /**
       * The currently focused non-ignored token.
       */
      /**
       * The (1-indexed) line containing the current token.
       */
      /**
       * The character offset at which the current line begins.
       */
      constructor(source) {
        let startOfFileToken = new _ast.Token(
          _tokenKind.TokenKind.SOF,
          0,
          0,
          0,
          0
        );
        this.source = source, this.lastToken = startOfFileToken, this.token = startOfFileToken, this.line = 1, this.lineStart = 0;
      }
      get [Symbol.toStringTag]() {
        return "Lexer";
      }
      /**
       * Advances the token stream to the next non-ignored token.
       */
      advance() {
        return this.lastToken = this.token, this.token = this.lookahead();
      }
      /**
       * Looks ahead and returns the next non-ignored token, but does not change
       * the state of Lexer.
       */
      lookahead() {
        let token = this.token;
        if (token.kind !== _tokenKind.TokenKind.EOF)
          do
            if (token.next)
              token = token.next;
            else {
              let nextToken = readNextToken(this, token.end);
              token.next = nextToken, nextToken.prev = token, token = nextToken;
            }
          while (token.kind === _tokenKind.TokenKind.COMMENT);
        return token;
      }
    };
    exports.Lexer = Lexer;
    function isPunctuatorTokenKind(kind) {
      return kind === _tokenKind.TokenKind.BANG || kind === _tokenKind.TokenKind.DOLLAR || kind === _tokenKind.TokenKind.AMP || kind === _tokenKind.TokenKind.PAREN_L || kind === _tokenKind.TokenKind.PAREN_R || kind === _tokenKind.TokenKind.SPREAD || kind === _tokenKind.TokenKind.COLON || kind === _tokenKind.TokenKind.EQUALS || kind === _tokenKind.TokenKind.AT || kind === _tokenKind.TokenKind.BRACKET_L || kind === _tokenKind.TokenKind.BRACKET_R || kind === _tokenKind.TokenKind.BRACE_L || kind === _tokenKind.TokenKind.PIPE || kind === _tokenKind.TokenKind.BRACE_R;
    }
    function isUnicodeScalarValue(code) {
      return code >= 0 && code <= 55295 || code >= 57344 && code <= 1114111;
    }
    function isSupplementaryCodePoint(body, location) {
      return isLeadingSurrogate(body.charCodeAt(location)) && isTrailingSurrogate(body.charCodeAt(location + 1));
    }
    function isLeadingSurrogate(code) {
      return code >= 55296 && code <= 56319;
    }
    function isTrailingSurrogate(code) {
      return code >= 56320 && code <= 57343;
    }
    function printCodePointAt(lexer, location) {
      let code = lexer.source.body.codePointAt(location);
      if (code === void 0)
        return _tokenKind.TokenKind.EOF;
      if (code >= 32 && code <= 126) {
        let char = String.fromCodePoint(code);
        return char === '"' ? `'"'` : `"${char}"`;
      }
      return "U+" + code.toString(16).toUpperCase().padStart(4, "0");
    }
    function createToken(lexer, kind, start, end, value) {
      let line = lexer.line, col = 1 + start - lexer.lineStart;
      return new _ast.Token(kind, start, end, line, col, value);
    }
    function readNextToken(lexer, start) {
      let body = lexer.source.body, bodyLength = body.length, position = start;
      for (; position < bodyLength; ) {
        let code = body.charCodeAt(position);
        switch (code) {
          case 65279:
          case 9:
          case 32:
          case 44:
            ++position;
            continue;
          case 10:
            ++position, ++lexer.line, lexer.lineStart = position;
            continue;
          case 13:
            body.charCodeAt(position + 1) === 10 ? position += 2 : ++position, ++lexer.line, lexer.lineStart = position;
            continue;
          case 35:
            return readComment(lexer, position);
          case 33:
            return createToken(
              lexer,
              _tokenKind.TokenKind.BANG,
              position,
              position + 1
            );
          case 36:
            return createToken(
              lexer,
              _tokenKind.TokenKind.DOLLAR,
              position,
              position + 1
            );
          case 38:
            return createToken(
              lexer,
              _tokenKind.TokenKind.AMP,
              position,
              position + 1
            );
          case 40:
            return createToken(
              lexer,
              _tokenKind.TokenKind.PAREN_L,
              position,
              position + 1
            );
          case 41:
            return createToken(
              lexer,
              _tokenKind.TokenKind.PAREN_R,
              position,
              position + 1
            );
          case 46:
            if (body.charCodeAt(position + 1) === 46 && body.charCodeAt(position + 2) === 46)
              return createToken(
                lexer,
                _tokenKind.TokenKind.SPREAD,
                position,
                position + 3
              );
            break;
          case 58:
            return createToken(
              lexer,
              _tokenKind.TokenKind.COLON,
              position,
              position + 1
            );
          case 61:
            return createToken(
              lexer,
              _tokenKind.TokenKind.EQUALS,
              position,
              position + 1
            );
          case 64:
            return createToken(
              lexer,
              _tokenKind.TokenKind.AT,
              position,
              position + 1
            );
          case 91:
            return createToken(
              lexer,
              _tokenKind.TokenKind.BRACKET_L,
              position,
              position + 1
            );
          case 93:
            return createToken(
              lexer,
              _tokenKind.TokenKind.BRACKET_R,
              position,
              position + 1
            );
          case 123:
            return createToken(
              lexer,
              _tokenKind.TokenKind.BRACE_L,
              position,
              position + 1
            );
          case 124:
            return createToken(
              lexer,
              _tokenKind.TokenKind.PIPE,
              position,
              position + 1
            );
          case 125:
            return createToken(
              lexer,
              _tokenKind.TokenKind.BRACE_R,
              position,
              position + 1
            );
          case 34:
            return body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 ? readBlockString(lexer, position) : readString(lexer, position);
        }
        if ((0, _characterClasses.isDigit)(code) || code === 45)
          return readNumber(lexer, position, code);
        if ((0, _characterClasses.isNameStart)(code))
          return readName(lexer, position);
        throw (0, _syntaxError.syntaxError)(
          lexer.source,
          position,
          code === 39 ? `Unexpected single quote character ('), did you mean to use a double quote (")?` : isUnicodeScalarValue(code) || isSupplementaryCodePoint(body, position) ? `Unexpected character: ${printCodePointAt(lexer, position)}.` : `Invalid character: ${printCodePointAt(lexer, position)}.`
        );
      }
      return createToken(lexer, _tokenKind.TokenKind.EOF, bodyLength, bodyLength);
    }
    function readComment(lexer, start) {
      let body = lexer.source.body, bodyLength = body.length, position = start + 1;
      for (; position < bodyLength; ) {
        let code = body.charCodeAt(position);
        if (code === 10 || code === 13)
          break;
        if (isUnicodeScalarValue(code))
          ++position;
        else if (isSupplementaryCodePoint(body, position))
          position += 2;
        else
          break;
      }
      return createToken(
        lexer,
        _tokenKind.TokenKind.COMMENT,
        start,
        position,
        body.slice(start + 1, position)
      );
    }
    function readNumber(lexer, start, firstCode) {
      let body = lexer.source.body, position = start, code = firstCode, isFloat = !1;
      if (code === 45 && (code = body.charCodeAt(++position)), code === 48) {
        if (code = body.charCodeAt(++position), (0, _characterClasses.isDigit)(code))
          throw (0, _syntaxError.syntaxError)(
            lexer.source,
            position,
            `Invalid number, unexpected digit after 0: ${printCodePointAt(
              lexer,
              position
            )}.`
          );
      } else
        position = readDigits(lexer, position, code), code = body.charCodeAt(position);
      if (code === 46 && (isFloat = !0, code = body.charCodeAt(++position), position = readDigits(lexer, position, code), code = body.charCodeAt(position)), (code === 69 || code === 101) && (isFloat = !0, code = body.charCodeAt(++position), (code === 43 || code === 45) && (code = body.charCodeAt(++position)), position = readDigits(lexer, position, code), code = body.charCodeAt(position)), code === 46 || (0, _characterClasses.isNameStart)(code))
        throw (0, _syntaxError.syntaxError)(
          lexer.source,
          position,
          `Invalid number, expected digit but got: ${printCodePointAt(
            lexer,
            position
          )}.`
        );
      return createToken(
        lexer,
        isFloat ? _tokenKind.TokenKind.FLOAT : _tokenKind.TokenKind.INT,
        start,
        position,
        body.slice(start, position)
      );
    }
    function readDigits(lexer, start, firstCode) {
      if (!(0, _characterClasses.isDigit)(firstCode))
        throw (0, _syntaxError.syntaxError)(
          lexer.source,
          start,
          `Invalid number, expected digit but got: ${printCodePointAt(
            lexer,
            start
          )}.`
        );
      let body = lexer.source.body, position = start + 1;
      for (; (0, _characterClasses.isDigit)(body.charCodeAt(position)); )
        ++position;
      return position;
    }
    function readString(lexer, start) {
      let body = lexer.source.body, bodyLength = body.length, position = start + 1, chunkStart = position, value = "";
      for (; position < bodyLength; ) {
        let code = body.charCodeAt(position);
        if (code === 34)
          return value += body.slice(chunkStart, position), createToken(
            lexer,
            _tokenKind.TokenKind.STRING,
            start,
            position + 1,
            value
          );
        if (code === 92) {
          value += body.slice(chunkStart, position);
          let escape = body.charCodeAt(position + 1) === 117 ? body.charCodeAt(position + 2) === 123 ? readEscapedUnicodeVariableWidth(lexer, position) : readEscapedUnicodeFixedWidth(lexer, position) : readEscapedCharacter(lexer, position);
          value += escape.value, position += escape.size, chunkStart = position;
          continue;
        }
        if (code === 10 || code === 13)
          break;
        if (isUnicodeScalarValue(code))
          ++position;
        else if (isSupplementaryCodePoint(body, position))
          position += 2;
        else
          throw (0, _syntaxError.syntaxError)(
            lexer.source,
            position,
            `Invalid character within String: ${printCodePointAt(
              lexer,
              position
            )}.`
          );
      }
      throw (0, _syntaxError.syntaxError)(
        lexer.source,
        position,
        "Unterminated string."
      );
    }
    function readEscapedUnicodeVariableWidth(lexer, position) {
      let body = lexer.source.body, point = 0, size = 3;
      for (; size < 12; ) {
        let code = body.charCodeAt(position + size++);
        if (code === 125) {
          if (size < 5 || !isUnicodeScalarValue(point))
            break;
          return {
            value: String.fromCodePoint(point),
            size
          };
        }
        if (point = point << 4 | readHexDigit(code), point < 0)
          break;
      }
      throw (0, _syntaxError.syntaxError)(
        lexer.source,
        position,
        `Invalid Unicode escape sequence: "${body.slice(
          position,
          position + size
        )}".`
      );
    }
    function readEscapedUnicodeFixedWidth(lexer, position) {
      let body = lexer.source.body, code = read16BitHexCode(body, position + 2);
      if (isUnicodeScalarValue(code))
        return {
          value: String.fromCodePoint(code),
          size: 6
        };
      if (isLeadingSurrogate(code) && body.charCodeAt(position + 6) === 92 && body.charCodeAt(position + 7) === 117) {
        let trailingCode = read16BitHexCode(body, position + 8);
        if (isTrailingSurrogate(trailingCode))
          return {
            value: String.fromCodePoint(code, trailingCode),
            size: 12
          };
      }
      throw (0, _syntaxError.syntaxError)(
        lexer.source,
        position,
        `Invalid Unicode escape sequence: "${body.slice(position, position + 6)}".`
      );
    }
    function read16BitHexCode(body, position) {
      return readHexDigit(body.charCodeAt(position)) << 12 | readHexDigit(body.charCodeAt(position + 1)) << 8 | readHexDigit(body.charCodeAt(position + 2)) << 4 | readHexDigit(body.charCodeAt(position + 3));
    }
    function readHexDigit(code) {
      return code >= 48 && code <= 57 ? code - 48 : code >= 65 && code <= 70 ? code - 55 : code >= 97 && code <= 102 ? code - 87 : -1;
    }
    function readEscapedCharacter(lexer, position) {
      let body = lexer.source.body;
      switch (body.charCodeAt(position + 1)) {
        case 34:
          return {
            value: '"',
            size: 2
          };
        case 92:
          return {
            value: "\\",
            size: 2
          };
        case 47:
          return {
            value: "/",
            size: 2
          };
        case 98:
          return {
            value: "\b",
            size: 2
          };
        case 102:
          return {
            value: "\f",
            size: 2
          };
        case 110:
          return {
            value: `
`,
            size: 2
          };
        case 114:
          return {
            value: "\r",
            size: 2
          };
        case 116:
          return {
            value: "	",
            size: 2
          };
      }
      throw (0, _syntaxError.syntaxError)(
        lexer.source,
        position,
        `Invalid character escape sequence: "${body.slice(
          position,
          position + 2
        )}".`
      );
    }
    function readBlockString(lexer, start) {
      let body = lexer.source.body, bodyLength = body.length, lineStart = lexer.lineStart, position = start + 3, chunkStart = position, currentLine = "", blockLines = [];
      for (; position < bodyLength; ) {
        let code = body.charCodeAt(position);
        if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {
          currentLine += body.slice(chunkStart, position), blockLines.push(currentLine);
          let token = createToken(
            lexer,
            _tokenKind.TokenKind.BLOCK_STRING,
            start,
            position + 3,
            // Return a string of the lines joined with U+000A.
            (0, _blockString.dedentBlockStringLines)(blockLines).join(`
`)
          );
          return lexer.line += blockLines.length - 1, lexer.lineStart = lineStart, token;
        }
        if (code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {
          currentLine += body.slice(chunkStart, position), chunkStart = position + 1, position += 4;
          continue;
        }
        if (code === 10 || code === 13) {
          currentLine += body.slice(chunkStart, position), blockLines.push(currentLine), code === 13 && body.charCodeAt(position + 1) === 10 ? position += 2 : ++position, currentLine = "", chunkStart = position, lineStart = position;
          continue;
        }
        if (isUnicodeScalarValue(code))
          ++position;
        else if (isSupplementaryCodePoint(body, position))
          position += 2;
        else
          throw (0, _syntaxError.syntaxError)(
            lexer.source,
            position,
            `Invalid character within String: ${printCodePointAt(
              lexer,
              position
            )}.`
          );
      }
      throw (0, _syntaxError.syntaxError)(
        lexer.source,
        position,
        "Unterminated string."
      );
    }
    function readName(lexer, start) {
      let body = lexer.source.body, bodyLength = body.length, position = start + 1;
      for (; position < bodyLength; ) {
        let code = body.charCodeAt(position);
        if ((0, _characterClasses.isNameContinue)(code))
          ++position;
        else
          break;
      }
      return createToken(
        lexer,
        _tokenKind.TokenKind.NAME,
        start,
        position,
        body.slice(start, position)
      );
    }
  }
});

// node_modules/graphql/jsutils/inspect.js
var require_inspect = __commonJS({
  "node_modules/graphql/jsutils/inspect.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.inspect = inspect;
    var MAX_ARRAY_LENGTH = 10, MAX_RECURSIVE_DEPTH = 2;
    function inspect(value) {
      return formatValue(value, []);
    }
    function formatValue(value, seenValues) {
      switch (typeof value) {
        case "string":
          return JSON.stringify(value);
        case "function":
          return value.name ? `[function ${value.name}]` : "[function]";
        case "object":
          return formatObjectValue(value, seenValues);
        default:
          return String(value);
      }
    }
    function formatObjectValue(value, previouslySeenValues) {
      if (value === null)
        return "null";
      if (previouslySeenValues.includes(value))
        return "[Circular]";
      let seenValues = [...previouslySeenValues, value];
      if (isJSONable(value)) {
        let jsonValue = value.toJSON();
        if (jsonValue !== value)
          return typeof jsonValue == "string" ? jsonValue : formatValue(jsonValue, seenValues);
      } else if (Array.isArray(value))
        return formatArray(value, seenValues);
      return formatObject(value, seenValues);
    }
    function isJSONable(value) {
      return typeof value.toJSON == "function";
    }
    function formatObject(object, seenValues) {
      let entries = Object.entries(object);
      return entries.length === 0 ? "{}" : seenValues.length > MAX_RECURSIVE_DEPTH ? "[" + getObjectTag(object) + "]" : "{ " + entries.map(
        ([key, value]) => key + ": " + formatValue(value, seenValues)
      ).join(", ") + " }";
    }
    function formatArray(array, seenValues) {
      if (array.length === 0)
        return "[]";
      if (seenValues.length > MAX_RECURSIVE_DEPTH)
        return "[Array]";
      let len = Math.min(MAX_ARRAY_LENGTH, array.length), remaining = array.length - len, items = [];
      for (let i = 0; i < len; ++i)
        items.push(formatValue(array[i], seenValues));
      return remaining === 1 ? items.push("... 1 more item") : remaining > 1 && items.push(`... ${remaining} more items`), "[" + items.join(", ") + "]";
    }
    function getObjectTag(object) {
      let tag = Object.prototype.toString.call(object).replace(/^\[object /, "").replace(/]$/, "");
      if (tag === "Object" && typeof object.constructor == "function") {
        let name = object.constructor.name;
        if (typeof name == "string" && name !== "")
          return name;
      }
      return tag;
    }
  }
});

// node_modules/graphql/jsutils/instanceOf.js
var require_instanceOf = __commonJS({
  "node_modules/graphql/jsutils/instanceOf.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.instanceOf = void 0;
    var _inspect = require_inspect(), isProduction = globalThis.process && // eslint-disable-next-line no-undef
    !0, instanceOf = (
      /* c8 ignore next 6 */
      // FIXME: https://github.com/graphql/graphql-js/issues/2317
      isProduction ? function(value, constructor) {
        return value instanceof constructor;
      } : function(value, constructor) {
        if (value instanceof constructor)
          return !0;
        if (typeof value == "object" && value !== null) {
          var _value$constructor;
          let className = constructor.prototype[Symbol.toStringTag], valueClassName = (
            // We still need to support constructor's name to detect conflicts with older versions of this library.
            Symbol.toStringTag in value ? value[Symbol.toStringTag] : (_value$constructor = value.constructor) === null || _value$constructor === void 0 ? void 0 : _value$constructor.name
          );
          if (className === valueClassName) {
            let stringifiedValue = (0, _inspect.inspect)(value);
            throw new Error(`Cannot use ${className} "${stringifiedValue}" from another module or realm.

Ensure that there is only one instance of "graphql" in the node_modules
directory. If different versions of "graphql" are the dependencies of other
relied on modules, use "resolutions" to ensure only one version is installed.

https://yarnpkg.com/en/docs/selective-version-resolutions

Duplicate "graphql" modules cannot be used at the same time since different
versions may have different capabilities and behavior. The data from one
version used in the function from another could produce confusing and
spurious results.`);
          }
        }
        return !1;
      }
    );
    exports.instanceOf = instanceOf;
  }
});

// node_modules/graphql/language/source.js
var require_source = __commonJS({
  "node_modules/graphql/language/source.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.Source = void 0;
    exports.isSource = isSource;
    var _devAssert = require_devAssert(), _inspect = require_inspect(), _instanceOf = require_instanceOf(), Source = class {
      constructor(body, name = "GraphQL request", locationOffset = {
        line: 1,
        column: 1
      }) {
        typeof body == "string" || (0, _devAssert.devAssert)(
          !1,
          `Body must be a string. Received: ${(0, _inspect.inspect)(body)}.`
        ), this.body = body, this.name = name, this.locationOffset = locationOffset, this.locationOffset.line > 0 || (0, _devAssert.devAssert)(
          !1,
          "line in locationOffset is 1-indexed and must be positive."
        ), this.locationOffset.column > 0 || (0, _devAssert.devAssert)(
          !1,
          "column in locationOffset is 1-indexed and must be positive."
        );
      }
      get [Symbol.toStringTag]() {
        return "Source";
      }
    };
    exports.Source = Source;
    function isSource(source) {
      return (0, _instanceOf.instanceOf)(source, Source);
    }
  }
});

// node_modules/graphql/language/parser.js
var require_parser = __commonJS({
  "node_modules/graphql/language/parser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.Parser = void 0;
    exports.parse = parse2;
    exports.parseConstValue = parseConstValue;
    exports.parseType = parseType;
    exports.parseValue = parseValue;
    var _syntaxError = require_syntaxError(), _ast = require_ast(), _directiveLocation = require_directiveLocation(), _kinds = require_kinds(), _lexer = require_lexer(), _source = require_source(), _tokenKind = require_tokenKind();
    function parse2(source, options) {
      let parser = new Parser(source, options), document2 = parser.parseDocument();
      return Object.defineProperty(document2, "tokenCount", {
        enumerable: !1,
        value: parser.tokenCount
      }), document2;
    }
    function parseValue(source, options) {
      let parser = new Parser(source, options);
      parser.expectToken(_tokenKind.TokenKind.SOF);
      let value = parser.parseValueLiteral(!1);
      return parser.expectToken(_tokenKind.TokenKind.EOF), value;
    }
    function parseConstValue(source, options) {
      let parser = new Parser(source, options);
      parser.expectToken(_tokenKind.TokenKind.SOF);
      let value = parser.parseConstValueLiteral();
      return parser.expectToken(_tokenKind.TokenKind.EOF), value;
    }
    function parseType(source, options) {
      let parser = new Parser(source, options);
      parser.expectToken(_tokenKind.TokenKind.SOF);
      let type = parser.parseTypeReference();
      return parser.expectToken(_tokenKind.TokenKind.EOF), type;
    }
    var Parser = class {
      constructor(source, options = {}) {
        let sourceObj = (0, _source.isSource)(source) ? source : new _source.Source(source);
        this._lexer = new _lexer.Lexer(sourceObj), this._options = options, this._tokenCounter = 0;
      }
      get tokenCount() {
        return this._tokenCounter;
      }
      /**
       * Converts a name lex token into a name parse node.
       */
      parseName() {
        let token = this.expectToken(_tokenKind.TokenKind.NAME);
        return this.node(token, {
          kind: _kinds.Kind.NAME,
          value: token.value
        });
      }
      // Implements the parsing rules in the Document section.
      /**
       * Document : Definition+
       */
      parseDocument() {
        return this.node(this._lexer.token, {
          kind: _kinds.Kind.DOCUMENT,
          definitions: this.many(
            _tokenKind.TokenKind.SOF,
            this.parseDefinition,
            _tokenKind.TokenKind.EOF
          )
        });
      }
      /**
       * Definition :
       *   - ExecutableDefinition
       *   - TypeSystemDefinition
       *   - TypeSystemExtension
       *
       * ExecutableDefinition :
       *   - OperationDefinition
       *   - FragmentDefinition
       *
       * TypeSystemDefinition :
       *   - SchemaDefinition
       *   - TypeDefinition
       *   - DirectiveDefinition
       *
       * TypeDefinition :
       *   - ScalarTypeDefinition
       *   - ObjectTypeDefinition
       *   - InterfaceTypeDefinition
       *   - UnionTypeDefinition
       *   - EnumTypeDefinition
       *   - InputObjectTypeDefinition
       */
      parseDefinition() {
        if (this.peek(_tokenKind.TokenKind.BRACE_L))
          return this.parseOperationDefinition();
        let hasDescription = this.peekDescription(), keywordToken = hasDescription ? this._lexer.lookahead() : this._lexer.token;
        if (keywordToken.kind === _tokenKind.TokenKind.NAME) {
          switch (keywordToken.value) {
            case "schema":
              return this.parseSchemaDefinition();
            case "scalar":
              return this.parseScalarTypeDefinition();
            case "type":
              return this.parseObjectTypeDefinition();
            case "interface":
              return this.parseInterfaceTypeDefinition();
            case "union":
              return this.parseUnionTypeDefinition();
            case "enum":
              return this.parseEnumTypeDefinition();
            case "input":
              return this.parseInputObjectTypeDefinition();
            case "directive":
              return this.parseDirectiveDefinition();
          }
          if (hasDescription)
            throw (0, _syntaxError.syntaxError)(
              this._lexer.source,
              this._lexer.token.start,
              "Unexpected description, descriptions are supported only on type definitions."
            );
          switch (keywordToken.value) {
            case "query":
            case "mutation":
            case "subscription":
              return this.parseOperationDefinition();
            case "fragment":
              return this.parseFragmentDefinition();
            case "extend":
              return this.parseTypeSystemExtension();
          }
        }
        throw this.unexpected(keywordToken);
      }
      // Implements the parsing rules in the Operations section.
      /**
       * OperationDefinition :
       *  - SelectionSet
       *  - OperationType Name? VariableDefinitions? Directives? SelectionSet
       */
      parseOperationDefinition() {
        let start = this._lexer.token;
        if (this.peek(_tokenKind.TokenKind.BRACE_L))
          return this.node(start, {
            kind: _kinds.Kind.OPERATION_DEFINITION,
            operation: _ast.OperationTypeNode.QUERY,
            name: void 0,
            variableDefinitions: [],
            directives: [],
            selectionSet: this.parseSelectionSet()
          });
        let operation = this.parseOperationType(), name;
        return this.peek(_tokenKind.TokenKind.NAME) && (name = this.parseName()), this.node(start, {
          kind: _kinds.Kind.OPERATION_DEFINITION,
          operation,
          name,
          variableDefinitions: this.parseVariableDefinitions(),
          directives: this.parseDirectives(!1),
          selectionSet: this.parseSelectionSet()
        });
      }
      /**
       * OperationType : one of query mutation subscription
       */
      parseOperationType() {
        let operationToken = this.expectToken(_tokenKind.TokenKind.NAME);
        switch (operationToken.value) {
          case "query":
            return _ast.OperationTypeNode.QUERY;
          case "mutation":
            return _ast.OperationTypeNode.MUTATION;
          case "subscription":
            return _ast.OperationTypeNode.SUBSCRIPTION;
        }
        throw this.unexpected(operationToken);
      }
      /**
       * VariableDefinitions : ( VariableDefinition+ )
       */
      parseVariableDefinitions() {
        return this.optionalMany(
          _tokenKind.TokenKind.PAREN_L,
          this.parseVariableDefinition,
          _tokenKind.TokenKind.PAREN_R
        );
      }
      /**
       * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?
       */
      parseVariableDefinition() {
        return this.node(this._lexer.token, {
          kind: _kinds.Kind.VARIABLE_DEFINITION,
          variable: this.parseVariable(),
          type: (this.expectToken(_tokenKind.TokenKind.COLON), this.parseTypeReference()),
          defaultValue: this.expectOptionalToken(_tokenKind.TokenKind.EQUALS) ? this.parseConstValueLiteral() : void 0,
          directives: this.parseConstDirectives()
        });
      }
      /**
       * Variable : $ Name
       */
      parseVariable() {
        let start = this._lexer.token;
        return this.expectToken(_tokenKind.TokenKind.DOLLAR), this.node(start, {
          kind: _kinds.Kind.VARIABLE,
          name: this.parseName()
        });
      }
      /**
       * ```
       * SelectionSet : { Selection+ }
       * ```
       */
      parseSelectionSet() {
        return this.node(this._lexer.token, {
          kind: _kinds.Kind.SELECTION_SET,
          selections: this.many(
            _tokenKind.TokenKind.BRACE_L,
            this.parseSelection,
            _tokenKind.TokenKind.BRACE_R
          )
        });
      }
      /**
       * Selection :
       *   - Field
       *   - FragmentSpread
       *   - InlineFragment
       */
      parseSelection() {
        return this.peek(_tokenKind.TokenKind.SPREAD) ? this.parseFragment() : this.parseField();
      }
      /**
       * Field : Alias? Name Arguments? Directives? SelectionSet?
       *
       * Alias : Name :
       */
      parseField() {
        let start = this._lexer.token, nameOrAlias = this.parseName(), alias, name;
        return this.expectOptionalToken(_tokenKind.TokenKind.COLON) ? (alias = nameOrAlias, name = this.parseName()) : name = nameOrAlias, this.node(start, {
          kind: _kinds.Kind.FIELD,
          alias,
          name,
          arguments: this.parseArguments(!1),
          directives: this.parseDirectives(!1),
          selectionSet: this.peek(_tokenKind.TokenKind.BRACE_L) ? this.parseSelectionSet() : void 0
        });
      }
      /**
       * Arguments[Const] : ( Argument[?Const]+ )
       */
      parseArguments(isConst) {
        let item = isConst ? this.parseConstArgument : this.parseArgument;
        return this.optionalMany(
          _tokenKind.TokenKind.PAREN_L,
          item,
          _tokenKind.TokenKind.PAREN_R
        );
      }
      /**
       * Argument[Const] : Name : Value[?Const]
       */
      parseArgument(isConst = !1) {
        let start = this._lexer.token, name = this.parseName();
        return this.expectToken(_tokenKind.TokenKind.COLON), this.node(start, {
          kind: _kinds.Kind.ARGUMENT,
          name,
          value: this.parseValueLiteral(isConst)
        });
      }
      parseConstArgument() {
        return this.parseArgument(!0);
      }
      // Implements the parsing rules in the Fragments section.
      /**
       * Corresponds to both FragmentSpread and InlineFragment in the spec.
       *
       * FragmentSpread : ... FragmentName Directives?
       *
       * InlineFragment : ... TypeCondition? Directives? SelectionSet
       */
      parseFragment() {
        let start = this._lexer.token;
        this.expectToken(_tokenKind.TokenKind.SPREAD);
        let hasTypeCondition = this.expectOptionalKeyword("on");
        return !hasTypeCondition && this.peek(_tokenKind.TokenKind.NAME) ? this.node(start, {
          kind: _kinds.Kind.FRAGMENT_SPREAD,
          name: this.parseFragmentName(),
          directives: this.parseDirectives(!1)
        }) : this.node(start, {
          kind: _kinds.Kind.INLINE_FRAGMENT,
          typeCondition: hasTypeCondition ? this.parseNamedType() : void 0,
          directives: this.parseDirectives(!1),
          selectionSet: this.parseSelectionSet()
        });
      }
      /**
       * FragmentDefinition :
       *   - fragment FragmentName on TypeCondition Directives? SelectionSet
       *
       * TypeCondition : NamedType
       */
      parseFragmentDefinition() {
        let start = this._lexer.token;
        return this.expectKeyword("fragment"), this._options.allowLegacyFragmentVariables === !0 ? this.node(start, {
          kind: _kinds.Kind.FRAGMENT_DEFINITION,
          name: this.parseFragmentName(),
          variableDefinitions: this.parseVariableDefinitions(),
          typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
          directives: this.parseDirectives(!1),
          selectionSet: this.parseSelectionSet()
        }) : this.node(start, {
          kind: _kinds.Kind.FRAGMENT_DEFINITION,
          name: this.parseFragmentName(),
          typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
          directives: this.parseDirectives(!1),
          selectionSet: this.parseSelectionSet()
        });
      }
      /**
       * FragmentName : Name but not `on`
       */
      parseFragmentName() {
        if (this._lexer.token.value === "on")
          throw this.unexpected();
        return this.parseName();
      }
      // Implements the parsing rules in the Values section.
      /**
       * Value[Const] :
       *   - [~Const] Variable
       *   - IntValue
       *   - FloatValue
       *   - StringValue
       *   - BooleanValue
       *   - NullValue
       *   - EnumValue
       *   - ListValue[?Const]
       *   - ObjectValue[?Const]
       *
       * BooleanValue : one of `true` `false`
       *
       * NullValue : `null`
       *
       * EnumValue : Name but not `true`, `false` or `null`
       */
      parseValueLiteral(isConst) {
        let token = this._lexer.token;
        switch (token.kind) {
          case _tokenKind.TokenKind.BRACKET_L:
            return this.parseList(isConst);
          case _tokenKind.TokenKind.BRACE_L:
            return this.parseObject(isConst);
          case _tokenKind.TokenKind.INT:
            return this.advanceLexer(), this.node(token, {
              kind: _kinds.Kind.INT,
              value: token.value
            });
          case _tokenKind.TokenKind.FLOAT:
            return this.advanceLexer(), this.node(token, {
              kind: _kinds.Kind.FLOAT,
              value: token.value
            });
          case _tokenKind.TokenKind.STRING:
          case _tokenKind.TokenKind.BLOCK_STRING:
            return this.parseStringLiteral();
          case _tokenKind.TokenKind.NAME:
            switch (this.advanceLexer(), token.value) {
              case "true":
                return this.node(token, {
                  kind: _kinds.Kind.BOOLEAN,
                  value: !0
                });
              case "false":
                return this.node(token, {
                  kind: _kinds.Kind.BOOLEAN,
                  value: !1
                });
              case "null":
                return this.node(token, {
                  kind: _kinds.Kind.NULL
                });
              default:
                return this.node(token, {
                  kind: _kinds.Kind.ENUM,
                  value: token.value
                });
            }
          case _tokenKind.TokenKind.DOLLAR:
            if (isConst)
              if (this.expectToken(_tokenKind.TokenKind.DOLLAR), this._lexer.token.kind === _tokenKind.TokenKind.NAME) {
                let varName = this._lexer.token.value;
                throw (0, _syntaxError.syntaxError)(
                  this._lexer.source,
                  token.start,
                  `Unexpected variable "$${varName}" in constant value.`
                );
              } else
                throw this.unexpected(token);
            return this.parseVariable();
          default:
            throw this.unexpected();
        }
      }
      parseConstValueLiteral() {
        return this.parseValueLiteral(!0);
      }
      parseStringLiteral() {
        let token = this._lexer.token;
        return this.advanceLexer(), this.node(token, {
          kind: _kinds.Kind.STRING,
          value: token.value,
          block: token.kind === _tokenKind.TokenKind.BLOCK_STRING
        });
      }
      /**
       * ListValue[Const] :
       *   - [ ]
       *   - [ Value[?Const]+ ]
       */
      parseList(isConst) {
        let item = () => this.parseValueLiteral(isConst);
        return this.node(this._lexer.token, {
          kind: _kinds.Kind.LIST,
          values: this.any(
            _tokenKind.TokenKind.BRACKET_L,
            item,
            _tokenKind.TokenKind.BRACKET_R
          )
        });
      }
      /**
       * ```
       * ObjectValue[Const] :
       *   - { }
       *   - { ObjectField[?Const]+ }
       * ```
       */
      parseObject(isConst) {
        let item = () => this.parseObjectField(isConst);
        return this.node(this._lexer.token, {
          kind: _kinds.Kind.OBJECT,
          fields: this.any(
            _tokenKind.TokenKind.BRACE_L,
            item,
            _tokenKind.TokenKind.BRACE_R
          )
        });
      }
      /**
       * ObjectField[Const] : Name : Value[?Const]
       */
      parseObjectField(isConst) {
        let start = this._lexer.token, name = this.parseName();
        return this.expectToken(_tokenKind.TokenKind.COLON), this.node(start, {
          kind: _kinds.Kind.OBJECT_FIELD,
          name,
          value: this.parseValueLiteral(isConst)
        });
      }
      // Implements the parsing rules in the Directives section.
      /**
       * Directives[Const] : Directive[?Const]+
       */
      parseDirectives(isConst) {
        let directives = [];
        for (; this.peek(_tokenKind.TokenKind.AT); )
          directives.push(this.parseDirective(isConst));
        return directives;
      }
      parseConstDirectives() {
        return this.parseDirectives(!0);
      }
      /**
       * ```
       * Directive[Const] : @ Name Arguments[?Const]?
       * ```
       */
      parseDirective(isConst) {
        let start = this._lexer.token;
        return this.expectToken(_tokenKind.TokenKind.AT), this.node(start, {
          kind: _kinds.Kind.DIRECTIVE,
          name: this.parseName(),
          arguments: this.parseArguments(isConst)
        });
      }
      // Implements the parsing rules in the Types section.
      /**
       * Type :
       *   - NamedType
       *   - ListType
       *   - NonNullType
       */
      parseTypeReference() {
        let start = this._lexer.token, type;
        if (this.expectOptionalToken(_tokenKind.TokenKind.BRACKET_L)) {
          let innerType = this.parseTypeReference();
          this.expectToken(_tokenKind.TokenKind.BRACKET_R), type = this.node(start, {
            kind: _kinds.Kind.LIST_TYPE,
            type: innerType
          });
        } else
          type = this.parseNamedType();
        return this.expectOptionalToken(_tokenKind.TokenKind.BANG) ? this.node(start, {
          kind: _kinds.Kind.NON_NULL_TYPE,
          type
        }) : type;
      }
      /**
       * NamedType : Name
       */
      parseNamedType() {
        return this.node(this._lexer.token, {
          kind: _kinds.Kind.NAMED_TYPE,
          name: this.parseName()
        });
      }
      // Implements the parsing rules in the Type Definition section.
      peekDescription() {
        return this.peek(_tokenKind.TokenKind.STRING) || this.peek(_tokenKind.TokenKind.BLOCK_STRING);
      }
      /**
       * Description : StringValue
       */
      parseDescription() {
        if (this.peekDescription())
          return this.parseStringLiteral();
      }
      /**
       * ```
       * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }
       * ```
       */
      parseSchemaDefinition() {
        let start = this._lexer.token, description = this.parseDescription();
        this.expectKeyword("schema");
        let directives = this.parseConstDirectives(), operationTypes = this.many(
          _tokenKind.TokenKind.BRACE_L,
          this.parseOperationTypeDefinition,
          _tokenKind.TokenKind.BRACE_R
        );
        return this.node(start, {
          kind: _kinds.Kind.SCHEMA_DEFINITION,
          description,
          directives,
          operationTypes
        });
      }
      /**
       * OperationTypeDefinition : OperationType : NamedType
       */
      parseOperationTypeDefinition() {
        let start = this._lexer.token, operation = this.parseOperationType();
        this.expectToken(_tokenKind.TokenKind.COLON);
        let type = this.parseNamedType();
        return this.node(start, {
          kind: _kinds.Kind.OPERATION_TYPE_DEFINITION,
          operation,
          type
        });
      }
      /**
       * ScalarTypeDefinition : Description? scalar Name Directives[Const]?
       */
      parseScalarTypeDefinition() {
        let start = this._lexer.token, description = this.parseDescription();
        this.expectKeyword("scalar");
        let name = this.parseName(), directives = this.parseConstDirectives();
        return this.node(start, {
          kind: _kinds.Kind.SCALAR_TYPE_DEFINITION,
          description,
          name,
          directives
        });
      }
      /**
       * ObjectTypeDefinition :
       *   Description?
       *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?
       */
      parseObjectTypeDefinition() {
        let start = this._lexer.token, description = this.parseDescription();
        this.expectKeyword("type");
        let name = this.parseName(), interfaces = this.parseImplementsInterfaces(), directives = this.parseConstDirectives(), fields = this.parseFieldsDefinition();
        return this.node(start, {
          kind: _kinds.Kind.OBJECT_TYPE_DEFINITION,
          description,
          name,
          interfaces,
          directives,
          fields
        });
      }
      /**
       * ImplementsInterfaces :
       *   - implements `&`? NamedType
       *   - ImplementsInterfaces & NamedType
       */
      parseImplementsInterfaces() {
        return this.expectOptionalKeyword("implements") ? this.delimitedMany(_tokenKind.TokenKind.AMP, this.parseNamedType) : [];
      }
      /**
       * ```
       * FieldsDefinition : { FieldDefinition+ }
       * ```
       */
      parseFieldsDefinition() {
        return this.optionalMany(
          _tokenKind.TokenKind.BRACE_L,
          this.parseFieldDefinition,
          _tokenKind.TokenKind.BRACE_R
        );
      }
      /**
       * FieldDefinition :
       *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?
       */
      parseFieldDefinition() {
        let start = this._lexer.token, description = this.parseDescription(), name = this.parseName(), args = this.parseArgumentDefs();
        this.expectToken(_tokenKind.TokenKind.COLON);
        let type = this.parseTypeReference(), directives = this.parseConstDirectives();
        return this.node(start, {
          kind: _kinds.Kind.FIELD_DEFINITION,
          description,
          name,
          arguments: args,
          type,
          directives
        });
      }
      /**
       * ArgumentsDefinition : ( InputValueDefinition+ )
       */
      parseArgumentDefs() {
        return this.optionalMany(
          _tokenKind.TokenKind.PAREN_L,
          this.parseInputValueDef,
          _tokenKind.TokenKind.PAREN_R
        );
      }
      /**
       * InputValueDefinition :
       *   - Description? Name : Type DefaultValue? Directives[Const]?
       */
      parseInputValueDef() {
        let start = this._lexer.token, description = this.parseDescription(), name = this.parseName();
        this.expectToken(_tokenKind.TokenKind.COLON);
        let type = this.parseTypeReference(), defaultValue;
        this.expectOptionalToken(_tokenKind.TokenKind.EQUALS) && (defaultValue = this.parseConstValueLiteral());
        let directives = this.parseConstDirectives();
        return this.node(start, {
          kind: _kinds.Kind.INPUT_VALUE_DEFINITION,
          description,
          name,
          type,
          defaultValue,
          directives
        });
      }
      /**
       * InterfaceTypeDefinition :
       *   - Description? interface Name Directives[Const]? FieldsDefinition?
       */
      parseInterfaceTypeDefinition() {
        let start = this._lexer.token, description = this.parseDescription();
        this.expectKeyword("interface");
        let name = this.parseName(), interfaces = this.parseImplementsInterfaces(), directives = this.parseConstDirectives(), fields = this.parseFieldsDefinition();
        return this.node(start, {
          kind: _kinds.Kind.INTERFACE_TYPE_DEFINITION,
          description,
          name,
          interfaces,
          directives,
          fields
        });
      }
      /**
       * UnionTypeDefinition :
       *   - Description? union Name Directives[Const]? UnionMemberTypes?
       */
      parseUnionTypeDefinition() {
        let start = this._lexer.token, description = this.parseDescription();
        this.expectKeyword("union");
        let name = this.parseName(), directives = this.parseConstDirectives(), types = this.parseUnionMemberTypes();
        return this.node(start, {
          kind: _kinds.Kind.UNION_TYPE_DEFINITION,
          description,
          name,
          directives,
          types
        });
      }
      /**
       * UnionMemberTypes :
       *   - = `|`? NamedType
       *   - UnionMemberTypes | NamedType
       */
      parseUnionMemberTypes() {
        return this.expectOptionalToken(_tokenKind.TokenKind.EQUALS) ? this.delimitedMany(_tokenKind.TokenKind.PIPE, this.parseNamedType) : [];
      }
      /**
       * EnumTypeDefinition :
       *   - Description? enum Name Directives[Const]? EnumValuesDefinition?
       */
      parseEnumTypeDefinition() {
        let start = this._lexer.token, description = this.parseDescription();
        this.expectKeyword("enum");
        let name = this.parseName(), directives = this.parseConstDirectives(), values = this.parseEnumValuesDefinition();
        return this.node(start, {
          kind: _kinds.Kind.ENUM_TYPE_DEFINITION,
          description,
          name,
          directives,
          values
        });
      }
      /**
       * ```
       * EnumValuesDefinition : { EnumValueDefinition+ }
       * ```
       */
      parseEnumValuesDefinition() {
        return this.optionalMany(
          _tokenKind.TokenKind.BRACE_L,
          this.parseEnumValueDefinition,
          _tokenKind.TokenKind.BRACE_R
        );
      }
      /**
       * EnumValueDefinition : Description? EnumValue Directives[Const]?
       */
      parseEnumValueDefinition() {
        let start = this._lexer.token, description = this.parseDescription(), name = this.parseEnumValueName(), directives = this.parseConstDirectives();
        return this.node(start, {
          kind: _kinds.Kind.ENUM_VALUE_DEFINITION,
          description,
          name,
          directives
        });
      }
      /**
       * EnumValue : Name but not `true`, `false` or `null`
       */
      parseEnumValueName() {
        if (this._lexer.token.value === "true" || this._lexer.token.value === "false" || this._lexer.token.value === "null")
          throw (0, _syntaxError.syntaxError)(
            this._lexer.source,
            this._lexer.token.start,
            `${getTokenDesc(
              this._lexer.token
            )} is reserved and cannot be used for an enum value.`
          );
        return this.parseName();
      }
      /**
       * InputObjectTypeDefinition :
       *   - Description? input Name Directives[Const]? InputFieldsDefinition?
       */
      parseInputObjectTypeDefinition() {
        let start = this._lexer.token, description = this.parseDescription();
        this.expectKeyword("input");
        let name = this.parseName(), directives = this.parseConstDirectives(), fields = this.parseInputFieldsDefinition();
        return this.node(start, {
          kind: _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION,
          description,
          name,
          directives,
          fields
        });
      }
      /**
       * ```
       * InputFieldsDefinition : { InputValueDefinition+ }
       * ```
       */
      parseInputFieldsDefinition() {
        return this.optionalMany(
          _tokenKind.TokenKind.BRACE_L,
          this.parseInputValueDef,
          _tokenKind.TokenKind.BRACE_R
        );
      }
      /**
       * TypeSystemExtension :
       *   - SchemaExtension
       *   - TypeExtension
       *
       * TypeExtension :
       *   - ScalarTypeExtension
       *   - ObjectTypeExtension
       *   - InterfaceTypeExtension
       *   - UnionTypeExtension
       *   - EnumTypeExtension
       *   - InputObjectTypeDefinition
       */
      parseTypeSystemExtension() {
        let keywordToken = this._lexer.lookahead();
        if (keywordToken.kind === _tokenKind.TokenKind.NAME)
          switch (keywordToken.value) {
            case "schema":
              return this.parseSchemaExtension();
            case "scalar":
              return this.parseScalarTypeExtension();
            case "type":
              return this.parseObjectTypeExtension();
            case "interface":
              return this.parseInterfaceTypeExtension();
            case "union":
              return this.parseUnionTypeExtension();
            case "enum":
              return this.parseEnumTypeExtension();
            case "input":
              return this.parseInputObjectTypeExtension();
          }
        throw this.unexpected(keywordToken);
      }
      /**
       * ```
       * SchemaExtension :
       *  - extend schema Directives[Const]? { OperationTypeDefinition+ }
       *  - extend schema Directives[Const]
       * ```
       */
      parseSchemaExtension() {
        let start = this._lexer.token;
        this.expectKeyword("extend"), this.expectKeyword("schema");
        let directives = this.parseConstDirectives(), operationTypes = this.optionalMany(
          _tokenKind.TokenKind.BRACE_L,
          this.parseOperationTypeDefinition,
          _tokenKind.TokenKind.BRACE_R
        );
        if (directives.length === 0 && operationTypes.length === 0)
          throw this.unexpected();
        return this.node(start, {
          kind: _kinds.Kind.SCHEMA_EXTENSION,
          directives,
          operationTypes
        });
      }
      /**
       * ScalarTypeExtension :
       *   - extend scalar Name Directives[Const]
       */
      parseScalarTypeExtension() {
        let start = this._lexer.token;
        this.expectKeyword("extend"), this.expectKeyword("scalar");
        let name = this.parseName(), directives = this.parseConstDirectives();
        if (directives.length === 0)
          throw this.unexpected();
        return this.node(start, {
          kind: _kinds.Kind.SCALAR_TYPE_EXTENSION,
          name,
          directives
        });
      }
      /**
       * ObjectTypeExtension :
       *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
       *  - extend type Name ImplementsInterfaces? Directives[Const]
       *  - extend type Name ImplementsInterfaces
       */
      parseObjectTypeExtension() {
        let start = this._lexer.token;
        this.expectKeyword("extend"), this.expectKeyword("type");
        let name = this.parseName(), interfaces = this.parseImplementsInterfaces(), directives = this.parseConstDirectives(), fields = this.parseFieldsDefinition();
        if (interfaces.length === 0 && directives.length === 0 && fields.length === 0)
          throw this.unexpected();
        return this.node(start, {
          kind: _kinds.Kind.OBJECT_TYPE_EXTENSION,
          name,
          interfaces,
          directives,
          fields
        });
      }
      /**
       * InterfaceTypeExtension :
       *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
       *  - extend interface Name ImplementsInterfaces? Directives[Const]
       *  - extend interface Name ImplementsInterfaces
       */
      parseInterfaceTypeExtension() {
        let start = this._lexer.token;
        this.expectKeyword("extend"), this.expectKeyword("interface");
        let name = this.parseName(), interfaces = this.parseImplementsInterfaces(), directives = this.parseConstDirectives(), fields = this.parseFieldsDefinition();
        if (interfaces.length === 0 && directives.length === 0 && fields.length === 0)
          throw this.unexpected();
        return this.node(start, {
          kind: _kinds.Kind.INTERFACE_TYPE_EXTENSION,
          name,
          interfaces,
          directives,
          fields
        });
      }
      /**
       * UnionTypeExtension :
       *   - extend union Name Directives[Const]? UnionMemberTypes
       *   - extend union Name Directives[Const]
       */
      parseUnionTypeExtension() {
        let start = this._lexer.token;
        this.expectKeyword("extend"), this.expectKeyword("union");
        let name = this.parseName(), directives = this.parseConstDirectives(), types = this.parseUnionMemberTypes();
        if (directives.length === 0 && types.length === 0)
          throw this.unexpected();
        return this.node(start, {
          kind: _kinds.Kind.UNION_TYPE_EXTENSION,
          name,
          directives,
          types
        });
      }
      /**
       * EnumTypeExtension :
       *   - extend enum Name Directives[Const]? EnumValuesDefinition
       *   - extend enum Name Directives[Const]
       */
      parseEnumTypeExtension() {
        let start = this._lexer.token;
        this.expectKeyword("extend"), this.expectKeyword("enum");
        let name = this.parseName(), directives = this.parseConstDirectives(), values = this.parseEnumValuesDefinition();
        if (directives.length === 0 && values.length === 0)
          throw this.unexpected();
        return this.node(start, {
          kind: _kinds.Kind.ENUM_TYPE_EXTENSION,
          name,
          directives,
          values
        });
      }
      /**
       * InputObjectTypeExtension :
       *   - extend input Name Directives[Const]? InputFieldsDefinition
       *   - extend input Name Directives[Const]
       */
      parseInputObjectTypeExtension() {
        let start = this._lexer.token;
        this.expectKeyword("extend"), this.expectKeyword("input");
        let name = this.parseName(), directives = this.parseConstDirectives(), fields = this.parseInputFieldsDefinition();
        if (directives.length === 0 && fields.length === 0)
          throw this.unexpected();
        return this.node(start, {
          kind: _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION,
          name,
          directives,
          fields
        });
      }
      /**
       * ```
       * DirectiveDefinition :
       *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations
       * ```
       */
      parseDirectiveDefinition() {
        let start = this._lexer.token, description = this.parseDescription();
        this.expectKeyword("directive"), this.expectToken(_tokenKind.TokenKind.AT);
        let name = this.parseName(), args = this.parseArgumentDefs(), repeatable = this.expectOptionalKeyword("repeatable");
        this.expectKeyword("on");
        let locations = this.parseDirectiveLocations();
        return this.node(start, {
          kind: _kinds.Kind.DIRECTIVE_DEFINITION,
          description,
          name,
          arguments: args,
          repeatable,
          locations
        });
      }
      /**
       * DirectiveLocations :
       *   - `|`? DirectiveLocation
       *   - DirectiveLocations | DirectiveLocation
       */
      parseDirectiveLocations() {
        return this.delimitedMany(
          _tokenKind.TokenKind.PIPE,
          this.parseDirectiveLocation
        );
      }
      /*
       * DirectiveLocation :
       *   - ExecutableDirectiveLocation
       *   - TypeSystemDirectiveLocation
       *
       * ExecutableDirectiveLocation : one of
       *   `QUERY`
       *   `MUTATION`
       *   `SUBSCRIPTION`
       *   `FIELD`
       *   `FRAGMENT_DEFINITION`
       *   `FRAGMENT_SPREAD`
       *   `INLINE_FRAGMENT`
       *
       * TypeSystemDirectiveLocation : one of
       *   `SCHEMA`
       *   `SCALAR`
       *   `OBJECT`
       *   `FIELD_DEFINITION`
       *   `ARGUMENT_DEFINITION`
       *   `INTERFACE`
       *   `UNION`
       *   `ENUM`
       *   `ENUM_VALUE`
       *   `INPUT_OBJECT`
       *   `INPUT_FIELD_DEFINITION`
       */
      parseDirectiveLocation() {
        let start = this._lexer.token, name = this.parseName();
        if (Object.prototype.hasOwnProperty.call(
          _directiveLocation.DirectiveLocation,
          name.value
        ))
          return name;
        throw this.unexpected(start);
      }
      // Core parsing utility functions
      /**
       * Returns a node that, if configured to do so, sets a "loc" field as a
       * location object, used to identify the place in the source that created a
       * given parsed object.
       */
      node(startToken, node) {
        return this._options.noLocation !== !0 && (node.loc = new _ast.Location(
          startToken,
          this._lexer.lastToken,
          this._lexer.source
        )), node;
      }
      /**
       * Determines if the next token is of a given kind
       */
      peek(kind) {
        return this._lexer.token.kind === kind;
      }
      /**
       * If the next token is of the given kind, return that token after advancing the lexer.
       * Otherwise, do not change the parser state and throw an error.
       */
      expectToken(kind) {
        let token = this._lexer.token;
        if (token.kind === kind)
          return this.advanceLexer(), token;
        throw (0, _syntaxError.syntaxError)(
          this._lexer.source,
          token.start,
          `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`
        );
      }
      /**
       * If the next token is of the given kind, return "true" after advancing the lexer.
       * Otherwise, do not change the parser state and return "false".
       */
      expectOptionalToken(kind) {
        return this._lexer.token.kind === kind ? (this.advanceLexer(), !0) : !1;
      }
      /**
       * If the next token is a given keyword, advance the lexer.
       * Otherwise, do not change the parser state and throw an error.
       */
      expectKeyword(value) {
        let token = this._lexer.token;
        if (token.kind === _tokenKind.TokenKind.NAME && token.value === value)
          this.advanceLexer();
        else
          throw (0, _syntaxError.syntaxError)(
            this._lexer.source,
            token.start,
            `Expected "${value}", found ${getTokenDesc(token)}.`
          );
      }
      /**
       * If the next token is a given keyword, return "true" after advancing the lexer.
       * Otherwise, do not change the parser state and return "false".
       */
      expectOptionalKeyword(value) {
        let token = this._lexer.token;
        return token.kind === _tokenKind.TokenKind.NAME && token.value === value ? (this.advanceLexer(), !0) : !1;
      }
      /**
       * Helper function for creating an error when an unexpected lexed token is encountered.
       */
      unexpected(atToken) {
        let token = atToken ?? this._lexer.token;
        return (0, _syntaxError.syntaxError)(
          this._lexer.source,
          token.start,
          `Unexpected ${getTokenDesc(token)}.`
        );
      }
      /**
       * Returns a possibly empty list of parse nodes, determined by the parseFn.
       * This list begins with a lex token of openKind and ends with a lex token of closeKind.
       * Advances the parser to the next lex token after the closing token.
       */
      any(openKind, parseFn, closeKind) {
        this.expectToken(openKind);
        let nodes = [];
        for (; !this.expectOptionalToken(closeKind); )
          nodes.push(parseFn.call(this));
        return nodes;
      }
      /**
       * Returns a list of parse nodes, determined by the parseFn.
       * It can be empty only if open token is missing otherwise it will always return non-empty list
       * that begins with a lex token of openKind and ends with a lex token of closeKind.
       * Advances the parser to the next lex token after the closing token.
       */
      optionalMany(openKind, parseFn, closeKind) {
        if (this.expectOptionalToken(openKind)) {
          let nodes = [];
          do
            nodes.push(parseFn.call(this));
          while (!this.expectOptionalToken(closeKind));
          return nodes;
        }
        return [];
      }
      /**
       * Returns a non-empty list of parse nodes, determined by the parseFn.
       * This list begins with a lex token of openKind and ends with a lex token of closeKind.
       * Advances the parser to the next lex token after the closing token.
       */
      many(openKind, parseFn, closeKind) {
        this.expectToken(openKind);
        let nodes = [];
        do
          nodes.push(parseFn.call(this));
        while (!this.expectOptionalToken(closeKind));
        return nodes;
      }
      /**
       * Returns a non-empty list of parse nodes, determined by the parseFn.
       * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.
       * Advances the parser to the next lex token after last item in the list.
       */
      delimitedMany(delimiterKind, parseFn) {
        this.expectOptionalToken(delimiterKind);
        let nodes = [];
        do
          nodes.push(parseFn.call(this));
        while (this.expectOptionalToken(delimiterKind));
        return nodes;
      }
      advanceLexer() {
        let { maxTokens } = this._options, token = this._lexer.advance();
        if (token.kind !== _tokenKind.TokenKind.EOF && (++this._tokenCounter, maxTokens !== void 0 && this._tokenCounter > maxTokens))
          throw (0, _syntaxError.syntaxError)(
            this._lexer.source,
            token.start,
            `Document contains more that ${maxTokens} tokens. Parsing aborted.`
          );
      }
    };
    exports.Parser = Parser;
    function getTokenDesc(token) {
      let value = token.value;
      return getTokenKindDesc(token.kind) + (value != null ? ` "${value}"` : "");
    }
    function getTokenKindDesc(kind) {
      return (0, _lexer.isPunctuatorTokenKind)(kind) ? `"${kind}"` : kind;
    }
  }
});

// node_modules/graphql/jsutils/didYouMean.js
var require_didYouMean = __commonJS({
  "node_modules/graphql/jsutils/didYouMean.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.didYouMean = didYouMean;
    var MAX_SUGGESTIONS = 5;
    function didYouMean(firstArg, secondArg) {
      let [subMessage, suggestionsArg] = secondArg ? [firstArg, secondArg] : [void 0, firstArg], message = " Did you mean ";
      subMessage && (message += subMessage + " ");
      let suggestions = suggestionsArg.map((x) => `"${x}"`);
      switch (suggestions.length) {
        case 0:
          return "";
        case 1:
          return message + suggestions[0] + "?";
        case 2:
          return message + suggestions[0] + " or " + suggestions[1] + "?";
      }
      let selected = suggestions.slice(0, MAX_SUGGESTIONS), lastItem = selected.pop();
      return message + selected.join(", ") + ", or " + lastItem + "?";
    }
  }
});

// node_modules/graphql/jsutils/identityFunc.js
var require_identityFunc = __commonJS({
  "node_modules/graphql/jsutils/identityFunc.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.identityFunc = identityFunc;
    function identityFunc(x) {
      return x;
    }
  }
});

// node_modules/graphql/jsutils/keyMap.js
var require_keyMap = __commonJS({
  "node_modules/graphql/jsutils/keyMap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.keyMap = keyMap;
    function keyMap(list, keyFn) {
      let result = /* @__PURE__ */ Object.create(null);
      for (let item of list)
        result[keyFn(item)] = item;
      return result;
    }
  }
});

// node_modules/graphql/jsutils/keyValMap.js
var require_keyValMap = __commonJS({
  "node_modules/graphql/jsutils/keyValMap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.keyValMap = keyValMap;
    function keyValMap(list, keyFn, valFn) {
      let result = /* @__PURE__ */ Object.create(null);
      for (let item of list)
        result[keyFn(item)] = valFn(item);
      return result;
    }
  }
});

// node_modules/graphql/jsutils/mapValue.js
var require_mapValue = __commonJS({
  "node_modules/graphql/jsutils/mapValue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.mapValue = mapValue;
    function mapValue(map, fn) {
      let result = /* @__PURE__ */ Object.create(null);
      for (let key of Object.keys(map))
        result[key] = fn(map[key], key);
      return result;
    }
  }
});

// node_modules/graphql/jsutils/naturalCompare.js
var require_naturalCompare = __commonJS({
  "node_modules/graphql/jsutils/naturalCompare.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.naturalCompare = naturalCompare;
    function naturalCompare(aStr, bStr) {
      let aIndex = 0, bIndex = 0;
      for (; aIndex < aStr.length && bIndex < bStr.length; ) {
        let aChar = aStr.charCodeAt(aIndex), bChar = bStr.charCodeAt(bIndex);
        if (isDigit(aChar) && isDigit(bChar)) {
          let aNum = 0;
          do
            ++aIndex, aNum = aNum * 10 + aChar - DIGIT_0, aChar = aStr.charCodeAt(aIndex);
          while (isDigit(aChar) && aNum > 0);
          let bNum = 0;
          do
            ++bIndex, bNum = bNum * 10 + bChar - DIGIT_0, bChar = bStr.charCodeAt(bIndex);
          while (isDigit(bChar) && bNum > 0);
          if (aNum < bNum)
            return -1;
          if (aNum > bNum)
            return 1;
        } else {
          if (aChar < bChar)
            return -1;
          if (aChar > bChar)
            return 1;
          ++aIndex, ++bIndex;
        }
      }
      return aStr.length - bStr.length;
    }
    var DIGIT_0 = 48, DIGIT_9 = 57;
    function isDigit(code) {
      return !isNaN(code) && DIGIT_0 <= code && code <= DIGIT_9;
    }
  }
});

// node_modules/graphql/jsutils/suggestionList.js
var require_suggestionList = __commonJS({
  "node_modules/graphql/jsutils/suggestionList.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.suggestionList = suggestionList;
    var _naturalCompare = require_naturalCompare();
    function suggestionList(input, options) {
      let optionsByDistance = /* @__PURE__ */ Object.create(null), lexicalDistance = new LexicalDistance(input), threshold = Math.floor(input.length * 0.4) + 1;
      for (let option of options) {
        let distance = lexicalDistance.measure(option, threshold);
        distance !== void 0 && (optionsByDistance[option] = distance);
      }
      return Object.keys(optionsByDistance).sort((a, b) => {
        let distanceDiff = optionsByDistance[a] - optionsByDistance[b];
        return distanceDiff !== 0 ? distanceDiff : (0, _naturalCompare.naturalCompare)(a, b);
      });
    }
    var LexicalDistance = class {
      constructor(input) {
        this._input = input, this._inputLowerCase = input.toLowerCase(), this._inputArray = stringToArray(this._inputLowerCase), this._rows = [
          new Array(input.length + 1).fill(0),
          new Array(input.length + 1).fill(0),
          new Array(input.length + 1).fill(0)
        ];
      }
      measure(option, threshold) {
        if (this._input === option)
          return 0;
        let optionLowerCase = option.toLowerCase();
        if (this._inputLowerCase === optionLowerCase)
          return 1;
        let a = stringToArray(optionLowerCase), b = this._inputArray;
        if (a.length < b.length) {
          let tmp = a;
          a = b, b = tmp;
        }
        let aLength = a.length, bLength = b.length;
        if (aLength - bLength > threshold)
          return;
        let rows = this._rows;
        for (let j = 0; j <= bLength; j++)
          rows[0][j] = j;
        for (let i = 1; i <= aLength; i++) {
          let upRow = rows[(i - 1) % 3], currentRow = rows[i % 3], smallestCell = currentRow[0] = i;
          for (let j = 1; j <= bLength; j++) {
            let cost = a[i - 1] === b[j - 1] ? 0 : 1, currentCell = Math.min(
              upRow[j] + 1,
              // delete
              currentRow[j - 1] + 1,
              // insert
              upRow[j - 1] + cost
              // substitute
            );
            if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {
              let doubleDiagonalCell = rows[(i - 2) % 3][j - 2];
              currentCell = Math.min(currentCell, doubleDiagonalCell + 1);
            }
            currentCell < smallestCell && (smallestCell = currentCell), currentRow[j] = currentCell;
          }
          if (smallestCell > threshold)
            return;
        }
        let distance = rows[aLength % 3][bLength];
        return distance <= threshold ? distance : void 0;
      }
    };
    function stringToArray(str) {
      let strLength = str.length, array = new Array(strLength);
      for (let i = 0; i < strLength; ++i)
        array[i] = str.charCodeAt(i);
      return array;
    }
  }
});

// node_modules/graphql/jsutils/toObjMap.js
var require_toObjMap = __commonJS({
  "node_modules/graphql/jsutils/toObjMap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.toObjMap = toObjMap;
    function toObjMap(obj) {
      if (obj == null)
        return /* @__PURE__ */ Object.create(null);
      if (Object.getPrototypeOf(obj) === null)
        return obj;
      let map = /* @__PURE__ */ Object.create(null);
      for (let [key, value] of Object.entries(obj))
        map[key] = value;
      return map;
    }
  }
});

// node_modules/graphql/language/printString.js
var require_printString = __commonJS({
  "node_modules/graphql/language/printString.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.printString = printString;
    function printString(str) {
      return `"${str.replace(escapedRegExp, escapedReplacer)}"`;
    }
    var escapedRegExp = /[\x00-\x1f\x22\x5c\x7f-\x9f]/g;
    function escapedReplacer(str) {
      return escapeSequences[str.charCodeAt(0)];
    }
    var escapeSequences = [
      "\\u0000",
      "\\u0001",
      "\\u0002",
      "\\u0003",
      "\\u0004",
      "\\u0005",
      "\\u0006",
      "\\u0007",
      "\\b",
      "\\t",
      "\\n",
      "\\u000B",
      "\\f",
      "\\r",
      "\\u000E",
      "\\u000F",
      "\\u0010",
      "\\u0011",
      "\\u0012",
      "\\u0013",
      "\\u0014",
      "\\u0015",
      "\\u0016",
      "\\u0017",
      "\\u0018",
      "\\u0019",
      "\\u001A",
      "\\u001B",
      "\\u001C",
      "\\u001D",
      "\\u001E",
      "\\u001F",
      "",
      "",
      '\\"',
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      // 2F
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      // 3F
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      // 4F
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "\\\\",
      "",
      "",
      "",
      // 5F
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      // 6F
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "\\u007F",
      "\\u0080",
      "\\u0081",
      "\\u0082",
      "\\u0083",
      "\\u0084",
      "\\u0085",
      "\\u0086",
      "\\u0087",
      "\\u0088",
      "\\u0089",
      "\\u008A",
      "\\u008B",
      "\\u008C",
      "\\u008D",
      "\\u008E",
      "\\u008F",
      "\\u0090",
      "\\u0091",
      "\\u0092",
      "\\u0093",
      "\\u0094",
      "\\u0095",
      "\\u0096",
      "\\u0097",
      "\\u0098",
      "\\u0099",
      "\\u009A",
      "\\u009B",
      "\\u009C",
      "\\u009D",
      "\\u009E",
      "\\u009F"
    ];
  }
});

// node_modules/graphql/language/visitor.js
var require_visitor = __commonJS({
  "node_modules/graphql/language/visitor.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.BREAK = void 0;
    exports.getEnterLeaveForKind = getEnterLeaveForKind;
    exports.getVisitFn = getVisitFn;
    exports.visit = visit;
    exports.visitInParallel = visitInParallel;
    var _devAssert = require_devAssert(), _inspect = require_inspect(), _ast = require_ast(), _kinds = require_kinds(), BREAK = Object.freeze({});
    exports.BREAK = BREAK;
    function visit(root, visitor, visitorKeys = _ast.QueryDocumentKeys) {
      let enterLeaveMap = /* @__PURE__ */ new Map();
      for (let kind of Object.values(_kinds.Kind))
        enterLeaveMap.set(kind, getEnterLeaveForKind(visitor, kind));
      let stack, inArray = Array.isArray(root), keys = [root], index = -1, edits = [], node = root, key, parent, path = [], ancestors = [];
      do {
        index++;
        let isLeaving = index === keys.length, isEdited = isLeaving && edits.length !== 0;
        if (isLeaving) {
          if (key = ancestors.length === 0 ? void 0 : path[path.length - 1], node = parent, parent = ancestors.pop(), isEdited)
            if (inArray) {
              node = node.slice();
              let editOffset = 0;
              for (let [editKey, editValue] of edits) {
                let arrayKey = editKey - editOffset;
                editValue === null ? (node.splice(arrayKey, 1), editOffset++) : node[arrayKey] = editValue;
              }
            } else {
              node = { ...node };
              for (let [editKey, editValue] of edits)
                node[editKey] = editValue;
            }
          index = stack.index, keys = stack.keys, edits = stack.edits, inArray = stack.inArray, stack = stack.prev;
        } else if (parent) {
          if (key = inArray ? index : keys[index], node = parent[key], node == null)
            continue;
          path.push(key);
        }
        let result;
        if (!Array.isArray(node)) {
          var _enterLeaveMap$get, _enterLeaveMap$get2;
          (0, _ast.isNode)(node) || (0, _devAssert.devAssert)(
            !1,
            `Invalid AST Node: ${(0, _inspect.inspect)(node)}.`
          );
          let visitFn = isLeaving ? (_enterLeaveMap$get = enterLeaveMap.get(node.kind)) === null || _enterLeaveMap$get === void 0 ? void 0 : _enterLeaveMap$get.leave : (_enterLeaveMap$get2 = enterLeaveMap.get(node.kind)) === null || _enterLeaveMap$get2 === void 0 ? void 0 : _enterLeaveMap$get2.enter;
          if (result = visitFn?.call(visitor, node, key, parent, path, ancestors), result === BREAK)
            break;
          if (result === !1) {
            if (!isLeaving) {
              path.pop();
              continue;
            }
          } else if (result !== void 0 && (edits.push([key, result]), !isLeaving))
            if ((0, _ast.isNode)(result))
              node = result;
            else {
              path.pop();
              continue;
            }
        }
        if (result === void 0 && isEdited && edits.push([key, node]), isLeaving)
          path.pop();
        else {
          var _node$kind;
          stack = {
            inArray,
            index,
            keys,
            edits,
            prev: stack
          }, inArray = Array.isArray(node), keys = inArray ? node : (_node$kind = visitorKeys[node.kind]) !== null && _node$kind !== void 0 ? _node$kind : [], index = -1, edits = [], parent && ancestors.push(parent), parent = node;
        }
      } while (stack !== void 0);
      return edits.length !== 0 ? edits[edits.length - 1][1] : root;
    }
    function visitInParallel(visitors) {
      let skipping = new Array(visitors.length).fill(null), mergedVisitor = /* @__PURE__ */ Object.create(null);
      for (let kind of Object.values(_kinds.Kind)) {
        let hasVisitor = !1, enterList = new Array(visitors.length).fill(void 0), leaveList = new Array(visitors.length).fill(void 0);
        for (let i = 0; i < visitors.length; ++i) {
          let { enter, leave } = getEnterLeaveForKind(visitors[i], kind);
          hasVisitor || (hasVisitor = enter != null || leave != null), enterList[i] = enter, leaveList[i] = leave;
        }
        if (!hasVisitor)
          continue;
        let mergedEnterLeave = {
          enter(...args) {
            let node = args[0];
            for (let i = 0; i < visitors.length; i++)
              if (skipping[i] === null) {
                var _enterList$i;
                let result = (_enterList$i = enterList[i]) === null || _enterList$i === void 0 ? void 0 : _enterList$i.apply(visitors[i], args);
                if (result === !1)
                  skipping[i] = node;
                else if (result === BREAK)
                  skipping[i] = BREAK;
                else if (result !== void 0)
                  return result;
              }
          },
          leave(...args) {
            let node = args[0];
            for (let i = 0; i < visitors.length; i++)
              if (skipping[i] === null) {
                var _leaveList$i;
                let result = (_leaveList$i = leaveList[i]) === null || _leaveList$i === void 0 ? void 0 : _leaveList$i.apply(visitors[i], args);
                if (result === BREAK)
                  skipping[i] = BREAK;
                else if (result !== void 0 && result !== !1)
                  return result;
              } else
                skipping[i] === node && (skipping[i] = null);
          }
        };
        mergedVisitor[kind] = mergedEnterLeave;
      }
      return mergedVisitor;
    }
    function getEnterLeaveForKind(visitor, kind) {
      let kindVisitor = visitor[kind];
      return typeof kindVisitor == "object" ? kindVisitor : typeof kindVisitor == "function" ? {
        enter: kindVisitor,
        leave: void 0
      } : {
        enter: visitor.enter,
        leave: visitor.leave
      };
    }
    function getVisitFn(visitor, kind, isLeaving) {
      let { enter, leave } = getEnterLeaveForKind(visitor, kind);
      return isLeaving ? leave : enter;
    }
  }
});

// node_modules/graphql/language/printer.js
var require_printer = __commonJS({
  "node_modules/graphql/language/printer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.print = print2;
    var _blockString = require_blockString(), _printString = require_printString(), _visitor = require_visitor();
    function print2(ast) {
      return (0, _visitor.visit)(ast, printDocASTReducer);
    }
    var MAX_LINE_LENGTH = 80, printDocASTReducer = {
      Name: {
        leave: (node) => node.value
      },
      Variable: {
        leave: (node) => "$" + node.name
      },
      // Document
      Document: {
        leave: (node) => join(node.definitions, `

`)
      },
      OperationDefinition: {
        leave(node) {
          let varDefs = wrap("(", join(node.variableDefinitions, ", "), ")"), prefix = join(
            [
              node.operation,
              join([node.name, varDefs]),
              join(node.directives, " ")
            ],
            " "
          );
          return (prefix === "query" ? "" : prefix + " ") + node.selectionSet;
        }
      },
      VariableDefinition: {
        leave: ({ variable, type, defaultValue, directives }) => variable + ": " + type + wrap(" = ", defaultValue) + wrap(" ", join(directives, " "))
      },
      SelectionSet: {
        leave: ({ selections }) => block(selections)
      },
      Field: {
        leave({ alias, name, arguments: args, directives, selectionSet }) {
          let prefix = wrap("", alias, ": ") + name, argsLine = prefix + wrap("(", join(args, ", "), ")");
          return argsLine.length > MAX_LINE_LENGTH && (argsLine = prefix + wrap(`(
`, indent(join(args, `
`)), `
)`)), join([argsLine, join(directives, " "), selectionSet], " ");
        }
      },
      Argument: {
        leave: ({ name, value }) => name + ": " + value
      },
      // Fragments
      FragmentSpread: {
        leave: ({ name, directives }) => "..." + name + wrap(" ", join(directives, " "))
      },
      InlineFragment: {
        leave: ({ typeCondition, directives, selectionSet }) => join(
          [
            "...",
            wrap("on ", typeCondition),
            join(directives, " "),
            selectionSet
          ],
          " "
        )
      },
      FragmentDefinition: {
        leave: ({ name, typeCondition, variableDefinitions, directives, selectionSet }) => (
          // or removed in the future.
          `fragment ${name}${wrap("(", join(variableDefinitions, ", "), ")")} on ${typeCondition} ${wrap("", join(directives, " "), " ")}` + selectionSet
        )
      },
      // Value
      IntValue: {
        leave: ({ value }) => value
      },
      FloatValue: {
        leave: ({ value }) => value
      },
      StringValue: {
        leave: ({ value, block: isBlockString }) => isBlockString ? (0, _blockString.printBlockString)(value) : (0, _printString.printString)(value)
      },
      BooleanValue: {
        leave: ({ value }) => value ? "true" : "false"
      },
      NullValue: {
        leave: () => "null"
      },
      EnumValue: {
        leave: ({ value }) => value
      },
      ListValue: {
        leave: ({ values }) => "[" + join(values, ", ") + "]"
      },
      ObjectValue: {
        leave: ({ fields }) => "{" + join(fields, ", ") + "}"
      },
      ObjectField: {
        leave: ({ name, value }) => name + ": " + value
      },
      // Directive
      Directive: {
        leave: ({ name, arguments: args }) => "@" + name + wrap("(", join(args, ", "), ")")
      },
      // Type
      NamedType: {
        leave: ({ name }) => name
      },
      ListType: {
        leave: ({ type }) => "[" + type + "]"
      },
      NonNullType: {
        leave: ({ type }) => type + "!"
      },
      // Type System Definitions
      SchemaDefinition: {
        leave: ({ description, directives, operationTypes }) => wrap("", description, `
`) + join(["schema", join(directives, " "), block(operationTypes)], " ")
      },
      OperationTypeDefinition: {
        leave: ({ operation, type }) => operation + ": " + type
      },
      ScalarTypeDefinition: {
        leave: ({ description, name, directives }) => wrap("", description, `
`) + join(["scalar", name, join(directives, " ")], " ")
      },
      ObjectTypeDefinition: {
        leave: ({ description, name, interfaces, directives, fields }) => wrap("", description, `
`) + join(
          [
            "type",
            name,
            wrap("implements ", join(interfaces, " & ")),
            join(directives, " "),
            block(fields)
          ],
          " "
        )
      },
      FieldDefinition: {
        leave: ({ description, name, arguments: args, type, directives }) => wrap("", description, `
`) + name + (hasMultilineItems(args) ? wrap(`(
`, indent(join(args, `
`)), `
)`) : wrap("(", join(args, ", "), ")")) + ": " + type + wrap(" ", join(directives, " "))
      },
      InputValueDefinition: {
        leave: ({ description, name, type, defaultValue, directives }) => wrap("", description, `
`) + join(
          [name + ": " + type, wrap("= ", defaultValue), join(directives, " ")],
          " "
        )
      },
      InterfaceTypeDefinition: {
        leave: ({ description, name, interfaces, directives, fields }) => wrap("", description, `
`) + join(
          [
            "interface",
            name,
            wrap("implements ", join(interfaces, " & ")),
            join(directives, " "),
            block(fields)
          ],
          " "
        )
      },
      UnionTypeDefinition: {
        leave: ({ description, name, directives, types }) => wrap("", description, `
`) + join(
          ["union", name, join(directives, " "), wrap("= ", join(types, " | "))],
          " "
        )
      },
      EnumTypeDefinition: {
        leave: ({ description, name, directives, values }) => wrap("", description, `
`) + join(["enum", name, join(directives, " "), block(values)], " ")
      },
      EnumValueDefinition: {
        leave: ({ description, name, directives }) => wrap("", description, `
`) + join([name, join(directives, " ")], " ")
      },
      InputObjectTypeDefinition: {
        leave: ({ description, name, directives, fields }) => wrap("", description, `
`) + join(["input", name, join(directives, " "), block(fields)], " ")
      },
      DirectiveDefinition: {
        leave: ({ description, name, arguments: args, repeatable, locations }) => wrap("", description, `
`) + "directive @" + name + (hasMultilineItems(args) ? wrap(`(
`, indent(join(args, `
`)), `
)`) : wrap("(", join(args, ", "), ")")) + (repeatable ? " repeatable" : "") + " on " + join(locations, " | ")
      },
      SchemaExtension: {
        leave: ({ directives, operationTypes }) => join(
          ["extend schema", join(directives, " "), block(operationTypes)],
          " "
        )
      },
      ScalarTypeExtension: {
        leave: ({ name, directives }) => join(["extend scalar", name, join(directives, " ")], " ")
      },
      ObjectTypeExtension: {
        leave: ({ name, interfaces, directives, fields }) => join(
          [
            "extend type",
            name,
            wrap("implements ", join(interfaces, " & ")),
            join(directives, " "),
            block(fields)
          ],
          " "
        )
      },
      InterfaceTypeExtension: {
        leave: ({ name, interfaces, directives, fields }) => join(
          [
            "extend interface",
            name,
            wrap("implements ", join(interfaces, " & ")),
            join(directives, " "),
            block(fields)
          ],
          " "
        )
      },
      UnionTypeExtension: {
        leave: ({ name, directives, types }) => join(
          [
            "extend union",
            name,
            join(directives, " "),
            wrap("= ", join(types, " | "))
          ],
          " "
        )
      },
      EnumTypeExtension: {
        leave: ({ name, directives, values }) => join(["extend enum", name, join(directives, " "), block(values)], " ")
      },
      InputObjectTypeExtension: {
        leave: ({ name, directives, fields }) => join(["extend input", name, join(directives, " "), block(fields)], " ")
      }
    };
    function join(maybeArray, separator = "") {
      var _maybeArray$filter$jo;
      return (_maybeArray$filter$jo = maybeArray?.filter((x) => x).join(separator)) !== null && _maybeArray$filter$jo !== void 0 ? _maybeArray$filter$jo : "";
    }
    function block(array) {
      return wrap(`{
`, indent(join(array, `
`)), `
}`);
    }
    function wrap(start, maybeString, end = "") {
      return maybeString != null && maybeString !== "" ? start + maybeString + end : "";
    }
    function indent(str) {
      return wrap("  ", str.replace(/\n/g, `
  `));
    }
    function hasMultilineItems(maybeArray) {
      var _maybeArray$some;
      return (_maybeArray$some = maybeArray?.some((str) => str.includes(`
`))) !== null && _maybeArray$some !== void 0 ? _maybeArray$some : !1;
    }
  }
});

// node_modules/graphql/utilities/valueFromASTUntyped.js
var require_valueFromASTUntyped = __commonJS({
  "node_modules/graphql/utilities/valueFromASTUntyped.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.valueFromASTUntyped = valueFromASTUntyped;
    var _keyValMap = require_keyValMap(), _kinds = require_kinds();
    function valueFromASTUntyped(valueNode, variables) {
      switch (valueNode.kind) {
        case _kinds.Kind.NULL:
          return null;
        case _kinds.Kind.INT:
          return parseInt(valueNode.value, 10);
        case _kinds.Kind.FLOAT:
          return parseFloat(valueNode.value);
        case _kinds.Kind.STRING:
        case _kinds.Kind.ENUM:
        case _kinds.Kind.BOOLEAN:
          return valueNode.value;
        case _kinds.Kind.LIST:
          return valueNode.values.map(
            (node) => valueFromASTUntyped(node, variables)
          );
        case _kinds.Kind.OBJECT:
          return (0, _keyValMap.keyValMap)(
            valueNode.fields,
            (field) => field.name.value,
            (field) => valueFromASTUntyped(field.value, variables)
          );
        case _kinds.Kind.VARIABLE:
          return variables?.[valueNode.name.value];
      }
    }
  }
});

// node_modules/graphql/type/assertName.js
var require_assertName = __commonJS({
  "node_modules/graphql/type/assertName.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.assertEnumValueName = assertEnumValueName;
    exports.assertName = assertName;
    var _devAssert = require_devAssert(), _GraphQLError = require_GraphQLError(), _characterClasses = require_characterClasses();
    function assertName(name) {
      if (name != null || (0, _devAssert.devAssert)(!1, "Must provide name."), typeof name == "string" || (0, _devAssert.devAssert)(!1, "Expected name to be a string."), name.length === 0)
        throw new _GraphQLError.GraphQLError(
          "Expected name to be a non-empty string."
        );
      for (let i = 1; i < name.length; ++i)
        if (!(0, _characterClasses.isNameContinue)(name.charCodeAt(i)))
          throw new _GraphQLError.GraphQLError(
            `Names must only contain [_a-zA-Z0-9] but "${name}" does not.`
          );
      if (!(0, _characterClasses.isNameStart)(name.charCodeAt(0)))
        throw new _GraphQLError.GraphQLError(
          `Names must start with [_a-zA-Z] but "${name}" does not.`
        );
      return name;
    }
    function assertEnumValueName(name) {
      if (name === "true" || name === "false" || name === "null")
        throw new _GraphQLError.GraphQLError(
          `Enum values cannot be named: ${name}`
        );
      return assertName(name);
    }
  }
});

// node_modules/graphql/type/definition.js
var require_definition = __commonJS({
  "node_modules/graphql/type/definition.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.GraphQLUnionType = exports.GraphQLScalarType = exports.GraphQLObjectType = exports.GraphQLNonNull = exports.GraphQLList = exports.GraphQLInterfaceType = exports.GraphQLInputObjectType = exports.GraphQLEnumType = void 0;
    exports.argsToArgsConfig = argsToArgsConfig;
    exports.assertAbstractType = assertAbstractType;
    exports.assertCompositeType = assertCompositeType;
    exports.assertEnumType = assertEnumType;
    exports.assertInputObjectType = assertInputObjectType;
    exports.assertInputType = assertInputType;
    exports.assertInterfaceType = assertInterfaceType;
    exports.assertLeafType = assertLeafType;
    exports.assertListType = assertListType;
    exports.assertNamedType = assertNamedType;
    exports.assertNonNullType = assertNonNullType;
    exports.assertNullableType = assertNullableType;
    exports.assertObjectType = assertObjectType;
    exports.assertOutputType = assertOutputType;
    exports.assertScalarType = assertScalarType;
    exports.assertType = assertType;
    exports.assertUnionType = assertUnionType;
    exports.assertWrappingType = assertWrappingType;
    exports.defineArguments = defineArguments;
    exports.getNamedType = getNamedType;
    exports.getNullableType = getNullableType;
    exports.isAbstractType = isAbstractType;
    exports.isCompositeType = isCompositeType;
    exports.isEnumType = isEnumType;
    exports.isInputObjectType = isInputObjectType;
    exports.isInputType = isInputType;
    exports.isInterfaceType = isInterfaceType;
    exports.isLeafType = isLeafType;
    exports.isListType = isListType;
    exports.isNamedType = isNamedType;
    exports.isNonNullType = isNonNullType;
    exports.isNullableType = isNullableType;
    exports.isObjectType = isObjectType;
    exports.isOutputType = isOutputType;
    exports.isRequiredArgument = isRequiredArgument;
    exports.isRequiredInputField = isRequiredInputField;
    exports.isScalarType = isScalarType;
    exports.isType = isType;
    exports.isUnionType = isUnionType;
    exports.isWrappingType = isWrappingType;
    exports.resolveObjMapThunk = resolveObjMapThunk;
    exports.resolveReadonlyArrayThunk = resolveReadonlyArrayThunk;
    var _devAssert = require_devAssert(), _didYouMean = require_didYouMean(), _identityFunc = require_identityFunc(), _inspect = require_inspect(), _instanceOf = require_instanceOf(), _isObjectLike = require_isObjectLike(), _keyMap = require_keyMap(), _keyValMap = require_keyValMap(), _mapValue = require_mapValue(), _suggestionList = require_suggestionList(), _toObjMap = require_toObjMap(), _GraphQLError = require_GraphQLError(), _kinds = require_kinds(), _printer = require_printer(), _valueFromASTUntyped = require_valueFromASTUntyped(), _assertName = require_assertName();
    function isType(type) {
      return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type) || isListType(type) || isNonNullType(type);
    }
    function assertType(type) {
      if (!isType(type))
        throw new Error(
          `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL type.`
        );
      return type;
    }
    function isScalarType(type) {
      return (0, _instanceOf.instanceOf)(type, GraphQLScalarType);
    }
    function assertScalarType(type) {
      if (!isScalarType(type))
        throw new Error(
          `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL Scalar type.`
        );
      return type;
    }
    function isObjectType(type) {
      return (0, _instanceOf.instanceOf)(type, GraphQLObjectType);
    }
    function assertObjectType(type) {
      if (!isObjectType(type))
        throw new Error(
          `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL Object type.`
        );
      return type;
    }
    function isInterfaceType(type) {
      return (0, _instanceOf.instanceOf)(type, GraphQLInterfaceType);
    }
    function assertInterfaceType(type) {
      if (!isInterfaceType(type))
        throw new Error(
          `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL Interface type.`
        );
      return type;
    }
    function isUnionType(type) {
      return (0, _instanceOf.instanceOf)(type, GraphQLUnionType);
    }
    function assertUnionType(type) {
      if (!isUnionType(type))
        throw new Error(
          `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL Union type.`
        );
      return type;
    }
    function isEnumType(type) {
      return (0, _instanceOf.instanceOf)(type, GraphQLEnumType);
    }
    function assertEnumType(type) {
      if (!isEnumType(type))
        throw new Error(
          `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL Enum type.`
        );
      return type;
    }
    function isInputObjectType(type) {
      return (0, _instanceOf.instanceOf)(type, GraphQLInputObjectType);
    }
    function assertInputObjectType(type) {
      if (!isInputObjectType(type))
        throw new Error(
          `Expected ${(0, _inspect.inspect)(
            type
          )} to be a GraphQL Input Object type.`
        );
      return type;
    }
    function isListType(type) {
      return (0, _instanceOf.instanceOf)(type, GraphQLList);
    }
    function assertListType(type) {
      if (!isListType(type))
        throw new Error(
          `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL List type.`
        );
      return type;
    }
    function isNonNullType(type) {
      return (0, _instanceOf.instanceOf)(type, GraphQLNonNull);
    }
    function assertNonNullType(type) {
      if (!isNonNullType(type))
        throw new Error(
          `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL Non-Null type.`
        );
      return type;
    }
    function isInputType(type) {
      return isScalarType(type) || isEnumType(type) || isInputObjectType(type) || isWrappingType(type) && isInputType(type.ofType);
    }
    function assertInputType(type) {
      if (!isInputType(type))
        throw new Error(
          `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL input type.`
        );
      return type;
    }
    function isOutputType(type) {
      return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isWrappingType(type) && isOutputType(type.ofType);
    }
    function assertOutputType(type) {
      if (!isOutputType(type))
        throw new Error(
          `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL output type.`
        );
      return type;
    }
    function isLeafType(type) {
      return isScalarType(type) || isEnumType(type);
    }
    function assertLeafType(type) {
      if (!isLeafType(type))
        throw new Error(
          `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL leaf type.`
        );
      return type;
    }
    function isCompositeType(type) {
      return isObjectType(type) || isInterfaceType(type) || isUnionType(type);
    }
    function assertCompositeType(type) {
      if (!isCompositeType(type))
        throw new Error(
          `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL composite type.`
        );
      return type;
    }
    function isAbstractType(type) {
      return isInterfaceType(type) || isUnionType(type);
    }
    function assertAbstractType(type) {
      if (!isAbstractType(type))
        throw new Error(
          `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL abstract type.`
        );
      return type;
    }
    var GraphQLList = class {
      constructor(ofType) {
        isType(ofType) || (0, _devAssert.devAssert)(
          !1,
          `Expected ${(0, _inspect.inspect)(ofType)} to be a GraphQL type.`
        ), this.ofType = ofType;
      }
      get [Symbol.toStringTag]() {
        return "GraphQLList";
      }
      toString() {
        return "[" + String(this.ofType) + "]";
      }
      toJSON() {
        return this.toString();
      }
    };
    exports.GraphQLList = GraphQLList;
    var GraphQLNonNull = class {
      constructor(ofType) {
        isNullableType(ofType) || (0, _devAssert.devAssert)(
          !1,
          `Expected ${(0, _inspect.inspect)(
            ofType
          )} to be a GraphQL nullable type.`
        ), this.ofType = ofType;
      }
      get [Symbol.toStringTag]() {
        return "GraphQLNonNull";
      }
      toString() {
        return String(this.ofType) + "!";
      }
      toJSON() {
        return this.toString();
      }
    };
    exports.GraphQLNonNull = GraphQLNonNull;
    function isWrappingType(type) {
      return isListType(type) || isNonNullType(type);
    }
    function assertWrappingType(type) {
      if (!isWrappingType(type))
        throw new Error(
          `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL wrapping type.`
        );
      return type;
    }
    function isNullableType(type) {
      return isType(type) && !isNonNullType(type);
    }
    function assertNullableType(type) {
      if (!isNullableType(type))
        throw new Error(
          `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL nullable type.`
        );
      return type;
    }
    function getNullableType(type) {
      if (type)
        return isNonNullType(type) ? type.ofType : type;
    }
    function isNamedType(type) {
      return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type);
    }
    function assertNamedType(type) {
      if (!isNamedType(type))
        throw new Error(
          `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL named type.`
        );
      return type;
    }
    function getNamedType(type) {
      if (type) {
        let unwrappedType = type;
        for (; isWrappingType(unwrappedType); )
          unwrappedType = unwrappedType.ofType;
        return unwrappedType;
      }
    }
    function resolveReadonlyArrayThunk(thunk) {
      return typeof thunk == "function" ? thunk() : thunk;
    }
    function resolveObjMapThunk(thunk) {
      return typeof thunk == "function" ? thunk() : thunk;
    }
    var GraphQLScalarType = class {
      constructor(config) {
        var _config$parseValue, _config$serialize, _config$parseLiteral, _config$extensionASTN;
        let parseValue = (_config$parseValue = config.parseValue) !== null && _config$parseValue !== void 0 ? _config$parseValue : _identityFunc.identityFunc;
        this.name = (0, _assertName.assertName)(config.name), this.description = config.description, this.specifiedByURL = config.specifiedByURL, this.serialize = (_config$serialize = config.serialize) !== null && _config$serialize !== void 0 ? _config$serialize : _identityFunc.identityFunc, this.parseValue = parseValue, this.parseLiteral = (_config$parseLiteral = config.parseLiteral) !== null && _config$parseLiteral !== void 0 ? _config$parseLiteral : (node, variables) => parseValue(
          (0, _valueFromASTUntyped.valueFromASTUntyped)(node, variables)
        ), this.extensions = (0, _toObjMap.toObjMap)(config.extensions), this.astNode = config.astNode, this.extensionASTNodes = (_config$extensionASTN = config.extensionASTNodes) !== null && _config$extensionASTN !== void 0 ? _config$extensionASTN : [], config.specifiedByURL == null || typeof config.specifiedByURL == "string" || (0, _devAssert.devAssert)(
          !1,
          `${this.name} must provide "specifiedByURL" as a string, but got: ${(0, _inspect.inspect)(config.specifiedByURL)}.`
        ), config.serialize == null || typeof config.serialize == "function" || (0, _devAssert.devAssert)(
          !1,
          `${this.name} must provide "serialize" function. If this custom Scalar is also used as an input type, ensure "parseValue" and "parseLiteral" functions are also provided.`
        ), config.parseLiteral && (typeof config.parseValue == "function" && typeof config.parseLiteral == "function" || (0, _devAssert.devAssert)(
          !1,
          `${this.name} must provide both "parseValue" and "parseLiteral" functions.`
        ));
      }
      get [Symbol.toStringTag]() {
        return "GraphQLScalarType";
      }
      toConfig() {
        return {
          name: this.name,
          description: this.description,
          specifiedByURL: this.specifiedByURL,
          serialize: this.serialize,
          parseValue: this.parseValue,
          parseLiteral: this.parseLiteral,
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: this.extensionASTNodes
        };
      }
      toString() {
        return this.name;
      }
      toJSON() {
        return this.toString();
      }
    };
    exports.GraphQLScalarType = GraphQLScalarType;
    var GraphQLObjectType = class {
      constructor(config) {
        var _config$extensionASTN2;
        this.name = (0, _assertName.assertName)(config.name), this.description = config.description, this.isTypeOf = config.isTypeOf, this.extensions = (0, _toObjMap.toObjMap)(config.extensions), this.astNode = config.astNode, this.extensionASTNodes = (_config$extensionASTN2 = config.extensionASTNodes) !== null && _config$extensionASTN2 !== void 0 ? _config$extensionASTN2 : [], this._fields = () => defineFieldMap(config), this._interfaces = () => defineInterfaces(config), config.isTypeOf == null || typeof config.isTypeOf == "function" || (0, _devAssert.devAssert)(
          !1,
          `${this.name} must provide "isTypeOf" as a function, but got: ${(0, _inspect.inspect)(config.isTypeOf)}.`
        );
      }
      get [Symbol.toStringTag]() {
        return "GraphQLObjectType";
      }
      getFields() {
        return typeof this._fields == "function" && (this._fields = this._fields()), this._fields;
      }
      getInterfaces() {
        return typeof this._interfaces == "function" && (this._interfaces = this._interfaces()), this._interfaces;
      }
      toConfig() {
        return {
          name: this.name,
          description: this.description,
          interfaces: this.getInterfaces(),
          fields: fieldsToFieldsConfig(this.getFields()),
          isTypeOf: this.isTypeOf,
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: this.extensionASTNodes
        };
      }
      toString() {
        return this.name;
      }
      toJSON() {
        return this.toString();
      }
    };
    exports.GraphQLObjectType = GraphQLObjectType;
    function defineInterfaces(config) {
      var _config$interfaces;
      let interfaces = resolveReadonlyArrayThunk(
        (_config$interfaces = config.interfaces) !== null && _config$interfaces !== void 0 ? _config$interfaces : []
      );
      return Array.isArray(interfaces) || (0, _devAssert.devAssert)(
        !1,
        `${config.name} interfaces must be an Array or a function which returns an Array.`
      ), interfaces;
    }
    function defineFieldMap(config) {
      let fieldMap = resolveObjMapThunk(config.fields);
      return isPlainObj(fieldMap) || (0, _devAssert.devAssert)(
        !1,
        `${config.name} fields must be an object with field names as keys or a function which returns such an object.`
      ), (0, _mapValue.mapValue)(fieldMap, (fieldConfig, fieldName) => {
        var _fieldConfig$args;
        isPlainObj(fieldConfig) || (0, _devAssert.devAssert)(
          !1,
          `${config.name}.${fieldName} field config must be an object.`
        ), fieldConfig.resolve == null || typeof fieldConfig.resolve == "function" || (0, _devAssert.devAssert)(
          !1,
          `${config.name}.${fieldName} field resolver must be a function if provided, but got: ${(0, _inspect.inspect)(fieldConfig.resolve)}.`
        );
        let argsConfig = (_fieldConfig$args = fieldConfig.args) !== null && _fieldConfig$args !== void 0 ? _fieldConfig$args : {};
        return isPlainObj(argsConfig) || (0, _devAssert.devAssert)(
          !1,
          `${config.name}.${fieldName} args must be an object with argument names as keys.`
        ), {
          name: (0, _assertName.assertName)(fieldName),
          description: fieldConfig.description,
          type: fieldConfig.type,
          args: defineArguments(argsConfig),
          resolve: fieldConfig.resolve,
          subscribe: fieldConfig.subscribe,
          deprecationReason: fieldConfig.deprecationReason,
          extensions: (0, _toObjMap.toObjMap)(fieldConfig.extensions),
          astNode: fieldConfig.astNode
        };
      });
    }
    function defineArguments(config) {
      return Object.entries(config).map(([argName, argConfig]) => ({
        name: (0, _assertName.assertName)(argName),
        description: argConfig.description,
        type: argConfig.type,
        defaultValue: argConfig.defaultValue,
        deprecationReason: argConfig.deprecationReason,
        extensions: (0, _toObjMap.toObjMap)(argConfig.extensions),
        astNode: argConfig.astNode
      }));
    }
    function isPlainObj(obj) {
      return (0, _isObjectLike.isObjectLike)(obj) && !Array.isArray(obj);
    }
    function fieldsToFieldsConfig(fields) {
      return (0, _mapValue.mapValue)(fields, (field) => ({
        description: field.description,
        type: field.type,
        args: argsToArgsConfig(field.args),
        resolve: field.resolve,
        subscribe: field.subscribe,
        deprecationReason: field.deprecationReason,
        extensions: field.extensions,
        astNode: field.astNode
      }));
    }
    function argsToArgsConfig(args) {
      return (0, _keyValMap.keyValMap)(
        args,
        (arg) => arg.name,
        (arg) => ({
          description: arg.description,
          type: arg.type,
          defaultValue: arg.defaultValue,
          deprecationReason: arg.deprecationReason,
          extensions: arg.extensions,
          astNode: arg.astNode
        })
      );
    }
    function isRequiredArgument(arg) {
      return isNonNullType(arg.type) && arg.defaultValue === void 0;
    }
    var GraphQLInterfaceType = class {
      constructor(config) {
        var _config$extensionASTN3;
        this.name = (0, _assertName.assertName)(config.name), this.description = config.description, this.resolveType = config.resolveType, this.extensions = (0, _toObjMap.toObjMap)(config.extensions), this.astNode = config.astNode, this.extensionASTNodes = (_config$extensionASTN3 = config.extensionASTNodes) !== null && _config$extensionASTN3 !== void 0 ? _config$extensionASTN3 : [], this._fields = defineFieldMap.bind(void 0, config), this._interfaces = defineInterfaces.bind(void 0, config), config.resolveType == null || typeof config.resolveType == "function" || (0, _devAssert.devAssert)(
          !1,
          `${this.name} must provide "resolveType" as a function, but got: ${(0, _inspect.inspect)(config.resolveType)}.`
        );
      }
      get [Symbol.toStringTag]() {
        return "GraphQLInterfaceType";
      }
      getFields() {
        return typeof this._fields == "function" && (this._fields = this._fields()), this._fields;
      }
      getInterfaces() {
        return typeof this._interfaces == "function" && (this._interfaces = this._interfaces()), this._interfaces;
      }
      toConfig() {
        return {
          name: this.name,
          description: this.description,
          interfaces: this.getInterfaces(),
          fields: fieldsToFieldsConfig(this.getFields()),
          resolveType: this.resolveType,
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: this.extensionASTNodes
        };
      }
      toString() {
        return this.name;
      }
      toJSON() {
        return this.toString();
      }
    };
    exports.GraphQLInterfaceType = GraphQLInterfaceType;
    var GraphQLUnionType = class {
      constructor(config) {
        var _config$extensionASTN4;
        this.name = (0, _assertName.assertName)(config.name), this.description = config.description, this.resolveType = config.resolveType, this.extensions = (0, _toObjMap.toObjMap)(config.extensions), this.astNode = config.astNode, this.extensionASTNodes = (_config$extensionASTN4 = config.extensionASTNodes) !== null && _config$extensionASTN4 !== void 0 ? _config$extensionASTN4 : [], this._types = defineTypes.bind(void 0, config), config.resolveType == null || typeof config.resolveType == "function" || (0, _devAssert.devAssert)(
          !1,
          `${this.name} must provide "resolveType" as a function, but got: ${(0, _inspect.inspect)(config.resolveType)}.`
        );
      }
      get [Symbol.toStringTag]() {
        return "GraphQLUnionType";
      }
      getTypes() {
        return typeof this._types == "function" && (this._types = this._types()), this._types;
      }
      toConfig() {
        return {
          name: this.name,
          description: this.description,
          types: this.getTypes(),
          resolveType: this.resolveType,
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: this.extensionASTNodes
        };
      }
      toString() {
        return this.name;
      }
      toJSON() {
        return this.toString();
      }
    };
    exports.GraphQLUnionType = GraphQLUnionType;
    function defineTypes(config) {
      let types = resolveReadonlyArrayThunk(config.types);
      return Array.isArray(types) || (0, _devAssert.devAssert)(
        !1,
        `Must provide Array of types or a function which returns such an array for Union ${config.name}.`
      ), types;
    }
    var GraphQLEnumType = class {
      /* <T> */
      constructor(config) {
        var _config$extensionASTN5;
        this.name = (0, _assertName.assertName)(config.name), this.description = config.description, this.extensions = (0, _toObjMap.toObjMap)(config.extensions), this.astNode = config.astNode, this.extensionASTNodes = (_config$extensionASTN5 = config.extensionASTNodes) !== null && _config$extensionASTN5 !== void 0 ? _config$extensionASTN5 : [], this._values = typeof config.values == "function" ? config.values : defineEnumValues(this.name, config.values), this._valueLookup = null, this._nameLookup = null;
      }
      get [Symbol.toStringTag]() {
        return "GraphQLEnumType";
      }
      getValues() {
        return typeof this._values == "function" && (this._values = defineEnumValues(this.name, this._values())), this._values;
      }
      getValue(name) {
        return this._nameLookup === null && (this._nameLookup = (0, _keyMap.keyMap)(
          this.getValues(),
          (value) => value.name
        )), this._nameLookup[name];
      }
      serialize(outputValue) {
        this._valueLookup === null && (this._valueLookup = new Map(
          this.getValues().map((enumValue2) => [enumValue2.value, enumValue2])
        ));
        let enumValue = this._valueLookup.get(outputValue);
        if (enumValue === void 0)
          throw new _GraphQLError.GraphQLError(
            `Enum "${this.name}" cannot represent value: ${(0, _inspect.inspect)(
              outputValue
            )}`
          );
        return enumValue.name;
      }
      parseValue(inputValue) {
        if (typeof inputValue != "string") {
          let valueStr = (0, _inspect.inspect)(inputValue);
          throw new _GraphQLError.GraphQLError(
            `Enum "${this.name}" cannot represent non-string value: ${valueStr}.` + didYouMeanEnumValue(this, valueStr)
          );
        }
        let enumValue = this.getValue(inputValue);
        if (enumValue == null)
          throw new _GraphQLError.GraphQLError(
            `Value "${inputValue}" does not exist in "${this.name}" enum.` + didYouMeanEnumValue(this, inputValue)
          );
        return enumValue.value;
      }
      parseLiteral(valueNode, _variables) {
        if (valueNode.kind !== _kinds.Kind.ENUM) {
          let valueStr = (0, _printer.print)(valueNode);
          throw new _GraphQLError.GraphQLError(
            `Enum "${this.name}" cannot represent non-enum value: ${valueStr}.` + didYouMeanEnumValue(this, valueStr),
            {
              nodes: valueNode
            }
          );
        }
        let enumValue = this.getValue(valueNode.value);
        if (enumValue == null) {
          let valueStr = (0, _printer.print)(valueNode);
          throw new _GraphQLError.GraphQLError(
            `Value "${valueStr}" does not exist in "${this.name}" enum.` + didYouMeanEnumValue(this, valueStr),
            {
              nodes: valueNode
            }
          );
        }
        return enumValue.value;
      }
      toConfig() {
        let values = (0, _keyValMap.keyValMap)(
          this.getValues(),
          (value) => value.name,
          (value) => ({
            description: value.description,
            value: value.value,
            deprecationReason: value.deprecationReason,
            extensions: value.extensions,
            astNode: value.astNode
          })
        );
        return {
          name: this.name,
          description: this.description,
          values,
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: this.extensionASTNodes
        };
      }
      toString() {
        return this.name;
      }
      toJSON() {
        return this.toString();
      }
    };
    exports.GraphQLEnumType = GraphQLEnumType;
    function didYouMeanEnumValue(enumType, unknownValueStr) {
      let allNames = enumType.getValues().map((value) => value.name), suggestedValues = (0, _suggestionList.suggestionList)(
        unknownValueStr,
        allNames
      );
      return (0, _didYouMean.didYouMean)("the enum value", suggestedValues);
    }
    function defineEnumValues(typeName, valueMap) {
      return isPlainObj(valueMap) || (0, _devAssert.devAssert)(
        !1,
        `${typeName} values must be an object with value names as keys.`
      ), Object.entries(valueMap).map(([valueName, valueConfig]) => (isPlainObj(valueConfig) || (0, _devAssert.devAssert)(
        !1,
        `${typeName}.${valueName} must refer to an object with a "value" key representing an internal value but got: ${(0, _inspect.inspect)(
          valueConfig
        )}.`
      ), {
        name: (0, _assertName.assertEnumValueName)(valueName),
        description: valueConfig.description,
        value: valueConfig.value !== void 0 ? valueConfig.value : valueName,
        deprecationReason: valueConfig.deprecationReason,
        extensions: (0, _toObjMap.toObjMap)(valueConfig.extensions),
        astNode: valueConfig.astNode
      }));
    }
    var GraphQLInputObjectType = class {
      constructor(config) {
        var _config$extensionASTN6, _config$isOneOf;
        this.name = (0, _assertName.assertName)(config.name), this.description = config.description, this.extensions = (0, _toObjMap.toObjMap)(config.extensions), this.astNode = config.astNode, this.extensionASTNodes = (_config$extensionASTN6 = config.extensionASTNodes) !== null && _config$extensionASTN6 !== void 0 ? _config$extensionASTN6 : [], this.isOneOf = (_config$isOneOf = config.isOneOf) !== null && _config$isOneOf !== void 0 ? _config$isOneOf : !1, this._fields = defineInputFieldMap.bind(void 0, config);
      }
      get [Symbol.toStringTag]() {
        return "GraphQLInputObjectType";
      }
      getFields() {
        return typeof this._fields == "function" && (this._fields = this._fields()), this._fields;
      }
      toConfig() {
        let fields = (0, _mapValue.mapValue)(this.getFields(), (field) => ({
          description: field.description,
          type: field.type,
          defaultValue: field.defaultValue,
          deprecationReason: field.deprecationReason,
          extensions: field.extensions,
          astNode: field.astNode
        }));
        return {
          name: this.name,
          description: this.description,
          fields,
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: this.extensionASTNodes,
          isOneOf: this.isOneOf
        };
      }
      toString() {
        return this.name;
      }
      toJSON() {
        return this.toString();
      }
    };
    exports.GraphQLInputObjectType = GraphQLInputObjectType;
    function defineInputFieldMap(config) {
      let fieldMap = resolveObjMapThunk(config.fields);
      return isPlainObj(fieldMap) || (0, _devAssert.devAssert)(
        !1,
        `${config.name} fields must be an object with field names as keys or a function which returns such an object.`
      ), (0, _mapValue.mapValue)(fieldMap, (fieldConfig, fieldName) => (!("resolve" in fieldConfig) || (0, _devAssert.devAssert)(
        !1,
        `${config.name}.${fieldName} field has a resolve property, but Input Types cannot define resolvers.`
      ), {
        name: (0, _assertName.assertName)(fieldName),
        description: fieldConfig.description,
        type: fieldConfig.type,
        defaultValue: fieldConfig.defaultValue,
        deprecationReason: fieldConfig.deprecationReason,
        extensions: (0, _toObjMap.toObjMap)(fieldConfig.extensions),
        astNode: fieldConfig.astNode
      }));
    }
    function isRequiredInputField(field) {
      return isNonNullType(field.type) && field.defaultValue === void 0;
    }
  }
});

// node_modules/graphql/utilities/typeComparators.js
var require_typeComparators = __commonJS({
  "node_modules/graphql/utilities/typeComparators.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.doTypesOverlap = doTypesOverlap;
    exports.isEqualType = isEqualType;
    exports.isTypeSubTypeOf = isTypeSubTypeOf;
    var _definition = require_definition();
    function isEqualType(typeA, typeB) {
      return typeA === typeB ? !0 : (0, _definition.isNonNullType)(typeA) && (0, _definition.isNonNullType)(typeB) || (0, _definition.isListType)(typeA) && (0, _definition.isListType)(typeB) ? isEqualType(typeA.ofType, typeB.ofType) : !1;
    }
    function isTypeSubTypeOf(schema, maybeSubType, superType) {
      return maybeSubType === superType ? !0 : (0, _definition.isNonNullType)(superType) ? (0, _definition.isNonNullType)(maybeSubType) ? isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType) : !1 : (0, _definition.isNonNullType)(maybeSubType) ? isTypeSubTypeOf(schema, maybeSubType.ofType, superType) : (0, _definition.isListType)(superType) ? (0, _definition.isListType)(maybeSubType) ? isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType) : !1 : (0, _definition.isListType)(maybeSubType) ? !1 : (0, _definition.isAbstractType)(superType) && ((0, _definition.isInterfaceType)(maybeSubType) || (0, _definition.isObjectType)(maybeSubType)) && schema.isSubType(superType, maybeSubType);
    }
    function doTypesOverlap(schema, typeA, typeB) {
      return typeA === typeB ? !0 : (0, _definition.isAbstractType)(typeA) ? (0, _definition.isAbstractType)(typeB) ? schema.getPossibleTypes(typeA).some((type) => schema.isSubType(typeB, type)) : schema.isSubType(typeA, typeB) : (0, _definition.isAbstractType)(typeB) ? schema.isSubType(typeB, typeA) : !1;
    }
  }
});

// node_modules/graphql/type/scalars.js
var require_scalars = __commonJS({
  "node_modules/graphql/type/scalars.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.GraphQLString = exports.GraphQLInt = exports.GraphQLID = exports.GraphQLFloat = exports.GraphQLBoolean = exports.GRAPHQL_MIN_INT = exports.GRAPHQL_MAX_INT = void 0;
    exports.isSpecifiedScalarType = isSpecifiedScalarType;
    exports.specifiedScalarTypes = void 0;
    var _inspect = require_inspect(), _isObjectLike = require_isObjectLike(), _GraphQLError = require_GraphQLError(), _kinds = require_kinds(), _printer = require_printer(), _definition = require_definition(), GRAPHQL_MAX_INT = 2147483647;
    exports.GRAPHQL_MAX_INT = GRAPHQL_MAX_INT;
    var GRAPHQL_MIN_INT = -2147483648;
    exports.GRAPHQL_MIN_INT = GRAPHQL_MIN_INT;
    var GraphQLInt = new _definition.GraphQLScalarType({
      name: "Int",
      description: "The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",
      serialize(outputValue) {
        let coercedValue = serializeObject(outputValue);
        if (typeof coercedValue == "boolean")
          return coercedValue ? 1 : 0;
        let num = coercedValue;
        if (typeof coercedValue == "string" && coercedValue !== "" && (num = Number(coercedValue)), typeof num != "number" || !Number.isInteger(num))
          throw new _GraphQLError.GraphQLError(
            `Int cannot represent non-integer value: ${(0, _inspect.inspect)(
              coercedValue
            )}`
          );
        if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT)
          throw new _GraphQLError.GraphQLError(
            "Int cannot represent non 32-bit signed integer value: " + (0, _inspect.inspect)(coercedValue)
          );
        return num;
      },
      parseValue(inputValue) {
        if (typeof inputValue != "number" || !Number.isInteger(inputValue))
          throw new _GraphQLError.GraphQLError(
            `Int cannot represent non-integer value: ${(0, _inspect.inspect)(
              inputValue
            )}`
          );
        if (inputValue > GRAPHQL_MAX_INT || inputValue < GRAPHQL_MIN_INT)
          throw new _GraphQLError.GraphQLError(
            `Int cannot represent non 32-bit signed integer value: ${inputValue}`
          );
        return inputValue;
      },
      parseLiteral(valueNode) {
        if (valueNode.kind !== _kinds.Kind.INT)
          throw new _GraphQLError.GraphQLError(
            `Int cannot represent non-integer value: ${(0, _printer.print)(
              valueNode
            )}`,
            {
              nodes: valueNode
            }
          );
        let num = parseInt(valueNode.value, 10);
        if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT)
          throw new _GraphQLError.GraphQLError(
            `Int cannot represent non 32-bit signed integer value: ${valueNode.value}`,
            {
              nodes: valueNode
            }
          );
        return num;
      }
    });
    exports.GraphQLInt = GraphQLInt;
    var GraphQLFloat = new _definition.GraphQLScalarType({
      name: "Float",
      description: "The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).",
      serialize(outputValue) {
        let coercedValue = serializeObject(outputValue);
        if (typeof coercedValue == "boolean")
          return coercedValue ? 1 : 0;
        let num = coercedValue;
        if (typeof coercedValue == "string" && coercedValue !== "" && (num = Number(coercedValue)), typeof num != "number" || !Number.isFinite(num))
          throw new _GraphQLError.GraphQLError(
            `Float cannot represent non numeric value: ${(0, _inspect.inspect)(
              coercedValue
            )}`
          );
        return num;
      },
      parseValue(inputValue) {
        if (typeof inputValue != "number" || !Number.isFinite(inputValue))
          throw new _GraphQLError.GraphQLError(
            `Float cannot represent non numeric value: ${(0, _inspect.inspect)(
              inputValue
            )}`
          );
        return inputValue;
      },
      parseLiteral(valueNode) {
        if (valueNode.kind !== _kinds.Kind.FLOAT && valueNode.kind !== _kinds.Kind.INT)
          throw new _GraphQLError.GraphQLError(
            `Float cannot represent non numeric value: ${(0, _printer.print)(
              valueNode
            )}`,
            valueNode
          );
        return parseFloat(valueNode.value);
      }
    });
    exports.GraphQLFloat = GraphQLFloat;
    var GraphQLString = new _definition.GraphQLScalarType({
      name: "String",
      description: "The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",
      serialize(outputValue) {
        let coercedValue = serializeObject(outputValue);
        if (typeof coercedValue == "string")
          return coercedValue;
        if (typeof coercedValue == "boolean")
          return coercedValue ? "true" : "false";
        if (typeof coercedValue == "number" && Number.isFinite(coercedValue))
          return coercedValue.toString();
        throw new _GraphQLError.GraphQLError(
          `String cannot represent value: ${(0, _inspect.inspect)(outputValue)}`
        );
      },
      parseValue(inputValue) {
        if (typeof inputValue != "string")
          throw new _GraphQLError.GraphQLError(
            `String cannot represent a non string value: ${(0, _inspect.inspect)(
              inputValue
            )}`
          );
        return inputValue;
      },
      parseLiteral(valueNode) {
        if (valueNode.kind !== _kinds.Kind.STRING)
          throw new _GraphQLError.GraphQLError(
            `String cannot represent a non string value: ${(0, _printer.print)(
              valueNode
            )}`,
            {
              nodes: valueNode
            }
          );
        return valueNode.value;
      }
    });
    exports.GraphQLString = GraphQLString;
    var GraphQLBoolean = new _definition.GraphQLScalarType({
      name: "Boolean",
      description: "The `Boolean` scalar type represents `true` or `false`.",
      serialize(outputValue) {
        let coercedValue = serializeObject(outputValue);
        if (typeof coercedValue == "boolean")
          return coercedValue;
        if (Number.isFinite(coercedValue))
          return coercedValue !== 0;
        throw new _GraphQLError.GraphQLError(
          `Boolean cannot represent a non boolean value: ${(0, _inspect.inspect)(
            coercedValue
          )}`
        );
      },
      parseValue(inputValue) {
        if (typeof inputValue != "boolean")
          throw new _GraphQLError.GraphQLError(
            `Boolean cannot represent a non boolean value: ${(0, _inspect.inspect)(
              inputValue
            )}`
          );
        return inputValue;
      },
      parseLiteral(valueNode) {
        if (valueNode.kind !== _kinds.Kind.BOOLEAN)
          throw new _GraphQLError.GraphQLError(
            `Boolean cannot represent a non boolean value: ${(0, _printer.print)(
              valueNode
            )}`,
            {
              nodes: valueNode
            }
          );
        return valueNode.value;
      }
    });
    exports.GraphQLBoolean = GraphQLBoolean;
    var GraphQLID = new _definition.GraphQLScalarType({
      name: "ID",
      description: 'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',
      serialize(outputValue) {
        let coercedValue = serializeObject(outputValue);
        if (typeof coercedValue == "string")
          return coercedValue;
        if (Number.isInteger(coercedValue))
          return String(coercedValue);
        throw new _GraphQLError.GraphQLError(
          `ID cannot represent value: ${(0, _inspect.inspect)(outputValue)}`
        );
      },
      parseValue(inputValue) {
        if (typeof inputValue == "string")
          return inputValue;
        if (typeof inputValue == "number" && Number.isInteger(inputValue))
          return inputValue.toString();
        throw new _GraphQLError.GraphQLError(
          `ID cannot represent value: ${(0, _inspect.inspect)(inputValue)}`
        );
      },
      parseLiteral(valueNode) {
        if (valueNode.kind !== _kinds.Kind.STRING && valueNode.kind !== _kinds.Kind.INT)
          throw new _GraphQLError.GraphQLError(
            "ID cannot represent a non-string and non-integer value: " + (0, _printer.print)(valueNode),
            {
              nodes: valueNode
            }
          );
        return valueNode.value;
      }
    });
    exports.GraphQLID = GraphQLID;
    var specifiedScalarTypes = Object.freeze([
      GraphQLString,
      GraphQLInt,
      GraphQLFloat,
      GraphQLBoolean,
      GraphQLID
    ]);
    exports.specifiedScalarTypes = specifiedScalarTypes;
    function isSpecifiedScalarType(type) {
      return specifiedScalarTypes.some(({ name }) => type.name === name);
    }
    function serializeObject(outputValue) {
      if ((0, _isObjectLike.isObjectLike)(outputValue)) {
        if (typeof outputValue.valueOf == "function") {
          let valueOfResult = outputValue.valueOf();
          if (!(0, _isObjectLike.isObjectLike)(valueOfResult))
            return valueOfResult;
        }
        if (typeof outputValue.toJSON == "function")
          return outputValue.toJSON();
      }
      return outputValue;
    }
  }
});

// node_modules/graphql/type/directives.js
var require_directives = __commonJS({
  "node_modules/graphql/type/directives.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.GraphQLSpecifiedByDirective = exports.GraphQLSkipDirective = exports.GraphQLOneOfDirective = exports.GraphQLIncludeDirective = exports.GraphQLDirective = exports.GraphQLDeprecatedDirective = exports.DEFAULT_DEPRECATION_REASON = void 0;
    exports.assertDirective = assertDirective;
    exports.isDirective = isDirective;
    exports.isSpecifiedDirective = isSpecifiedDirective;
    exports.specifiedDirectives = void 0;
    var _devAssert = require_devAssert(), _inspect = require_inspect(), _instanceOf = require_instanceOf(), _isObjectLike = require_isObjectLike(), _toObjMap = require_toObjMap(), _directiveLocation = require_directiveLocation(), _assertName = require_assertName(), _definition = require_definition(), _scalars = require_scalars();
    function isDirective(directive) {
      return (0, _instanceOf.instanceOf)(directive, GraphQLDirective);
    }
    function assertDirective(directive) {
      if (!isDirective(directive))
        throw new Error(
          `Expected ${(0, _inspect.inspect)(directive)} to be a GraphQL directive.`
        );
      return directive;
    }
    var GraphQLDirective = class {
      constructor(config) {
        var _config$isRepeatable, _config$args;
        this.name = (0, _assertName.assertName)(config.name), this.description = config.description, this.locations = config.locations, this.isRepeatable = (_config$isRepeatable = config.isRepeatable) !== null && _config$isRepeatable !== void 0 ? _config$isRepeatable : !1, this.extensions = (0, _toObjMap.toObjMap)(config.extensions), this.astNode = config.astNode, Array.isArray(config.locations) || (0, _devAssert.devAssert)(
          !1,
          `@${config.name} locations must be an Array.`
        );
        let args = (_config$args = config.args) !== null && _config$args !== void 0 ? _config$args : {};
        (0, _isObjectLike.isObjectLike)(args) && !Array.isArray(args) || (0, _devAssert.devAssert)(
          !1,
          `@${config.name} args must be an object with argument names as keys.`
        ), this.args = (0, _definition.defineArguments)(args);
      }
      get [Symbol.toStringTag]() {
        return "GraphQLDirective";
      }
      toConfig() {
        return {
          name: this.name,
          description: this.description,
          locations: this.locations,
          args: (0, _definition.argsToArgsConfig)(this.args),
          isRepeatable: this.isRepeatable,
          extensions: this.extensions,
          astNode: this.astNode
        };
      }
      toString() {
        return "@" + this.name;
      }
      toJSON() {
        return this.toString();
      }
    };
    exports.GraphQLDirective = GraphQLDirective;
    var GraphQLIncludeDirective = new GraphQLDirective({
      name: "include",
      description: "Directs the executor to include this field or fragment only when the `if` argument is true.",
      locations: [
        _directiveLocation.DirectiveLocation.FIELD,
        _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD,
        _directiveLocation.DirectiveLocation.INLINE_FRAGMENT
      ],
      args: {
        if: {
          type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
          description: "Included when true."
        }
      }
    });
    exports.GraphQLIncludeDirective = GraphQLIncludeDirective;
    var GraphQLSkipDirective = new GraphQLDirective({
      name: "skip",
      description: "Directs the executor to skip this field or fragment when the `if` argument is true.",
      locations: [
        _directiveLocation.DirectiveLocation.FIELD,
        _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD,
        _directiveLocation.DirectiveLocation.INLINE_FRAGMENT
      ],
      args: {
        if: {
          type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
          description: "Skipped when true."
        }
      }
    });
    exports.GraphQLSkipDirective = GraphQLSkipDirective;
    var DEFAULT_DEPRECATION_REASON = "No longer supported";
    exports.DEFAULT_DEPRECATION_REASON = DEFAULT_DEPRECATION_REASON;
    var GraphQLDeprecatedDirective = new GraphQLDirective({
      name: "deprecated",
      description: "Marks an element of a GraphQL schema as no longer supported.",
      locations: [
        _directiveLocation.DirectiveLocation.FIELD_DEFINITION,
        _directiveLocation.DirectiveLocation.ARGUMENT_DEFINITION,
        _directiveLocation.DirectiveLocation.INPUT_FIELD_DEFINITION,
        _directiveLocation.DirectiveLocation.ENUM_VALUE
      ],
      args: {
        reason: {
          type: _scalars.GraphQLString,
          description: "Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).",
          defaultValue: DEFAULT_DEPRECATION_REASON
        }
      }
    });
    exports.GraphQLDeprecatedDirective = GraphQLDeprecatedDirective;
    var GraphQLSpecifiedByDirective = new GraphQLDirective({
      name: "specifiedBy",
      description: "Exposes a URL that specifies the behavior of this scalar.",
      locations: [_directiveLocation.DirectiveLocation.SCALAR],
      args: {
        url: {
          type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
          description: "The URL that specifies the behavior of this scalar."
        }
      }
    });
    exports.GraphQLSpecifiedByDirective = GraphQLSpecifiedByDirective;
    var GraphQLOneOfDirective = new GraphQLDirective({
      name: "oneOf",
      description: "Indicates exactly one field must be supplied and this field must not be `null`.",
      locations: [_directiveLocation.DirectiveLocation.INPUT_OBJECT],
      args: {}
    });
    exports.GraphQLOneOfDirective = GraphQLOneOfDirective;
    var specifiedDirectives = Object.freeze([
      GraphQLIncludeDirective,
      GraphQLSkipDirective,
      GraphQLDeprecatedDirective,
      GraphQLSpecifiedByDirective,
      GraphQLOneOfDirective
    ]);
    exports.specifiedDirectives = specifiedDirectives;
    function isSpecifiedDirective(directive) {
      return specifiedDirectives.some(({ name }) => name === directive.name);
    }
  }
});

// node_modules/graphql/jsutils/isIterableObject.js
var require_isIterableObject = __commonJS({
  "node_modules/graphql/jsutils/isIterableObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.isIterableObject = isIterableObject;
    function isIterableObject(maybeIterable) {
      return typeof maybeIterable == "object" && typeof maybeIterable?.[Symbol.iterator] == "function";
    }
  }
});

// node_modules/graphql/utilities/astFromValue.js
var require_astFromValue = __commonJS({
  "node_modules/graphql/utilities/astFromValue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.astFromValue = astFromValue;
    var _inspect = require_inspect(), _invariant = require_invariant(), _isIterableObject = require_isIterableObject(), _isObjectLike = require_isObjectLike(), _kinds = require_kinds(), _definition = require_definition(), _scalars = require_scalars();
    function astFromValue(value, type) {
      if ((0, _definition.isNonNullType)(type)) {
        let astValue = astFromValue(value, type.ofType);
        return astValue?.kind === _kinds.Kind.NULL ? null : astValue;
      }
      if (value === null)
        return {
          kind: _kinds.Kind.NULL
        };
      if (value === void 0)
        return null;
      if ((0, _definition.isListType)(type)) {
        let itemType = type.ofType;
        if ((0, _isIterableObject.isIterableObject)(value)) {
          let valuesNodes = [];
          for (let item of value) {
            let itemNode = astFromValue(item, itemType);
            itemNode != null && valuesNodes.push(itemNode);
          }
          return {
            kind: _kinds.Kind.LIST,
            values: valuesNodes
          };
        }
        return astFromValue(value, itemType);
      }
      if ((0, _definition.isInputObjectType)(type)) {
        if (!(0, _isObjectLike.isObjectLike)(value))
          return null;
        let fieldNodes = [];
        for (let field of Object.values(type.getFields())) {
          let fieldValue = astFromValue(value[field.name], field.type);
          fieldValue && fieldNodes.push({
            kind: _kinds.Kind.OBJECT_FIELD,
            name: {
              kind: _kinds.Kind.NAME,
              value: field.name
            },
            value: fieldValue
          });
        }
        return {
          kind: _kinds.Kind.OBJECT,
          fields: fieldNodes
        };
      }
      if ((0, _definition.isLeafType)(type)) {
        let serialized = type.serialize(value);
        if (serialized == null)
          return null;
        if (typeof serialized == "boolean")
          return {
            kind: _kinds.Kind.BOOLEAN,
            value: serialized
          };
        if (typeof serialized == "number" && Number.isFinite(serialized)) {
          let stringNum = String(serialized);
          return integerStringRegExp.test(stringNum) ? {
            kind: _kinds.Kind.INT,
            value: stringNum
          } : {
            kind: _kinds.Kind.FLOAT,
            value: stringNum
          };
        }
        if (typeof serialized == "string")
          return (0, _definition.isEnumType)(type) ? {
            kind: _kinds.Kind.ENUM,
            value: serialized
          } : type === _scalars.GraphQLID && integerStringRegExp.test(serialized) ? {
            kind: _kinds.Kind.INT,
            value: serialized
          } : {
            kind: _kinds.Kind.STRING,
            value: serialized
          };
        throw new TypeError(
          `Cannot convert value to AST: ${(0, _inspect.inspect)(serialized)}.`
        );
      }
      (0, _invariant.invariant)(
        !1,
        "Unexpected input type: " + (0, _inspect.inspect)(type)
      );
    }
    var integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;
  }
});

// node_modules/graphql/type/introspection.js
var require_introspection = __commonJS({
  "node_modules/graphql/type/introspection.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.introspectionTypes = exports.__TypeKind = exports.__Type = exports.__Schema = exports.__InputValue = exports.__Field = exports.__EnumValue = exports.__DirectiveLocation = exports.__Directive = exports.TypeNameMetaFieldDef = exports.TypeMetaFieldDef = exports.TypeKind = exports.SchemaMetaFieldDef = void 0;
    exports.isIntrospectionType = isIntrospectionType;
    var _inspect = require_inspect(), _invariant = require_invariant(), _directiveLocation = require_directiveLocation(), _printer = require_printer(), _astFromValue = require_astFromValue(), _definition = require_definition(), _scalars = require_scalars(), __Schema = new _definition.GraphQLObjectType({
      name: "__Schema",
      description: "A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",
      fields: () => ({
        description: {
          type: _scalars.GraphQLString,
          resolve: (schema) => schema.description
        },
        types: {
          description: "A list of all types supported by this server.",
          type: new _definition.GraphQLNonNull(
            new _definition.GraphQLList(new _definition.GraphQLNonNull(__Type))
          ),
          resolve(schema) {
            return Object.values(schema.getTypeMap());
          }
        },
        queryType: {
          description: "The type that query operations will be rooted at.",
          type: new _definition.GraphQLNonNull(__Type),
          resolve: (schema) => schema.getQueryType()
        },
        mutationType: {
          description: "If this server supports mutation, the type that mutation operations will be rooted at.",
          type: __Type,
          resolve: (schema) => schema.getMutationType()
        },
        subscriptionType: {
          description: "If this server support subscription, the type that subscription operations will be rooted at.",
          type: __Type,
          resolve: (schema) => schema.getSubscriptionType()
        },
        directives: {
          description: "A list of all directives supported by this server.",
          type: new _definition.GraphQLNonNull(
            new _definition.GraphQLList(
              new _definition.GraphQLNonNull(__Directive)
            )
          ),
          resolve: (schema) => schema.getDirectives()
        }
      })
    });
    exports.__Schema = __Schema;
    var __Directive = new _definition.GraphQLObjectType({
      name: "__Directive",
      description: `A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.

In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.`,
      fields: () => ({
        name: {
          type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
          resolve: (directive) => directive.name
        },
        description: {
          type: _scalars.GraphQLString,
          resolve: (directive) => directive.description
        },
        isRepeatable: {
          type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
          resolve: (directive) => directive.isRepeatable
        },
        locations: {
          type: new _definition.GraphQLNonNull(
            new _definition.GraphQLList(
              new _definition.GraphQLNonNull(__DirectiveLocation)
            )
          ),
          resolve: (directive) => directive.locations
        },
        args: {
          type: new _definition.GraphQLNonNull(
            new _definition.GraphQLList(
              new _definition.GraphQLNonNull(__InputValue)
            )
          ),
          args: {
            includeDeprecated: {
              type: _scalars.GraphQLBoolean,
              defaultValue: !1
            }
          },
          resolve(field, { includeDeprecated }) {
            return includeDeprecated ? field.args : field.args.filter((arg) => arg.deprecationReason == null);
          }
        }
      })
    });
    exports.__Directive = __Directive;
    var __DirectiveLocation = new _definition.GraphQLEnumType({
      name: "__DirectiveLocation",
      description: "A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.",
      values: {
        QUERY: {
          value: _directiveLocation.DirectiveLocation.QUERY,
          description: "Location adjacent to a query operation."
        },
        MUTATION: {
          value: _directiveLocation.DirectiveLocation.MUTATION,
          description: "Location adjacent to a mutation operation."
        },
        SUBSCRIPTION: {
          value: _directiveLocation.DirectiveLocation.SUBSCRIPTION,
          description: "Location adjacent to a subscription operation."
        },
        FIELD: {
          value: _directiveLocation.DirectiveLocation.FIELD,
          description: "Location adjacent to a field."
        },
        FRAGMENT_DEFINITION: {
          value: _directiveLocation.DirectiveLocation.FRAGMENT_DEFINITION,
          description: "Location adjacent to a fragment definition."
        },
        FRAGMENT_SPREAD: {
          value: _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD,
          description: "Location adjacent to a fragment spread."
        },
        INLINE_FRAGMENT: {
          value: _directiveLocation.DirectiveLocation.INLINE_FRAGMENT,
          description: "Location adjacent to an inline fragment."
        },
        VARIABLE_DEFINITION: {
          value: _directiveLocation.DirectiveLocation.VARIABLE_DEFINITION,
          description: "Location adjacent to a variable definition."
        },
        SCHEMA: {
          value: _directiveLocation.DirectiveLocation.SCHEMA,
          description: "Location adjacent to a schema definition."
        },
        SCALAR: {
          value: _directiveLocation.DirectiveLocation.SCALAR,
          description: "Location adjacent to a scalar definition."
        },
        OBJECT: {
          value: _directiveLocation.DirectiveLocation.OBJECT,
          description: "Location adjacent to an object type definition."
        },
        FIELD_DEFINITION: {
          value: _directiveLocation.DirectiveLocation.FIELD_DEFINITION,
          description: "Location adjacent to a field definition."
        },
        ARGUMENT_DEFINITION: {
          value: _directiveLocation.DirectiveLocation.ARGUMENT_DEFINITION,
          description: "Location adjacent to an argument definition."
        },
        INTERFACE: {
          value: _directiveLocation.DirectiveLocation.INTERFACE,
          description: "Location adjacent to an interface definition."
        },
        UNION: {
          value: _directiveLocation.DirectiveLocation.UNION,
          description: "Location adjacent to a union definition."
        },
        ENUM: {
          value: _directiveLocation.DirectiveLocation.ENUM,
          description: "Location adjacent to an enum definition."
        },
        ENUM_VALUE: {
          value: _directiveLocation.DirectiveLocation.ENUM_VALUE,
          description: "Location adjacent to an enum value definition."
        },
        INPUT_OBJECT: {
          value: _directiveLocation.DirectiveLocation.INPUT_OBJECT,
          description: "Location adjacent to an input object type definition."
        },
        INPUT_FIELD_DEFINITION: {
          value: _directiveLocation.DirectiveLocation.INPUT_FIELD_DEFINITION,
          description: "Location adjacent to an input object field definition."
        }
      }
    });
    exports.__DirectiveLocation = __DirectiveLocation;
    var __Type = new _definition.GraphQLObjectType({
      name: "__Type",
      description: "The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",
      fields: () => ({
        kind: {
          type: new _definition.GraphQLNonNull(__TypeKind),
          resolve(type) {
            if ((0, _definition.isScalarType)(type))
              return TypeKind.SCALAR;
            if ((0, _definition.isObjectType)(type))
              return TypeKind.OBJECT;
            if ((0, _definition.isInterfaceType)(type))
              return TypeKind.INTERFACE;
            if ((0, _definition.isUnionType)(type))
              return TypeKind.UNION;
            if ((0, _definition.isEnumType)(type))
              return TypeKind.ENUM;
            if ((0, _definition.isInputObjectType)(type))
              return TypeKind.INPUT_OBJECT;
            if ((0, _definition.isListType)(type))
              return TypeKind.LIST;
            if ((0, _definition.isNonNullType)(type))
              return TypeKind.NON_NULL;
            (0, _invariant.invariant)(
              !1,
              `Unexpected type: "${(0, _inspect.inspect)(type)}".`
            );
          }
        },
        name: {
          type: _scalars.GraphQLString,
          resolve: (type) => "name" in type ? type.name : void 0
        },
        description: {
          type: _scalars.GraphQLString,
          resolve: (type) => (
            /* c8 ignore next */
            "description" in type ? type.description : void 0
          )
        },
        specifiedByURL: {
          type: _scalars.GraphQLString,
          resolve: (obj) => "specifiedByURL" in obj ? obj.specifiedByURL : void 0
        },
        fields: {
          type: new _definition.GraphQLList(
            new _definition.GraphQLNonNull(__Field)
          ),
          args: {
            includeDeprecated: {
              type: _scalars.GraphQLBoolean,
              defaultValue: !1
            }
          },
          resolve(type, { includeDeprecated }) {
            if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type)) {
              let fields = Object.values(type.getFields());
              return includeDeprecated ? fields : fields.filter((field) => field.deprecationReason == null);
            }
          }
        },
        interfaces: {
          type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__Type)),
          resolve(type) {
            if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type))
              return type.getInterfaces();
          }
        },
        possibleTypes: {
          type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__Type)),
          resolve(type, _args, _context, { schema }) {
            if ((0, _definition.isAbstractType)(type))
              return schema.getPossibleTypes(type);
          }
        },
        enumValues: {
          type: new _definition.GraphQLList(
            new _definition.GraphQLNonNull(__EnumValue)
          ),
          args: {
            includeDeprecated: {
              type: _scalars.GraphQLBoolean,
              defaultValue: !1
            }
          },
          resolve(type, { includeDeprecated }) {
            if ((0, _definition.isEnumType)(type)) {
              let values = type.getValues();
              return includeDeprecated ? values : values.filter((field) => field.deprecationReason == null);
            }
          }
        },
        inputFields: {
          type: new _definition.GraphQLList(
            new _definition.GraphQLNonNull(__InputValue)
          ),
          args: {
            includeDeprecated: {
              type: _scalars.GraphQLBoolean,
              defaultValue: !1
            }
          },
          resolve(type, { includeDeprecated }) {
            if ((0, _definition.isInputObjectType)(type)) {
              let values = Object.values(type.getFields());
              return includeDeprecated ? values : values.filter((field) => field.deprecationReason == null);
            }
          }
        },
        ofType: {
          type: __Type,
          resolve: (type) => "ofType" in type ? type.ofType : void 0
        },
        isOneOf: {
          type: _scalars.GraphQLBoolean,
          resolve: (type) => {
            if ((0, _definition.isInputObjectType)(type))
              return type.isOneOf;
          }
        }
      })
    });
    exports.__Type = __Type;
    var __Field = new _definition.GraphQLObjectType({
      name: "__Field",
      description: "Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",
      fields: () => ({
        name: {
          type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
          resolve: (field) => field.name
        },
        description: {
          type: _scalars.GraphQLString,
          resolve: (field) => field.description
        },
        args: {
          type: new _definition.GraphQLNonNull(
            new _definition.GraphQLList(
              new _definition.GraphQLNonNull(__InputValue)
            )
          ),
          args: {
            includeDeprecated: {
              type: _scalars.GraphQLBoolean,
              defaultValue: !1
            }
          },
          resolve(field, { includeDeprecated }) {
            return includeDeprecated ? field.args : field.args.filter((arg) => arg.deprecationReason == null);
          }
        },
        type: {
          type: new _definition.GraphQLNonNull(__Type),
          resolve: (field) => field.type
        },
        isDeprecated: {
          type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
          resolve: (field) => field.deprecationReason != null
        },
        deprecationReason: {
          type: _scalars.GraphQLString,
          resolve: (field) => field.deprecationReason
        }
      })
    });
    exports.__Field = __Field;
    var __InputValue = new _definition.GraphQLObjectType({
      name: "__InputValue",
      description: "Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",
      fields: () => ({
        name: {
          type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
          resolve: (inputValue) => inputValue.name
        },
        description: {
          type: _scalars.GraphQLString,
          resolve: (inputValue) => inputValue.description
        },
        type: {
          type: new _definition.GraphQLNonNull(__Type),
          resolve: (inputValue) => inputValue.type
        },
        defaultValue: {
          type: _scalars.GraphQLString,
          description: "A GraphQL-formatted string representing the default value for this input value.",
          resolve(inputValue) {
            let { type, defaultValue } = inputValue, valueAST = (0, _astFromValue.astFromValue)(defaultValue, type);
            return valueAST ? (0, _printer.print)(valueAST) : null;
          }
        },
        isDeprecated: {
          type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
          resolve: (field) => field.deprecationReason != null
        },
        deprecationReason: {
          type: _scalars.GraphQLString,
          resolve: (obj) => obj.deprecationReason
        }
      })
    });
    exports.__InputValue = __InputValue;
    var __EnumValue = new _definition.GraphQLObjectType({
      name: "__EnumValue",
      description: "One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.",
      fields: () => ({
        name: {
          type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
          resolve: (enumValue) => enumValue.name
        },
        description: {
          type: _scalars.GraphQLString,
          resolve: (enumValue) => enumValue.description
        },
        isDeprecated: {
          type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
          resolve: (enumValue) => enumValue.deprecationReason != null
        },
        deprecationReason: {
          type: _scalars.GraphQLString,
          resolve: (enumValue) => enumValue.deprecationReason
        }
      })
    });
    exports.__EnumValue = __EnumValue;
    var TypeKind;
    exports.TypeKind = TypeKind;
    (function(TypeKind2) {
      TypeKind2.SCALAR = "SCALAR", TypeKind2.OBJECT = "OBJECT", TypeKind2.INTERFACE = "INTERFACE", TypeKind2.UNION = "UNION", TypeKind2.ENUM = "ENUM", TypeKind2.INPUT_OBJECT = "INPUT_OBJECT", TypeKind2.LIST = "LIST", TypeKind2.NON_NULL = "NON_NULL";
    })(TypeKind || (exports.TypeKind = TypeKind = {}));
    var __TypeKind = new _definition.GraphQLEnumType({
      name: "__TypeKind",
      description: "An enum describing what kind of type a given `__Type` is.",
      values: {
        SCALAR: {
          value: TypeKind.SCALAR,
          description: "Indicates this type is a scalar."
        },
        OBJECT: {
          value: TypeKind.OBJECT,
          description: "Indicates this type is an object. `fields` and `interfaces` are valid fields."
        },
        INTERFACE: {
          value: TypeKind.INTERFACE,
          description: "Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields."
        },
        UNION: {
          value: TypeKind.UNION,
          description: "Indicates this type is a union. `possibleTypes` is a valid field."
        },
        ENUM: {
          value: TypeKind.ENUM,
          description: "Indicates this type is an enum. `enumValues` is a valid field."
        },
        INPUT_OBJECT: {
          value: TypeKind.INPUT_OBJECT,
          description: "Indicates this type is an input object. `inputFields` is a valid field."
        },
        LIST: {
          value: TypeKind.LIST,
          description: "Indicates this type is a list. `ofType` is a valid field."
        },
        NON_NULL: {
          value: TypeKind.NON_NULL,
          description: "Indicates this type is a non-null. `ofType` is a valid field."
        }
      }
    });
    exports.__TypeKind = __TypeKind;
    var SchemaMetaFieldDef = {
      name: "__schema",
      type: new _definition.GraphQLNonNull(__Schema),
      description: "Access the current type schema of this server.",
      args: [],
      resolve: (_source, _args, _context, { schema }) => schema,
      deprecationReason: void 0,
      extensions: /* @__PURE__ */ Object.create(null),
      astNode: void 0
    };
    exports.SchemaMetaFieldDef = SchemaMetaFieldDef;
    var TypeMetaFieldDef = {
      name: "__type",
      type: __Type,
      description: "Request the type information of a single type.",
      args: [
        {
          name: "name",
          description: void 0,
          type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
          defaultValue: void 0,
          deprecationReason: void 0,
          extensions: /* @__PURE__ */ Object.create(null),
          astNode: void 0
        }
      ],
      resolve: (_source, { name }, _context, { schema }) => schema.getType(name),
      deprecationReason: void 0,
      extensions: /* @__PURE__ */ Object.create(null),
      astNode: void 0
    };
    exports.TypeMetaFieldDef = TypeMetaFieldDef;
    var TypeNameMetaFieldDef = {
      name: "__typename",
      type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
      description: "The name of the current Object type at runtime.",
      args: [],
      resolve: (_source, _args, _context, { parentType }) => parentType.name,
      deprecationReason: void 0,
      extensions: /* @__PURE__ */ Object.create(null),
      astNode: void 0
    };
    exports.TypeNameMetaFieldDef = TypeNameMetaFieldDef;
    var introspectionTypes = Object.freeze([
      __Schema,
      __Directive,
      __DirectiveLocation,
      __Type,
      __Field,
      __InputValue,
      __EnumValue,
      __TypeKind
    ]);
    exports.introspectionTypes = introspectionTypes;
    function isIntrospectionType(type) {
      return introspectionTypes.some(({ name }) => type.name === name);
    }
  }
});

// node_modules/graphql/type/schema.js
var require_schema = __commonJS({
  "node_modules/graphql/type/schema.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.GraphQLSchema = void 0;
    exports.assertSchema = assertSchema;
    exports.isSchema = isSchema;
    var _devAssert = require_devAssert(), _inspect = require_inspect(), _instanceOf = require_instanceOf(), _isObjectLike = require_isObjectLike(), _toObjMap = require_toObjMap(), _ast = require_ast(), _definition = require_definition(), _directives = require_directives(), _introspection = require_introspection();
    function isSchema(schema) {
      return (0, _instanceOf.instanceOf)(schema, GraphQLSchema);
    }
    function assertSchema(schema) {
      if (!isSchema(schema))
        throw new Error(
          `Expected ${(0, _inspect.inspect)(schema)} to be a GraphQL schema.`
        );
      return schema;
    }
    var GraphQLSchema = class {
      // Used as a cache for validateSchema().
      constructor(config) {
        var _config$extensionASTN, _config$directives;
        this.__validationErrors = config.assumeValid === !0 ? [] : void 0, (0, _isObjectLike.isObjectLike)(config) || (0, _devAssert.devAssert)(!1, "Must provide configuration object."), !config.types || Array.isArray(config.types) || (0, _devAssert.devAssert)(
          !1,
          `"types" must be Array if provided but got: ${(0, _inspect.inspect)(
            config.types
          )}.`
        ), !config.directives || Array.isArray(config.directives) || (0, _devAssert.devAssert)(
          !1,
          `"directives" must be Array if provided but got: ${(0, _inspect.inspect)(config.directives)}.`
        ), this.description = config.description, this.extensions = (0, _toObjMap.toObjMap)(config.extensions), this.astNode = config.astNode, this.extensionASTNodes = (_config$extensionASTN = config.extensionASTNodes) !== null && _config$extensionASTN !== void 0 ? _config$extensionASTN : [], this._queryType = config.query, this._mutationType = config.mutation, this._subscriptionType = config.subscription, this._directives = (_config$directives = config.directives) !== null && _config$directives !== void 0 ? _config$directives : _directives.specifiedDirectives;
        let allReferencedTypes = new Set(config.types);
        if (config.types != null)
          for (let type of config.types)
            allReferencedTypes.delete(type), collectReferencedTypes(type, allReferencedTypes);
        this._queryType != null && collectReferencedTypes(this._queryType, allReferencedTypes), this._mutationType != null && collectReferencedTypes(this._mutationType, allReferencedTypes), this._subscriptionType != null && collectReferencedTypes(this._subscriptionType, allReferencedTypes);
        for (let directive of this._directives)
          if ((0, _directives.isDirective)(directive))
            for (let arg of directive.args)
              collectReferencedTypes(arg.type, allReferencedTypes);
        collectReferencedTypes(_introspection.__Schema, allReferencedTypes), this._typeMap = /* @__PURE__ */ Object.create(null), this._subTypeMap = /* @__PURE__ */ Object.create(null), this._implementationsMap = /* @__PURE__ */ Object.create(null);
        for (let namedType of allReferencedTypes) {
          if (namedType == null)
            continue;
          let typeName = namedType.name;
          if (typeName || (0, _devAssert.devAssert)(
            !1,
            "One of the provided types for building the Schema is missing a name."
          ), this._typeMap[typeName] !== void 0)
            throw new Error(
              `Schema must contain uniquely named types but contains multiple types named "${typeName}".`
            );
          if (this._typeMap[typeName] = namedType, (0, _definition.isInterfaceType)(namedType)) {
            for (let iface of namedType.getInterfaces())
              if ((0, _definition.isInterfaceType)(iface)) {
                let implementations = this._implementationsMap[iface.name];
                implementations === void 0 && (implementations = this._implementationsMap[iface.name] = {
                  objects: [],
                  interfaces: []
                }), implementations.interfaces.push(namedType);
              }
          } else if ((0, _definition.isObjectType)(namedType)) {
            for (let iface of namedType.getInterfaces())
              if ((0, _definition.isInterfaceType)(iface)) {
                let implementations = this._implementationsMap[iface.name];
                implementations === void 0 && (implementations = this._implementationsMap[iface.name] = {
                  objects: [],
                  interfaces: []
                }), implementations.objects.push(namedType);
              }
          }
        }
      }
      get [Symbol.toStringTag]() {
        return "GraphQLSchema";
      }
      getQueryType() {
        return this._queryType;
      }
      getMutationType() {
        return this._mutationType;
      }
      getSubscriptionType() {
        return this._subscriptionType;
      }
      getRootType(operation) {
        switch (operation) {
          case _ast.OperationTypeNode.QUERY:
            return this.getQueryType();
          case _ast.OperationTypeNode.MUTATION:
            return this.getMutationType();
          case _ast.OperationTypeNode.SUBSCRIPTION:
            return this.getSubscriptionType();
        }
      }
      getTypeMap() {
        return this._typeMap;
      }
      getType(name) {
        return this.getTypeMap()[name];
      }
      getPossibleTypes(abstractType) {
        return (0, _definition.isUnionType)(abstractType) ? abstractType.getTypes() : this.getImplementations(abstractType).objects;
      }
      getImplementations(interfaceType) {
        let implementations = this._implementationsMap[interfaceType.name];
        return implementations ?? {
          objects: [],
          interfaces: []
        };
      }
      isSubType(abstractType, maybeSubType) {
        let map = this._subTypeMap[abstractType.name];
        if (map === void 0) {
          if (map = /* @__PURE__ */ Object.create(null), (0, _definition.isUnionType)(abstractType))
            for (let type of abstractType.getTypes())
              map[type.name] = !0;
          else {
            let implementations = this.getImplementations(abstractType);
            for (let type of implementations.objects)
              map[type.name] = !0;
            for (let type of implementations.interfaces)
              map[type.name] = !0;
          }
          this._subTypeMap[abstractType.name] = map;
        }
        return map[maybeSubType.name] !== void 0;
      }
      getDirectives() {
        return this._directives;
      }
      getDirective(name) {
        return this.getDirectives().find((directive) => directive.name === name);
      }
      toConfig() {
        return {
          description: this.description,
          query: this.getQueryType(),
          mutation: this.getMutationType(),
          subscription: this.getSubscriptionType(),
          types: Object.values(this.getTypeMap()),
          directives: this.getDirectives(),
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: this.extensionASTNodes,
          assumeValid: this.__validationErrors !== void 0
        };
      }
    };
    exports.GraphQLSchema = GraphQLSchema;
    function collectReferencedTypes(type, typeSet) {
      let namedType = (0, _definition.getNamedType)(type);
      if (!typeSet.has(namedType)) {
        if (typeSet.add(namedType), (0, _definition.isUnionType)(namedType))
          for (let memberType of namedType.getTypes())
            collectReferencedTypes(memberType, typeSet);
        else if ((0, _definition.isObjectType)(namedType) || (0, _definition.isInterfaceType)(namedType)) {
          for (let interfaceType of namedType.getInterfaces())
            collectReferencedTypes(interfaceType, typeSet);
          for (let field of Object.values(namedType.getFields())) {
            collectReferencedTypes(field.type, typeSet);
            for (let arg of field.args)
              collectReferencedTypes(arg.type, typeSet);
          }
        } else if ((0, _definition.isInputObjectType)(namedType))
          for (let field of Object.values(namedType.getFields()))
            collectReferencedTypes(field.type, typeSet);
      }
      return typeSet;
    }
  }
});

// node_modules/graphql/type/validate.js
var require_validate = __commonJS({
  "node_modules/graphql/type/validate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.assertValidSchema = assertValidSchema;
    exports.validateSchema = validateSchema;
    var _inspect = require_inspect(), _GraphQLError = require_GraphQLError(), _ast = require_ast(), _typeComparators = require_typeComparators(), _definition = require_definition(), _directives = require_directives(), _introspection = require_introspection(), _schema = require_schema();
    function validateSchema(schema) {
      if ((0, _schema.assertSchema)(schema), schema.__validationErrors)
        return schema.__validationErrors;
      let context = new SchemaValidationContext(schema);
      validateRootTypes(context), validateDirectives(context), validateTypes(context);
      let errors = context.getErrors();
      return schema.__validationErrors = errors, errors;
    }
    function assertValidSchema(schema) {
      let errors = validateSchema(schema);
      if (errors.length !== 0)
        throw new Error(errors.map((error) => error.message).join(`

`));
    }
    var SchemaValidationContext = class {
      constructor(schema) {
        this._errors = [], this.schema = schema;
      }
      reportError(message, nodes) {
        let _nodes = Array.isArray(nodes) ? nodes.filter(Boolean) : nodes;
        this._errors.push(
          new _GraphQLError.GraphQLError(message, {
            nodes: _nodes
          })
        );
      }
      getErrors() {
        return this._errors;
      }
    };
    function validateRootTypes(context) {
      let schema = context.schema, queryType = schema.getQueryType();
      if (!queryType)
        context.reportError("Query root type must be provided.", schema.astNode);
      else if (!(0, _definition.isObjectType)(queryType)) {
        var _getOperationTypeNode;
        context.reportError(
          `Query root type must be Object type, it cannot be ${(0, _inspect.inspect)(queryType)}.`,
          (_getOperationTypeNode = getOperationTypeNode(
            schema,
            _ast.OperationTypeNode.QUERY
          )) !== null && _getOperationTypeNode !== void 0 ? _getOperationTypeNode : queryType.astNode
        );
      }
      let mutationType = schema.getMutationType();
      if (mutationType && !(0, _definition.isObjectType)(mutationType)) {
        var _getOperationTypeNode2;
        context.reportError(
          `Mutation root type must be Object type if provided, it cannot be ${(0, _inspect.inspect)(mutationType)}.`,
          (_getOperationTypeNode2 = getOperationTypeNode(
            schema,
            _ast.OperationTypeNode.MUTATION
          )) !== null && _getOperationTypeNode2 !== void 0 ? _getOperationTypeNode2 : mutationType.astNode
        );
      }
      let subscriptionType = schema.getSubscriptionType();
      if (subscriptionType && !(0, _definition.isObjectType)(subscriptionType)) {
        var _getOperationTypeNode3;
        context.reportError(
          `Subscription root type must be Object type if provided, it cannot be ${(0, _inspect.inspect)(subscriptionType)}.`,
          (_getOperationTypeNode3 = getOperationTypeNode(
            schema,
            _ast.OperationTypeNode.SUBSCRIPTION
          )) !== null && _getOperationTypeNode3 !== void 0 ? _getOperationTypeNode3 : subscriptionType.astNode
        );
      }
    }
    function getOperationTypeNode(schema, operation) {
      var _flatMap$find;
      return (_flatMap$find = [schema.astNode, ...schema.extensionASTNodes].flatMap(
        // FIXME: https://github.com/graphql/graphql-js/issues/2203
        (schemaNode) => {
          var _schemaNode$operation;
          return (
            /* c8 ignore next */
            (_schemaNode$operation = schemaNode?.operationTypes) !== null && _schemaNode$operation !== void 0 ? _schemaNode$operation : []
          );
        }
      ).find((operationNode) => operationNode.operation === operation)) === null || _flatMap$find === void 0 ? void 0 : _flatMap$find.type;
    }
    function validateDirectives(context) {
      for (let directive of context.schema.getDirectives()) {
        if (!(0, _directives.isDirective)(directive)) {
          context.reportError(
            `Expected directive but got: ${(0, _inspect.inspect)(directive)}.`,
            directive?.astNode
          );
          continue;
        }
        validateName(context, directive), directive.locations.length === 0 && context.reportError(
          `Directive @${directive.name} must include 1 or more locations.`,
          directive.astNode
        );
        for (let arg of directive.args)
          if (validateName(context, arg), (0, _definition.isInputType)(arg.type) || context.reportError(
            `The type of @${directive.name}(${arg.name}:) must be Input Type but got: ${(0, _inspect.inspect)(arg.type)}.`,
            arg.astNode
          ), (0, _definition.isRequiredArgument)(arg) && arg.deprecationReason != null) {
            var _arg$astNode;
            context.reportError(
              `Required argument @${directive.name}(${arg.name}:) cannot be deprecated.`,
              [
                getDeprecatedDirectiveNode(arg.astNode),
                (_arg$astNode = arg.astNode) === null || _arg$astNode === void 0 ? void 0 : _arg$astNode.type
              ]
            );
          }
      }
    }
    function validateName(context, node) {
      node.name.startsWith("__") && context.reportError(
        `Name "${node.name}" must not begin with "__", which is reserved by GraphQL introspection.`,
        node.astNode
      );
    }
    function validateTypes(context) {
      let validateInputObjectCircularRefs = createInputObjectCircularRefsValidator(context), typeMap = context.schema.getTypeMap();
      for (let type of Object.values(typeMap)) {
        if (!(0, _definition.isNamedType)(type)) {
          context.reportError(
            `Expected GraphQL named type but got: ${(0, _inspect.inspect)(type)}.`,
            type.astNode
          );
          continue;
        }
        (0, _introspection.isIntrospectionType)(type) || validateName(context, type), (0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type) ? (validateFields(context, type), validateInterfaces(context, type)) : (0, _definition.isUnionType)(type) ? validateUnionMembers(context, type) : (0, _definition.isEnumType)(type) ? validateEnumValues(context, type) : (0, _definition.isInputObjectType)(type) && (validateInputFields(context, type), validateInputObjectCircularRefs(type));
      }
    }
    function validateFields(context, type) {
      let fields = Object.values(type.getFields());
      fields.length === 0 && context.reportError(`Type ${type.name} must define one or more fields.`, [
        type.astNode,
        ...type.extensionASTNodes
      ]);
      for (let field of fields) {
        if (validateName(context, field), !(0, _definition.isOutputType)(field.type)) {
          var _field$astNode;
          context.reportError(
            `The type of ${type.name}.${field.name} must be Output Type but got: ${(0, _inspect.inspect)(field.type)}.`,
            (_field$astNode = field.astNode) === null || _field$astNode === void 0 ? void 0 : _field$astNode.type
          );
        }
        for (let arg of field.args) {
          let argName = arg.name;
          if (validateName(context, arg), !(0, _definition.isInputType)(arg.type)) {
            var _arg$astNode2;
            context.reportError(
              `The type of ${type.name}.${field.name}(${argName}:) must be Input Type but got: ${(0, _inspect.inspect)(arg.type)}.`,
              (_arg$astNode2 = arg.astNode) === null || _arg$astNode2 === void 0 ? void 0 : _arg$astNode2.type
            );
          }
          if ((0, _definition.isRequiredArgument)(arg) && arg.deprecationReason != null) {
            var _arg$astNode3;
            context.reportError(
              `Required argument ${type.name}.${field.name}(${argName}:) cannot be deprecated.`,
              [
                getDeprecatedDirectiveNode(arg.astNode),
                (_arg$astNode3 = arg.astNode) === null || _arg$astNode3 === void 0 ? void 0 : _arg$astNode3.type
              ]
            );
          }
        }
      }
    }
    function validateInterfaces(context, type) {
      let ifaceTypeNames = /* @__PURE__ */ Object.create(null);
      for (let iface of type.getInterfaces()) {
        if (!(0, _definition.isInterfaceType)(iface)) {
          context.reportError(
            `Type ${(0, _inspect.inspect)(
              type
            )} must only implement Interface types, it cannot implement ${(0, _inspect.inspect)(iface)}.`,
            getAllImplementsInterfaceNodes(type, iface)
          );
          continue;
        }
        if (type === iface) {
          context.reportError(
            `Type ${type.name} cannot implement itself because it would create a circular reference.`,
            getAllImplementsInterfaceNodes(type, iface)
          );
          continue;
        }
        if (ifaceTypeNames[iface.name]) {
          context.reportError(
            `Type ${type.name} can only implement ${iface.name} once.`,
            getAllImplementsInterfaceNodes(type, iface)
          );
          continue;
        }
        ifaceTypeNames[iface.name] = !0, validateTypeImplementsAncestors(context, type, iface), validateTypeImplementsInterface(context, type, iface);
      }
    }
    function validateTypeImplementsInterface(context, type, iface) {
      let typeFieldMap = type.getFields();
      for (let ifaceField of Object.values(iface.getFields())) {
        let fieldName = ifaceField.name, typeField = typeFieldMap[fieldName];
        if (!typeField) {
          context.reportError(
            `Interface field ${iface.name}.${fieldName} expected but ${type.name} does not provide it.`,
            [ifaceField.astNode, type.astNode, ...type.extensionASTNodes]
          );
          continue;
        }
        if (!(0, _typeComparators.isTypeSubTypeOf)(
          context.schema,
          typeField.type,
          ifaceField.type
        )) {
          var _ifaceField$astNode, _typeField$astNode;
          context.reportError(
            `Interface field ${iface.name}.${fieldName} expects type ${(0, _inspect.inspect)(ifaceField.type)} but ${type.name}.${fieldName} is type ${(0, _inspect.inspect)(typeField.type)}.`,
            [
              (_ifaceField$astNode = ifaceField.astNode) === null || _ifaceField$astNode === void 0 ? void 0 : _ifaceField$astNode.type,
              (_typeField$astNode = typeField.astNode) === null || _typeField$astNode === void 0 ? void 0 : _typeField$astNode.type
            ]
          );
        }
        for (let ifaceArg of ifaceField.args) {
          let argName = ifaceArg.name, typeArg = typeField.args.find((arg) => arg.name === argName);
          if (!typeArg) {
            context.reportError(
              `Interface field argument ${iface.name}.${fieldName}(${argName}:) expected but ${type.name}.${fieldName} does not provide it.`,
              [ifaceArg.astNode, typeField.astNode]
            );
            continue;
          }
          if (!(0, _typeComparators.isEqualType)(ifaceArg.type, typeArg.type)) {
            var _ifaceArg$astNode, _typeArg$astNode;
            context.reportError(
              `Interface field argument ${iface.name}.${fieldName}(${argName}:) expects type ${(0, _inspect.inspect)(ifaceArg.type)} but ${type.name}.${fieldName}(${argName}:) is type ${(0, _inspect.inspect)(typeArg.type)}.`,
              [
                (_ifaceArg$astNode = ifaceArg.astNode) === null || _ifaceArg$astNode === void 0 ? void 0 : _ifaceArg$astNode.type,
                (_typeArg$astNode = typeArg.astNode) === null || _typeArg$astNode === void 0 ? void 0 : _typeArg$astNode.type
              ]
            );
          }
        }
        for (let typeArg of typeField.args) {
          let argName = typeArg.name;
          !ifaceField.args.find((arg) => arg.name === argName) && (0, _definition.isRequiredArgument)(typeArg) && context.reportError(
            `Object field ${type.name}.${fieldName} includes required argument ${argName} that is missing from the Interface field ${iface.name}.${fieldName}.`,
            [typeArg.astNode, ifaceField.astNode]
          );
        }
      }
    }
    function validateTypeImplementsAncestors(context, type, iface) {
      let ifaceInterfaces = type.getInterfaces();
      for (let transitive of iface.getInterfaces())
        ifaceInterfaces.includes(transitive) || context.reportError(
          transitive === type ? `Type ${type.name} cannot implement ${iface.name} because it would create a circular reference.` : `Type ${type.name} must implement ${transitive.name} because it is implemented by ${iface.name}.`,
          [
            ...getAllImplementsInterfaceNodes(iface, transitive),
            ...getAllImplementsInterfaceNodes(type, iface)
          ]
        );
    }
    function validateUnionMembers(context, union) {
      let memberTypes = union.getTypes();
      memberTypes.length === 0 && context.reportError(
        `Union type ${union.name} must define one or more member types.`,
        [union.astNode, ...union.extensionASTNodes]
      );
      let includedTypeNames = /* @__PURE__ */ Object.create(null);
      for (let memberType of memberTypes) {
        if (includedTypeNames[memberType.name]) {
          context.reportError(
            `Union type ${union.name} can only include type ${memberType.name} once.`,
            getUnionMemberTypeNodes(union, memberType.name)
          );
          continue;
        }
        includedTypeNames[memberType.name] = !0, (0, _definition.isObjectType)(memberType) || context.reportError(
          `Union type ${union.name} can only include Object types, it cannot include ${(0, _inspect.inspect)(memberType)}.`,
          getUnionMemberTypeNodes(union, String(memberType))
        );
      }
    }
    function validateEnumValues(context, enumType) {
      let enumValues = enumType.getValues();
      enumValues.length === 0 && context.reportError(
        `Enum type ${enumType.name} must define one or more values.`,
        [enumType.astNode, ...enumType.extensionASTNodes]
      );
      for (let enumValue of enumValues)
        validateName(context, enumValue);
    }
    function validateInputFields(context, inputObj) {
      let fields = Object.values(inputObj.getFields());
      fields.length === 0 && context.reportError(
        `Input Object type ${inputObj.name} must define one or more fields.`,
        [inputObj.astNode, ...inputObj.extensionASTNodes]
      );
      for (let field of fields) {
        if (validateName(context, field), !(0, _definition.isInputType)(field.type)) {
          var _field$astNode2;
          context.reportError(
            `The type of ${inputObj.name}.${field.name} must be Input Type but got: ${(0, _inspect.inspect)(field.type)}.`,
            (_field$astNode2 = field.astNode) === null || _field$astNode2 === void 0 ? void 0 : _field$astNode2.type
          );
        }
        if ((0, _definition.isRequiredInputField)(field) && field.deprecationReason != null) {
          var _field$astNode3;
          context.reportError(
            `Required input field ${inputObj.name}.${field.name} cannot be deprecated.`,
            [
              getDeprecatedDirectiveNode(field.astNode),
              (_field$astNode3 = field.astNode) === null || _field$astNode3 === void 0 ? void 0 : _field$astNode3.type
            ]
          );
        }
        inputObj.isOneOf && validateOneOfInputObjectField(inputObj, field, context);
      }
    }
    function validateOneOfInputObjectField(type, field, context) {
      if ((0, _definition.isNonNullType)(field.type)) {
        var _field$astNode4;
        context.reportError(
          `OneOf input field ${type.name}.${field.name} must be nullable.`,
          (_field$astNode4 = field.astNode) === null || _field$astNode4 === void 0 ? void 0 : _field$astNode4.type
        );
      }
      field.defaultValue !== void 0 && context.reportError(
        `OneOf input field ${type.name}.${field.name} cannot have a default value.`,
        field.astNode
      );
    }
    function createInputObjectCircularRefsValidator(context) {
      let visitedTypes = /* @__PURE__ */ Object.create(null), fieldPath = [], fieldPathIndexByTypeName = /* @__PURE__ */ Object.create(null);
      return detectCycleRecursive;
      function detectCycleRecursive(inputObj) {
        if (visitedTypes[inputObj.name])
          return;
        visitedTypes[inputObj.name] = !0, fieldPathIndexByTypeName[inputObj.name] = fieldPath.length;
        let fields = Object.values(inputObj.getFields());
        for (let field of fields)
          if ((0, _definition.isNonNullType)(field.type) && (0, _definition.isInputObjectType)(field.type.ofType)) {
            let fieldType = field.type.ofType, cycleIndex = fieldPathIndexByTypeName[fieldType.name];
            if (fieldPath.push(field), cycleIndex === void 0)
              detectCycleRecursive(fieldType);
            else {
              let cyclePath = fieldPath.slice(cycleIndex), pathStr = cyclePath.map((fieldObj) => fieldObj.name).join(".");
              context.reportError(
                `Cannot reference Input Object "${fieldType.name}" within itself through a series of non-null fields: "${pathStr}".`,
                cyclePath.map((fieldObj) => fieldObj.astNode)
              );
            }
            fieldPath.pop();
          }
        fieldPathIndexByTypeName[inputObj.name] = void 0;
      }
    }
    function getAllImplementsInterfaceNodes(type, iface) {
      let { astNode, extensionASTNodes } = type;
      return (astNode != null ? [astNode, ...extensionASTNodes] : extensionASTNodes).flatMap((typeNode) => {
        var _typeNode$interfaces;
        return (
          /* c8 ignore next */
          (_typeNode$interfaces = typeNode.interfaces) !== null && _typeNode$interfaces !== void 0 ? _typeNode$interfaces : []
        );
      }).filter((ifaceNode) => ifaceNode.name.value === iface.name);
    }
    function getUnionMemberTypeNodes(union, typeName) {
      let { astNode, extensionASTNodes } = union;
      return (astNode != null ? [astNode, ...extensionASTNodes] : extensionASTNodes).flatMap((unionNode) => {
        var _unionNode$types;
        return (
          /* c8 ignore next */
          (_unionNode$types = unionNode.types) !== null && _unionNode$types !== void 0 ? _unionNode$types : []
        );
      }).filter((typeNode) => typeNode.name.value === typeName);
    }
    function getDeprecatedDirectiveNode(definitionNode) {
      var _definitionNode$direc;
      return definitionNode == null || (_definitionNode$direc = definitionNode.directives) === null || _definitionNode$direc === void 0 ? void 0 : _definitionNode$direc.find(
        (node) => node.name.value === _directives.GraphQLDeprecatedDirective.name
      );
    }
  }
});

// node_modules/graphql/utilities/typeFromAST.js
var require_typeFromAST = __commonJS({
  "node_modules/graphql/utilities/typeFromAST.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.typeFromAST = typeFromAST;
    var _kinds = require_kinds(), _definition = require_definition();
    function typeFromAST(schema, typeNode) {
      switch (typeNode.kind) {
        case _kinds.Kind.LIST_TYPE: {
          let innerType = typeFromAST(schema, typeNode.type);
          return innerType && new _definition.GraphQLList(innerType);
        }
        case _kinds.Kind.NON_NULL_TYPE: {
          let innerType = typeFromAST(schema, typeNode.type);
          return innerType && new _definition.GraphQLNonNull(innerType);
        }
        case _kinds.Kind.NAMED_TYPE:
          return schema.getType(typeNode.name.value);
      }
    }
  }
});

// node_modules/graphql/utilities/TypeInfo.js
var require_TypeInfo = __commonJS({
  "node_modules/graphql/utilities/TypeInfo.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.TypeInfo = void 0;
    exports.visitWithTypeInfo = visitWithTypeInfo;
    var _ast = require_ast(), _kinds = require_kinds(), _visitor = require_visitor(), _definition = require_definition(), _introspection = require_introspection(), _typeFromAST = require_typeFromAST(), TypeInfo = class {
      constructor(schema, initialType, getFieldDefFn) {
        this._schema = schema, this._typeStack = [], this._parentTypeStack = [], this._inputTypeStack = [], this._fieldDefStack = [], this._defaultValueStack = [], this._directive = null, this._argument = null, this._enumValue = null, this._getFieldDef = getFieldDefFn ?? getFieldDef, initialType && ((0, _definition.isInputType)(initialType) && this._inputTypeStack.push(initialType), (0, _definition.isCompositeType)(initialType) && this._parentTypeStack.push(initialType), (0, _definition.isOutputType)(initialType) && this._typeStack.push(initialType));
      }
      get [Symbol.toStringTag]() {
        return "TypeInfo";
      }
      getType() {
        if (this._typeStack.length > 0)
          return this._typeStack[this._typeStack.length - 1];
      }
      getParentType() {
        if (this._parentTypeStack.length > 0)
          return this._parentTypeStack[this._parentTypeStack.length - 1];
      }
      getInputType() {
        if (this._inputTypeStack.length > 0)
          return this._inputTypeStack[this._inputTypeStack.length - 1];
      }
      getParentInputType() {
        if (this._inputTypeStack.length > 1)
          return this._inputTypeStack[this._inputTypeStack.length - 2];
      }
      getFieldDef() {
        if (this._fieldDefStack.length > 0)
          return this._fieldDefStack[this._fieldDefStack.length - 1];
      }
      getDefaultValue() {
        if (this._defaultValueStack.length > 0)
          return this._defaultValueStack[this._defaultValueStack.length - 1];
      }
      getDirective() {
        return this._directive;
      }
      getArgument() {
        return this._argument;
      }
      getEnumValue() {
        return this._enumValue;
      }
      enter(node) {
        let schema = this._schema;
        switch (node.kind) {
          case _kinds.Kind.SELECTION_SET: {
            let namedType = (0, _definition.getNamedType)(this.getType());
            this._parentTypeStack.push(
              (0, _definition.isCompositeType)(namedType) ? namedType : void 0
            );
            break;
          }
          case _kinds.Kind.FIELD: {
            let parentType = this.getParentType(), fieldDef, fieldType;
            parentType && (fieldDef = this._getFieldDef(schema, parentType, node), fieldDef && (fieldType = fieldDef.type)), this._fieldDefStack.push(fieldDef), this._typeStack.push(
              (0, _definition.isOutputType)(fieldType) ? fieldType : void 0
            );
            break;
          }
          case _kinds.Kind.DIRECTIVE:
            this._directive = schema.getDirective(node.name.value);
            break;
          case _kinds.Kind.OPERATION_DEFINITION: {
            let rootType = schema.getRootType(node.operation);
            this._typeStack.push(
              (0, _definition.isObjectType)(rootType) ? rootType : void 0
            );
            break;
          }
          case _kinds.Kind.INLINE_FRAGMENT:
          case _kinds.Kind.FRAGMENT_DEFINITION: {
            let typeConditionAST = node.typeCondition, outputType = typeConditionAST ? (0, _typeFromAST.typeFromAST)(schema, typeConditionAST) : (0, _definition.getNamedType)(this.getType());
            this._typeStack.push(
              (0, _definition.isOutputType)(outputType) ? outputType : void 0
            );
            break;
          }
          case _kinds.Kind.VARIABLE_DEFINITION: {
            let inputType = (0, _typeFromAST.typeFromAST)(schema, node.type);
            this._inputTypeStack.push(
              (0, _definition.isInputType)(inputType) ? inputType : void 0
            );
            break;
          }
          case _kinds.Kind.ARGUMENT: {
            var _this$getDirective;
            let argDef, argType, fieldOrDirective = (_this$getDirective = this.getDirective()) !== null && _this$getDirective !== void 0 ? _this$getDirective : this.getFieldDef();
            fieldOrDirective && (argDef = fieldOrDirective.args.find(
              (arg) => arg.name === node.name.value
            ), argDef && (argType = argDef.type)), this._argument = argDef, this._defaultValueStack.push(argDef ? argDef.defaultValue : void 0), this._inputTypeStack.push(
              (0, _definition.isInputType)(argType) ? argType : void 0
            );
            break;
          }
          case _kinds.Kind.LIST: {
            let listType = (0, _definition.getNullableType)(this.getInputType()), itemType = (0, _definition.isListType)(listType) ? listType.ofType : listType;
            this._defaultValueStack.push(void 0), this._inputTypeStack.push(
              (0, _definition.isInputType)(itemType) ? itemType : void 0
            );
            break;
          }
          case _kinds.Kind.OBJECT_FIELD: {
            let objectType = (0, _definition.getNamedType)(this.getInputType()), inputFieldType, inputField;
            (0, _definition.isInputObjectType)(objectType) && (inputField = objectType.getFields()[node.name.value], inputField && (inputFieldType = inputField.type)), this._defaultValueStack.push(
              inputField ? inputField.defaultValue : void 0
            ), this._inputTypeStack.push(
              (0, _definition.isInputType)(inputFieldType) ? inputFieldType : void 0
            );
            break;
          }
          case _kinds.Kind.ENUM: {
            let enumType = (0, _definition.getNamedType)(this.getInputType()), enumValue;
            (0, _definition.isEnumType)(enumType) && (enumValue = enumType.getValue(node.value)), this._enumValue = enumValue;
            break;
          }
          default:
        }
      }
      leave(node) {
        switch (node.kind) {
          case _kinds.Kind.SELECTION_SET:
            this._parentTypeStack.pop();
            break;
          case _kinds.Kind.FIELD:
            this._fieldDefStack.pop(), this._typeStack.pop();
            break;
          case _kinds.Kind.DIRECTIVE:
            this._directive = null;
            break;
          case _kinds.Kind.OPERATION_DEFINITION:
          case _kinds.Kind.INLINE_FRAGMENT:
          case _kinds.Kind.FRAGMENT_DEFINITION:
            this._typeStack.pop();
            break;
          case _kinds.Kind.VARIABLE_DEFINITION:
            this._inputTypeStack.pop();
            break;
          case _kinds.Kind.ARGUMENT:
            this._argument = null, this._defaultValueStack.pop(), this._inputTypeStack.pop();
            break;
          case _kinds.Kind.LIST:
          case _kinds.Kind.OBJECT_FIELD:
            this._defaultValueStack.pop(), this._inputTypeStack.pop();
            break;
          case _kinds.Kind.ENUM:
            this._enumValue = null;
            break;
          default:
        }
      }
    };
    exports.TypeInfo = TypeInfo;
    function getFieldDef(schema, parentType, fieldNode) {
      let name = fieldNode.name.value;
      if (name === _introspection.SchemaMetaFieldDef.name && schema.getQueryType() === parentType)
        return _introspection.SchemaMetaFieldDef;
      if (name === _introspection.TypeMetaFieldDef.name && schema.getQueryType() === parentType)
        return _introspection.TypeMetaFieldDef;
      if (name === _introspection.TypeNameMetaFieldDef.name && (0, _definition.isCompositeType)(parentType))
        return _introspection.TypeNameMetaFieldDef;
      if ((0, _definition.isObjectType)(parentType) || (0, _definition.isInterfaceType)(parentType))
        return parentType.getFields()[name];
    }
    function visitWithTypeInfo(typeInfo, visitor) {
      return {
        enter(...args) {
          let node = args[0];
          typeInfo.enter(node);
          let fn = (0, _visitor.getEnterLeaveForKind)(visitor, node.kind).enter;
          if (fn) {
            let result = fn.apply(visitor, args);
            return result !== void 0 && (typeInfo.leave(node), (0, _ast.isNode)(result) && typeInfo.enter(result)), result;
          }
        },
        leave(...args) {
          let node = args[0], fn = (0, _visitor.getEnterLeaveForKind)(visitor, node.kind).leave, result;
          return fn && (result = fn.apply(visitor, args)), typeInfo.leave(node), result;
        }
      };
    }
  }
});

// node_modules/graphql/language/predicates.js
var require_predicates = __commonJS({
  "node_modules/graphql/language/predicates.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.isConstValueNode = isConstValueNode;
    exports.isDefinitionNode = isDefinitionNode;
    exports.isExecutableDefinitionNode = isExecutableDefinitionNode;
    exports.isSelectionNode = isSelectionNode;
    exports.isTypeDefinitionNode = isTypeDefinitionNode;
    exports.isTypeExtensionNode = isTypeExtensionNode;
    exports.isTypeNode = isTypeNode;
    exports.isTypeSystemDefinitionNode = isTypeSystemDefinitionNode;
    exports.isTypeSystemExtensionNode = isTypeSystemExtensionNode;
    exports.isValueNode = isValueNode;
    var _kinds = require_kinds();
    function isDefinitionNode(node) {
      return isExecutableDefinitionNode(node) || isTypeSystemDefinitionNode(node) || isTypeSystemExtensionNode(node);
    }
    function isExecutableDefinitionNode(node) {
      return node.kind === _kinds.Kind.OPERATION_DEFINITION || node.kind === _kinds.Kind.FRAGMENT_DEFINITION;
    }
    function isSelectionNode(node) {
      return node.kind === _kinds.Kind.FIELD || node.kind === _kinds.Kind.FRAGMENT_SPREAD || node.kind === _kinds.Kind.INLINE_FRAGMENT;
    }
    function isValueNode(node) {
      return node.kind === _kinds.Kind.VARIABLE || node.kind === _kinds.Kind.INT || node.kind === _kinds.Kind.FLOAT || node.kind === _kinds.Kind.STRING || node.kind === _kinds.Kind.BOOLEAN || node.kind === _kinds.Kind.NULL || node.kind === _kinds.Kind.ENUM || node.kind === _kinds.Kind.LIST || node.kind === _kinds.Kind.OBJECT;
    }
    function isConstValueNode(node) {
      return isValueNode(node) && (node.kind === _kinds.Kind.LIST ? node.values.some(isConstValueNode) : node.kind === _kinds.Kind.OBJECT ? node.fields.some((field) => isConstValueNode(field.value)) : node.kind !== _kinds.Kind.VARIABLE);
    }
    function isTypeNode(node) {
      return node.kind === _kinds.Kind.NAMED_TYPE || node.kind === _kinds.Kind.LIST_TYPE || node.kind === _kinds.Kind.NON_NULL_TYPE;
    }
    function isTypeSystemDefinitionNode(node) {
      return node.kind === _kinds.Kind.SCHEMA_DEFINITION || isTypeDefinitionNode(node) || node.kind === _kinds.Kind.DIRECTIVE_DEFINITION;
    }
    function isTypeDefinitionNode(node) {
      return node.kind === _kinds.Kind.SCALAR_TYPE_DEFINITION || node.kind === _kinds.Kind.OBJECT_TYPE_DEFINITION || node.kind === _kinds.Kind.INTERFACE_TYPE_DEFINITION || node.kind === _kinds.Kind.UNION_TYPE_DEFINITION || node.kind === _kinds.Kind.ENUM_TYPE_DEFINITION || node.kind === _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION;
    }
    function isTypeSystemExtensionNode(node) {
      return node.kind === _kinds.Kind.SCHEMA_EXTENSION || isTypeExtensionNode(node);
    }
    function isTypeExtensionNode(node) {
      return node.kind === _kinds.Kind.SCALAR_TYPE_EXTENSION || node.kind === _kinds.Kind.OBJECT_TYPE_EXTENSION || node.kind === _kinds.Kind.INTERFACE_TYPE_EXTENSION || node.kind === _kinds.Kind.UNION_TYPE_EXTENSION || node.kind === _kinds.Kind.ENUM_TYPE_EXTENSION || node.kind === _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION;
    }
  }
});

// node_modules/graphql/validation/rules/ExecutableDefinitionsRule.js
var require_ExecutableDefinitionsRule = __commonJS({
  "node_modules/graphql/validation/rules/ExecutableDefinitionsRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.ExecutableDefinitionsRule = ExecutableDefinitionsRule;
    var _GraphQLError = require_GraphQLError(), _kinds = require_kinds(), _predicates = require_predicates();
    function ExecutableDefinitionsRule(context) {
      return {
        Document(node) {
          for (let definition of node.definitions)
            if (!(0, _predicates.isExecutableDefinitionNode)(definition)) {
              let defName = definition.kind === _kinds.Kind.SCHEMA_DEFINITION || definition.kind === _kinds.Kind.SCHEMA_EXTENSION ? "schema" : '"' + definition.name.value + '"';
              context.reportError(
                new _GraphQLError.GraphQLError(
                  `The ${defName} definition is not executable.`,
                  {
                    nodes: definition
                  }
                )
              );
            }
          return !1;
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.js
var require_FieldsOnCorrectTypeRule = __commonJS({
  "node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.FieldsOnCorrectTypeRule = FieldsOnCorrectTypeRule;
    var _didYouMean = require_didYouMean(), _naturalCompare = require_naturalCompare(), _suggestionList = require_suggestionList(), _GraphQLError = require_GraphQLError(), _definition = require_definition();
    function FieldsOnCorrectTypeRule(context) {
      return {
        Field(node) {
          let type = context.getParentType();
          if (type && !context.getFieldDef()) {
            let schema = context.getSchema(), fieldName = node.name.value, suggestion = (0, _didYouMean.didYouMean)(
              "to use an inline fragment on",
              getSuggestedTypeNames(schema, type, fieldName)
            );
            suggestion === "" && (suggestion = (0, _didYouMean.didYouMean)(
              getSuggestedFieldNames(type, fieldName)
            )), context.reportError(
              new _GraphQLError.GraphQLError(
                `Cannot query field "${fieldName}" on type "${type.name}".` + suggestion,
                {
                  nodes: node
                }
              )
            );
          }
        }
      };
    }
    function getSuggestedTypeNames(schema, type, fieldName) {
      if (!(0, _definition.isAbstractType)(type))
        return [];
      let suggestedTypes = /* @__PURE__ */ new Set(), usageCount = /* @__PURE__ */ Object.create(null);
      for (let possibleType of schema.getPossibleTypes(type))
        if (possibleType.getFields()[fieldName]) {
          suggestedTypes.add(possibleType), usageCount[possibleType.name] = 1;
          for (let possibleInterface of possibleType.getInterfaces()) {
            var _usageCount$possibleI;
            possibleInterface.getFields()[fieldName] && (suggestedTypes.add(possibleInterface), usageCount[possibleInterface.name] = ((_usageCount$possibleI = usageCount[possibleInterface.name]) !== null && _usageCount$possibleI !== void 0 ? _usageCount$possibleI : 0) + 1);
          }
        }
      return [...suggestedTypes].sort((typeA, typeB) => {
        let usageCountDiff = usageCount[typeB.name] - usageCount[typeA.name];
        return usageCountDiff !== 0 ? usageCountDiff : (0, _definition.isInterfaceType)(typeA) && schema.isSubType(typeA, typeB) ? -1 : (0, _definition.isInterfaceType)(typeB) && schema.isSubType(typeB, typeA) ? 1 : (0, _naturalCompare.naturalCompare)(typeA.name, typeB.name);
      }).map((x) => x.name);
    }
    function getSuggestedFieldNames(type, fieldName) {
      if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type)) {
        let possibleFieldNames = Object.keys(type.getFields());
        return (0, _suggestionList.suggestionList)(fieldName, possibleFieldNames);
      }
      return [];
    }
  }
});

// node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.js
var require_FragmentsOnCompositeTypesRule = __commonJS({
  "node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.FragmentsOnCompositeTypesRule = FragmentsOnCompositeTypesRule;
    var _GraphQLError = require_GraphQLError(), _printer = require_printer(), _definition = require_definition(), _typeFromAST = require_typeFromAST();
    function FragmentsOnCompositeTypesRule(context) {
      return {
        InlineFragment(node) {
          let typeCondition = node.typeCondition;
          if (typeCondition) {
            let type = (0, _typeFromAST.typeFromAST)(
              context.getSchema(),
              typeCondition
            );
            if (type && !(0, _definition.isCompositeType)(type)) {
              let typeStr = (0, _printer.print)(typeCondition);
              context.reportError(
                new _GraphQLError.GraphQLError(
                  `Fragment cannot condition on non composite type "${typeStr}".`,
                  {
                    nodes: typeCondition
                  }
                )
              );
            }
          }
        },
        FragmentDefinition(node) {
          let type = (0, _typeFromAST.typeFromAST)(
            context.getSchema(),
            node.typeCondition
          );
          if (type && !(0, _definition.isCompositeType)(type)) {
            let typeStr = (0, _printer.print)(node.typeCondition);
            context.reportError(
              new _GraphQLError.GraphQLError(
                `Fragment "${node.name.value}" cannot condition on non composite type "${typeStr}".`,
                {
                  nodes: node.typeCondition
                }
              )
            );
          }
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/KnownArgumentNamesRule.js
var require_KnownArgumentNamesRule = __commonJS({
  "node_modules/graphql/validation/rules/KnownArgumentNamesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.KnownArgumentNamesOnDirectivesRule = KnownArgumentNamesOnDirectivesRule;
    exports.KnownArgumentNamesRule = KnownArgumentNamesRule;
    var _didYouMean = require_didYouMean(), _suggestionList = require_suggestionList(), _GraphQLError = require_GraphQLError(), _kinds = require_kinds(), _directives = require_directives();
    function KnownArgumentNamesRule(context) {
      return {
        // eslint-disable-next-line new-cap
        ...KnownArgumentNamesOnDirectivesRule(context),
        Argument(argNode) {
          let argDef = context.getArgument(), fieldDef = context.getFieldDef(), parentType = context.getParentType();
          if (!argDef && fieldDef && parentType) {
            let argName = argNode.name.value, knownArgsNames = fieldDef.args.map((arg) => arg.name), suggestions = (0, _suggestionList.suggestionList)(
              argName,
              knownArgsNames
            );
            context.reportError(
              new _GraphQLError.GraphQLError(
                `Unknown argument "${argName}" on field "${parentType.name}.${fieldDef.name}".` + (0, _didYouMean.didYouMean)(suggestions),
                {
                  nodes: argNode
                }
              )
            );
          }
        }
      };
    }
    function KnownArgumentNamesOnDirectivesRule(context) {
      let directiveArgs = /* @__PURE__ */ Object.create(null), schema = context.getSchema(), definedDirectives = schema ? schema.getDirectives() : _directives.specifiedDirectives;
      for (let directive of definedDirectives)
        directiveArgs[directive.name] = directive.args.map((arg) => arg.name);
      let astDefinitions = context.getDocument().definitions;
      for (let def of astDefinitions)
        if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {
          var _def$arguments;
          let argsNodes = (_def$arguments = def.arguments) !== null && _def$arguments !== void 0 ? _def$arguments : [];
          directiveArgs[def.name.value] = argsNodes.map((arg) => arg.name.value);
        }
      return {
        Directive(directiveNode) {
          let directiveName = directiveNode.name.value, knownArgs = directiveArgs[directiveName];
          if (directiveNode.arguments && knownArgs)
            for (let argNode of directiveNode.arguments) {
              let argName = argNode.name.value;
              if (!knownArgs.includes(argName)) {
                let suggestions = (0, _suggestionList.suggestionList)(
                  argName,
                  knownArgs
                );
                context.reportError(
                  new _GraphQLError.GraphQLError(
                    `Unknown argument "${argName}" on directive "@${directiveName}".` + (0, _didYouMean.didYouMean)(suggestions),
                    {
                      nodes: argNode
                    }
                  )
                );
              }
            }
          return !1;
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/KnownDirectivesRule.js
var require_KnownDirectivesRule = __commonJS({
  "node_modules/graphql/validation/rules/KnownDirectivesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.KnownDirectivesRule = KnownDirectivesRule;
    var _inspect = require_inspect(), _invariant = require_invariant(), _GraphQLError = require_GraphQLError(), _ast = require_ast(), _directiveLocation = require_directiveLocation(), _kinds = require_kinds(), _directives = require_directives();
    function KnownDirectivesRule(context) {
      let locationsMap = /* @__PURE__ */ Object.create(null), schema = context.getSchema(), definedDirectives = schema ? schema.getDirectives() : _directives.specifiedDirectives;
      for (let directive of definedDirectives)
        locationsMap[directive.name] = directive.locations;
      let astDefinitions = context.getDocument().definitions;
      for (let def of astDefinitions)
        def.kind === _kinds.Kind.DIRECTIVE_DEFINITION && (locationsMap[def.name.value] = def.locations.map((name) => name.value));
      return {
        Directive(node, _key, _parent, _path, ancestors) {
          let name = node.name.value, locations = locationsMap[name];
          if (!locations) {
            context.reportError(
              new _GraphQLError.GraphQLError(`Unknown directive "@${name}".`, {
                nodes: node
              })
            );
            return;
          }
          let candidateLocation = getDirectiveLocationForASTPath(ancestors);
          candidateLocation && !locations.includes(candidateLocation) && context.reportError(
            new _GraphQLError.GraphQLError(
              `Directive "@${name}" may not be used on ${candidateLocation}.`,
              {
                nodes: node
              }
            )
          );
        }
      };
    }
    function getDirectiveLocationForASTPath(ancestors) {
      let appliedTo = ancestors[ancestors.length - 1];
      switch ("kind" in appliedTo || (0, _invariant.invariant)(!1), appliedTo.kind) {
        case _kinds.Kind.OPERATION_DEFINITION:
          return getDirectiveLocationForOperation(appliedTo.operation);
        case _kinds.Kind.FIELD:
          return _directiveLocation.DirectiveLocation.FIELD;
        case _kinds.Kind.FRAGMENT_SPREAD:
          return _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD;
        case _kinds.Kind.INLINE_FRAGMENT:
          return _directiveLocation.DirectiveLocation.INLINE_FRAGMENT;
        case _kinds.Kind.FRAGMENT_DEFINITION:
          return _directiveLocation.DirectiveLocation.FRAGMENT_DEFINITION;
        case _kinds.Kind.VARIABLE_DEFINITION:
          return _directiveLocation.DirectiveLocation.VARIABLE_DEFINITION;
        case _kinds.Kind.SCHEMA_DEFINITION:
        case _kinds.Kind.SCHEMA_EXTENSION:
          return _directiveLocation.DirectiveLocation.SCHEMA;
        case _kinds.Kind.SCALAR_TYPE_DEFINITION:
        case _kinds.Kind.SCALAR_TYPE_EXTENSION:
          return _directiveLocation.DirectiveLocation.SCALAR;
        case _kinds.Kind.OBJECT_TYPE_DEFINITION:
        case _kinds.Kind.OBJECT_TYPE_EXTENSION:
          return _directiveLocation.DirectiveLocation.OBJECT;
        case _kinds.Kind.FIELD_DEFINITION:
          return _directiveLocation.DirectiveLocation.FIELD_DEFINITION;
        case _kinds.Kind.INTERFACE_TYPE_DEFINITION:
        case _kinds.Kind.INTERFACE_TYPE_EXTENSION:
          return _directiveLocation.DirectiveLocation.INTERFACE;
        case _kinds.Kind.UNION_TYPE_DEFINITION:
        case _kinds.Kind.UNION_TYPE_EXTENSION:
          return _directiveLocation.DirectiveLocation.UNION;
        case _kinds.Kind.ENUM_TYPE_DEFINITION:
        case _kinds.Kind.ENUM_TYPE_EXTENSION:
          return _directiveLocation.DirectiveLocation.ENUM;
        case _kinds.Kind.ENUM_VALUE_DEFINITION:
          return _directiveLocation.DirectiveLocation.ENUM_VALUE;
        case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION:
        case _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION:
          return _directiveLocation.DirectiveLocation.INPUT_OBJECT;
        case _kinds.Kind.INPUT_VALUE_DEFINITION: {
          let parentNode = ancestors[ancestors.length - 3];
          return "kind" in parentNode || (0, _invariant.invariant)(!1), parentNode.kind === _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION ? _directiveLocation.DirectiveLocation.INPUT_FIELD_DEFINITION : _directiveLocation.DirectiveLocation.ARGUMENT_DEFINITION;
        }
        default:
          (0, _invariant.invariant)(
            !1,
            "Unexpected kind: " + (0, _inspect.inspect)(appliedTo.kind)
          );
      }
    }
    function getDirectiveLocationForOperation(operation) {
      switch (operation) {
        case _ast.OperationTypeNode.QUERY:
          return _directiveLocation.DirectiveLocation.QUERY;
        case _ast.OperationTypeNode.MUTATION:
          return _directiveLocation.DirectiveLocation.MUTATION;
        case _ast.OperationTypeNode.SUBSCRIPTION:
          return _directiveLocation.DirectiveLocation.SUBSCRIPTION;
      }
    }
  }
});

// node_modules/graphql/validation/rules/KnownFragmentNamesRule.js
var require_KnownFragmentNamesRule = __commonJS({
  "node_modules/graphql/validation/rules/KnownFragmentNamesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.KnownFragmentNamesRule = KnownFragmentNamesRule;
    var _GraphQLError = require_GraphQLError();
    function KnownFragmentNamesRule(context) {
      return {
        FragmentSpread(node) {
          let fragmentName = node.name.value;
          context.getFragment(fragmentName) || context.reportError(
            new _GraphQLError.GraphQLError(
              `Unknown fragment "${fragmentName}".`,
              {
                nodes: node.name
              }
            )
          );
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/KnownTypeNamesRule.js
var require_KnownTypeNamesRule = __commonJS({
  "node_modules/graphql/validation/rules/KnownTypeNamesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.KnownTypeNamesRule = KnownTypeNamesRule;
    var _didYouMean = require_didYouMean(), _suggestionList = require_suggestionList(), _GraphQLError = require_GraphQLError(), _predicates = require_predicates(), _introspection = require_introspection(), _scalars = require_scalars();
    function KnownTypeNamesRule(context) {
      let schema = context.getSchema(), existingTypesMap = schema ? schema.getTypeMap() : /* @__PURE__ */ Object.create(null), definedTypes = /* @__PURE__ */ Object.create(null);
      for (let def of context.getDocument().definitions)
        (0, _predicates.isTypeDefinitionNode)(def) && (definedTypes[def.name.value] = !0);
      let typeNames = [
        ...Object.keys(existingTypesMap),
        ...Object.keys(definedTypes)
      ];
      return {
        NamedType(node, _1, parent, _2, ancestors) {
          let typeName = node.name.value;
          if (!existingTypesMap[typeName] && !definedTypes[typeName]) {
            var _ancestors$;
            let definitionNode = (_ancestors$ = ancestors[2]) !== null && _ancestors$ !== void 0 ? _ancestors$ : parent, isSDL = definitionNode != null && isSDLNode(definitionNode);
            if (isSDL && standardTypeNames.includes(typeName))
              return;
            let suggestedTypes = (0, _suggestionList.suggestionList)(
              typeName,
              isSDL ? standardTypeNames.concat(typeNames) : typeNames
            );
            context.reportError(
              new _GraphQLError.GraphQLError(
                `Unknown type "${typeName}".` + (0, _didYouMean.didYouMean)(suggestedTypes),
                {
                  nodes: node
                }
              )
            );
          }
        }
      };
    }
    var standardTypeNames = [
      ..._scalars.specifiedScalarTypes,
      ..._introspection.introspectionTypes
    ].map((type) => type.name);
    function isSDLNode(value) {
      return "kind" in value && ((0, _predicates.isTypeSystemDefinitionNode)(value) || (0, _predicates.isTypeSystemExtensionNode)(value));
    }
  }
});

// node_modules/graphql/validation/rules/LoneAnonymousOperationRule.js
var require_LoneAnonymousOperationRule = __commonJS({
  "node_modules/graphql/validation/rules/LoneAnonymousOperationRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.LoneAnonymousOperationRule = LoneAnonymousOperationRule;
    var _GraphQLError = require_GraphQLError(), _kinds = require_kinds();
    function LoneAnonymousOperationRule(context) {
      let operationCount = 0;
      return {
        Document(node) {
          operationCount = node.definitions.filter(
            (definition) => definition.kind === _kinds.Kind.OPERATION_DEFINITION
          ).length;
        },
        OperationDefinition(node) {
          !node.name && operationCount > 1 && context.reportError(
            new _GraphQLError.GraphQLError(
              "This anonymous operation must be the only defined operation.",
              {
                nodes: node
              }
            )
          );
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/LoneSchemaDefinitionRule.js
var require_LoneSchemaDefinitionRule = __commonJS({
  "node_modules/graphql/validation/rules/LoneSchemaDefinitionRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.LoneSchemaDefinitionRule = LoneSchemaDefinitionRule;
    var _GraphQLError = require_GraphQLError();
    function LoneSchemaDefinitionRule(context) {
      var _ref, _ref2, _oldSchema$astNode;
      let oldSchema = context.getSchema(), alreadyDefined = (_ref = (_ref2 = (_oldSchema$astNode = oldSchema?.astNode) !== null && _oldSchema$astNode !== void 0 ? _oldSchema$astNode : oldSchema?.getQueryType()) !== null && _ref2 !== void 0 ? _ref2 : oldSchema?.getMutationType()) !== null && _ref !== void 0 ? _ref : oldSchema?.getSubscriptionType(), schemaDefinitionsCount = 0;
      return {
        SchemaDefinition(node) {
          if (alreadyDefined) {
            context.reportError(
              new _GraphQLError.GraphQLError(
                "Cannot define a new schema within a schema extension.",
                {
                  nodes: node
                }
              )
            );
            return;
          }
          schemaDefinitionsCount > 0 && context.reportError(
            new _GraphQLError.GraphQLError(
              "Must provide only one schema definition.",
              {
                nodes: node
              }
            )
          ), ++schemaDefinitionsCount;
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/MaxIntrospectionDepthRule.js
var require_MaxIntrospectionDepthRule = __commonJS({
  "node_modules/graphql/validation/rules/MaxIntrospectionDepthRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.MaxIntrospectionDepthRule = MaxIntrospectionDepthRule;
    var _GraphQLError = require_GraphQLError(), _kinds = require_kinds(), MAX_LISTS_DEPTH = 3;
    function MaxIntrospectionDepthRule(context) {
      function checkDepth(node, visitedFragments = /* @__PURE__ */ Object.create(null), depth = 0) {
        if (node.kind === _kinds.Kind.FRAGMENT_SPREAD) {
          let fragmentName = node.name.value;
          if (visitedFragments[fragmentName] === !0)
            return !1;
          let fragment = context.getFragment(fragmentName);
          if (!fragment)
            return !1;
          try {
            return visitedFragments[fragmentName] = !0, checkDepth(fragment, visitedFragments, depth);
          } finally {
            visitedFragments[fragmentName] = void 0;
          }
        }
        if (node.kind === _kinds.Kind.FIELD && // check all introspection lists
        (node.name.value === "fields" || node.name.value === "interfaces" || node.name.value === "possibleTypes" || node.name.value === "inputFields") && (depth++, depth >= MAX_LISTS_DEPTH))
          return !0;
        if ("selectionSet" in node && node.selectionSet) {
          for (let child of node.selectionSet.selections)
            if (checkDepth(child, visitedFragments, depth))
              return !0;
        }
        return !1;
      }
      return {
        Field(node) {
          if ((node.name.value === "__schema" || node.name.value === "__type") && checkDepth(node))
            return context.reportError(
              new _GraphQLError.GraphQLError(
                "Maximum introspection depth exceeded",
                {
                  nodes: [node]
                }
              )
            ), !1;
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/NoFragmentCyclesRule.js
var require_NoFragmentCyclesRule = __commonJS({
  "node_modules/graphql/validation/rules/NoFragmentCyclesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.NoFragmentCyclesRule = NoFragmentCyclesRule;
    var _GraphQLError = require_GraphQLError();
    function NoFragmentCyclesRule(context) {
      let visitedFrags = /* @__PURE__ */ Object.create(null), spreadPath = [], spreadPathIndexByName = /* @__PURE__ */ Object.create(null);
      return {
        OperationDefinition: () => !1,
        FragmentDefinition(node) {
          return detectCycleRecursive(node), !1;
        }
      };
      function detectCycleRecursive(fragment) {
        if (visitedFrags[fragment.name.value])
          return;
        let fragmentName = fragment.name.value;
        visitedFrags[fragmentName] = !0;
        let spreadNodes = context.getFragmentSpreads(fragment.selectionSet);
        if (spreadNodes.length !== 0) {
          spreadPathIndexByName[fragmentName] = spreadPath.length;
          for (let spreadNode of spreadNodes) {
            let spreadName = spreadNode.name.value, cycleIndex = spreadPathIndexByName[spreadName];
            if (spreadPath.push(spreadNode), cycleIndex === void 0) {
              let spreadFragment = context.getFragment(spreadName);
              spreadFragment && detectCycleRecursive(spreadFragment);
            } else {
              let cyclePath = spreadPath.slice(cycleIndex), viaPath = cyclePath.slice(0, -1).map((s) => '"' + s.name.value + '"').join(", ");
              context.reportError(
                new _GraphQLError.GraphQLError(
                  `Cannot spread fragment "${spreadName}" within itself` + (viaPath !== "" ? ` via ${viaPath}.` : "."),
                  {
                    nodes: cyclePath
                  }
                )
              );
            }
            spreadPath.pop();
          }
          spreadPathIndexByName[fragmentName] = void 0;
        }
      }
    }
  }
});

// node_modules/graphql/validation/rules/NoUndefinedVariablesRule.js
var require_NoUndefinedVariablesRule = __commonJS({
  "node_modules/graphql/validation/rules/NoUndefinedVariablesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.NoUndefinedVariablesRule = NoUndefinedVariablesRule;
    var _GraphQLError = require_GraphQLError();
    function NoUndefinedVariablesRule(context) {
      let variableNameDefined = /* @__PURE__ */ Object.create(null);
      return {
        OperationDefinition: {
          enter() {
            variableNameDefined = /* @__PURE__ */ Object.create(null);
          },
          leave(operation) {
            let usages = context.getRecursiveVariableUsages(operation);
            for (let { node } of usages) {
              let varName = node.name.value;
              variableNameDefined[varName] !== !0 && context.reportError(
                new _GraphQLError.GraphQLError(
                  operation.name ? `Variable "$${varName}" is not defined by operation "${operation.name.value}".` : `Variable "$${varName}" is not defined.`,
                  {
                    nodes: [node, operation]
                  }
                )
              );
            }
          }
        },
        VariableDefinition(node) {
          variableNameDefined[node.variable.name.value] = !0;
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/NoUnusedFragmentsRule.js
var require_NoUnusedFragmentsRule = __commonJS({
  "node_modules/graphql/validation/rules/NoUnusedFragmentsRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.NoUnusedFragmentsRule = NoUnusedFragmentsRule;
    var _GraphQLError = require_GraphQLError();
    function NoUnusedFragmentsRule(context) {
      let operationDefs = [], fragmentDefs = [];
      return {
        OperationDefinition(node) {
          return operationDefs.push(node), !1;
        },
        FragmentDefinition(node) {
          return fragmentDefs.push(node), !1;
        },
        Document: {
          leave() {
            let fragmentNameUsed = /* @__PURE__ */ Object.create(null);
            for (let operation of operationDefs)
              for (let fragment of context.getRecursivelyReferencedFragments(
                operation
              ))
                fragmentNameUsed[fragment.name.value] = !0;
            for (let fragmentDef of fragmentDefs) {
              let fragName = fragmentDef.name.value;
              fragmentNameUsed[fragName] !== !0 && context.reportError(
                new _GraphQLError.GraphQLError(
                  `Fragment "${fragName}" is never used.`,
                  {
                    nodes: fragmentDef
                  }
                )
              );
            }
          }
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/NoUnusedVariablesRule.js
var require_NoUnusedVariablesRule = __commonJS({
  "node_modules/graphql/validation/rules/NoUnusedVariablesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.NoUnusedVariablesRule = NoUnusedVariablesRule;
    var _GraphQLError = require_GraphQLError();
    function NoUnusedVariablesRule(context) {
      let variableDefs = [];
      return {
        OperationDefinition: {
          enter() {
            variableDefs = [];
          },
          leave(operation) {
            let variableNameUsed = /* @__PURE__ */ Object.create(null), usages = context.getRecursiveVariableUsages(operation);
            for (let { node } of usages)
              variableNameUsed[node.name.value] = !0;
            for (let variableDef of variableDefs) {
              let variableName = variableDef.variable.name.value;
              variableNameUsed[variableName] !== !0 && context.reportError(
                new _GraphQLError.GraphQLError(
                  operation.name ? `Variable "$${variableName}" is never used in operation "${operation.name.value}".` : `Variable "$${variableName}" is never used.`,
                  {
                    nodes: variableDef
                  }
                )
              );
            }
          }
        },
        VariableDefinition(def) {
          variableDefs.push(def);
        }
      };
    }
  }
});

// node_modules/graphql/utilities/sortValueNode.js
var require_sortValueNode = __commonJS({
  "node_modules/graphql/utilities/sortValueNode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.sortValueNode = sortValueNode;
    var _naturalCompare = require_naturalCompare(), _kinds = require_kinds();
    function sortValueNode(valueNode) {
      switch (valueNode.kind) {
        case _kinds.Kind.OBJECT:
          return { ...valueNode, fields: sortFields(valueNode.fields) };
        case _kinds.Kind.LIST:
          return { ...valueNode, values: valueNode.values.map(sortValueNode) };
        case _kinds.Kind.INT:
        case _kinds.Kind.FLOAT:
        case _kinds.Kind.STRING:
        case _kinds.Kind.BOOLEAN:
        case _kinds.Kind.NULL:
        case _kinds.Kind.ENUM:
        case _kinds.Kind.VARIABLE:
          return valueNode;
      }
    }
    function sortFields(fields) {
      return fields.map((fieldNode) => ({
        ...fieldNode,
        value: sortValueNode(fieldNode.value)
      })).sort(
        (fieldA, fieldB) => (0, _naturalCompare.naturalCompare)(fieldA.name.value, fieldB.name.value)
      );
    }
  }
});

// node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.js
var require_OverlappingFieldsCanBeMergedRule = __commonJS({
  "node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.OverlappingFieldsCanBeMergedRule = OverlappingFieldsCanBeMergedRule;
    var _inspect = require_inspect(), _GraphQLError = require_GraphQLError(), _kinds = require_kinds(), _printer = require_printer(), _definition = require_definition(), _sortValueNode = require_sortValueNode(), _typeFromAST = require_typeFromAST();
    function reasonMessage(reason) {
      return Array.isArray(reason) ? reason.map(
        ([responseName, subReason]) => `subfields "${responseName}" conflict because ` + reasonMessage(subReason)
      ).join(" and ") : reason;
    }
    function OverlappingFieldsCanBeMergedRule(context) {
      let comparedFieldsAndFragmentPairs = new OrderedPairSet(), comparedFragmentPairs = new PairSet(), cachedFieldsAndFragmentNames = /* @__PURE__ */ new Map();
      return {
        SelectionSet(selectionSet) {
          let conflicts = findConflictsWithinSelectionSet(
            context,
            cachedFieldsAndFragmentNames,
            comparedFieldsAndFragmentPairs,
            comparedFragmentPairs,
            context.getParentType(),
            selectionSet
          );
          for (let [[responseName, reason], fields1, fields2] of conflicts) {
            let reasonMsg = reasonMessage(reason);
            context.reportError(
              new _GraphQLError.GraphQLError(
                `Fields "${responseName}" conflict because ${reasonMsg}. Use different aliases on the fields to fetch both if this was intentional.`,
                {
                  nodes: fields1.concat(fields2)
                }
              )
            );
          }
        }
      };
    }
    function findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFieldsAndFragmentPairs, comparedFragmentPairs, parentType, selectionSet) {
      let conflicts = [], [fieldMap, fragmentNames] = getFieldsAndFragmentNames(
        context,
        cachedFieldsAndFragmentNames,
        parentType,
        selectionSet
      );
      if (collectConflictsWithin(
        context,
        conflicts,
        cachedFieldsAndFragmentNames,
        comparedFieldsAndFragmentPairs,
        comparedFragmentPairs,
        fieldMap
      ), fragmentNames.length !== 0)
        for (let i = 0; i < fragmentNames.length; i++) {
          collectConflictsBetweenFieldsAndFragment(
            context,
            conflicts,
            cachedFieldsAndFragmentNames,
            comparedFieldsAndFragmentPairs,
            comparedFragmentPairs,
            !1,
            fieldMap,
            fragmentNames[i]
          );
          for (let j = i + 1; j < fragmentNames.length; j++)
            collectConflictsBetweenFragments(
              context,
              conflicts,
              cachedFieldsAndFragmentNames,
              comparedFieldsAndFragmentPairs,
              comparedFragmentPairs,
              !1,
              fragmentNames[i],
              fragmentNames[j]
            );
        }
      return conflicts;
    }
    function collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFieldsAndFragmentPairs, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentName) {
      if (comparedFieldsAndFragmentPairs.has(
        fieldMap,
        fragmentName,
        areMutuallyExclusive
      ))
        return;
      comparedFieldsAndFragmentPairs.add(
        fieldMap,
        fragmentName,
        areMutuallyExclusive
      );
      let fragment = context.getFragment(fragmentName);
      if (!fragment)
        return;
      let [fieldMap2, referencedFragmentNames] = getReferencedFieldsAndFragmentNames(
        context,
        cachedFieldsAndFragmentNames,
        fragment
      );
      if (fieldMap !== fieldMap2) {
        collectConflictsBetween(
          context,
          conflicts,
          cachedFieldsAndFragmentNames,
          comparedFieldsAndFragmentPairs,
          comparedFragmentPairs,
          areMutuallyExclusive,
          fieldMap,
          fieldMap2
        );
        for (let referencedFragmentName of referencedFragmentNames)
          collectConflictsBetweenFieldsAndFragment(
            context,
            conflicts,
            cachedFieldsAndFragmentNames,
            comparedFieldsAndFragmentPairs,
            comparedFragmentPairs,
            areMutuallyExclusive,
            fieldMap,
            referencedFragmentName
          );
      }
    }
    function collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFieldsAndFragmentPairs, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentName2) {
      if (fragmentName1 === fragmentName2 || comparedFragmentPairs.has(
        fragmentName1,
        fragmentName2,
        areMutuallyExclusive
      ))
        return;
      comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);
      let fragment1 = context.getFragment(fragmentName1), fragment2 = context.getFragment(fragmentName2);
      if (!fragment1 || !fragment2)
        return;
      let [fieldMap1, referencedFragmentNames1] = getReferencedFieldsAndFragmentNames(
        context,
        cachedFieldsAndFragmentNames,
        fragment1
      ), [fieldMap2, referencedFragmentNames2] = getReferencedFieldsAndFragmentNames(
        context,
        cachedFieldsAndFragmentNames,
        fragment2
      );
      collectConflictsBetween(
        context,
        conflicts,
        cachedFieldsAndFragmentNames,
        comparedFieldsAndFragmentPairs,
        comparedFragmentPairs,
        areMutuallyExclusive,
        fieldMap1,
        fieldMap2
      );
      for (let referencedFragmentName2 of referencedFragmentNames2)
        collectConflictsBetweenFragments(
          context,
          conflicts,
          cachedFieldsAndFragmentNames,
          comparedFieldsAndFragmentPairs,
          comparedFragmentPairs,
          areMutuallyExclusive,
          fragmentName1,
          referencedFragmentName2
        );
      for (let referencedFragmentName1 of referencedFragmentNames1)
        collectConflictsBetweenFragments(
          context,
          conflicts,
          cachedFieldsAndFragmentNames,
          comparedFieldsAndFragmentPairs,
          comparedFragmentPairs,
          areMutuallyExclusive,
          referencedFragmentName1,
          fragmentName2
        );
    }
    function findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFieldsAndFragmentPairs, comparedFragmentPairs, areMutuallyExclusive, parentType1, selectionSet1, parentType2, selectionSet2) {
      let conflicts = [], [fieldMap1, fragmentNames1] = getFieldsAndFragmentNames(
        context,
        cachedFieldsAndFragmentNames,
        parentType1,
        selectionSet1
      ), [fieldMap2, fragmentNames2] = getFieldsAndFragmentNames(
        context,
        cachedFieldsAndFragmentNames,
        parentType2,
        selectionSet2
      );
      collectConflictsBetween(
        context,
        conflicts,
        cachedFieldsAndFragmentNames,
        comparedFieldsAndFragmentPairs,
        comparedFragmentPairs,
        areMutuallyExclusive,
        fieldMap1,
        fieldMap2
      );
      for (let fragmentName2 of fragmentNames2)
        collectConflictsBetweenFieldsAndFragment(
          context,
          conflicts,
          cachedFieldsAndFragmentNames,
          comparedFieldsAndFragmentPairs,
          comparedFragmentPairs,
          areMutuallyExclusive,
          fieldMap1,
          fragmentName2
        );
      for (let fragmentName1 of fragmentNames1)
        collectConflictsBetweenFieldsAndFragment(
          context,
          conflicts,
          cachedFieldsAndFragmentNames,
          comparedFieldsAndFragmentPairs,
          comparedFragmentPairs,
          areMutuallyExclusive,
          fieldMap2,
          fragmentName1
        );
      for (let fragmentName1 of fragmentNames1)
        for (let fragmentName2 of fragmentNames2)
          collectConflictsBetweenFragments(
            context,
            conflicts,
            cachedFieldsAndFragmentNames,
            comparedFieldsAndFragmentPairs,
            comparedFragmentPairs,
            areMutuallyExclusive,
            fragmentName1,
            fragmentName2
          );
      return conflicts;
    }
    function collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFieldsAndFragmentPairs, comparedFragmentPairs, fieldMap) {
      for (let [responseName, fields] of Object.entries(fieldMap))
        if (fields.length > 1)
          for (let i = 0; i < fields.length; i++)
            for (let j = i + 1; j < fields.length; j++) {
              let conflict = findConflict(
                context,
                cachedFieldsAndFragmentNames,
                comparedFieldsAndFragmentPairs,
                comparedFragmentPairs,
                !1,
                // within one collection is never mutually exclusive
                responseName,
                fields[i],
                fields[j]
              );
              conflict && conflicts.push(conflict);
            }
    }
    function collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFieldsAndFragmentPairs, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, fieldMap1, fieldMap2) {
      for (let [responseName, fields1] of Object.entries(fieldMap1)) {
        let fields2 = fieldMap2[responseName];
        if (fields2)
          for (let field1 of fields1)
            for (let field2 of fields2) {
              let conflict = findConflict(
                context,
                cachedFieldsAndFragmentNames,
                comparedFieldsAndFragmentPairs,
                comparedFragmentPairs,
                parentFieldsAreMutuallyExclusive,
                responseName,
                field1,
                field2
              );
              conflict && conflicts.push(conflict);
            }
      }
    }
    function findConflict(context, cachedFieldsAndFragmentNames, comparedFieldsAndFragmentPairs, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, field1, field2) {
      let [parentType1, node1, def1] = field1, [parentType2, node2, def2] = field2, areMutuallyExclusive = parentFieldsAreMutuallyExclusive || parentType1 !== parentType2 && (0, _definition.isObjectType)(parentType1) && (0, _definition.isObjectType)(parentType2);
      if (!areMutuallyExclusive) {
        let name1 = node1.name.value, name2 = node2.name.value;
        if (name1 !== name2)
          return [
            [responseName, `"${name1}" and "${name2}" are different fields`],
            [node1],
            [node2]
          ];
        if (!sameArguments(node1, node2))
          return [
            [responseName, "they have differing arguments"],
            [node1],
            [node2]
          ];
      }
      let type1 = def1?.type, type2 = def2?.type;
      if (type1 && type2 && doTypesConflict(type1, type2))
        return [
          [
            responseName,
            `they return conflicting types "${(0, _inspect.inspect)(
              type1
            )}" and "${(0, _inspect.inspect)(type2)}"`
          ],
          [node1],
          [node2]
        ];
      let selectionSet1 = node1.selectionSet, selectionSet2 = node2.selectionSet;
      if (selectionSet1 && selectionSet2) {
        let conflicts = findConflictsBetweenSubSelectionSets(
          context,
          cachedFieldsAndFragmentNames,
          comparedFieldsAndFragmentPairs,
          comparedFragmentPairs,
          areMutuallyExclusive,
          (0, _definition.getNamedType)(type1),
          selectionSet1,
          (0, _definition.getNamedType)(type2),
          selectionSet2
        );
        return subfieldConflicts(conflicts, responseName, node1, node2);
      }
    }
    function sameArguments(node1, node2) {
      let args1 = node1.arguments, args2 = node2.arguments;
      if (args1 === void 0 || args1.length === 0)
        return args2 === void 0 || args2.length === 0;
      if (args2 === void 0 || args2.length === 0 || args1.length !== args2.length)
        return !1;
      let values2 = new Map(args2.map(({ name, value }) => [name.value, value]));
      return args1.every((arg1) => {
        let value1 = arg1.value, value2 = values2.get(arg1.name.value);
        return value2 === void 0 ? !1 : stringifyValue(value1) === stringifyValue(value2);
      });
    }
    function stringifyValue(value) {
      return (0, _printer.print)((0, _sortValueNode.sortValueNode)(value));
    }
    function doTypesConflict(type1, type2) {
      return (0, _definition.isListType)(type1) ? (0, _definition.isListType)(type2) ? doTypesConflict(type1.ofType, type2.ofType) : !0 : (0, _definition.isListType)(type2) ? !0 : (0, _definition.isNonNullType)(type1) ? (0, _definition.isNonNullType)(type2) ? doTypesConflict(type1.ofType, type2.ofType) : !0 : (0, _definition.isNonNullType)(type2) ? !0 : (0, _definition.isLeafType)(type1) || (0, _definition.isLeafType)(type2) ? type1 !== type2 : !1;
    }
    function getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet) {
      let cached = cachedFieldsAndFragmentNames.get(selectionSet);
      if (cached)
        return cached;
      let nodeAndDefs = /* @__PURE__ */ Object.create(null), fragmentNames = /* @__PURE__ */ Object.create(null);
      _collectFieldsAndFragmentNames(
        context,
        parentType,
        selectionSet,
        nodeAndDefs,
        fragmentNames
      );
      let result = [nodeAndDefs, Object.keys(fragmentNames)];
      return cachedFieldsAndFragmentNames.set(selectionSet, result), result;
    }
    function getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment) {
      let cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);
      if (cached)
        return cached;
      let fragmentType = (0, _typeFromAST.typeFromAST)(
        context.getSchema(),
        fragment.typeCondition
      );
      return getFieldsAndFragmentNames(
        context,
        cachedFieldsAndFragmentNames,
        fragmentType,
        fragment.selectionSet
      );
    }
    function _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames) {
      for (let selection of selectionSet.selections)
        switch (selection.kind) {
          case _kinds.Kind.FIELD: {
            let fieldName = selection.name.value, fieldDef;
            ((0, _definition.isObjectType)(parentType) || (0, _definition.isInterfaceType)(parentType)) && (fieldDef = parentType.getFields()[fieldName]);
            let responseName = selection.alias ? selection.alias.value : fieldName;
            nodeAndDefs[responseName] || (nodeAndDefs[responseName] = []), nodeAndDefs[responseName].push([parentType, selection, fieldDef]);
            break;
          }
          case _kinds.Kind.FRAGMENT_SPREAD:
            fragmentNames[selection.name.value] = !0;
            break;
          case _kinds.Kind.INLINE_FRAGMENT: {
            let typeCondition = selection.typeCondition, inlineFragmentType = typeCondition ? (0, _typeFromAST.typeFromAST)(context.getSchema(), typeCondition) : parentType;
            _collectFieldsAndFragmentNames(
              context,
              inlineFragmentType,
              selection.selectionSet,
              nodeAndDefs,
              fragmentNames
            );
            break;
          }
        }
    }
    function subfieldConflicts(conflicts, responseName, node1, node2) {
      if (conflicts.length > 0)
        return [
          [responseName, conflicts.map(([reason]) => reason)],
          [node1, ...conflicts.map(([, fields1]) => fields1).flat()],
          [node2, ...conflicts.map(([, , fields2]) => fields2).flat()]
        ];
    }
    var OrderedPairSet = class {
      constructor() {
        this._data = /* @__PURE__ */ new Map();
      }
      has(a, b, weaklyPresent) {
        var _this$_data$get;
        let result = (_this$_data$get = this._data.get(a)) === null || _this$_data$get === void 0 ? void 0 : _this$_data$get.get(b);
        return result === void 0 ? !1 : weaklyPresent ? !0 : weaklyPresent === result;
      }
      add(a, b, weaklyPresent) {
        let map = this._data.get(a);
        map === void 0 ? this._data.set(a, /* @__PURE__ */ new Map([[b, weaklyPresent]])) : map.set(b, weaklyPresent);
      }
    }, PairSet = class {
      constructor() {
        this._orderedPairSet = new OrderedPairSet();
      }
      has(a, b, weaklyPresent) {
        return a < b ? this._orderedPairSet.has(a, b, weaklyPresent) : this._orderedPairSet.has(b, a, weaklyPresent);
      }
      add(a, b, weaklyPresent) {
        a < b ? this._orderedPairSet.add(a, b, weaklyPresent) : this._orderedPairSet.add(b, a, weaklyPresent);
      }
    };
  }
});

// node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.js
var require_PossibleFragmentSpreadsRule = __commonJS({
  "node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.PossibleFragmentSpreadsRule = PossibleFragmentSpreadsRule;
    var _inspect = require_inspect(), _GraphQLError = require_GraphQLError(), _definition = require_definition(), _typeComparators = require_typeComparators(), _typeFromAST = require_typeFromAST();
    function PossibleFragmentSpreadsRule(context) {
      return {
        InlineFragment(node) {
          let fragType = context.getType(), parentType = context.getParentType();
          if ((0, _definition.isCompositeType)(fragType) && (0, _definition.isCompositeType)(parentType) && !(0, _typeComparators.doTypesOverlap)(
            context.getSchema(),
            fragType,
            parentType
          )) {
            let parentTypeStr = (0, _inspect.inspect)(parentType), fragTypeStr = (0, _inspect.inspect)(fragType);
            context.reportError(
              new _GraphQLError.GraphQLError(
                `Fragment cannot be spread here as objects of type "${parentTypeStr}" can never be of type "${fragTypeStr}".`,
                {
                  nodes: node
                }
              )
            );
          }
        },
        FragmentSpread(node) {
          let fragName = node.name.value, fragType = getFragmentType(context, fragName), parentType = context.getParentType();
          if (fragType && parentType && !(0, _typeComparators.doTypesOverlap)(
            context.getSchema(),
            fragType,
            parentType
          )) {
            let parentTypeStr = (0, _inspect.inspect)(parentType), fragTypeStr = (0, _inspect.inspect)(fragType);
            context.reportError(
              new _GraphQLError.GraphQLError(
                `Fragment "${fragName}" cannot be spread here as objects of type "${parentTypeStr}" can never be of type "${fragTypeStr}".`,
                {
                  nodes: node
                }
              )
            );
          }
        }
      };
    }
    function getFragmentType(context, name) {
      let frag = context.getFragment(name);
      if (frag) {
        let type = (0, _typeFromAST.typeFromAST)(
          context.getSchema(),
          frag.typeCondition
        );
        if ((0, _definition.isCompositeType)(type))
          return type;
      }
    }
  }
});

// node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.js
var require_PossibleTypeExtensionsRule = __commonJS({
  "node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.PossibleTypeExtensionsRule = PossibleTypeExtensionsRule;
    var _didYouMean = require_didYouMean(), _inspect = require_inspect(), _invariant = require_invariant(), _suggestionList = require_suggestionList(), _GraphQLError = require_GraphQLError(), _kinds = require_kinds(), _predicates = require_predicates(), _definition = require_definition();
    function PossibleTypeExtensionsRule(context) {
      let schema = context.getSchema(), definedTypes = /* @__PURE__ */ Object.create(null);
      for (let def of context.getDocument().definitions)
        (0, _predicates.isTypeDefinitionNode)(def) && (definedTypes[def.name.value] = def);
      return {
        ScalarTypeExtension: checkExtension,
        ObjectTypeExtension: checkExtension,
        InterfaceTypeExtension: checkExtension,
        UnionTypeExtension: checkExtension,
        EnumTypeExtension: checkExtension,
        InputObjectTypeExtension: checkExtension
      };
      function checkExtension(node) {
        let typeName = node.name.value, defNode = definedTypes[typeName], existingType = schema?.getType(typeName), expectedKind;
        if (defNode ? expectedKind = defKindToExtKind[defNode.kind] : existingType && (expectedKind = typeToExtKind(existingType)), expectedKind) {
          if (expectedKind !== node.kind) {
            let kindStr = extensionKindToTypeName(node.kind);
            context.reportError(
              new _GraphQLError.GraphQLError(
                `Cannot extend non-${kindStr} type "${typeName}".`,
                {
                  nodes: defNode ? [defNode, node] : node
                }
              )
            );
          }
        } else {
          let allTypeNames = Object.keys({
            ...definedTypes,
            ...schema?.getTypeMap()
          }), suggestedTypes = (0, _suggestionList.suggestionList)(
            typeName,
            allTypeNames
          );
          context.reportError(
            new _GraphQLError.GraphQLError(
              `Cannot extend type "${typeName}" because it is not defined.` + (0, _didYouMean.didYouMean)(suggestedTypes),
              {
                nodes: node.name
              }
            )
          );
        }
      }
    }
    var defKindToExtKind = {
      [_kinds.Kind.SCALAR_TYPE_DEFINITION]: _kinds.Kind.SCALAR_TYPE_EXTENSION,
      [_kinds.Kind.OBJECT_TYPE_DEFINITION]: _kinds.Kind.OBJECT_TYPE_EXTENSION,
      [_kinds.Kind.INTERFACE_TYPE_DEFINITION]: _kinds.Kind.INTERFACE_TYPE_EXTENSION,
      [_kinds.Kind.UNION_TYPE_DEFINITION]: _kinds.Kind.UNION_TYPE_EXTENSION,
      [_kinds.Kind.ENUM_TYPE_DEFINITION]: _kinds.Kind.ENUM_TYPE_EXTENSION,
      [_kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION]: _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION
    };
    function typeToExtKind(type) {
      if ((0, _definition.isScalarType)(type))
        return _kinds.Kind.SCALAR_TYPE_EXTENSION;
      if ((0, _definition.isObjectType)(type))
        return _kinds.Kind.OBJECT_TYPE_EXTENSION;
      if ((0, _definition.isInterfaceType)(type))
        return _kinds.Kind.INTERFACE_TYPE_EXTENSION;
      if ((0, _definition.isUnionType)(type))
        return _kinds.Kind.UNION_TYPE_EXTENSION;
      if ((0, _definition.isEnumType)(type))
        return _kinds.Kind.ENUM_TYPE_EXTENSION;
      if ((0, _definition.isInputObjectType)(type))
        return _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION;
      (0, _invariant.invariant)(
        !1,
        "Unexpected type: " + (0, _inspect.inspect)(type)
      );
    }
    function extensionKindToTypeName(kind) {
      switch (kind) {
        case _kinds.Kind.SCALAR_TYPE_EXTENSION:
          return "scalar";
        case _kinds.Kind.OBJECT_TYPE_EXTENSION:
          return "object";
        case _kinds.Kind.INTERFACE_TYPE_EXTENSION:
          return "interface";
        case _kinds.Kind.UNION_TYPE_EXTENSION:
          return "union";
        case _kinds.Kind.ENUM_TYPE_EXTENSION:
          return "enum";
        case _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION:
          return "input object";
        default:
          (0, _invariant.invariant)(
            !1,
            "Unexpected kind: " + (0, _inspect.inspect)(kind)
          );
      }
    }
  }
});

// node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.js
var require_ProvidedRequiredArgumentsRule = __commonJS({
  "node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.ProvidedRequiredArgumentsOnDirectivesRule = ProvidedRequiredArgumentsOnDirectivesRule;
    exports.ProvidedRequiredArgumentsRule = ProvidedRequiredArgumentsRule;
    var _inspect = require_inspect(), _keyMap = require_keyMap(), _GraphQLError = require_GraphQLError(), _kinds = require_kinds(), _printer = require_printer(), _definition = require_definition(), _directives = require_directives();
    function ProvidedRequiredArgumentsRule(context) {
      return {
        // eslint-disable-next-line new-cap
        ...ProvidedRequiredArgumentsOnDirectivesRule(context),
        Field: {
          // Validate on leave to allow for deeper errors to appear first.
          leave(fieldNode) {
            var _fieldNode$arguments;
            let fieldDef = context.getFieldDef();
            if (!fieldDef)
              return !1;
            let providedArgs = new Set(
              // FIXME: https://github.com/graphql/graphql-js/issues/2203
              /* c8 ignore next */
              (_fieldNode$arguments = fieldNode.arguments) === null || _fieldNode$arguments === void 0 ? void 0 : _fieldNode$arguments.map((arg) => arg.name.value)
            );
            for (let argDef of fieldDef.args)
              if (!providedArgs.has(argDef.name) && (0, _definition.isRequiredArgument)(argDef)) {
                let argTypeStr = (0, _inspect.inspect)(argDef.type);
                context.reportError(
                  new _GraphQLError.GraphQLError(
                    `Field "${fieldDef.name}" argument "${argDef.name}" of type "${argTypeStr}" is required, but it was not provided.`,
                    {
                      nodes: fieldNode
                    }
                  )
                );
              }
          }
        }
      };
    }
    function ProvidedRequiredArgumentsOnDirectivesRule(context) {
      var _schema$getDirectives;
      let requiredArgsMap = /* @__PURE__ */ Object.create(null), schema = context.getSchema(), definedDirectives = (_schema$getDirectives = schema?.getDirectives()) !== null && _schema$getDirectives !== void 0 ? _schema$getDirectives : _directives.specifiedDirectives;
      for (let directive of definedDirectives)
        requiredArgsMap[directive.name] = (0, _keyMap.keyMap)(
          directive.args.filter(_definition.isRequiredArgument),
          (arg) => arg.name
        );
      let astDefinitions = context.getDocument().definitions;
      for (let def of astDefinitions)
        if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {
          var _def$arguments;
          let argNodes = (_def$arguments = def.arguments) !== null && _def$arguments !== void 0 ? _def$arguments : [];
          requiredArgsMap[def.name.value] = (0, _keyMap.keyMap)(
            argNodes.filter(isRequiredArgumentNode),
            (arg) => arg.name.value
          );
        }
      return {
        Directive: {
          // Validate on leave to allow for deeper errors to appear first.
          leave(directiveNode) {
            let directiveName = directiveNode.name.value, requiredArgs = requiredArgsMap[directiveName];
            if (requiredArgs) {
              var _directiveNode$argume;
              let argNodes = (_directiveNode$argume = directiveNode.arguments) !== null && _directiveNode$argume !== void 0 ? _directiveNode$argume : [], argNodeMap = new Set(argNodes.map((arg) => arg.name.value));
              for (let [argName, argDef] of Object.entries(requiredArgs))
                if (!argNodeMap.has(argName)) {
                  let argType = (0, _definition.isType)(argDef.type) ? (0, _inspect.inspect)(argDef.type) : (0, _printer.print)(argDef.type);
                  context.reportError(
                    new _GraphQLError.GraphQLError(
                      `Directive "@${directiveName}" argument "${argName}" of type "${argType}" is required, but it was not provided.`,
                      {
                        nodes: directiveNode
                      }
                    )
                  );
                }
            }
          }
        }
      };
    }
    function isRequiredArgumentNode(arg) {
      return arg.type.kind === _kinds.Kind.NON_NULL_TYPE && arg.defaultValue == null;
    }
  }
});

// node_modules/graphql/validation/rules/ScalarLeafsRule.js
var require_ScalarLeafsRule = __commonJS({
  "node_modules/graphql/validation/rules/ScalarLeafsRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.ScalarLeafsRule = ScalarLeafsRule;
    var _inspect = require_inspect(), _GraphQLError = require_GraphQLError(), _definition = require_definition();
    function ScalarLeafsRule(context) {
      return {
        Field(node) {
          let type = context.getType(), selectionSet = node.selectionSet;
          if (type)
            if ((0, _definition.isLeafType)((0, _definition.getNamedType)(type))) {
              if (selectionSet) {
                let fieldName = node.name.value, typeStr = (0, _inspect.inspect)(type);
                context.reportError(
                  new _GraphQLError.GraphQLError(
                    `Field "${fieldName}" must not have a selection since type "${typeStr}" has no subfields.`,
                    {
                      nodes: selectionSet
                    }
                  )
                );
              }
            } else if (selectionSet) {
              if (selectionSet.selections.length === 0) {
                let fieldName = node.name.value, typeStr = (0, _inspect.inspect)(type);
                context.reportError(
                  new _GraphQLError.GraphQLError(
                    `Field "${fieldName}" of type "${typeStr}" must have at least one field selected.`,
                    {
                      nodes: node
                    }
                  )
                );
              }
            } else {
              let fieldName = node.name.value, typeStr = (0, _inspect.inspect)(type);
              context.reportError(
                new _GraphQLError.GraphQLError(
                  `Field "${fieldName}" of type "${typeStr}" must have a selection of subfields. Did you mean "${fieldName} { ... }"?`,
                  {
                    nodes: node
                  }
                )
              );
            }
        }
      };
    }
  }
});

// node_modules/graphql/jsutils/printPathArray.js
var require_printPathArray = __commonJS({
  "node_modules/graphql/jsutils/printPathArray.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.printPathArray = printPathArray;
    function printPathArray(path) {
      return path.map(
        (key) => typeof key == "number" ? "[" + key.toString() + "]" : "." + key
      ).join("");
    }
  }
});

// node_modules/graphql/jsutils/Path.js
var require_Path = __commonJS({
  "node_modules/graphql/jsutils/Path.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.addPath = addPath;
    exports.pathToArray = pathToArray;
    function addPath(prev, key, typename) {
      return {
        prev,
        key,
        typename
      };
    }
    function pathToArray(path) {
      let flattened = [], curr = path;
      for (; curr; )
        flattened.push(curr.key), curr = curr.prev;
      return flattened.reverse();
    }
  }
});

// node_modules/graphql/utilities/coerceInputValue.js
var require_coerceInputValue = __commonJS({
  "node_modules/graphql/utilities/coerceInputValue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.coerceInputValue = coerceInputValue;
    var _didYouMean = require_didYouMean(), _inspect = require_inspect(), _invariant = require_invariant(), _isIterableObject = require_isIterableObject(), _isObjectLike = require_isObjectLike(), _Path = require_Path(), _printPathArray = require_printPathArray(), _suggestionList = require_suggestionList(), _GraphQLError = require_GraphQLError(), _definition = require_definition();
    function coerceInputValue(inputValue, type, onError = defaultOnError) {
      return coerceInputValueImpl(inputValue, type, onError, void 0);
    }
    function defaultOnError(path, invalidValue, error) {
      let errorPrefix = "Invalid value " + (0, _inspect.inspect)(invalidValue);
      throw path.length > 0 && (errorPrefix += ` at "value${(0, _printPathArray.printPathArray)(path)}"`), error.message = errorPrefix + ": " + error.message, error;
    }
    function coerceInputValueImpl(inputValue, type, onError, path) {
      if ((0, _definition.isNonNullType)(type)) {
        if (inputValue != null)
          return coerceInputValueImpl(inputValue, type.ofType, onError, path);
        onError(
          (0, _Path.pathToArray)(path),
          inputValue,
          new _GraphQLError.GraphQLError(
            `Expected non-nullable type "${(0, _inspect.inspect)(
              type
            )}" not to be null.`
          )
        );
        return;
      }
      if (inputValue == null)
        return null;
      if ((0, _definition.isListType)(type)) {
        let itemType = type.ofType;
        return (0, _isIterableObject.isIterableObject)(inputValue) ? Array.from(inputValue, (itemValue, index) => {
          let itemPath = (0, _Path.addPath)(path, index, void 0);
          return coerceInputValueImpl(itemValue, itemType, onError, itemPath);
        }) : [coerceInputValueImpl(inputValue, itemType, onError, path)];
      }
      if ((0, _definition.isInputObjectType)(type)) {
        if (!(0, _isObjectLike.isObjectLike)(inputValue) || Array.isArray(inputValue)) {
          onError(
            (0, _Path.pathToArray)(path),
            inputValue,
            new _GraphQLError.GraphQLError(
              `Expected type "${type.name}" to be an object.`
            )
          );
          return;
        }
        let coercedValue = {}, fieldDefs = type.getFields();
        for (let field of Object.values(fieldDefs)) {
          let fieldValue = inputValue[field.name];
          if (fieldValue === void 0) {
            if (field.defaultValue !== void 0)
              coercedValue[field.name] = field.defaultValue;
            else if ((0, _definition.isNonNullType)(field.type)) {
              let typeStr = (0, _inspect.inspect)(field.type);
              onError(
                (0, _Path.pathToArray)(path),
                inputValue,
                new _GraphQLError.GraphQLError(
                  `Field "${field.name}" of required type "${typeStr}" was not provided.`
                )
              );
            }
            continue;
          }
          coercedValue[field.name] = coerceInputValueImpl(
            fieldValue,
            field.type,
            onError,
            (0, _Path.addPath)(path, field.name, type.name)
          );
        }
        for (let fieldName of Object.keys(inputValue))
          if (!fieldDefs[fieldName]) {
            let suggestions = (0, _suggestionList.suggestionList)(
              fieldName,
              Object.keys(type.getFields())
            );
            onError(
              (0, _Path.pathToArray)(path),
              inputValue,
              new _GraphQLError.GraphQLError(
                `Field "${fieldName}" is not defined by type "${type.name}".` + (0, _didYouMean.didYouMean)(suggestions)
              )
            );
          }
        if (type.isOneOf) {
          let keys = Object.keys(coercedValue);
          keys.length !== 1 && onError(
            (0, _Path.pathToArray)(path),
            inputValue,
            new _GraphQLError.GraphQLError(
              `Exactly one key must be specified for OneOf type "${type.name}".`
            )
          );
          let key = keys[0], value = coercedValue[key];
          value === null && onError(
            (0, _Path.pathToArray)(path).concat(key),
            value,
            new _GraphQLError.GraphQLError(`Field "${key}" must be non-null.`)
          );
        }
        return coercedValue;
      }
      if ((0, _definition.isLeafType)(type)) {
        let parseResult;
        try {
          parseResult = type.parseValue(inputValue);
        } catch (error) {
          error instanceof _GraphQLError.GraphQLError ? onError((0, _Path.pathToArray)(path), inputValue, error) : onError(
            (0, _Path.pathToArray)(path),
            inputValue,
            new _GraphQLError.GraphQLError(
              `Expected type "${type.name}". ` + error.message,
              {
                originalError: error
              }
            )
          );
          return;
        }
        return parseResult === void 0 && onError(
          (0, _Path.pathToArray)(path),
          inputValue,
          new _GraphQLError.GraphQLError(`Expected type "${type.name}".`)
        ), parseResult;
      }
      (0, _invariant.invariant)(
        !1,
        "Unexpected input type: " + (0, _inspect.inspect)(type)
      );
    }
  }
});

// node_modules/graphql/utilities/valueFromAST.js
var require_valueFromAST = __commonJS({
  "node_modules/graphql/utilities/valueFromAST.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.valueFromAST = valueFromAST;
    var _inspect = require_inspect(), _invariant = require_invariant(), _keyMap = require_keyMap(), _kinds = require_kinds(), _definition = require_definition();
    function valueFromAST(valueNode, type, variables) {
      if (valueNode) {
        if (valueNode.kind === _kinds.Kind.VARIABLE) {
          let variableName = valueNode.name.value;
          if (variables == null || variables[variableName] === void 0)
            return;
          let variableValue = variables[variableName];
          return variableValue === null && (0, _definition.isNonNullType)(type) ? void 0 : variableValue;
        }
        if ((0, _definition.isNonNullType)(type))
          return valueNode.kind === _kinds.Kind.NULL ? void 0 : valueFromAST(valueNode, type.ofType, variables);
        if (valueNode.kind === _kinds.Kind.NULL)
          return null;
        if ((0, _definition.isListType)(type)) {
          let itemType = type.ofType;
          if (valueNode.kind === _kinds.Kind.LIST) {
            let coercedValues = [];
            for (let itemNode of valueNode.values)
              if (isMissingVariable(itemNode, variables)) {
                if ((0, _definition.isNonNullType)(itemType))
                  return;
                coercedValues.push(null);
              } else {
                let itemValue = valueFromAST(itemNode, itemType, variables);
                if (itemValue === void 0)
                  return;
                coercedValues.push(itemValue);
              }
            return coercedValues;
          }
          let coercedValue = valueFromAST(valueNode, itemType, variables);
          return coercedValue === void 0 ? void 0 : [coercedValue];
        }
        if ((0, _definition.isInputObjectType)(type)) {
          if (valueNode.kind !== _kinds.Kind.OBJECT)
            return;
          let coercedObj = /* @__PURE__ */ Object.create(null), fieldNodes = (0, _keyMap.keyMap)(
            valueNode.fields,
            (field) => field.name.value
          );
          for (let field of Object.values(type.getFields())) {
            let fieldNode = fieldNodes[field.name];
            if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {
              if (field.defaultValue !== void 0)
                coercedObj[field.name] = field.defaultValue;
              else if ((0, _definition.isNonNullType)(field.type))
                return;
              continue;
            }
            let fieldValue = valueFromAST(fieldNode.value, field.type, variables);
            if (fieldValue === void 0)
              return;
            coercedObj[field.name] = fieldValue;
          }
          if (type.isOneOf) {
            let keys = Object.keys(coercedObj);
            if (keys.length !== 1 || coercedObj[keys[0]] === null)
              return;
          }
          return coercedObj;
        }
        if ((0, _definition.isLeafType)(type)) {
          let result;
          try {
            result = type.parseLiteral(valueNode, variables);
          } catch {
            return;
          }
          return result === void 0 ? void 0 : result;
        }
        (0, _invariant.invariant)(
          !1,
          "Unexpected input type: " + (0, _inspect.inspect)(type)
        );
      }
    }
    function isMissingVariable(valueNode, variables) {
      return valueNode.kind === _kinds.Kind.VARIABLE && (variables == null || variables[valueNode.name.value] === void 0);
    }
  }
});

// node_modules/graphql/execution/values.js
var require_values = __commonJS({
  "node_modules/graphql/execution/values.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.getArgumentValues = getArgumentValues;
    exports.getDirectiveValues = getDirectiveValues;
    exports.getVariableValues = getVariableValues;
    var _inspect = require_inspect(), _keyMap = require_keyMap(), _printPathArray = require_printPathArray(), _GraphQLError = require_GraphQLError(), _kinds = require_kinds(), _printer = require_printer(), _definition = require_definition(), _coerceInputValue = require_coerceInputValue(), _typeFromAST = require_typeFromAST(), _valueFromAST = require_valueFromAST();
    function getVariableValues(schema, varDefNodes, inputs, options) {
      let errors = [], maxErrors = options?.maxErrors;
      try {
        let coerced = coerceVariableValues(
          schema,
          varDefNodes,
          inputs,
          (error) => {
            if (maxErrors != null && errors.length >= maxErrors)
              throw new _GraphQLError.GraphQLError(
                "Too many errors processing variables, error limit reached. Execution aborted."
              );
            errors.push(error);
          }
        );
        if (errors.length === 0)
          return {
            coerced
          };
      } catch (error) {
        errors.push(error);
      }
      return {
        errors
      };
    }
    function coerceVariableValues(schema, varDefNodes, inputs, onError) {
      let coercedValues = {};
      for (let varDefNode of varDefNodes) {
        let varName = varDefNode.variable.name.value, varType = (0, _typeFromAST.typeFromAST)(schema, varDefNode.type);
        if (!(0, _definition.isInputType)(varType)) {
          let varTypeStr = (0, _printer.print)(varDefNode.type);
          onError(
            new _GraphQLError.GraphQLError(
              `Variable "$${varName}" expected value of type "${varTypeStr}" which cannot be used as an input type.`,
              {
                nodes: varDefNode.type
              }
            )
          );
          continue;
        }
        if (!hasOwnProperty(inputs, varName)) {
          if (varDefNode.defaultValue)
            coercedValues[varName] = (0, _valueFromAST.valueFromAST)(
              varDefNode.defaultValue,
              varType
            );
          else if ((0, _definition.isNonNullType)(varType)) {
            let varTypeStr = (0, _inspect.inspect)(varType);
            onError(
              new _GraphQLError.GraphQLError(
                `Variable "$${varName}" of required type "${varTypeStr}" was not provided.`,
                {
                  nodes: varDefNode
                }
              )
            );
          }
          continue;
        }
        let value = inputs[varName];
        if (value === null && (0, _definition.isNonNullType)(varType)) {
          let varTypeStr = (0, _inspect.inspect)(varType);
          onError(
            new _GraphQLError.GraphQLError(
              `Variable "$${varName}" of non-null type "${varTypeStr}" must not be null.`,
              {
                nodes: varDefNode
              }
            )
          );
          continue;
        }
        coercedValues[varName] = (0, _coerceInputValue.coerceInputValue)(
          value,
          varType,
          (path, invalidValue, error) => {
            let prefix = `Variable "$${varName}" got invalid value ` + (0, _inspect.inspect)(invalidValue);
            path.length > 0 && (prefix += ` at "${varName}${(0, _printPathArray.printPathArray)(
              path
            )}"`), onError(
              new _GraphQLError.GraphQLError(prefix + "; " + error.message, {
                nodes: varDefNode,
                originalError: error
              })
            );
          }
        );
      }
      return coercedValues;
    }
    function getArgumentValues(def, node, variableValues) {
      var _node$arguments;
      let coercedValues = {}, argumentNodes = (_node$arguments = node.arguments) !== null && _node$arguments !== void 0 ? _node$arguments : [], argNodeMap = (0, _keyMap.keyMap)(
        argumentNodes,
        (arg) => arg.name.value
      );
      for (let argDef of def.args) {
        let name = argDef.name, argType = argDef.type, argumentNode = argNodeMap[name];
        if (!argumentNode) {
          if (argDef.defaultValue !== void 0)
            coercedValues[name] = argDef.defaultValue;
          else if ((0, _definition.isNonNullType)(argType))
            throw new _GraphQLError.GraphQLError(
              `Argument "${name}" of required type "${(0, _inspect.inspect)(
                argType
              )}" was not provided.`,
              {
                nodes: node
              }
            );
          continue;
        }
        let valueNode = argumentNode.value, isNull = valueNode.kind === _kinds.Kind.NULL;
        if (valueNode.kind === _kinds.Kind.VARIABLE) {
          let variableName = valueNode.name.value;
          if (variableValues == null || !hasOwnProperty(variableValues, variableName)) {
            if (argDef.defaultValue !== void 0)
              coercedValues[name] = argDef.defaultValue;
            else if ((0, _definition.isNonNullType)(argType))
              throw new _GraphQLError.GraphQLError(
                `Argument "${name}" of required type "${(0, _inspect.inspect)(
                  argType
                )}" was provided the variable "$${variableName}" which was not provided a runtime value.`,
                {
                  nodes: valueNode
                }
              );
            continue;
          }
          isNull = variableValues[variableName] == null;
        }
        if (isNull && (0, _definition.isNonNullType)(argType))
          throw new _GraphQLError.GraphQLError(
            `Argument "${name}" of non-null type "${(0, _inspect.inspect)(
              argType
            )}" must not be null.`,
            {
              nodes: valueNode
            }
          );
        let coercedValue = (0, _valueFromAST.valueFromAST)(
          valueNode,
          argType,
          variableValues
        );
        if (coercedValue === void 0)
          throw new _GraphQLError.GraphQLError(
            `Argument "${name}" has invalid value ${(0, _printer.print)(
              valueNode
            )}.`,
            {
              nodes: valueNode
            }
          );
        coercedValues[name] = coercedValue;
      }
      return coercedValues;
    }
    function getDirectiveValues(directiveDef, node, variableValues) {
      var _node$directives;
      let directiveNode = (_node$directives = node.directives) === null || _node$directives === void 0 ? void 0 : _node$directives.find(
        (directive) => directive.name.value === directiveDef.name
      );
      if (directiveNode)
        return getArgumentValues(directiveDef, directiveNode, variableValues);
    }
    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
  }
});

// node_modules/graphql/execution/collectFields.js
var require_collectFields = __commonJS({
  "node_modules/graphql/execution/collectFields.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.collectFields = collectFields;
    exports.collectSubfields = collectSubfields;
    var _kinds = require_kinds(), _definition = require_definition(), _directives = require_directives(), _typeFromAST = require_typeFromAST(), _values = require_values();
    function collectFields(schema, fragments, variableValues, runtimeType, selectionSet) {
      let fields = /* @__PURE__ */ new Map();
      return collectFieldsImpl(
        schema,
        fragments,
        variableValues,
        runtimeType,
        selectionSet,
        fields,
        /* @__PURE__ */ new Set()
      ), fields;
    }
    function collectSubfields(schema, fragments, variableValues, returnType, fieldNodes) {
      let subFieldNodes = /* @__PURE__ */ new Map(), visitedFragmentNames = /* @__PURE__ */ new Set();
      for (let node of fieldNodes)
        node.selectionSet && collectFieldsImpl(
          schema,
          fragments,
          variableValues,
          returnType,
          node.selectionSet,
          subFieldNodes,
          visitedFragmentNames
        );
      return subFieldNodes;
    }
    function collectFieldsImpl(schema, fragments, variableValues, runtimeType, selectionSet, fields, visitedFragmentNames) {
      for (let selection of selectionSet.selections)
        switch (selection.kind) {
          case _kinds.Kind.FIELD: {
            if (!shouldIncludeNode(variableValues, selection))
              continue;
            let name = getFieldEntryKey(selection), fieldList = fields.get(name);
            fieldList !== void 0 ? fieldList.push(selection) : fields.set(name, [selection]);
            break;
          }
          case _kinds.Kind.INLINE_FRAGMENT: {
            if (!shouldIncludeNode(variableValues, selection) || !doesFragmentConditionMatch(schema, selection, runtimeType))
              continue;
            collectFieldsImpl(
              schema,
              fragments,
              variableValues,
              runtimeType,
              selection.selectionSet,
              fields,
              visitedFragmentNames
            );
            break;
          }
          case _kinds.Kind.FRAGMENT_SPREAD: {
            let fragName = selection.name.value;
            if (visitedFragmentNames.has(fragName) || !shouldIncludeNode(variableValues, selection))
              continue;
            visitedFragmentNames.add(fragName);
            let fragment = fragments[fragName];
            if (!fragment || !doesFragmentConditionMatch(schema, fragment, runtimeType))
              continue;
            collectFieldsImpl(
              schema,
              fragments,
              variableValues,
              runtimeType,
              fragment.selectionSet,
              fields,
              visitedFragmentNames
            );
            break;
          }
        }
    }
    function shouldIncludeNode(variableValues, node) {
      let skip = (0, _values.getDirectiveValues)(
        _directives.GraphQLSkipDirective,
        node,
        variableValues
      );
      if (skip?.if === !0)
        return !1;
      let include = (0, _values.getDirectiveValues)(
        _directives.GraphQLIncludeDirective,
        node,
        variableValues
      );
      return include?.if !== !1;
    }
    function doesFragmentConditionMatch(schema, fragment, type) {
      let typeConditionNode = fragment.typeCondition;
      if (!typeConditionNode)
        return !0;
      let conditionalType = (0, _typeFromAST.typeFromAST)(
        schema,
        typeConditionNode
      );
      return conditionalType === type ? !0 : (0, _definition.isAbstractType)(conditionalType) ? schema.isSubType(conditionalType, type) : !1;
    }
    function getFieldEntryKey(node) {
      return node.alias ? node.alias.value : node.name.value;
    }
  }
});

// node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.js
var require_SingleFieldSubscriptionsRule = __commonJS({
  "node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.SingleFieldSubscriptionsRule = SingleFieldSubscriptionsRule;
    var _GraphQLError = require_GraphQLError(), _kinds = require_kinds(), _collectFields = require_collectFields();
    function SingleFieldSubscriptionsRule(context) {
      return {
        OperationDefinition(node) {
          if (node.operation === "subscription") {
            let schema = context.getSchema(), subscriptionType = schema.getSubscriptionType();
            if (subscriptionType) {
              let operationName = node.name ? node.name.value : null, variableValues = /* @__PURE__ */ Object.create(null), document2 = context.getDocument(), fragments = /* @__PURE__ */ Object.create(null);
              for (let definition of document2.definitions)
                definition.kind === _kinds.Kind.FRAGMENT_DEFINITION && (fragments[definition.name.value] = definition);
              let fields = (0, _collectFields.collectFields)(
                schema,
                fragments,
                variableValues,
                subscriptionType,
                node.selectionSet
              );
              if (fields.size > 1) {
                let extraFieldSelections = [...fields.values()].slice(1).flat();
                context.reportError(
                  new _GraphQLError.GraphQLError(
                    operationName != null ? `Subscription "${operationName}" must select only one top level field.` : "Anonymous Subscription must select only one top level field.",
                    {
                      nodes: extraFieldSelections
                    }
                  )
                );
              }
              for (let fieldNodes of fields.values())
                fieldNodes[0].name.value.startsWith("__") && context.reportError(
                  new _GraphQLError.GraphQLError(
                    operationName != null ? `Subscription "${operationName}" must not select an introspection top level field.` : "Anonymous Subscription must not select an introspection top level field.",
                    {
                      nodes: fieldNodes
                    }
                  )
                );
            }
          }
        }
      };
    }
  }
});

// node_modules/graphql/jsutils/groupBy.js
var require_groupBy = __commonJS({
  "node_modules/graphql/jsutils/groupBy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.groupBy = groupBy;
    function groupBy(list, keyFn) {
      let result = /* @__PURE__ */ new Map();
      for (let item of list) {
        let key = keyFn(item), group = result.get(key);
        group === void 0 ? result.set(key, [item]) : group.push(item);
      }
      return result;
    }
  }
});

// node_modules/graphql/validation/rules/UniqueArgumentDefinitionNamesRule.js
var require_UniqueArgumentDefinitionNamesRule = __commonJS({
  "node_modules/graphql/validation/rules/UniqueArgumentDefinitionNamesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.UniqueArgumentDefinitionNamesRule = UniqueArgumentDefinitionNamesRule;
    var _groupBy = require_groupBy(), _GraphQLError = require_GraphQLError();
    function UniqueArgumentDefinitionNamesRule(context) {
      return {
        DirectiveDefinition(directiveNode) {
          var _directiveNode$argume;
          let argumentNodes = (_directiveNode$argume = directiveNode.arguments) !== null && _directiveNode$argume !== void 0 ? _directiveNode$argume : [];
          return checkArgUniqueness(`@${directiveNode.name.value}`, argumentNodes);
        },
        InterfaceTypeDefinition: checkArgUniquenessPerField,
        InterfaceTypeExtension: checkArgUniquenessPerField,
        ObjectTypeDefinition: checkArgUniquenessPerField,
        ObjectTypeExtension: checkArgUniquenessPerField
      };
      function checkArgUniquenessPerField(typeNode) {
        var _typeNode$fields;
        let typeName = typeNode.name.value, fieldNodes = (_typeNode$fields = typeNode.fields) !== null && _typeNode$fields !== void 0 ? _typeNode$fields : [];
        for (let fieldDef of fieldNodes) {
          var _fieldDef$arguments;
          let fieldName = fieldDef.name.value, argumentNodes = (_fieldDef$arguments = fieldDef.arguments) !== null && _fieldDef$arguments !== void 0 ? _fieldDef$arguments : [];
          checkArgUniqueness(`${typeName}.${fieldName}`, argumentNodes);
        }
        return !1;
      }
      function checkArgUniqueness(parentName, argumentNodes) {
        let seenArgs = (0, _groupBy.groupBy)(
          argumentNodes,
          (arg) => arg.name.value
        );
        for (let [argName, argNodes] of seenArgs)
          argNodes.length > 1 && context.reportError(
            new _GraphQLError.GraphQLError(
              `Argument "${parentName}(${argName}:)" can only be defined once.`,
              {
                nodes: argNodes.map((node) => node.name)
              }
            )
          );
        return !1;
      }
    }
  }
});

// node_modules/graphql/validation/rules/UniqueArgumentNamesRule.js
var require_UniqueArgumentNamesRule = __commonJS({
  "node_modules/graphql/validation/rules/UniqueArgumentNamesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.UniqueArgumentNamesRule = UniqueArgumentNamesRule;
    var _groupBy = require_groupBy(), _GraphQLError = require_GraphQLError();
    function UniqueArgumentNamesRule(context) {
      return {
        Field: checkArgUniqueness,
        Directive: checkArgUniqueness
      };
      function checkArgUniqueness(parentNode) {
        var _parentNode$arguments;
        let argumentNodes = (_parentNode$arguments = parentNode.arguments) !== null && _parentNode$arguments !== void 0 ? _parentNode$arguments : [], seenArgs = (0, _groupBy.groupBy)(
          argumentNodes,
          (arg) => arg.name.value
        );
        for (let [argName, argNodes] of seenArgs)
          argNodes.length > 1 && context.reportError(
            new _GraphQLError.GraphQLError(
              `There can be only one argument named "${argName}".`,
              {
                nodes: argNodes.map((node) => node.name)
              }
            )
          );
      }
    }
  }
});

// node_modules/graphql/validation/rules/UniqueDirectiveNamesRule.js
var require_UniqueDirectiveNamesRule = __commonJS({
  "node_modules/graphql/validation/rules/UniqueDirectiveNamesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.UniqueDirectiveNamesRule = UniqueDirectiveNamesRule;
    var _GraphQLError = require_GraphQLError();
    function UniqueDirectiveNamesRule(context) {
      let knownDirectiveNames = /* @__PURE__ */ Object.create(null), schema = context.getSchema();
      return {
        DirectiveDefinition(node) {
          let directiveName = node.name.value;
          if (schema != null && schema.getDirective(directiveName)) {
            context.reportError(
              new _GraphQLError.GraphQLError(
                `Directive "@${directiveName}" already exists in the schema. It cannot be redefined.`,
                {
                  nodes: node.name
                }
              )
            );
            return;
          }
          return knownDirectiveNames[directiveName] ? context.reportError(
            new _GraphQLError.GraphQLError(
              `There can be only one directive named "@${directiveName}".`,
              {
                nodes: [knownDirectiveNames[directiveName], node.name]
              }
            )
          ) : knownDirectiveNames[directiveName] = node.name, !1;
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.js
var require_UniqueDirectivesPerLocationRule = __commonJS({
  "node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.UniqueDirectivesPerLocationRule = UniqueDirectivesPerLocationRule;
    var _GraphQLError = require_GraphQLError(), _kinds = require_kinds(), _predicates = require_predicates(), _directives = require_directives();
    function UniqueDirectivesPerLocationRule(context) {
      let uniqueDirectiveMap = /* @__PURE__ */ Object.create(null), schema = context.getSchema(), definedDirectives = schema ? schema.getDirectives() : _directives.specifiedDirectives;
      for (let directive of definedDirectives)
        uniqueDirectiveMap[directive.name] = !directive.isRepeatable;
      let astDefinitions = context.getDocument().definitions;
      for (let def of astDefinitions)
        def.kind === _kinds.Kind.DIRECTIVE_DEFINITION && (uniqueDirectiveMap[def.name.value] = !def.repeatable);
      let schemaDirectives = /* @__PURE__ */ Object.create(null), typeDirectivesMap = /* @__PURE__ */ Object.create(null);
      return {
        // Many different AST nodes may contain directives. Rather than listing
        // them all, just listen for entering any node, and check to see if it
        // defines any directives.
        enter(node) {
          if (!("directives" in node) || !node.directives)
            return;
          let seenDirectives;
          if (node.kind === _kinds.Kind.SCHEMA_DEFINITION || node.kind === _kinds.Kind.SCHEMA_EXTENSION)
            seenDirectives = schemaDirectives;
          else if ((0, _predicates.isTypeDefinitionNode)(node) || (0, _predicates.isTypeExtensionNode)(node)) {
            let typeName = node.name.value;
            seenDirectives = typeDirectivesMap[typeName], seenDirectives === void 0 && (typeDirectivesMap[typeName] = seenDirectives = /* @__PURE__ */ Object.create(null));
          } else
            seenDirectives = /* @__PURE__ */ Object.create(null);
          for (let directive of node.directives) {
            let directiveName = directive.name.value;
            uniqueDirectiveMap[directiveName] && (seenDirectives[directiveName] ? context.reportError(
              new _GraphQLError.GraphQLError(
                `The directive "@${directiveName}" can only be used once at this location.`,
                {
                  nodes: [seenDirectives[directiveName], directive]
                }
              )
            ) : seenDirectives[directiveName] = directive);
          }
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.js
var require_UniqueEnumValueNamesRule = __commonJS({
  "node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.UniqueEnumValueNamesRule = UniqueEnumValueNamesRule;
    var _GraphQLError = require_GraphQLError(), _definition = require_definition();
    function UniqueEnumValueNamesRule(context) {
      let schema = context.getSchema(), existingTypeMap = schema ? schema.getTypeMap() : /* @__PURE__ */ Object.create(null), knownValueNames = /* @__PURE__ */ Object.create(null);
      return {
        EnumTypeDefinition: checkValueUniqueness,
        EnumTypeExtension: checkValueUniqueness
      };
      function checkValueUniqueness(node) {
        var _node$values;
        let typeName = node.name.value;
        knownValueNames[typeName] || (knownValueNames[typeName] = /* @__PURE__ */ Object.create(null));
        let valueNodes = (_node$values = node.values) !== null && _node$values !== void 0 ? _node$values : [], valueNames = knownValueNames[typeName];
        for (let valueDef of valueNodes) {
          let valueName = valueDef.name.value, existingType = existingTypeMap[typeName];
          (0, _definition.isEnumType)(existingType) && existingType.getValue(valueName) ? context.reportError(
            new _GraphQLError.GraphQLError(
              `Enum value "${typeName}.${valueName}" already exists in the schema. It cannot also be defined in this type extension.`,
              {
                nodes: valueDef.name
              }
            )
          ) : valueNames[valueName] ? context.reportError(
            new _GraphQLError.GraphQLError(
              `Enum value "${typeName}.${valueName}" can only be defined once.`,
              {
                nodes: [valueNames[valueName], valueDef.name]
              }
            )
          ) : valueNames[valueName] = valueDef.name;
        }
        return !1;
      }
    }
  }
});

// node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.js
var require_UniqueFieldDefinitionNamesRule = __commonJS({
  "node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.UniqueFieldDefinitionNamesRule = UniqueFieldDefinitionNamesRule;
    var _GraphQLError = require_GraphQLError(), _definition = require_definition();
    function UniqueFieldDefinitionNamesRule(context) {
      let schema = context.getSchema(), existingTypeMap = schema ? schema.getTypeMap() : /* @__PURE__ */ Object.create(null), knownFieldNames = /* @__PURE__ */ Object.create(null);
      return {
        InputObjectTypeDefinition: checkFieldUniqueness,
        InputObjectTypeExtension: checkFieldUniqueness,
        InterfaceTypeDefinition: checkFieldUniqueness,
        InterfaceTypeExtension: checkFieldUniqueness,
        ObjectTypeDefinition: checkFieldUniqueness,
        ObjectTypeExtension: checkFieldUniqueness
      };
      function checkFieldUniqueness(node) {
        var _node$fields;
        let typeName = node.name.value;
        knownFieldNames[typeName] || (knownFieldNames[typeName] = /* @__PURE__ */ Object.create(null));
        let fieldNodes = (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [], fieldNames = knownFieldNames[typeName];
        for (let fieldDef of fieldNodes) {
          let fieldName = fieldDef.name.value;
          hasField(existingTypeMap[typeName], fieldName) ? context.reportError(
            new _GraphQLError.GraphQLError(
              `Field "${typeName}.${fieldName}" already exists in the schema. It cannot also be defined in this type extension.`,
              {
                nodes: fieldDef.name
              }
            )
          ) : fieldNames[fieldName] ? context.reportError(
            new _GraphQLError.GraphQLError(
              `Field "${typeName}.${fieldName}" can only be defined once.`,
              {
                nodes: [fieldNames[fieldName], fieldDef.name]
              }
            )
          ) : fieldNames[fieldName] = fieldDef.name;
        }
        return !1;
      }
    }
    function hasField(type, fieldName) {
      return (0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type) || (0, _definition.isInputObjectType)(type) ? type.getFields()[fieldName] != null : !1;
    }
  }
});

// node_modules/graphql/validation/rules/UniqueFragmentNamesRule.js
var require_UniqueFragmentNamesRule = __commonJS({
  "node_modules/graphql/validation/rules/UniqueFragmentNamesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.UniqueFragmentNamesRule = UniqueFragmentNamesRule;
    var _GraphQLError = require_GraphQLError();
    function UniqueFragmentNamesRule(context) {
      let knownFragmentNames = /* @__PURE__ */ Object.create(null);
      return {
        OperationDefinition: () => !1,
        FragmentDefinition(node) {
          let fragmentName = node.name.value;
          return knownFragmentNames[fragmentName] ? context.reportError(
            new _GraphQLError.GraphQLError(
              `There can be only one fragment named "${fragmentName}".`,
              {
                nodes: [knownFragmentNames[fragmentName], node.name]
              }
            )
          ) : knownFragmentNames[fragmentName] = node.name, !1;
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.js
var require_UniqueInputFieldNamesRule = __commonJS({
  "node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.UniqueInputFieldNamesRule = UniqueInputFieldNamesRule;
    var _invariant = require_invariant(), _GraphQLError = require_GraphQLError();
    function UniqueInputFieldNamesRule(context) {
      let knownNameStack = [], knownNames = /* @__PURE__ */ Object.create(null);
      return {
        ObjectValue: {
          enter() {
            knownNameStack.push(knownNames), knownNames = /* @__PURE__ */ Object.create(null);
          },
          leave() {
            let prevKnownNames = knownNameStack.pop();
            prevKnownNames || (0, _invariant.invariant)(!1), knownNames = prevKnownNames;
          }
        },
        ObjectField(node) {
          let fieldName = node.name.value;
          knownNames[fieldName] ? context.reportError(
            new _GraphQLError.GraphQLError(
              `There can be only one input field named "${fieldName}".`,
              {
                nodes: [knownNames[fieldName], node.name]
              }
            )
          ) : knownNames[fieldName] = node.name;
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/UniqueOperationNamesRule.js
var require_UniqueOperationNamesRule = __commonJS({
  "node_modules/graphql/validation/rules/UniqueOperationNamesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.UniqueOperationNamesRule = UniqueOperationNamesRule;
    var _GraphQLError = require_GraphQLError();
    function UniqueOperationNamesRule(context) {
      let knownOperationNames = /* @__PURE__ */ Object.create(null);
      return {
        OperationDefinition(node) {
          let operationName = node.name;
          return operationName && (knownOperationNames[operationName.value] ? context.reportError(
            new _GraphQLError.GraphQLError(
              `There can be only one operation named "${operationName.value}".`,
              {
                nodes: [
                  knownOperationNames[operationName.value],
                  operationName
                ]
              }
            )
          ) : knownOperationNames[operationName.value] = operationName), !1;
        },
        FragmentDefinition: () => !1
      };
    }
  }
});

// node_modules/graphql/validation/rules/UniqueOperationTypesRule.js
var require_UniqueOperationTypesRule = __commonJS({
  "node_modules/graphql/validation/rules/UniqueOperationTypesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.UniqueOperationTypesRule = UniqueOperationTypesRule;
    var _GraphQLError = require_GraphQLError();
    function UniqueOperationTypesRule(context) {
      let schema = context.getSchema(), definedOperationTypes = /* @__PURE__ */ Object.create(null), existingOperationTypes = schema ? {
        query: schema.getQueryType(),
        mutation: schema.getMutationType(),
        subscription: schema.getSubscriptionType()
      } : {};
      return {
        SchemaDefinition: checkOperationTypes,
        SchemaExtension: checkOperationTypes
      };
      function checkOperationTypes(node) {
        var _node$operationTypes;
        let operationTypesNodes = (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];
        for (let operationType of operationTypesNodes) {
          let operation = operationType.operation, alreadyDefinedOperationType = definedOperationTypes[operation];
          existingOperationTypes[operation] ? context.reportError(
            new _GraphQLError.GraphQLError(
              `Type for ${operation} already defined in the schema. It cannot be redefined.`,
              {
                nodes: operationType
              }
            )
          ) : alreadyDefinedOperationType ? context.reportError(
            new _GraphQLError.GraphQLError(
              `There can be only one ${operation} type in schema.`,
              {
                nodes: [alreadyDefinedOperationType, operationType]
              }
            )
          ) : definedOperationTypes[operation] = operationType;
        }
        return !1;
      }
    }
  }
});

// node_modules/graphql/validation/rules/UniqueTypeNamesRule.js
var require_UniqueTypeNamesRule = __commonJS({
  "node_modules/graphql/validation/rules/UniqueTypeNamesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.UniqueTypeNamesRule = UniqueTypeNamesRule;
    var _GraphQLError = require_GraphQLError();
    function UniqueTypeNamesRule(context) {
      let knownTypeNames = /* @__PURE__ */ Object.create(null), schema = context.getSchema();
      return {
        ScalarTypeDefinition: checkTypeName,
        ObjectTypeDefinition: checkTypeName,
        InterfaceTypeDefinition: checkTypeName,
        UnionTypeDefinition: checkTypeName,
        EnumTypeDefinition: checkTypeName,
        InputObjectTypeDefinition: checkTypeName
      };
      function checkTypeName(node) {
        let typeName = node.name.value;
        if (schema != null && schema.getType(typeName)) {
          context.reportError(
            new _GraphQLError.GraphQLError(
              `Type "${typeName}" already exists in the schema. It cannot also be defined in this type definition.`,
              {
                nodes: node.name
              }
            )
          );
          return;
        }
        return knownTypeNames[typeName] ? context.reportError(
          new _GraphQLError.GraphQLError(
            `There can be only one type named "${typeName}".`,
            {
              nodes: [knownTypeNames[typeName], node.name]
            }
          )
        ) : knownTypeNames[typeName] = node.name, !1;
      }
    }
  }
});

// node_modules/graphql/validation/rules/UniqueVariableNamesRule.js
var require_UniqueVariableNamesRule = __commonJS({
  "node_modules/graphql/validation/rules/UniqueVariableNamesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.UniqueVariableNamesRule = UniqueVariableNamesRule;
    var _groupBy = require_groupBy(), _GraphQLError = require_GraphQLError();
    function UniqueVariableNamesRule(context) {
      return {
        OperationDefinition(operationNode) {
          var _operationNode$variab;
          let variableDefinitions = (_operationNode$variab = operationNode.variableDefinitions) !== null && _operationNode$variab !== void 0 ? _operationNode$variab : [], seenVariableDefinitions = (0, _groupBy.groupBy)(
            variableDefinitions,
            (node) => node.variable.name.value
          );
          for (let [variableName, variableNodes] of seenVariableDefinitions)
            variableNodes.length > 1 && context.reportError(
              new _GraphQLError.GraphQLError(
                `There can be only one variable named "$${variableName}".`,
                {
                  nodes: variableNodes.map((node) => node.variable.name)
                }
              )
            );
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.js
var require_ValuesOfCorrectTypeRule = __commonJS({
  "node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.ValuesOfCorrectTypeRule = ValuesOfCorrectTypeRule;
    var _didYouMean = require_didYouMean(), _inspect = require_inspect(), _keyMap = require_keyMap(), _suggestionList = require_suggestionList(), _GraphQLError = require_GraphQLError(), _kinds = require_kinds(), _printer = require_printer(), _definition = require_definition();
    function ValuesOfCorrectTypeRule(context) {
      let variableDefinitions = {};
      return {
        OperationDefinition: {
          enter() {
            variableDefinitions = {};
          }
        },
        VariableDefinition(definition) {
          variableDefinitions[definition.variable.name.value] = definition;
        },
        ListValue(node) {
          let type = (0, _definition.getNullableType)(
            context.getParentInputType()
          );
          if (!(0, _definition.isListType)(type))
            return isValidValueNode(context, node), !1;
        },
        ObjectValue(node) {
          let type = (0, _definition.getNamedType)(context.getInputType());
          if (!(0, _definition.isInputObjectType)(type))
            return isValidValueNode(context, node), !1;
          let fieldNodeMap = (0, _keyMap.keyMap)(
            node.fields,
            (field) => field.name.value
          );
          for (let fieldDef of Object.values(type.getFields()))
            if (!fieldNodeMap[fieldDef.name] && (0, _definition.isRequiredInputField)(fieldDef)) {
              let typeStr = (0, _inspect.inspect)(fieldDef.type);
              context.reportError(
                new _GraphQLError.GraphQLError(
                  `Field "${type.name}.${fieldDef.name}" of required type "${typeStr}" was not provided.`,
                  {
                    nodes: node
                  }
                )
              );
            }
          type.isOneOf && validateOneOfInputObject(
            context,
            node,
            type,
            fieldNodeMap,
            variableDefinitions
          );
        },
        ObjectField(node) {
          let parentType = (0, _definition.getNamedType)(
            context.getParentInputType()
          );
          if (!context.getInputType() && (0, _definition.isInputObjectType)(parentType)) {
            let suggestions = (0, _suggestionList.suggestionList)(
              node.name.value,
              Object.keys(parentType.getFields())
            );
            context.reportError(
              new _GraphQLError.GraphQLError(
                `Field "${node.name.value}" is not defined by type "${parentType.name}".` + (0, _didYouMean.didYouMean)(suggestions),
                {
                  nodes: node
                }
              )
            );
          }
        },
        NullValue(node) {
          let type = context.getInputType();
          (0, _definition.isNonNullType)(type) && context.reportError(
            new _GraphQLError.GraphQLError(
              `Expected value of type "${(0, _inspect.inspect)(
                type
              )}", found ${(0, _printer.print)(node)}.`,
              {
                nodes: node
              }
            )
          );
        },
        EnumValue: (node) => isValidValueNode(context, node),
        IntValue: (node) => isValidValueNode(context, node),
        FloatValue: (node) => isValidValueNode(context, node),
        StringValue: (node) => isValidValueNode(context, node),
        BooleanValue: (node) => isValidValueNode(context, node)
      };
    }
    function isValidValueNode(context, node) {
      let locationType = context.getInputType();
      if (!locationType)
        return;
      let type = (0, _definition.getNamedType)(locationType);
      if (!(0, _definition.isLeafType)(type)) {
        let typeStr = (0, _inspect.inspect)(locationType);
        context.reportError(
          new _GraphQLError.GraphQLError(
            `Expected value of type "${typeStr}", found ${(0, _printer.print)(
              node
            )}.`,
            {
              nodes: node
            }
          )
        );
        return;
      }
      try {
        if (type.parseLiteral(
          node,
          void 0
          /* variables */
        ) === void 0) {
          let typeStr = (0, _inspect.inspect)(locationType);
          context.reportError(
            new _GraphQLError.GraphQLError(
              `Expected value of type "${typeStr}", found ${(0, _printer.print)(
                node
              )}.`,
              {
                nodes: node
              }
            )
          );
        }
      } catch (error) {
        let typeStr = (0, _inspect.inspect)(locationType);
        error instanceof _GraphQLError.GraphQLError ? context.reportError(error) : context.reportError(
          new _GraphQLError.GraphQLError(
            `Expected value of type "${typeStr}", found ${(0, _printer.print)(
              node
            )}; ` + error.message,
            {
              nodes: node,
              originalError: error
            }
          )
        );
      }
    }
    function validateOneOfInputObject(context, node, type, fieldNodeMap, variableDefinitions) {
      var _fieldNodeMap$keys$;
      let keys = Object.keys(fieldNodeMap);
      if (keys.length !== 1) {
        context.reportError(
          new _GraphQLError.GraphQLError(
            `OneOf Input Object "${type.name}" must specify exactly one key.`,
            {
              nodes: [node]
            }
          )
        );
        return;
      }
      let value = (_fieldNodeMap$keys$ = fieldNodeMap[keys[0]]) === null || _fieldNodeMap$keys$ === void 0 ? void 0 : _fieldNodeMap$keys$.value, isNullLiteral = !value || value.kind === _kinds.Kind.NULL, isVariable = value?.kind === _kinds.Kind.VARIABLE;
      if (isNullLiteral) {
        context.reportError(
          new _GraphQLError.GraphQLError(
            `Field "${type.name}.${keys[0]}" must be non-null.`,
            {
              nodes: [node]
            }
          )
        );
        return;
      }
      if (isVariable) {
        let variableName = value.name.value;
        variableDefinitions[variableName].type.kind !== _kinds.Kind.NON_NULL_TYPE && context.reportError(
          new _GraphQLError.GraphQLError(
            `Variable "${variableName}" must be non-nullable to be used for OneOf Input Object "${type.name}".`,
            {
              nodes: [node]
            }
          )
        );
      }
    }
  }
});

// node_modules/graphql/validation/rules/VariablesAreInputTypesRule.js
var require_VariablesAreInputTypesRule = __commonJS({
  "node_modules/graphql/validation/rules/VariablesAreInputTypesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.VariablesAreInputTypesRule = VariablesAreInputTypesRule;
    var _GraphQLError = require_GraphQLError(), _printer = require_printer(), _definition = require_definition(), _typeFromAST = require_typeFromAST();
    function VariablesAreInputTypesRule(context) {
      return {
        VariableDefinition(node) {
          let type = (0, _typeFromAST.typeFromAST)(
            context.getSchema(),
            node.type
          );
          if (type !== void 0 && !(0, _definition.isInputType)(type)) {
            let variableName = node.variable.name.value, typeName = (0, _printer.print)(node.type);
            context.reportError(
              new _GraphQLError.GraphQLError(
                `Variable "$${variableName}" cannot be non-input type "${typeName}".`,
                {
                  nodes: node.type
                }
              )
            );
          }
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.js
var require_VariablesInAllowedPositionRule = __commonJS({
  "node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.VariablesInAllowedPositionRule = VariablesInAllowedPositionRule;
    var _inspect = require_inspect(), _GraphQLError = require_GraphQLError(), _kinds = require_kinds(), _definition = require_definition(), _typeComparators = require_typeComparators(), _typeFromAST = require_typeFromAST();
    function VariablesInAllowedPositionRule(context) {
      let varDefMap = /* @__PURE__ */ Object.create(null);
      return {
        OperationDefinition: {
          enter() {
            varDefMap = /* @__PURE__ */ Object.create(null);
          },
          leave(operation) {
            let usages = context.getRecursiveVariableUsages(operation);
            for (let { node, type, defaultValue, parentType } of usages) {
              let varName = node.name.value, varDef = varDefMap[varName];
              if (varDef && type) {
                let schema = context.getSchema(), varType = (0, _typeFromAST.typeFromAST)(schema, varDef.type);
                if (varType && !allowedVariableUsage(
                  schema,
                  varType,
                  varDef.defaultValue,
                  type,
                  defaultValue
                )) {
                  let varTypeStr = (0, _inspect.inspect)(varType), typeStr = (0, _inspect.inspect)(type);
                  context.reportError(
                    new _GraphQLError.GraphQLError(
                      `Variable "$${varName}" of type "${varTypeStr}" used in position expecting type "${typeStr}".`,
                      {
                        nodes: [varDef, node]
                      }
                    )
                  );
                }
                (0, _definition.isInputObjectType)(parentType) && parentType.isOneOf && (0, _definition.isNullableType)(varType) && context.reportError(
                  new _GraphQLError.GraphQLError(
                    `Variable "$${varName}" is of type "${varType}" but must be non-nullable to be used for OneOf Input Object "${parentType}".`,
                    {
                      nodes: [varDef, node]
                    }
                  )
                );
              }
            }
          }
        },
        VariableDefinition(node) {
          varDefMap[node.variable.name.value] = node;
        }
      };
    }
    function allowedVariableUsage(schema, varType, varDefaultValue, locationType, locationDefaultValue) {
      if ((0, _definition.isNonNullType)(locationType) && !(0, _definition.isNonNullType)(varType)) {
        if (!(varDefaultValue != null && varDefaultValue.kind !== _kinds.Kind.NULL) && !(locationDefaultValue !== void 0))
          return !1;
        let nullableLocationType = locationType.ofType;
        return (0, _typeComparators.isTypeSubTypeOf)(
          schema,
          varType,
          nullableLocationType
        );
      }
      return (0, _typeComparators.isTypeSubTypeOf)(schema, varType, locationType);
    }
  }
});

// node_modules/graphql/validation/specifiedRules.js
var require_specifiedRules = __commonJS({
  "node_modules/graphql/validation/specifiedRules.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.specifiedSDLRules = exports.specifiedRules = exports.recommendedRules = void 0;
    var _ExecutableDefinitionsRule = require_ExecutableDefinitionsRule(), _FieldsOnCorrectTypeRule = require_FieldsOnCorrectTypeRule(), _FragmentsOnCompositeTypesRule = require_FragmentsOnCompositeTypesRule(), _KnownArgumentNamesRule = require_KnownArgumentNamesRule(), _KnownDirectivesRule = require_KnownDirectivesRule(), _KnownFragmentNamesRule = require_KnownFragmentNamesRule(), _KnownTypeNamesRule = require_KnownTypeNamesRule(), _LoneAnonymousOperationRule = require_LoneAnonymousOperationRule(), _LoneSchemaDefinitionRule = require_LoneSchemaDefinitionRule(), _MaxIntrospectionDepthRule = require_MaxIntrospectionDepthRule(), _NoFragmentCyclesRule = require_NoFragmentCyclesRule(), _NoUndefinedVariablesRule = require_NoUndefinedVariablesRule(), _NoUnusedFragmentsRule = require_NoUnusedFragmentsRule(), _NoUnusedVariablesRule = require_NoUnusedVariablesRule(), _OverlappingFieldsCanBeMergedRule = require_OverlappingFieldsCanBeMergedRule(), _PossibleFragmentSpreadsRule = require_PossibleFragmentSpreadsRule(), _PossibleTypeExtensionsRule = require_PossibleTypeExtensionsRule(), _ProvidedRequiredArgumentsRule = require_ProvidedRequiredArgumentsRule(), _ScalarLeafsRule = require_ScalarLeafsRule(), _SingleFieldSubscriptionsRule = require_SingleFieldSubscriptionsRule(), _UniqueArgumentDefinitionNamesRule = require_UniqueArgumentDefinitionNamesRule(), _UniqueArgumentNamesRule = require_UniqueArgumentNamesRule(), _UniqueDirectiveNamesRule = require_UniqueDirectiveNamesRule(), _UniqueDirectivesPerLocationRule = require_UniqueDirectivesPerLocationRule(), _UniqueEnumValueNamesRule = require_UniqueEnumValueNamesRule(), _UniqueFieldDefinitionNamesRule = require_UniqueFieldDefinitionNamesRule(), _UniqueFragmentNamesRule = require_UniqueFragmentNamesRule(), _UniqueInputFieldNamesRule = require_UniqueInputFieldNamesRule(), _UniqueOperationNamesRule = require_UniqueOperationNamesRule(), _UniqueOperationTypesRule = require_UniqueOperationTypesRule(), _UniqueTypeNamesRule = require_UniqueTypeNamesRule(), _UniqueVariableNamesRule = require_UniqueVariableNamesRule(), _ValuesOfCorrectTypeRule = require_ValuesOfCorrectTypeRule(), _VariablesAreInputTypesRule = require_VariablesAreInputTypesRule(), _VariablesInAllowedPositionRule = require_VariablesInAllowedPositionRule(), recommendedRules = Object.freeze([
      _MaxIntrospectionDepthRule.MaxIntrospectionDepthRule
    ]);
    exports.recommendedRules = recommendedRules;
    var specifiedRules = Object.freeze([
      _ExecutableDefinitionsRule.ExecutableDefinitionsRule,
      _UniqueOperationNamesRule.UniqueOperationNamesRule,
      _LoneAnonymousOperationRule.LoneAnonymousOperationRule,
      _SingleFieldSubscriptionsRule.SingleFieldSubscriptionsRule,
      _KnownTypeNamesRule.KnownTypeNamesRule,
      _FragmentsOnCompositeTypesRule.FragmentsOnCompositeTypesRule,
      _VariablesAreInputTypesRule.VariablesAreInputTypesRule,
      _ScalarLeafsRule.ScalarLeafsRule,
      _FieldsOnCorrectTypeRule.FieldsOnCorrectTypeRule,
      _UniqueFragmentNamesRule.UniqueFragmentNamesRule,
      _KnownFragmentNamesRule.KnownFragmentNamesRule,
      _NoUnusedFragmentsRule.NoUnusedFragmentsRule,
      _PossibleFragmentSpreadsRule.PossibleFragmentSpreadsRule,
      _NoFragmentCyclesRule.NoFragmentCyclesRule,
      _UniqueVariableNamesRule.UniqueVariableNamesRule,
      _NoUndefinedVariablesRule.NoUndefinedVariablesRule,
      _NoUnusedVariablesRule.NoUnusedVariablesRule,
      _KnownDirectivesRule.KnownDirectivesRule,
      _UniqueDirectivesPerLocationRule.UniqueDirectivesPerLocationRule,
      _KnownArgumentNamesRule.KnownArgumentNamesRule,
      _UniqueArgumentNamesRule.UniqueArgumentNamesRule,
      _ValuesOfCorrectTypeRule.ValuesOfCorrectTypeRule,
      _ProvidedRequiredArgumentsRule.ProvidedRequiredArgumentsRule,
      _VariablesInAllowedPositionRule.VariablesInAllowedPositionRule,
      _OverlappingFieldsCanBeMergedRule.OverlappingFieldsCanBeMergedRule,
      _UniqueInputFieldNamesRule.UniqueInputFieldNamesRule,
      ...recommendedRules
    ]);
    exports.specifiedRules = specifiedRules;
    var specifiedSDLRules = Object.freeze([
      _LoneSchemaDefinitionRule.LoneSchemaDefinitionRule,
      _UniqueOperationTypesRule.UniqueOperationTypesRule,
      _UniqueTypeNamesRule.UniqueTypeNamesRule,
      _UniqueEnumValueNamesRule.UniqueEnumValueNamesRule,
      _UniqueFieldDefinitionNamesRule.UniqueFieldDefinitionNamesRule,
      _UniqueArgumentDefinitionNamesRule.UniqueArgumentDefinitionNamesRule,
      _UniqueDirectiveNamesRule.UniqueDirectiveNamesRule,
      _KnownTypeNamesRule.KnownTypeNamesRule,
      _KnownDirectivesRule.KnownDirectivesRule,
      _UniqueDirectivesPerLocationRule.UniqueDirectivesPerLocationRule,
      _PossibleTypeExtensionsRule.PossibleTypeExtensionsRule,
      _KnownArgumentNamesRule.KnownArgumentNamesOnDirectivesRule,
      _UniqueArgumentNamesRule.UniqueArgumentNamesRule,
      _UniqueInputFieldNamesRule.UniqueInputFieldNamesRule,
      _ProvidedRequiredArgumentsRule.ProvidedRequiredArgumentsOnDirectivesRule
    ]);
    exports.specifiedSDLRules = specifiedSDLRules;
  }
});

// node_modules/graphql/validation/ValidationContext.js
var require_ValidationContext = __commonJS({
  "node_modules/graphql/validation/ValidationContext.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.ValidationContext = exports.SDLValidationContext = exports.ASTValidationContext = void 0;
    var _kinds = require_kinds(), _visitor = require_visitor(), _TypeInfo = require_TypeInfo(), ASTValidationContext = class {
      constructor(ast, onError) {
        this._ast = ast, this._fragments = void 0, this._fragmentSpreads = /* @__PURE__ */ new Map(), this._recursivelyReferencedFragments = /* @__PURE__ */ new Map(), this._onError = onError;
      }
      get [Symbol.toStringTag]() {
        return "ASTValidationContext";
      }
      reportError(error) {
        this._onError(error);
      }
      getDocument() {
        return this._ast;
      }
      getFragment(name) {
        let fragments;
        if (this._fragments)
          fragments = this._fragments;
        else {
          fragments = /* @__PURE__ */ Object.create(null);
          for (let defNode of this.getDocument().definitions)
            defNode.kind === _kinds.Kind.FRAGMENT_DEFINITION && (fragments[defNode.name.value] = defNode);
          this._fragments = fragments;
        }
        return fragments[name];
      }
      getFragmentSpreads(node) {
        let spreads = this._fragmentSpreads.get(node);
        if (!spreads) {
          spreads = [];
          let setsToVisit = [node], set;
          for (; set = setsToVisit.pop(); )
            for (let selection of set.selections)
              selection.kind === _kinds.Kind.FRAGMENT_SPREAD ? spreads.push(selection) : selection.selectionSet && setsToVisit.push(selection.selectionSet);
          this._fragmentSpreads.set(node, spreads);
        }
        return spreads;
      }
      getRecursivelyReferencedFragments(operation) {
        let fragments = this._recursivelyReferencedFragments.get(operation);
        if (!fragments) {
          fragments = [];
          let collectedNames = /* @__PURE__ */ Object.create(null), nodesToVisit = [operation.selectionSet], node;
          for (; node = nodesToVisit.pop(); )
            for (let spread of this.getFragmentSpreads(node)) {
              let fragName = spread.name.value;
              if (collectedNames[fragName] !== !0) {
                collectedNames[fragName] = !0;
                let fragment = this.getFragment(fragName);
                fragment && (fragments.push(fragment), nodesToVisit.push(fragment.selectionSet));
              }
            }
          this._recursivelyReferencedFragments.set(operation, fragments);
        }
        return fragments;
      }
    };
    exports.ASTValidationContext = ASTValidationContext;
    var SDLValidationContext = class extends ASTValidationContext {
      constructor(ast, schema, onError) {
        super(ast, onError), this._schema = schema;
      }
      get [Symbol.toStringTag]() {
        return "SDLValidationContext";
      }
      getSchema() {
        return this._schema;
      }
    };
    exports.SDLValidationContext = SDLValidationContext;
    var ValidationContext = class extends ASTValidationContext {
      constructor(schema, ast, typeInfo, onError) {
        super(ast, onError), this._schema = schema, this._typeInfo = typeInfo, this._variableUsages = /* @__PURE__ */ new Map(), this._recursiveVariableUsages = /* @__PURE__ */ new Map();
      }
      get [Symbol.toStringTag]() {
        return "ValidationContext";
      }
      getSchema() {
        return this._schema;
      }
      getVariableUsages(node) {
        let usages = this._variableUsages.get(node);
        if (!usages) {
          let newUsages = [], typeInfo = new _TypeInfo.TypeInfo(this._schema);
          (0, _visitor.visit)(
            node,
            (0, _TypeInfo.visitWithTypeInfo)(typeInfo, {
              VariableDefinition: () => !1,
              Variable(variable) {
                newUsages.push({
                  node: variable,
                  type: typeInfo.getInputType(),
                  defaultValue: typeInfo.getDefaultValue(),
                  parentType: typeInfo.getParentInputType()
                });
              }
            })
          ), usages = newUsages, this._variableUsages.set(node, usages);
        }
        return usages;
      }
      getRecursiveVariableUsages(operation) {
        let usages = this._recursiveVariableUsages.get(operation);
        if (!usages) {
          usages = this.getVariableUsages(operation);
          for (let frag of this.getRecursivelyReferencedFragments(operation))
            usages = usages.concat(this.getVariableUsages(frag));
          this._recursiveVariableUsages.set(operation, usages);
        }
        return usages;
      }
      getType() {
        return this._typeInfo.getType();
      }
      getParentType() {
        return this._typeInfo.getParentType();
      }
      getInputType() {
        return this._typeInfo.getInputType();
      }
      getParentInputType() {
        return this._typeInfo.getParentInputType();
      }
      getFieldDef() {
        return this._typeInfo.getFieldDef();
      }
      getDirective() {
        return this._typeInfo.getDirective();
      }
      getArgument() {
        return this._typeInfo.getArgument();
      }
      getEnumValue() {
        return this._typeInfo.getEnumValue();
      }
    };
    exports.ValidationContext = ValidationContext;
  }
});

// node_modules/graphql/validation/validate.js
var require_validate2 = __commonJS({
  "node_modules/graphql/validation/validate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.assertValidSDL = assertValidSDL;
    exports.assertValidSDLExtension = assertValidSDLExtension;
    exports.validate = validate2;
    exports.validateSDL = validateSDL;
    var _devAssert = require_devAssert(), _GraphQLError = require_GraphQLError(), _visitor = require_visitor(), _validate = require_validate(), _TypeInfo = require_TypeInfo(), _specifiedRules = require_specifiedRules(), _ValidationContext = require_ValidationContext();
    function validate2(schema, documentAST, rules = _specifiedRules.specifiedRules, options, typeInfo = new _TypeInfo.TypeInfo(schema)) {
      var _options$maxErrors;
      let maxErrors = (_options$maxErrors = options?.maxErrors) !== null && _options$maxErrors !== void 0 ? _options$maxErrors : 100;
      documentAST || (0, _devAssert.devAssert)(!1, "Must provide document."), (0, _validate.assertValidSchema)(schema);
      let abortObj = Object.freeze({}), errors = [], context = new _ValidationContext.ValidationContext(
        schema,
        documentAST,
        typeInfo,
        (error) => {
          if (errors.length >= maxErrors)
            throw errors.push(
              new _GraphQLError.GraphQLError(
                "Too many validation errors, error limit reached. Validation aborted."
              )
            ), abortObj;
          errors.push(error);
        }
      ), visitor = (0, _visitor.visitInParallel)(
        rules.map((rule) => rule(context))
      );
      try {
        (0, _visitor.visit)(
          documentAST,
          (0, _TypeInfo.visitWithTypeInfo)(typeInfo, visitor)
        );
      } catch (e) {
        if (e !== abortObj)
          throw e;
      }
      return errors;
    }
    function validateSDL(documentAST, schemaToExtend, rules = _specifiedRules.specifiedSDLRules) {
      let errors = [], context = new _ValidationContext.SDLValidationContext(
        documentAST,
        schemaToExtend,
        (error) => {
          errors.push(error);
        }
      ), visitors = rules.map((rule) => rule(context));
      return (0, _visitor.visit)(documentAST, (0, _visitor.visitInParallel)(visitors)), errors;
    }
    function assertValidSDL(documentAST) {
      let errors = validateSDL(documentAST);
      if (errors.length !== 0)
        throw new Error(errors.map((error) => error.message).join(`

`));
    }
    function assertValidSDLExtension(documentAST, schema) {
      let errors = validateSDL(documentAST, schema);
      if (errors.length !== 0)
        throw new Error(errors.map((error) => error.message).join(`

`));
    }
  }
});

// node_modules/graphql/jsutils/memoize3.js
var require_memoize3 = __commonJS({
  "node_modules/graphql/jsutils/memoize3.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.memoize3 = memoize3;
    function memoize3(fn) {
      let cache0;
      return function(a1, a2, a3) {
        cache0 === void 0 && (cache0 = /* @__PURE__ */ new WeakMap());
        let cache1 = cache0.get(a1);
        cache1 === void 0 && (cache1 = /* @__PURE__ */ new WeakMap(), cache0.set(a1, cache1));
        let cache2 = cache1.get(a2);
        cache2 === void 0 && (cache2 = /* @__PURE__ */ new WeakMap(), cache1.set(a2, cache2));
        let fnResult = cache2.get(a3);
        return fnResult === void 0 && (fnResult = fn(a1, a2, a3), cache2.set(a3, fnResult)), fnResult;
      };
    }
  }
});

// node_modules/graphql/jsutils/promiseForObject.js
var require_promiseForObject = __commonJS({
  "node_modules/graphql/jsutils/promiseForObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.promiseForObject = promiseForObject;
    function promiseForObject(object) {
      return Promise.all(Object.values(object)).then((resolvedValues) => {
        let resolvedObject = /* @__PURE__ */ Object.create(null);
        for (let [i, key] of Object.keys(object).entries())
          resolvedObject[key] = resolvedValues[i];
        return resolvedObject;
      });
    }
  }
});

// node_modules/graphql/jsutils/promiseReduce.js
var require_promiseReduce = __commonJS({
  "node_modules/graphql/jsutils/promiseReduce.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.promiseReduce = promiseReduce;
    var _isPromise = require_isPromise();
    function promiseReduce(values, callbackFn, initialValue) {
      let accumulator = initialValue;
      for (let value of values)
        accumulator = (0, _isPromise.isPromise)(accumulator) ? accumulator.then((resolved) => callbackFn(resolved, value)) : callbackFn(accumulator, value);
      return accumulator;
    }
  }
});

// node_modules/graphql/jsutils/toError.js
var require_toError = __commonJS({
  "node_modules/graphql/jsutils/toError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.toError = toError;
    var _inspect = require_inspect();
    function toError(thrownValue) {
      return thrownValue instanceof Error ? thrownValue : new NonErrorThrown(thrownValue);
    }
    var NonErrorThrown = class extends Error {
      constructor(thrownValue) {
        super("Unexpected error value: " + (0, _inspect.inspect)(thrownValue)), this.name = "NonErrorThrown", this.thrownValue = thrownValue;
      }
    };
  }
});

// node_modules/graphql/error/locatedError.js
var require_locatedError = __commonJS({
  "node_modules/graphql/error/locatedError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.locatedError = locatedError;
    var _toError = require_toError(), _GraphQLError = require_GraphQLError();
    function locatedError(rawOriginalError, nodes, path) {
      var _nodes;
      let originalError = (0, _toError.toError)(rawOriginalError);
      return isLocatedGraphQLError(originalError) ? originalError : new _GraphQLError.GraphQLError(originalError.message, {
        nodes: (_nodes = originalError.nodes) !== null && _nodes !== void 0 ? _nodes : nodes,
        source: originalError.source,
        positions: originalError.positions,
        path,
        originalError
      });
    }
    function isLocatedGraphQLError(error) {
      return Array.isArray(error.path);
    }
  }
});

// node_modules/graphql/execution/execute.js
var require_execute = __commonJS({
  "node_modules/graphql/execution/execute.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.assertValidExecutionArguments = assertValidExecutionArguments;
    exports.buildExecutionContext = buildExecutionContext;
    exports.buildResolveInfo = buildResolveInfo;
    exports.defaultTypeResolver = exports.defaultFieldResolver = void 0;
    exports.execute = execute;
    exports.executeSync = executeSync;
    exports.getFieldDef = getFieldDef;
    var _devAssert = require_devAssert(), _inspect = require_inspect(), _invariant = require_invariant(), _isIterableObject = require_isIterableObject(), _isObjectLike = require_isObjectLike(), _isPromise = require_isPromise(), _memoize = require_memoize3(), _Path = require_Path(), _promiseForObject = require_promiseForObject(), _promiseReduce = require_promiseReduce(), _GraphQLError = require_GraphQLError(), _locatedError = require_locatedError(), _ast = require_ast(), _kinds = require_kinds(), _definition = require_definition(), _introspection = require_introspection(), _validate = require_validate(), _collectFields = require_collectFields(), _values = require_values(), collectSubfields = (0, _memoize.memoize3)(
      (exeContext, returnType, fieldNodes) => (0, _collectFields.collectSubfields)(
        exeContext.schema,
        exeContext.fragments,
        exeContext.variableValues,
        returnType,
        fieldNodes
      )
    );
    function execute(args) {
      arguments.length < 2 || (0, _devAssert.devAssert)(
        !1,
        "graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead."
      );
      let { schema, document: document2, variableValues, rootValue } = args;
      assertValidExecutionArguments(schema, document2, variableValues);
      let exeContext = buildExecutionContext(args);
      if (!("schema" in exeContext))
        return {
          errors: exeContext
        };
      try {
        let { operation } = exeContext, result = executeOperation(exeContext, operation, rootValue);
        return (0, _isPromise.isPromise)(result) ? result.then(
          (data) => buildResponse(data, exeContext.errors),
          (error) => (exeContext.errors.push(error), buildResponse(null, exeContext.errors))
        ) : buildResponse(result, exeContext.errors);
      } catch (error) {
        return exeContext.errors.push(error), buildResponse(null, exeContext.errors);
      }
    }
    function executeSync(args) {
      let result = execute(args);
      if ((0, _isPromise.isPromise)(result))
        throw new Error("GraphQL execution failed to complete synchronously.");
      return result;
    }
    function buildResponse(data, errors) {
      return errors.length === 0 ? {
        data
      } : {
        errors,
        data
      };
    }
    function assertValidExecutionArguments(schema, document2, rawVariableValues) {
      document2 || (0, _devAssert.devAssert)(!1, "Must provide document."), (0, _validate.assertValidSchema)(schema), rawVariableValues == null || (0, _isObjectLike.isObjectLike)(rawVariableValues) || (0, _devAssert.devAssert)(
        !1,
        "Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided."
      );
    }
    function buildExecutionContext(args) {
      var _definition$name, _operation$variableDe, _options$maxCoercionE;
      let {
        schema,
        document: document2,
        rootValue,
        contextValue,
        variableValues: rawVariableValues,
        operationName,
        fieldResolver,
        typeResolver,
        subscribeFieldResolver,
        options
      } = args, operation, fragments = /* @__PURE__ */ Object.create(null);
      for (let definition of document2.definitions)
        switch (definition.kind) {
          case _kinds.Kind.OPERATION_DEFINITION:
            if (operationName == null) {
              if (operation !== void 0)
                return [
                  new _GraphQLError.GraphQLError(
                    "Must provide operation name if query contains multiple operations."
                  )
                ];
              operation = definition;
            } else
              ((_definition$name = definition.name) === null || _definition$name === void 0 ? void 0 : _definition$name.value) === operationName && (operation = definition);
            break;
          case _kinds.Kind.FRAGMENT_DEFINITION:
            fragments[definition.name.value] = definition;
            break;
          default:
        }
      if (!operation)
        return operationName != null ? [
          new _GraphQLError.GraphQLError(
            `Unknown operation named "${operationName}".`
          )
        ] : [new _GraphQLError.GraphQLError("Must provide an operation.")];
      let variableDefinitions = (_operation$variableDe = operation.variableDefinitions) !== null && _operation$variableDe !== void 0 ? _operation$variableDe : [], coercedVariableValues = (0, _values.getVariableValues)(
        schema,
        variableDefinitions,
        rawVariableValues ?? {},
        {
          maxErrors: (_options$maxCoercionE = options?.maxCoercionErrors) !== null && _options$maxCoercionE !== void 0 ? _options$maxCoercionE : 50
        }
      );
      return coercedVariableValues.errors ? coercedVariableValues.errors : {
        schema,
        fragments,
        rootValue,
        contextValue,
        operation,
        variableValues: coercedVariableValues.coerced,
        fieldResolver: fieldResolver ?? defaultFieldResolver,
        typeResolver: typeResolver ?? defaultTypeResolver,
        subscribeFieldResolver: subscribeFieldResolver ?? defaultFieldResolver,
        errors: []
      };
    }
    function executeOperation(exeContext, operation, rootValue) {
      let rootType = exeContext.schema.getRootType(operation.operation);
      if (rootType == null)
        throw new _GraphQLError.GraphQLError(
          `Schema is not configured to execute ${operation.operation} operation.`,
          {
            nodes: operation
          }
        );
      let rootFields = (0, _collectFields.collectFields)(
        exeContext.schema,
        exeContext.fragments,
        exeContext.variableValues,
        rootType,
        operation.selectionSet
      ), path = void 0;
      switch (operation.operation) {
        case _ast.OperationTypeNode.QUERY:
          return executeFields(exeContext, rootType, rootValue, path, rootFields);
        case _ast.OperationTypeNode.MUTATION:
          return executeFieldsSerially(
            exeContext,
            rootType,
            rootValue,
            path,
            rootFields
          );
        case _ast.OperationTypeNode.SUBSCRIPTION:
          return executeFields(exeContext, rootType, rootValue, path, rootFields);
      }
    }
    function executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {
      return (0, _promiseReduce.promiseReduce)(
        fields.entries(),
        (results, [responseName, fieldNodes]) => {
          let fieldPath = (0, _Path.addPath)(path, responseName, parentType.name), result = executeField(
            exeContext,
            parentType,
            sourceValue,
            fieldNodes,
            fieldPath
          );
          return result === void 0 ? results : (0, _isPromise.isPromise)(result) ? result.then((resolvedResult) => (results[responseName] = resolvedResult, results)) : (results[responseName] = result, results);
        },
        /* @__PURE__ */ Object.create(null)
      );
    }
    function executeFields(exeContext, parentType, sourceValue, path, fields) {
      let results = /* @__PURE__ */ Object.create(null), containsPromise = !1;
      try {
        for (let [responseName, fieldNodes] of fields.entries()) {
          let fieldPath = (0, _Path.addPath)(path, responseName, parentType.name), result = executeField(
            exeContext,
            parentType,
            sourceValue,
            fieldNodes,
            fieldPath
          );
          result !== void 0 && (results[responseName] = result, (0, _isPromise.isPromise)(result) && (containsPromise = !0));
        }
      } catch (error) {
        if (containsPromise)
          return (0, _promiseForObject.promiseForObject)(results).finally(() => {
            throw error;
          });
        throw error;
      }
      return containsPromise ? (0, _promiseForObject.promiseForObject)(results) : results;
    }
    function executeField(exeContext, parentType, source, fieldNodes, path) {
      var _fieldDef$resolve;
      let fieldDef = getFieldDef(exeContext.schema, parentType, fieldNodes[0]);
      if (!fieldDef)
        return;
      let returnType = fieldDef.type, resolveFn = (_fieldDef$resolve = fieldDef.resolve) !== null && _fieldDef$resolve !== void 0 ? _fieldDef$resolve : exeContext.fieldResolver, info = buildResolveInfo(
        exeContext,
        fieldDef,
        fieldNodes,
        parentType,
        path
      );
      try {
        let args = (0, _values.getArgumentValues)(
          fieldDef,
          fieldNodes[0],
          exeContext.variableValues
        ), contextValue = exeContext.contextValue, result = resolveFn(source, args, contextValue, info), completed;
        return (0, _isPromise.isPromise)(result) ? completed = result.then(
          (resolved) => completeValue(exeContext, returnType, fieldNodes, info, path, resolved)
        ) : completed = completeValue(
          exeContext,
          returnType,
          fieldNodes,
          info,
          path,
          result
        ), (0, _isPromise.isPromise)(completed) ? completed.then(void 0, (rawError) => {
          let error = (0, _locatedError.locatedError)(
            rawError,
            fieldNodes,
            (0, _Path.pathToArray)(path)
          );
          return handleFieldError(error, returnType, exeContext);
        }) : completed;
      } catch (rawError) {
        let error = (0, _locatedError.locatedError)(
          rawError,
          fieldNodes,
          (0, _Path.pathToArray)(path)
        );
        return handleFieldError(error, returnType, exeContext);
      }
    }
    function buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {
      return {
        fieldName: fieldDef.name,
        fieldNodes,
        returnType: fieldDef.type,
        parentType,
        path,
        schema: exeContext.schema,
        fragments: exeContext.fragments,
        rootValue: exeContext.rootValue,
        operation: exeContext.operation,
        variableValues: exeContext.variableValues
      };
    }
    function handleFieldError(error, returnType, exeContext) {
      if ((0, _definition.isNonNullType)(returnType))
        throw error;
      return exeContext.errors.push(error), null;
    }
    function completeValue(exeContext, returnType, fieldNodes, info, path, result) {
      if (result instanceof Error)
        throw result;
      if ((0, _definition.isNonNullType)(returnType)) {
        let completed = completeValue(
          exeContext,
          returnType.ofType,
          fieldNodes,
          info,
          path,
          result
        );
        if (completed === null)
          throw new Error(
            `Cannot return null for non-nullable field ${info.parentType.name}.${info.fieldName}.`
          );
        return completed;
      }
      if (result == null)
        return null;
      if ((0, _definition.isListType)(returnType))
        return completeListValue(
          exeContext,
          returnType,
          fieldNodes,
          info,
          path,
          result
        );
      if ((0, _definition.isLeafType)(returnType))
        return completeLeafValue(returnType, result);
      if ((0, _definition.isAbstractType)(returnType))
        return completeAbstractValue(
          exeContext,
          returnType,
          fieldNodes,
          info,
          path,
          result
        );
      if ((0, _definition.isObjectType)(returnType))
        return completeObjectValue(
          exeContext,
          returnType,
          fieldNodes,
          info,
          path,
          result
        );
      (0, _invariant.invariant)(
        !1,
        "Cannot complete value of unexpected output type: " + (0, _inspect.inspect)(returnType)
      );
    }
    function completeListValue(exeContext, returnType, fieldNodes, info, path, result) {
      if (!(0, _isIterableObject.isIterableObject)(result))
        throw new _GraphQLError.GraphQLError(
          `Expected Iterable, but did not find one for field "${info.parentType.name}.${info.fieldName}".`
        );
      let itemType = returnType.ofType, containsPromise = !1, completedResults = Array.from(result, (item, index) => {
        let itemPath = (0, _Path.addPath)(path, index, void 0);
        try {
          let completedItem;
          return (0, _isPromise.isPromise)(item) ? completedItem = item.then(
            (resolved) => completeValue(
              exeContext,
              itemType,
              fieldNodes,
              info,
              itemPath,
              resolved
            )
          ) : completedItem = completeValue(
            exeContext,
            itemType,
            fieldNodes,
            info,
            itemPath,
            item
          ), (0, _isPromise.isPromise)(completedItem) ? (containsPromise = !0, completedItem.then(void 0, (rawError) => {
            let error = (0, _locatedError.locatedError)(
              rawError,
              fieldNodes,
              (0, _Path.pathToArray)(itemPath)
            );
            return handleFieldError(error, itemType, exeContext);
          })) : completedItem;
        } catch (rawError) {
          let error = (0, _locatedError.locatedError)(
            rawError,
            fieldNodes,
            (0, _Path.pathToArray)(itemPath)
          );
          return handleFieldError(error, itemType, exeContext);
        }
      });
      return containsPromise ? Promise.all(completedResults) : completedResults;
    }
    function completeLeafValue(returnType, result) {
      let serializedResult = returnType.serialize(result);
      if (serializedResult == null)
        throw new Error(
          `Expected \`${(0, _inspect.inspect)(returnType)}.serialize(${(0, _inspect.inspect)(result)})\` to return non-nullable value, returned: ${(0, _inspect.inspect)(
            serializedResult
          )}`
        );
      return serializedResult;
    }
    function completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result) {
      var _returnType$resolveTy;
      let resolveTypeFn = (_returnType$resolveTy = returnType.resolveType) !== null && _returnType$resolveTy !== void 0 ? _returnType$resolveTy : exeContext.typeResolver, contextValue = exeContext.contextValue, runtimeType = resolveTypeFn(result, contextValue, info, returnType);
      return (0, _isPromise.isPromise)(runtimeType) ? runtimeType.then(
        (resolvedRuntimeType) => completeObjectValue(
          exeContext,
          ensureValidRuntimeType(
            resolvedRuntimeType,
            exeContext,
            returnType,
            fieldNodes,
            info,
            result
          ),
          fieldNodes,
          info,
          path,
          result
        )
      ) : completeObjectValue(
        exeContext,
        ensureValidRuntimeType(
          runtimeType,
          exeContext,
          returnType,
          fieldNodes,
          info,
          result
        ),
        fieldNodes,
        info,
        path,
        result
      );
    }
    function ensureValidRuntimeType(runtimeTypeName, exeContext, returnType, fieldNodes, info, result) {
      if (runtimeTypeName == null)
        throw new _GraphQLError.GraphQLError(
          `Abstract type "${returnType.name}" must resolve to an Object type at runtime for field "${info.parentType.name}.${info.fieldName}". Either the "${returnType.name}" type should provide a "resolveType" function or each possible type should provide an "isTypeOf" function.`,
          fieldNodes
        );
      if ((0, _definition.isObjectType)(runtimeTypeName))
        throw new _GraphQLError.GraphQLError(
          "Support for returning GraphQLObjectType from resolveType was removed in graphql-js@16.0.0 please return type name instead."
        );
      if (typeof runtimeTypeName != "string")
        throw new _GraphQLError.GraphQLError(
          `Abstract type "${returnType.name}" must resolve to an Object type at runtime for field "${info.parentType.name}.${info.fieldName}" with value ${(0, _inspect.inspect)(result)}, received "${(0, _inspect.inspect)(runtimeTypeName)}".`
        );
      let runtimeType = exeContext.schema.getType(runtimeTypeName);
      if (runtimeType == null)
        throw new _GraphQLError.GraphQLError(
          `Abstract type "${returnType.name}" was resolved to a type "${runtimeTypeName}" that does not exist inside the schema.`,
          {
            nodes: fieldNodes
          }
        );
      if (!(0, _definition.isObjectType)(runtimeType))
        throw new _GraphQLError.GraphQLError(
          `Abstract type "${returnType.name}" was resolved to a non-object type "${runtimeTypeName}".`,
          {
            nodes: fieldNodes
          }
        );
      if (!exeContext.schema.isSubType(returnType, runtimeType))
        throw new _GraphQLError.GraphQLError(
          `Runtime Object type "${runtimeType.name}" is not a possible type for "${returnType.name}".`,
          {
            nodes: fieldNodes
          }
        );
      return runtimeType;
    }
    function completeObjectValue(exeContext, returnType, fieldNodes, info, path, result) {
      let subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes);
      if (returnType.isTypeOf) {
        let isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);
        if ((0, _isPromise.isPromise)(isTypeOf))
          return isTypeOf.then((resolvedIsTypeOf) => {
            if (!resolvedIsTypeOf)
              throw invalidReturnTypeError(returnType, result, fieldNodes);
            return executeFields(
              exeContext,
              returnType,
              result,
              path,
              subFieldNodes
            );
          });
        if (!isTypeOf)
          throw invalidReturnTypeError(returnType, result, fieldNodes);
      }
      return executeFields(exeContext, returnType, result, path, subFieldNodes);
    }
    function invalidReturnTypeError(returnType, result, fieldNodes) {
      return new _GraphQLError.GraphQLError(
        `Expected value of type "${returnType.name}" but got: ${(0, _inspect.inspect)(result)}.`,
        {
          nodes: fieldNodes
        }
      );
    }
    var defaultTypeResolver = function(value, contextValue, info, abstractType) {
      if ((0, _isObjectLike.isObjectLike)(value) && typeof value.__typename == "string")
        return value.__typename;
      let possibleTypes = info.schema.getPossibleTypes(abstractType), promisedIsTypeOfResults = [];
      for (let i = 0; i < possibleTypes.length; i++) {
        let type = possibleTypes[i];
        if (type.isTypeOf) {
          let isTypeOfResult = type.isTypeOf(value, contextValue, info);
          if ((0, _isPromise.isPromise)(isTypeOfResult))
            promisedIsTypeOfResults[i] = isTypeOfResult;
          else if (isTypeOfResult)
            return type.name;
        }
      }
      if (promisedIsTypeOfResults.length)
        return Promise.all(promisedIsTypeOfResults).then((isTypeOfResults) => {
          for (let i = 0; i < isTypeOfResults.length; i++)
            if (isTypeOfResults[i])
              return possibleTypes[i].name;
        });
    };
    exports.defaultTypeResolver = defaultTypeResolver;
    var defaultFieldResolver = function(source, args, contextValue, info) {
      if ((0, _isObjectLike.isObjectLike)(source) || typeof source == "function") {
        let property = source[info.fieldName];
        return typeof property == "function" ? source[info.fieldName](args, contextValue, info) : property;
      }
    };
    exports.defaultFieldResolver = defaultFieldResolver;
    function getFieldDef(schema, parentType, fieldNode) {
      let fieldName = fieldNode.name.value;
      return fieldName === _introspection.SchemaMetaFieldDef.name && schema.getQueryType() === parentType ? _introspection.SchemaMetaFieldDef : fieldName === _introspection.TypeMetaFieldDef.name && schema.getQueryType() === parentType ? _introspection.TypeMetaFieldDef : fieldName === _introspection.TypeNameMetaFieldDef.name ? _introspection.TypeNameMetaFieldDef : parentType.getFields()[fieldName];
    }
  }
});

// node_modules/graphql/graphql.js
var require_graphql = __commonJS({
  "node_modules/graphql/graphql.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.graphql = graphql;
    exports.graphqlSync = graphqlSync;
    var _devAssert = require_devAssert(), _isPromise = require_isPromise(), _parser = require_parser(), _validate = require_validate(), _validate2 = require_validate2(), _execute = require_execute();
    function graphql(args) {
      return new Promise((resolve) => resolve(graphqlImpl(args)));
    }
    function graphqlSync(args) {
      let result = graphqlImpl(args);
      if ((0, _isPromise.isPromise)(result))
        throw new Error("GraphQL execution failed to complete synchronously.");
      return result;
    }
    function graphqlImpl(args) {
      arguments.length < 2 || (0, _devAssert.devAssert)(
        !1,
        "graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead."
      );
      let {
        schema,
        source,
        rootValue,
        contextValue,
        variableValues,
        operationName,
        fieldResolver,
        typeResolver
      } = args, schemaValidationErrors = (0, _validate.validateSchema)(schema);
      if (schemaValidationErrors.length > 0)
        return {
          errors: schemaValidationErrors
        };
      let document2;
      try {
        document2 = (0, _parser.parse)(source);
      } catch (syntaxError) {
        return {
          errors: [syntaxError]
        };
      }
      let validationErrors = (0, _validate2.validate)(schema, document2);
      return validationErrors.length > 0 ? {
        errors: validationErrors
      } : (0, _execute.execute)({
        schema,
        document: document2,
        rootValue,
        contextValue,
        variableValues,
        operationName,
        fieldResolver,
        typeResolver
      });
    }
  }
});

// node_modules/graphql/type/index.js
var require_type = __commonJS({
  "node_modules/graphql/type/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    Object.defineProperty(exports, "DEFAULT_DEPRECATION_REASON", {
      enumerable: !0,
      get: function() {
        return _directives.DEFAULT_DEPRECATION_REASON;
      }
    });
    Object.defineProperty(exports, "GRAPHQL_MAX_INT", {
      enumerable: !0,
      get: function() {
        return _scalars.GRAPHQL_MAX_INT;
      }
    });
    Object.defineProperty(exports, "GRAPHQL_MIN_INT", {
      enumerable: !0,
      get: function() {
        return _scalars.GRAPHQL_MIN_INT;
      }
    });
    Object.defineProperty(exports, "GraphQLBoolean", {
      enumerable: !0,
      get: function() {
        return _scalars.GraphQLBoolean;
      }
    });
    Object.defineProperty(exports, "GraphQLDeprecatedDirective", {
      enumerable: !0,
      get: function() {
        return _directives.GraphQLDeprecatedDirective;
      }
    });
    Object.defineProperty(exports, "GraphQLDirective", {
      enumerable: !0,
      get: function() {
        return _directives.GraphQLDirective;
      }
    });
    Object.defineProperty(exports, "GraphQLEnumType", {
      enumerable: !0,
      get: function() {
        return _definition.GraphQLEnumType;
      }
    });
    Object.defineProperty(exports, "GraphQLFloat", {
      enumerable: !0,
      get: function() {
        return _scalars.GraphQLFloat;
      }
    });
    Object.defineProperty(exports, "GraphQLID", {
      enumerable: !0,
      get: function() {
        return _scalars.GraphQLID;
      }
    });
    Object.defineProperty(exports, "GraphQLIncludeDirective", {
      enumerable: !0,
      get: function() {
        return _directives.GraphQLIncludeDirective;
      }
    });
    Object.defineProperty(exports, "GraphQLInputObjectType", {
      enumerable: !0,
      get: function() {
        return _definition.GraphQLInputObjectType;
      }
    });
    Object.defineProperty(exports, "GraphQLInt", {
      enumerable: !0,
      get: function() {
        return _scalars.GraphQLInt;
      }
    });
    Object.defineProperty(exports, "GraphQLInterfaceType", {
      enumerable: !0,
      get: function() {
        return _definition.GraphQLInterfaceType;
      }
    });
    Object.defineProperty(exports, "GraphQLList", {
      enumerable: !0,
      get: function() {
        return _definition.GraphQLList;
      }
    });
    Object.defineProperty(exports, "GraphQLNonNull", {
      enumerable: !0,
      get: function() {
        return _definition.GraphQLNonNull;
      }
    });
    Object.defineProperty(exports, "GraphQLObjectType", {
      enumerable: !0,
      get: function() {
        return _definition.GraphQLObjectType;
      }
    });
    Object.defineProperty(exports, "GraphQLOneOfDirective", {
      enumerable: !0,
      get: function() {
        return _directives.GraphQLOneOfDirective;
      }
    });
    Object.defineProperty(exports, "GraphQLScalarType", {
      enumerable: !0,
      get: function() {
        return _definition.GraphQLScalarType;
      }
    });
    Object.defineProperty(exports, "GraphQLSchema", {
      enumerable: !0,
      get: function() {
        return _schema.GraphQLSchema;
      }
    });
    Object.defineProperty(exports, "GraphQLSkipDirective", {
      enumerable: !0,
      get: function() {
        return _directives.GraphQLSkipDirective;
      }
    });
    Object.defineProperty(exports, "GraphQLSpecifiedByDirective", {
      enumerable: !0,
      get: function() {
        return _directives.GraphQLSpecifiedByDirective;
      }
    });
    Object.defineProperty(exports, "GraphQLString", {
      enumerable: !0,
      get: function() {
        return _scalars.GraphQLString;
      }
    });
    Object.defineProperty(exports, "GraphQLUnionType", {
      enumerable: !0,
      get: function() {
        return _definition.GraphQLUnionType;
      }
    });
    Object.defineProperty(exports, "SchemaMetaFieldDef", {
      enumerable: !0,
      get: function() {
        return _introspection.SchemaMetaFieldDef;
      }
    });
    Object.defineProperty(exports, "TypeKind", {
      enumerable: !0,
      get: function() {
        return _introspection.TypeKind;
      }
    });
    Object.defineProperty(exports, "TypeMetaFieldDef", {
      enumerable: !0,
      get: function() {
        return _introspection.TypeMetaFieldDef;
      }
    });
    Object.defineProperty(exports, "TypeNameMetaFieldDef", {
      enumerable: !0,
      get: function() {
        return _introspection.TypeNameMetaFieldDef;
      }
    });
    Object.defineProperty(exports, "__Directive", {
      enumerable: !0,
      get: function() {
        return _introspection.__Directive;
      }
    });
    Object.defineProperty(exports, "__DirectiveLocation", {
      enumerable: !0,
      get: function() {
        return _introspection.__DirectiveLocation;
      }
    });
    Object.defineProperty(exports, "__EnumValue", {
      enumerable: !0,
      get: function() {
        return _introspection.__EnumValue;
      }
    });
    Object.defineProperty(exports, "__Field", {
      enumerable: !0,
      get: function() {
        return _introspection.__Field;
      }
    });
    Object.defineProperty(exports, "__InputValue", {
      enumerable: !0,
      get: function() {
        return _introspection.__InputValue;
      }
    });
    Object.defineProperty(exports, "__Schema", {
      enumerable: !0,
      get: function() {
        return _introspection.__Schema;
      }
    });
    Object.defineProperty(exports, "__Type", {
      enumerable: !0,
      get: function() {
        return _introspection.__Type;
      }
    });
    Object.defineProperty(exports, "__TypeKind", {
      enumerable: !0,
      get: function() {
        return _introspection.__TypeKind;
      }
    });
    Object.defineProperty(exports, "assertAbstractType", {
      enumerable: !0,
      get: function() {
        return _definition.assertAbstractType;
      }
    });
    Object.defineProperty(exports, "assertCompositeType", {
      enumerable: !0,
      get: function() {
        return _definition.assertCompositeType;
      }
    });
    Object.defineProperty(exports, "assertDirective", {
      enumerable: !0,
      get: function() {
        return _directives.assertDirective;
      }
    });
    Object.defineProperty(exports, "assertEnumType", {
      enumerable: !0,
      get: function() {
        return _definition.assertEnumType;
      }
    });
    Object.defineProperty(exports, "assertEnumValueName", {
      enumerable: !0,
      get: function() {
        return _assertName.assertEnumValueName;
      }
    });
    Object.defineProperty(exports, "assertInputObjectType", {
      enumerable: !0,
      get: function() {
        return _definition.assertInputObjectType;
      }
    });
    Object.defineProperty(exports, "assertInputType", {
      enumerable: !0,
      get: function() {
        return _definition.assertInputType;
      }
    });
    Object.defineProperty(exports, "assertInterfaceType", {
      enumerable: !0,
      get: function() {
        return _definition.assertInterfaceType;
      }
    });
    Object.defineProperty(exports, "assertLeafType", {
      enumerable: !0,
      get: function() {
        return _definition.assertLeafType;
      }
    });
    Object.defineProperty(exports, "assertListType", {
      enumerable: !0,
      get: function() {
        return _definition.assertListType;
      }
    });
    Object.defineProperty(exports, "assertName", {
      enumerable: !0,
      get: function() {
        return _assertName.assertName;
      }
    });
    Object.defineProperty(exports, "assertNamedType", {
      enumerable: !0,
      get: function() {
        return _definition.assertNamedType;
      }
    });
    Object.defineProperty(exports, "assertNonNullType", {
      enumerable: !0,
      get: function() {
        return _definition.assertNonNullType;
      }
    });
    Object.defineProperty(exports, "assertNullableType", {
      enumerable: !0,
      get: function() {
        return _definition.assertNullableType;
      }
    });
    Object.defineProperty(exports, "assertObjectType", {
      enumerable: !0,
      get: function() {
        return _definition.assertObjectType;
      }
    });
    Object.defineProperty(exports, "assertOutputType", {
      enumerable: !0,
      get: function() {
        return _definition.assertOutputType;
      }
    });
    Object.defineProperty(exports, "assertScalarType", {
      enumerable: !0,
      get: function() {
        return _definition.assertScalarType;
      }
    });
    Object.defineProperty(exports, "assertSchema", {
      enumerable: !0,
      get: function() {
        return _schema.assertSchema;
      }
    });
    Object.defineProperty(exports, "assertType", {
      enumerable: !0,
      get: function() {
        return _definition.assertType;
      }
    });
    Object.defineProperty(exports, "assertUnionType", {
      enumerable: !0,
      get: function() {
        return _definition.assertUnionType;
      }
    });
    Object.defineProperty(exports, "assertValidSchema", {
      enumerable: !0,
      get: function() {
        return _validate.assertValidSchema;
      }
    });
    Object.defineProperty(exports, "assertWrappingType", {
      enumerable: !0,
      get: function() {
        return _definition.assertWrappingType;
      }
    });
    Object.defineProperty(exports, "getNamedType", {
      enumerable: !0,
      get: function() {
        return _definition.getNamedType;
      }
    });
    Object.defineProperty(exports, "getNullableType", {
      enumerable: !0,
      get: function() {
        return _definition.getNullableType;
      }
    });
    Object.defineProperty(exports, "introspectionTypes", {
      enumerable: !0,
      get: function() {
        return _introspection.introspectionTypes;
      }
    });
    Object.defineProperty(exports, "isAbstractType", {
      enumerable: !0,
      get: function() {
        return _definition.isAbstractType;
      }
    });
    Object.defineProperty(exports, "isCompositeType", {
      enumerable: !0,
      get: function() {
        return _definition.isCompositeType;
      }
    });
    Object.defineProperty(exports, "isDirective", {
      enumerable: !0,
      get: function() {
        return _directives.isDirective;
      }
    });
    Object.defineProperty(exports, "isEnumType", {
      enumerable: !0,
      get: function() {
        return _definition.isEnumType;
      }
    });
    Object.defineProperty(exports, "isInputObjectType", {
      enumerable: !0,
      get: function() {
        return _definition.isInputObjectType;
      }
    });
    Object.defineProperty(exports, "isInputType", {
      enumerable: !0,
      get: function() {
        return _definition.isInputType;
      }
    });
    Object.defineProperty(exports, "isInterfaceType", {
      enumerable: !0,
      get: function() {
        return _definition.isInterfaceType;
      }
    });
    Object.defineProperty(exports, "isIntrospectionType", {
      enumerable: !0,
      get: function() {
        return _introspection.isIntrospectionType;
      }
    });
    Object.defineProperty(exports, "isLeafType", {
      enumerable: !0,
      get: function() {
        return _definition.isLeafType;
      }
    });
    Object.defineProperty(exports, "isListType", {
      enumerable: !0,
      get: function() {
        return _definition.isListType;
      }
    });
    Object.defineProperty(exports, "isNamedType", {
      enumerable: !0,
      get: function() {
        return _definition.isNamedType;
      }
    });
    Object.defineProperty(exports, "isNonNullType", {
      enumerable: !0,
      get: function() {
        return _definition.isNonNullType;
      }
    });
    Object.defineProperty(exports, "isNullableType", {
      enumerable: !0,
      get: function() {
        return _definition.isNullableType;
      }
    });
    Object.defineProperty(exports, "isObjectType", {
      enumerable: !0,
      get: function() {
        return _definition.isObjectType;
      }
    });
    Object.defineProperty(exports, "isOutputType", {
      enumerable: !0,
      get: function() {
        return _definition.isOutputType;
      }
    });
    Object.defineProperty(exports, "isRequiredArgument", {
      enumerable: !0,
      get: function() {
        return _definition.isRequiredArgument;
      }
    });
    Object.defineProperty(exports, "isRequiredInputField", {
      enumerable: !0,
      get: function() {
        return _definition.isRequiredInputField;
      }
    });
    Object.defineProperty(exports, "isScalarType", {
      enumerable: !0,
      get: function() {
        return _definition.isScalarType;
      }
    });
    Object.defineProperty(exports, "isSchema", {
      enumerable: !0,
      get: function() {
        return _schema.isSchema;
      }
    });
    Object.defineProperty(exports, "isSpecifiedDirective", {
      enumerable: !0,
      get: function() {
        return _directives.isSpecifiedDirective;
      }
    });
    Object.defineProperty(exports, "isSpecifiedScalarType", {
      enumerable: !0,
      get: function() {
        return _scalars.isSpecifiedScalarType;
      }
    });
    Object.defineProperty(exports, "isType", {
      enumerable: !0,
      get: function() {
        return _definition.isType;
      }
    });
    Object.defineProperty(exports, "isUnionType", {
      enumerable: !0,
      get: function() {
        return _definition.isUnionType;
      }
    });
    Object.defineProperty(exports, "isWrappingType", {
      enumerable: !0,
      get: function() {
        return _definition.isWrappingType;
      }
    });
    Object.defineProperty(exports, "resolveObjMapThunk", {
      enumerable: !0,
      get: function() {
        return _definition.resolveObjMapThunk;
      }
    });
    Object.defineProperty(exports, "resolveReadonlyArrayThunk", {
      enumerable: !0,
      get: function() {
        return _definition.resolveReadonlyArrayThunk;
      }
    });
    Object.defineProperty(exports, "specifiedDirectives", {
      enumerable: !0,
      get: function() {
        return _directives.specifiedDirectives;
      }
    });
    Object.defineProperty(exports, "specifiedScalarTypes", {
      enumerable: !0,
      get: function() {
        return _scalars.specifiedScalarTypes;
      }
    });
    Object.defineProperty(exports, "validateSchema", {
      enumerable: !0,
      get: function() {
        return _validate.validateSchema;
      }
    });
    var _schema = require_schema(), _definition = require_definition(), _directives = require_directives(), _scalars = require_scalars(), _introspection = require_introspection(), _validate = require_validate(), _assertName = require_assertName();
  }
});

// node_modules/graphql/language/index.js
var require_language = __commonJS({
  "node_modules/graphql/language/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    Object.defineProperty(exports, "BREAK", {
      enumerable: !0,
      get: function() {
        return _visitor.BREAK;
      }
    });
    Object.defineProperty(exports, "DirectiveLocation", {
      enumerable: !0,
      get: function() {
        return _directiveLocation.DirectiveLocation;
      }
    });
    Object.defineProperty(exports, "Kind", {
      enumerable: !0,
      get: function() {
        return _kinds.Kind;
      }
    });
    Object.defineProperty(exports, "Lexer", {
      enumerable: !0,
      get: function() {
        return _lexer.Lexer;
      }
    });
    Object.defineProperty(exports, "Location", {
      enumerable: !0,
      get: function() {
        return _ast.Location;
      }
    });
    Object.defineProperty(exports, "OperationTypeNode", {
      enumerable: !0,
      get: function() {
        return _ast.OperationTypeNode;
      }
    });
    Object.defineProperty(exports, "Source", {
      enumerable: !0,
      get: function() {
        return _source.Source;
      }
    });
    Object.defineProperty(exports, "Token", {
      enumerable: !0,
      get: function() {
        return _ast.Token;
      }
    });
    Object.defineProperty(exports, "TokenKind", {
      enumerable: !0,
      get: function() {
        return _tokenKind.TokenKind;
      }
    });
    Object.defineProperty(exports, "getEnterLeaveForKind", {
      enumerable: !0,
      get: function() {
        return _visitor.getEnterLeaveForKind;
      }
    });
    Object.defineProperty(exports, "getLocation", {
      enumerable: !0,
      get: function() {
        return _location.getLocation;
      }
    });
    Object.defineProperty(exports, "getVisitFn", {
      enumerable: !0,
      get: function() {
        return _visitor.getVisitFn;
      }
    });
    Object.defineProperty(exports, "isConstValueNode", {
      enumerable: !0,
      get: function() {
        return _predicates.isConstValueNode;
      }
    });
    Object.defineProperty(exports, "isDefinitionNode", {
      enumerable: !0,
      get: function() {
        return _predicates.isDefinitionNode;
      }
    });
    Object.defineProperty(exports, "isExecutableDefinitionNode", {
      enumerable: !0,
      get: function() {
        return _predicates.isExecutableDefinitionNode;
      }
    });
    Object.defineProperty(exports, "isSelectionNode", {
      enumerable: !0,
      get: function() {
        return _predicates.isSelectionNode;
      }
    });
    Object.defineProperty(exports, "isTypeDefinitionNode", {
      enumerable: !0,
      get: function() {
        return _predicates.isTypeDefinitionNode;
      }
    });
    Object.defineProperty(exports, "isTypeExtensionNode", {
      enumerable: !0,
      get: function() {
        return _predicates.isTypeExtensionNode;
      }
    });
    Object.defineProperty(exports, "isTypeNode", {
      enumerable: !0,
      get: function() {
        return _predicates.isTypeNode;
      }
    });
    Object.defineProperty(exports, "isTypeSystemDefinitionNode", {
      enumerable: !0,
      get: function() {
        return _predicates.isTypeSystemDefinitionNode;
      }
    });
    Object.defineProperty(exports, "isTypeSystemExtensionNode", {
      enumerable: !0,
      get: function() {
        return _predicates.isTypeSystemExtensionNode;
      }
    });
    Object.defineProperty(exports, "isValueNode", {
      enumerable: !0,
      get: function() {
        return _predicates.isValueNode;
      }
    });
    Object.defineProperty(exports, "parse", {
      enumerable: !0,
      get: function() {
        return _parser.parse;
      }
    });
    Object.defineProperty(exports, "parseConstValue", {
      enumerable: !0,
      get: function() {
        return _parser.parseConstValue;
      }
    });
    Object.defineProperty(exports, "parseType", {
      enumerable: !0,
      get: function() {
        return _parser.parseType;
      }
    });
    Object.defineProperty(exports, "parseValue", {
      enumerable: !0,
      get: function() {
        return _parser.parseValue;
      }
    });
    Object.defineProperty(exports, "print", {
      enumerable: !0,
      get: function() {
        return _printer.print;
      }
    });
    Object.defineProperty(exports, "printLocation", {
      enumerable: !0,
      get: function() {
        return _printLocation.printLocation;
      }
    });
    Object.defineProperty(exports, "printSourceLocation", {
      enumerable: !0,
      get: function() {
        return _printLocation.printSourceLocation;
      }
    });
    Object.defineProperty(exports, "visit", {
      enumerable: !0,
      get: function() {
        return _visitor.visit;
      }
    });
    Object.defineProperty(exports, "visitInParallel", {
      enumerable: !0,
      get: function() {
        return _visitor.visitInParallel;
      }
    });
    var _source = require_source(), _location = require_location(), _printLocation = require_printLocation(), _kinds = require_kinds(), _tokenKind = require_tokenKind(), _lexer = require_lexer(), _parser = require_parser(), _printer = require_printer(), _visitor = require_visitor(), _ast = require_ast(), _predicates = require_predicates(), _directiveLocation = require_directiveLocation();
  }
});

// node_modules/graphql/jsutils/isAsyncIterable.js
var require_isAsyncIterable = __commonJS({
  "node_modules/graphql/jsutils/isAsyncIterable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.isAsyncIterable = isAsyncIterable;
    function isAsyncIterable(maybeAsyncIterable) {
      return typeof maybeAsyncIterable?.[Symbol.asyncIterator] == "function";
    }
  }
});

// node_modules/graphql/execution/mapAsyncIterator.js
var require_mapAsyncIterator = __commonJS({
  "node_modules/graphql/execution/mapAsyncIterator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.mapAsyncIterator = mapAsyncIterator;
    function mapAsyncIterator(iterable, callback) {
      let iterator = iterable[Symbol.asyncIterator]();
      async function mapResult(result) {
        if (result.done)
          return result;
        try {
          return {
            value: await callback(result.value),
            done: !1
          };
        } catch (error) {
          if (typeof iterator.return == "function")
            try {
              await iterator.return();
            } catch {
            }
          throw error;
        }
      }
      return {
        async next() {
          return mapResult(await iterator.next());
        },
        async return() {
          return typeof iterator.return == "function" ? mapResult(await iterator.return()) : {
            value: void 0,
            done: !0
          };
        },
        async throw(error) {
          if (typeof iterator.throw == "function")
            return mapResult(await iterator.throw(error));
          throw error;
        },
        [Symbol.asyncIterator]() {
          return this;
        }
      };
    }
  }
});

// node_modules/graphql/execution/subscribe.js
var require_subscribe = __commonJS({
  "node_modules/graphql/execution/subscribe.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.createSourceEventStream = createSourceEventStream;
    exports.subscribe = subscribe;
    var _devAssert = require_devAssert(), _inspect = require_inspect(), _isAsyncIterable = require_isAsyncIterable(), _Path = require_Path(), _GraphQLError = require_GraphQLError(), _locatedError = require_locatedError(), _collectFields = require_collectFields(), _execute = require_execute(), _mapAsyncIterator = require_mapAsyncIterator(), _values = require_values();
    async function subscribe(args) {
      arguments.length < 2 || (0, _devAssert.devAssert)(
        !1,
        "graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead."
      );
      let resultOrStream = await createSourceEventStream(args);
      if (!(0, _isAsyncIterable.isAsyncIterable)(resultOrStream))
        return resultOrStream;
      let mapSourceToResponse = (payload) => (0, _execute.execute)({ ...args, rootValue: payload });
      return (0, _mapAsyncIterator.mapAsyncIterator)(
        resultOrStream,
        mapSourceToResponse
      );
    }
    function toNormalizedArgs(args) {
      let firstArg = args[0];
      return firstArg && "document" in firstArg ? firstArg : {
        schema: firstArg,
        // FIXME: when underlying TS bug fixed, see https://github.com/microsoft/TypeScript/issues/31613
        document: args[1],
        rootValue: args[2],
        contextValue: args[3],
        variableValues: args[4],
        operationName: args[5],
        subscribeFieldResolver: args[6]
      };
    }
    async function createSourceEventStream(...rawArgs) {
      let args = toNormalizedArgs(rawArgs), { schema, document: document2, variableValues } = args;
      (0, _execute.assertValidExecutionArguments)(schema, document2, variableValues);
      let exeContext = (0, _execute.buildExecutionContext)(args);
      if (!("schema" in exeContext))
        return {
          errors: exeContext
        };
      try {
        let eventStream = await executeSubscription(exeContext);
        if (!(0, _isAsyncIterable.isAsyncIterable)(eventStream))
          throw new Error(
            `Subscription field must return Async Iterable. Received: ${(0, _inspect.inspect)(eventStream)}.`
          );
        return eventStream;
      } catch (error) {
        if (error instanceof _GraphQLError.GraphQLError)
          return {
            errors: [error]
          };
        throw error;
      }
    }
    async function executeSubscription(exeContext) {
      let { schema, fragments, operation, variableValues, rootValue } = exeContext, rootType = schema.getSubscriptionType();
      if (rootType == null)
        throw new _GraphQLError.GraphQLError(
          "Schema is not configured to execute subscription operation.",
          {
            nodes: operation
          }
        );
      let rootFields = (0, _collectFields.collectFields)(
        schema,
        fragments,
        variableValues,
        rootType,
        operation.selectionSet
      ), [responseName, fieldNodes] = [...rootFields.entries()][0], fieldDef = (0, _execute.getFieldDef)(schema, rootType, fieldNodes[0]);
      if (!fieldDef) {
        let fieldName = fieldNodes[0].name.value;
        throw new _GraphQLError.GraphQLError(
          `The subscription field "${fieldName}" is not defined.`,
          {
            nodes: fieldNodes
          }
        );
      }
      let path = (0, _Path.addPath)(void 0, responseName, rootType.name), info = (0, _execute.buildResolveInfo)(
        exeContext,
        fieldDef,
        fieldNodes,
        rootType,
        path
      );
      try {
        var _fieldDef$subscribe;
        let args = (0, _values.getArgumentValues)(
          fieldDef,
          fieldNodes[0],
          variableValues
        ), contextValue = exeContext.contextValue, eventStream = await ((_fieldDef$subscribe = fieldDef.subscribe) !== null && _fieldDef$subscribe !== void 0 ? _fieldDef$subscribe : exeContext.subscribeFieldResolver)(rootValue, args, contextValue, info);
        if (eventStream instanceof Error)
          throw eventStream;
        return eventStream;
      } catch (error) {
        throw (0, _locatedError.locatedError)(
          error,
          fieldNodes,
          (0, _Path.pathToArray)(path)
        );
      }
    }
  }
});

// node_modules/graphql/execution/index.js
var require_execution = __commonJS({
  "node_modules/graphql/execution/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    Object.defineProperty(exports, "createSourceEventStream", {
      enumerable: !0,
      get: function() {
        return _subscribe.createSourceEventStream;
      }
    });
    Object.defineProperty(exports, "defaultFieldResolver", {
      enumerable: !0,
      get: function() {
        return _execute.defaultFieldResolver;
      }
    });
    Object.defineProperty(exports, "defaultTypeResolver", {
      enumerable: !0,
      get: function() {
        return _execute.defaultTypeResolver;
      }
    });
    Object.defineProperty(exports, "execute", {
      enumerable: !0,
      get: function() {
        return _execute.execute;
      }
    });
    Object.defineProperty(exports, "executeSync", {
      enumerable: !0,
      get: function() {
        return _execute.executeSync;
      }
    });
    Object.defineProperty(exports, "getArgumentValues", {
      enumerable: !0,
      get: function() {
        return _values.getArgumentValues;
      }
    });
    Object.defineProperty(exports, "getDirectiveValues", {
      enumerable: !0,
      get: function() {
        return _values.getDirectiveValues;
      }
    });
    Object.defineProperty(exports, "getVariableValues", {
      enumerable: !0,
      get: function() {
        return _values.getVariableValues;
      }
    });
    Object.defineProperty(exports, "responsePathAsArray", {
      enumerable: !0,
      get: function() {
        return _Path.pathToArray;
      }
    });
    Object.defineProperty(exports, "subscribe", {
      enumerable: !0,
      get: function() {
        return _subscribe.subscribe;
      }
    });
    var _Path = require_Path(), _execute = require_execute(), _subscribe = require_subscribe(), _values = require_values();
  }
});

// node_modules/graphql/validation/rules/custom/NoDeprecatedCustomRule.js
var require_NoDeprecatedCustomRule = __commonJS({
  "node_modules/graphql/validation/rules/custom/NoDeprecatedCustomRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.NoDeprecatedCustomRule = NoDeprecatedCustomRule;
    var _invariant = require_invariant(), _GraphQLError = require_GraphQLError(), _definition = require_definition();
    function NoDeprecatedCustomRule(context) {
      return {
        Field(node) {
          let fieldDef = context.getFieldDef(), deprecationReason = fieldDef?.deprecationReason;
          if (fieldDef && deprecationReason != null) {
            let parentType = context.getParentType();
            parentType != null || (0, _invariant.invariant)(!1), context.reportError(
              new _GraphQLError.GraphQLError(
                `The field ${parentType.name}.${fieldDef.name} is deprecated. ${deprecationReason}`,
                {
                  nodes: node
                }
              )
            );
          }
        },
        Argument(node) {
          let argDef = context.getArgument(), deprecationReason = argDef?.deprecationReason;
          if (argDef && deprecationReason != null) {
            let directiveDef = context.getDirective();
            if (directiveDef != null)
              context.reportError(
                new _GraphQLError.GraphQLError(
                  `Directive "@${directiveDef.name}" argument "${argDef.name}" is deprecated. ${deprecationReason}`,
                  {
                    nodes: node
                  }
                )
              );
            else {
              let parentType = context.getParentType(), fieldDef = context.getFieldDef();
              parentType != null && fieldDef != null || (0, _invariant.invariant)(!1), context.reportError(
                new _GraphQLError.GraphQLError(
                  `Field "${parentType.name}.${fieldDef.name}" argument "${argDef.name}" is deprecated. ${deprecationReason}`,
                  {
                    nodes: node
                  }
                )
              );
            }
          }
        },
        ObjectField(node) {
          let inputObjectDef = (0, _definition.getNamedType)(
            context.getParentInputType()
          );
          if ((0, _definition.isInputObjectType)(inputObjectDef)) {
            let inputFieldDef = inputObjectDef.getFields()[node.name.value], deprecationReason = inputFieldDef?.deprecationReason;
            deprecationReason != null && context.reportError(
              new _GraphQLError.GraphQLError(
                `The input field ${inputObjectDef.name}.${inputFieldDef.name} is deprecated. ${deprecationReason}`,
                {
                  nodes: node
                }
              )
            );
          }
        },
        EnumValue(node) {
          let enumValueDef = context.getEnumValue(), deprecationReason = enumValueDef?.deprecationReason;
          if (enumValueDef && deprecationReason != null) {
            let enumTypeDef = (0, _definition.getNamedType)(
              context.getInputType()
            );
            enumTypeDef != null || (0, _invariant.invariant)(!1), context.reportError(
              new _GraphQLError.GraphQLError(
                `The enum value "${enumTypeDef.name}.${enumValueDef.name}" is deprecated. ${deprecationReason}`,
                {
                  nodes: node
                }
              )
            );
          }
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/custom/NoSchemaIntrospectionCustomRule.js
var require_NoSchemaIntrospectionCustomRule = __commonJS({
  "node_modules/graphql/validation/rules/custom/NoSchemaIntrospectionCustomRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.NoSchemaIntrospectionCustomRule = NoSchemaIntrospectionCustomRule;
    var _GraphQLError = require_GraphQLError(), _definition = require_definition(), _introspection = require_introspection();
    function NoSchemaIntrospectionCustomRule(context) {
      return {
        Field(node) {
          let type = (0, _definition.getNamedType)(context.getType());
          type && (0, _introspection.isIntrospectionType)(type) && context.reportError(
            new _GraphQLError.GraphQLError(
              `GraphQL introspection has been disabled, but the requested query contained the field "${node.name.value}".`,
              {
                nodes: node
              }
            )
          );
        }
      };
    }
  }
});

// node_modules/graphql/validation/index.js
var require_validation = __commonJS({
  "node_modules/graphql/validation/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    Object.defineProperty(exports, "ExecutableDefinitionsRule", {
      enumerable: !0,
      get: function() {
        return _ExecutableDefinitionsRule.ExecutableDefinitionsRule;
      }
    });
    Object.defineProperty(exports, "FieldsOnCorrectTypeRule", {
      enumerable: !0,
      get: function() {
        return _FieldsOnCorrectTypeRule.FieldsOnCorrectTypeRule;
      }
    });
    Object.defineProperty(exports, "FragmentsOnCompositeTypesRule", {
      enumerable: !0,
      get: function() {
        return _FragmentsOnCompositeTypesRule.FragmentsOnCompositeTypesRule;
      }
    });
    Object.defineProperty(exports, "KnownArgumentNamesRule", {
      enumerable: !0,
      get: function() {
        return _KnownArgumentNamesRule.KnownArgumentNamesRule;
      }
    });
    Object.defineProperty(exports, "KnownDirectivesRule", {
      enumerable: !0,
      get: function() {
        return _KnownDirectivesRule.KnownDirectivesRule;
      }
    });
    Object.defineProperty(exports, "KnownFragmentNamesRule", {
      enumerable: !0,
      get: function() {
        return _KnownFragmentNamesRule.KnownFragmentNamesRule;
      }
    });
    Object.defineProperty(exports, "KnownTypeNamesRule", {
      enumerable: !0,
      get: function() {
        return _KnownTypeNamesRule.KnownTypeNamesRule;
      }
    });
    Object.defineProperty(exports, "LoneAnonymousOperationRule", {
      enumerable: !0,
      get: function() {
        return _LoneAnonymousOperationRule.LoneAnonymousOperationRule;
      }
    });
    Object.defineProperty(exports, "LoneSchemaDefinitionRule", {
      enumerable: !0,
      get: function() {
        return _LoneSchemaDefinitionRule.LoneSchemaDefinitionRule;
      }
    });
    Object.defineProperty(exports, "MaxIntrospectionDepthRule", {
      enumerable: !0,
      get: function() {
        return _MaxIntrospectionDepthRule.MaxIntrospectionDepthRule;
      }
    });
    Object.defineProperty(exports, "NoDeprecatedCustomRule", {
      enumerable: !0,
      get: function() {
        return _NoDeprecatedCustomRule.NoDeprecatedCustomRule;
      }
    });
    Object.defineProperty(exports, "NoFragmentCyclesRule", {
      enumerable: !0,
      get: function() {
        return _NoFragmentCyclesRule.NoFragmentCyclesRule;
      }
    });
    Object.defineProperty(exports, "NoSchemaIntrospectionCustomRule", {
      enumerable: !0,
      get: function() {
        return _NoSchemaIntrospectionCustomRule.NoSchemaIntrospectionCustomRule;
      }
    });
    Object.defineProperty(exports, "NoUndefinedVariablesRule", {
      enumerable: !0,
      get: function() {
        return _NoUndefinedVariablesRule.NoUndefinedVariablesRule;
      }
    });
    Object.defineProperty(exports, "NoUnusedFragmentsRule", {
      enumerable: !0,
      get: function() {
        return _NoUnusedFragmentsRule.NoUnusedFragmentsRule;
      }
    });
    Object.defineProperty(exports, "NoUnusedVariablesRule", {
      enumerable: !0,
      get: function() {
        return _NoUnusedVariablesRule.NoUnusedVariablesRule;
      }
    });
    Object.defineProperty(exports, "OverlappingFieldsCanBeMergedRule", {
      enumerable: !0,
      get: function() {
        return _OverlappingFieldsCanBeMergedRule.OverlappingFieldsCanBeMergedRule;
      }
    });
    Object.defineProperty(exports, "PossibleFragmentSpreadsRule", {
      enumerable: !0,
      get: function() {
        return _PossibleFragmentSpreadsRule.PossibleFragmentSpreadsRule;
      }
    });
    Object.defineProperty(exports, "PossibleTypeExtensionsRule", {
      enumerable: !0,
      get: function() {
        return _PossibleTypeExtensionsRule.PossibleTypeExtensionsRule;
      }
    });
    Object.defineProperty(exports, "ProvidedRequiredArgumentsRule", {
      enumerable: !0,
      get: function() {
        return _ProvidedRequiredArgumentsRule.ProvidedRequiredArgumentsRule;
      }
    });
    Object.defineProperty(exports, "ScalarLeafsRule", {
      enumerable: !0,
      get: function() {
        return _ScalarLeafsRule.ScalarLeafsRule;
      }
    });
    Object.defineProperty(exports, "SingleFieldSubscriptionsRule", {
      enumerable: !0,
      get: function() {
        return _SingleFieldSubscriptionsRule.SingleFieldSubscriptionsRule;
      }
    });
    Object.defineProperty(exports, "UniqueArgumentDefinitionNamesRule", {
      enumerable: !0,
      get: function() {
        return _UniqueArgumentDefinitionNamesRule.UniqueArgumentDefinitionNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueArgumentNamesRule", {
      enumerable: !0,
      get: function() {
        return _UniqueArgumentNamesRule.UniqueArgumentNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueDirectiveNamesRule", {
      enumerable: !0,
      get: function() {
        return _UniqueDirectiveNamesRule.UniqueDirectiveNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueDirectivesPerLocationRule", {
      enumerable: !0,
      get: function() {
        return _UniqueDirectivesPerLocationRule.UniqueDirectivesPerLocationRule;
      }
    });
    Object.defineProperty(exports, "UniqueEnumValueNamesRule", {
      enumerable: !0,
      get: function() {
        return _UniqueEnumValueNamesRule.UniqueEnumValueNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueFieldDefinitionNamesRule", {
      enumerable: !0,
      get: function() {
        return _UniqueFieldDefinitionNamesRule.UniqueFieldDefinitionNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueFragmentNamesRule", {
      enumerable: !0,
      get: function() {
        return _UniqueFragmentNamesRule.UniqueFragmentNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueInputFieldNamesRule", {
      enumerable: !0,
      get: function() {
        return _UniqueInputFieldNamesRule.UniqueInputFieldNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueOperationNamesRule", {
      enumerable: !0,
      get: function() {
        return _UniqueOperationNamesRule.UniqueOperationNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueOperationTypesRule", {
      enumerable: !0,
      get: function() {
        return _UniqueOperationTypesRule.UniqueOperationTypesRule;
      }
    });
    Object.defineProperty(exports, "UniqueTypeNamesRule", {
      enumerable: !0,
      get: function() {
        return _UniqueTypeNamesRule.UniqueTypeNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueVariableNamesRule", {
      enumerable: !0,
      get: function() {
        return _UniqueVariableNamesRule.UniqueVariableNamesRule;
      }
    });
    Object.defineProperty(exports, "ValidationContext", {
      enumerable: !0,
      get: function() {
        return _ValidationContext.ValidationContext;
      }
    });
    Object.defineProperty(exports, "ValuesOfCorrectTypeRule", {
      enumerable: !0,
      get: function() {
        return _ValuesOfCorrectTypeRule.ValuesOfCorrectTypeRule;
      }
    });
    Object.defineProperty(exports, "VariablesAreInputTypesRule", {
      enumerable: !0,
      get: function() {
        return _VariablesAreInputTypesRule.VariablesAreInputTypesRule;
      }
    });
    Object.defineProperty(exports, "VariablesInAllowedPositionRule", {
      enumerable: !0,
      get: function() {
        return _VariablesInAllowedPositionRule.VariablesInAllowedPositionRule;
      }
    });
    Object.defineProperty(exports, "recommendedRules", {
      enumerable: !0,
      get: function() {
        return _specifiedRules.recommendedRules;
      }
    });
    Object.defineProperty(exports, "specifiedRules", {
      enumerable: !0,
      get: function() {
        return _specifiedRules.specifiedRules;
      }
    });
    Object.defineProperty(exports, "validate", {
      enumerable: !0,
      get: function() {
        return _validate.validate;
      }
    });
    var _validate = require_validate2(), _ValidationContext = require_ValidationContext(), _specifiedRules = require_specifiedRules(), _ExecutableDefinitionsRule = require_ExecutableDefinitionsRule(), _FieldsOnCorrectTypeRule = require_FieldsOnCorrectTypeRule(), _FragmentsOnCompositeTypesRule = require_FragmentsOnCompositeTypesRule(), _KnownArgumentNamesRule = require_KnownArgumentNamesRule(), _KnownDirectivesRule = require_KnownDirectivesRule(), _KnownFragmentNamesRule = require_KnownFragmentNamesRule(), _KnownTypeNamesRule = require_KnownTypeNamesRule(), _LoneAnonymousOperationRule = require_LoneAnonymousOperationRule(), _NoFragmentCyclesRule = require_NoFragmentCyclesRule(), _NoUndefinedVariablesRule = require_NoUndefinedVariablesRule(), _NoUnusedFragmentsRule = require_NoUnusedFragmentsRule(), _NoUnusedVariablesRule = require_NoUnusedVariablesRule(), _OverlappingFieldsCanBeMergedRule = require_OverlappingFieldsCanBeMergedRule(), _PossibleFragmentSpreadsRule = require_PossibleFragmentSpreadsRule(), _ProvidedRequiredArgumentsRule = require_ProvidedRequiredArgumentsRule(), _ScalarLeafsRule = require_ScalarLeafsRule(), _SingleFieldSubscriptionsRule = require_SingleFieldSubscriptionsRule(), _UniqueArgumentNamesRule = require_UniqueArgumentNamesRule(), _UniqueDirectivesPerLocationRule = require_UniqueDirectivesPerLocationRule(), _UniqueFragmentNamesRule = require_UniqueFragmentNamesRule(), _UniqueInputFieldNamesRule = require_UniqueInputFieldNamesRule(), _UniqueOperationNamesRule = require_UniqueOperationNamesRule(), _UniqueVariableNamesRule = require_UniqueVariableNamesRule(), _ValuesOfCorrectTypeRule = require_ValuesOfCorrectTypeRule(), _VariablesAreInputTypesRule = require_VariablesAreInputTypesRule(), _VariablesInAllowedPositionRule = require_VariablesInAllowedPositionRule(), _MaxIntrospectionDepthRule = require_MaxIntrospectionDepthRule(), _LoneSchemaDefinitionRule = require_LoneSchemaDefinitionRule(), _UniqueOperationTypesRule = require_UniqueOperationTypesRule(), _UniqueTypeNamesRule = require_UniqueTypeNamesRule(), _UniqueEnumValueNamesRule = require_UniqueEnumValueNamesRule(), _UniqueFieldDefinitionNamesRule = require_UniqueFieldDefinitionNamesRule(), _UniqueArgumentDefinitionNamesRule = require_UniqueArgumentDefinitionNamesRule(), _UniqueDirectiveNamesRule = require_UniqueDirectiveNamesRule(), _PossibleTypeExtensionsRule = require_PossibleTypeExtensionsRule(), _NoDeprecatedCustomRule = require_NoDeprecatedCustomRule(), _NoSchemaIntrospectionCustomRule = require_NoSchemaIntrospectionCustomRule();
  }
});

// node_modules/graphql/error/index.js
var require_error = __commonJS({
  "node_modules/graphql/error/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    Object.defineProperty(exports, "GraphQLError", {
      enumerable: !0,
      get: function() {
        return _GraphQLError.GraphQLError;
      }
    });
    Object.defineProperty(exports, "formatError", {
      enumerable: !0,
      get: function() {
        return _GraphQLError.formatError;
      }
    });
    Object.defineProperty(exports, "locatedError", {
      enumerable: !0,
      get: function() {
        return _locatedError.locatedError;
      }
    });
    Object.defineProperty(exports, "printError", {
      enumerable: !0,
      get: function() {
        return _GraphQLError.printError;
      }
    });
    Object.defineProperty(exports, "syntaxError", {
      enumerable: !0,
      get: function() {
        return _syntaxError.syntaxError;
      }
    });
    var _GraphQLError = require_GraphQLError(), _syntaxError = require_syntaxError(), _locatedError = require_locatedError();
  }
});

// node_modules/graphql/utilities/getIntrospectionQuery.js
var require_getIntrospectionQuery = __commonJS({
  "node_modules/graphql/utilities/getIntrospectionQuery.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.getIntrospectionQuery = getIntrospectionQuery;
    function getIntrospectionQuery(options) {
      let optionsWithDefault = {
        descriptions: !0,
        specifiedByUrl: !1,
        directiveIsRepeatable: !1,
        schemaDescription: !1,
        inputValueDeprecation: !1,
        oneOf: !1,
        ...options
      }, descriptions = optionsWithDefault.descriptions ? "description" : "", specifiedByUrl = optionsWithDefault.specifiedByUrl ? "specifiedByURL" : "", directiveIsRepeatable = optionsWithDefault.directiveIsRepeatable ? "isRepeatable" : "", schemaDescription = optionsWithDefault.schemaDescription ? descriptions : "";
      function inputDeprecation(str) {
        return optionsWithDefault.inputValueDeprecation ? str : "";
      }
      let oneOf = optionsWithDefault.oneOf ? "isOneOf" : "";
      return `
    query IntrospectionQuery {
      __schema {
        ${schemaDescription}
        queryType { name kind }
        mutationType { name kind }
        subscriptionType { name kind }
        types {
          ...FullType
        }
        directives {
          name
          ${descriptions}
          ${directiveIsRepeatable}
          locations
          args${inputDeprecation("(includeDeprecated: true)")} {
            ...InputValue
          }
        }
      }
    }

    fragment FullType on __Type {
      kind
      name
      ${descriptions}
      ${specifiedByUrl}
      ${oneOf}
      fields(includeDeprecated: true) {
        name
        ${descriptions}
        args${inputDeprecation("(includeDeprecated: true)")} {
          ...InputValue
        }
        type {
          ...TypeRef
        }
        isDeprecated
        deprecationReason
      }
      inputFields${inputDeprecation("(includeDeprecated: true)")} {
        ...InputValue
      }
      interfaces {
        ...TypeRef
      }
      enumValues(includeDeprecated: true) {
        name
        ${descriptions}
        isDeprecated
        deprecationReason
      }
      possibleTypes {
        ...TypeRef
      }
    }

    fragment InputValue on __InputValue {
      name
      ${descriptions}
      type { ...TypeRef }
      defaultValue
      ${inputDeprecation("isDeprecated")}
      ${inputDeprecation("deprecationReason")}
    }

    fragment TypeRef on __Type {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                  ofType {
                    kind
                    name
                    ofType {
                      kind
                      name
                      ofType {
                        kind
                        name
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  `;
    }
  }
});

// node_modules/graphql/utilities/getOperationAST.js
var require_getOperationAST = __commonJS({
  "node_modules/graphql/utilities/getOperationAST.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.getOperationAST = getOperationAST;
    var _kinds = require_kinds();
    function getOperationAST(documentAST, operationName) {
      let operation = null;
      for (let definition of documentAST.definitions)
        if (definition.kind === _kinds.Kind.OPERATION_DEFINITION) {
          var _definition$name;
          if (operationName == null) {
            if (operation)
              return null;
            operation = definition;
          } else if (((_definition$name = definition.name) === null || _definition$name === void 0 ? void 0 : _definition$name.value) === operationName)
            return definition;
        }
      return operation;
    }
  }
});

// node_modules/graphql/utilities/getOperationRootType.js
var require_getOperationRootType = __commonJS({
  "node_modules/graphql/utilities/getOperationRootType.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.getOperationRootType = getOperationRootType;
    var _GraphQLError = require_GraphQLError();
    function getOperationRootType(schema, operation) {
      if (operation.operation === "query") {
        let queryType = schema.getQueryType();
        if (!queryType)
          throw new _GraphQLError.GraphQLError(
            "Schema does not define the required query root type.",
            {
              nodes: operation
            }
          );
        return queryType;
      }
      if (operation.operation === "mutation") {
        let mutationType = schema.getMutationType();
        if (!mutationType)
          throw new _GraphQLError.GraphQLError(
            "Schema is not configured for mutations.",
            {
              nodes: operation
            }
          );
        return mutationType;
      }
      if (operation.operation === "subscription") {
        let subscriptionType = schema.getSubscriptionType();
        if (!subscriptionType)
          throw new _GraphQLError.GraphQLError(
            "Schema is not configured for subscriptions.",
            {
              nodes: operation
            }
          );
        return subscriptionType;
      }
      throw new _GraphQLError.GraphQLError(
        "Can only have query, mutation and subscription operations.",
        {
          nodes: operation
        }
      );
    }
  }
});

// node_modules/graphql/utilities/introspectionFromSchema.js
var require_introspectionFromSchema = __commonJS({
  "node_modules/graphql/utilities/introspectionFromSchema.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.introspectionFromSchema = introspectionFromSchema;
    var _invariant = require_invariant(), _parser = require_parser(), _execute = require_execute(), _getIntrospectionQuery = require_getIntrospectionQuery();
    function introspectionFromSchema(schema, options) {
      let optionsWithDefaults = {
        specifiedByUrl: !0,
        directiveIsRepeatable: !0,
        schemaDescription: !0,
        inputValueDeprecation: !0,
        oneOf: !0,
        ...options
      }, document2 = (0, _parser.parse)(
        (0, _getIntrospectionQuery.getIntrospectionQuery)(optionsWithDefaults)
      ), result = (0, _execute.executeSync)({
        schema,
        document: document2
      });
      return !result.errors && result.data || (0, _invariant.invariant)(!1), result.data;
    }
  }
});

// node_modules/graphql/utilities/buildClientSchema.js
var require_buildClientSchema = __commonJS({
  "node_modules/graphql/utilities/buildClientSchema.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.buildClientSchema = buildClientSchema;
    var _devAssert = require_devAssert(), _inspect = require_inspect(), _isObjectLike = require_isObjectLike(), _keyValMap = require_keyValMap(), _parser = require_parser(), _definition = require_definition(), _directives = require_directives(), _introspection = require_introspection(), _scalars = require_scalars(), _schema = require_schema(), _valueFromAST = require_valueFromAST();
    function buildClientSchema(introspection, options) {
      (0, _isObjectLike.isObjectLike)(introspection) && (0, _isObjectLike.isObjectLike)(introspection.__schema) || (0, _devAssert.devAssert)(
        !1,
        `Invalid or incomplete introspection result. Ensure that you are passing "data" property of introspection response and no "errors" was returned alongside: ${(0, _inspect.inspect)(introspection)}.`
      );
      let schemaIntrospection = introspection.__schema, typeMap = (0, _keyValMap.keyValMap)(
        schemaIntrospection.types,
        (typeIntrospection) => typeIntrospection.name,
        (typeIntrospection) => buildType(typeIntrospection)
      );
      for (let stdType of [
        ..._scalars.specifiedScalarTypes,
        ..._introspection.introspectionTypes
      ])
        typeMap[stdType.name] && (typeMap[stdType.name] = stdType);
      let queryType = schemaIntrospection.queryType ? getObjectType(schemaIntrospection.queryType) : null, mutationType = schemaIntrospection.mutationType ? getObjectType(schemaIntrospection.mutationType) : null, subscriptionType = schemaIntrospection.subscriptionType ? getObjectType(schemaIntrospection.subscriptionType) : null, directives = schemaIntrospection.directives ? schemaIntrospection.directives.map(buildDirective) : [];
      return new _schema.GraphQLSchema({
        description: schemaIntrospection.description,
        query: queryType,
        mutation: mutationType,
        subscription: subscriptionType,
        types: Object.values(typeMap),
        directives,
        assumeValid: options?.assumeValid
      });
      function getType(typeRef) {
        if (typeRef.kind === _introspection.TypeKind.LIST) {
          let itemRef = typeRef.ofType;
          if (!itemRef)
            throw new Error("Decorated type deeper than introspection query.");
          return new _definition.GraphQLList(getType(itemRef));
        }
        if (typeRef.kind === _introspection.TypeKind.NON_NULL) {
          let nullableRef = typeRef.ofType;
          if (!nullableRef)
            throw new Error("Decorated type deeper than introspection query.");
          let nullableType = getType(nullableRef);
          return new _definition.GraphQLNonNull(
            (0, _definition.assertNullableType)(nullableType)
          );
        }
        return getNamedType(typeRef);
      }
      function getNamedType(typeRef) {
        let typeName = typeRef.name;
        if (!typeName)
          throw new Error(
            `Unknown type reference: ${(0, _inspect.inspect)(typeRef)}.`
          );
        let type = typeMap[typeName];
        if (!type)
          throw new Error(
            `Invalid or incomplete schema, unknown type: ${typeName}. Ensure that a full introspection query is used in order to build a client schema.`
          );
        return type;
      }
      function getObjectType(typeRef) {
        return (0, _definition.assertObjectType)(getNamedType(typeRef));
      }
      function getInterfaceType(typeRef) {
        return (0, _definition.assertInterfaceType)(getNamedType(typeRef));
      }
      function buildType(type) {
        if (type != null && type.name != null && type.kind != null)
          switch (type.kind) {
            case _introspection.TypeKind.SCALAR:
              return buildScalarDef(type);
            case _introspection.TypeKind.OBJECT:
              return buildObjectDef(type);
            case _introspection.TypeKind.INTERFACE:
              return buildInterfaceDef(type);
            case _introspection.TypeKind.UNION:
              return buildUnionDef(type);
            case _introspection.TypeKind.ENUM:
              return buildEnumDef(type);
            case _introspection.TypeKind.INPUT_OBJECT:
              return buildInputObjectDef(type);
          }
        let typeStr = (0, _inspect.inspect)(type);
        throw new Error(
          `Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema: ${typeStr}.`
        );
      }
      function buildScalarDef(scalarIntrospection) {
        return new _definition.GraphQLScalarType({
          name: scalarIntrospection.name,
          description: scalarIntrospection.description,
          specifiedByURL: scalarIntrospection.specifiedByURL
        });
      }
      function buildImplementationsList(implementingIntrospection) {
        if (implementingIntrospection.interfaces === null && implementingIntrospection.kind === _introspection.TypeKind.INTERFACE)
          return [];
        if (!implementingIntrospection.interfaces) {
          let implementingIntrospectionStr = (0, _inspect.inspect)(
            implementingIntrospection
          );
          throw new Error(
            `Introspection result missing interfaces: ${implementingIntrospectionStr}.`
          );
        }
        return implementingIntrospection.interfaces.map(getInterfaceType);
      }
      function buildObjectDef(objectIntrospection) {
        return new _definition.GraphQLObjectType({
          name: objectIntrospection.name,
          description: objectIntrospection.description,
          interfaces: () => buildImplementationsList(objectIntrospection),
          fields: () => buildFieldDefMap(objectIntrospection)
        });
      }
      function buildInterfaceDef(interfaceIntrospection) {
        return new _definition.GraphQLInterfaceType({
          name: interfaceIntrospection.name,
          description: interfaceIntrospection.description,
          interfaces: () => buildImplementationsList(interfaceIntrospection),
          fields: () => buildFieldDefMap(interfaceIntrospection)
        });
      }
      function buildUnionDef(unionIntrospection) {
        if (!unionIntrospection.possibleTypes) {
          let unionIntrospectionStr = (0, _inspect.inspect)(unionIntrospection);
          throw new Error(
            `Introspection result missing possibleTypes: ${unionIntrospectionStr}.`
          );
        }
        return new _definition.GraphQLUnionType({
          name: unionIntrospection.name,
          description: unionIntrospection.description,
          types: () => unionIntrospection.possibleTypes.map(getObjectType)
        });
      }
      function buildEnumDef(enumIntrospection) {
        if (!enumIntrospection.enumValues) {
          let enumIntrospectionStr = (0, _inspect.inspect)(enumIntrospection);
          throw new Error(
            `Introspection result missing enumValues: ${enumIntrospectionStr}.`
          );
        }
        return new _definition.GraphQLEnumType({
          name: enumIntrospection.name,
          description: enumIntrospection.description,
          values: (0, _keyValMap.keyValMap)(
            enumIntrospection.enumValues,
            (valueIntrospection) => valueIntrospection.name,
            (valueIntrospection) => ({
              description: valueIntrospection.description,
              deprecationReason: valueIntrospection.deprecationReason
            })
          )
        });
      }
      function buildInputObjectDef(inputObjectIntrospection) {
        if (!inputObjectIntrospection.inputFields) {
          let inputObjectIntrospectionStr = (0, _inspect.inspect)(
            inputObjectIntrospection
          );
          throw new Error(
            `Introspection result missing inputFields: ${inputObjectIntrospectionStr}.`
          );
        }
        return new _definition.GraphQLInputObjectType({
          name: inputObjectIntrospection.name,
          description: inputObjectIntrospection.description,
          fields: () => buildInputValueDefMap(inputObjectIntrospection.inputFields),
          isOneOf: inputObjectIntrospection.isOneOf
        });
      }
      function buildFieldDefMap(typeIntrospection) {
        if (!typeIntrospection.fields)
          throw new Error(
            `Introspection result missing fields: ${(0, _inspect.inspect)(
              typeIntrospection
            )}.`
          );
        return (0, _keyValMap.keyValMap)(
          typeIntrospection.fields,
          (fieldIntrospection) => fieldIntrospection.name,
          buildField
        );
      }
      function buildField(fieldIntrospection) {
        let type = getType(fieldIntrospection.type);
        if (!(0, _definition.isOutputType)(type)) {
          let typeStr = (0, _inspect.inspect)(type);
          throw new Error(
            `Introspection must provide output type for fields, but received: ${typeStr}.`
          );
        }
        if (!fieldIntrospection.args) {
          let fieldIntrospectionStr = (0, _inspect.inspect)(fieldIntrospection);
          throw new Error(
            `Introspection result missing field args: ${fieldIntrospectionStr}.`
          );
        }
        return {
          description: fieldIntrospection.description,
          deprecationReason: fieldIntrospection.deprecationReason,
          type,
          args: buildInputValueDefMap(fieldIntrospection.args)
        };
      }
      function buildInputValueDefMap(inputValueIntrospections) {
        return (0, _keyValMap.keyValMap)(
          inputValueIntrospections,
          (inputValue) => inputValue.name,
          buildInputValue
        );
      }
      function buildInputValue(inputValueIntrospection) {
        let type = getType(inputValueIntrospection.type);
        if (!(0, _definition.isInputType)(type)) {
          let typeStr = (0, _inspect.inspect)(type);
          throw new Error(
            `Introspection must provide input type for arguments, but received: ${typeStr}.`
          );
        }
        let defaultValue = inputValueIntrospection.defaultValue != null ? (0, _valueFromAST.valueFromAST)(
          (0, _parser.parseValue)(inputValueIntrospection.defaultValue),
          type
        ) : void 0;
        return {
          description: inputValueIntrospection.description,
          type,
          defaultValue,
          deprecationReason: inputValueIntrospection.deprecationReason
        };
      }
      function buildDirective(directiveIntrospection) {
        if (!directiveIntrospection.args) {
          let directiveIntrospectionStr = (0, _inspect.inspect)(
            directiveIntrospection
          );
          throw new Error(
            `Introspection result missing directive args: ${directiveIntrospectionStr}.`
          );
        }
        if (!directiveIntrospection.locations) {
          let directiveIntrospectionStr = (0, _inspect.inspect)(
            directiveIntrospection
          );
          throw new Error(
            `Introspection result missing directive locations: ${directiveIntrospectionStr}.`
          );
        }
        return new _directives.GraphQLDirective({
          name: directiveIntrospection.name,
          description: directiveIntrospection.description,
          isRepeatable: directiveIntrospection.isRepeatable,
          locations: directiveIntrospection.locations.slice(),
          args: buildInputValueDefMap(directiveIntrospection.args)
        });
      }
    }
  }
});

// node_modules/graphql/utilities/extendSchema.js
var require_extendSchema = __commonJS({
  "node_modules/graphql/utilities/extendSchema.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.extendSchema = extendSchema;
    exports.extendSchemaImpl = extendSchemaImpl;
    var _devAssert = require_devAssert(), _inspect = require_inspect(), _invariant = require_invariant(), _keyMap = require_keyMap(), _mapValue = require_mapValue(), _kinds = require_kinds(), _predicates = require_predicates(), _definition = require_definition(), _directives = require_directives(), _introspection = require_introspection(), _scalars = require_scalars(), _schema = require_schema(), _validate = require_validate2(), _values = require_values(), _valueFromAST = require_valueFromAST();
    function extendSchema(schema, documentAST, options) {
      (0, _schema.assertSchema)(schema), documentAST != null && documentAST.kind === _kinds.Kind.DOCUMENT || (0, _devAssert.devAssert)(!1, "Must provide valid Document AST."), options?.assumeValid !== !0 && options?.assumeValidSDL !== !0 && (0, _validate.assertValidSDLExtension)(documentAST, schema);
      let schemaConfig = schema.toConfig(), extendedConfig = extendSchemaImpl(schemaConfig, documentAST, options);
      return schemaConfig === extendedConfig ? schema : new _schema.GraphQLSchema(extendedConfig);
    }
    function extendSchemaImpl(schemaConfig, documentAST, options) {
      var _schemaDef, _schemaDef$descriptio, _schemaDef2, _options$assumeValid;
      let typeDefs = [], typeExtensionsMap = /* @__PURE__ */ Object.create(null), directiveDefs = [], schemaDef, schemaExtensions = [];
      for (let def of documentAST.definitions)
        if (def.kind === _kinds.Kind.SCHEMA_DEFINITION)
          schemaDef = def;
        else if (def.kind === _kinds.Kind.SCHEMA_EXTENSION)
          schemaExtensions.push(def);
        else if ((0, _predicates.isTypeDefinitionNode)(def))
          typeDefs.push(def);
        else if ((0, _predicates.isTypeExtensionNode)(def)) {
          let extendedTypeName = def.name.value, existingTypeExtensions = typeExtensionsMap[extendedTypeName];
          typeExtensionsMap[extendedTypeName] = existingTypeExtensions ? existingTypeExtensions.concat([def]) : [def];
        } else
          def.kind === _kinds.Kind.DIRECTIVE_DEFINITION && directiveDefs.push(def);
      if (Object.keys(typeExtensionsMap).length === 0 && typeDefs.length === 0 && directiveDefs.length === 0 && schemaExtensions.length === 0 && schemaDef == null)
        return schemaConfig;
      let typeMap = /* @__PURE__ */ Object.create(null);
      for (let existingType of schemaConfig.types)
        typeMap[existingType.name] = extendNamedType(existingType);
      for (let typeNode of typeDefs) {
        var _stdTypeMap$name;
        let name = typeNode.name.value;
        typeMap[name] = (_stdTypeMap$name = stdTypeMap[name]) !== null && _stdTypeMap$name !== void 0 ? _stdTypeMap$name : buildType(typeNode);
      }
      let operationTypes = {
        // Get the extended root operation types.
        query: schemaConfig.query && replaceNamedType(schemaConfig.query),
        mutation: schemaConfig.mutation && replaceNamedType(schemaConfig.mutation),
        subscription: schemaConfig.subscription && replaceNamedType(schemaConfig.subscription),
        // Then, incorporate schema definition and all schema extensions.
        ...schemaDef && getOperationTypes([schemaDef]),
        ...getOperationTypes(schemaExtensions)
      };
      return {
        description: (_schemaDef = schemaDef) === null || _schemaDef === void 0 || (_schemaDef$descriptio = _schemaDef.description) === null || _schemaDef$descriptio === void 0 ? void 0 : _schemaDef$descriptio.value,
        ...operationTypes,
        types: Object.values(typeMap),
        directives: [
          ...schemaConfig.directives.map(replaceDirective),
          ...directiveDefs.map(buildDirective)
        ],
        extensions: /* @__PURE__ */ Object.create(null),
        astNode: (_schemaDef2 = schemaDef) !== null && _schemaDef2 !== void 0 ? _schemaDef2 : schemaConfig.astNode,
        extensionASTNodes: schemaConfig.extensionASTNodes.concat(schemaExtensions),
        assumeValid: (_options$assumeValid = options?.assumeValid) !== null && _options$assumeValid !== void 0 ? _options$assumeValid : !1
      };
      function replaceType(type) {
        return (0, _definition.isListType)(type) ? new _definition.GraphQLList(replaceType(type.ofType)) : (0, _definition.isNonNullType)(type) ? new _definition.GraphQLNonNull(replaceType(type.ofType)) : replaceNamedType(type);
      }
      function replaceNamedType(type) {
        return typeMap[type.name];
      }
      function replaceDirective(directive) {
        let config = directive.toConfig();
        return new _directives.GraphQLDirective({
          ...config,
          args: (0, _mapValue.mapValue)(config.args, extendArg)
        });
      }
      function extendNamedType(type) {
        if ((0, _introspection.isIntrospectionType)(type) || (0, _scalars.isSpecifiedScalarType)(type))
          return type;
        if ((0, _definition.isScalarType)(type))
          return extendScalarType(type);
        if ((0, _definition.isObjectType)(type))
          return extendObjectType(type);
        if ((0, _definition.isInterfaceType)(type))
          return extendInterfaceType(type);
        if ((0, _definition.isUnionType)(type))
          return extendUnionType(type);
        if ((0, _definition.isEnumType)(type))
          return extendEnumType(type);
        if ((0, _definition.isInputObjectType)(type))
          return extendInputObjectType(type);
        (0, _invariant.invariant)(
          !1,
          "Unexpected type: " + (0, _inspect.inspect)(type)
        );
      }
      function extendInputObjectType(type) {
        var _typeExtensionsMap$co;
        let config = type.toConfig(), extensions = (_typeExtensionsMap$co = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co !== void 0 ? _typeExtensionsMap$co : [];
        return new _definition.GraphQLInputObjectType({
          ...config,
          fields: () => ({
            ...(0, _mapValue.mapValue)(config.fields, (field) => ({
              ...field,
              type: replaceType(field.type)
            })),
            ...buildInputFieldMap(extensions)
          }),
          extensionASTNodes: config.extensionASTNodes.concat(extensions)
        });
      }
      function extendEnumType(type) {
        var _typeExtensionsMap$ty;
        let config = type.toConfig(), extensions = (_typeExtensionsMap$ty = typeExtensionsMap[type.name]) !== null && _typeExtensionsMap$ty !== void 0 ? _typeExtensionsMap$ty : [];
        return new _definition.GraphQLEnumType({
          ...config,
          values: { ...config.values, ...buildEnumValueMap(extensions) },
          extensionASTNodes: config.extensionASTNodes.concat(extensions)
        });
      }
      function extendScalarType(type) {
        var _typeExtensionsMap$co2;
        let config = type.toConfig(), extensions = (_typeExtensionsMap$co2 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co2 !== void 0 ? _typeExtensionsMap$co2 : [], specifiedByURL = config.specifiedByURL;
        for (let extensionNode of extensions) {
          var _getSpecifiedByURL;
          specifiedByURL = (_getSpecifiedByURL = getSpecifiedByURL(extensionNode)) !== null && _getSpecifiedByURL !== void 0 ? _getSpecifiedByURL : specifiedByURL;
        }
        return new _definition.GraphQLScalarType({
          ...config,
          specifiedByURL,
          extensionASTNodes: config.extensionASTNodes.concat(extensions)
        });
      }
      function extendObjectType(type) {
        var _typeExtensionsMap$co3;
        let config = type.toConfig(), extensions = (_typeExtensionsMap$co3 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co3 !== void 0 ? _typeExtensionsMap$co3 : [];
        return new _definition.GraphQLObjectType({
          ...config,
          interfaces: () => [
            ...type.getInterfaces().map(replaceNamedType),
            ...buildInterfaces(extensions)
          ],
          fields: () => ({
            ...(0, _mapValue.mapValue)(config.fields, extendField),
            ...buildFieldMap(extensions)
          }),
          extensionASTNodes: config.extensionASTNodes.concat(extensions)
        });
      }
      function extendInterfaceType(type) {
        var _typeExtensionsMap$co4;
        let config = type.toConfig(), extensions = (_typeExtensionsMap$co4 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co4 !== void 0 ? _typeExtensionsMap$co4 : [];
        return new _definition.GraphQLInterfaceType({
          ...config,
          interfaces: () => [
            ...type.getInterfaces().map(replaceNamedType),
            ...buildInterfaces(extensions)
          ],
          fields: () => ({
            ...(0, _mapValue.mapValue)(config.fields, extendField),
            ...buildFieldMap(extensions)
          }),
          extensionASTNodes: config.extensionASTNodes.concat(extensions)
        });
      }
      function extendUnionType(type) {
        var _typeExtensionsMap$co5;
        let config = type.toConfig(), extensions = (_typeExtensionsMap$co5 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co5 !== void 0 ? _typeExtensionsMap$co5 : [];
        return new _definition.GraphQLUnionType({
          ...config,
          types: () => [
            ...type.getTypes().map(replaceNamedType),
            ...buildUnionTypes(extensions)
          ],
          extensionASTNodes: config.extensionASTNodes.concat(extensions)
        });
      }
      function extendField(field) {
        return {
          ...field,
          type: replaceType(field.type),
          args: field.args && (0, _mapValue.mapValue)(field.args, extendArg)
        };
      }
      function extendArg(arg) {
        return { ...arg, type: replaceType(arg.type) };
      }
      function getOperationTypes(nodes) {
        let opTypes = {};
        for (let node of nodes) {
          var _node$operationTypes;
          let operationTypesNodes = (
            /* c8 ignore next */
            (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : []
          );
          for (let operationType of operationTypesNodes)
            opTypes[operationType.operation] = getNamedType(operationType.type);
        }
        return opTypes;
      }
      function getNamedType(node) {
        var _stdTypeMap$name2;
        let name = node.name.value, type = (_stdTypeMap$name2 = stdTypeMap[name]) !== null && _stdTypeMap$name2 !== void 0 ? _stdTypeMap$name2 : typeMap[name];
        if (type === void 0)
          throw new Error(`Unknown type: "${name}".`);
        return type;
      }
      function getWrappedType(node) {
        return node.kind === _kinds.Kind.LIST_TYPE ? new _definition.GraphQLList(getWrappedType(node.type)) : node.kind === _kinds.Kind.NON_NULL_TYPE ? new _definition.GraphQLNonNull(getWrappedType(node.type)) : getNamedType(node);
      }
      function buildDirective(node) {
        var _node$description;
        return new _directives.GraphQLDirective({
          name: node.name.value,
          description: (_node$description = node.description) === null || _node$description === void 0 ? void 0 : _node$description.value,
          // @ts-expect-error
          locations: node.locations.map(({ value }) => value),
          isRepeatable: node.repeatable,
          args: buildArgumentMap(node.arguments),
          astNode: node
        });
      }
      function buildFieldMap(nodes) {
        let fieldConfigMap = /* @__PURE__ */ Object.create(null);
        for (let node of nodes) {
          var _node$fields;
          let nodeFields = (
            /* c8 ignore next */
            (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : []
          );
          for (let field of nodeFields) {
            var _field$description;
            fieldConfigMap[field.name.value] = {
              // Note: While this could make assertions to get the correctly typed
              // value, that would throw immediately while type system validation
              // with validateSchema() will produce more actionable results.
              type: getWrappedType(field.type),
              description: (_field$description = field.description) === null || _field$description === void 0 ? void 0 : _field$description.value,
              args: buildArgumentMap(field.arguments),
              deprecationReason: getDeprecationReason(field),
              astNode: field
            };
          }
        }
        return fieldConfigMap;
      }
      function buildArgumentMap(args) {
        let argsNodes = (
          /* c8 ignore next */
          args ?? []
        ), argConfigMap = /* @__PURE__ */ Object.create(null);
        for (let arg of argsNodes) {
          var _arg$description;
          let type = getWrappedType(arg.type);
          argConfigMap[arg.name.value] = {
            type,
            description: (_arg$description = arg.description) === null || _arg$description === void 0 ? void 0 : _arg$description.value,
            defaultValue: (0, _valueFromAST.valueFromAST)(arg.defaultValue, type),
            deprecationReason: getDeprecationReason(arg),
            astNode: arg
          };
        }
        return argConfigMap;
      }
      function buildInputFieldMap(nodes) {
        let inputFieldMap = /* @__PURE__ */ Object.create(null);
        for (let node of nodes) {
          var _node$fields2;
          let fieldsNodes = (
            /* c8 ignore next */
            (_node$fields2 = node.fields) !== null && _node$fields2 !== void 0 ? _node$fields2 : []
          );
          for (let field of fieldsNodes) {
            var _field$description2;
            let type = getWrappedType(field.type);
            inputFieldMap[field.name.value] = {
              type,
              description: (_field$description2 = field.description) === null || _field$description2 === void 0 ? void 0 : _field$description2.value,
              defaultValue: (0, _valueFromAST.valueFromAST)(
                field.defaultValue,
                type
              ),
              deprecationReason: getDeprecationReason(field),
              astNode: field
            };
          }
        }
        return inputFieldMap;
      }
      function buildEnumValueMap(nodes) {
        let enumValueMap = /* @__PURE__ */ Object.create(null);
        for (let node of nodes) {
          var _node$values;
          let valuesNodes = (
            /* c8 ignore next */
            (_node$values = node.values) !== null && _node$values !== void 0 ? _node$values : []
          );
          for (let value of valuesNodes) {
            var _value$description;
            enumValueMap[value.name.value] = {
              description: (_value$description = value.description) === null || _value$description === void 0 ? void 0 : _value$description.value,
              deprecationReason: getDeprecationReason(value),
              astNode: value
            };
          }
        }
        return enumValueMap;
      }
      function buildInterfaces(nodes) {
        return nodes.flatMap(
          // FIXME: https://github.com/graphql/graphql-js/issues/2203
          (node) => {
            var _node$interfaces$map, _node$interfaces;
            return (
              /* c8 ignore next */
              (_node$interfaces$map = (_node$interfaces = node.interfaces) === null || _node$interfaces === void 0 ? void 0 : _node$interfaces.map(getNamedType)) !== null && _node$interfaces$map !== void 0 ? _node$interfaces$map : []
            );
          }
        );
      }
      function buildUnionTypes(nodes) {
        return nodes.flatMap(
          // FIXME: https://github.com/graphql/graphql-js/issues/2203
          (node) => {
            var _node$types$map, _node$types;
            return (
              /* c8 ignore next */
              (_node$types$map = (_node$types = node.types) === null || _node$types === void 0 ? void 0 : _node$types.map(getNamedType)) !== null && _node$types$map !== void 0 ? _node$types$map : []
            );
          }
        );
      }
      function buildType(astNode) {
        var _typeExtensionsMap$na;
        let name = astNode.name.value, extensionASTNodes = (_typeExtensionsMap$na = typeExtensionsMap[name]) !== null && _typeExtensionsMap$na !== void 0 ? _typeExtensionsMap$na : [];
        switch (astNode.kind) {
          case _kinds.Kind.OBJECT_TYPE_DEFINITION: {
            var _astNode$description;
            let allNodes = [astNode, ...extensionASTNodes];
            return new _definition.GraphQLObjectType({
              name,
              description: (_astNode$description = astNode.description) === null || _astNode$description === void 0 ? void 0 : _astNode$description.value,
              interfaces: () => buildInterfaces(allNodes),
              fields: () => buildFieldMap(allNodes),
              astNode,
              extensionASTNodes
            });
          }
          case _kinds.Kind.INTERFACE_TYPE_DEFINITION: {
            var _astNode$description2;
            let allNodes = [astNode, ...extensionASTNodes];
            return new _definition.GraphQLInterfaceType({
              name,
              description: (_astNode$description2 = astNode.description) === null || _astNode$description2 === void 0 ? void 0 : _astNode$description2.value,
              interfaces: () => buildInterfaces(allNodes),
              fields: () => buildFieldMap(allNodes),
              astNode,
              extensionASTNodes
            });
          }
          case _kinds.Kind.ENUM_TYPE_DEFINITION: {
            var _astNode$description3;
            let allNodes = [astNode, ...extensionASTNodes];
            return new _definition.GraphQLEnumType({
              name,
              description: (_astNode$description3 = astNode.description) === null || _astNode$description3 === void 0 ? void 0 : _astNode$description3.value,
              values: buildEnumValueMap(allNodes),
              astNode,
              extensionASTNodes
            });
          }
          case _kinds.Kind.UNION_TYPE_DEFINITION: {
            var _astNode$description4;
            let allNodes = [astNode, ...extensionASTNodes];
            return new _definition.GraphQLUnionType({
              name,
              description: (_astNode$description4 = astNode.description) === null || _astNode$description4 === void 0 ? void 0 : _astNode$description4.value,
              types: () => buildUnionTypes(allNodes),
              astNode,
              extensionASTNodes
            });
          }
          case _kinds.Kind.SCALAR_TYPE_DEFINITION: {
            var _astNode$description5;
            return new _definition.GraphQLScalarType({
              name,
              description: (_astNode$description5 = astNode.description) === null || _astNode$description5 === void 0 ? void 0 : _astNode$description5.value,
              specifiedByURL: getSpecifiedByURL(astNode),
              astNode,
              extensionASTNodes
            });
          }
          case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION: {
            var _astNode$description6;
            let allNodes = [astNode, ...extensionASTNodes];
            return new _definition.GraphQLInputObjectType({
              name,
              description: (_astNode$description6 = astNode.description) === null || _astNode$description6 === void 0 ? void 0 : _astNode$description6.value,
              fields: () => buildInputFieldMap(allNodes),
              astNode,
              extensionASTNodes,
              isOneOf: isOneOf(astNode)
            });
          }
        }
      }
    }
    var stdTypeMap = (0, _keyMap.keyMap)(
      [..._scalars.specifiedScalarTypes, ..._introspection.introspectionTypes],
      (type) => type.name
    );
    function getDeprecationReason(node) {
      let deprecated = (0, _values.getDirectiveValues)(
        _directives.GraphQLDeprecatedDirective,
        node
      );
      return deprecated?.reason;
    }
    function getSpecifiedByURL(node) {
      let specifiedBy = (0, _values.getDirectiveValues)(
        _directives.GraphQLSpecifiedByDirective,
        node
      );
      return specifiedBy?.url;
    }
    function isOneOf(node) {
      return Boolean(
        (0, _values.getDirectiveValues)(_directives.GraphQLOneOfDirective, node)
      );
    }
  }
});

// node_modules/graphql/utilities/buildASTSchema.js
var require_buildASTSchema = __commonJS({
  "node_modules/graphql/utilities/buildASTSchema.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.buildASTSchema = buildASTSchema;
    exports.buildSchema = buildSchema;
    var _devAssert = require_devAssert(), _kinds = require_kinds(), _parser = require_parser(), _directives = require_directives(), _schema = require_schema(), _validate = require_validate2(), _extendSchema = require_extendSchema();
    function buildASTSchema(documentAST, options) {
      documentAST != null && documentAST.kind === _kinds.Kind.DOCUMENT || (0, _devAssert.devAssert)(!1, "Must provide valid Document AST."), options?.assumeValid !== !0 && options?.assumeValidSDL !== !0 && (0, _validate.assertValidSDL)(documentAST);
      let emptySchemaConfig = {
        description: void 0,
        types: [],
        directives: [],
        extensions: /* @__PURE__ */ Object.create(null),
        extensionASTNodes: [],
        assumeValid: !1
      }, config = (0, _extendSchema.extendSchemaImpl)(
        emptySchemaConfig,
        documentAST,
        options
      );
      if (config.astNode == null)
        for (let type of config.types)
          switch (type.name) {
            case "Query":
              config.query = type;
              break;
            case "Mutation":
              config.mutation = type;
              break;
            case "Subscription":
              config.subscription = type;
              break;
          }
      let directives = [
        ...config.directives,
        // If specified directives were not explicitly declared, add them.
        ..._directives.specifiedDirectives.filter(
          (stdDirective) => config.directives.every(
            (directive) => directive.name !== stdDirective.name
          )
        )
      ];
      return new _schema.GraphQLSchema({ ...config, directives });
    }
    function buildSchema(source, options) {
      let document2 = (0, _parser.parse)(source, {
        noLocation: options?.noLocation,
        allowLegacyFragmentVariables: options?.allowLegacyFragmentVariables
      });
      return buildASTSchema(document2, {
        assumeValidSDL: options?.assumeValidSDL,
        assumeValid: options?.assumeValid
      });
    }
  }
});

// node_modules/graphql/utilities/lexicographicSortSchema.js
var require_lexicographicSortSchema = __commonJS({
  "node_modules/graphql/utilities/lexicographicSortSchema.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.lexicographicSortSchema = lexicographicSortSchema;
    var _inspect = require_inspect(), _invariant = require_invariant(), _keyValMap = require_keyValMap(), _naturalCompare = require_naturalCompare(), _definition = require_definition(), _directives = require_directives(), _introspection = require_introspection(), _schema = require_schema();
    function lexicographicSortSchema(schema) {
      let schemaConfig = schema.toConfig(), typeMap = (0, _keyValMap.keyValMap)(
        sortByName(schemaConfig.types),
        (type) => type.name,
        sortNamedType
      );
      return new _schema.GraphQLSchema({
        ...schemaConfig,
        types: Object.values(typeMap),
        directives: sortByName(schemaConfig.directives).map(sortDirective),
        query: replaceMaybeType(schemaConfig.query),
        mutation: replaceMaybeType(schemaConfig.mutation),
        subscription: replaceMaybeType(schemaConfig.subscription)
      });
      function replaceType(type) {
        return (0, _definition.isListType)(type) ? new _definition.GraphQLList(replaceType(type.ofType)) : (0, _definition.isNonNullType)(type) ? new _definition.GraphQLNonNull(replaceType(type.ofType)) : replaceNamedType(type);
      }
      function replaceNamedType(type) {
        return typeMap[type.name];
      }
      function replaceMaybeType(maybeType) {
        return maybeType && replaceNamedType(maybeType);
      }
      function sortDirective(directive) {
        let config = directive.toConfig();
        return new _directives.GraphQLDirective({
          ...config,
          locations: sortBy(config.locations, (x) => x),
          args: sortArgs(config.args)
        });
      }
      function sortArgs(args) {
        return sortObjMap(args, (arg) => ({ ...arg, type: replaceType(arg.type) }));
      }
      function sortFields(fieldsMap) {
        return sortObjMap(fieldsMap, (field) => ({
          ...field,
          type: replaceType(field.type),
          args: field.args && sortArgs(field.args)
        }));
      }
      function sortInputFields(fieldsMap) {
        return sortObjMap(fieldsMap, (field) => ({
          ...field,
          type: replaceType(field.type)
        }));
      }
      function sortTypes(array) {
        return sortByName(array).map(replaceNamedType);
      }
      function sortNamedType(type) {
        if ((0, _definition.isScalarType)(type) || (0, _introspection.isIntrospectionType)(type))
          return type;
        if ((0, _definition.isObjectType)(type)) {
          let config = type.toConfig();
          return new _definition.GraphQLObjectType({
            ...config,
            interfaces: () => sortTypes(config.interfaces),
            fields: () => sortFields(config.fields)
          });
        }
        if ((0, _definition.isInterfaceType)(type)) {
          let config = type.toConfig();
          return new _definition.GraphQLInterfaceType({
            ...config,
            interfaces: () => sortTypes(config.interfaces),
            fields: () => sortFields(config.fields)
          });
        }
        if ((0, _definition.isUnionType)(type)) {
          let config = type.toConfig();
          return new _definition.GraphQLUnionType({
            ...config,
            types: () => sortTypes(config.types)
          });
        }
        if ((0, _definition.isEnumType)(type)) {
          let config = type.toConfig();
          return new _definition.GraphQLEnumType({
            ...config,
            values: sortObjMap(config.values, (value) => value)
          });
        }
        if ((0, _definition.isInputObjectType)(type)) {
          let config = type.toConfig();
          return new _definition.GraphQLInputObjectType({
            ...config,
            fields: () => sortInputFields(config.fields)
          });
        }
        (0, _invariant.invariant)(
          !1,
          "Unexpected type: " + (0, _inspect.inspect)(type)
        );
      }
    }
    function sortObjMap(map, sortValueFn) {
      let sortedMap = /* @__PURE__ */ Object.create(null);
      for (let key of Object.keys(map).sort(_naturalCompare.naturalCompare))
        sortedMap[key] = sortValueFn(map[key]);
      return sortedMap;
    }
    function sortByName(array) {
      return sortBy(array, (obj) => obj.name);
    }
    function sortBy(array, mapToKey) {
      return array.slice().sort((obj1, obj2) => {
        let key1 = mapToKey(obj1), key2 = mapToKey(obj2);
        return (0, _naturalCompare.naturalCompare)(key1, key2);
      });
    }
  }
});

// node_modules/graphql/utilities/printSchema.js
var require_printSchema = __commonJS({
  "node_modules/graphql/utilities/printSchema.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.printIntrospectionSchema = printIntrospectionSchema;
    exports.printSchema = printSchema;
    exports.printType = printType;
    var _inspect = require_inspect(), _invariant = require_invariant(), _blockString = require_blockString(), _kinds = require_kinds(), _printer = require_printer(), _definition = require_definition(), _directives = require_directives(), _introspection = require_introspection(), _scalars = require_scalars(), _astFromValue = require_astFromValue();
    function printSchema(schema) {
      return printFilteredSchema(
        schema,
        (n) => !(0, _directives.isSpecifiedDirective)(n),
        isDefinedType
      );
    }
    function printIntrospectionSchema(schema) {
      return printFilteredSchema(
        schema,
        _directives.isSpecifiedDirective,
        _introspection.isIntrospectionType
      );
    }
    function isDefinedType(type) {
      return !(0, _scalars.isSpecifiedScalarType)(type) && !(0, _introspection.isIntrospectionType)(type);
    }
    function printFilteredSchema(schema, directiveFilter, typeFilter) {
      let directives = schema.getDirectives().filter(directiveFilter), types = Object.values(schema.getTypeMap()).filter(typeFilter);
      return [
        printSchemaDefinition(schema),
        ...directives.map((directive) => printDirective(directive)),
        ...types.map((type) => printType(type))
      ].filter(Boolean).join(`

`);
    }
    function printSchemaDefinition(schema) {
      if (schema.description == null && isSchemaOfCommonNames(schema))
        return;
      let operationTypes = [], queryType = schema.getQueryType();
      queryType && operationTypes.push(`  query: ${queryType.name}`);
      let mutationType = schema.getMutationType();
      mutationType && operationTypes.push(`  mutation: ${mutationType.name}`);
      let subscriptionType = schema.getSubscriptionType();
      return subscriptionType && operationTypes.push(`  subscription: ${subscriptionType.name}`), printDescription(schema) + `schema {
${operationTypes.join(`
`)}
}`;
    }
    function isSchemaOfCommonNames(schema) {
      let queryType = schema.getQueryType();
      if (queryType && queryType.name !== "Query")
        return !1;
      let mutationType = schema.getMutationType();
      if (mutationType && mutationType.name !== "Mutation")
        return !1;
      let subscriptionType = schema.getSubscriptionType();
      return !(subscriptionType && subscriptionType.name !== "Subscription");
    }
    function printType(type) {
      if ((0, _definition.isScalarType)(type))
        return printScalar(type);
      if ((0, _definition.isObjectType)(type))
        return printObject(type);
      if ((0, _definition.isInterfaceType)(type))
        return printInterface(type);
      if ((0, _definition.isUnionType)(type))
        return printUnion(type);
      if ((0, _definition.isEnumType)(type))
        return printEnum(type);
      if ((0, _definition.isInputObjectType)(type))
        return printInputObject(type);
      (0, _invariant.invariant)(
        !1,
        "Unexpected type: " + (0, _inspect.inspect)(type)
      );
    }
    function printScalar(type) {
      return printDescription(type) + `scalar ${type.name}` + printSpecifiedByURL(type);
    }
    function printImplementedInterfaces(type) {
      let interfaces = type.getInterfaces();
      return interfaces.length ? " implements " + interfaces.map((i) => i.name).join(" & ") : "";
    }
    function printObject(type) {
      return printDescription(type) + `type ${type.name}` + printImplementedInterfaces(type) + printFields(type);
    }
    function printInterface(type) {
      return printDescription(type) + `interface ${type.name}` + printImplementedInterfaces(type) + printFields(type);
    }
    function printUnion(type) {
      let types = type.getTypes(), possibleTypes = types.length ? " = " + types.join(" | ") : "";
      return printDescription(type) + "union " + type.name + possibleTypes;
    }
    function printEnum(type) {
      let values = type.getValues().map(
        (value, i) => printDescription(value, "  ", !i) + "  " + value.name + printDeprecated(value.deprecationReason)
      );
      return printDescription(type) + `enum ${type.name}` + printBlock(values);
    }
    function printInputObject(type) {
      let fields = Object.values(type.getFields()).map(
        (f, i) => printDescription(f, "  ", !i) + "  " + printInputValue(f)
      );
      return printDescription(type) + `input ${type.name}` + (type.isOneOf ? " @oneOf" : "") + printBlock(fields);
    }
    function printFields(type) {
      let fields = Object.values(type.getFields()).map(
        (f, i) => printDescription(f, "  ", !i) + "  " + f.name + printArgs(f.args, "  ") + ": " + String(f.type) + printDeprecated(f.deprecationReason)
      );
      return printBlock(fields);
    }
    function printBlock(items) {
      return items.length !== 0 ? ` {
` + items.join(`
`) + `
}` : "";
    }
    function printArgs(args, indentation = "") {
      return args.length === 0 ? "" : args.every((arg) => !arg.description) ? "(" + args.map(printInputValue).join(", ") + ")" : `(
` + args.map(
        (arg, i) => printDescription(arg, "  " + indentation, !i) + "  " + indentation + printInputValue(arg)
      ).join(`
`) + `
` + indentation + ")";
    }
    function printInputValue(arg) {
      let defaultAST = (0, _astFromValue.astFromValue)(
        arg.defaultValue,
        arg.type
      ), argDecl = arg.name + ": " + String(arg.type);
      return defaultAST && (argDecl += ` = ${(0, _printer.print)(defaultAST)}`), argDecl + printDeprecated(arg.deprecationReason);
    }
    function printDirective(directive) {
      return printDescription(directive) + "directive @" + directive.name + printArgs(directive.args) + (directive.isRepeatable ? " repeatable" : "") + " on " + directive.locations.join(" | ");
    }
    function printDeprecated(reason) {
      return reason == null ? "" : reason !== _directives.DEFAULT_DEPRECATION_REASON ? ` @deprecated(reason: ${(0, _printer.print)({
        kind: _kinds.Kind.STRING,
        value: reason
      })})` : " @deprecated";
    }
    function printSpecifiedByURL(scalar) {
      return scalar.specifiedByURL == null ? "" : ` @specifiedBy(url: ${(0, _printer.print)({
        kind: _kinds.Kind.STRING,
        value: scalar.specifiedByURL
      })})`;
    }
    function printDescription(def, indentation = "", firstInBlock = !0) {
      let { description } = def;
      if (description == null)
        return "";
      let blockString = (0, _printer.print)({
        kind: _kinds.Kind.STRING,
        value: description,
        block: (0, _blockString.isPrintableAsBlockString)(description)
      });
      return (indentation && !firstInBlock ? `
` + indentation : indentation) + blockString.replace(/\n/g, `
` + indentation) + `
`;
    }
  }
});

// node_modules/graphql/utilities/concatAST.js
var require_concatAST = __commonJS({
  "node_modules/graphql/utilities/concatAST.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.concatAST = concatAST;
    var _kinds = require_kinds();
    function concatAST(documents) {
      let definitions = [];
      for (let doc of documents)
        definitions.push(...doc.definitions);
      return {
        kind: _kinds.Kind.DOCUMENT,
        definitions
      };
    }
  }
});

// node_modules/graphql/utilities/separateOperations.js
var require_separateOperations = __commonJS({
  "node_modules/graphql/utilities/separateOperations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.separateOperations = separateOperations;
    var _kinds = require_kinds(), _visitor = require_visitor();
    function separateOperations(documentAST) {
      let operations = [], depGraph = /* @__PURE__ */ Object.create(null);
      for (let definitionNode of documentAST.definitions)
        switch (definitionNode.kind) {
          case _kinds.Kind.OPERATION_DEFINITION:
            operations.push(definitionNode);
            break;
          case _kinds.Kind.FRAGMENT_DEFINITION:
            depGraph[definitionNode.name.value] = collectDependencies(
              definitionNode.selectionSet
            );
            break;
          default:
        }
      let separatedDocumentASTs = /* @__PURE__ */ Object.create(null);
      for (let operation of operations) {
        let dependencies = /* @__PURE__ */ new Set();
        for (let fragmentName of collectDependencies(operation.selectionSet))
          collectTransitiveDependencies(dependencies, depGraph, fragmentName);
        let operationName = operation.name ? operation.name.value : "";
        separatedDocumentASTs[operationName] = {
          kind: _kinds.Kind.DOCUMENT,
          definitions: documentAST.definitions.filter(
            (node) => node === operation || node.kind === _kinds.Kind.FRAGMENT_DEFINITION && dependencies.has(node.name.value)
          )
        };
      }
      return separatedDocumentASTs;
    }
    function collectTransitiveDependencies(collected, depGraph, fromName) {
      if (!collected.has(fromName)) {
        collected.add(fromName);
        let immediateDeps = depGraph[fromName];
        if (immediateDeps !== void 0)
          for (let toName of immediateDeps)
            collectTransitiveDependencies(collected, depGraph, toName);
      }
    }
    function collectDependencies(selectionSet) {
      let dependencies = [];
      return (0, _visitor.visit)(selectionSet, {
        FragmentSpread(node) {
          dependencies.push(node.name.value);
        }
      }), dependencies;
    }
  }
});

// node_modules/graphql/utilities/stripIgnoredCharacters.js
var require_stripIgnoredCharacters = __commonJS({
  "node_modules/graphql/utilities/stripIgnoredCharacters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.stripIgnoredCharacters = stripIgnoredCharacters;
    var _blockString = require_blockString(), _lexer = require_lexer(), _source = require_source(), _tokenKind = require_tokenKind();
    function stripIgnoredCharacters(source) {
      let sourceObj = (0, _source.isSource)(source) ? source : new _source.Source(source), body = sourceObj.body, lexer = new _lexer.Lexer(sourceObj), strippedBody = "", wasLastAddedTokenNonPunctuator = !1;
      for (; lexer.advance().kind !== _tokenKind.TokenKind.EOF; ) {
        let currentToken = lexer.token, tokenKind = currentToken.kind, isNonPunctuator = !(0, _lexer.isPunctuatorTokenKind)(
          currentToken.kind
        );
        wasLastAddedTokenNonPunctuator && (isNonPunctuator || currentToken.kind === _tokenKind.TokenKind.SPREAD) && (strippedBody += " ");
        let tokenBody = body.slice(currentToken.start, currentToken.end);
        tokenKind === _tokenKind.TokenKind.BLOCK_STRING ? strippedBody += (0, _blockString.printBlockString)(currentToken.value, {
          minimize: !0
        }) : strippedBody += tokenBody, wasLastAddedTokenNonPunctuator = isNonPunctuator;
      }
      return strippedBody;
    }
  }
});

// node_modules/graphql/utilities/assertValidName.js
var require_assertValidName = __commonJS({
  "node_modules/graphql/utilities/assertValidName.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.assertValidName = assertValidName;
    exports.isValidNameError = isValidNameError;
    var _devAssert = require_devAssert(), _GraphQLError = require_GraphQLError(), _assertName = require_assertName();
    function assertValidName(name) {
      let error = isValidNameError(name);
      if (error)
        throw error;
      return name;
    }
    function isValidNameError(name) {
      if (typeof name == "string" || (0, _devAssert.devAssert)(!1, "Expected name to be a string."), name.startsWith("__"))
        return new _GraphQLError.GraphQLError(
          `Name "${name}" must not begin with "__", which is reserved by GraphQL introspection.`
        );
      try {
        (0, _assertName.assertName)(name);
      } catch (error) {
        return error;
      }
    }
  }
});

// node_modules/graphql/utilities/findBreakingChanges.js
var require_findBreakingChanges = __commonJS({
  "node_modules/graphql/utilities/findBreakingChanges.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    exports.DangerousChangeType = exports.BreakingChangeType = void 0;
    exports.findBreakingChanges = findBreakingChanges;
    exports.findDangerousChanges = findDangerousChanges;
    var _inspect = require_inspect(), _invariant = require_invariant(), _keyMap = require_keyMap(), _printer = require_printer(), _definition = require_definition(), _scalars = require_scalars(), _astFromValue = require_astFromValue(), _sortValueNode = require_sortValueNode(), BreakingChangeType;
    exports.BreakingChangeType = BreakingChangeType;
    (function(BreakingChangeType2) {
      BreakingChangeType2.TYPE_REMOVED = "TYPE_REMOVED", BreakingChangeType2.TYPE_CHANGED_KIND = "TYPE_CHANGED_KIND", BreakingChangeType2.TYPE_REMOVED_FROM_UNION = "TYPE_REMOVED_FROM_UNION", BreakingChangeType2.VALUE_REMOVED_FROM_ENUM = "VALUE_REMOVED_FROM_ENUM", BreakingChangeType2.REQUIRED_INPUT_FIELD_ADDED = "REQUIRED_INPUT_FIELD_ADDED", BreakingChangeType2.IMPLEMENTED_INTERFACE_REMOVED = "IMPLEMENTED_INTERFACE_REMOVED", BreakingChangeType2.FIELD_REMOVED = "FIELD_REMOVED", BreakingChangeType2.FIELD_CHANGED_KIND = "FIELD_CHANGED_KIND", BreakingChangeType2.REQUIRED_ARG_ADDED = "REQUIRED_ARG_ADDED", BreakingChangeType2.ARG_REMOVED = "ARG_REMOVED", BreakingChangeType2.ARG_CHANGED_KIND = "ARG_CHANGED_KIND", BreakingChangeType2.DIRECTIVE_REMOVED = "DIRECTIVE_REMOVED", BreakingChangeType2.DIRECTIVE_ARG_REMOVED = "DIRECTIVE_ARG_REMOVED", BreakingChangeType2.REQUIRED_DIRECTIVE_ARG_ADDED = "REQUIRED_DIRECTIVE_ARG_ADDED", BreakingChangeType2.DIRECTIVE_REPEATABLE_REMOVED = "DIRECTIVE_REPEATABLE_REMOVED", BreakingChangeType2.DIRECTIVE_LOCATION_REMOVED = "DIRECTIVE_LOCATION_REMOVED";
    })(
      BreakingChangeType || (exports.BreakingChangeType = BreakingChangeType = {})
    );
    var DangerousChangeType;
    exports.DangerousChangeType = DangerousChangeType;
    (function(DangerousChangeType2) {
      DangerousChangeType2.VALUE_ADDED_TO_ENUM = "VALUE_ADDED_TO_ENUM", DangerousChangeType2.TYPE_ADDED_TO_UNION = "TYPE_ADDED_TO_UNION", DangerousChangeType2.OPTIONAL_INPUT_FIELD_ADDED = "OPTIONAL_INPUT_FIELD_ADDED", DangerousChangeType2.OPTIONAL_ARG_ADDED = "OPTIONAL_ARG_ADDED", DangerousChangeType2.IMPLEMENTED_INTERFACE_ADDED = "IMPLEMENTED_INTERFACE_ADDED", DangerousChangeType2.ARG_DEFAULT_VALUE_CHANGE = "ARG_DEFAULT_VALUE_CHANGE";
    })(
      DangerousChangeType || (exports.DangerousChangeType = DangerousChangeType = {})
    );
    function findBreakingChanges(oldSchema, newSchema) {
      return findSchemaChanges(oldSchema, newSchema).filter(
        (change) => change.type in BreakingChangeType
      );
    }
    function findDangerousChanges(oldSchema, newSchema) {
      return findSchemaChanges(oldSchema, newSchema).filter(
        (change) => change.type in DangerousChangeType
      );
    }
    function findSchemaChanges(oldSchema, newSchema) {
      return [
        ...findTypeChanges(oldSchema, newSchema),
        ...findDirectiveChanges(oldSchema, newSchema)
      ];
    }
    function findDirectiveChanges(oldSchema, newSchema) {
      let schemaChanges = [], directivesDiff = diff(
        oldSchema.getDirectives(),
        newSchema.getDirectives()
      );
      for (let oldDirective of directivesDiff.removed)
        schemaChanges.push({
          type: BreakingChangeType.DIRECTIVE_REMOVED,
          description: `${oldDirective.name} was removed.`
        });
      for (let [oldDirective, newDirective] of directivesDiff.persisted) {
        let argsDiff = diff(oldDirective.args, newDirective.args);
        for (let newArg of argsDiff.added)
          (0, _definition.isRequiredArgument)(newArg) && schemaChanges.push({
            type: BreakingChangeType.REQUIRED_DIRECTIVE_ARG_ADDED,
            description: `A required arg ${newArg.name} on directive ${oldDirective.name} was added.`
          });
        for (let oldArg of argsDiff.removed)
          schemaChanges.push({
            type: BreakingChangeType.DIRECTIVE_ARG_REMOVED,
            description: `${oldArg.name} was removed from ${oldDirective.name}.`
          });
        oldDirective.isRepeatable && !newDirective.isRepeatable && schemaChanges.push({
          type: BreakingChangeType.DIRECTIVE_REPEATABLE_REMOVED,
          description: `Repeatable flag was removed from ${oldDirective.name}.`
        });
        for (let location of oldDirective.locations)
          newDirective.locations.includes(location) || schemaChanges.push({
            type: BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,
            description: `${location} was removed from ${oldDirective.name}.`
          });
      }
      return schemaChanges;
    }
    function findTypeChanges(oldSchema, newSchema) {
      let schemaChanges = [], typesDiff = diff(
        Object.values(oldSchema.getTypeMap()),
        Object.values(newSchema.getTypeMap())
      );
      for (let oldType of typesDiff.removed)
        schemaChanges.push({
          type: BreakingChangeType.TYPE_REMOVED,
          description: (0, _scalars.isSpecifiedScalarType)(oldType) ? `Standard scalar ${oldType.name} was removed because it is not referenced anymore.` : `${oldType.name} was removed.`
        });
      for (let [oldType, newType] of typesDiff.persisted)
        (0, _definition.isEnumType)(oldType) && (0, _definition.isEnumType)(newType) ? schemaChanges.push(...findEnumTypeChanges(oldType, newType)) : (0, _definition.isUnionType)(oldType) && (0, _definition.isUnionType)(newType) ? schemaChanges.push(...findUnionTypeChanges(oldType, newType)) : (0, _definition.isInputObjectType)(oldType) && (0, _definition.isInputObjectType)(newType) ? schemaChanges.push(...findInputObjectTypeChanges(oldType, newType)) : (0, _definition.isObjectType)(oldType) && (0, _definition.isObjectType)(newType) ? schemaChanges.push(
          ...findFieldChanges(oldType, newType),
          ...findImplementedInterfacesChanges(oldType, newType)
        ) : (0, _definition.isInterfaceType)(oldType) && (0, _definition.isInterfaceType)(newType) ? schemaChanges.push(
          ...findFieldChanges(oldType, newType),
          ...findImplementedInterfacesChanges(oldType, newType)
        ) : oldType.constructor !== newType.constructor && schemaChanges.push({
          type: BreakingChangeType.TYPE_CHANGED_KIND,
          description: `${oldType.name} changed from ${typeKindName(oldType)} to ${typeKindName(newType)}.`
        });
      return schemaChanges;
    }
    function findInputObjectTypeChanges(oldType, newType) {
      let schemaChanges = [], fieldsDiff = diff(
        Object.values(oldType.getFields()),
        Object.values(newType.getFields())
      );
      for (let newField of fieldsDiff.added)
        (0, _definition.isRequiredInputField)(newField) ? schemaChanges.push({
          type: BreakingChangeType.REQUIRED_INPUT_FIELD_ADDED,
          description: `A required field ${newField.name} on input type ${oldType.name} was added.`
        }) : schemaChanges.push({
          type: DangerousChangeType.OPTIONAL_INPUT_FIELD_ADDED,
          description: `An optional field ${newField.name} on input type ${oldType.name} was added.`
        });
      for (let oldField of fieldsDiff.removed)
        schemaChanges.push({
          type: BreakingChangeType.FIELD_REMOVED,
          description: `${oldType.name}.${oldField.name} was removed.`
        });
      for (let [oldField, newField] of fieldsDiff.persisted)
        isChangeSafeForInputObjectFieldOrFieldArg(
          oldField.type,
          newField.type
        ) || schemaChanges.push({
          type: BreakingChangeType.FIELD_CHANGED_KIND,
          description: `${oldType.name}.${oldField.name} changed type from ${String(oldField.type)} to ${String(newField.type)}.`
        });
      return schemaChanges;
    }
    function findUnionTypeChanges(oldType, newType) {
      let schemaChanges = [], possibleTypesDiff = diff(oldType.getTypes(), newType.getTypes());
      for (let newPossibleType of possibleTypesDiff.added)
        schemaChanges.push({
          type: DangerousChangeType.TYPE_ADDED_TO_UNION,
          description: `${newPossibleType.name} was added to union type ${oldType.name}.`
        });
      for (let oldPossibleType of possibleTypesDiff.removed)
        schemaChanges.push({
          type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,
          description: `${oldPossibleType.name} was removed from union type ${oldType.name}.`
        });
      return schemaChanges;
    }
    function findEnumTypeChanges(oldType, newType) {
      let schemaChanges = [], valuesDiff = diff(oldType.getValues(), newType.getValues());
      for (let newValue of valuesDiff.added)
        schemaChanges.push({
          type: DangerousChangeType.VALUE_ADDED_TO_ENUM,
          description: `${newValue.name} was added to enum type ${oldType.name}.`
        });
      for (let oldValue of valuesDiff.removed)
        schemaChanges.push({
          type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,
          description: `${oldValue.name} was removed from enum type ${oldType.name}.`
        });
      return schemaChanges;
    }
    function findImplementedInterfacesChanges(oldType, newType) {
      let schemaChanges = [], interfacesDiff = diff(oldType.getInterfaces(), newType.getInterfaces());
      for (let newInterface of interfacesDiff.added)
        schemaChanges.push({
          type: DangerousChangeType.IMPLEMENTED_INTERFACE_ADDED,
          description: `${newInterface.name} added to interfaces implemented by ${oldType.name}.`
        });
      for (let oldInterface of interfacesDiff.removed)
        schemaChanges.push({
          type: BreakingChangeType.IMPLEMENTED_INTERFACE_REMOVED,
          description: `${oldType.name} no longer implements interface ${oldInterface.name}.`
        });
      return schemaChanges;
    }
    function findFieldChanges(oldType, newType) {
      let schemaChanges = [], fieldsDiff = diff(
        Object.values(oldType.getFields()),
        Object.values(newType.getFields())
      );
      for (let oldField of fieldsDiff.removed)
        schemaChanges.push({
          type: BreakingChangeType.FIELD_REMOVED,
          description: `${oldType.name}.${oldField.name} was removed.`
        });
      for (let [oldField, newField] of fieldsDiff.persisted)
        schemaChanges.push(...findArgChanges(oldType, oldField, newField)), isChangeSafeForObjectOrInterfaceField(
          oldField.type,
          newField.type
        ) || schemaChanges.push({
          type: BreakingChangeType.FIELD_CHANGED_KIND,
          description: `${oldType.name}.${oldField.name} changed type from ${String(oldField.type)} to ${String(newField.type)}.`
        });
      return schemaChanges;
    }
    function findArgChanges(oldType, oldField, newField) {
      let schemaChanges = [], argsDiff = diff(oldField.args, newField.args);
      for (let oldArg of argsDiff.removed)
        schemaChanges.push({
          type: BreakingChangeType.ARG_REMOVED,
          description: `${oldType.name}.${oldField.name} arg ${oldArg.name} was removed.`
        });
      for (let [oldArg, newArg] of argsDiff.persisted)
        if (!isChangeSafeForInputObjectFieldOrFieldArg(
          oldArg.type,
          newArg.type
        ))
          schemaChanges.push({
            type: BreakingChangeType.ARG_CHANGED_KIND,
            description: `${oldType.name}.${oldField.name} arg ${oldArg.name} has changed type from ${String(oldArg.type)} to ${String(newArg.type)}.`
          });
        else if (oldArg.defaultValue !== void 0)
          if (newArg.defaultValue === void 0)
            schemaChanges.push({
              type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,
              description: `${oldType.name}.${oldField.name} arg ${oldArg.name} defaultValue was removed.`
            });
          else {
            let oldValueStr = stringifyValue(oldArg.defaultValue, oldArg.type), newValueStr = stringifyValue(newArg.defaultValue, newArg.type);
            oldValueStr !== newValueStr && schemaChanges.push({
              type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,
              description: `${oldType.name}.${oldField.name} arg ${oldArg.name} has changed defaultValue from ${oldValueStr} to ${newValueStr}.`
            });
          }
      for (let newArg of argsDiff.added)
        (0, _definition.isRequiredArgument)(newArg) ? schemaChanges.push({
          type: BreakingChangeType.REQUIRED_ARG_ADDED,
          description: `A required arg ${newArg.name} on ${oldType.name}.${oldField.name} was added.`
        }) : schemaChanges.push({
          type: DangerousChangeType.OPTIONAL_ARG_ADDED,
          description: `An optional arg ${newArg.name} on ${oldType.name}.${oldField.name} was added.`
        });
      return schemaChanges;
    }
    function isChangeSafeForObjectOrInterfaceField(oldType, newType) {
      return (0, _definition.isListType)(oldType) ? (
        // if they're both lists, make sure the underlying types are compatible
        (0, _definition.isListType)(newType) && isChangeSafeForObjectOrInterfaceField(
          oldType.ofType,
          newType.ofType
        ) || // moving from nullable to non-null of the same underlying type is safe
        (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)
      ) : (0, _definition.isNonNullType)(oldType) ? (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType) : (
        // if they're both named types, see if their names are equivalent
        (0, _definition.isNamedType)(newType) && oldType.name === newType.name || // moving from nullable to non-null of the same underlying type is safe
        (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)
      );
    }
    function isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {
      return (0, _definition.isListType)(oldType) ? (0, _definition.isListType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType) : (0, _definition.isNonNullType)(oldType) ? (
        // if they're both non-null, make sure the underlying types are
        // compatible
        (0, _definition.isNonNullType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(
          oldType.ofType,
          newType.ofType
        ) || // moving from non-null to nullable of the same underlying type is safe
        !(0, _definition.isNonNullType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType)
      ) : (0, _definition.isNamedType)(newType) && oldType.name === newType.name;
    }
    function typeKindName(type) {
      if ((0, _definition.isScalarType)(type))
        return "a Scalar type";
      if ((0, _definition.isObjectType)(type))
        return "an Object type";
      if ((0, _definition.isInterfaceType)(type))
        return "an Interface type";
      if ((0, _definition.isUnionType)(type))
        return "a Union type";
      if ((0, _definition.isEnumType)(type))
        return "an Enum type";
      if ((0, _definition.isInputObjectType)(type))
        return "an Input type";
      (0, _invariant.invariant)(
        !1,
        "Unexpected type: " + (0, _inspect.inspect)(type)
      );
    }
    function stringifyValue(value, type) {
      let ast = (0, _astFromValue.astFromValue)(value, type);
      return ast != null || (0, _invariant.invariant)(!1), (0, _printer.print)((0, _sortValueNode.sortValueNode)(ast));
    }
    function diff(oldArray, newArray) {
      let added = [], removed = [], persisted = [], oldMap = (0, _keyMap.keyMap)(oldArray, ({ name }) => name), newMap = (0, _keyMap.keyMap)(newArray, ({ name }) => name);
      for (let oldItem of oldArray) {
        let newItem = newMap[oldItem.name];
        newItem === void 0 ? removed.push(oldItem) : persisted.push([oldItem, newItem]);
      }
      for (let newItem of newArray)
        oldMap[newItem.name] === void 0 && added.push(newItem);
      return {
        added,
        persisted,
        removed
      };
    }
  }
});

// node_modules/graphql/utilities/index.js
var require_utilities12 = __commonJS({
  "node_modules/graphql/utilities/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    Object.defineProperty(exports, "BreakingChangeType", {
      enumerable: !0,
      get: function() {
        return _findBreakingChanges.BreakingChangeType;
      }
    });
    Object.defineProperty(exports, "DangerousChangeType", {
      enumerable: !0,
      get: function() {
        return _findBreakingChanges.DangerousChangeType;
      }
    });
    Object.defineProperty(exports, "TypeInfo", {
      enumerable: !0,
      get: function() {
        return _TypeInfo.TypeInfo;
      }
    });
    Object.defineProperty(exports, "assertValidName", {
      enumerable: !0,
      get: function() {
        return _assertValidName.assertValidName;
      }
    });
    Object.defineProperty(exports, "astFromValue", {
      enumerable: !0,
      get: function() {
        return _astFromValue.astFromValue;
      }
    });
    Object.defineProperty(exports, "buildASTSchema", {
      enumerable: !0,
      get: function() {
        return _buildASTSchema.buildASTSchema;
      }
    });
    Object.defineProperty(exports, "buildClientSchema", {
      enumerable: !0,
      get: function() {
        return _buildClientSchema.buildClientSchema;
      }
    });
    Object.defineProperty(exports, "buildSchema", {
      enumerable: !0,
      get: function() {
        return _buildASTSchema.buildSchema;
      }
    });
    Object.defineProperty(exports, "coerceInputValue", {
      enumerable: !0,
      get: function() {
        return _coerceInputValue.coerceInputValue;
      }
    });
    Object.defineProperty(exports, "concatAST", {
      enumerable: !0,
      get: function() {
        return _concatAST.concatAST;
      }
    });
    Object.defineProperty(exports, "doTypesOverlap", {
      enumerable: !0,
      get: function() {
        return _typeComparators.doTypesOverlap;
      }
    });
    Object.defineProperty(exports, "extendSchema", {
      enumerable: !0,
      get: function() {
        return _extendSchema.extendSchema;
      }
    });
    Object.defineProperty(exports, "findBreakingChanges", {
      enumerable: !0,
      get: function() {
        return _findBreakingChanges.findBreakingChanges;
      }
    });
    Object.defineProperty(exports, "findDangerousChanges", {
      enumerable: !0,
      get: function() {
        return _findBreakingChanges.findDangerousChanges;
      }
    });
    Object.defineProperty(exports, "getIntrospectionQuery", {
      enumerable: !0,
      get: function() {
        return _getIntrospectionQuery.getIntrospectionQuery;
      }
    });
    Object.defineProperty(exports, "getOperationAST", {
      enumerable: !0,
      get: function() {
        return _getOperationAST.getOperationAST;
      }
    });
    Object.defineProperty(exports, "getOperationRootType", {
      enumerable: !0,
      get: function() {
        return _getOperationRootType.getOperationRootType;
      }
    });
    Object.defineProperty(exports, "introspectionFromSchema", {
      enumerable: !0,
      get: function() {
        return _introspectionFromSchema.introspectionFromSchema;
      }
    });
    Object.defineProperty(exports, "isEqualType", {
      enumerable: !0,
      get: function() {
        return _typeComparators.isEqualType;
      }
    });
    Object.defineProperty(exports, "isTypeSubTypeOf", {
      enumerable: !0,
      get: function() {
        return _typeComparators.isTypeSubTypeOf;
      }
    });
    Object.defineProperty(exports, "isValidNameError", {
      enumerable: !0,
      get: function() {
        return _assertValidName.isValidNameError;
      }
    });
    Object.defineProperty(exports, "lexicographicSortSchema", {
      enumerable: !0,
      get: function() {
        return _lexicographicSortSchema.lexicographicSortSchema;
      }
    });
    Object.defineProperty(exports, "printIntrospectionSchema", {
      enumerable: !0,
      get: function() {
        return _printSchema.printIntrospectionSchema;
      }
    });
    Object.defineProperty(exports, "printSchema", {
      enumerable: !0,
      get: function() {
        return _printSchema.printSchema;
      }
    });
    Object.defineProperty(exports, "printType", {
      enumerable: !0,
      get: function() {
        return _printSchema.printType;
      }
    });
    Object.defineProperty(exports, "separateOperations", {
      enumerable: !0,
      get: function() {
        return _separateOperations.separateOperations;
      }
    });
    Object.defineProperty(exports, "stripIgnoredCharacters", {
      enumerable: !0,
      get: function() {
        return _stripIgnoredCharacters.stripIgnoredCharacters;
      }
    });
    Object.defineProperty(exports, "typeFromAST", {
      enumerable: !0,
      get: function() {
        return _typeFromAST.typeFromAST;
      }
    });
    Object.defineProperty(exports, "valueFromAST", {
      enumerable: !0,
      get: function() {
        return _valueFromAST.valueFromAST;
      }
    });
    Object.defineProperty(exports, "valueFromASTUntyped", {
      enumerable: !0,
      get: function() {
        return _valueFromASTUntyped.valueFromASTUntyped;
      }
    });
    Object.defineProperty(exports, "visitWithTypeInfo", {
      enumerable: !0,
      get: function() {
        return _TypeInfo.visitWithTypeInfo;
      }
    });
    var _getIntrospectionQuery = require_getIntrospectionQuery(), _getOperationAST = require_getOperationAST(), _getOperationRootType = require_getOperationRootType(), _introspectionFromSchema = require_introspectionFromSchema(), _buildClientSchema = require_buildClientSchema(), _buildASTSchema = require_buildASTSchema(), _extendSchema = require_extendSchema(), _lexicographicSortSchema = require_lexicographicSortSchema(), _printSchema = require_printSchema(), _typeFromAST = require_typeFromAST(), _valueFromAST = require_valueFromAST(), _valueFromASTUntyped = require_valueFromASTUntyped(), _astFromValue = require_astFromValue(), _TypeInfo = require_TypeInfo(), _coerceInputValue = require_coerceInputValue(), _concatAST = require_concatAST(), _separateOperations = require_separateOperations(), _stripIgnoredCharacters = require_stripIgnoredCharacters(), _typeComparators = require_typeComparators(), _assertValidName = require_assertValidName(), _findBreakingChanges = require_findBreakingChanges();
  }
});

// node_modules/graphql/index.js
var require_graphql2 = __commonJS({
  "node_modules/graphql/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: !0
    });
    Object.defineProperty(exports, "BREAK", {
      enumerable: !0,
      get: function() {
        return _index2.BREAK;
      }
    });
    Object.defineProperty(exports, "BreakingChangeType", {
      enumerable: !0,
      get: function() {
        return _index6.BreakingChangeType;
      }
    });
    Object.defineProperty(exports, "DEFAULT_DEPRECATION_REASON", {
      enumerable: !0,
      get: function() {
        return _index.DEFAULT_DEPRECATION_REASON;
      }
    });
    Object.defineProperty(exports, "DangerousChangeType", {
      enumerable: !0,
      get: function() {
        return _index6.DangerousChangeType;
      }
    });
    Object.defineProperty(exports, "DirectiveLocation", {
      enumerable: !0,
      get: function() {
        return _index2.DirectiveLocation;
      }
    });
    Object.defineProperty(exports, "ExecutableDefinitionsRule", {
      enumerable: !0,
      get: function() {
        return _index4.ExecutableDefinitionsRule;
      }
    });
    Object.defineProperty(exports, "FieldsOnCorrectTypeRule", {
      enumerable: !0,
      get: function() {
        return _index4.FieldsOnCorrectTypeRule;
      }
    });
    Object.defineProperty(exports, "FragmentsOnCompositeTypesRule", {
      enumerable: !0,
      get: function() {
        return _index4.FragmentsOnCompositeTypesRule;
      }
    });
    Object.defineProperty(exports, "GRAPHQL_MAX_INT", {
      enumerable: !0,
      get: function() {
        return _index.GRAPHQL_MAX_INT;
      }
    });
    Object.defineProperty(exports, "GRAPHQL_MIN_INT", {
      enumerable: !0,
      get: function() {
        return _index.GRAPHQL_MIN_INT;
      }
    });
    Object.defineProperty(exports, "GraphQLBoolean", {
      enumerable: !0,
      get: function() {
        return _index.GraphQLBoolean;
      }
    });
    Object.defineProperty(exports, "GraphQLDeprecatedDirective", {
      enumerable: !0,
      get: function() {
        return _index.GraphQLDeprecatedDirective;
      }
    });
    Object.defineProperty(exports, "GraphQLDirective", {
      enumerable: !0,
      get: function() {
        return _index.GraphQLDirective;
      }
    });
    Object.defineProperty(exports, "GraphQLEnumType", {
      enumerable: !0,
      get: function() {
        return _index.GraphQLEnumType;
      }
    });
    Object.defineProperty(exports, "GraphQLError", {
      enumerable: !0,
      get: function() {
        return _index5.GraphQLError;
      }
    });
    Object.defineProperty(exports, "GraphQLFloat", {
      enumerable: !0,
      get: function() {
        return _index.GraphQLFloat;
      }
    });
    Object.defineProperty(exports, "GraphQLID", {
      enumerable: !0,
      get: function() {
        return _index.GraphQLID;
      }
    });
    Object.defineProperty(exports, "GraphQLIncludeDirective", {
      enumerable: !0,
      get: function() {
        return _index.GraphQLIncludeDirective;
      }
    });
    Object.defineProperty(exports, "GraphQLInputObjectType", {
      enumerable: !0,
      get: function() {
        return _index.GraphQLInputObjectType;
      }
    });
    Object.defineProperty(exports, "GraphQLInt", {
      enumerable: !0,
      get: function() {
        return _index.GraphQLInt;
      }
    });
    Object.defineProperty(exports, "GraphQLInterfaceType", {
      enumerable: !0,
      get: function() {
        return _index.GraphQLInterfaceType;
      }
    });
    Object.defineProperty(exports, "GraphQLList", {
      enumerable: !0,
      get: function() {
        return _index.GraphQLList;
      }
    });
    Object.defineProperty(exports, "GraphQLNonNull", {
      enumerable: !0,
      get: function() {
        return _index.GraphQLNonNull;
      }
    });
    Object.defineProperty(exports, "GraphQLObjectType", {
      enumerable: !0,
      get: function() {
        return _index.GraphQLObjectType;
      }
    });
    Object.defineProperty(exports, "GraphQLOneOfDirective", {
      enumerable: !0,
      get: function() {
        return _index.GraphQLOneOfDirective;
      }
    });
    Object.defineProperty(exports, "GraphQLScalarType", {
      enumerable: !0,
      get: function() {
        return _index.GraphQLScalarType;
      }
    });
    Object.defineProperty(exports, "GraphQLSchema", {
      enumerable: !0,
      get: function() {
        return _index.GraphQLSchema;
      }
    });
    Object.defineProperty(exports, "GraphQLSkipDirective", {
      enumerable: !0,
      get: function() {
        return _index.GraphQLSkipDirective;
      }
    });
    Object.defineProperty(exports, "GraphQLSpecifiedByDirective", {
      enumerable: !0,
      get: function() {
        return _index.GraphQLSpecifiedByDirective;
      }
    });
    Object.defineProperty(exports, "GraphQLString", {
      enumerable: !0,
      get: function() {
        return _index.GraphQLString;
      }
    });
    Object.defineProperty(exports, "GraphQLUnionType", {
      enumerable: !0,
      get: function() {
        return _index.GraphQLUnionType;
      }
    });
    Object.defineProperty(exports, "Kind", {
      enumerable: !0,
      get: function() {
        return _index2.Kind;
      }
    });
    Object.defineProperty(exports, "KnownArgumentNamesRule", {
      enumerable: !0,
      get: function() {
        return _index4.KnownArgumentNamesRule;
      }
    });
    Object.defineProperty(exports, "KnownDirectivesRule", {
      enumerable: !0,
      get: function() {
        return _index4.KnownDirectivesRule;
      }
    });
    Object.defineProperty(exports, "KnownFragmentNamesRule", {
      enumerable: !0,
      get: function() {
        return _index4.KnownFragmentNamesRule;
      }
    });
    Object.defineProperty(exports, "KnownTypeNamesRule", {
      enumerable: !0,
      get: function() {
        return _index4.KnownTypeNamesRule;
      }
    });
    Object.defineProperty(exports, "Lexer", {
      enumerable: !0,
      get: function() {
        return _index2.Lexer;
      }
    });
    Object.defineProperty(exports, "Location", {
      enumerable: !0,
      get: function() {
        return _index2.Location;
      }
    });
    Object.defineProperty(exports, "LoneAnonymousOperationRule", {
      enumerable: !0,
      get: function() {
        return _index4.LoneAnonymousOperationRule;
      }
    });
    Object.defineProperty(exports, "LoneSchemaDefinitionRule", {
      enumerable: !0,
      get: function() {
        return _index4.LoneSchemaDefinitionRule;
      }
    });
    Object.defineProperty(exports, "MaxIntrospectionDepthRule", {
      enumerable: !0,
      get: function() {
        return _index4.MaxIntrospectionDepthRule;
      }
    });
    Object.defineProperty(exports, "NoDeprecatedCustomRule", {
      enumerable: !0,
      get: function() {
        return _index4.NoDeprecatedCustomRule;
      }
    });
    Object.defineProperty(exports, "NoFragmentCyclesRule", {
      enumerable: !0,
      get: function() {
        return _index4.NoFragmentCyclesRule;
      }
    });
    Object.defineProperty(exports, "NoSchemaIntrospectionCustomRule", {
      enumerable: !0,
      get: function() {
        return _index4.NoSchemaIntrospectionCustomRule;
      }
    });
    Object.defineProperty(exports, "NoUndefinedVariablesRule", {
      enumerable: !0,
      get: function() {
        return _index4.NoUndefinedVariablesRule;
      }
    });
    Object.defineProperty(exports, "NoUnusedFragmentsRule", {
      enumerable: !0,
      get: function() {
        return _index4.NoUnusedFragmentsRule;
      }
    });
    Object.defineProperty(exports, "NoUnusedVariablesRule", {
      enumerable: !0,
      get: function() {
        return _index4.NoUnusedVariablesRule;
      }
    });
    Object.defineProperty(exports, "OperationTypeNode", {
      enumerable: !0,
      get: function() {
        return _index2.OperationTypeNode;
      }
    });
    Object.defineProperty(exports, "OverlappingFieldsCanBeMergedRule", {
      enumerable: !0,
      get: function() {
        return _index4.OverlappingFieldsCanBeMergedRule;
      }
    });
    Object.defineProperty(exports, "PossibleFragmentSpreadsRule", {
      enumerable: !0,
      get: function() {
        return _index4.PossibleFragmentSpreadsRule;
      }
    });
    Object.defineProperty(exports, "PossibleTypeExtensionsRule", {
      enumerable: !0,
      get: function() {
        return _index4.PossibleTypeExtensionsRule;
      }
    });
    Object.defineProperty(exports, "ProvidedRequiredArgumentsRule", {
      enumerable: !0,
      get: function() {
        return _index4.ProvidedRequiredArgumentsRule;
      }
    });
    Object.defineProperty(exports, "ScalarLeafsRule", {
      enumerable: !0,
      get: function() {
        return _index4.ScalarLeafsRule;
      }
    });
    Object.defineProperty(exports, "SchemaMetaFieldDef", {
      enumerable: !0,
      get: function() {
        return _index.SchemaMetaFieldDef;
      }
    });
    Object.defineProperty(exports, "SingleFieldSubscriptionsRule", {
      enumerable: !0,
      get: function() {
        return _index4.SingleFieldSubscriptionsRule;
      }
    });
    Object.defineProperty(exports, "Source", {
      enumerable: !0,
      get: function() {
        return _index2.Source;
      }
    });
    Object.defineProperty(exports, "Token", {
      enumerable: !0,
      get: function() {
        return _index2.Token;
      }
    });
    Object.defineProperty(exports, "TokenKind", {
      enumerable: !0,
      get: function() {
        return _index2.TokenKind;
      }
    });
    Object.defineProperty(exports, "TypeInfo", {
      enumerable: !0,
      get: function() {
        return _index6.TypeInfo;
      }
    });
    Object.defineProperty(exports, "TypeKind", {
      enumerable: !0,
      get: function() {
        return _index.TypeKind;
      }
    });
    Object.defineProperty(exports, "TypeMetaFieldDef", {
      enumerable: !0,
      get: function() {
        return _index.TypeMetaFieldDef;
      }
    });
    Object.defineProperty(exports, "TypeNameMetaFieldDef", {
      enumerable: !0,
      get: function() {
        return _index.TypeNameMetaFieldDef;
      }
    });
    Object.defineProperty(exports, "UniqueArgumentDefinitionNamesRule", {
      enumerable: !0,
      get: function() {
        return _index4.UniqueArgumentDefinitionNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueArgumentNamesRule", {
      enumerable: !0,
      get: function() {
        return _index4.UniqueArgumentNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueDirectiveNamesRule", {
      enumerable: !0,
      get: function() {
        return _index4.UniqueDirectiveNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueDirectivesPerLocationRule", {
      enumerable: !0,
      get: function() {
        return _index4.UniqueDirectivesPerLocationRule;
      }
    });
    Object.defineProperty(exports, "UniqueEnumValueNamesRule", {
      enumerable: !0,
      get: function() {
        return _index4.UniqueEnumValueNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueFieldDefinitionNamesRule", {
      enumerable: !0,
      get: function() {
        return _index4.UniqueFieldDefinitionNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueFragmentNamesRule", {
      enumerable: !0,
      get: function() {
        return _index4.UniqueFragmentNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueInputFieldNamesRule", {
      enumerable: !0,
      get: function() {
        return _index4.UniqueInputFieldNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueOperationNamesRule", {
      enumerable: !0,
      get: function() {
        return _index4.UniqueOperationNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueOperationTypesRule", {
      enumerable: !0,
      get: function() {
        return _index4.UniqueOperationTypesRule;
      }
    });
    Object.defineProperty(exports, "UniqueTypeNamesRule", {
      enumerable: !0,
      get: function() {
        return _index4.UniqueTypeNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueVariableNamesRule", {
      enumerable: !0,
      get: function() {
        return _index4.UniqueVariableNamesRule;
      }
    });
    Object.defineProperty(exports, "ValidationContext", {
      enumerable: !0,
      get: function() {
        return _index4.ValidationContext;
      }
    });
    Object.defineProperty(exports, "ValuesOfCorrectTypeRule", {
      enumerable: !0,
      get: function() {
        return _index4.ValuesOfCorrectTypeRule;
      }
    });
    Object.defineProperty(exports, "VariablesAreInputTypesRule", {
      enumerable: !0,
      get: function() {
        return _index4.VariablesAreInputTypesRule;
      }
    });
    Object.defineProperty(exports, "VariablesInAllowedPositionRule", {
      enumerable: !0,
      get: function() {
        return _index4.VariablesInAllowedPositionRule;
      }
    });
    Object.defineProperty(exports, "__Directive", {
      enumerable: !0,
      get: function() {
        return _index.__Directive;
      }
    });
    Object.defineProperty(exports, "__DirectiveLocation", {
      enumerable: !0,
      get: function() {
        return _index.__DirectiveLocation;
      }
    });
    Object.defineProperty(exports, "__EnumValue", {
      enumerable: !0,
      get: function() {
        return _index.__EnumValue;
      }
    });
    Object.defineProperty(exports, "__Field", {
      enumerable: !0,
      get: function() {
        return _index.__Field;
      }
    });
    Object.defineProperty(exports, "__InputValue", {
      enumerable: !0,
      get: function() {
        return _index.__InputValue;
      }
    });
    Object.defineProperty(exports, "__Schema", {
      enumerable: !0,
      get: function() {
        return _index.__Schema;
      }
    });
    Object.defineProperty(exports, "__Type", {
      enumerable: !0,
      get: function() {
        return _index.__Type;
      }
    });
    Object.defineProperty(exports, "__TypeKind", {
      enumerable: !0,
      get: function() {
        return _index.__TypeKind;
      }
    });
    Object.defineProperty(exports, "assertAbstractType", {
      enumerable: !0,
      get: function() {
        return _index.assertAbstractType;
      }
    });
    Object.defineProperty(exports, "assertCompositeType", {
      enumerable: !0,
      get: function() {
        return _index.assertCompositeType;
      }
    });
    Object.defineProperty(exports, "assertDirective", {
      enumerable: !0,
      get: function() {
        return _index.assertDirective;
      }
    });
    Object.defineProperty(exports, "assertEnumType", {
      enumerable: !0,
      get: function() {
        return _index.assertEnumType;
      }
    });
    Object.defineProperty(exports, "assertEnumValueName", {
      enumerable: !0,
      get: function() {
        return _index.assertEnumValueName;
      }
    });
    Object.defineProperty(exports, "assertInputObjectType", {
      enumerable: !0,
      get: function() {
        return _index.assertInputObjectType;
      }
    });
    Object.defineProperty(exports, "assertInputType", {
      enumerable: !0,
      get: function() {
        return _index.assertInputType;
      }
    });
    Object.defineProperty(exports, "assertInterfaceType", {
      enumerable: !0,
      get: function() {
        return _index.assertInterfaceType;
      }
    });
    Object.defineProperty(exports, "assertLeafType", {
      enumerable: !0,
      get: function() {
        return _index.assertLeafType;
      }
    });
    Object.defineProperty(exports, "assertListType", {
      enumerable: !0,
      get: function() {
        return _index.assertListType;
      }
    });
    Object.defineProperty(exports, "assertName", {
      enumerable: !0,
      get: function() {
        return _index.assertName;
      }
    });
    Object.defineProperty(exports, "assertNamedType", {
      enumerable: !0,
      get: function() {
        return _index.assertNamedType;
      }
    });
    Object.defineProperty(exports, "assertNonNullType", {
      enumerable: !0,
      get: function() {
        return _index.assertNonNullType;
      }
    });
    Object.defineProperty(exports, "assertNullableType", {
      enumerable: !0,
      get: function() {
        return _index.assertNullableType;
      }
    });
    Object.defineProperty(exports, "assertObjectType", {
      enumerable: !0,
      get: function() {
        return _index.assertObjectType;
      }
    });
    Object.defineProperty(exports, "assertOutputType", {
      enumerable: !0,
      get: function() {
        return _index.assertOutputType;
      }
    });
    Object.defineProperty(exports, "assertScalarType", {
      enumerable: !0,
      get: function() {
        return _index.assertScalarType;
      }
    });
    Object.defineProperty(exports, "assertSchema", {
      enumerable: !0,
      get: function() {
        return _index.assertSchema;
      }
    });
    Object.defineProperty(exports, "assertType", {
      enumerable: !0,
      get: function() {
        return _index.assertType;
      }
    });
    Object.defineProperty(exports, "assertUnionType", {
      enumerable: !0,
      get: function() {
        return _index.assertUnionType;
      }
    });
    Object.defineProperty(exports, "assertValidName", {
      enumerable: !0,
      get: function() {
        return _index6.assertValidName;
      }
    });
    Object.defineProperty(exports, "assertValidSchema", {
      enumerable: !0,
      get: function() {
        return _index.assertValidSchema;
      }
    });
    Object.defineProperty(exports, "assertWrappingType", {
      enumerable: !0,
      get: function() {
        return _index.assertWrappingType;
      }
    });
    Object.defineProperty(exports, "astFromValue", {
      enumerable: !0,
      get: function() {
        return _index6.astFromValue;
      }
    });
    Object.defineProperty(exports, "buildASTSchema", {
      enumerable: !0,
      get: function() {
        return _index6.buildASTSchema;
      }
    });
    Object.defineProperty(exports, "buildClientSchema", {
      enumerable: !0,
      get: function() {
        return _index6.buildClientSchema;
      }
    });
    Object.defineProperty(exports, "buildSchema", {
      enumerable: !0,
      get: function() {
        return _index6.buildSchema;
      }
    });
    Object.defineProperty(exports, "coerceInputValue", {
      enumerable: !0,
      get: function() {
        return _index6.coerceInputValue;
      }
    });
    Object.defineProperty(exports, "concatAST", {
      enumerable: !0,
      get: function() {
        return _index6.concatAST;
      }
    });
    Object.defineProperty(exports, "createSourceEventStream", {
      enumerable: !0,
      get: function() {
        return _index3.createSourceEventStream;
      }
    });
    Object.defineProperty(exports, "defaultFieldResolver", {
      enumerable: !0,
      get: function() {
        return _index3.defaultFieldResolver;
      }
    });
    Object.defineProperty(exports, "defaultTypeResolver", {
      enumerable: !0,
      get: function() {
        return _index3.defaultTypeResolver;
      }
    });
    Object.defineProperty(exports, "doTypesOverlap", {
      enumerable: !0,
      get: function() {
        return _index6.doTypesOverlap;
      }
    });
    Object.defineProperty(exports, "execute", {
      enumerable: !0,
      get: function() {
        return _index3.execute;
      }
    });
    Object.defineProperty(exports, "executeSync", {
      enumerable: !0,
      get: function() {
        return _index3.executeSync;
      }
    });
    Object.defineProperty(exports, "extendSchema", {
      enumerable: !0,
      get: function() {
        return _index6.extendSchema;
      }
    });
    Object.defineProperty(exports, "findBreakingChanges", {
      enumerable: !0,
      get: function() {
        return _index6.findBreakingChanges;
      }
    });
    Object.defineProperty(exports, "findDangerousChanges", {
      enumerable: !0,
      get: function() {
        return _index6.findDangerousChanges;
      }
    });
    Object.defineProperty(exports, "formatError", {
      enumerable: !0,
      get: function() {
        return _index5.formatError;
      }
    });
    Object.defineProperty(exports, "getArgumentValues", {
      enumerable: !0,
      get: function() {
        return _index3.getArgumentValues;
      }
    });
    Object.defineProperty(exports, "getDirectiveValues", {
      enumerable: !0,
      get: function() {
        return _index3.getDirectiveValues;
      }
    });
    Object.defineProperty(exports, "getEnterLeaveForKind", {
      enumerable: !0,
      get: function() {
        return _index2.getEnterLeaveForKind;
      }
    });
    Object.defineProperty(exports, "getIntrospectionQuery", {
      enumerable: !0,
      get: function() {
        return _index6.getIntrospectionQuery;
      }
    });
    Object.defineProperty(exports, "getLocation", {
      enumerable: !0,
      get: function() {
        return _index2.getLocation;
      }
    });
    Object.defineProperty(exports, "getNamedType", {
      enumerable: !0,
      get: function() {
        return _index.getNamedType;
      }
    });
    Object.defineProperty(exports, "getNullableType", {
      enumerable: !0,
      get: function() {
        return _index.getNullableType;
      }
    });
    Object.defineProperty(exports, "getOperationAST", {
      enumerable: !0,
      get: function() {
        return _index6.getOperationAST;
      }
    });
    Object.defineProperty(exports, "getOperationRootType", {
      enumerable: !0,
      get: function() {
        return _index6.getOperationRootType;
      }
    });
    Object.defineProperty(exports, "getVariableValues", {
      enumerable: !0,
      get: function() {
        return _index3.getVariableValues;
      }
    });
    Object.defineProperty(exports, "getVisitFn", {
      enumerable: !0,
      get: function() {
        return _index2.getVisitFn;
      }
    });
    Object.defineProperty(exports, "graphql", {
      enumerable: !0,
      get: function() {
        return _graphql.graphql;
      }
    });
    Object.defineProperty(exports, "graphqlSync", {
      enumerable: !0,
      get: function() {
        return _graphql.graphqlSync;
      }
    });
    Object.defineProperty(exports, "introspectionFromSchema", {
      enumerable: !0,
      get: function() {
        return _index6.introspectionFromSchema;
      }
    });
    Object.defineProperty(exports, "introspectionTypes", {
      enumerable: !0,
      get: function() {
        return _index.introspectionTypes;
      }
    });
    Object.defineProperty(exports, "isAbstractType", {
      enumerable: !0,
      get: function() {
        return _index.isAbstractType;
      }
    });
    Object.defineProperty(exports, "isCompositeType", {
      enumerable: !0,
      get: function() {
        return _index.isCompositeType;
      }
    });
    Object.defineProperty(exports, "isConstValueNode", {
      enumerable: !0,
      get: function() {
        return _index2.isConstValueNode;
      }
    });
    Object.defineProperty(exports, "isDefinitionNode", {
      enumerable: !0,
      get: function() {
        return _index2.isDefinitionNode;
      }
    });
    Object.defineProperty(exports, "isDirective", {
      enumerable: !0,
      get: function() {
        return _index.isDirective;
      }
    });
    Object.defineProperty(exports, "isEnumType", {
      enumerable: !0,
      get: function() {
        return _index.isEnumType;
      }
    });
    Object.defineProperty(exports, "isEqualType", {
      enumerable: !0,
      get: function() {
        return _index6.isEqualType;
      }
    });
    Object.defineProperty(exports, "isExecutableDefinitionNode", {
      enumerable: !0,
      get: function() {
        return _index2.isExecutableDefinitionNode;
      }
    });
    Object.defineProperty(exports, "isInputObjectType", {
      enumerable: !0,
      get: function() {
        return _index.isInputObjectType;
      }
    });
    Object.defineProperty(exports, "isInputType", {
      enumerable: !0,
      get: function() {
        return _index.isInputType;
      }
    });
    Object.defineProperty(exports, "isInterfaceType", {
      enumerable: !0,
      get: function() {
        return _index.isInterfaceType;
      }
    });
    Object.defineProperty(exports, "isIntrospectionType", {
      enumerable: !0,
      get: function() {
        return _index.isIntrospectionType;
      }
    });
    Object.defineProperty(exports, "isLeafType", {
      enumerable: !0,
      get: function() {
        return _index.isLeafType;
      }
    });
    Object.defineProperty(exports, "isListType", {
      enumerable: !0,
      get: function() {
        return _index.isListType;
      }
    });
    Object.defineProperty(exports, "isNamedType", {
      enumerable: !0,
      get: function() {
        return _index.isNamedType;
      }
    });
    Object.defineProperty(exports, "isNonNullType", {
      enumerable: !0,
      get: function() {
        return _index.isNonNullType;
      }
    });
    Object.defineProperty(exports, "isNullableType", {
      enumerable: !0,
      get: function() {
        return _index.isNullableType;
      }
    });
    Object.defineProperty(exports, "isObjectType", {
      enumerable: !0,
      get: function() {
        return _index.isObjectType;
      }
    });
    Object.defineProperty(exports, "isOutputType", {
      enumerable: !0,
      get: function() {
        return _index.isOutputType;
      }
    });
    Object.defineProperty(exports, "isRequiredArgument", {
      enumerable: !0,
      get: function() {
        return _index.isRequiredArgument;
      }
    });
    Object.defineProperty(exports, "isRequiredInputField", {
      enumerable: !0,
      get: function() {
        return _index.isRequiredInputField;
      }
    });
    Object.defineProperty(exports, "isScalarType", {
      enumerable: !0,
      get: function() {
        return _index.isScalarType;
      }
    });
    Object.defineProperty(exports, "isSchema", {
      enumerable: !0,
      get: function() {
        return _index.isSchema;
      }
    });
    Object.defineProperty(exports, "isSelectionNode", {
      enumerable: !0,
      get: function() {
        return _index2.isSelectionNode;
      }
    });
    Object.defineProperty(exports, "isSpecifiedDirective", {
      enumerable: !0,
      get: function() {
        return _index.isSpecifiedDirective;
      }
    });
    Object.defineProperty(exports, "isSpecifiedScalarType", {
      enumerable: !0,
      get: function() {
        return _index.isSpecifiedScalarType;
      }
    });
    Object.defineProperty(exports, "isType", {
      enumerable: !0,
      get: function() {
        return _index.isType;
      }
    });
    Object.defineProperty(exports, "isTypeDefinitionNode", {
      enumerable: !0,
      get: function() {
        return _index2.isTypeDefinitionNode;
      }
    });
    Object.defineProperty(exports, "isTypeExtensionNode", {
      enumerable: !0,
      get: function() {
        return _index2.isTypeExtensionNode;
      }
    });
    Object.defineProperty(exports, "isTypeNode", {
      enumerable: !0,
      get: function() {
        return _index2.isTypeNode;
      }
    });
    Object.defineProperty(exports, "isTypeSubTypeOf", {
      enumerable: !0,
      get: function() {
        return _index6.isTypeSubTypeOf;
      }
    });
    Object.defineProperty(exports, "isTypeSystemDefinitionNode", {
      enumerable: !0,
      get: function() {
        return _index2.isTypeSystemDefinitionNode;
      }
    });
    Object.defineProperty(exports, "isTypeSystemExtensionNode", {
      enumerable: !0,
      get: function() {
        return _index2.isTypeSystemExtensionNode;
      }
    });
    Object.defineProperty(exports, "isUnionType", {
      enumerable: !0,
      get: function() {
        return _index.isUnionType;
      }
    });
    Object.defineProperty(exports, "isValidNameError", {
      enumerable: !0,
      get: function() {
        return _index6.isValidNameError;
      }
    });
    Object.defineProperty(exports, "isValueNode", {
      enumerable: !0,
      get: function() {
        return _index2.isValueNode;
      }
    });
    Object.defineProperty(exports, "isWrappingType", {
      enumerable: !0,
      get: function() {
        return _index.isWrappingType;
      }
    });
    Object.defineProperty(exports, "lexicographicSortSchema", {
      enumerable: !0,
      get: function() {
        return _index6.lexicographicSortSchema;
      }
    });
    Object.defineProperty(exports, "locatedError", {
      enumerable: !0,
      get: function() {
        return _index5.locatedError;
      }
    });
    Object.defineProperty(exports, "parse", {
      enumerable: !0,
      get: function() {
        return _index2.parse;
      }
    });
    Object.defineProperty(exports, "parseConstValue", {
      enumerable: !0,
      get: function() {
        return _index2.parseConstValue;
      }
    });
    Object.defineProperty(exports, "parseType", {
      enumerable: !0,
      get: function() {
        return _index2.parseType;
      }
    });
    Object.defineProperty(exports, "parseValue", {
      enumerable: !0,
      get: function() {
        return _index2.parseValue;
      }
    });
    Object.defineProperty(exports, "print", {
      enumerable: !0,
      get: function() {
        return _index2.print;
      }
    });
    Object.defineProperty(exports, "printError", {
      enumerable: !0,
      get: function() {
        return _index5.printError;
      }
    });
    Object.defineProperty(exports, "printIntrospectionSchema", {
      enumerable: !0,
      get: function() {
        return _index6.printIntrospectionSchema;
      }
    });
    Object.defineProperty(exports, "printLocation", {
      enumerable: !0,
      get: function() {
        return _index2.printLocation;
      }
    });
    Object.defineProperty(exports, "printSchema", {
      enumerable: !0,
      get: function() {
        return _index6.printSchema;
      }
    });
    Object.defineProperty(exports, "printSourceLocation", {
      enumerable: !0,
      get: function() {
        return _index2.printSourceLocation;
      }
    });
    Object.defineProperty(exports, "printType", {
      enumerable: !0,
      get: function() {
        return _index6.printType;
      }
    });
    Object.defineProperty(exports, "recommendedRules", {
      enumerable: !0,
      get: function() {
        return _index4.recommendedRules;
      }
    });
    Object.defineProperty(exports, "resolveObjMapThunk", {
      enumerable: !0,
      get: function() {
        return _index.resolveObjMapThunk;
      }
    });
    Object.defineProperty(exports, "resolveReadonlyArrayThunk", {
      enumerable: !0,
      get: function() {
        return _index.resolveReadonlyArrayThunk;
      }
    });
    Object.defineProperty(exports, "responsePathAsArray", {
      enumerable: !0,
      get: function() {
        return _index3.responsePathAsArray;
      }
    });
    Object.defineProperty(exports, "separateOperations", {
      enumerable: !0,
      get: function() {
        return _index6.separateOperations;
      }
    });
    Object.defineProperty(exports, "specifiedDirectives", {
      enumerable: !0,
      get: function() {
        return _index.specifiedDirectives;
      }
    });
    Object.defineProperty(exports, "specifiedRules", {
      enumerable: !0,
      get: function() {
        return _index4.specifiedRules;
      }
    });
    Object.defineProperty(exports, "specifiedScalarTypes", {
      enumerable: !0,
      get: function() {
        return _index.specifiedScalarTypes;
      }
    });
    Object.defineProperty(exports, "stripIgnoredCharacters", {
      enumerable: !0,
      get: function() {
        return _index6.stripIgnoredCharacters;
      }
    });
    Object.defineProperty(exports, "subscribe", {
      enumerable: !0,
      get: function() {
        return _index3.subscribe;
      }
    });
    Object.defineProperty(exports, "syntaxError", {
      enumerable: !0,
      get: function() {
        return _index5.syntaxError;
      }
    });
    Object.defineProperty(exports, "typeFromAST", {
      enumerable: !0,
      get: function() {
        return _index6.typeFromAST;
      }
    });
    Object.defineProperty(exports, "validate", {
      enumerable: !0,
      get: function() {
        return _index4.validate;
      }
    });
    Object.defineProperty(exports, "validateSchema", {
      enumerable: !0,
      get: function() {
        return _index.validateSchema;
      }
    });
    Object.defineProperty(exports, "valueFromAST", {
      enumerable: !0,
      get: function() {
        return _index6.valueFromAST;
      }
    });
    Object.defineProperty(exports, "valueFromASTUntyped", {
      enumerable: !0,
      get: function() {
        return _index6.valueFromASTUntyped;
      }
    });
    Object.defineProperty(exports, "version", {
      enumerable: !0,
      get: function() {
        return _version.version;
      }
    });
    Object.defineProperty(exports, "versionInfo", {
      enumerable: !0,
      get: function() {
        return _version.versionInfo;
      }
    });
    Object.defineProperty(exports, "visit", {
      enumerable: !0,
      get: function() {
        return _index2.visit;
      }
    });
    Object.defineProperty(exports, "visitInParallel", {
      enumerable: !0,
      get: function() {
        return _index2.visitInParallel;
      }
    });
    Object.defineProperty(exports, "visitWithTypeInfo", {
      enumerable: !0,
      get: function() {
        return _index6.visitWithTypeInfo;
      }
    });
    var _version = require_version(), _graphql = require_graphql(), _index = require_type(), _index2 = require_language(), _index3 = require_execution(), _index4 = require_validation(), _index5 = require_error(), _index6 = require_utilities12();
  }
});

// node_modules/graphql-request/build/lib/http.js
var ACCEPT_HEADER, CONTENT_TYPE_HEADER, CONTENT_TYPE_JSON, CONTENT_TYPE_GQL, init_http = __esm({
  "node_modules/graphql-request/build/lib/http.js"() {
    ACCEPT_HEADER = "Accept", CONTENT_TYPE_HEADER = "Content-Type", CONTENT_TYPE_JSON = "application/json", CONTENT_TYPE_GQL = "application/graphql-response+json";
  }
});

// node_modules/graphql-request/build/legacy/lib/graphql.js
var import_graphql, cleanQuery, isGraphQLContentType, parseGraphQLExecutionResult, parseExecutionResult, isRequestResultHaveErrors, isExecutionResultHaveErrors, isOperationDefinitionNode, init_graphql = __esm({
  "node_modules/graphql-request/build/legacy/lib/graphql.js"() {
    import_graphql = __toESM(require_graphql2(), 1);
    init_http();
    init_prelude();
    cleanQuery = (str) => str.replace(/([\s,]|#[^\n\r]+)+/g, " ").trim(), isGraphQLContentType = (contentType) => {
      let contentTypeLower = contentType.toLowerCase();
      return contentTypeLower.includes(CONTENT_TYPE_GQL) || contentTypeLower.includes(CONTENT_TYPE_JSON);
    }, parseGraphQLExecutionResult = (result) => {
      try {
        if (Array.isArray(result))
          return {
            _tag: "Batch",
            executionResults: result.map(parseExecutionResult)
          };
        if (isPlainObject(result))
          return {
            _tag: "Single",
            executionResult: parseExecutionResult(result)
          };
        throw new Error(`Invalid execution result: result is not object or array. 
Got:
${String(result)}`);
      } catch (e) {
        return e;
      }
    }, parseExecutionResult = (result) => {
      if (typeof result != "object" || result === null)
        throw new Error("Invalid execution result: result is not object");
      let errors, data, extensions;
      if ("errors" in result) {
        if (!isPlainObject(result.errors) && !Array.isArray(result.errors))
          throw new Error("Invalid execution result: errors is not plain object OR array");
        errors = result.errors;
      }
      if ("data" in result) {
        if (!isPlainObject(result.data) && result.data !== null)
          throw new Error("Invalid execution result: data is not plain object");
        data = result.data;
      }
      if ("extensions" in result) {
        if (!isPlainObject(result.extensions))
          throw new Error("Invalid execution result: extensions is not plain object");
        extensions = result.extensions;
      }
      return {
        data,
        errors,
        extensions
      };
    }, isRequestResultHaveErrors = (result) => result._tag === "Batch" ? result.executionResults.some(isExecutionResultHaveErrors) : isExecutionResultHaveErrors(result.executionResult), isExecutionResultHaveErrors = (result) => Array.isArray(result.errors) ? result.errors.length > 0 : Boolean(result.errors), isOperationDefinitionNode = (definition) => typeof definition == "object" && definition !== null && "kind" in definition && definition.kind === import_graphql.Kind.OPERATION_DEFINITION;
  }
});

// node_modules/graphql-request/build/legacy/helpers/analyzeDocument.js
var import_graphql3, import_graphql4, extractOperationName, extractIsMutation, analyzeDocument, init_analyzeDocument = __esm({
  "node_modules/graphql-request/build/legacy/helpers/analyzeDocument.js"() {
    init_prelude();
    init_graphql();
    import_graphql3 = __toESM(require_graphql2(), 1), import_graphql4 = __toESM(require_graphql2(), 1), extractOperationName = (document2) => {
      let operationName, defs = document2.definitions.filter(isOperationDefinitionNode);
      return defs.length === 1 && (operationName = defs[0].name?.value), operationName;
    }, extractIsMutation = (document2) => {
      let isMutation = !1, defs = document2.definitions.filter(isOperationDefinitionNode);
      return defs.length === 1 && (isMutation = defs[0].operation === "mutation"), isMutation;
    }, analyzeDocument = (document2, excludeOperationName) => {
      let expression = typeof document2 == "string" ? document2 : (0, import_graphql4.print)(document2), isMutation = !1, operationName;
      if (excludeOperationName)
        return { expression, isMutation, operationName };
      let docNode = tryCatch(() => typeof document2 == "string" ? (0, import_graphql3.parse)(document2) : document2);
      return docNode instanceof Error ? { expression, isMutation, operationName } : (operationName = extractOperationName(docNode), isMutation = extractIsMutation(docNode), { expression, operationName, isMutation });
    };
  }
});

// node_modules/graphql-request/build/legacy/helpers/defaultJsonSerializer.js
var defaultJsonSerializer, init_defaultJsonSerializer = __esm({
  "node_modules/graphql-request/build/legacy/helpers/defaultJsonSerializer.js"() {
    defaultJsonSerializer = JSON;
  }
});

// node_modules/graphql-request/build/legacy/helpers/runRequest.js
var runRequest, executionResultClientResponseFields, parseResultFromResponse, createFetcher, buildBody, buildQueryParams, init_runRequest = __esm({
  "node_modules/graphql-request/build/legacy/helpers/runRequest.js"() {
    init_http();
    init_prelude();
    init_ClientError();
    init_graphql();
    init_defaultJsonSerializer();
    runRequest = async (input) => {
      let config = {
        ...input,
        method: input.request._tag === "Single" ? input.request.document.isMutation ? "POST" : uppercase(input.method ?? "post") : input.request.hasMutations ? "POST" : uppercase(input.method ?? "post"),
        fetchOptions: {
          ...input.fetchOptions,
          errorPolicy: input.fetchOptions.errorPolicy ?? "none"
        }
      }, fetchResponse = await createFetcher(config.method)(config);
      if (!fetchResponse.ok)
        return new ClientError({ status: fetchResponse.status, headers: fetchResponse.headers }, {
          query: input.request._tag === "Single" ? input.request.document.expression : input.request.query,
          variables: input.request.variables
        });
      let result = await parseResultFromResponse(fetchResponse, input.fetchOptions.jsonSerializer ?? defaultJsonSerializer);
      if (result instanceof Error)
        throw result;
      let clientResponseBase = {
        status: fetchResponse.status,
        headers: fetchResponse.headers
      };
      if (isRequestResultHaveErrors(result) && config.fetchOptions.errorPolicy === "none") {
        let clientResponse = result._tag === "Batch" ? { ...result.executionResults, ...clientResponseBase } : {
          ...result.executionResult,
          ...clientResponseBase
        };
        return new ClientError(clientResponse, {
          query: input.request._tag === "Single" ? input.request.document.expression : input.request.query,
          variables: input.request.variables
        });
      }
      switch (result._tag) {
        case "Single":
          return {
            ...clientResponseBase,
            ...executionResultClientResponseFields(config)(result.executionResult)
          };
        case "Batch":
          return {
            ...clientResponseBase,
            data: result.executionResults.map(executionResultClientResponseFields(config))
          };
        default:
          casesExhausted(result);
      }
    }, executionResultClientResponseFields = ($params) => (executionResult) => ({
      extensions: executionResult.extensions,
      data: executionResult.data,
      errors: $params.fetchOptions.errorPolicy === "all" ? executionResult.errors : void 0
    }), parseResultFromResponse = async (response, jsonSerializer) => {
      let contentType = response.headers.get(CONTENT_TYPE_HEADER), text = await response.text();
      return contentType && isGraphQLContentType(contentType) ? parseGraphQLExecutionResult(jsonSerializer.parse(text)) : parseGraphQLExecutionResult(text);
    }, createFetcher = (method) => async (params) => {
      let headers = new Headers(params.headers), searchParams = null, body;
      headers.has(ACCEPT_HEADER) || headers.set(ACCEPT_HEADER, [CONTENT_TYPE_GQL, CONTENT_TYPE_JSON].join(", ")), method === "POST" ? (body = (params.fetchOptions.jsonSerializer ?? defaultJsonSerializer).stringify(buildBody(params)), typeof body == "string" && !headers.has(CONTENT_TYPE_HEADER) && headers.set(CONTENT_TYPE_HEADER, CONTENT_TYPE_JSON)) : searchParams = buildQueryParams(params);
      let init = { method, headers, body, ...params.fetchOptions }, url = new URL(params.url), initResolved = init;
      if (params.middleware) {
        let result = await Promise.resolve(params.middleware({
          ...init,
          url: params.url,
          operationName: params.request._tag === "Single" ? params.request.document.operationName : void 0,
          variables: params.request.variables
        })), { url: urlNew, ...initNew } = result;
        url = new URL(urlNew), initResolved = initNew;
      }
      return searchParams && searchParams.forEach((value, name) => {
        url.searchParams.append(name, value);
      }), await (params.fetch ?? fetch)(url, initResolved);
    }, buildBody = (params) => {
      switch (params.request._tag) {
        case "Single":
          return {
            query: params.request.document.expression,
            variables: params.request.variables,
            operationName: params.request.document.operationName
          };
        case "Batch":
          return zip(params.request.query, params.request.variables ?? []).map(([query, variables]) => ({
            query,
            variables
          }));
        default:
          throw casesExhausted(params.request);
      }
    }, buildQueryParams = (params) => {
      let $jsonSerializer = params.fetchOptions.jsonSerializer ?? defaultJsonSerializer, searchParams = new URLSearchParams();
      switch (params.request._tag) {
        case "Single":
          return searchParams.append("query", cleanQuery(params.request.document.expression)), params.request.variables && searchParams.append("variables", $jsonSerializer.stringify(params.request.variables)), params.request.document.operationName && searchParams.append("operationName", params.request.document.operationName), searchParams;
        case "Batch": {
          let variablesSerialized = params.request.variables?.map((v) => $jsonSerializer.stringify(v)) ?? [], queriesCleaned = params.request.query.map(cleanQuery), payload = zip(queriesCleaned, variablesSerialized).map(([query, variables]) => ({
            query,
            variables
          }));
          return searchParams.append("query", $jsonSerializer.stringify(payload)), searchParams;
        }
        default:
          throw casesExhausted(params.request);
      }
    };
  }
});

// node_modules/graphql-request/build/legacy/classes/GraphQLClient.js
var GraphQLClient, init_GraphQLClient = __esm({
  "node_modules/graphql-request/build/legacy/classes/GraphQLClient.js"() {
    init_prelude();
    init_batchRequests();
    init_rawRequest();
    init_request();
    init_analyzeDocument();
    init_runRequest();
    GraphQLClient = class {
      url;
      requestConfig;
      constructor(url, requestConfig = {}) {
        this.url = url, this.requestConfig = requestConfig;
      }
      /**
       * Send a GraphQL query to the server.
       */
      rawRequest = async (...args) => {
        let [queryOrOptions, variables, requestHeaders] = args, rawRequestOptions = parseRawRequestArgs(queryOrOptions, variables, requestHeaders), { headers, fetch: fetch2 = globalThis.fetch, method = "POST", requestMiddleware, responseMiddleware, excludeOperationName, ...fetchOptions } = this.requestConfig, { url } = this;
        rawRequestOptions.signal !== void 0 && (fetchOptions.signal = rawRequestOptions.signal);
        let document2 = analyzeDocument(rawRequestOptions.query, excludeOperationName), response = await runRequest({
          url,
          request: {
            _tag: "Single",
            document: document2,
            variables: rawRequestOptions.variables
          },
          headers: {
            ...HeadersInitToPlainObject(callOrIdentity(headers)),
            ...HeadersInitToPlainObject(rawRequestOptions.requestHeaders)
          },
          fetch: fetch2,
          method,
          fetchOptions,
          middleware: requestMiddleware
        });
        if (responseMiddleware && await responseMiddleware(response, {
          operationName: document2.operationName,
          variables,
          url: this.url
        }), response instanceof Error)
          throw response;
        return response;
      };
      async request(documentOrOptions, ...variablesAndRequestHeaders) {
        let [variables, requestHeaders] = variablesAndRequestHeaders, requestOptions = parseRequestArgs(documentOrOptions, variables, requestHeaders), { headers, fetch: fetch2 = globalThis.fetch, method = "POST", requestMiddleware, responseMiddleware, excludeOperationName, ...fetchOptions } = this.requestConfig, { url } = this;
        requestOptions.signal !== void 0 && (fetchOptions.signal = requestOptions.signal);
        let analyzedDocument = analyzeDocument(requestOptions.document, excludeOperationName), response = await runRequest({
          url,
          request: {
            _tag: "Single",
            document: analyzedDocument,
            variables: requestOptions.variables
          },
          headers: {
            ...HeadersInitToPlainObject(callOrIdentity(headers)),
            ...HeadersInitToPlainObject(requestOptions.requestHeaders)
          },
          fetch: fetch2,
          method,
          fetchOptions,
          middleware: requestMiddleware
        });
        if (responseMiddleware && await responseMiddleware(response, {
          operationName: analyzedDocument.operationName,
          variables: requestOptions.variables,
          url: this.url
        }), response instanceof Error)
          throw response;
        return response.data;
      }
      async batchRequests(documentsOrOptions, requestHeaders) {
        let batchRequestOptions = parseBatchRequestArgs(documentsOrOptions, requestHeaders), { headers, excludeOperationName, ...fetchOptions } = this.requestConfig;
        batchRequestOptions.signal !== void 0 && (fetchOptions.signal = batchRequestOptions.signal);
        let analyzedDocuments = batchRequestOptions.documents.map(({ document: document2 }) => analyzeDocument(document2, excludeOperationName)), expressions = analyzedDocuments.map(({ expression }) => expression), hasMutations = analyzedDocuments.some(({ isMutation }) => isMutation), variables = batchRequestOptions.documents.map(({ variables: variables2 }) => variables2), response = await runRequest({
          url: this.url,
          request: {
            _tag: "Batch",
            operationName: void 0,
            query: expressions,
            hasMutations,
            variables
          },
          headers: {
            ...HeadersInitToPlainObject(callOrIdentity(headers)),
            ...HeadersInitToPlainObject(batchRequestOptions.requestHeaders)
          },
          fetch: this.requestConfig.fetch ?? globalThis.fetch,
          method: this.requestConfig.method || "POST",
          fetchOptions,
          middleware: this.requestConfig.requestMiddleware
        });
        if (this.requestConfig.responseMiddleware && await this.requestConfig.responseMiddleware(response, {
          operationName: void 0,
          variables,
          url: this.url
        }), response instanceof Error)
          throw response;
        return response.data;
      }
      setHeaders(headers) {
        return this.requestConfig.headers = headers, this;
      }
      /**
       * Attach a header to the client. All subsequent requests will have this header.
       */
      setHeader(key, value) {
        let { headers } = this.requestConfig;
        return headers ? headers[key] = value : this.requestConfig.headers = { [key]: value }, this;
      }
      /**
       * Change the client endpoint. All subsequent requests will send to this endpoint.
       */
      setEndpoint(value) {
        return this.url = value, this;
      }
    };
  }
});

// node_modules/graphql-request/build/legacy/functions/request.js
async function request(urlOrOptions, document2, ...variablesAndRequestHeaders) {
  let requestOptions = parseRequestExtendedArgs(urlOrOptions, document2, ...variablesAndRequestHeaders);
  return new GraphQLClient(requestOptions.url).request({
    ...requestOptions
  });
}
var parseRequestArgs, parseRequestExtendedArgs, init_request = __esm({
  "node_modules/graphql-request/build/legacy/functions/request.js"() {
    init_GraphQLClient();
    parseRequestArgs = (documentOrOptions, variables, requestHeaders) => documentOrOptions.document ? documentOrOptions : {
      document: documentOrOptions,
      variables,
      requestHeaders,
      signal: void 0
    }, parseRequestExtendedArgs = (urlOrOptions, document2, ...variablesAndRequestHeaders) => {
      let [variables, requestHeaders] = variablesAndRequestHeaders;
      return typeof urlOrOptions == "string" ? {
        url: urlOrOptions,
        document: document2,
        variables,
        requestHeaders,
        signal: void 0
      } : urlOrOptions;
    };
  }
});

// node_modules/graphql-request/build/legacy/functions/gql.js
var gql, init_gql = __esm({
  "node_modules/graphql-request/build/legacy/functions/gql.js"() {
    gql = (chunks, ...variables) => chunks.reduce((acc, chunk, index) => `${acc}${chunk}${index in variables ? String(variables[index]) : ""}`, "");
  }
});

// node_modules/graphql-request/build/entrypoints/main.js
var main_exports = {};
__export(main_exports, {
  ClientError: () => ClientError,
  GraphQLClient: () => GraphQLClient,
  analyzeDocument: () => analyzeDocument,
  batchRequests: () => batchRequests,
  default: () => main_default,
  gql: () => gql,
  rawRequest: () => rawRequest,
  request: () => request
});
var main_default, init_main = __esm({
  "node_modules/graphql-request/build/entrypoints/main.js"() {
    init_ClientError();
    init_request();
    init_GraphQLClient();
    init_batchRequests();
    init_gql();
    init_rawRequest();
    init_analyzeDocument();
    main_default = request;
  }
});

// app/utils/shopifySync.ts
var shopifySync_exports = {};
__export(shopifySync_exports, {
  ShopifySyncService: () => ShopifySyncService
});
var PRODUCTS_QUERY, ShopifySyncService, init_shopifySync = __esm({
  "app/utils/shopifySync.ts"() {
    "use strict";
    init_db();
    PRODUCTS_QUERY = `
  query getProducts($first: Int!, $after: String) {
    products(first: $first, after: $after) {
      pageInfo {
        hasNextPage
        endCursor
      }
      edges {
        node {
          id
          title
          description
          handle
          productType
          vendor
          tags
          variants(first: 100) {
            edges {
              node {
                id
                title
                price
                compareAtPrice
                sku
                inventoryQuantity
                availableForSale
              }
            }
          }
          metafields(first: 100) {
            edges {
              node {
                id
                namespace
                key
                value
                type
              }
            }
          }
          images(first: 10) {
            edges {
              node {
                id
                url
                altText
              }
            }
          }
        }
      }
    }
  }
`, ShopifySyncService = class {
      client;
      // Will be set dynamically
      shopDomain;
      accessToken;
      constructor(shopDomain, accessToken) {
        console.log("\u{1F527} ShopifySyncService constructor [v2]:", {
          shopDomain,
          accessTokenLength: accessToken?.length || 0,
          accessTokenPrefix: accessToken?.substring(0, 10) + "...",
          endpoint: `https://${shopDomain}/admin/api/2025-10/graphql`
        }), this.shopDomain = shopDomain, this.accessToken = accessToken, this.testAccessToken(shopDomain, accessToken);
      }
      async initializeClient() {
        if (!this.client) {
          let { GraphQLClient: GraphQLClient2 } = await Promise.resolve().then(() => (init_main(), main_exports));
          this.client = new GraphQLClient2(
            `https://${this.shopDomain}/admin/api/2025-10/graphql`,
            {
              headers: {
                "X-Shopify-Access-Token": this.accessToken,
                "Content-Type": "application/json"
              }
            }
          );
        }
        return this.client;
      }
      async testAccessToken(shopDomain, accessToken) {
        try {
          console.log("\u{1F9EA} Testing access token with REST API...");
          let response = await fetch(`https://${shopDomain}/admin/api/2025-10/shop.json`, {
            headers: {
              "X-Shopify-Access-Token": accessToken,
              "Content-Type": "application/json"
            }
          });
          if (console.log("\u{1F9EA} REST API test response:", {
            status: response.status,
            statusText: response.statusText,
            ok: response.ok
          }), response.ok) {
            let data = await response.json();
            console.log("\u2705 Access token is valid, shop name:", data.shop?.name);
          } else
            console.log("\u274C Access token test failed:", response.status, response.statusText);
        } catch (error) {
          console.log("\u274C Access token test error:", error);
        }
      }
      async syncProducts(userId) {
        let client = await this.initializeClient(), allProducts = [], hasNextPage = !0, after, pageCount = 0;
        console.log("\u{1F504} Starting product sync for user:", userId);
        try {
          for (; hasNextPage; ) {
            pageCount++, console.log(`\u{1F4C4} Fetching page ${pageCount}${after ? ` (after: ${after.substring(0, 20)}...)` : " (first page)"}`);
            let startTime = Date.now(), response = await client.request(PRODUCTS_QUERY, {
              first: 250,
              after
            }), fetchTime = Date.now() - startTime;
            console.log(`\u23F1\uFE0F  Page ${pageCount} fetched in ${fetchTime}ms`), console.log(`\u{1F4E6} Products in this page: ${response.products.edges.length}`);
            let products = response.products.edges.map((edge) => ({
              id: edge.node.id.replace("gid://shopify/Product/", ""),
              title: edge.node.title,
              description: edge.node.description || "",
              handle: edge.node.handle,
              productType: edge.node.productType || "",
              vendor: edge.node.vendor || "",
              tags: edge.node.tags || [],
              variants: edge.node.variants.edges.map((v) => ({
                id: v.node.id.replace("gid://shopify/ProductVariant/", ""),
                title: v.node.title,
                price: v.node.price,
                compareAtPrice: v.node.compareAtPrice,
                sku: v.node.sku,
                inventoryQuantity: v.node.inventoryQuantity,
                availableForSale: v.node.availableForSale
              })),
              metafields: edge.node.metafields.edges.map((m) => ({
                id: m.node.id.replace("gid://shopify/Metafield/", ""),
                namespace: m.node.namespace,
                key: m.node.key,
                value: m.node.value,
                type: m.node.type
              })),
              images: edge.node.images.edges.map((i) => ({
                id: i.node.id.replace("gid://shopify/MediaImage/", ""),
                url: i.node.url,
                altText: i.node.altText
              }))
            }));
            allProducts.push(...products), console.log(`\u{1F4CA} Total products so far: ${allProducts.length}`), hasNextPage = response.products.pageInfo.hasNextPage, after = response.products.pageInfo.endCursor, console.log(`\u{1F517} Has next page: ${hasNextPage}`), hasNextPage && (console.log("\u23F3 Waiting 500ms before next request..."), await new Promise((resolve) => setTimeout(resolve, 500)));
          }
          return console.log(`\u2705 Sync complete! Total products: ${allProducts.length}`), await db.log.create({
            data: {
              userId,
              type: "sync",
              message: `Synchronized ${allProducts.length} products from Shopify`,
              metadata: {
                productsCount: allProducts.length,
                timestamp: (/* @__PURE__ */ new Date()).toISOString()
              }
            }
          }), allProducts;
        } catch (error) {
          throw console.error("\u274C Sync failed:", error), console.error("\u274C Error details:", {
            message: error instanceof Error ? error.message : "Unknown error",
            stack: error instanceof Error ? error.stack : String(error),
            pageCount,
            totalProducts: allProducts.length
          }), await db.log.create({
            data: {
              userId,
              type: "error",
              message: `Failed to sync products: ${error instanceof Error ? error.message : "Unknown error"}`,
              error: error instanceof Error ? error.stack : String(error),
              metadata: {
                timestamp: (/* @__PURE__ */ new Date()).toISOString(),
                pageCount,
                totalProducts: allProducts.length
              }
            }
          }), error;
        }
      }
      async getInventoryLevels(shopDomain, accessToken) {
        try {
          let response = await fetch(
            `https://${shopDomain}/admin/api/2025-10/inventory_levels.json`,
            {
              headers: {
                "X-Shopify-Access-Token": accessToken,
                "Content-Type": "application/json"
              }
            }
          );
          if (!response.ok)
            throw new Error(`HTTP error! status: ${response.status}`);
          return (await response.json()).inventory_levels || [];
        } catch (error) {
          throw console.error("Error fetching inventory levels:", error), error;
        }
      }
      async getRecentOrders(shopDomain, accessToken, limit = 50) {
        try {
          let response = await fetch(
            `https://${shopDomain}/admin/api/2025-10/orders.json?limit=${limit}&status=any`,
            {
              headers: {
                "X-Shopify-Access-Token": accessToken,
                "Content-Type": "application/json"
              }
            }
          );
          if (!response.ok)
            throw new Error(`HTTP error! status: ${response.status}`);
          return (await response.json()).orders || [];
        } catch (error) {
          throw console.error("Error fetching orders:", error), error;
        }
      }
    };
  }
});

// app/utils/fieldMapper.ts
var fieldMapper_exports = {};
__export(fieldMapper_exports, {
  calculateProductScore: () => calculateProductScore,
  mapProductsToSpec: () => mapProductsToSpec,
  mapShopifyToSpec: () => mapShopifyToSpec
});
function mapShopifyToSpec(product) {
  let spec = {
    // Core required fields - map directly from Shopify
    title: product.title || "",
    description: product.description || "",
    price: product.variants[0]?.price ? `${product.variants[0].price} USD` : "0.00 USD",
    availability: getAvailabilityStatus(product.variants),
    category: product.productType || "Uncategorized",
    // Physical attributes - from metafields or inference
    material: getMetafieldValue(product.metafields, "material") || inferMaterial(product.title, product.description),
    weight: getMetafieldValue(product.metafields, "weight"),
    color: getMetafieldValue(product.metafields, "color") || inferColor(product.title, product.description),
    size: getMetafieldValue(product.metafields, "size"),
    // Identification fields
    brand: product.vendor || getMetafieldValue(product.metafields, "brand"),
    model: getMetafieldValue(product.metafields, "model"),
    sku: product.variants[0]?.sku,
    upc: getMetafieldValue(product.metafields, "upc") || getMetafieldValue(product.metafields, "barcode"),
    // Usage and context
    use_cases: getMetafieldArray(product.metafields, "use_cases") || inferUseCases(product.title, product.description),
    target_audience: getMetafieldValue(product.metafields, "target_audience"),
    age_range: getMetafieldValue(product.metafields, "age_range"),
    gender: getMetafieldValue(product.metafields, "gender"),
    // Technical specifications
    features: getMetafieldArray(product.metafields, "features") || inferFeatures(product.description),
    compatibility: getMetafieldArray(product.metafields, "compatibility"),
    // SEO and search
    keywords: product.tags || [],
    tags: product.tags || [],
    // Media
    image_urls: product.images.map((img) => img.url),
    video_urls: getMetafieldArray(product.metafields, "video_urls") || getMetafieldArray(product.metafields, "videos"),
    documentation_url: getMetafieldValue(product.metafields, "documentation_url") || getMetafieldValue(product.metafields, "manual_url"),
    // Business information
    vendor: product.vendor,
    warranty: getMetafieldValue(product.metafields, "warranty"),
    return_policy: getMetafieldValue(product.metafields, "return_policy"),
    shipping_info: getMetafieldValue(product.metafields, "shipping_info"),
    // AI-specific fields
    ai_search_queries: getMetafieldArray(product.metafields, "ai_search_queries"),
    semantic_description: getMetafieldValue(product.metafields, "semantic_description")
  }, dimensions = getDimensionsFromMetafields(product.metafields);
  dimensions && (spec.dimensions = dimensions);
  let specifications = getSpecificationsFromMetafields(product.metafields);
  return specifications && Object.keys(specifications).length > 0 && (spec.specifications = specifications), spec;
}
function getAvailabilityStatus(variants) {
  if (variants.length === 0)
    return "out_of_stock";
  let hasAvailable = variants.some((v) => v.availableForSale && (v.inventoryQuantity || 0) > 0), hasInventory = variants.some((v) => (v.inventoryQuantity || 0) > 0);
  return hasAvailable ? "in_stock" : hasInventory && !hasAvailable ? "pre_order" : "out_of_stock";
}
function getMetafieldValue(metafields, key) {
  let metafield = metafields.find(
    (m) => m.namespace === "catalogai" && (m.key === key || m.key.toLowerCase().includes(key.toLowerCase()))
  );
  return metafield || (metafield = metafields.find(
    (m) => m.key === key || m.key.toLowerCase().includes(key.toLowerCase())
  )), metafield?.value;
}
function getMetafieldArray(metafields, key) {
  let value = getMetafieldValue(metafields, key);
  if (value)
    try {
      let parsed = JSON.parse(value);
      if (Array.isArray(parsed))
        return parsed.filter((item) => typeof item == "string");
    } catch {
      return value.includes(`
-`) || value.startsWith("-") ? value.split(`
`).map((line) => line.replace(/^[-•*]\s*/, "").trim()).filter(Boolean) : value.split(/[,;|]/).map((item) => item.trim()).filter(Boolean);
    }
}
function getDimensionsFromMetafields(metafields) {
  let length = getMetafieldValue(metafields, "length"), width = getMetafieldValue(metafields, "width"), height = getMetafieldValue(metafields, "height");
  return !length && !width && !height ? null : {
    ...length && { length },
    ...width && { width },
    ...height && { height }
  };
}
function getSpecificationsFromMetafields(metafields) {
  let specs = {}, specMetafields = metafields.filter(
    (m) => m.namespace === "specifications" || m.namespace === "specs"
  );
  for (let metafield of specMetafields)
    specs[metafield.key] = metafield.value;
  return Object.keys(specs).length > 0 ? specs : null;
}
function inferMaterial(title, description) {
  let materialKeywords = [
    "cotton",
    "polyester",
    "leather",
    "metal",
    "wood",
    "plastic",
    "glass",
    "ceramic",
    "fabric",
    "denim",
    "silk",
    "wool",
    "bamboo",
    "steel",
    "aluminum",
    "bronze",
    "silver",
    "gold",
    "rubber",
    "silicone"
  ], text = `${title} ${description}`.toLowerCase();
  for (let material of materialKeywords)
    if (text.includes(material))
      return material.charAt(0).toUpperCase() + material.slice(1);
}
function inferColor(title, description) {
  let colorKeywords = [
    "red",
    "blue",
    "green",
    "yellow",
    "black",
    "white",
    "gray",
    "grey",
    "pink",
    "purple",
    "orange",
    "brown",
    "beige",
    "navy",
    "maroon"
  ], text = `${title} ${description}`.toLowerCase();
  for (let color of colorKeywords)
    if (text.includes(color))
      return color.charAt(0).toUpperCase() + color.slice(1);
}
function inferUseCases(title, description) {
  let useCaseKeywords = [
    "home",
    "office",
    "kitchen",
    "bedroom",
    "bathroom",
    "garden",
    "outdoor",
    "travel",
    "sports",
    "fitness",
    "workout",
    "cooking",
    "cleaning",
    "decorative",
    "functional",
    "storage",
    "organization"
  ], text = `${title} ${description}`.toLowerCase(), foundUseCases = [];
  for (let useCase of useCaseKeywords)
    text.includes(useCase) && foundUseCases.push(useCase.charAt(0).toUpperCase() + useCase.slice(1));
  return foundUseCases;
}
function inferFeatures(description) {
  let featureKeywords = [
    "waterproof",
    "durable",
    "lightweight",
    "compact",
    "portable",
    "adjustable",
    "reversible",
    "washable",
    "dishwasher safe",
    "battery powered",
    "cordless",
    "wireless",
    "bluetooth",
    "stainless steel",
    "non-stick",
    "heat resistant"
  ], text = description.toLowerCase(), foundFeatures = [];
  for (let feature of featureKeywords)
    text.includes(feature) && foundFeatures.push(feature.charAt(0).toUpperCase() + feature.slice(1));
  return foundFeatures;
}
function calculateProductScore(spec) {
  let gaps = [], recommendations2 = [], totalWeight = 0, weightedScore = 0, totalPoints = 0, maxPossiblePoints = 0, fieldProgress = {}, categoryProgress = {
    required: { completed: 0, total: 0, points: 0 },
    high: { completed: 0, total: 0, points: 0 },
    medium: { completed: 0, total: 0, points: 0 },
    low: { completed: 0, total: 0, points: 0 }
  }, hasValue = (value) => value != null && (typeof value != "string" || value.trim() !== "") && (!Array.isArray(value) || value.length > 0) && (typeof value != "object" || Object.keys(value).length > 0);
  [
    { name: "required", fields: FIELD_WEIGHTS.required, points: FIELD_POINTS.required },
    { name: "high", fields: FIELD_WEIGHTS.high, points: FIELD_POINTS.high },
    { name: "medium", fields: FIELD_WEIGHTS.medium, points: FIELD_POINTS.medium },
    { name: "low", fields: FIELD_WEIGHTS.low, points: FIELD_POINTS.low }
  ].forEach(({ name, fields, points }) => {
    categoryProgress[name].total = Object.keys(fields).length;
    for (let [field, weight] of Object.entries(fields)) {
      totalWeight += weight, maxPossiblePoints += points[field];
      let value = spec[field], completed = hasValue(value);
      fieldProgress[field] = {
        completed,
        category: name,
        points: points[field],
        weight
      }, completed ? (weightedScore += weight, totalPoints += points[field], categoryProgress[name].completed++, categoryProgress[name].points += points[field]) : (gaps.push(field), name === "high" && recommendations2.push(`Add ${field} to improve product discoverability`));
    }
  });
  let score = totalWeight > 0 ? Math.round(weightedScore / totalWeight * 100) : 0, totalFields = Object.keys(fieldProgress).length, completedFields = Object.values(fieldProgress).filter((f) => f.completed).length, completeness = totalFields > 0 ? Math.round(completedFields / totalFields * 100) : 0;
  return {
    score,
    completeness,
    gaps,
    recommendations: recommendations2,
    points: totalPoints,
    maxPoints: maxPossiblePoints,
    fieldProgress,
    categoryProgress
  };
}
function mapProductsToSpec(products) {
  return products.map((product) => {
    let spec = mapShopifyToSpec(product), score = calculateProductScore(spec);
    return {
      ...spec,
      originalId: product.id,
      score
    };
  });
}
var init_fieldMapper = __esm({
  "app/utils/fieldMapper.ts"() {
    "use strict";
    init_openaiSpec();
  }
});

// app/utils/aiClient.ts
var import_openai, openai, AIClient, init_aiClient = __esm({
  "app/utils/aiClient.ts"() {
    "use strict";
    import_openai = __toESM(require("openai"));
    init_db();
    openai = new import_openai.default({
      apiKey: process.env.OPENAI_API_KEY
    }), AIClient = class {
      async trackUsage(userId, usage) {
        try {
          await db.user.update({
            where: { id: userId },
            data: {
              aiUsage: {
                increment: usage.totalTokens
              }
            }
          });
        } catch (error) {
          console.error("Failed to track AI usage:", error);
        }
      }
      async enrichDescription(userId, title, currentDescription, category, material) {
        let prompt = `You are an expert product copywriter specializing in e-commerce optimization for AI search systems. 

Your task is to enrich the following product description to make it more comprehensive, SEO-friendly, and optimized for AI search queries. The description should be between 400-4000 characters and written in plain text (no HTML).

Product Information:
- Title: ${title}
- Category: ${category || "Not specified"}
- Material: ${material || "Not specified"}
- Current Description: ${currentDescription}

Requirements:
1. Expand the description with specific details about features, benefits, and use cases
2. Include relevant keywords that customers might search for
3. Add information about dimensions, weight, or other specifications if relevant
4. Mention target audience and ideal use cases
5. Use descriptive, engaging language that highlights product value
6. Ensure the description flows naturally and is easy to read
7. Do not include HTML tags or special formatting
8. Focus on factual, helpful information that aids in product discovery

Return only the enriched description text.`;
        try {
          let response = await openai.chat.completions.create({
            model: "gpt-3.5-turbo",
            messages: [
              {
                role: "system",
                content: "You are a professional product copywriter who creates detailed, SEO-optimized product descriptions for e-commerce platforms."
              },
              {
                role: "user",
                content: prompt
              }
            ],
            max_tokens: 1e3,
            temperature: 0.7
          }), enriched = response.choices[0]?.message?.content || currentDescription, usage = {
            promptTokens: response.usage?.prompt_tokens || 0,
            completionTokens: response.usage?.completion_tokens || 0,
            totalTokens: response.usage?.total_tokens || 0
          };
          return await this.trackUsage(userId, usage), { enriched, usage };
        } catch (error) {
          throw console.error("OpenAI API error:", error), new Error(`Failed to enrich description: ${error instanceof Error ? error.message : "Unknown error"}`);
        }
      }
      async inferMaterial(userId, title, description, category) {
        let prompt = `Based on the following product information, determine the most likely primary material composition. Return only the material name.

Product Information:
- Title: ${title}
- Category: ${category || "Not specified"}
- Description: ${description}

Common materials include: cotton, polyester, leather, metal, wood, plastic, glass, ceramic, fabric, denim, silk, wool, bamboo, steel, aluminum, bronze, silver, gold, rubber, silicone, etc.

If the material is unclear, return "Unknown". Return only the material name, nothing else.`;
        try {
          let response = await openai.chat.completions.create({
            model: "gpt-3.5-turbo",
            messages: [
              {
                role: "system",
                content: "You are a product analyst who identifies material composition from product descriptions."
              },
              {
                role: "user",
                content: prompt
              }
            ],
            max_tokens: 50,
            temperature: 0.3
          }), material = response.choices[0]?.message?.content?.trim() || "Unknown", usage = {
            promptTokens: response.usage?.prompt_tokens || 0,
            completionTokens: response.usage?.completion_tokens || 0,
            totalTokens: response.usage?.total_tokens || 0
          };
          return await this.trackUsage(userId, usage), { material, usage };
        } catch (error) {
          throw console.error("OpenAI API error:", error), new Error(`Failed to infer material: ${error instanceof Error ? error.message : "Unknown error"}`);
        }
      }
      async generateUseCases(userId, title, description, category) {
        let prompt = `Based on the following product information, generate 3-5 specific use cases or applications for this product. Return the use cases as a JSON array of strings.

Product Information:
- Title: ${title}
- Category: ${category || "Not specified"}
- Description: ${description}

Focus on practical, specific use cases that would help customers understand how to use this product. Examples might include specific activities, environments, or situations where the product would be useful.

Return only a JSON array like: ["Use case 1", "Use case 2", "Use case 3"]`;
        try {
          let response = await openai.chat.completions.create({
            model: "gpt-3.5-turbo",
            messages: [
              {
                role: "system",
                content: "You are a product analyst who identifies practical use cases for products."
              },
              {
                role: "user",
                content: prompt
              }
            ],
            max_tokens: 200,
            temperature: 0.7
          }), content = response.choices[0]?.message?.content || "[]", useCases = [];
          try {
            useCases = JSON.parse(content), Array.isArray(useCases) || (useCases = []);
          } catch {
            useCases = [];
          }
          let usage = {
            promptTokens: response.usage?.prompt_tokens || 0,
            completionTokens: response.usage?.completion_tokens || 0,
            totalTokens: response.usage?.total_tokens || 0
          };
          return await this.trackUsage(userId, usage), { useCases, usage };
        } catch (error) {
          throw console.error("OpenAI API error:", error), new Error(`Failed to generate use cases: ${error instanceof Error ? error.message : "Unknown error"}`);
        }
      }
      async generateFeatures(userId, title, description, category) {
        let prompt = `Based on the following product information, extract and generate 3-6 key features or characteristics of this product. Return the features as a JSON array of strings.

Product Information:
- Title: ${title}
- Category: ${category || "Not specified"}
- Description: ${description}

Focus on specific, factual features that highlight the product's benefits or characteristics. These should be features that customers would care about when making a purchase decision.

Return only a JSON array like: ["Feature 1", "Feature 2", "Feature 3"]`;
        try {
          let response = await openai.chat.completions.create({
            model: "gpt-3.5-turbo",
            messages: [
              {
                role: "system",
                content: "You are a product analyst who extracts key features from product descriptions."
              },
              {
                role: "user",
                content: prompt
              }
            ],
            max_tokens: 200,
            temperature: 0.5
          }), content = response.choices[0]?.message?.content || "[]", features = [];
          try {
            features = JSON.parse(content), Array.isArray(features) || (features = []);
          } catch {
            features = [];
          }
          let usage = {
            promptTokens: response.usage?.prompt_tokens || 0,
            completionTokens: response.usage?.completion_tokens || 0,
            totalTokens: response.usage?.total_tokens || 0
          };
          return await this.trackUsage(userId, usage), { features, usage };
        } catch (error) {
          throw console.error("OpenAI API error:", error), new Error(`Failed to generate features: ${error instanceof Error ? error.message : "Unknown error"}`);
        }
      }
      async generateKeywords(userId, title, description, category) {
        let prompt = `Based on the following product information, generate 5-10 relevant SEO keywords that customers might use to search for this product. Return the keywords as a JSON array of strings.

Product Information:
- Title: ${title}
- Category: ${category || "Not specified"}
- Description: ${description}

Focus on keywords that are:
1. Relevant to the product
2. Commonly used in search queries
3. Specific enough to be meaningful
4. Broad enough to capture search volume

Include a mix of short-tail and long-tail keywords.

Return only a JSON array like: ["keyword 1", "keyword 2", "keyword 3"]`;
        try {
          let response = await openai.chat.completions.create({
            model: "gpt-3.5-turbo",
            messages: [
              {
                role: "system",
                content: "You are an SEO specialist who generates relevant keywords for product optimization."
              },
              {
                role: "user",
                content: prompt
              }
            ],
            max_tokens: 200,
            temperature: 0.6
          }), content = response.choices[0]?.message?.content || "[]", keywords = [];
          try {
            keywords = JSON.parse(content), Array.isArray(keywords) || (keywords = []);
          } catch {
            keywords = [];
          }
          let usage = {
            promptTokens: response.usage?.prompt_tokens || 0,
            completionTokens: response.usage?.completion_tokens || 0,
            totalTokens: response.usage?.total_tokens || 0
          };
          return await this.trackUsage(userId, usage), { keywords, usage };
        } catch (error) {
          throw console.error("OpenAI API error:", error), new Error(`Failed to generate keywords: ${error instanceof Error ? error.message : "Unknown error"}`);
        }
      }
      async generateText(prompt, maxTokens = 100) {
        try {
          return ((await openai.chat.completions.create({
            model: "gpt-3.5-turbo",
            messages: [
              {
                role: "user",
                content: prompt
              }
            ],
            max_tokens: maxTokens,
            temperature: 0.7
          })).choices[0]?.message?.content || "").trim();
        } catch (error) {
          throw console.error("OpenAI API error:", error), new Error(`Failed to generate text: ${error instanceof Error ? error.message : "Unknown error"}`);
        }
      }
    };
  }
});

// app/utils/aiEnrich.ts
var aiEnrich_exports = {};
__export(aiEnrich_exports, {
  AIEnrichmentService: () => AIEnrichmentService
});
var AIEnrichmentService, init_aiEnrich = __esm({
  "app/utils/aiEnrich.ts"() {
    "use strict";
    init_aiClient();
    init_db();
    AIEnrichmentService = class {
      aiClient;
      constructor() {
        this.aiClient = new AIClient();
      }
      async enrichProduct(userId, product, gaps = []) {
        let improvements = [], errors = [], totalUsage = 0, baseSpec = {
          title: product.title || "",
          description: product.description || "",
          price: product.variants[0]?.price ? `${product.variants[0].price} USD` : "0.00 USD",
          availability: this.getAvailabilityStatus(product.variants),
          category: product.productType || "Uncategorized",
          sku: product.variants[0]?.sku,
          image_urls: product.images.map((img) => img.url),
          vendor: product.vendor
        };
        console.log("\u{1F3AF} Enriching product for gaps:", gaps);
        for (let gap of gaps)
          try {
            let result = await this.generateRecommendationForGap(gap, baseSpec, userId);
            result && (improvements.push(result), totalUsage += result.newValue?.length || 0);
          } catch (error) {
            errors.push(`Failed to generate recommendation for ${gap}: ${error instanceof Error ? error.message : "Unknown error"}`);
          }
        return {
          originalProduct: product,
          enrichedSpec: baseSpec,
          improvements,
          totalUsage,
          errors
        };
      }
      async generateRecommendationForGap(gap, baseSpec, userId) {
        if ([
          "material",
          "dimensions",
          "weight",
          "color",
          "size",
          "model",
          "brand",
          "vendor",
          "upc",
          "age_range",
          "gender",
          "compatibility",
          "specifications",
          "video_urls",
          "documentation_url",
          "return_policy",
          "shipping_info"
        ].includes(gap))
          return {
            field: gap,
            originalValue: baseSpec[gap] || null,
            newValue: "Need Customer Input",
            improvement: "This field requires actual product specifications from the brand/manufacturer"
          };
        let mapping = {
          description: {
            prompt: `Given the product title "${baseSpec.title}", generate a comprehensive and engaging product description. Highlight its key features, benefits, and target audience. Aim for a length of at least 200 words. Current description: "${baseSpec.description || "No description"}"`,
            maxTokens: 500,
            reason: "Generated comprehensive product description"
          },
          use_cases: {
            prompt: `Given the product title "${baseSpec.title}" and description "${baseSpec.description}", generate a comma-separated list of 3-5 practical use cases or scenarios where this product would be ideal. Focus on how a customer would use it.`,
            maxTokens: 100,
            reason: "Generated practical use cases"
          },
          features: {
            prompt: `Given the product title "${baseSpec.title}" and description "${baseSpec.description}", generate a bulleted list of 3-5 key features of the product. Focus on unique selling points and technical specifications.`,
            maxTokens: 150,
            reason: "Generated key product features"
          },
          keywords: {
            prompt: `Given the product title "${baseSpec.title}" and description "${baseSpec.description}", generate a comma-separated list of relevant keywords for SEO and search. Focus on terms a customer would use to find this product. Do not include the product title itself as a keyword.`,
            maxTokens: 100,
            reason: "Generated SEO keywords"
          },
          target_audience: {
            prompt: `Given the product title "${baseSpec.title}" and description "${baseSpec.description}", suggest the primary target audience for this product (e.g., 'Beginner snowboarders', 'Professional athletes', 'Casual users').`,
            maxTokens: 50,
            reason: "Suggested target audience"
          },
          sku: {
            prompt: `Given the product title "${baseSpec.title}", description "${baseSpec.description}", and current SKU "${baseSpec.sku || "N/A"}", suggest a concise SKU for the product if it's missing or generic. If a good SKU exists, state 'N/A'.`,
            maxTokens: 20,
            reason: "Suggested concise SKU"
          },
          tags: {
            prompt: `Given the product title "${baseSpec.title}" and description "${baseSpec.description}", generate a comma-separated list of relevant tags for product categorization and search. Focus on broad categories and attributes.`,
            maxTokens: 100,
            reason: "Generated relevant tags"
          },
          warranty: {
            prompt: `Given the product title "${baseSpec.title}" and description "${baseSpec.description}", suggest typical warranty information for this type of product (e.g., '1-year limited warranty', 'Manufacturer warranty applies').`,
            maxTokens: 50,
            reason: "Suggested warranty information"
          },
          ai_search_queries: {
            prompt: `Given the product title "${baseSpec.title}" and description "${baseSpec.description}", generate 5-7 example search queries that customers might use to find this product when using AI search or voice search. Focus on natural language queries.`,
            maxTokens: 150,
            reason: "Generated AI search query examples"
          },
          semantic_description: {
            prompt: `Given the product title "${baseSpec.title}" and description "${baseSpec.description}", create a concise semantic description optimized for AI understanding. Focus on key attributes, use cases, and context in 2-3 sentences.`,
            maxTokens: 150,
            reason: "Generated AI-optimized semantic description"
          },
          image_urls: {
            prompt: "Note: Image URLs cannot be generated by AI. This field requires actual product images to be uploaded to Shopify.",
            maxTokens: 10,
            reason: "Images require manual upload"
          }
        }[gap];
        if (!mapping)
          return console.log(`\u26A0\uFE0F No mapping found for gap: ${gap}`), null;
        try {
          let aiResponse = await this.aiClient.generateText(mapping.prompt, mapping.maxTokens);
          if (console.log(`\u{1F916} AI Response for ${gap}:`, aiResponse), aiResponse && aiResponse.trim() !== "" && !aiResponse.toLowerCase().includes("error") && aiResponse.trim().toLowerCase() !== "n/a")
            return {
              field: gap,
              originalValue: baseSpec[gap] || null,
              newValue: aiResponse,
              improvement: mapping.reason
            };
          console.log(`\u26A0\uFE0F Skipping ${gap}: Response was empty, N/A, or contained error`);
        } catch (error) {
          console.error(`Error generating recommendation for ${gap}:`, error);
        }
        return null;
      }
      async enrichProducts(userId, products, options = {}) {
        let results = [];
        for (let product of products)
          try {
            let { mapShopifyToSpec: mapShopifyToSpec2, calculateProductScore: calculateProductScore2 } = await Promise.resolve().then(() => (init_fieldMapper(), fieldMapper_exports)), spec = mapShopifyToSpec2(product), gaps = calculateProductScore2(spec).gaps;
            console.log(`\u{1F3AF} Enriching product ${product.title} with gaps:`, gaps);
            let result = await this.enrichProduct(userId, product, gaps);
            results.push(result);
          } catch (error) {
            console.error(`Failed to enrich product ${product.title}:`, error), results.push({
              originalProduct: product,
              enrichedSpec: {},
              improvements: [],
              totalUsage: 0,
              errors: [`Failed to enrich product: ${error instanceof Error ? error.message : "Unknown error"}`]
            });
          }
        return results;
      }
      async applyEnrichmentToShopify(userId, shopDomain, accessToken, enrichmentResult) {
        try {
          console.log("\u{1F504} Applying enrichment to Shopify with improvements:", enrichmentResult.improvements.length);
          for (let improvement of enrichmentResult.improvements) {
            let { field, newValue } = improvement;
            if (console.log(`\u{1F4DD} Applying ${field}: ${newValue}`), field === "description")
              await this.updateProductDescription(
                shopDomain,
                accessToken,
                enrichmentResult.originalProduct.id,
                newValue
              ), console.log("\u2705 Updated product description");
            else {
              let metafieldType = this.getMetafieldType(field, newValue), metafieldValue = this.formatMetafieldValue(field, newValue);
              console.log("\u{1F4DD} Creating metafield:", {
                namespace: "catalogai",
                key: field,
                type: metafieldType,
                originalValue: newValue,
                formattedValue: metafieldValue,
                valueType: typeof newValue
              }), await this.createProductMetafield(
                shopDomain,
                accessToken,
                enrichmentResult.originalProduct.id,
                {
                  namespace: "catalogai",
                  key: field,
                  value: metafieldValue,
                  type: metafieldType
                }
              ), console.log(`\u2705 Updated metafield: catalogai.${field}`);
            }
          }
          return await db.log.create({
            data: {
              userId,
              type: "enrichment",
              message: `Applied AI enrichment to product: ${enrichmentResult.originalProduct.title}`,
              metadata: {
                productId: enrichmentResult.originalProduct.id,
                improvements: enrichmentResult.improvements.length,
                usage: enrichmentResult.totalUsage,
                timestamp: (/* @__PURE__ */ new Date()).toISOString()
              }
            }
          }), !0;
        } catch (error) {
          return console.error("Failed to apply enrichment to Shopify:", error), await db.log.create({
            data: {
              userId,
              type: "error",
              message: `Failed to apply enrichment to Shopify: ${error instanceof Error ? error.message : "Unknown error"}`,
              error: error instanceof Error ? error.stack : String(error),
              metadata: {
                productId: enrichmentResult.originalProduct.id,
                timestamp: (/* @__PURE__ */ new Date()).toISOString()
              }
            }
          }), !1;
        }
      }
      getMetafieldType(field, value) {
        return field === "dimensions" || ["use_cases", "features", "keywords", "ai_search_queries"].includes(field) ? "json" : ["weight", "price"].includes(field) ? "number_decimal" : (field === "availability", "single_line_text_field");
      }
      formatMetafieldValue(field, value) {
        if (typeof value == "object" || Array.isArray(value))
          return JSON.stringify(value);
        if (["use_cases", "features", "keywords", "ai_search_queries", "tags"].includes(field)) {
          let stringValue = String(value);
          if (stringValue.includes(`
-`) || stringValue.startsWith("-")) {
            let items = stringValue.split(`
`).map((line) => line.replace(/^[-•*]\s*/, "").trim()).filter(Boolean);
            return JSON.stringify(items);
          }
          if (stringValue.includes(",")) {
            let items = stringValue.split(",").map((item) => item.trim()).filter(Boolean);
            return JSON.stringify(items);
          }
          return JSON.stringify([stringValue]);
        }
        return String(value);
      }
      getAvailabilityStatus(variants) {
        if (variants.length === 0)
          return "out_of_stock";
        let hasAvailable = variants.some((v) => v.availableForSale && (v.inventoryQuantity || 0) > 0), hasInventory = variants.some((v) => (v.inventoryQuantity || 0) > 0);
        return hasAvailable ? "in_stock" : hasInventory && !hasAvailable ? "pre_order" : "out_of_stock";
      }
      getMetafieldValue(metafields, key) {
        return metafields.find(
          (m) => m.key === key || m.key.toLowerCase().includes(key.toLowerCase())
        )?.value;
      }
      getMetafieldArray(metafields, key) {
        let value = this.getMetafieldValue(metafields, key);
        if (value)
          try {
            let parsed = JSON.parse(value);
            if (Array.isArray(parsed))
              return parsed.filter((item) => typeof item == "string");
          } catch {
            return value.split(/[,;|]/).map((item) => item.trim()).filter(Boolean);
          }
      }
      async updateProductDescription(shopDomain, accessToken, productId, description) {
        let mutation = `
      mutation productUpdate($input: ProductInput!) {
        productUpdate(input: $input) {
          product {
            id
            title
            descriptionHtml
          }
          userErrors {
            field
            message
          }
        }
      }
    `, variables = {
          input: {
            id: `gid://shopify/Product/${productId}`,
            descriptionHtml: description
          }
        }, response = await fetch(`https://${shopDomain}/admin/api/2025-10/graphql`, {
          method: "POST",
          headers: {
            "X-Shopify-Access-Token": accessToken,
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            query: mutation,
            variables
          })
        });
        if (!response.ok)
          throw new Error(`Failed to update product description: ${response.status}`);
        let result = await response.json();
        if (result.errors)
          throw new Error(`GraphQL errors: ${JSON.stringify(result.errors)}`);
        if (result.data?.productUpdate?.userErrors?.length > 0)
          throw new Error(`Shopify validation errors: ${JSON.stringify(result.data.productUpdate.userErrors)}`);
      }
      async createProductMetafield(shopDomain, accessToken, productId, metafield) {
        let mutation = `
      mutation metafieldsSet($metafields: [MetafieldsSetInput!]!) {
        metafieldsSet(metafields: $metafields) {
          metafields {
            id
            namespace
            key
            value
          }
          userErrors {
            field
            message
          }
        }
      }
    `, variables = {
          metafields: [
            {
              ownerId: `gid://shopify/Product/${productId}`,
              namespace: metafield.namespace,
              key: metafield.key,
              value: metafield.value,
              type: metafield.type
            }
          ]
        }, response = await fetch(`https://${shopDomain}/admin/api/2025-10/graphql`, {
          method: "POST",
          headers: {
            "X-Shopify-Access-Token": accessToken,
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            query: mutation,
            variables
          })
        });
        if (!response.ok)
          throw new Error(`Failed to create metafield: ${response.status}`);
        let result = await response.json();
        if (result.errors)
          throw new Error(`GraphQL errors: ${JSON.stringify(result.errors)}`);
      }
    };
  }
});

// <stdin>
var stdin_exports = {};
__export(stdin_exports, {
  assets: () => assets_manifest_default,
  assetsBuildDirectory: () => assetsBuildDirectory,
  entry: () => entry,
  future: () => future,
  mode: () => mode,
  publicPath: () => publicPath,
  routes: () => routes
});
module.exports = __toCommonJS(stdin_exports);

// app/entry.server.tsx
var entry_server_exports = {};
__export(entry_server_exports, {
  default: () => handleRequest
});
var import_node_stream = require("node:stream"), import_node = require("@remix-run/node"), import_react = require("@remix-run/react"), import_isbot = require("isbot"), import_server = require("react-dom/server");

// app/utils/queue.ts
var import_bullmq = require("bullmq"), import_ioredis = require("ioredis");
init_db();

// app/utils/healthChecker.ts
init_db();

// app/utils/emailService.ts
init_db();
var _EmailService = class {
  isConfigured = !1;
  constructor() {
    this.isConfigured = !!(process.env.SMTP_HOST && process.env.SMTP_PORT && process.env.SMTP_USER && process.env.SMTP_PASS);
  }
  static getInstance() {
    return _EmailService.instance || (_EmailService.instance = new _EmailService()), _EmailService.instance;
  }
  async sendWeeklyHealthSummary(summary) {
    try {
      if (!this.isConfigured)
        return console.log("Email service not configured - logging summary instead"), await this.logSummary(summary), !0;
      let template = this.generateWeeklyHealthTemplate(summary), emailAddress = await this.getUserEmailAddress(summary.userId);
      return emailAddress ? (console.log("Would send email:", {
        to: emailAddress,
        subject: template.subject,
        html: template.html
      }), await db.log.create({
        data: {
          userId: summary.userId,
          type: "email_sent",
          message: `Weekly health summary sent to ${emailAddress}`,
          metadata: {
            subject: template.subject,
            currentScore: summary.currentScore,
            scoreChange: summary.scoreChange,
            issuesFound: summary.issuesFound,
            issuesFixed: summary.issuesFixed
          }
        }
      }), !0) : (console.log("No email address found for user - logging summary instead"), await this.logSummary(summary), !0);
    } catch (error) {
      return console.error("Failed to send weekly health summary:", error), await db.log.create({
        data: {
          userId: summary.userId,
          type: "error",
          message: `Failed to send weekly health summary: ${error instanceof Error ? error.message : "Unknown error"}`,
          error: error instanceof Error ? error.message : "Unknown error"
        }
      }), !1;
    }
  }
  async getUserEmailAddress(userId) {
    try {
      let user = await db.user.findUnique({
        where: { id: userId },
        select: { shopDomain: !0 }
      });
      return user ? `admin@${user.shopDomain.replace(".myshopify.com", "")}.myshopify.com` : null;
    } catch (error) {
      return console.error("Failed to get user email address:", error), null;
    }
  }
  generateWeeklyHealthTemplate(summary) {
    let scoreTrend = summary.scoreChange >= 0 ? "\u{1F4C8}" : "\u{1F4C9}", scoreColor = summary.scoreChange >= 0 ? "#00a047" : "#d82c0d", html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Weekly Health Summary - ${summary.shopDomain}</title>
        <style>
          body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 10px 10px 0 0; text-align: center; }
          .content { background: #fff; padding: 30px; border: 1px solid #e1e5e9; }
          .score-card { background: #f8f9fa; border-radius: 8px; padding: 20px; margin: 20px 0; text-align: center; }
          .score-number { font-size: 48px; font-weight: bold; color: ${scoreColor}; margin: 10px 0; }
          .trend { font-size: 18px; color: ${scoreColor}; }
          .stats { display: flex; justify-content: space-around; margin: 20px 0; }
          .stat { text-align: center; }
          .stat-number { font-size: 24px; font-weight: bold; color: #667eea; }
          .stat-label { color: #666; font-size: 14px; }
          .footer { background: #f8f9fa; padding: 20px; text-align: center; border-radius: 0 0 10px 10px; font-size: 14px; color: #666; }
          .cta-button { display: inline-block; background: #667eea; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 20px 0; }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>\u{1F3E5} Catalog Health Report</h1>
          <p>Weekly summary for ${summary.shopDomain}</p>
        </div>
        
        <div class="content">
          <div class="score-card">
            <div class="score-number">${summary.currentScore}%</div>
            <div class="trend">
              ${scoreTrend} ${summary.scoreChange >= 0 ? "+" : ""}${summary.scoreChange.toFixed(1)}% from last week
            </div>
            <p>Current Health Score</p>
          </div>
          
          <div class="stats">
            <div class="stat">
              <div class="stat-number">${summary.totalProducts}</div>
              <div class="stat-label">Total Products</div>
            </div>
            <div class="stat">
              <div class="stat-number">${summary.issuesFound}</div>
              <div class="stat-label">Issues Found</div>
            </div>
            <div class="stat">
              <div class="stat-number">${summary.issuesFixed}</div>
              <div class="stat-label">Issues Fixed</div>
            </div>
          </div>
          
          ${summary.currentScore < 90 ? `
            <div style="background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 6px; padding: 15px; margin: 20px 0;">
              <strong>\u26A0\uFE0F Attention Needed:</strong> Your catalog health is below 90%. Consider running a health check to identify and fix issues.
            </div>
          ` : `
            <div style="background: #d4edda; border: 1px solid #c3e6cb; border-radius: 6px; padding: 15px; margin: 20px 0;">
              <strong>\u2705 Great Job!</strong> Your catalog is in excellent health. Keep up the good work!
            </div>
          `}
          
          <div style="text-align: center; margin: 30px 0;">
            <a href="${process.env.SHOPIFY_APP_URL}/dashboard" class="cta-button">
              View Dashboard
            </a>
          </div>
        </div>
        
        <div class="footer">
          <p>This is an automated report from CatalogAI Optimizer.</p>
          <p>To adjust your email preferences, visit your dashboard settings.</p>
        </div>
      </body>
      </html>
    `, text = `
Catalog Health Report - ${summary.shopDomain}

Health Score: ${summary.currentScore}%
Trend: ${summary.scoreChange >= 0 ? "+" : ""}${summary.scoreChange.toFixed(1)}% from last week

Statistics:
- Total Products: ${summary.totalProducts}
- Issues Found: ${summary.issuesFound}
- Issues Fixed: ${summary.issuesFixed}

${summary.currentScore < 90 ? "\u26A0\uFE0F Your catalog health is below 90%. Consider running a health check to identify and fix issues." : "\u2705 Your catalog is in excellent health. Keep up the good work!"}

View your dashboard: ${process.env.SHOPIFY_APP_URL}/dashboard

---
This is an automated report from CatalogAI Optimizer.
To adjust your email preferences, visit your dashboard settings.
    `;
    return {
      subject: `\u{1F4CA} Weekly Health Report: ${summary.currentScore}% (${summary.scoreChange >= 0 ? "+" : ""}${summary.scoreChange.toFixed(1)}%)`,
      html,
      text
    };
  }
  async logSummary(summary) {
    await db.log.create({
      data: {
        userId: summary.userId,
        type: "email_summary",
        message: `Weekly health summary: ${summary.currentScore}% (${summary.scoreChange >= 0 ? "+" : ""}${summary.scoreChange.toFixed(1)}%) - ${summary.issuesFound} issues found, ${summary.issuesFixed} fixed`,
        metadata: {
          currentScore: summary.currentScore,
          previousScore: summary.previousScore,
          scoreChange: summary.scoreChange,
          totalProducts: summary.totalProducts,
          issuesFound: summary.issuesFound,
          issuesFixed: summary.issuesFixed
        }
      }
    });
  }
  async sendHealthAlert(userId, shopDomain, alertType, message) {
    try {
      if (!this.isConfigured)
        return console.log("Email service not configured - logging alert instead"), await this.logAlert(userId, alertType, message), !0;
      let emailAddress = await this.getUserEmailAddress(userId);
      if (!emailAddress)
        return console.log("No email address found for user - logging alert instead"), await this.logAlert(userId, alertType, message), !0;
      let template = this.generateHealthAlertTemplate(shopDomain, alertType, message);
      return console.log("Would send health alert:", {
        to: emailAddress,
        subject: template.subject,
        html: template.html
      }), await db.log.create({
        data: {
          userId,
          type: "health_alert",
          message: `Health alert sent: ${message}`,
          metadata: {
            alertType,
            message
          }
        }
      }), !0;
    } catch (error) {
      return console.error("Failed to send health alert:", error), !1;
    }
  }
  generateHealthAlertTemplate(shopDomain, alertType, message) {
    let isCritical = alertType === "critical", color = isCritical ? "#d82c0d" : "#f59e0b", icon = isCritical ? "\u{1F6A8}" : "\u26A0\uFE0F", html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Health Alert - ${shopDomain}</title>
        <style>
          body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background: ${color}; color: white; padding: 30px; border-radius: 10px 10px 0 0; text-align: center; }
          .content { background: #fff; padding: 30px; border: 1px solid #e1e5e9; }
          .alert-box { background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 6px; padding: 20px; margin: 20px 0; }
          .cta-button { display: inline-block; background: ${color}; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 20px 0; }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>${icon} Health Alert</h1>
          <p>${shopDomain}</p>
        </div>
        
        <div class="content">
          <div class="alert-box">
            <h3>${isCritical ? "Critical Issue Detected" : "Warning"}</h3>
            <p>${message}</p>
          </div>
          
          <div style="text-align: center; margin: 30px 0;">
            <a href="${process.env.SHOPIFY_APP_URL}/dashboard" class="cta-button">
              View Dashboard
            </a>
          </div>
        </div>
      </body>
      </html>
    `, text = `
${icon} Health Alert - ${shopDomain}

${isCritical ? "Critical Issue Detected" : "Warning"}

${message}

View your dashboard: ${process.env.SHOPIFY_APP_URL}/dashboard
    `;
    return {
      subject: `${icon} ${isCritical ? "Critical" : "Warning"}: ${shopDomain}`,
      html,
      text
    };
  }
  async logAlert(userId, alertType, message) {
    await db.log.create({
      data: {
        userId,
        type: "health_alert",
        message: `Health alert (${alertType}): ${message}`,
        metadata: {
          alertType,
          message
        }
      }
    });
  }
}, EmailService = _EmailService;
__publicField(EmailService, "instance");
var emailService = EmailService.getInstance();

// app/utils/analyticsService.ts
init_db();
var _AnalyticsService = class {
  static getInstance() {
    return _AnalyticsService.instance || (_AnalyticsService.instance = new _AnalyticsService()), _AnalyticsService.instance;
  }
  async trackPerformanceMetrics(metrics) {
    try {
      await db.log.create({
        data: {
          userId: metrics.userId,
          type: "performance_metrics",
          message: `Performance tracked: ${metrics.healthScore}% health, ${metrics.totalProducts} products, ${metrics.issuesFound} issues`,
          metadata: {
            healthScore: metrics.healthScore,
            totalProducts: metrics.totalProducts,
            validProducts: metrics.validProducts,
            issuesFound: metrics.issuesFound,
            issuesFixed: metrics.issuesFixed,
            aiUsage: metrics.aiUsage,
            syncCount: metrics.syncCount,
            enrichmentCount: metrics.enrichmentCount,
            timestamp: metrics.timestamp
          }
        }
      });
      let deltaMetrics = await this.calculateDeltaMetrics(metrics.userId, metrics.timestamp);
      deltaMetrics && await this.storeDeltaMetrics(metrics.userId, deltaMetrics);
      let roiMetrics = await this.calculateROIMetrics(metrics.userId, metrics.shopDomain);
      roiMetrics && await this.storeROIMetrics(roiMetrics);
    } catch (error) {
      console.error("Failed to track performance metrics:", error);
    }
  }
  async calculateDeltaMetrics(userId, currentTimestamp) {
    try {
      let hourAgo = new Date(currentTimestamp.getTime() - 36e5), dayAgo = new Date(currentTimestamp.getTime() - 24 * 60 * 60 * 1e3), weekAgo = new Date(currentTimestamp.getTime() - 7 * 24 * 60 * 60 * 1e3), currentMetrics = await this.getLatestMetrics(userId);
      if (!currentMetrics)
        return null;
      let previousMetrics = await this.getPreviousMetrics(userId, dayAgo);
      if (!previousMetrics)
        return null;
      let scoreDelta = currentMetrics.healthScore - previousMetrics.healthScore, productsDelta = currentMetrics.totalProducts - previousMetrics.totalProducts, issuesDelta = currentMetrics.issuesFound - previousMetrics.issuesFound, aiUsageDelta = currentMetrics.aiUsage - previousMetrics.aiUsage, syncDelta = currentMetrics.syncCount - previousMetrics.syncCount, enrichmentDelta = currentMetrics.enrichmentCount - previousMetrics.enrichmentCount;
      return {
        scoreDelta,
        productsDelta,
        issuesDelta,
        aiUsageDelta,
        syncDelta,
        enrichmentDelta,
        timePeriod: "day"
      };
    } catch (error) {
      return console.error("Failed to calculate delta metrics:", error), null;
    }
  }
  async getLatestMetrics(userId) {
    try {
      let latestAudit = await db.audit.findFirst({
        where: { userId },
        orderBy: { timestamp: "desc" }
      }), user = await db.user.findUnique({
        where: { id: userId }
      });
      if (!latestAudit || !user)
        return null;
      let oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1e3), syncCount = await db.log.count({
        where: {
          userId,
          type: "sync",
          createdAt: { gte: oneDayAgo }
        }
      }), enrichmentCount = await db.log.count({
        where: {
          userId,
          type: "ai_enrichment",
          createdAt: { gte: oneDayAgo }
        }
      });
      return {
        userId,
        shopDomain: user.shopDomain,
        timestamp: latestAudit.timestamp,
        healthScore: latestAudit.score,
        totalProducts: latestAudit.totalProducts,
        validProducts: latestAudit.validProducts,
        issuesFound: Array.isArray(latestAudit.gaps) ? latestAudit.gaps.length : 0,
        issuesFixed: 0,
        // Will be calculated separately
        aiUsage: user.aiUsage,
        syncCount,
        enrichmentCount
      };
    } catch (error) {
      return console.error("Failed to get latest metrics:", error), null;
    }
  }
  async getPreviousMetrics(userId, fromDate) {
    try {
      let audit = await db.audit.findFirst({
        where: {
          userId,
          timestamp: { gte: fromDate }
        },
        orderBy: { timestamp: "asc" }
      }), user = await db.user.findUnique({
        where: { id: userId }
      });
      return !audit || !user ? null : {
        userId,
        shopDomain: user.shopDomain,
        timestamp: audit.timestamp,
        healthScore: audit.score,
        totalProducts: audit.totalProducts,
        validProducts: audit.validProducts,
        issuesFound: Array.isArray(audit.gaps) ? audit.gaps.length : 0,
        issuesFixed: 0,
        aiUsage: user.aiUsage,
        syncCount: 0,
        enrichmentCount: 0
      };
    } catch (error) {
      return console.error("Failed to get previous metrics:", error), null;
    }
  }
  async storeDeltaMetrics(userId, deltaMetrics) {
    try {
      await db.log.create({
        data: {
          userId,
          type: "delta_metrics",
          message: `Delta metrics: ${deltaMetrics.scoreDelta >= 0 ? "+" : ""}${deltaMetrics.scoreDelta.toFixed(1)}% score, ${deltaMetrics.productsDelta >= 0 ? "+" : ""}${deltaMetrics.productsDelta} products`,
          metadata: {
            scoreDelta: deltaMetrics.scoreDelta,
            productsDelta: deltaMetrics.productsDelta,
            issuesDelta: deltaMetrics.issuesDelta,
            aiUsageDelta: deltaMetrics.aiUsageDelta,
            syncDelta: deltaMetrics.syncCount,
            enrichmentDelta: deltaMetrics.enrichmentDelta,
            timePeriod: deltaMetrics.timePeriod
          }
        }
      });
    } catch (error) {
      console.error("Failed to store delta metrics:", error);
    }
  }
  async calculateROIMetrics(userId, shopDomain) {
    try {
      let oneWeekAgo = new Date(Date.now() - 6048e5), audits = await db.audit.findMany({
        where: {
          userId,
          timestamp: { gte: oneWeekAgo }
        },
        orderBy: { timestamp: "asc" }
      });
      if (audits.length < 2)
        return null;
      let firstAudit = audits[0], lastAudit = audits[audits.length - 1], user = await db.user.findUnique({
        where: { id: userId }
      });
      if (!user)
        return null;
      let aiTokensUsed = user.aiUsage, healthScoreImprovement = lastAudit.score - firstAudit.score, productsProcessed = lastAudit.totalProducts, estimatedValueAdded = healthScoreImprovement * productsProcessed * 0.1, tokenCost = aiTokensUsed * 1e-4, costPerImprovement = tokenCost / Math.max(healthScoreImprovement, 1), roi = estimatedValueAdded / Math.max(tokenCost, 1);
      return {
        userId,
        shopDomain,
        timePeriod: "week",
        healthScoreImprovement,
        productsProcessed,
        aiTokensUsed,
        estimatedValueAdded,
        costPerImprovement,
        roi
      };
    } catch (error) {
      return console.error("Failed to calculate ROI metrics:", error), null;
    }
  }
  async storeROIMetrics(roiMetrics) {
    try {
      await db.log.create({
        data: {
          userId: roiMetrics.userId,
          type: "roi_metrics",
          message: `ROI: ${roiMetrics.roi.toFixed(2)}x return, $${roiMetrics.estimatedValueAdded.toFixed(2)} value added`,
          metadata: {
            healthScoreImprovement: roiMetrics.healthScoreImprovement,
            productsProcessed: roiMetrics.productsProcessed,
            aiTokensUsed: roiMetrics.aiTokensUsed,
            estimatedValueAdded: roiMetrics.estimatedValueAdded,
            costPerImprovement: roiMetrics.costPerImprovement,
            roi: roiMetrics.roi,
            timePeriod: roiMetrics.timePeriod
          }
        }
      });
    } catch (error) {
      console.error("Failed to store ROI metrics:", error);
    }
  }
  async getPerformanceTrends(userId, days = 30) {
    try {
      let startDate = new Date(Date.now() - days * 24 * 60 * 60 * 1e3), audits = await db.audit.findMany({
        where: {
          userId,
          timestamp: { gte: startDate }
        },
        orderBy: { timestamp: "asc" }
      }), user = await db.user.findUnique({
        where: { id: userId }
      });
      return audits.map((audit) => ({
        date: audit.timestamp.toISOString().split("T")[0],
        healthScore: audit.score,
        totalProducts: audit.totalProducts,
        issuesFound: Array.isArray(audit.gaps) ? audit.gaps.length : 0,
        aiUsage: user?.aiUsage || 0
      }));
    } catch (error) {
      return console.error("Failed to get performance trends:", error), [];
    }
  }
  async getROISummary(userId) {
    try {
      let roiLogs = await db.log.findMany({
        where: {
          userId,
          type: "roi_metrics"
        },
        orderBy: { createdAt: "desc" },
        take: 10
      });
      if (roiLogs.length === 0)
        return null;
      let totalValueAdded = 0, totalCost = 0, totalROI = 0;
      for (let log of roiLogs) {
        let metadata = log.metadata;
        metadata && (totalValueAdded += metadata.estimatedValueAdded || 0, totalCost += (metadata.aiTokensUsed || 0) * 1e-4, totalROI += metadata.roi || 0);
      }
      return {
        totalROI,
        totalValueAdded,
        totalCost,
        averageROI: totalROI / roiLogs.length
      };
    } catch (error) {
      return console.error("Failed to get ROI summary:", error), null;
    }
  }
}, AnalyticsService = _AnalyticsService;
__publicField(AnalyticsService, "instance");
var analyticsService = AnalyticsService.getInstance();

// app/utils/healthChecker.ts
var import_ajv = __toESM(require("ajv")), import_ajv_formats = __toESM(require("ajv-formats")), import_axios = __toESM(require("axios")), ajv = new import_ajv.default();
(0, import_ajv_formats.default)(ajv);
var HealthCheckerService = class {
  shopDomain;
  accessToken;
  constructor(shopDomain, accessToken) {
    this.shopDomain = shopDomain, this.accessToken = accessToken;
  }
  async performHealthCheck(options = {}) {
    let {
      maxProducts = 100,
      includePings = !0,
      includeInventory = !0,
      includeValidation = !0
    } = options;
    try {
      let user = await db.user.findUnique({
        where: { shopId: this.shopDomain }
      });
      if (!user)
        throw new Error("User not found");
      let thirtyDaysAgo = /* @__PURE__ */ new Date();
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
      let products = await db.product.findMany({
        where: {
          userId: user.id,
          updatedAt: {
            gte: thirtyDaysAgo
          }
        },
        take: maxProducts,
        orderBy: {
          updatedAt: "desc"
        }
      }), gaps = [], validProducts = 0;
      if (includeValidation) {
        let validationResults = await this.validateProducts(products);
        gaps.push(...validationResults.gaps), validProducts = validationResults.validCount;
      }
      if (includePings) {
        let pingResults = await this.checkProductUrls(products.slice(0, 20));
        gaps.push(...pingResults);
      }
      if (includeInventory) {
        let inventoryResults = await this.checkInventoryDeltas(products);
        gaps.push(...inventoryResults);
      }
      let score = this.calculateHealthScore(products.length, validProducts, gaps), trends = await this.getHealthTrends(user.id, 7);
      await db.audit.create({
        data: {
          userId: user.id,
          score,
          totalProducts: products.length,
          validProducts,
          gaps,
          // Store as JSON
          timestamp: /* @__PURE__ */ new Date()
        }
      });
      let performanceMetrics = {
        userId: user.id,
        shopDomain: this.shopDomain,
        timestamp: /* @__PURE__ */ new Date(),
        healthScore: score,
        totalProducts: products.length,
        validProducts,
        issuesFound: gaps.length,
        issuesFixed: 0,
        // Will be updated after auto-fix
        aiUsage: user.aiUsage,
        syncCount: 0,
        // Will be calculated separately
        enrichmentCount: 0
        // Will be calculated separately
      };
      return await analyticsService.trackPerformanceMetrics(performanceMetrics), {
        score,
        totalProducts: products.length,
        validProducts,
        gaps,
        trends,
        timestamp: /* @__PURE__ */ new Date()
      };
    } catch (error) {
      throw console.error("Health check failed:", error), new Error(`Health check failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  async validateProducts(products) {
    let gaps = [], validCount = 0, requiredFields = [
      "title",
      "description",
      "vendor",
      "productType",
      "tags",
      "images",
      "variants",
      "options",
      "status"
    ], fieldCounts = {}, missingFieldProducts = {};
    for (let product of products) {
      let isValid = !0;
      for (let field of requiredFields)
        (!product[field] || Array.isArray(product[field]) && product[field].length === 0 || typeof product[field] == "string" && product[field].trim() === "") && (fieldCounts[field] = (fieldCounts[field] || 0) + 1, missingFieldProducts[field] = missingFieldProducts[field] || [], missingFieldProducts[field].push(product.id), isValid = !1);
      isValid && validCount++;
    }
    for (let [field, count] of Object.entries(fieldCounts))
      if (count > 0) {
        let severity = count > products.length * 0.5 ? "critical" : count > products.length * 0.2 ? "error" : "warning";
        gaps.push({
          field,
          severity,
          count,
          products: missingFieldProducts[field],
          fixable: ["title", "description", "tags"].includes(field)
        });
      }
    return { gaps, validCount };
  }
  async checkProductUrls(products) {
    let gaps = [], failedUrls = [];
    for (let product of products)
      if (product.handle)
        try {
          let url = `https://${this.shopDomain}/products/${product.handle}`;
          (await import_axios.default.get(url, {
            timeout: 5e3,
            validateStatus: (status) => status < 500
            // Accept redirects and client errors
          })).status >= 400 && failedUrls.push(product.id);
        } catch {
          failedUrls.push(product.id);
        }
    return failedUrls.length > 0 && gaps.push({
      field: "product_url",
      severity: failedUrls.length > products.length * 0.3 ? "error" : "warning",
      count: failedUrls.length,
      products: failedUrls,
      fixable: !1
    }), gaps;
  }
  async checkInventoryDeltas(products) {
    let gaps = [], lowInventory = [], outOfStock = [];
    for (let product of products)
      if (product.variants && Array.isArray(product.variants))
        for (let variant of product.variants)
          variant.inventoryQuantity !== void 0 && (variant.inventoryQuantity === 0 ? outOfStock.push(variant.id) : variant.inventoryQuantity < 5 && lowInventory.push(variant.id));
    return outOfStock.length > 0 && gaps.push({
      field: "inventory_out_of_stock",
      severity: "error",
      count: outOfStock.length,
      products: outOfStock,
      fixable: !1
    }), lowInventory.length > 0 && gaps.push({
      field: "inventory_low",
      severity: "warning",
      count: lowInventory.length,
      products: lowInventory,
      fixable: !1
    }), gaps;
  }
  calculateHealthScore(totalProducts, validProducts, gaps) {
    if (totalProducts === 0)
      return 100;
    let score = validProducts / totalProducts * 100;
    for (let gap of gaps) {
      let penalty = gap.severity === "critical" ? 5 : gap.severity === "error" ? 3 : 1;
      score -= Math.min(penalty * (gap.count / totalProducts), 10);
    }
    return Math.max(0, Math.round(score));
  }
  async getHealthTrends(userId, days) {
    let startDate = /* @__PURE__ */ new Date();
    return startDate.setDate(startDate.getDate() - days), (await db.audit.findMany({
      where: {
        userId,
        timestamp: {
          gte: startDate
        }
      },
      orderBy: {
        timestamp: "asc"
      }
    })).map((audit) => ({
      date: audit.timestamp.toISOString().split("T")[0],
      score: audit.score,
      totalProducts: audit.totalProducts,
      validProducts: audit.validProducts
    }));
  }
  async autoFixGaps(gaps) {
    let fixed = 0, failed = 0;
    for (let gap of gaps)
      if (gap.fixable)
        try {
          console.log(`Auto-fixing gap: ${gap.field} for ${gap.count} products`), fixed++;
        } catch (error) {
          console.error(`Failed to fix gap ${gap.field}:`, error), failed++;
        }
    return { fixed, failed };
  }
  async sendWeeklyHealthSummary(userId) {
    try {
      let fourteenDaysAgo = /* @__PURE__ */ new Date();
      fourteenDaysAgo.setDate(fourteenDaysAgo.getDate() - 14);
      let audits = await db.audit.findMany({
        where: {
          userId,
          timestamp: {
            gte: fourteenDaysAgo
          }
        },
        orderBy: {
          timestamp: "desc"
        }
      });
      if (audits.length === 0)
        return console.log("No audit data available for weekly summary"), !1;
      let currentAudit = audits[0], previousAudit = audits[audits.length - 1] || currentAudit, oneWeekAgo = /* @__PURE__ */ new Date();
      oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
      let fixedIssues = await db.log.count({
        where: {
          userId,
          type: "auto_fix",
          createdAt: {
            gte: oneWeekAgo
          }
        }
      }), summary = {
        userId,
        shopDomain: this.shopDomain,
        currentScore: currentAudit.score,
        previousScore: previousAudit.score,
        scoreChange: currentAudit.score - previousAudit.score,
        totalProducts: currentAudit.totalProducts,
        issuesFound: Array.isArray(currentAudit.gaps) ? currentAudit.gaps.length : 0,
        issuesFixed: fixedIssues,
        trendData: audits.slice(0, 7).map((audit) => ({
          date: audit.timestamp.toISOString().split("T")[0],
          score: audit.score
        }))
      };
      return await emailService.sendWeeklyHealthSummary(summary);
    } catch (error) {
      return console.error("Failed to send weekly health summary:", error), !1;
    }
  }
  async sendHealthAlert(userId, alertType, message) {
    return await emailService.sendHealthAlert(userId, this.shopDomain, alertType, message);
  }
};

// app/utils/queue.ts
var redis = null;
try {
  console.log("Checking Redis configuration:", {
    redisHost: process.env.REDIS_HOST,
    redisPort: process.env.REDIS_PORT,
    hasRedisPassword: !!process.env.REDIS_PASSWORD,
    allEnvVars: Object.keys(process.env).filter((key) => key.startsWith("REDIS"))
  }), process.env.REDIS_URL ? (console.log("Attempting Redis connection using REDIS_URL:", process.env.REDIS_URL.replace(/\/\/default:[^@]+@/, "//default:***@")), redis = new import_ioredis.Redis(process.env.REDIS_URL, {
    maxRetriesPerRequest: null,
    // Required by BullMQ for blocking operations
    connectTimeout: 5e3,
    // 5 second timeout
    lazyConnect: !0,
    // Don't connect immediately
    db: 0
    // Force database 0 (default)
  })) : process.env.REDIS_HOST && process.env.REDIS_PASSWORD ? (console.log("Attempting Redis connection to:", process.env.REDIS_HOST), redis = new import_ioredis.Redis({
    host: process.env.REDIS_HOST,
    port: parseInt(process.env.REDIS_PORT || "6379"),
    password: process.env.REDIS_PASSWORD,
    maxRetriesPerRequest: null,
    // Required by BullMQ for blocking operations
    connectTimeout: 5e3,
    // 5 second timeout
    lazyConnect: !0,
    // Don't connect immediately
    db: 0
    // Force database 0 (default)
  })) : console.log("Redis not configured - skipping connection"), redis && redis.connect().then(() => {
    console.log("\u2705 Redis connected successfully");
  }).catch((error) => {
    console.error("\u274C Redis connection failed:", error.message), redis = null;
  });
} catch (error) {
  console.error("Failed to initialize Redis connection:", error), redis = null;
}
var bullmqQueueConnection = null, bullmqWorkerConnection = null, bullmqEventsConnection = null;
if (redis)
  try {
    let connectionConfig = null;
    if (process.env.REDIS_URL) {
      let cleanRedisUrl = process.env.REDIS_URL.replace(/['"]+$/, "");
      console.log("Cleaned REDIS_URL:", cleanRedisUrl.replace(/\/\/default:[^@]+@/, "//default:***@"));
      let url = new URL(cleanRedisUrl);
      connectionConfig = {
        host: url.hostname,
        port: parseInt(url.port) || 6379,
        password: url.password,
        db: 0,
        // Explicitly force database 0
        maxRetriesPerRequest: null,
        retryDelayOnFailover: 100,
        connectTimeout: 5e3,
        lazyConnect: !0,
        enableAutoPipelining: !1
      };
    } else
      process.env.REDIS_HOST && process.env.REDIS_PASSWORD && (connectionConfig = {
        host: process.env.REDIS_HOST,
        port: parseInt(process.env.REDIS_PORT || "6379"),
        password: process.env.REDIS_PASSWORD,
        db: 0,
        // Explicitly force database 0
        maxRetriesPerRequest: null,
        retryDelayOnFailover: 100,
        connectTimeout: 5e3,
        lazyConnect: !0,
        enableAutoPipelining: !1
      });
    connectionConfig && (bullmqQueueConnection = new import_ioredis.Redis(connectionConfig), bullmqWorkerConnection = new import_ioredis.Redis(connectionConfig), bullmqEventsConnection = new import_ioredis.Redis(connectionConfig), bullmqQueueConnection.on("connect", () => {
      console.log("BullMQ Queue Redis connected to database:", bullmqQueueConnection?.options.db);
    }), bullmqWorkerConnection.on("connect", () => {
      console.log("BullMQ Worker Redis connected to database:", bullmqWorkerConnection?.options.db);
    }), bullmqEventsConnection.on("connect", () => {
      console.log("BullMQ Events Redis connected to database:", bullmqEventsConnection?.options.db);
    }), console.log("BullMQ Redis connections created with database 0"));
  } catch (error) {
    console.error("Failed to create BullMQ Redis connections:", error), bullmqQueueConnection = null, bullmqWorkerConnection = null, bullmqEventsConnection = null;
  }
var healthCheckQueue = bullmqQueueConnection ? new import_bullmq.Queue("health-checks", {
  connection: bullmqQueueConnection,
  defaultJobOptions: {
    removeOnComplete: 10,
    removeOnFail: 5,
    attempts: 3,
    backoff: {
      type: "exponential",
      delay: 2e3
    }
  }
}) : null, backgroundJobsQueue = bullmqQueueConnection ? new import_bullmq.Queue("background-jobs", {
  connection: bullmqQueueConnection,
  defaultJobOptions: {
    removeOnComplete: 50,
    removeOnFail: 10,
    attempts: 2,
    backoff: {
      type: "exponential",
      delay: 5e3
    }
  }
}) : null, queueEvents = bullmqEventsConnection ? new import_bullmq.QueueEvents("health-checks", { connection: bullmqEventsConnection }) : null, healthCheckWorker = bullmqWorkerConnection ? new import_bullmq.Worker(
  "health-checks",
  async (job) => {
    let { type, data } = job.data;
    switch (type) {
      case "url-ping":
        return await performUrlPing(data);
      case "inventory-validation":
        return await performInventoryValidation(data);
      case "database-health":
        return await performDatabaseHealthCheck(data);
      case "api-status":
        return await performApiStatusCheck(data);
      case "health-scan":
        return await performHealthScan(data);
      default:
        throw new Error(`Unknown health check type: ${type}`);
    }
  },
  {
    connection: bullmqWorkerConnection,
    concurrency: 5
  }
) : null, backgroundJobsWorker = bullmqWorkerConnection ? new import_bullmq.Worker(
  "background-jobs",
  async (job) => {
    let { type, data } = job.data;
    switch (type) {
      case "sync-products":
        return await performProductSync(data);
      case "ai-enrichment":
        return await performAIEnrichment(data);
      case "cleanup-logs":
        return await performLogCleanup(data);
      case "weekly-email-summary":
        return await performWeeklyEmailSummary(data);
      default:
        throw new Error(`Unknown background job type: ${type}`);
    }
  },
  {
    connection: bullmqWorkerConnection,
    concurrency: 3
  }
) : null;
async function performUrlPing(data) {
  try {
    let response = await fetch(data.url, {
      method: "HEAD",
      signal: AbortSignal.timeout(data.timeout || 5e3)
    });
    return {
      success: response.ok,
      status: response.status,
      responseTime: Date.now(),
      url: data.url
    };
  } catch (error) {
    return {
      success: !1,
      error: error instanceof Error ? error.message : "Unknown error",
      url: data.url
    };
  }
}
async function performInventoryValidation(data) {
  try {
    let user = await db.user.findUnique({
      where: { shopId: data.shopId },
      include: {
        audits: {
          orderBy: { timestamp: "desc" },
          take: 1
        }
      }
    });
    if (!user)
      return {
        success: !1,
        error: "User not found",
        shopId: data.shopId
      };
    let latestAudit = user.audits[0];
    return {
      success: !0,
      hasRecentSync: latestAudit && Date.now() - new Date(latestAudit.timestamp).getTime() < 24 * 60 * 60 * 1e3,
      totalProducts: latestAudit?.totalProducts || 0,
      lastSync: latestAudit?.timestamp || null,
      shopId: data.shopId
    };
  } catch (error) {
    return {
      success: !1,
      error: error instanceof Error ? error.message : "Database error",
      shopId: data.shopId
    };
  }
}
async function performDatabaseHealthCheck(data) {
  try {
    return await db.$queryRaw`SELECT 1`, {
      success: !0,
      userCount: await db.user.count(),
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    };
  } catch (error) {
    return {
      success: !1,
      error: error instanceof Error ? error.message : "Database connection failed"
    };
  }
}
async function performApiStatusCheck(data) {
  try {
    return {
      success: !0,
      shopId: data.shopId,
      apiVersion: "2025-10",
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    };
  } catch (error) {
    return {
      success: !1,
      error: error instanceof Error ? error.message : "API check failed",
      shopId: data.shopId
    };
  }
}
async function performProductSync(data) {
  try {
    return await db.log.create({
      data: {
        userId: data.userId,
        type: "sync",
        message: `Product sync initiated for shop ${data.shopId}`
      }
    }), {
      success: !0,
      shopId: data.shopId,
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    };
  } catch (error) {
    return {
      success: !1,
      error: error instanceof Error ? error.message : "Sync failed",
      shopId: data.shopId
    };
  }
}
async function performAIEnrichment(data) {
  try {
    return await db.log.create({
      data: {
        userId: data.userId,
        type: "ai_enrichment",
        message: `AI enrichment initiated for ${data.productIds.length} products`
      }
    }), {
      success: !0,
      shopId: data.shopId,
      productCount: data.productIds.length,
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    };
  } catch (error) {
    return {
      success: !1,
      error: error instanceof Error ? error.message : "AI enrichment failed",
      shopId: data.shopId
    };
  }
}
async function performLogCleanup(data) {
  try {
    let daysToKeep = data.daysToKeep || 30, cutoffDate = /* @__PURE__ */ new Date();
    return cutoffDate.setDate(cutoffDate.getDate() - daysToKeep), {
      success: !0,
      deletedCount: (await db.log.deleteMany({
        where: {
          createdAt: {
            lt: cutoffDate
          }
        }
      })).count,
      cutoffDate: cutoffDate.toISOString()
    };
  } catch (error) {
    return {
      success: !1,
      error: error instanceof Error ? error.message : "Log cleanup failed"
    };
  }
}
async function performHealthScan(data) {
  try {
    let user = await db.user.findUnique({
      where: { shopId: data.shopId }
    });
    if (!user)
      throw new Error("User not found");
    let healthChecker = new HealthCheckerService(data.shopId, user.accessToken), result = await healthChecker.performHealthCheck(data.options || {
      maxProducts: 100,
      includePings: !0,
      includeInventory: !0,
      includeValidation: !0
    });
    if (await db.log.create({
      data: {
        userId: data.userId,
        type: "health_scan",
        message: `Health scan completed: ${result.score}% score, ${result.gaps.length} gaps found`,
        metadata: {
          score: result.score,
          totalProducts: result.totalProducts,
          validProducts: result.validProducts,
          gapsCount: result.gaps.length
        }
      }
    }), result.score < 90 && result.gaps.length > 0) {
      let fixableGaps = result.gaps.filter((gap) => gap.fixable);
      if (fixableGaps.length > 0) {
        let fixResult = await healthChecker.autoFixGaps(fixableGaps);
        await db.log.create({
          data: {
            userId: data.userId,
            type: "auto_fix",
            message: `Auto-fixed ${fixResult.fixed} gaps, ${fixResult.failed} failed`,
            metadata: {
              fixed: fixResult.fixed,
              failed: fixResult.failed,
              originalScore: result.score
            }
          }
        });
        let user2 = await db.user.findUnique({
          where: { id: data.userId }
        });
        user2 && await analyticsService.trackPerformanceMetrics({
          userId: data.userId,
          shopDomain: data.shopId,
          timestamp: /* @__PURE__ */ new Date(),
          healthScore: result.score,
          totalProducts: result.totalProducts,
          validProducts: result.validProducts,
          issuesFound: result.gaps.length,
          issuesFixed: fixResult.fixed,
          aiUsage: user2.aiUsage,
          syncCount: 0,
          enrichmentCount: 0
        });
      }
    }
    return {
      success: !0,
      result,
      shopId: data.shopId,
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    };
  } catch (error) {
    return await db.log.create({
      data: {
        userId: data.userId,
        type: "error",
        message: `Health scan failed: ${error instanceof Error ? error.message : "Unknown error"}`,
        error: error instanceof Error ? error.message : "Unknown error"
      }
    }), {
      success: !1,
      error: error instanceof Error ? error.message : "Health scan failed",
      shopId: data.shopId
    };
  }
}
async function scheduleHealthChecks() {
  if (!healthCheckQueue || !backgroundJobsQueue) {
    console.log("Health checks skipped - queues not available");
    return;
  }
  try {
    await healthCheckQueue.add(
      "database-health",
      {},
      {
        repeat: { pattern: "*/5 * * * *" },
        jobId: "database-health-recurring"
      }
    ), await healthCheckQueue.add(
      "url-ping",
      { url: process.env.SHOPIFY_APP_URL + "/health" },
      {
        repeat: { pattern: "*/2 * * * *" },
        jobId: "url-ping-recurring"
      }
    ), await backgroundJobsQueue.add(
      "cleanup-logs",
      { daysToKeep: 30 },
      {
        repeat: { pattern: "0 2 * * *" },
        jobId: "log-cleanup-recurring"
      }
    ), await backgroundJobsQueue.add(
      "weekly-email-summary",
      {},
      {
        repeat: { pattern: "0 8 * * 1" },
        jobId: "weekly-email-summary-recurring"
      }
    ), console.log("Health checks scheduled successfully");
  } catch (error) {
    console.error("Failed to schedule health checks:", error);
  }
}
async function performWeeklyEmailSummary(data) {
  try {
    let validUsers = (data.userId ? [await db.user.findUnique({ where: { id: data.userId } })] : await db.user.findMany()).filter((user) => user !== null);
    for (let user of validUsers) {
      if (!user)
        continue;
      let success = await new HealthCheckerService(user.shopDomain, user.accessToken).sendWeeklyHealthSummary(user.id);
      await db.log.create({
        data: {
          userId: user.id,
          type: "weekly_email_summary",
          message: `Weekly email summary ${success ? "sent" : "failed"} for ${user.shopDomain}`,
          metadata: {
            success,
            shopDomain: user.shopDomain
          }
        }
      });
    }
    return {
      success: !0,
      usersProcessed: validUsers.length,
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    };
  } catch (error) {
    return {
      success: !1,
      error: error instanceof Error ? error.message : "Weekly email summary failed"
    };
  }
}
async function scheduleDailyHealthScans() {
  if (!healthCheckQueue) {
    console.log("Health scans skipped - queue not available");
    return;
  }
  try {
    let users = await db.user.findMany({
      select: {
        id: !0,
        shopId: !0,
        tier: !0
      }
    });
    for (let user of users)
      await healthCheckQueue.add(
        "health-scan",
        {
          shopId: user.shopId,
          userId: user.id,
          options: {
            maxProducts: user.tier === "enterprise" ? 500 : 100,
            includePings: !0,
            includeInventory: !0,
            includeValidation: !0
          }
        },
        {
          repeat: { pattern: "0 2 * * *" },
          jobId: `health-scan-${user.shopId}`
        }
      );
    console.log(`Daily health scans scheduled for ${users.length} users`);
  } catch (error) {
    console.error("Failed to schedule daily health scans:", error);
  }
}
healthCheckWorker && healthCheckWorker.on("error", (error) => {
  console.error("Health check worker error:", error);
});
backgroundJobsWorker && backgroundJobsWorker.on("error", (error) => {
  console.error("Background jobs worker error:", error);
});
queueEvents && queueEvents.on("error", (error) => {
  console.error("Queue events error:", error);
});

// app/entry.server.tsx
var import_jsx_runtime = require("react/jsx-runtime"), ABORT_DELAY = 5e3;
typeof global < "u" && !global.healthChecksInitialized && (setTimeout(() => {
  try {
    console.log("Checking Redis configuration:", {
      redisHost: process.env.REDIS_HOST,
      redisPort: process.env.REDIS_PORT,
      hasRedisPassword: !!process.env.REDIS_PASSWORD,
      allEnvVars: Object.keys(process.env).filter((key) => key.startsWith("REDIS"))
    }), process.env.REDIS_HOST && process.env.REDIS_PASSWORD ? (console.log("Redis configuration found - initializing health checks"), scheduleHealthChecks().catch((error) => {
      console.error("Failed to initialize health checks:", error);
    }), scheduleDailyHealthScans().catch((error) => {
      console.error("Failed to schedule daily health scans:", error);
    })) : console.log("Health checks skipped - Redis not configured");
  } catch (error) {
    console.error("Error during health check initialization:", error);
  }
}, 1e3), global.healthChecksInitialized = !0);
function handleRequest(request2, responseStatusCode, responseHeaders, remixContext) {
  return (0, import_isbot.isbot)(request2.headers.get("user-agent")) ? handleBotRequest(
    request2,
    responseStatusCode,
    responseHeaders,
    remixContext
  ) : handleBrowserRequest(
    request2,
    responseStatusCode,
    responseHeaders,
    remixContext
  );
}
function handleBotRequest(request2, responseStatusCode, responseHeaders, remixContext) {
  return new Promise((resolve, reject) => {
    let shellRendered = !1, { pipe, abort } = (0, import_server.renderToPipeableStream)(
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        import_react.RemixServer,
        {
          context: remixContext,
          url: request2.url,
          abortDelay: ABORT_DELAY
        }
      ),
      {
        onAllReady() {
          shellRendered = !0;
          let body = new import_node_stream.PassThrough(), stream = (0, import_node.createReadableStreamFromReadable)(body);
          responseHeaders.set("Content-Type", "text/html"), responseHeaders.set("X-Frame-Options", "ALLOWALL"), responseHeaders.set("Content-Security-Policy", "frame-ancestors https://*.myshopify.com https://admin.shopify.com"), resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode
            })
          ), pipe(body);
        },
        onShellError(error) {
          reject(error);
        },
        onError(error) {
          responseStatusCode = 500, shellRendered && console.error(error);
        }
      }
    );
    setTimeout(abort, ABORT_DELAY);
  });
}
function handleBrowserRequest(request2, responseStatusCode, responseHeaders, remixContext) {
  return new Promise((resolve, reject) => {
    let shellRendered = !1, { pipe, abort } = (0, import_server.renderToPipeableStream)(
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        import_react.RemixServer,
        {
          context: remixContext,
          url: request2.url,
          abortDelay: ABORT_DELAY
        }
      ),
      {
        onShellReady() {
          shellRendered = !0;
          let body = new import_node_stream.PassThrough(), stream = (0, import_node.createReadableStreamFromReadable)(body);
          responseHeaders.set("Content-Type", "text/html"), responseHeaders.set("X-Frame-Options", "ALLOWALL"), responseHeaders.set("Content-Security-Policy", "frame-ancestors https://*.myshopify.com https://admin.shopify.com"), resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode
            })
          ), pipe(body);
        },
        onShellError(error) {
          reject(error);
        },
        onError(error) {
          responseStatusCode = 500, shellRendered && console.error(error);
        }
      }
    );
    setTimeout(abort, ABORT_DELAY);
  });
}

// app/root.tsx
var root_exports = {};
__export(root_exports, {
  default: () => App,
  links: () => links,
  meta: () => meta
});
var import_react2 = require("@remix-run/react"), import_jsx_runtime2 = require("react/jsx-runtime"), meta = () => [
  { title: "CatalogAI Optimizer" },
  { name: "description", content: "AI-powered Shopify catalog optimization" }
], links = () => [
  { rel: "stylesheet", href: "https://unpkg.com/@shopify/polaris@12.27.0/build/esm/styles.css" }
];
function App() {
  return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)("html", { lang: "en", children: [
    /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)("head", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("meta", { charSet: "utf-8" }),
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("meta", { name: "viewport", content: "width=device-width, initial-scale=1" }),
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_react2.Meta, {}),
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_react2.Links, {})
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)("body", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_react2.Outlet, {}),
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_react2.ScrollRestoration, {}),
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_react2.Scripts, {}),
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_react2.LiveReload, {})
    ] })
  ] });
}

// app/routes/api.test-health-check.ts
var api_test_health_check_exports = {};
__export(api_test_health_check_exports, {
  loader: () => loader
});
var import_node2 = require("@remix-run/node");
init_shopify_server();
init_db();

// app/utils/healthCheckTest.ts
init_db();
var HealthCheckTester = class {
  testResults = [];
  async runAllTests(userId, shopDomain, accessToken) {
    return this.testResults = [], console.log("\u{1F9EA} Starting health check system tests..."), await this.testHealthCheckerInitialization(shopDomain, accessToken), await this.testProductValidation(), await this.testUrlPings(), await this.testInventoryValidation(), await this.testHealthScoreCalculation(), await this.testDatabaseOperations(userId), await this.testQueueOperations(userId, shopDomain), await this.testErrorHandling(shopDomain, accessToken), await this.testPerformanceLargeDataset(), await this.testEdgeCases(), console.log(`\u2705 Health check tests completed: ${this.testResults.filter((r) => r.passed).length}/${this.testResults.length} passed`), this.testResults;
  }
  async testHealthCheckerInitialization(shopDomain, accessToken) {
    let startTime = Date.now();
    try {
      if (!new HealthCheckerService(shopDomain, accessToken))
        throw new Error("Failed to initialize HealthCheckerService");
      this.testResults.push({
        testName: "Health Checker Initialization",
        passed: !0,
        duration: Date.now() - startTime,
        details: { shopDomain, hasAccessToken: !!accessToken }
      });
    } catch (error) {
      this.testResults.push({
        testName: "Health Checker Initialization",
        passed: !1,
        error: error instanceof Error ? error.message : "Unknown error",
        duration: Date.now() - startTime
      });
    }
  }
  async testProductValidation() {
    let startTime = Date.now();
    try {
      let mockProducts = [
        {
          id: "test-1",
          title: "Valid Product",
          description: "This is a valid product description",
          vendor: "Test Vendor",
          productType: "Test Type",
          tags: ["tag1", "tag2"],
          images: [{ src: "image1.jpg" }],
          variants: [{ id: "v1", title: "Variant 1" }],
          options: [{ name: "Size", values: ["S", "M", "L"] }],
          status: "active"
        },
        {
          id: "test-2",
          title: "",
          // Missing title
          description: "Valid description",
          vendor: "Test Vendor",
          productType: "Test Type",
          tags: [],
          images: [],
          variants: [],
          options: [],
          status: "active"
        },
        {
          id: "test-3",
          title: "Valid Product",
          description: "",
          // Missing description
          vendor: "",
          productType: "Test Type",
          tags: ["tag1"],
          images: [{ src: "image1.jpg" }],
          variants: [{ id: "v1", title: "Variant 1" }],
          options: [{ name: "Size", values: ["S", "M", "L"] }],
          status: "active"
        }
      ], requiredFields = ["title", "description", "vendor", "productType", "tags", "images", "variants", "options", "status"], validCount = 0, gaps = [];
      for (let product of mockProducts) {
        let isValid = !0;
        for (let field of requiredFields)
          (!product[field] || Array.isArray(product[field]) && product[field].length === 0 || typeof product[field] == "string" && product[field].trim() === "") && (gaps.push({ field, productId: product.id }), isValid = !1);
        isValid && validCount++;
      }
      let expectedValidCount = 1, expectedGapsCount = 4;
      if (validCount !== expectedValidCount)
        throw new Error(`Expected ${expectedValidCount} valid products, got ${validCount}`);
      if (gaps.length !== expectedGapsCount)
        throw new Error(`Expected ${expectedGapsCount} gaps, got ${gaps.length}`);
      this.testResults.push({
        testName: "Product Validation",
        passed: !0,
        duration: Date.now() - startTime,
        details: {
          totalProducts: mockProducts.length,
          validProducts: validCount,
          gapsFound: gaps.length,
          gaps
        }
      });
    } catch (error) {
      this.testResults.push({
        testName: "Product Validation",
        passed: !1,
        error: error instanceof Error ? error.message : "Unknown error",
        duration: Date.now() - startTime
      });
    }
  }
  async testUrlPings() {
    let startTime = Date.now();
    try {
      let testUrls = [
        "https://httpbin.org/status/200",
        // Should succeed
        "https://httpbin.org/status/404",
        // Should fail with 404
        "https://invalid-domain-that-does-not-exist.com",
        // Should fail
        "https://httpbin.org/delay/10"
        // Should timeout
      ], results = [];
      for (let url of testUrls)
        try {
          let response = await fetch(url, {
            method: "HEAD",
            signal: AbortSignal.timeout(5e3)
          });
          results.push({ url, success: response.ok, status: response.status });
        } catch (error) {
          results.push({ url, success: !1, error: error instanceof Error ? error.message : "Unknown error" });
        }
      let successCount = results.filter((r) => r.success).length, expectedSuccessCount = 1;
      if (successCount !== expectedSuccessCount)
        throw new Error(`Expected ${expectedSuccessCount} successful pings, got ${successCount}`);
      this.testResults.push({
        testName: "URL Pings",
        passed: !0,
        duration: Date.now() - startTime,
        details: {
          totalUrls: testUrls.length,
          successfulPings: successCount,
          results
        }
      });
    } catch (error) {
      this.testResults.push({
        testName: "URL Pings",
        passed: !1,
        error: error instanceof Error ? error.message : "Unknown error",
        duration: Date.now() - startTime
      });
    }
  }
  async testInventoryValidation() {
    let startTime = Date.now();
    try {
      let mockVariants = [
        { id: "v1", inventoryQuantity: 10 },
        // Normal stock
        { id: "v2", inventoryQuantity: 3 },
        // Low stock
        { id: "v3", inventoryQuantity: 0 },
        // Out of stock
        { id: "v4", inventoryQuantity: 1 },
        // Low stock
        { id: "v5", inventoryQuantity: 15 }
        // Normal stock
      ], lowStock = [], outOfStock = [];
      for (let variant of mockVariants)
        variant.inventoryQuantity === 0 ? outOfStock.push(variant.id) : variant.inventoryQuantity < 5 && lowStock.push(variant.id);
      let expectedLowStock = 2, expectedOutOfStock = 1;
      if (lowStock.length !== expectedLowStock)
        throw new Error(`Expected ${expectedLowStock} low stock variants, got ${lowStock.length}`);
      if (outOfStock.length !== expectedOutOfStock)
        throw new Error(`Expected ${expectedOutOfStock} out of stock variants, got ${outOfStock.length}`);
      this.testResults.push({
        testName: "Inventory Validation",
        passed: !0,
        duration: Date.now() - startTime,
        details: {
          totalVariants: mockVariants.length,
          lowStock: lowStock.length,
          outOfStock: outOfStock.length,
          lowStockVariants: lowStock,
          outOfStockVariants: outOfStock
        }
      });
    } catch (error) {
      this.testResults.push({
        testName: "Inventory Validation",
        passed: !1,
        error: error instanceof Error ? error.message : "Unknown error",
        duration: Date.now() - startTime
      });
    }
  }
  async testHealthScoreCalculation() {
    let startTime = Date.now();
    try {
      let testCases = [
        { totalProducts: 100, validProducts: 100, gaps: [], expectedScore: 100 },
        { totalProducts: 100, validProducts: 90, gaps: [], expectedScore: 90 },
        { totalProducts: 100, validProducts: 80, gaps: [{ severity: "warning", count: 10 }], expectedScore: 70 },
        { totalProducts: 100, validProducts: 70, gaps: [{ severity: "error", count: 20 }], expectedScore: 10 },
        { totalProducts: 0, validProducts: 0, gaps: [], expectedScore: 100 }
      ], results = [];
      for (let testCase of testCases) {
        let score = testCase.totalProducts === 0 ? 100 : testCase.validProducts / testCase.totalProducts * 100;
        for (let gap of testCase.gaps) {
          let penalty = gap.severity === "critical" ? 5 : gap.severity === "error" ? 3 : 1;
          score -= Math.min(penalty * (gap.count / testCase.totalProducts), 10);
        }
        score = Math.max(0, Math.round(score));
        let passed = score === testCase.expectedScore;
        results.push({ ...testCase, calculatedScore: score, passed });
      }
      let failedTests = results.filter((r) => !r.passed);
      if (failedTests.length > 0)
        throw new Error(`${failedTests.length} health score calculations failed`);
      this.testResults.push({
        testName: "Health Score Calculation",
        passed: !0,
        duration: Date.now() - startTime,
        details: {
          totalTestCases: testCases.length,
          allPassed: !0,
          results
        }
      });
    } catch (error) {
      this.testResults.push({
        testName: "Health Score Calculation",
        passed: !1,
        error: error instanceof Error ? error.message : "Unknown error",
        duration: Date.now() - startTime
      });
    }
  }
  async testDatabaseOperations(userId) {
    let startTime = Date.now();
    try {
      let testAudit = await db.audit.create({
        data: {
          userId,
          score: 85,
          totalProducts: 100,
          validProducts: 85,
          gaps: [{ field: "title", severity: "warning", count: 15 }],
          timestamp: /* @__PURE__ */ new Date()
        }
      });
      if (!testAudit.id)
        throw new Error("Failed to create audit record");
      if (!await db.audit.findUnique({
        where: { id: testAudit.id }
      }))
        throw new Error("Failed to retrieve audit record");
      await db.audit.delete({
        where: { id: testAudit.id }
      }), this.testResults.push({
        testName: "Database Operations",
        passed: !0,
        duration: Date.now() - startTime,
        details: {
          auditId: testAudit.id,
          score: testAudit.score,
          totalProducts: testAudit.totalProducts
        }
      });
    } catch (error) {
      this.testResults.push({
        testName: "Database Operations",
        passed: !1,
        error: error instanceof Error ? error.message : "Unknown error",
        duration: Date.now() - startTime
      });
    }
  }
  async testQueueOperations(userId, shopDomain) {
    let startTime = Date.now();
    try {
      if (!healthCheckQueue)
        throw new Error("Health check queue not available");
      let testJob = await healthCheckQueue.add("health-scan", {
        shopId: shopDomain,
        userId,
        options: {
          maxProducts: 10,
          includePings: !1,
          includeInventory: !1,
          includeValidation: !0
        }
      });
      if (!testJob.id)
        throw new Error("Failed to create queue job");
      this.testResults.push({
        testName: "Queue Operations",
        passed: !0,
        duration: Date.now() - startTime,
        details: {
          jobId: testJob.id,
          jobName: testJob.name,
          jobData: testJob.data
        }
      });
    } catch (error) {
      this.testResults.push({
        testName: "Queue Operations",
        passed: !1,
        error: error instanceof Error ? error.message : "Unknown error",
        duration: Date.now() - startTime
      });
    }
  }
  async testErrorHandling(shopDomain, accessToken) {
    let startTime = Date.now();
    try {
      let healthChecker = new HealthCheckerService(shopDomain, accessToken);
      try {
        await healthChecker.performHealthCheck({
          maxProducts: -1,
          // Invalid value
          includePings: !0,
          includeInventory: !0,
          includeValidation: !0
        });
      } catch {
      }
      try {
        await new HealthCheckerService("", accessToken).performHealthCheck();
      } catch {
      }
      try {
        await new HealthCheckerService(shopDomain, "").performHealthCheck();
      } catch {
      }
      this.testResults.push({
        testName: "Error Handling",
        passed: !0,
        duration: Date.now() - startTime,
        details: {
          errorHandlingTests: 3,
          allErrorsHandled: !0
        }
      });
    } catch (error) {
      this.testResults.push({
        testName: "Error Handling",
        passed: !1,
        error: error instanceof Error ? error.message : "Unknown error",
        duration: Date.now() - startTime
      });
    }
  }
  async testPerformanceLargeDataset() {
    let startTime = Date.now();
    try {
      let largeProductSet = Array.from({ length: 1e3 }, (_, i) => ({
        id: `product-${i}`,
        title: i % 10 === 0 ? "" : `Product ${i}`,
        // 10% missing titles
        description: i % 20 === 0 ? "" : `Description for product ${i}`,
        // 5% missing descriptions
        vendor: i % 15 === 0 ? "" : "Test Vendor",
        // ~6.7% missing vendors
        productType: "Test Type",
        tags: i % 25 === 0 ? [] : ["tag1", "tag2"],
        // 4% missing tags
        images: i % 30 === 0 ? [] : [{ src: `image-${i}.jpg` }],
        // ~3.3% missing images
        variants: i % 40 === 0 ? [] : [{ id: `v-${i}`, title: `Variant ${i}` }],
        // 2.5% missing variants
        options: i % 50 === 0 ? [] : [{ name: "Size", values: ["S", "M", "L"] }],
        // 2% missing options
        status: "active"
      })), requiredFields = ["title", "description", "vendor", "productType", "tags", "images", "variants", "options", "status"], validCount = 0, gaps = [];
      for (let product of largeProductSet) {
        let isValid = !0;
        for (let field of requiredFields)
          (!product[field] || Array.isArray(product[field]) && product[field].length === 0 || typeof product[field] == "string" && product[field].trim() === "") && (gaps.push({ field, productId: product.id }), isValid = !1);
        isValid && validCount++;
      }
      let processingTime = Date.now() - startTime, expectedValidCount = Math.floor(1e3 * 0.7), tolerance = 50;
      if (Math.abs(validCount - expectedValidCount) > tolerance)
        throw new Error(`Performance test failed: expected ~${expectedValidCount} valid products, got ${validCount}`);
      if (processingTime > 5e3)
        throw new Error(`Performance test failed: processing took ${processingTime}ms, expected < 5000ms`);
      this.testResults.push({
        testName: "Performance Large Dataset",
        passed: !0,
        duration: Date.now() - startTime,
        details: {
          totalProducts: largeProductSet.length,
          validProducts: validCount,
          gapsFound: gaps.length,
          processingTime,
          productsPerSecond: Math.round(largeProductSet.length / (processingTime / 1e3))
        }
      });
    } catch (error) {
      this.testResults.push({
        testName: "Performance Large Dataset",
        passed: !1,
        error: error instanceof Error ? error.message : "Unknown error",
        duration: Date.now() - startTime
      });
    }
  }
  async testEdgeCases() {
    let startTime = Date.now();
    try {
      let edgeCases = [
        // Empty product
        {
          id: "empty",
          title: "",
          description: "",
          vendor: "",
          productType: "",
          tags: [],
          images: [],
          variants: [],
          options: [],
          status: ""
        },
        // Product with only spaces
        {
          id: "spaces",
          title: "   ",
          description: "   ",
          vendor: "   ",
          productType: "Test Type",
          tags: [],
          images: [],
          variants: [],
          options: [],
          status: "active"
        },
        // Product with null/undefined values
        {
          id: "nulls",
          title: null,
          description: void 0,
          vendor: "Test Vendor",
          productType: "Test Type",
          tags: null,
          images: void 0,
          variants: [],
          options: [],
          status: "active"
        }
      ], results = [];
      for (let product of edgeCases) {
        let isValid = !0, gaps = [], requiredFields = ["title", "description", "vendor", "productType", "tags", "images", "variants", "options", "status"];
        for (let field of requiredFields) {
          let value = product[field];
          (!value || Array.isArray(value) && value.length === 0 || typeof value == "string" && value.trim() === "") && (gaps.push(field), isValid = !1);
        }
        results.push({ productId: product.id, isValid, gaps });
      }
      let validCount = results.filter((r) => r.isValid).length;
      if (validCount > 0)
        throw new Error(`Expected all edge cases to be invalid, but ${validCount} were valid`);
      this.testResults.push({
        testName: "Edge Cases",
        passed: !0,
        duration: Date.now() - startTime,
        details: {
          totalEdgeCases: edgeCases.length,
          allInvalid: !0,
          results
        }
      });
    } catch (error) {
      this.testResults.push({
        testName: "Edge Cases",
        passed: !1,
        error: error instanceof Error ? error.message : "Unknown error",
        duration: Date.now() - startTime
      });
    }
  }
  getTestSummary() {
    let total = this.testResults.length, passed = this.testResults.filter((r) => r.passed).length, failed = total - passed, duration = this.testResults.reduce((sum, r) => sum + r.duration, 0);
    return { total, passed, failed, duration };
  }
}, healthCheckTester = new HealthCheckTester();

// app/routes/api.test-health-check.ts
var loader = async ({ request: request2 }) => {
  try {
    let { session } = await authenticate.admin(request2), user = await db.user.findUnique({
      where: { shopId: session.shop }
    });
    if (!user)
      return (0, import_node2.json)({
        success: !1,
        error: "User not found"
      }, { status: 404 });
    let testResults = await healthCheckTester.runAllTests(
      user.id,
      session.shop,
      user.accessToken
    ), summary = healthCheckTester.getTestSummary();
    return await db.log.create({
      data: {
        userId: user.id,
        type: "health_check_test",
        message: `Health check tests completed: ${summary.passed}/${summary.total} passed`,
        metadata: {
          totalTests: summary.total,
          passedTests: summary.passed,
          failedTests: summary.failed,
          duration: summary.duration,
          results: testResults
        }
      }
    }), (0, import_node2.json)({
      success: !0,
      summary,
      results: testResults,
      message: `Health check tests completed: ${summary.passed}/${summary.total} passed`
    });
  } catch (error) {
    return console.error("Health check test error:", error), (0, import_node2.json)({
      success: !1,
      error: error instanceof Error ? error.message : "Failed to run health check tests"
    }, { status: 500 });
  }
};

// app/routes/api.health-check.ts
var api_health_check_exports = {};
__export(api_health_check_exports, {
  action: () => action,
  loader: () => loader2
});
var import_node3 = require("@remix-run/node");
init_shopify_server();
init_db();
var loader2 = async ({ request: request2 }) => {
  try {
    let { session } = await authenticate.admin(request2);
    if (console.log("Health check API called", {
      redisHost: process.env.REDIS_HOST,
      redisPort: process.env.REDIS_PORT,
      hasRedisPassword: !!process.env.REDIS_PASSWORD,
      healthCheckQueueExists: !!healthCheckQueue,
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    }), !healthCheckQueue)
      return console.error("Health check queue is null - Redis connection failed"), (0, import_node3.json)({
        success: !1,
        error: "Health check system not available - Redis connection failed"
      }, { status: 503 });
    let user = await db.user.findUnique({
      where: { shopId: session.shop }
    });
    if (!user)
      return (0, import_node3.json)({
        success: !1,
        error: "User not found"
      }, { status: 404 });
    let healthScanJob = await healthCheckQueue.add("health-scan", {
      shopId: session.shop,
      userId: user.id,
      options: {
        maxProducts: 100,
        includePings: !0,
        includeInventory: !0,
        includeValidation: !0
      }
    }), latestAudit = await db.audit.findFirst({
      where: { userId: user.id },
      orderBy: { timestamp: "desc" }
    });
    return (0, import_node3.json)({
      success: !0,
      jobId: healthScanJob.id,
      currentScore: latestAudit?.score || 0,
      currentGaps: latestAudit?.gaps || [],
      message: "Health scan initiated"
    });
  } catch (error) {
    return console.error("Health check API error:", error), (0, import_node3.json)({
      success: !1,
      error: error instanceof Error ? error.message : "Failed to initiate health checks"
    }, { status: 500 });
  }
}, action = async ({ request: request2 }) => {
  try {
    let { session } = await authenticate.admin(request2), formData = await request2.formData(), action8 = formData.get("action");
    if (action8 === "trigger-scan") {
      let user = await db.user.findUnique({
        where: { shopId: session.shop }
      });
      if (!user)
        return (0, import_node3.json)({
          success: !1,
          error: "User not found"
        }, { status: 404 });
      if (!healthCheckQueue)
        return console.error("Health check queue is null - Redis connection failed"), (0, import_node3.json)({
          success: !1,
          error: "Health check system not available - Redis connection failed"
        }, { status: 503 });
      let healthScanJob = await healthCheckQueue.add("health-scan", {
        shopId: session.shop,
        userId: user.id,
        options: {
          maxProducts: 100,
          includePings: !0,
          includeInventory: !0,
          includeValidation: !0
        }
      }), latestAudit = await db.audit.findFirst({
        where: { userId: user.id },
        orderBy: { timestamp: "desc" }
      });
      return (0, import_node3.json)({
        success: !0,
        jobId: healthScanJob.id,
        currentScore: latestAudit?.score || 0,
        currentGaps: latestAudit?.gaps || [],
        message: "Health scan initiated"
      });
    }
    if (action8 === "get-results") {
      if (!formData.get("jobId"))
        return (0, import_node3.json)({
          success: !1,
          error: "Job ID is required"
        }, { status: 400 });
      let user = await db.user.findUnique({
        where: { shopId: session.shop }
      });
      if (!user)
        return (0, import_node3.json)({
          success: !1,
          error: "User not found"
        }, { status: 404 });
      let latestAudit = await db.audit.findFirst({
        where: { userId: user.id },
        orderBy: { timestamp: "desc" }
      }), sevenDaysAgo = /* @__PURE__ */ new Date();
      sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
      let trends = await db.audit.findMany({
        where: {
          userId: user.id,
          timestamp: {
            gte: sevenDaysAgo
          }
        },
        orderBy: {
          timestamp: "asc"
        }
      });
      return (0, import_node3.json)({
        success: !0,
        result: latestAudit ? {
          score: latestAudit.score,
          totalProducts: latestAudit.totalProducts,
          validProducts: latestAudit.validProducts,
          gaps: latestAudit.gaps,
          timestamp: latestAudit.timestamp,
          trends: trends.map((t) => ({
            date: t.timestamp.toISOString().split("T")[0],
            score: t.score,
            totalProducts: t.totalProducts,
            validProducts: t.validProducts
          }))
        } : null
      });
    }
    if (action8 === "auto-fix") {
      let gapTypes = formData.get("gapTypes");
      if (!gapTypes)
        return (0, import_node3.json)({
          success: !1,
          error: "Gap types are required"
        }, { status: 400 });
      let user = await db.user.findUnique({
        where: { shopId: session.shop }
      });
      if (!user)
        return (0, import_node3.json)({
          success: !1,
          error: "User not found"
        }, { status: 404 });
      let aiEnrichmentJob = await backgroundJobsQueue?.add("ai-enrichment", {
        shopId: session.shop,
        userId: user.id,
        productIds: [],
        // Will be determined by gap types
        gapTypes: JSON.parse(gapTypes)
      });
      return (0, import_node3.json)({
        success: !0,
        jobId: aiEnrichmentJob?.id,
        message: "Auto-fix initiated"
      });
    }
    return (0, import_node3.json)({
      success: !1,
      error: "Invalid action"
    }, { status: 400 });
  } catch (error) {
    return console.error("Health check action error:", error), (0, import_node3.json)({
      success: !1,
      error: error instanceof Error ? error.message : "Failed to process action"
    }, { status: 500 });
  }
};

// app/routes/api.queue-status.ts
var api_queue_status_exports = {};
__export(api_queue_status_exports, {
  loader: () => loader3
});
var import_node4 = require("@remix-run/node");
init_shopify_server();
var loader3 = async ({ request: request2 }) => {
  try {
    let { session } = await authenticate.admin(request2);
    if (!healthCheckQueue || !backgroundJobsQueue)
      return (0, import_node4.json)({
        success: !1,
        error: "Queue system not available - Redis not configured"
      }, { status: 503 });
    let healthCheckStats = await healthCheckQueue.getJobCounts(), backgroundJobsStats = await backgroundJobsQueue.getJobCounts(), recentHealthChecks = await healthCheckQueue.getJobs(["completed"], 0, 5), recentBackgroundJobs = await backgroundJobsQueue.getJobs(["completed"], 0, 5);
    return (0, import_node4.json)({
      success: !0,
      queues: {
        healthChecks: {
          ...healthCheckStats,
          recentJobs: recentHealthChecks.map((job) => ({
            id: job.id,
            name: job.name,
            data: job.data,
            result: job.returnvalue,
            completedOn: job.finishedOn
          }))
        },
        backgroundJobs: {
          ...backgroundJobsStats,
          recentJobs: recentBackgroundJobs.map((job) => ({
            id: job.id,
            name: job.name,
            data: job.data,
            result: job.returnvalue,
            completedOn: job.finishedOn
          }))
        }
      },
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    });
  } catch (error) {
    return (0, import_node4.json)({
      success: !1,
      error: error instanceof Error ? error.message : "Failed to get queue status"
    }, { status: 500 });
  }
};

// app/routes/_index_backup.tsx
var index_backup_exports = {};
__export(index_backup_exports, {
  action: () => action2,
  default: () => Index,
  loader: () => loader4
});
var import_node5 = require("@remix-run/node"), import_react4 = require("@remix-run/react");
var import_polaris2 = __toESM(require_cjs());
init_shopify_server();
init_db();

// app/components/HealthCheckModal.tsx
var import_react3 = __toESM(require_react()), import_polaris = __toESM(require_cjs()), import_polaris_icons = require("@shopify/polaris-icons"), import_jsx_runtime3 = require("react/jsx-runtime");
function HealthCheckModal({
  isOpen,
  onClose,
  jobId,
  currentScore = 0,
  currentGaps = []
}) {
  let [loading, setLoading] = (0, import_react3.useState)(!1), [results, setResults] = (0, import_react3.useState)(null), [toast, setToast] = (0, import_react3.useState)(null), [autoFixing, setAutoFixing] = (0, import_react3.useState)(!1);
  (0, import_react3.useEffect)(() => {
    isOpen && jobId && fetchResults();
  }, [isOpen, jobId]);
  let fetchResults = async () => {
    setLoading(!0);
    try {
      let formData = new FormData();
      formData.append("action", "get-results"), formData.append("jobId", jobId);
      let data = await (await fetch("/api/health-check", {
        method: "POST",
        body: formData
      })).json();
      data.success && data.result ? setResults(data.result) : setToast({ content: data.error || "Failed to fetch results", error: !0 });
    } catch {
      setToast({ content: "Failed to fetch results", error: !0 });
    } finally {
      setLoading(!1);
    }
  }, handleAutoFix = async () => {
    if (!results)
      return;
    let fixableGaps = results.gaps.filter((gap) => gap.fixable);
    if (fixableGaps.length === 0) {
      setToast({ content: "No fixable gaps found", error: !0 });
      return;
    }
    setAutoFixing(!0);
    try {
      let formData = new FormData();
      formData.append("action", "auto-fix"), formData.append("gapTypes", JSON.stringify(fixableGaps.map((gap) => gap.field)));
      let data = await (await fetch("/api/health-check", {
        method: "POST",
        body: formData
      })).json();
      data.success ? (setToast({ content: `Auto-fix initiated for ${fixableGaps.length} gaps` }), setTimeout(fetchResults, 2e3)) : setToast({ content: data.error || "Auto-fix failed", error: !0 });
    } catch {
      setToast({ content: "Auto-fix failed", error: !0 });
    } finally {
      setAutoFixing(!1);
    }
  }, getScoreColor = (score) => score >= 90 ? "success" : score >= 70 ? "warning" : "critical", getSeverityIcon = (severity) => {
    switch (severity) {
      case "critical":
        return import_polaris_icons.XCircleIcon;
      case "error":
        return import_polaris_icons.AlertTriangleIcon;
      case "warning":
        return import_polaris_icons.AlertTriangleIcon;
      default:
        return import_polaris_icons.CheckCircleIcon;
    }
  }, getSeverityColor = (severity) => {
    switch (severity) {
      case "critical":
        return "critical";
      case "error":
        return "critical";
      case "warning":
        return "warning";
      default:
        return "success";
    }
  }, formatTrend = (trends) => {
    if (trends.length < 2)
      return null;
    let latest = trends[trends.length - 1], previous = trends[trends.length - 2], diff = latest.score - previous.score;
    return {
      value: diff,
      icon: diff >= 0 ? import_polaris_icons.ArrowUpIcon : import_polaris_icons.ArrowDownIcon,
      color: diff >= 0 ? "success" : "critical"
    };
  }, gapsTableRows = results?.gaps.map((gap, index) => [
    /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_polaris.InlineStack, { gap: "200", align: "start", children: [
      /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_polaris.Icon, { source: getSeverityIcon(gap.severity) }),
      /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_polaris.Text, { variant: "bodyMd", fontWeight: "medium", children: gap.field })
    ] }, index),
    /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_polaris.Badge, { tone: getSeverityColor(gap.severity), children: gap.severity }, `badge-${index}`),
    gap.count,
    gap.fixable ? "Yes" : "No"
  ]) || [], trendsTableRows = results?.trends.slice(-7).map((trend, index) => [
    new Date(trend.date).toLocaleDateString(),
    `${trend.score}%`,
    trend.totalProducts,
    trend.validProducts
  ]) || [];
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_jsx_runtime3.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
      import_polaris.Modal,
      {
        open: isOpen,
        onClose,
        title: "Health Check Results",
        size: "large",
        children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_polaris.Modal.Section, { children: loading ? /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_polaris.InlineStack, { align: "center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_polaris.Spinner, { size: "large" }),
          /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_polaris.Text, { variant: "bodyMd", children: "Analyzing your catalog..." })
        ] }) : results ? /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_polaris.BlockStack, { gap: "400", children: [
          /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_polaris.Card, { children: /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_polaris.BlockStack, { gap: "300", children: [
            /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_polaris.InlineStack, { align: "space-between", children: [
              /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_polaris.Text, { variant: "headingMd", children: "Overall Health Score" }),
              /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_polaris.Badge, { tone: getScoreColor(results.score), children: [
                results.score,
                "%"
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
              import_polaris.ProgressBar,
              {
                progress: results.score,
                size: "large",
                color: getScoreColor(results.score)
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_polaris.InlineStack, { gap: "400", align: "start", children: [
              /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_polaris.Box, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_polaris.Text, { variant: "bodyMd", color: "subdued", children: "Total Products" }),
                /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_polaris.Text, { variant: "headingMd", children: results.totalProducts })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_polaris.Box, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_polaris.Text, { variant: "bodyMd", color: "subdued", children: "Valid Products" }),
                /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_polaris.Text, { variant: "headingMd", children: results.validProducts })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_polaris.Box, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_polaris.Text, { variant: "bodyMd", color: "subdued", children: "Issues Found" }),
                /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_polaris.Text, { variant: "headingMd", children: results.gaps.length })
              ] })
            ] }),
            results.trends.length > 1 && /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_polaris.Box, { children: /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_polaris.InlineStack, { gap: "200", align: "start", children: [
              /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_polaris.Text, { variant: "bodyMd", color: "subdued", children: "7-Day Trend" }),
              (() => {
                let trend = formatTrend(results.trends);
                return trend ? /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_polaris.InlineStack, { gap: "100", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_polaris.Icon, { source: trend.icon }),
                  /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_polaris.Text, { variant: "bodyMd", color: trend.color, children: [
                    trend.value > 0 ? "+" : "",
                    trend.value.toFixed(1),
                    "%"
                  ] })
                ] }) : null;
              })()
            ] }) })
          ] }) }),
          results.gaps.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_polaris.Card, { children: /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_polaris.BlockStack, { gap: "300", children: [
            /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_polaris.InlineStack, { align: "space-between", children: [
              /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_polaris.Text, { variant: "headingMd", children: "Issues Found" }),
              results.gaps.some((gap) => gap.fixable) && /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
                import_polaris.Button,
                {
                  variant: "primary",
                  onClick: handleAutoFix,
                  loading: autoFixing,
                  disabled: autoFixing,
                  children: "Auto-Fix Fixable Issues"
                }
              )
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
              import_polaris.DataTable,
              {
                columnContentTypes: ["text", "text", "numeric", "text"],
                headings: ["Field", "Severity", "Count", "Fixable"],
                rows: gapsTableRows
              }
            )
          ] }) }),
          results.trends.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_polaris.Card, { children: /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_polaris.BlockStack, { gap: "300", children: [
            /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_polaris.Text, { variant: "headingMd", children: "Health Score Trends (Last 7 Days)" }),
            /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
              import_polaris.DataTable,
              {
                columnContentTypes: ["text", "numeric", "numeric", "numeric"],
                headings: ["Date", "Score", "Total Products", "Valid Products"],
                rows: trendsTableRows
              }
            )
          ] }) }),
          results.gaps.length === 0 && /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_polaris.Card, { children: /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_polaris.InlineStack, { align: "center", gap: "300", children: [
            /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_polaris.Icon, { source: import_polaris_icons.CheckCircleIcon }),
            /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_polaris.BlockStack, { gap: "200", children: [
              /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_polaris.Text, { variant: "headingMd", children: "Excellent!" }),
              /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_polaris.Text, { variant: "bodyMd", color: "subdued", children: "Your catalog is in great health. No issues were found." })
            ] })
          ] }) })
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_polaris.Text, { variant: "bodyMd", color: "subdued", children: "No results available. Please try running the health check again." }) })
      }
    ),
    toast && /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
      import_polaris.Toast,
      {
        content: toast.content,
        error: toast.error,
        onDismiss: () => setToast(null)
      }
    )
  ] });
}

// app/routes/_index_backup.tsx
init_openaiSpec();
var import_jsx_runtime4 = require("react/jsx-runtime"), loader4 = async ({ request: request2 }) => {
  let requestId = Math.random().toString(36).substring(7), startTime = Date.now();
  try {
    console.log(`\u{1F50D} [${requestId}] DEBUG - Starting authentication for request:`, request2.url), console.log(`\u{1F50D} [${requestId}] DEBUG - Request headers:`, Object.fromEntries(request2.headers.entries()));
    let { session } = await authenticate.admin(request2);
    console.log(`\u{1F50D} [${requestId}] DEBUG - Session shop:`, session.shop), console.log(`\u{1F50D} [${requestId}] DEBUG - Session exists:`, !!session), console.log(`\u{1F50D} [${requestId}] DEBUG - Access token exists:`, !!session.accessToken), console.log(`\u{1F50D} [${requestId}] DEBUG - Session ID:`, session.id), console.log(`\u{1F50D} [${requestId}] DEBUG - Session scope:`, session.scope), console.log(`\u{1F50D} [${requestId}] DEBUG - Session isOnline:`, session.isOnline), console.log(`\u{1F50D} [${requestId}] DEBUG - Session expires:`, session.expires), console.log(`\u{1F50D} [${requestId}] DEBUG - Access token length:`, session.accessToken?.length), console.log(`\u{1F50D} [${requestId}] DEBUG - Access token prefix:`, session.accessToken?.substring(0, 15) + "...");
    let user = null, latestAudit = null, recentLogs = [];
    try {
      user = await db.user.findUnique({
        where: { shopId: session.shop }
      }), user && (latestAudit = await db.audit.findFirst({
        where: { userId: user.id },
        orderBy: { timestamp: "desc" }
      }), await db.log.deleteMany({
        where: {
          userId: user.id,
          message: {
            contains: "GraphQL Error"
          }
        }
      }), recentLogs = await db.log.findMany({
        where: {
          userId: user.id,
          // Filter out logs with raw error details
          message: {
            not: {
              contains: "GraphQL Error"
            }
          }
        },
        orderBy: { createdAt: "desc" },
        take: 3
      }));
    } catch (dbError) {
      console.error("Database error in loader:", dbError);
    }
    let products = [], totalProducts = 0, averageScore = 0;
    if (user)
      try {
        let { sessionStorage: sessionStorage2 } = await Promise.resolve().then(() => (init_shopify_server(), shopify_server_exports)), offlineSessionId = `offline_${session.shop}`;
        console.log(`\u{1F511} [${requestId}] Loading offline session:`, offlineSessionId);
        let offlineSession = await sessionStorage2.loadSession(offlineSessionId);
        if (console.log(`\u{1F50D} [${requestId}] Offline session found:`, !!offlineSession), console.log(`\u{1F50D} [${requestId}] Offline session has accessToken:`, !!offlineSession?.accessToken), offlineSession && (console.log(`\u{1F50D} [${requestId}] Offline session details:`), console.log(`\u{1F50D} [${requestId}] - ID:`, offlineSession.id), console.log(`\u{1F50D} [${requestId}] - Shop:`, offlineSession.shop), console.log(`\u{1F50D} [${requestId}] - Scope:`, offlineSession.scope), console.log(`\u{1F50D} [${requestId}] - IsOnline:`, offlineSession.isOnline), console.log(`\u{1F50D} [${requestId}] - Expires:`, offlineSession.expires), console.log(`\u{1F50D} [${requestId}] - Access token length:`, offlineSession.accessToken?.length), console.log(`\u{1F50D} [${requestId}] - Access token prefix:`, offlineSession.accessToken?.substring(0, 15) + "...")), offlineSession?.accessToken) {
          console.log("\u2705 Offline session loaded, has accessToken: true"), console.log("\u{1F511} Access token prefix:", offlineSession.accessToken.substring(0, 15) + "..."), console.log("\u{1F511} Access token length:", offlineSession.accessToken.length);
          let { ShopifySyncService: ShopifySyncService2 } = await Promise.resolve().then(() => (init_shopifySync(), shopifySync_exports)), { mapShopifyToSpec: mapShopifyToSpec2, calculateProductScore: calculateProductScore2 } = await Promise.resolve().then(() => (init_fieldMapper(), fieldMapper_exports)), shopifyProducts = await new ShopifySyncService2(session.shop, offlineSession.accessToken).syncProducts(user.id), storedProducts = await db.product.findMany({
            where: { userId: user.id },
            select: {
              shopifyId: !0,
              recommendations: !0
            }
          }), recommendationsMap = /* @__PURE__ */ new Map();
          storedProducts.forEach((sp) => {
            sp.recommendations && recommendationsMap.set(sp.shopifyId, sp.recommendations);
          }), products = shopifyProducts.map((shopifyProduct) => {
            let spec = mapShopifyToSpec2(shopifyProduct), scoreData = calculateProductScore2(spec), productId = shopifyProduct.id.replace("gid://shopify/Product/", "");
            return {
              id: productId,
              title: shopifyProduct.title || "Untitled Product",
              description: shopifyProduct.description || "No description",
              score: scoreData.score,
              gaps: scoreData.gaps,
              rawProduct: shopifyProduct,
              // Store raw product for detail view
              spec,
              // Store mapped spec for recommendations
              recommendations: recommendationsMap.get(productId) || null
              // Include stored recommendations
            };
          }), totalProducts = shopifyProducts.length, averageScore = products.length > 0 ? Math.round(products.reduce((sum, p) => sum + p.score, 0) / products.length) : 0;
        } else
          console.log("\u274C Offline session not found or no access token"), console.log("\u{1F50D} Offline session exists:", !!offlineSession), console.log("\u{1F50D} Access token exists:", !!offlineSession?.accessToken), console.log("\u26A0\uFE0F This usually means the app needs to be reinstalled to get a fresh session");
      } catch (error) {
        if (console.error("Error fetching products in loader:", error), console.log(`\u274C [${requestId}] Error type:`, error?.constructor?.name), console.log(`\u274C [${requestId}] Error message:`, error instanceof Error ? error.message : "Unknown error"), console.log(`\u274C [${requestId}] Error stack:`, error instanceof Error ? error.stack : "No stack trace"), error instanceof Error && error.message.includes("401")) {
          console.log(`\u{1F511} [${requestId}] Authentication error detected - clearing invalid session`), console.log(`\u26A0\uFE0F [${requestId}] The access token is invalid/expired. Clearing session to force re-authentication.`), console.log(`\u{1F50D} [${requestId}] Error details:`, {
            message: error.message,
            stack: error.stack,
            isGraphQLError: error.message.includes("GraphQL Error"),
            is401Error: error.message.includes("401"),
            errorType: error.constructor.name
          });
          try {
            let { sessionStorage: sessionStorage2 } = await Promise.resolve().then(() => (init_shopify_server(), shopify_server_exports)), offlineSessionId = `offline_${session.shop}`;
            console.log(`\u{1F5D1}\uFE0F [${requestId}] Deleting invalid offline session:`, offlineSessionId), await sessionStorage2.deleteSession(offlineSessionId), console.log(`\u2705 [${requestId}] Invalid session cleared - next page load will trigger fresh authentication`), user && await db.log.create({
              data: {
                userId: user.id,
                type: "warning",
                message: `Invalid session cleared for shop ${session.shop} - 401 authentication error`,
                metadata: {
                  requestId,
                  sessionId: offlineSessionId,
                  errorMessage: error.message,
                  timestamp: (/* @__PURE__ */ new Date()).toISOString()
                }
              }
            });
          } catch (clearError) {
            console.error(`\u274C [${requestId}] Error clearing session:`, clearError);
          }
        } else
          console.log(`\u{1F50D} [${requestId}] Non-authentication error detected:`, {
            errorType: error?.constructor?.name,
            message: error instanceof Error ? error.message : "Unknown error",
            isResponse: error instanceof Response,
            responseStatus: error instanceof Response ? error.status : "N/A"
          });
        products = [
          {
            id: "1",
            title: "Sample Product 1",
            description: "Basic product description",
            score: 75,
            gaps: ["material", "weight"]
          },
          {
            id: "2",
            title: "Sample Product 2",
            description: "Another product with minimal details",
            score: 60,
            gaps: ["material", "dimensions", "use_cases"]
          },
          {
            id: "3",
            title: "Sample Product 3",
            description: "Well-described product with comprehensive details",
            score: 95,
            gaps: []
          }
        ];
      }
    let dashboardMetrics = ((products2, user2) => {
      let totalProducts2 = products2.length, validProducts = products2.filter((p) => p.score >= 90).length, warningProducts = products2.filter((p) => p.score >= 70 && p.score < 90).length, invalidProducts = products2.filter((p) => p.score < 70).length, productsPassedPercentage = totalProducts2 > 0 ? Math.round(validProducts / totalProducts2 * 100) : 0, aiReadinessScore = Math.round(averageScore), optimizationProgress = Math.round(averageScore), lastSyncTime = null;
      return user2 && (lastSyncTime = /* @__PURE__ */ new Date()), {
        aiReadinessScore,
        totalProducts: totalProducts2,
        validProducts,
        warningProducts,
        invalidProducts,
        productsPassedPercentage,
        lastSyncTime,
        optimizationProgress
      };
    })(products, user), duration = Date.now() - startTime;
    return console.log(`\u2705 [${requestId}] Loader completed successfully in ${duration}ms`), console.log(`\u{1F4CA} [${requestId}] Results:`, {
      productsCount: products.length,
      totalProducts,
      averageScore,
      userExists: !!user,
      lastSync: recentLogs.find((log) => log.type === "sync")?.createdAt || null,
      recentLogsCount: recentLogs.length
    }), (0, import_node5.json)({
      shop: session.shop,
      user,
      products,
      totalProducts,
      averageScore,
      dashboardMetrics,
      lastSync: recentLogs.find((log) => log.type === "sync")?.createdAt || null,
      recentLogs: recentLogs.map((log) => ({
        id: log.id,
        type: log.type,
        message: log.message,
        createdAt: log.createdAt
      }))
    });
  } catch (error) {
    if (console.error("\u274C ERROR in index loader:", error), console.error("\u274C ERROR details:", {
      message: error.message,
      stack: error.stack,
      name: error.name
    }), error instanceof Response)
      throw console.log("\u{1F504} Re-throwing OAuth redirect response"), error;
    return (0, import_node5.json)({
      shop: "unknown",
      products: [],
      user: null,
      totalProducts: 0,
      averageScore: 0,
      lastSync: null,
      recentLogs: []
    });
  }
}, action2 = async ({ request: request2 }) => {
  console.log("\u{1F3AF} INDEX ACTION CALLED");
  try {
    let { admin, session } = await authenticate.admin(request2);
    console.log("\u2705 Authentication successful in index action"), console.log("\u{1F511} Admin API client available:", !!admin), console.log("\u{1F4CD} Session shop:", session.shop);
    let formData = await request2.formData(), actionType = formData.get("action");
    if (actionType === "sync") {
      console.log("\u{1F680} Starting sync in index action");
      let user = await db.user.findUnique({
        where: { shopId: session.shop }
      });
      if (!user)
        return console.log("\u274C User not found for shop:", session.shop), (0, import_node5.json)({ success: !1, error: "User not found" }, { status: 404 });
      console.log("\u{1F464} User ID:", user.id);
      let { sessionStorage: sessionStorage2 } = await Promise.resolve().then(() => (init_shopify_server(), shopify_server_exports)), offlineSessionId = `offline_${session.shop}`;
      console.log("\u{1F511} Loading offline session:", offlineSessionId);
      let offlineSession = await sessionStorage2.loadSession(offlineSessionId);
      if (!offlineSession)
        return console.log("\u274C Offline session not found"), (0, import_node5.json)({ success: !1, error: "Offline session not found. Please reinstall the app." }, { status: 401 });
      console.log("\u2705 Offline session loaded, has accessToken:", !!offlineSession.accessToken), console.log("\u{1F511} Access token prefix:", offlineSession.accessToken?.substring(0, 15) + "..."), console.log("\u{1F511} Access token length:", offlineSession.accessToken?.length), console.log("\u{1F50D} Session scope:", offlineSession.scope), console.log("\u{1F50D} Session isOnline:", offlineSession.isOnline);
      let { GraphQLClient: GraphQLClient2 } = await Promise.resolve().then(() => (init_main(), main_exports)), graphqlClient = new GraphQLClient2(
        `https://${session.shop}/admin/api/2025-10/graphql`,
        {
          headers: {
            "X-Shopify-Access-Token": offlineSession.accessToken,
            "Content-Type": "application/json"
          }
        }
      );
      console.log("\u{1F4E6} Starting product sync with offline access token...");
      let PRODUCTS_QUERY2 = `
        query getProducts($first: Int!, $after: String) {
          products(first: $first, after: $after) {
            pageInfo {
              hasNextPage
              endCursor
            }
            edges {
              node {
                id
                title
                description
                handle
                productType
                vendor
                tags
                variants(first: 100) {
                  edges {
                    node {
                      id
                      title
                      price
                      compareAtPrice
                      sku
                      inventoryQuantity
                      availableForSale
                    }
                  }
                }
                metafields(first: 100) {
                  edges {
                    node {
                      id
                      namespace
                      key
                      value
                      type
                    }
                  }
                }
                images(first: 10) {
                  edges {
                    node {
                      id
                      url
                      altText
                    }
                  }
                }
              }
            }
          }
        }
      `, allProducts = [], hasNextPage = !0, after, pageCount = 0;
      for (; hasNextPage; ) {
        pageCount++, console.log(`\u{1F4C4} Fetching page ${pageCount}${after ? " (after cursor)" : " (first page)"}`);
        let response = await graphqlClient.request(PRODUCTS_QUERY2, {
          first: 250,
          after
        });
        console.log("\u{1F4E6} Products in this page:", response.products?.edges?.length || 0), response.products?.edges && allProducts.push(...response.products.edges), hasNextPage = response.products?.pageInfo?.hasNextPage || !1, after = response.products?.pageInfo?.endCursor, hasNextPage && (console.log("\u23F3 Waiting 500ms before next request..."), await new Promise((resolve) => setTimeout(resolve, 500)));
      }
      console.log("\u2705 Product sync completed:", allProducts.length, "products"), await db.log.create({
        data: {
          userId: user.id,
          type: "sync",
          message: `Synchronized ${allProducts.length} products from Shopify`,
          metadata: {
            productsCount: allProducts.length,
            timestamp: (/* @__PURE__ */ new Date()).toISOString()
          }
        }
      }), console.log("\u{1F4DD} Creating audit record...");
      let audit = await db.audit.create({
        data: {
          userId: user.id,
          score: 0,
          // Will be calculated after field mapping
          totalProducts: allProducts.length,
          validProducts: 0,
          // Will be calculated after validation
          gaps: []
          // Will be populated after field mapping and validation
        }
      });
      return console.log("\u2705 Audit record created:", audit.id), (0, import_node5.json)({
        success: !0,
        message: `Successfully synced ${allProducts.length} products`,
        data: {
          productsCount: allProducts.length,
          auditId: audit.id
        }
      });
    }
    if (actionType === "generate-recommendations") {
      console.log("\u{1F916} Generating AI recommendations for single product");
      let user = await db.user.findUnique({
        where: { shopId: session.shop }
      });
      if (!user)
        return (0, import_node5.json)({ success: !1, error: "User not found" }, { status: 404 });
      let productId = formData.get("productId");
      if (console.log("\u{1F3AF} Product ID:", productId), !(formData.get("forceRegenerate") === "true")) {
        let existingProduct = await db.product.findFirst({
          where: {
            userId: user.id,
            shopifyId: productId
          }
        });
        if (existingProduct?.recommendations) {
          let recData = existingProduct.recommendations;
          return console.log("\u{1F4CB} Returning existing recommendations for product:", productId), (0, import_node5.json)({
            success: !0,
            recommendations: recData.recommendations || [],
            isExisting: !0
          });
        }
      }
      let { sessionStorage: sessionStorage2 } = await Promise.resolve().then(() => (init_shopify_server(), shopify_server_exports)), offlineSessionId = `offline_${session.shop}`, offlineSession = await sessionStorage2.loadSession(offlineSessionId);
      if (!offlineSession?.accessToken)
        return (0, import_node5.json)({
          success: !1,
          error: "Offline session not found. Please reinstall the app."
        }, { status: 401 });
      let { ShopifySyncService: ShopifySyncService2 } = await Promise.resolve().then(() => (init_shopifySync(), shopifySync_exports)), { AIEnrichmentService: AIEnrichmentService2 } = await Promise.resolve().then(() => (init_aiEnrich(), aiEnrich_exports)), product = (await new ShopifySyncService2(session.shop, offlineSession.accessToken).syncProducts(user.id)).find((p) => p.id.includes(productId));
      if (!product)
        return (0, import_node5.json)({ success: !1, error: "Product not found" }, { status: 404 });
      let { mapShopifyToSpec: mapShopifyToSpec2, calculateProductScore: calculateProductScore2 } = await Promise.resolve().then(() => (init_fieldMapper(), fieldMapper_exports)), spec = mapShopifyToSpec2(product), gaps = calculateProductScore2(spec).gaps;
      console.log("\u{1F3AF} Product gaps identified:", gaps);
      let result = await new AIEnrichmentService2().enrichProduct(user.id, product, gaps);
      console.log("\u2705 Generated recommendations:", result.improvements.length);
      let recommendationData = {
        recommendations: result.improvements.map((rec) => ({
          ...rec,
          status: "pending"
          // pending, approved, rejected, applied
        })),
        generatedAt: (/* @__PURE__ */ new Date()).toISOString(),
        lastUpdated: (/* @__PURE__ */ new Date()).toISOString()
      };
      return await db.product.upsert({
        where: {
          userId_shopifyId: {
            userId: user.id,
            shopifyId: productId
          }
        },
        create: {
          userId: user.id,
          shopifyId: productId,
          title: product.title,
          recommendations: recommendationData
        },
        update: {
          recommendations: recommendationData
        }
      }), console.log("\u{1F4BE} Stored recommendations in database for product:", productId), (0, import_node5.json)({
        success: !0,
        recommendations: recommendationData.recommendations,
        isExisting: !1
      });
    }
    if (actionType === "apply-recommendations") {
      console.log("\u{1F4DD} Applying approved recommendations to Shopify");
      let user = await db.user.findUnique({
        where: { shopId: session.shop }
      });
      if (!user)
        return (0, import_node5.json)({ success: !1, error: "User not found" }, { status: 404 });
      let productId = formData.get("productId"), approvedRecommendationsJson = formData.get("approvedRecommendations"), approvedRecommendations = JSON.parse(approvedRecommendationsJson);
      if (console.log("\u{1F3AF} Product ID:", productId), console.log("\u2705 Approved recommendations:", approvedRecommendations.length), console.log("\u{1F4CB} Approved recommendation fields:", approvedRecommendations.map((r) => r.field)), !Array.isArray(approvedRecommendations) || approvedRecommendations.length === 0)
        return (0, import_node5.json)({
          success: !1,
          error: "No approved recommendations provided"
        }, { status: 400 });
      let productRecord = await db.product.findFirst({
        where: {
          userId: user.id,
          shopifyId: productId
        }
      }), updatedRecommendationData = null;
      if (productRecord?.recommendations) {
        let recData = productRecord.recommendations, approvedFields = approvedRecommendations.map((r) => r.field);
        updatedRecommendationData = {
          ...recData,
          recommendations: recData.recommendations.map((rec) => ({
            ...rec,
            status: approvedFields.includes(rec.field) ? "applied" : rec.status
          })),
          lastUpdated: (/* @__PURE__ */ new Date()).toISOString()
        };
      }
      let { sessionStorage: sessionStorage2 } = await Promise.resolve().then(() => (init_shopify_server(), shopify_server_exports)), offlineSessionId = `offline_${session.shop}`, offlineSession = await sessionStorage2.loadSession(offlineSessionId);
      if (!offlineSession?.accessToken)
        return (0, import_node5.json)({
          success: !1,
          error: "Offline session not found. Please reinstall the app."
        }, { status: 401 });
      let { ShopifySyncService: ShopifySyncService2 } = await Promise.resolve().then(() => (init_shopifySync(), shopifySync_exports)), { mapShopifyToSpec: mapShopifyToSpec2, calculateProductScore: calculateProductScore2 } = await Promise.resolve().then(() => (init_fieldMapper(), fieldMapper_exports)), syncService = new ShopifySyncService2(session.shop, offlineSession.accessToken), product = (await syncService.syncProducts(user.id)).find((p) => p.id.includes(productId));
      if (!product)
        return (0, import_node5.json)({ success: !1, error: "Product not found" }, { status: 404 });
      let initialSpec = mapShopifyToSpec2(product), initialScore = calculateProductScore2(initialSpec).score;
      console.log("\u{1F4CA} Initial product score:", initialScore);
      let { AIEnrichmentService: AIEnrichmentService2 } = await Promise.resolve().then(() => (init_aiEnrich(), aiEnrich_exports)), enrichmentService = new AIEnrichmentService2(), partialResult = {
        originalProduct: product,
        enrichedSpec: {},
        improvements: approvedRecommendations,
        totalUsage: 0,
        errors: []
      }, success = await enrichmentService.applyEnrichmentToShopify(
        user.id,
        session.shop,
        offlineSession.accessToken,
        partialResult
      );
      console.log("\u2705 Applied changes to Shopify:", success);
      let finalScore = initialScore;
      if (success)
        try {
          let updatedProduct = (await syncService.syncProducts(user.id)).find((p) => p.id.includes(productId));
          if (updatedProduct) {
            let updatedSpec = mapShopifyToSpec2(updatedProduct);
            finalScore = calculateProductScore2(updatedSpec).score, console.log("\u{1F4CA} Final product score:", finalScore), console.log("\u{1F4C8} Score improvement:", finalScore - initialScore);
          }
        } catch (error) {
          console.warn("Could not validate score improvement:", error);
        }
      return updatedRecommendationData && productRecord && (await db.product.update({
        where: { id: productRecord.id },
        data: {
          recommendations: updatedRecommendationData
        }
      }), console.log("\u{1F4BE} Updated recommendation status to applied in database")), await db.log.create({
        data: {
          userId: user.id,
          type: "enrichment",
          message: `Applied ${approvedRecommendations.length} approved AI recommendations to product ${productId}`,
          metadata: {
            productId,
            approvedCount: approvedRecommendations.length,
            timestamp: (/* @__PURE__ */ new Date()).toISOString()
          }
        }
      }), (0, import_node5.json)({
        success: !0,
        appliedCount: approvedRecommendations.length,
        scoreImprovement: {
          initial: initialScore,
          final: finalScore,
          improvement: finalScore - initialScore
        }
      });
    }
    if (actionType === "save-customer-input") {
      console.log("\u{1F4BE} Saving customer input data");
      let user = await db.user.findUnique({
        where: { shopId: session.shop }
      });
      if (!user)
        return (0, import_node5.json)({ success: !1, error: "User not found" }, { status: 404 });
      let productId = formData.get("productId"), inputDataJson = formData.get("inputData"), inputData = JSON.parse(inputDataJson);
      console.log("\u{1F3AF} Product ID:", productId), console.log("\u{1F4DD} Input data:", inputData);
      let { sessionStorage: sessionStorage2 } = await Promise.resolve().then(() => (init_shopify_server(), shopify_server_exports)), offlineSessionId = `offline_${session.shop}`, offlineSession = await sessionStorage2.loadSession(offlineSessionId);
      if (!offlineSession?.accessToken)
        return (0, import_node5.json)({
          success: !1,
          error: "Offline session not found. Please reinstall the app."
        }, { status: 401 });
      let { GraphQLClient: GraphQLClient2 } = await Promise.resolve().then(() => (init_main(), main_exports)), graphqlClient = new GraphQLClient2(
        `https://${session.shop}/admin/api/2025-10/graphql`,
        {
          headers: {
            "X-Shopify-Access-Token": offlineSession.accessToken,
            "Content-Type": "application/json"
          }
        }
      ), appliedCount = 0, appliedFields = [];
      for (let [field, value] of Object.entries(inputData))
        try {
          let metafieldValue = value, metafieldType = "single_line_text_field";
          if (field.startsWith("dimensions_"))
            continue;
          (field === "specifications" || field === "warranty" || field === "return_policy") && (metafieldType = "multi_line_text_field");
          let CREATE_METAFIELD_MUTATION = `
            mutation metafieldsSet($metafields: [MetafieldsSetInput!]!) {
              metafieldsSet(metafields: $metafields) {
                metafields {
                  id
                  namespace
                  key
                  value
                }
                userErrors {
                  field
                  message
                }
              }
            }
          `, response = await graphqlClient.request(CREATE_METAFIELD_MUTATION, {
            metafields: [
              {
                ownerId: `gid://shopify/Product/${productId}`,
                namespace: "catalogai",
                key: field,
                type: metafieldType,
                value: metafieldValue
              }
            ]
          });
          response.metafieldsSet.userErrors?.length ? console.error(`\u274C Error applying ${field}:`, response.metafieldsSet.userErrors) : (appliedCount++, appliedFields.push(field), console.log(`\u2705 Applied ${field}: ${metafieldValue}`));
        } catch (error) {
          console.error(`\u274C Error applying ${field}:`, error);
        }
      let dimensionData = ["dimensions_length", "dimensions_width", "dimensions_height"].reduce((acc, key) => {
        if (inputData[key]) {
          let dimKey = key.replace("dimensions_", "");
          acc[dimKey] = inputData[key];
        }
        return acc;
      }, {});
      if (Object.keys(dimensionData).length > 0)
        try {
          let CREATE_METAFIELD_MUTATION = `
            mutation metafieldsSet($metafields: [MetafieldsSetInput!]!) {
              metafieldsSet(metafields: $metafields) {
                metafields {
                  id
                  namespace
                  key
                  value
                }
                userErrors {
                  field
                  message
                }
              }
            }
          `;
          (await graphqlClient.request(CREATE_METAFIELD_MUTATION, {
            metafields: [
              {
                ownerId: `gid://shopify/Product/${productId}`,
                namespace: "catalogai",
                key: "dimensions",
                type: "json",
                value: JSON.stringify(dimensionData)
              }
            ]
          })).metafieldsSet.userErrors?.length || (appliedCount++, appliedFields.push("dimensions"), console.log("\u2705 Applied dimensions:", dimensionData));
        } catch (error) {
          console.error("\u274C Error applying dimensions:", error);
        }
      return await db.log.create({
        data: {
          userId: user.id,
          type: "customer_input",
          message: `Applied ${appliedCount} customer input fields to product ${productId}`,
          metadata: {
            productId,
            appliedFields,
            appliedCount,
            timestamp: (/* @__PURE__ */ new Date()).toISOString()
          }
        }
      }), (0, import_node5.json)({
        success: !0,
        appliedCount,
        appliedFields,
        message: `Successfully saved ${appliedCount} fields to your product!`
      });
    }
    return (0, import_node5.json)({ success: !0 });
  } catch (error) {
    if (console.error("\u274C Error in index action:", error), error instanceof Response)
      throw console.log("\u{1F504} Re-throwing OAuth redirect response"), error;
    let userFriendlyError = "Sync failed. Please try again.";
    error instanceof Error && (error.message.includes("401") || error.message.includes("Unauthorized") ? userFriendlyError = "Authentication failed. Please reinstall the app." : error.message.includes("403") || error.message.includes("Forbidden") ? userFriendlyError = "Insufficient permissions. Please check app permissions." : error.message.includes("429") || error.message.includes("rate limit") ? userFriendlyError = "Rate limit exceeded. Please try again in a few minutes." : error.message.includes("GraphQL") && (userFriendlyError = "API connection failed. Please try again."));
    try {
      let { session } = await authenticate.admin(request2), user = await db.user.findUnique({
        where: { shopId: session.shop }
      });
      user && await db.log.create({
        data: {
          userId: user.id,
          type: "error",
          message: userFriendlyError,
          error: error instanceof Error ? error.message : "Unknown error",
          metadata: {
            timestamp: (/* @__PURE__ */ new Date()).toISOString(),
            action: "sync"
          }
        }
      });
    } catch (logError) {
      console.error("Failed to log error:", logError);
    }
    return (0, import_node5.json)(
      {
        success: !1,
        error: userFriendlyError
      },
      { status: 500 }
    );
  }
};
function Index() {
  let loaderData = (0, import_react4.useLoaderData)(), { shop, totalProducts, averageScore, dashboardMetrics, lastSync, recentLogs, user, products } = loaderData, syncFetcher = (0, import_react4.useFetcher)(), healthCheckFetcher = (0, import_react4.useFetcher)(), recommendationFetcher = (0, import_react4.useFetcher)(), customerInputFetcher = (0, import_react4.useFetcher)(), handleSync = () => {
    setIsSyncing(!0), syncFetcher.submit(
      { action: "sync" },
      { method: "post" }
      // Same route action, no need to specify action path
    );
  }, handleHealthCheck = () => {
    setIsHealthChecking(!0), healthCheckFetcher.submit(
      {},
      { method: "get", action: "/api/health-check" }
    );
  }, handleProductClick = (product) => {
    if (setSelectedProduct(product), setProductModalOpen(!0), setJustAppliedChanges(!1), product.recommendations?.recommendations) {
      console.log("\u{1F4CB} Loading existing recommendations for product:", product.id);
      let existingRecs = product.recommendations.recommendations;
      setRecommendations(existingRecs);
      let approvalState2 = {};
      existingRecs.forEach((rec) => {
        rec.status === "approved" || rec.status === "applied" ? approvalState2[rec.field] = !0 : rec.status === "rejected" && (approvalState2[rec.field] = !1);
      }), setApprovalState(approvalState2);
    } else
      setRecommendations([]), setApprovalState({});
  }, handleGenerateRecommendations = () => {
    selectedProduct && (setIsGeneratingRecommendations(!0), setJustAppliedChanges(!1), recommendationFetcher.submit(
      {
        action: "generate-recommendations",
        productId: selectedProduct.id,
        forceRegenerate: recommendations.length > 0 ? "true" : "false"
        // Force regenerate if called from regenerate button
      },
      { method: "post" }
    ));
  }, handleToggleApproval = (fieldName, newState) => {
    setApprovalState((prev) => ({
      ...prev,
      [fieldName]: newState !== void 0 ? newState : prev[fieldName] === !0 ? !1 : prev[fieldName] === !1 ? void 0 : !0
    }));
  }, handleApplyChanges = () => {
    if (!selectedProduct)
      return;
    let approvedRecommendations = recommendations.filter(
      (rec) => approvalState[rec.field] === !0
    ), rejectedRecommendations = recommendations.filter(
      (rec) => approvalState[rec.field] === !1
    ), pendingRecommendations = recommendations.filter(
      (rec) => approvalState[rec.field] === void 0
    );
    if (console.log("\u{1F4CA} Approval Summary:", {
      total: recommendations.length,
      approved: approvedRecommendations.length,
      rejected: rejectedRecommendations.length,
      pending: pendingRecommendations.length,
      approvedFields: approvedRecommendations.map((r) => r.field),
      rejectedFields: rejectedRecommendations.map((r) => r.field)
    }), approvedRecommendations.length === 0) {
      setToastMessage("Please approve at least one recommendation before applying changes"), setToastActive(!0);
      return;
    }
    console.log("\u{1F680} Starting apply changes..."), console.log("\u{1F4CB} Approved recommendations to apply:", approvedRecommendations), setIsApplyingChanges(!0), recommendationFetcher.submit(
      {
        action: "apply-recommendations",
        productId: selectedProduct.id,
        approvedRecommendations: JSON.stringify(approvedRecommendations)
      },
      { method: "post" }
    );
  };
  if (syncFetcher.data && isSyncing) {
    let data = syncFetcher.data;
    data.success ? (setToastMessage(`Successfully synced ${data.data?.productsCount || 0} products`), setToastActive(!0)) : (setToastMessage(`Sync failed: ${data.error}`), setToastActive(!0)), setIsSyncing(!1);
  }
  if (healthCheckFetcher.data && isHealthChecking) {
    let data = healthCheckFetcher.data;
    data.success ? (setHealthCheckJobId(data.jobId), setHealthModalOpen(!0), setToastMessage(`Health scan initiated - analyzing ${data.currentScore}% current score`), setToastActive(!0)) : (setToastMessage(`Health check failed: ${data.error}`), setToastActive(!0)), setIsHealthChecking(!1);
  }
  if (recommendationFetcher.data && isGeneratingRecommendations) {
    let data = recommendationFetcher.data;
    if (data.success && data.recommendations) {
      if (setRecommendations(data.recommendations), data.isExisting ? setToastMessage(`Loaded existing ${data.recommendations.length} AI recommendations`) : setToastMessage(`Generated ${data.recommendations.length} new AI recommendations`), setToastActive(!0), data.isExisting) {
        let approvalState2 = {};
        data.recommendations.forEach((rec) => {
          rec.status === "approved" || rec.status === "applied" ? approvalState2[rec.field] = !0 : rec.status === "rejected" && (approvalState2[rec.field] = !1);
        }), setApprovalState(approvalState2);
      }
    } else
      data.error && (setToastMessage(`Failed to generate recommendations: ${data.error}`), setToastActive(!0));
    setIsGeneratingRecommendations(!1);
  }
  if (recommendationFetcher.data && isApplyingChanges) {
    let data = recommendationFetcher.data;
    if (console.log("\u{1F50D} Apply changes response:", data), console.log("\u{1F50D} Response type:", typeof data), console.log("\u{1F50D} Response keys:", Object.keys(data)), data.success && selectedProduct) {
      let appliedFields = recommendations.filter((rec) => approvalState[rec.field] === !0).map((rec) => rec.field), getFieldCelebration = (field) => ({
        keywords: "\u{1F3AF} Awesome! Keywords added - your product is now more discoverable!",
        description: "\u{1F4DD} Great work! Enhanced description will help customers understand your product better!",
        features: "\u2728 Fantastic! Feature list added - customers can see what makes your product special!",
        use_cases: "\u{1F4A1} Perfect! Use cases added - customers now know how to use your product!",
        target_audience: "\u{1F465} Excellent! Target audience defined - your marketing just got more focused!",
        material: "\u{1F52C} Nice! Material info added - customers can make informed decisions!",
        dimensions: "\u{1F4CF} Great! Dimensions added - no more size surprises for customers!",
        weight: "\u2696\uFE0F Perfect! Weight information helps with shipping expectations!",
        color: "\u{1F3A8} Colorful! Color info added - visual buyers will love this!",
        brand: "\u{1F3F7}\uFE0F Brand power! Brand info strengthens customer trust!",
        warranty: "\u{1F6E1}\uFE0F Security boost! Warranty info builds customer confidence!",
        sku: "\u{1F4E6} Organized! SKU added for better inventory management!",
        tags: "\u{1F3F7}\uFE0F Tagged! Product categorization just got better!",
        ai_search_queries: "\u{1F916} AI-ready! Search queries optimized for AI discovery!",
        semantic_description: "\u{1F9E0} Smart! AI-optimized description for better search matching!"
      })[field] || `\u2705 ${field.charAt(0).toUpperCase() + field.slice(1).replace(/_/g, " ")} updated!`, message = "";
      appliedFields.length === 1 ? message = getFieldCelebration(appliedFields[0]) : appliedFields.length === 2 ? message = `\u{1F389} Double win! Updated ${appliedFields.map((f) => f.replace(/_/g, " ")).join(" and ")}!` : appliedFields.length >= 3 && (message = `\u{1F680} Amazing progress! Applied ${appliedFields.length} improvements - you're on fire!`);
      let finalScore = selectedProduct.score, pointsEarned = 0;
      if (data.scoreImprovement) {
        finalScore = data.scoreImprovement.final;
        let improvement = data.scoreImprovement.improvement;
        pointsEarned = appliedFields.length * 15, improvement > 0 ? message += ` \u{1F4C8} Score: ${data.scoreImprovement.initial}% \u2192 ${data.scoreImprovement.final}% (+${improvement.toFixed(0)}%) | +${pointsEarned} points!` : message += ` \u{1F4CA} Score: ${data.scoreImprovement.final}%`;
      }
      let updatedGaps = selectedProduct.gaps.filter((gap) => !appliedFields.includes(gap)), updatedSelectedProduct = {
        ...selectedProduct,
        score: finalScore,
        gaps: updatedGaps
      };
      setProducts((prev) => prev.map(
        (p) => p.id === selectedProduct.id ? updatedSelectedProduct : p
      )), setSelectedProduct(updatedSelectedProduct), setRecommendations([]), setApprovalState({}), setJustAppliedChanges(!0);
      let safeMessage = typeof message == "string" && message.length > 0 && !message.match(/^\d{3}$/) ? message : "Changes applied successfully!";
      setToastMessage(safeMessage), setToastActive(!0);
    } else
      data.error ? (setToastMessage(`Failed to apply changes: ${data.error}`), setToastActive(!0)) : (console.error("\u{1F6A8} Unexpected response format:", data), setToastMessage(`Unexpected response: ${JSON.stringify(data)}`), setToastActive(!0));
    setIsApplyingChanges(!1);
  }
  if (customerInputFetcher.data && isSavingCustomerInput) {
    let data = customerInputFetcher.data;
    if (console.log("\u{1F50D} Customer input save response:", data), data.success && selectedProduct) {
      let appliedFields = data.appliedFields || [], appliedCount = data.appliedCount || 0, message = "";
      appliedCount === 1 ? message = `\u{1F389} Great! ${appliedFields[0]?.replace(/_/g, " ")} added to your product specs!` : appliedCount > 1 && (message = `\u{1F680} Excellent! Added ${appliedCount} product specifications!`);
      let estimatedImprovement = appliedCount * 4;
      message += ` \u{1F4C8} Health score boost: ~+${estimatedImprovement}% | +${appliedCount * 15} points!`;
      let updatedGaps = selectedProduct.gaps.filter((gap) => !appliedFields.includes(gap)), updatedScore = Math.min(100, selectedProduct.score + estimatedImprovement), updatedSelectedProduct = {
        ...selectedProduct,
        score: updatedScore,
        gaps: updatedGaps
      };
      setProducts((prev) => prev.map(
        (p) => p.id === selectedProduct.id ? updatedSelectedProduct : p
      )), setSelectedProduct(updatedSelectedProduct), setCustomerInputData({}), setCustomerInputOpen(!1), setJustAppliedChanges(!0), setToastMessage(message), setToastActive(!0);
    } else
      data.error && (setToastMessage(`Failed to save: ${data.error}`), setToastActive(!0));
    setIsSavingCustomerInput(!1);
  }
  let getFieldPlaceholder = (field) => ({
    material: "e.g., Cotton, Polyester, Steel, Wood",
    weight: "e.g., 2.5 lbs, 1.2 kg",
    color: "e.g., Navy Blue, Black, Red",
    size: "e.g., Large, XL, 12x8x4",
    brand: "e.g., Your Brand Name",
    model: "e.g., Model ABC-123",
    upc: "e.g., 123456789012",
    vendor: "e.g., Supplier Company",
    age_range: "e.g., 18-65, Adults, 3+",
    compatibility: "e.g., iPhone 12, Samsung Galaxy",
    warranty: "e.g., 1 year limited warranty",
    return_policy: "e.g., 30-day returns accepted",
    shipping_info: "e.g., Free shipping over $50",
    specifications: "e.g., Power: 110V, Material: ABS Plastic",
    documentation_url: "e.g., https://yoursite.com/manual.pdf",
    video_urls: "e.g., https://youtube.com/watch?v=abc123"
  })[field] || `Enter ${field.replace(/_/g, " ")}`, getFieldHelpText = (field) => ({
    material: "Primary material or fabric composition",
    weight: "Product weight with unit (lbs, kg, oz)",
    color: "Primary color or color options",
    brand: "Manufacturer or brand name",
    warranty: "Warranty terms and duration",
    upc: "Universal Product Code for inventory",
    specifications: "Technical specs, one per line"
  })[field] || "", getFieldPoints = (field) => {
    let fieldCategories = {
      required: 25,
      high: 20,
      medium: 15,
      low: 10
    }, highFields = ["material", "dimensions", "weight", "brand"], mediumFields = ["color", "size", "upc", "compatibility", "age_range", "gender"];
    return highFields.includes(field) ? fieldCategories.high : mediumFields.includes(field) ? fieldCategories.medium : fieldCategories.low;
  }, getFieldImpact = (field) => {
    let highFields = ["material", "dimensions", "weight", "brand"], mediumFields = ["color", "size", "upc", "compatibility", "age_range", "gender"];
    return highFields.includes(field) ? "4-5" : mediumFields.includes(field) ? "3-4" : "2-3";
  }, handleSaveCustomerInput = () => {
    if (!selectedProduct)
      return;
    let validationErrors = [], filledData = {};
    if (Object.entries(customerInputData).forEach(([field, value]) => {
      let trimmedValue = value.trim();
      trimmedValue && (field === "upc" && trimmedValue.length < 8 ? validationErrors.push("UPC must be at least 8 digits") : field === "weight" && !/\d+(\.\d+)?\s*(lbs?|kgs?|oz|pounds?|kilograms?|ounces?)/i.test(trimmedValue) ? validationErrors.push('Weight must include unit (e.g., "2.5 lbs", "1.2 kg")') : (field === "documentation_url" || field === "video_urls") && trimmedValue && !trimmedValue.startsWith("http") ? validationErrors.push(`${field.replace(/_/g, " ")} must be a valid URL starting with http`) : field === "age_range" && trimmedValue && !/\d+/.test(trimmedValue) ? validationErrors.push('Age range must contain numbers (e.g., "18+", "3-12")') : filledData[field] = trimmedValue);
    }), validationErrors.length > 0) {
      setToastMessage(`Validation errors: ${validationErrors.join(", ")}`), setToastActive(!0);
      return;
    }
    if (Object.keys(filledData).length === 0) {
      setToastMessage("Please fill in at least one field before saving"), setToastActive(!0);
      return;
    }
    setIsSavingCustomerInput(!0), customerInputFetcher.submit(
      {
        action: "save-customer-input",
        productId: selectedProduct.id,
        inputData: JSON.stringify(filledData)
      },
      { method: "post" }
    );
  }, filteredProducts = products.filter((product) => !(showOnlyLowHealth && product.score >= 70 || showOnlyNoDescription && product.description && product.description !== "No description")), rows = products.map(
    (product) => [
      product.id,
      product.title,
      product.description.length > 50 ? `${product.description.substring(0, 50)}...` : product.description,
      `${product.score}%`,
      product.gaps.length > 0 ? product.gaps.join(", ") : "None"
    ]
  );
  return /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.Page, { title: "CatalogAI Optimizer Dashboard", children: [
    /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.Layout, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Layout.Section, { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("div", { style: { display: "grid", gridTemplateColumns: "repeat(3, 1fr)", gap: "20px" }, children: [
        /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { align: "center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("div", { style: { position: "relative", width: "80px", height: "80px", marginBottom: "10px" }, children: [
            /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("svg", { width: "80", height: "80", style: { transform: "rotate(-90deg)" }, children: [
              /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("circle", { cx: "40", cy: "40", r: "35", fill: "none", stroke: "#e5e7eb", strokeWidth: "8" }),
              /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
                "circle",
                {
                  cx: "40",
                  cy: "40",
                  r: "35",
                  fill: "none",
                  stroke: dashboardMetrics.aiReadinessScore >= 90 ? "#10b981" : dashboardMetrics.aiReadinessScore >= 50 ? "#f59e0b" : "#ef4444",
                  strokeWidth: "8",
                  strokeDasharray: `${dashboardMetrics.aiReadinessScore / 100 * 220} 220`,
                  strokeLinecap: "round"
                }
              )
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("div", { style: {
              position: "absolute",
              top: "50%",
              left: "50%",
              transform: "translate(-50%, -50%)",
              fontSize: "18px",
              fontWeight: "bold",
              color: dashboardMetrics.aiReadinessScore >= 90 ? "#10b981" : dashboardMetrics.aiReadinessScore >= 50 ? "#f59e0b" : "#ef4444"
            }, children: [
              dashboardMetrics.aiReadinessScore,
              "%"
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.Text, { variant: "headingLg", as: "p", children: [
            dashboardMetrics.aiReadinessScore,
            " / 100"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "bodyMd", tone: "subdued", as: "p", children: "Excellent AI readiness" })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { align: "center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.Text, { variant: "headingLg", as: "p", children: [
            dashboardMetrics.productsPassedPercentage,
            "%"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.Text, { variant: "bodyMd", as: "p", children: [
            dashboardMetrics.validProducts,
            " of ",
            dashboardMetrics.totalProducts,
            " products"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "bodySm", tone: "success", as: "p", children: "\u2191 5% from last week" })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { align: "center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "headingLg", as: "p", children: dashboardMetrics.lastSyncTime ? `${Math.floor((Date.now() - new Date(dashboardMetrics.lastSyncTime).getTime()) / (1e3 * 60 * 60))}h ago` : "Never" }),
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "bodyMd", as: "p", children: "Last synced successfully" })
        ] }) })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Layout.Section, { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "headingLg", as: "h2", children: "Feed Health" }),
        /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "bodyMd", tone: "subdued", as: "p", children: "Product validation distribution" }),
        /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("div", { style: { marginTop: "20px" }, children: [
          /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("div", { style: { display: "flex", alignItems: "center", marginBottom: "10px" }, children: [
            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("div", { style: {
              width: `${dashboardMetrics.validProducts / dashboardMetrics.totalProducts * 200}px`,
              height: "8px",
              background: "#10b981",
              borderRadius: "4px",
              marginRight: "10px",
              minWidth: "20px"
            } }),
            /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.Text, { variant: "bodyMd", as: "p", children: [
              dashboardMetrics.validProducts,
              " products"
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("div", { style: { display: "flex", alignItems: "center", marginBottom: "10px" }, children: [
            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("div", { style: {
              width: `${dashboardMetrics.warningProducts / dashboardMetrics.totalProducts * 200}px`,
              height: "8px",
              background: "#f59e0b",
              borderRadius: "4px",
              marginRight: "10px",
              minWidth: "20px"
            } }),
            /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.Text, { variant: "bodyMd", as: "p", children: [
              dashboardMetrics.warningProducts,
              " products"
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("div", { style: { display: "flex", alignItems: "center", marginBottom: "20px" }, children: [
            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("div", { style: {
              width: `${dashboardMetrics.invalidProducts / dashboardMetrics.totalProducts * 200}px`,
              height: "8px",
              background: "#ef4444",
              borderRadius: "4px",
              marginRight: "10px",
              minWidth: "20px"
            } }),
            /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.Text, { variant: "bodyMd", as: "p", children: [
              dashboardMetrics.invalidProducts,
              " products"
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Button, { variant: "primary", children: "View Validation Report" })
        ] })
      ] }) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Layout.Section, { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "headingLg", as: "h2", children: "Next Actions" }),
        /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "bodyMd", tone: "subdued", as: "p", children: "Recommended optimizations for your catalog" }),
        /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("div", { style: {
          display: "grid",
          gridTemplateColumns: "repeat(2, 1fr)",
          gap: "20px",
          marginTop: "20px"
        }, children: [
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.Text, { variant: "bodyMd", as: "p", children: [
              dashboardMetrics.invalidProducts,
              " products need attention"
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Button, { variant: "primary", tone: "critical", children: "Take Action" })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.Text, { variant: "bodyMd", as: "p", children: [
              "Optimize ",
              dashboardMetrics.warningProducts,
              " products"
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Button, { variant: "primary", children: "Take Action" })
          ] }) })
        ] })
      ] }) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Layout.Section, { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("div", { style: { marginBottom: "10px" }, children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("div", { style: {
          width: "100%",
          height: "8px",
          background: "#e5e7eb",
          borderRadius: "4px",
          overflow: "hidden"
        }, children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("div", { style: {
          width: `${dashboardMetrics.optimizationProgress}%`,
          height: "100%",
          background: "#3b82f6",
          transition: "width 0.3s ease"
        } }) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("div", { style: { display: "flex", justifyContent: "space-between", alignItems: "center" }, children: [
          /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.Text, { variant: "bodyMd", as: "p", children: [
            "Your catalog is ",
            dashboardMetrics.optimizationProgress,
            "% AI-ready \u2014 ",
            100 - dashboardMetrics.optimizationProgress,
            "% left to optimize!"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.Text, { variant: "bodyMd", tone: "subdued", as: "p", children: [
            dashboardMetrics.optimizationProgress,
            "% Complete"
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("div", { style: { marginTop: "5px" }, children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "bodySm", tone: "subdued", as: "p", children: "Keep going! \u{1F680}" }) })
      ] }) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Layout.Section, { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.InlineStack, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "headingLg", as: "h2", children: "\u{1F4E6} Product Catalog" }),
            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "bodyMd", tone: "subdued", as: "p", children: "Browse and manage your product inventory" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.InlineStack, { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
            import_polaris2.Button,
            {
              onClick: handleSync,
              loading: isSyncing,
              variant: "primary",
              size: "large",
              children: isSyncing ? "Syncing..." : "\u{1F504} Sync Products"
            }
          ) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.InlineStack, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.InlineStack, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "bodyMd", tone: "subdued", as: "p", children: "Filter by:" }),
            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
              import_polaris2.Button,
              {
                variant: showOnlyLowHealth ? "primary" : "tertiary",
                size: "slim",
                onClick: () => setShowOnlyLowHealth(!showOnlyLowHealth),
                children: "\u{1F6A8} Low Health Only"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
              import_polaris2.Button,
              {
                variant: showOnlyNoDescription ? "primary" : "tertiary",
                size: "slim",
                onClick: () => setShowOnlyNoDescription(!showOnlyNoDescription),
                children: "\u{1F4DD} Missing Descriptions"
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.Text, { variant: "bodySm", tone: "subdued", as: "p", children: [
            "Showing ",
            filteredProducts.length,
            " of ",
            products.length,
            " products"
          ] })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
          "div",
          {
            className: "product-grid",
            style: {
              display: "grid",
              gridTemplateColumns: "repeat(auto-fit, minmax(350px, 1fr))",
              gap: "20px",
              marginTop: "20px",
              width: "100%"
            },
            children: filteredProducts.map(
              (product, index) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
                import_polaris2.Card,
                {
                  children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.InlineStack, { children: [
                    /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.InlineStack, { children: [
                      /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
                        /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
                          import_polaris2.Button,
                          {
                            variant: "plain",
                            onClick: () => handleProductClick(product),
                            children: product.title
                          }
                        ),
                        /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.Text, { variant: "bodySm", tone: "subdued", as: "p", children: [
                          "ID: ",
                          product.id
                        ] })
                      ] }),
                      /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
                        /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "bodyMd", as: "p", children: product.description && product.description !== "No description" ? product.description.length > 100 ? `${product.description.substring(0, 100)}...` : product.description : /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { tone: "subdued", variant: "bodyMd", as: "p", children: "No description available" }) }),
                        product.gaps.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.InlineStack, { wrap: !0, children: [
                          product.gaps.slice(0, 3).map(
                            (gap, gapIndex) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Badge, { tone: "warning", size: "small", children: gap }, gapIndex)
                          ),
                          product.gaps.length > 3 && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Badge, { tone: "info", size: "small", children: `+${product.gaps.length - 3} more` })
                        ] })
                      ] })
                    ] }),
                    /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
                      /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.InlineStack, { children: [
                        /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
                          import_polaris2.ProgressBar,
                          {
                            progress: product.score,
                            size: "small"
                          }
                        ),
                        /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
                          import_polaris2.Badge,
                          {
                            tone: product.score >= 90 ? "success" : product.score >= 70 ? "warning" : "critical",
                            size: "small",
                            children: `${product.score}%`
                          }
                        )
                      ] }),
                      /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
                        import_polaris2.Button,
                        {
                          size: "slim",
                          variant: "primary",
                          onClick: () => handleProductClick(product),
                          children: "\u{1F527} Optimize"
                        }
                      )
                    ] })
                  ] })
                },
                product.id
              )
            )
          }
        ),
        filteredProducts.length === 0 && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "headingMd", as: "h3", children: "\u{1F389} No products match your filters!" }),
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "bodyMd", tone: "subdued", as: "p", children: showOnlyLowHealth ? "All your products are healthy! Great job maintaining your catalog." : showOnlyNoDescription ? "All your products have descriptions! Your catalog is well-documented." : "No products found matching your current filters." }),
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
            import_polaris2.Button,
            {
              variant: "tertiary",
              onClick: () => {
                setShowOnlyLowHealth(!1), setShowOnlyNoDescription(!1);
              },
              children: "Clear Filters"
            }
          )
        ] }) })
      ] }) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Layout.Section, { variant: "oneHalf", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "headingMd", as: "h3", children: "Quick Actions" }),
        /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
            import_polaris2.Button,
            {
              fullWidth: !0,
              onClick: handleHealthCheck,
              loading: isHealthChecking,
              variant: averageScore < 90 ? "primary" : "secondary",
              children: averageScore < 90 ? "Quick Scan Now" : "Run Health Check"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Button, { fullWidth: !0, children: "Generate Feed" }),
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Button, { fullWidth: !0, children: "View Analytics" })
        ] })
      ] }) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Layout.Section, { variant: "oneHalf", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "headingMd", as: "h3", children: "Recent Activity" }),
        /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.BlockStack, { children: recentLogs.length > 0 ? recentLogs.map(
          (log) => /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.Text, { as: "span", children: [
              log.type === "sync" && "\u{1F504} ",
              log.type === "push" && "\u{1F4E4} ",
              log.type === "error" && "\u274C ",
              log.type === "health_scan" && "\u{1F50D} ",
              log.type === "auto_fix" && "\u{1F527} ",
              log.type === "ai_enrichment" && "\u{1F916} ",
              log.type === "settings_update" && "\u2699\uFE0F ",
              log.message
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { as: "p", variant: "bodySm", tone: "subdued", children: new Date(log.createdAt).toLocaleString() })
          ] }, log.id)
        ) : /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { as: "p", tone: "subdued", children: "No recent activity" }) })
      ] }) }) })
    ] }),
    toastActive && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
      import_polaris2.Toast,
      {
        content: toastMessage,
        onDismiss: () => setToastActive(!1)
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
      HealthCheckModal,
      {
        isOpen: healthModalOpen,
        onClose: () => setHealthModalOpen(!1),
        jobId: healthCheckJobId,
        currentScore: averageScore,
        currentGaps: []
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
      import_polaris2.Modal,
      {
        open: productModalOpen,
        onClose: () => setProductModalOpen(!1),
        title: "",
        size: "large",
        primaryAction: {
          content: "Close",
          onAction: () => setProductModalOpen(!1)
        },
        children: selectedProduct && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Modal.Section, { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.InlineStack, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.Text, { variant: "headingLg", as: "h2", children: [
                  "\u{1F4E6} ",
                  selectedProduct.title
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.Text, { variant: "bodyMd", tone: "subdued", as: "p", children: [
                  "Product ID: ",
                  selectedProduct.id
                ] }),
                selectedProduct.description && selectedProduct.description !== "No description" && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "bodyMd", as: "p", children: selectedProduct.description })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(
                  import_polaris2.Badge,
                  {
                    tone: selectedProduct.score >= 90 ? "success" : selectedProduct.score >= 70 ? "warning" : "critical",
                    size: "large",
                    children: [
                      selectedProduct.score,
                      "% Health"
                    ]
                  }
                ),
                justAppliedChanges && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Badge, { tone: "success", size: "small", children: "\u2728 Just Updated!" })
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.Box, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.InlineStack, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "bodyMd", tone: "subdued", as: "p", children: "Overall Health Progress" }),
                /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "bodyMd", tone: "subdued", as: "p", children: `${Math.round(selectedProduct.score / 100 * 500)} / 500 points` })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Box, { paddingBlockStart: "200", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
                import_polaris2.ProgressBar,
                {
                  progress: selectedProduct.score,
                  size: "large"
                }
              ) })
            ] })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "headingMd", as: "h3", children: "\u{1F4CA} Category Breakdown" }),
            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.InlineStack, { children: [
              {
                name: "\u{1F6A8} Required Fields",
                icon: "\u{1F6A8}",
                fields: ["title", "description", "price", "availability", "category"],
                color: "critical",
                description: "Essential for product visibility"
              },
              {
                name: "\u26A1 High Priority",
                icon: "\u26A1",
                fields: ["material", "dimensions", "weight", "brand", "use_cases", "features", "image_urls"],
                color: "warning",
                description: "Important for customer decisions"
              },
              {
                name: "\u{1F4CB} Medium Priority",
                icon: "\u{1F4CB}",
                fields: ["color", "size", "target_audience", "keywords", "upc", "compatibility", "age_range", "gender", "video_urls"],
                color: "attention",
                description: "Enhances product discovery"
              },
              {
                name: "\u2728 Enhancement",
                icon: "\u2728",
                fields: ["model", "sku", "tags", "vendor", "warranty", "return_policy", "shipping_info", "documentation_url", "specifications", "ai_search_queries", "semantic_description"],
                color: "success",
                description: "Optimizes for AI search"
              }
            ].map((category, index) => {
              let missingInCategory = selectedProduct.gaps.filter((gap) => category.fields.includes(gap)).length, completedInCategory = category.fields.length - missingInCategory, progress = Math.round(completedInCategory / category.fields.length * 100);
              return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.InlineStack, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.InlineStack, { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.Text, { variant: "headingSm", as: "h4", children: [
                    category.icon,
                    " ",
                    category.name
                  ] }),
                  /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "bodySm", tone: "subdued", as: "p", children: category.description }),
                  /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.InlineStack, { wrap: !0, children: [
                    /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.Text, { variant: "bodySm", as: "p", children: [
                      completedInCategory,
                      "/",
                      category.fields.length,
                      " complete"
                    ] }),
                    missingInCategory > 0 && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Badge, { tone: "warning", size: "small", children: `${missingInCategory} missing` })
                  ] })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
                    import_polaris2.ProgressBar,
                    {
                      progress,
                      size: "small"
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "bodySm", tone: "subdued", as: "p", children: `${progress}% complete` })
                ] })
              ] }) }, index);
            }) })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.InlineStack, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "headingMd", as: "h3", children: "\u{1F50D} Missing Fields Analysis" }),
              selectedProduct.gaps.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Badge, { tone: "success", size: "large", children: "\u{1F389} Perfect Score!" }) : /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Badge, { tone: "critical", size: "large", children: `${selectedProduct.gaps.length} fields missing` })
            ] }),
            selectedProduct.gaps.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "bodyMd", tone: "subdued", as: "p", children: "These fields are missing and could improve your product's visibility and AI search performance:" }),
              /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.InlineStack, { wrap: !0, children: selectedProduct.gaps.map(
                (gap, index) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Badge, { tone: "warning", size: "small", children: gap.replace(/_/g, " ") }, index)
              ) })
            ] }) : /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "bodyMd", tone: "success", as: "p", children: "\u{1F389} Congratulations! Your product has all the essential fields completed." }),
              /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "bodySm", tone: "subdued", as: "p", children: "This product is optimized for search engines and AI-powered discovery." })
            ] })
          ] }) }),
          selectedProduct.gaps.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.InlineStack, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "headingMd", as: "h3", children: "\u{1F916} AI Recommendations" }),
              recommendations.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
                import_polaris2.Button,
                {
                  onClick: () => {
                    setRecommendations([]), setApprovalState({}), handleGenerateRecommendations();
                  },
                  variant: "secondary",
                  size: "slim",
                  loading: isGeneratingRecommendations,
                  children: "\u{1F504} Regenerate"
                }
              )
            ] }),
            recommendations.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "bodyMd", tone: "subdued", as: "p", children: "\u{1F3AF} Ready to improve your product's health score?" }),
                /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "bodySm", tone: "subdued", as: "p", children: "Our AI will analyze your missing fields and suggest improvements for:" }),
                /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.InlineStack, { wrap: !0, children: [
                  selectedProduct.gaps.slice(0, 5).map(
                    (gap, index) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Badge, { tone: "warning", size: "small", children: gap.replace(/_/g, " ") }, index)
                  ),
                  selectedProduct.gaps.length > 5 && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Badge, { tone: "info", size: "small", children: `+${selectedProduct.gaps.length - 5} more` })
                ] })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
                import_polaris2.Button,
                {
                  onClick: handleGenerateRecommendations,
                  variant: "primary",
                  size: "large",
                  loading: isGeneratingRecommendations,
                  children: isGeneratingRecommendations ? "\u{1F916} Generating..." : "\u{1F680} Generate AI Recommendations"
                }
              )
            ] }) : /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
              selectedProduct.recommendations?.generatedAt && /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.Text, { variant: "bodySm", tone: "subdued", as: "p", children: [
                "Generated: ",
                new Date(selectedProduct.recommendations.generatedAt).toLocaleString()
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "bodyMd", tone: "subdued", as: "p", children: "Review and approve the AI-generated suggestions below. Only approved changes will be applied to your product." })
            ] })
          ] }) }),
          recommendations.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.InlineStack, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "headingMd", as: "h3", children: "\u270F\uFE0F Review & Approve Recommendations" }),
              /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.InlineStack, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Badge, { tone: "success", size: "small", children: `${Object.values(approvalState).filter(Boolean).length} approved` }),
                /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Badge, { tone: "critical", size: "small", children: `${Object.values(approvalState).filter((val) => val === !1).length} rejected` })
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "bodyMd", tone: "subdued", as: "p", children: "Review each AI suggestion below. Use \u2705 to approve or \u274C to reject. Only approved changes will be applied to your product." }),
            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.InlineStack, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "bodyMd", tone: "subdued", as: "p", children: "Quick Actions:" }),
              /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.InlineStack, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
                  import_polaris2.Button,
                  {
                    size: "slim",
                    variant: "secondary",
                    tone: "success",
                    onClick: () => {
                      let allApproved = recommendations.reduce((acc, rec) => ({
                        ...acc,
                        [rec.field]: !0
                      }), {});
                      setApprovalState(allApproved);
                    },
                    children: "\u2705 Approve All"
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
                  import_polaris2.Button,
                  {
                    size: "slim",
                    variant: "secondary",
                    tone: "critical",
                    onClick: () => {
                      let allRejected = recommendations.reduce((acc, rec) => ({
                        ...acc,
                        [rec.field]: !1
                      }), {});
                      setApprovalState(allRejected);
                    },
                    children: "\u274C Reject All"
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
                  import_polaris2.Button,
                  {
                    size: "slim",
                    variant: "secondary",
                    onClick: () => setApprovalState({}),
                    children: "Clear All"
                  }
                )
              ] })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.BlockStack, { children: recommendations.map((rec, index) => {
              let isApproved = approvalState[rec.field] === !0, isRejected = approvalState[rec.field] === !1, isPending = approvalState[rec.field] === void 0, isApplied = rec.status === "applied", fieldInfo = ((field) => {
                let fieldCategories = {
                  required: { fields: ["title", "description", "price", "availability", "category"], points: "25", impact: "5-6%", color: "critical", icon: "\u{1F6A8}" },
                  high: { fields: ["material", "dimensions", "weight", "brand", "use_cases", "features", "image_urls"], points: "20", impact: "4-5%", color: "warning", icon: "\u26A1" },
                  medium: { fields: ["color", "size", "target_audience", "keywords", "upc", "compatibility", "age_range", "gender", "video_urls"], points: "15", impact: "3-4%", color: "attention", icon: "\u{1F4CB}" },
                  low: { fields: ["model", "sku", "tags", "vendor", "warranty", "return_policy", "shipping_info", "documentation_url", "specifications", "ai_search_queries", "semantic_description"], points: "10", impact: "2-3%", color: "info", icon: "\u2728" }
                };
                for (let [category, info] of Object.entries(fieldCategories))
                  if (info.fields.includes(field))
                    return { category, ...info };
                return { category: "low", fields: [], points: "10", impact: "2%", color: "info", icon: "\u2728" };
              })(rec.field);
              return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.InlineStack, { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
                    /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.InlineStack, { children: [
                      /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.Text, { variant: "headingSm", as: "h4", children: [
                        fieldInfo.icon,
                        " ",
                        rec.field.charAt(0).toUpperCase() + rec.field.slice(1).replace(/_/g, " ")
                      ] }),
                      /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Badge, { tone: fieldInfo.color, size: "small", children: fieldInfo.category.charAt(0).toUpperCase() + fieldInfo.category.slice(1) })
                    ] }),
                    /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.InlineStack, { wrap: !0, children: [
                      /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.Badge, { tone: "info", size: "small", children: [
                        "+",
                        fieldInfo.points,
                        " pts"
                      ] }),
                      /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.Badge, { tone: "subdued", size: "small", children: [
                        "~",
                        fieldInfo.impact,
                        " impact"
                      ] }),
                      isApplied && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Badge, { tone: "success", size: "small", children: "\u{1F680} Applied" }),
                      !isApplied && isApproved && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Badge, { tone: "success", size: "small", children: "\u2705 Approved" }),
                      !isApplied && isRejected && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Badge, { tone: "critical", size: "small", children: "\u274C Rejected" }),
                      !isApplied && isPending && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Badge, { tone: "attention", size: "small", children: "\u23F3 Pending" })
                    ] })
                  ] }),
                  !isApplied && /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.InlineStack, { children: [
                    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
                      import_polaris2.Button,
                      {
                        size: "slim",
                        onClick: () => handleToggleApproval(rec.field, !1),
                        variant: isRejected ? "primary" : "secondary",
                        tone: isRejected ? "critical" : void 0,
                        children: isRejected ? "\u274C Rejected" : "\u274C Reject"
                      }
                    ),
                    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
                      import_polaris2.Button,
                      {
                        size: "slim",
                        onClick: () => handleToggleApproval(rec.field, !0),
                        variant: isApproved ? "primary" : "secondary",
                        tone: isApproved ? "success" : void 0,
                        children: isApproved ? "\u2705 Approved" : "\u2705 Approve"
                      }
                    )
                  ] })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.InlineStack, { children: [
                    /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
                      /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "bodyMd", tone: "subdued", as: "p", children: "Current Value" }),
                      /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Box, { padding: "200", borderRadius: "100", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "bodySm", as: "p", children: rec.originalValue || /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { tone: "subdued", as: "p", children: "(empty)" }) }) })
                    ] }),
                    /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
                      /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "bodyMd", tone: "success", as: "p", children: "AI Recommendation" }),
                      /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Box, { padding: "200", borderRadius: "100", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "bodySm", as: "p", children: rec.newValue }) })
                    ] })
                  ] }),
                  /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.Text, { variant: "bodySm", tone: "subdued", as: "p", children: [
                    "\u{1F4A1} ",
                    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("em", { children: rec.improvement })
                  ] })
                ] }) })
              ] }) }, index);
            }) }),
            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.InlineStack, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "bodyMd", tone: "subdued", as: "p", children: "Ready to apply your approved changes?" }),
                /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.Text, { variant: "bodySm", tone: "subdued", as: "p", children: [
                  recommendations.filter(
                    (rec) => rec.status !== "applied" && approvalState[rec.field] === !0
                  ).length,
                  " changes approved for application"
                ] })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.InlineStack, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
                  import_polaris2.Button,
                  {
                    onClick: () => setRecommendations([]),
                    variant: "secondary",
                    children: "Cancel"
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
                  import_polaris2.Button,
                  {
                    variant: "primary",
                    size: "large",
                    onClick: handleApplyChanges,
                    loading: isApplyingChanges,
                    disabled: recommendations.filter(
                      (rec) => rec.status !== "applied" && approvalState[rec.field] === !0
                    ).length === 0,
                    children: isApplyingChanges ? "\u{1F680} Applying..." : `\u2705 Apply ${recommendations.filter(
                      (rec) => rec.status !== "applied" && approvalState[rec.field] === !0
                    ).length} Changes`
                  }
                )
              ] })
            ] }) })
          ] }) }),
          selectedProduct.gaps.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.InlineStack, { align: "space-between", children: [
              /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "headingMd", as: "h3", children: "Manual Product Information" }),
                /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "bodySm", tone: "subdued", as: "p", children: "Fill in product specs that only you know. These can't be generated by AI." })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
                import_polaris2.Button,
                {
                  onClick: () => setCustomerInputOpen(!customerInputOpen),
                  variant: "secondary",
                  size: "slim",
                  children: customerInputOpen ? "Hide Fields" : "Add Product Info"
                }
              )
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Collapsible, { id: "customer-input-collapsible", open: customerInputOpen, children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
              selectedProduct.gaps.filter((gap) => getFieldInputType(gap) === "customer_required").map((field, index) => {
                let label = FIELD_LABELS[field] || field.charAt(0).toUpperCase() + field.slice(1).replace(/_/g, " ");
                return /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.Box, { children: [
                  field === "dimensions" ? /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
                    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "bodySm", as: "p", children: label }),
                    /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.InlineStack, { gap: "300", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
                        import_polaris2.TextField,
                        {
                          label: "Length",
                          value: customerInputData[`${field}_length`] || "",
                          onChange: (value) => setCustomerInputData((prev) => ({
                            ...prev,
                            [`${field}_length`]: value
                          })),
                          placeholder: "e.g., 12 inches",
                          autoComplete: "off"
                        }
                      ),
                      /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
                        import_polaris2.TextField,
                        {
                          label: "Width",
                          value: customerInputData[`${field}_width`] || "",
                          onChange: (value) => setCustomerInputData((prev) => ({
                            ...prev,
                            [`${field}_width`]: value
                          })),
                          placeholder: "e.g., 8 inches",
                          autoComplete: "off"
                        }
                      ),
                      /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
                        import_polaris2.TextField,
                        {
                          label: "Height",
                          value: customerInputData[`${field}_height`] || "",
                          onChange: (value) => setCustomerInputData((prev) => ({
                            ...prev,
                            [`${field}_height`]: value
                          })),
                          placeholder: "e.g., 4 inches",
                          autoComplete: "off"
                        }
                      )
                    ] })
                  ] }) : field === "gender" ? /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
                    import_polaris2.Select,
                    {
                      label,
                      options: [
                        { label: "Select target gender", value: "" },
                        { label: "Male", value: "male" },
                        { label: "Female", value: "female" },
                        { label: "Unisex", value: "unisex" },
                        { label: "Kids", value: "kids" }
                      ],
                      value: customerInputData[field] || "",
                      onChange: (value) => setCustomerInputData((prev) => ({
                        ...prev,
                        [field]: value
                      }))
                    }
                  ) : /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
                    import_polaris2.TextField,
                    {
                      label,
                      value: customerInputData[field] || "",
                      onChange: (value) => setCustomerInputData((prev) => ({
                        ...prev,
                        [field]: value
                      })),
                      placeholder: getFieldPlaceholder(field),
                      helpText: getFieldHelpText(field),
                      multiline: field === "specifications" || field === "warranty" || field === "return_policy",
                      autoComplete: "off"
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Box, { paddingBlockStart: "200", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.InlineStack, { gap: "200", blockAlign: "center", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.Text, { variant: "bodySm", tone: "subdued", as: "p", children: [
                      "Impact: +",
                      getFieldPoints(field),
                      " points, ~",
                      getFieldImpact(field),
                      "% health boost"
                    ] }),
                    customerInputData[field] && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Badge, { tone: "success", size: "small", children: "\u2705 Ready to save" })
                  ] }) })
                ] }, index);
              }),
              Object.keys(customerInputData).length > 0 && /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.InlineStack, { align: "end", children: [
                /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Button, { onClick: () => setCustomerInputData({}), children: "Clear All" }),
                /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(
                  import_polaris2.Button,
                  {
                    variant: "primary",
                    onClick: handleSaveCustomerInput,
                    loading: isSavingCustomerInput,
                    children: [
                      "Save ",
                      Object.values(customerInputData).filter((v) => v.trim()).length,
                      " Fields"
                    ]
                  }
                )
              ] })
            ] }) })
          ] }) }),
          selectedProduct.score >= 90 && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_polaris2.BlockStack, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "headingMd", as: "h3", children: selectedProduct.score === 100 ? "\u{1F389} Perfect Product Health!" : "\u2705 Product Health: Excellent" }),
            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { as: "p", children: selectedProduct.score === 100 ? "Congratulations! This product has achieved perfect health with all OpenAI spec requirements met." : "This product has a high health score and does not need immediate attention." }),
            selectedProduct.gaps.length === 0 && selectedProduct.score === 100 && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_polaris2.Text, { variant: "bodySm", tone: "success", as: "p", children: "\u{1F680} Ready for OpenAI ChatGPT discovery!" })
          ] }) })
        ] }) })
      }
    )
  ] });
}

// app/routes/api.settings.ts
var api_settings_exports = {};
__export(api_settings_exports, {
  action: () => action3,
  loader: () => loader5
});
var import_node6 = require("@remix-run/node");
init_shopify_server();
init_db();
var loader5 = async ({ request: request2 }) => {
  try {
    let { session } = await authenticate.admin(request2), user = await db.user.findUnique({
      where: { shopId: session.shop }
    });
    return user ? (0, import_node6.json)({
      success: !0,
      settings: {
        healthChecksEnabled: !0,
        healthCheckTime: "02:00",
        // 2 AM UTC
        autoFixEnabled: !0,
        emailNotifications: !0,
        maxProductsPerScan: user.tier === "enterprise" ? 500 : 100,
        includeUrlPings: !0,
        includeInventoryChecks: !0,
        includeValidation: !0
      }
    }) : (0, import_node6.json)({
      success: !1,
      error: "User not found"
    }, { status: 404 });
  } catch (error) {
    return console.error("Settings API error:", error), (0, import_node6.json)({
      success: !1,
      error: error instanceof Error ? error.message : "Failed to fetch settings"
    }, { status: 500 });
  }
}, action3 = async ({ request: request2 }) => {
  try {
    let { session } = await authenticate.admin(request2), formData = await request2.formData(), action8 = formData.get("action"), user = await db.user.findUnique({
      where: { shopId: session.shop }
    });
    if (!user)
      return (0, import_node6.json)({
        success: !1,
        error: "User not found"
      }, { status: 404 });
    if (action8 === "update") {
      let healthChecksEnabled = formData.get("healthChecksEnabled") === "true", healthCheckTime = formData.get("healthCheckTime"), autoFixEnabled = formData.get("autoFixEnabled") === "true", emailNotifications = formData.get("emailNotifications") === "true", maxProductsPerScan = parseInt(formData.get("maxProductsPerScan")) || 100, includeUrlPings = formData.get("includeUrlPings") === "true", includeInventoryChecks = formData.get("includeInventoryChecks") === "true", includeValidation = formData.get("includeValidation") === "true";
      return await db.log.create({
        data: {
          userId: user.id,
          type: "settings_update",
          message: `Settings updated: health checks ${healthChecksEnabled ? "enabled" : "disabled"}, auto-fix ${autoFixEnabled ? "enabled" : "disabled"}`,
          metadata: {
            healthChecksEnabled,
            healthCheckTime,
            autoFixEnabled,
            emailNotifications,
            maxProductsPerScan,
            includeUrlPings,
            includeInventoryChecks,
            includeValidation
          }
        }
      }), (0, import_node6.json)({
        success: !0,
        message: "Settings updated successfully"
      });
    }
    return (0, import_node6.json)({
      success: !1,
      error: "Invalid action"
    }, { status: 400 });
  } catch (error) {
    return console.error("Settings action error:", error), (0, import_node6.json)({
      success: !1,
      error: error instanceof Error ? error.message : "Failed to update settings"
    }, { status: 500 });
  }
};

// app/routes/api.validate.ts
var api_validate_exports = {};
__export(api_validate_exports, {
  action: () => action4
});
var import_node7 = require("@remix-run/node");
init_shopify_server();
init_shopifySync();
init_fieldMapper();

// app/utils/validator.ts
var import_ajv2 = __toESM(require("ajv")), import_ajv_formats2 = __toESM(require("ajv-formats")), import_axios2 = __toESM(require("axios"));
init_openaiSpec();
var ajv2 = new import_ajv2.default({ allErrors: !0 });
(0, import_ajv_formats2.default)(ajv2);
var validate = ajv2.compile(OPENAI_PRODUCT_SCHEMA);
function validateProduct(product) {
  let errors = [], warnings = [];
  if (!validate(product) && validate.errors)
    for (let error of validate.errors)
      errors.push({
        field: error.instancePath ? error.instancePath.slice(1) : "root",
        message: error.message || "Validation error",
        value: error.data
      });
  return validateDescription(product, warnings), validatePrice(product, errors), validateImageUrls(product, warnings), validateLinks(product, warnings), {
    valid: errors.length === 0,
    errors,
    warnings
  };
}
function validateDescription(product, warnings) {
  if (!product.description)
    return;
  let desc = product.description;
  /<[^>]*>/g.test(desc) && warnings.push({
    field: "description",
    message: "Description contains HTML tags",
    suggestion: "Use plain text for better AI search compatibility"
  }), desc.length < 100 && warnings.push({
    field: "description",
    message: "Description is too short",
    suggestion: "Add more details about features, benefits, and use cases"
  }), desc.length > 4e3 && warnings.push({
    field: "description",
    message: "Description is too long",
    suggestion: "Consider shortening to under 4000 characters"
  });
  let genericPhrases = [
    "great product",
    "high quality",
    "perfect for",
    "amazing",
    "wonderful",
    "excellent"
  ], lowerDesc = desc.toLowerCase();
  genericPhrases.filter((phrase) => lowerDesc.includes(phrase)).length > 2 && warnings.push({
    field: "description",
    message: "Description contains too many generic phrases",
    suggestion: "Use more specific, descriptive language"
  });
}
function validatePrice(product, errors) {
  if (!product.price)
    return;
  /^\d+\.\d{2} [A-Z]{3}$/.test(product.price) || errors.push({
    field: "price",
    message: 'Price must be in format "XX.XX USD"',
    value: product.price
  });
}
async function validateImageUrls(product, warnings) {
  if (!(!product.image_urls || product.image_urls.length === 0))
    for (let [index, url] of product.image_urls.entries())
      try {
        let response = await import_axios2.default.head(url, { timeout: 5e3 });
        response.status !== 200 && warnings.push({
          field: `image_urls[${index}]`,
          message: `Image URL returned status ${response.status}`,
          suggestion: "Check if the image URL is accessible"
        });
        let contentType = response.headers["content-type"];
        contentType && !contentType.startsWith("image/") && warnings.push({
          field: `image_urls[${index}]`,
          message: "URL does not appear to be an image",
          suggestion: "Ensure the URL points to an image file"
        });
      } catch {
        warnings.push({
          field: `image_urls[${index}]`,
          message: "Failed to validate image URL",
          suggestion: "Check if the URL is accessible and points to an image"
        });
      }
}
async function validateLinks(product, warnings) {
  let linksToValidate = [];
  product.documentation_url && linksToValidate.push({ url: product.documentation_url, field: "documentation_url" }), product.video_urls && product.video_urls.forEach((url, index) => {
    linksToValidate.push({ url, field: `video_urls[${index}]` });
  });
  for (let { url, field } of linksToValidate)
    try {
      let response = await import_axios2.default.head(url, { timeout: 5e3 });
      response.status !== 200 && warnings.push({
        field,
        message: `Link returned status ${response.status}`,
        suggestion: "Check if the link is accessible"
      });
    } catch {
      warnings.push({
        field,
        message: "Failed to validate link",
        suggestion: "Check if the link is accessible"
      });
    }
}
async function validateProducts(products) {
  let results = [];
  for (let product of products) {
    let result = validateProduct(product);
    results.push(result);
  }
  return results;
}
function getValidationSummary(results) {
  let totalProducts = results.length, validProducts = results.filter((r) => r.valid).length, totalErrors = results.reduce((sum, r) => sum + r.errors.length, 0), totalWarnings = results.reduce((sum, r) => sum + r.warnings.length, 0), commonErrors = getCommonIssues(results.map((r) => r.errors).flat(), "error"), commonWarnings = getCommonIssues(results.map((r) => r.warnings).flat(), "warning");
  return {
    totalProducts,
    validProducts,
    invalidProducts: totalProducts - validProducts,
    totalErrors,
    totalWarnings,
    validationRate: totalProducts > 0 ? Math.round(validProducts / totalProducts * 100) : 0,
    commonErrors,
    commonWarnings
  };
}
function getCommonIssues(issues, type) {
  let fieldCounts = /* @__PURE__ */ new Map();
  for (let issue of issues) {
    let key = issue.field;
    fieldCounts.has(key) ? fieldCounts.get(key).count++ : fieldCounts.set(key, { count: 1, message: issue.message });
  }
  return Array.from(fieldCounts.entries()).map(([field, data]) => ({ field, ...data })).sort((a, b) => b.count - a.count).slice(0, 10);
}

// app/routes/api.validate.ts
init_db();
var action4 = async ({ request: request2 }) => {
  let { session } = await authenticate.admin(request2), user = await db.user.findUnique({
    where: { shopId: session.shop }
  });
  if (!user)
    return (0, import_node7.json)({ error: "User not found" }, { status: 404 });
  try {
    if ((await request2.formData()).get("action") === "validate") {
      let sampleProducts = (await new ShopifySyncService(session.shop, user.accessToken).syncProducts(user.id)).slice(0, 10), mappedProducts = mapProductsToSpec(sampleProducts), validationResults = await validateProducts(mappedProducts.map((p) => {
        let { originalId, score, ...spec } = p;
        return spec;
      })), summary = getValidationSummary(validationResults), audit = await db.audit.create({
        data: {
          userId: user.id,
          score: summary.validationRate,
          totalProducts: summary.totalProducts,
          validProducts: summary.validProducts,
          gaps: summary.commonErrors.map((error) => ({
            field: error.field,
            count: error.count,
            message: error.message
          }))
        }
      });
      return await db.log.create({
        data: {
          userId: user.id,
          type: "validation",
          message: `Validated ${summary.totalProducts} products - ${summary.validationRate}% passed validation`,
          metadata: {
            summary,
            auditId: audit.id,
            timestamp: (/* @__PURE__ */ new Date()).toISOString()
          }
        }
      }), (0, import_node7.json)({
        success: !0,
        data: {
          auditId: audit.id,
          summary,
          products: mappedProducts.map((product, index) => ({
            id: product.originalId,
            title: product.title,
            score: product.score,
            validation: validationResults[index]
          }))
        }
      });
    }
    return (0, import_node7.json)({ error: "Invalid action" }, { status: 400 });
  } catch (error) {
    return console.error("Validation error:", error), await db.log.create({
      data: {
        userId: user.id,
        type: "error",
        message: `Validation error: ${error instanceof Error ? error.message : "Unknown error"}`,
        error: error instanceof Error ? error.stack : String(error),
        metadata: {
          timestamp: (/* @__PURE__ */ new Date()).toISOString()
        }
      }
    }), (0, import_node7.json)(
      {
        success: !1,
        error: error instanceof Error ? error.message : "Unknown error occurred"
      },
      { status: 500 }
    );
  }
};

// app/routes/api.enrich.ts
var api_enrich_exports = {};
__export(api_enrich_exports, {
  action: () => action5,
  loader: () => loader6
});
var import_node8 = require("@remix-run/node");
init_shopify_server();
init_shopifySync();
init_aiEnrich();
init_db();
var loader6 = async ({ request: request2 }) => {
  console.log("\u{1F3AF} AI ENRICH LOADER CALLED");
  try {
    let { session } = await authenticate.admin(request2);
    return console.log("\u2705 AI Enrich loader authentication successful for shop:", session.shop), (0, import_node8.json)({ success: !0, message: "AI Enrichment API ready" });
  } catch (error) {
    return console.error("\u274C AI Enrich loader authentication failed:", error), (0, import_node8.json)({ success: !1, error: "Authentication failed" }, { status: 401 });
  }
}, action5 = async ({ request: request2 }) => {
  console.log("\u{1F3AF} AI ENRICH ACTION CALLED - Fixed Syntax Error");
  try {
    console.log("\u{1F50D} Attempting authentication for AI enrichment..."), console.log("\u{1F50D} Request URL:", request2.url), console.log("\u{1F50D} Request method:", request2.method), console.log("\u{1F50D} Request headers:", Object.fromEntries(request2.headers.entries()));
    let { session } = await authenticate.admin(request2);
    console.log("\u2705 AI Enrich authentication successful for shop:", session.shop);
    let user = await db.user.findUnique({
      where: { shopId: session.shop }
    });
    if (!user)
      return console.log("\u274C User not found for shop:", session.shop), (0, import_node8.json)({ error: "User not found" }, { status: 404 });
    console.log("\u{1F464} User found:", user.id);
    let formData = await request2.formData(), action8 = formData.get("action"), shopFromForm = formData.get("shop");
    if (console.log("\u{1F4DD} Form data action:", action8), console.log("\u{1F3EA} Shop from form:", shopFromForm), action8 === "enrich") {
      console.log("\u{1F680} Starting AI enrichment process...");
      let productIds = formData.getAll("productIds"), maxProducts = parseInt(formData.get("maxProducts")) || 5, tierLimits = {
        starter: 5,
        pro: 25,
        enterprise: 100
      }, limit = tierLimits[user.tier] || tierLimits.starter;
      if (maxProducts > limit)
        return (0, import_node8.json)({
          success: !1,
          error: `Your ${user.tier} tier allows up to ${limit} products per enrichment. Please upgrade to process more products.`
        }, { status: 400 });
      console.log("\u{1F511} Loading offline session for AI enrichment...");
      let { sessionStorage: sessionStorage2 } = await Promise.resolve().then(() => (init_shopify_server(), shopify_server_exports)), offlineSessionId = `offline_${session.shop}`, offlineSession = await sessionStorage2.loadSession(offlineSessionId);
      if (!offlineSession?.accessToken)
        return console.log("\u274C Offline session not found for AI enrichment"), (0, import_node8.json)({
          success: !1,
          error: "Offline session not found. Please reinstall the app."
        }, { status: 401 });
      console.log("\u2705 Offline session loaded for AI enrichment"), console.log("\u{1F4E6} Fetching products for AI enrichment...");
      let allProducts = await new ShopifySyncService(session.shop, offlineSession.accessToken).syncProducts(user.id);
      console.log("\u{1F4E6} Products fetched:", allProducts.length);
      let productsToEnrich = productIds.length > 0 ? allProducts.filter((p) => productIds.includes(p.id)) : allProducts.slice(0, maxProducts);
      if (console.log("\u{1F3AF} Products selected for enrichment:", productsToEnrich.length), productsToEnrich.length === 0)
        return console.log("\u274C No products found to enrich"), (0, import_node8.json)({
          success: !1,
          error: "No products found to enrich"
        }, { status: 400 });
      console.log("\u{1F916} Starting AI enrichment service...");
      let enrichmentService = new AIEnrichmentService();
      console.log("\u{1F916} Calling enrichProducts with", productsToEnrich.length, "products");
      let enrichmentResults = await enrichmentService.enrichProducts(
        user.id,
        productsToEnrich,
        {
          enrichDescription: !0,
          inferMaterial: !0,
          generateUseCases: !0,
          generateFeatures: !0,
          generateKeywords: !0
        },
        maxProducts
      );
      console.log("\u2705 AI enrichment completed, results:", enrichmentResults.length);
      let applyToShopify = formData.get("applyToShopify") === "true", appliedResults = [];
      if (applyToShopify)
        for (let result of enrichmentResults)
          try {
            let success = await enrichmentService.applyEnrichmentToShopify(
              user.id,
              session.shop,
              offlineSession.accessToken,
              result
            );
            appliedResults.push({
              productId: result.originalProduct.id,
              success,
              improvements: result.improvements
            });
          } catch (error) {
            appliedResults.push({
              productId: result.originalProduct.id,
              success: !1,
              error: error instanceof Error ? error.message : "Unknown error"
            });
          }
      let totalUsage = enrichmentResults.reduce((sum, result) => sum + result.totalUsage, 0);
      console.log("\u{1F4B0} Total usage calculated:", totalUsage), console.log("\u{1F4DD} Creating database log..."), await db.log.create({
        data: {
          userId: user.id,
          type: "enrichment",
          message: `AI enrichment completed for ${enrichmentResults.length} products`,
          metadata: {
            productsProcessed: enrichmentResults.length,
            totalUsage,
            appliedToShopify: applyToShopify,
            timestamp: (/* @__PURE__ */ new Date()).toISOString()
          }
        }
      }), console.log("\u2705 Database log created");
      let response = {
        success: !0,
        data: {
          productsProcessed: enrichmentResults.length,
          totalUsage,
          appliedToShopify: applyToShopify,
          results: enrichmentResults.map((result) => ({
            productId: result.originalProduct.id,
            title: result.originalProduct.title,
            improvements: result.improvements,
            totalUsage: result.totalUsage,
            errors: result.errors
          })),
          appliedResults
        }
      };
      return console.log("\u{1F389} Returning successful response:", response), (0, import_node8.json)(response);
    }
    return (0, import_node8.json)({ error: "Invalid action" }, { status: 400 });
  } catch (error) {
    console.error("\u274C CRITICAL ERROR in AI enrichment:", error), console.error("\u274C Error stack:", error instanceof Error ? error.stack : "No stack trace");
    try {
      let { session } = await authenticate.admin(request2).catch(() => null);
      if (session) {
        let user = await db.user.findUnique({
          where: { shopId: session.shop }
        }).catch(() => null);
        user && (await db.log.create({
          data: {
            userId: user.id,
            type: "error",
            message: `Enrichment error: ${error instanceof Error ? error.message : "Unknown error"}`,
            error: error instanceof Error ? error.stack : String(error),
            metadata: {
              timestamp: (/* @__PURE__ */ new Date()).toISOString()
            }
          }
        }), console.log("\u{1F4DD} Error logged to database"));
      }
    } catch (logError) {
      console.error("\u274C Failed to log error to database:", logError);
    }
    return (0, import_node8.json)(
      {
        success: !1,
        error: error instanceof Error ? error.message : "Unknown error occurred"
      },
      { status: 500 }
    );
  }
};

// app/routes/api.sync.ts
var api_sync_exports = {};
__export(api_sync_exports, {
  action: () => action6,
  loader: () => loader7
});
var import_node9 = require("@remix-run/node");
init_shopify_server();
init_shopifySync();
init_db();
var loader7 = async ({ request: request2 }) => {
  let { session } = await authenticate.admin(request2), user = await db.user.findUnique({
    where: { shopId: session.shop }
  });
  if (!user)
    return (0, import_node9.json)({ error: "User not found" }, { status: 404 });
  let recentLogs = await db.log.findMany({
    where: {
      userId: user.id,
      type: "sync"
    },
    orderBy: {
      createdAt: "desc"
    },
    take: 10
  });
  return (0, import_node9.json)({
    logs: recentLogs.map((log) => ({
      id: log.id,
      type: log.type,
      message: log.message,
      createdAt: log.createdAt,
      metadata: log.metadata
    }))
  });
}, action6 = async ({ request: request2 }) => {
  console.log("\u{1F3AF} SYNC ACTION CALLED - Request method:", request2.method), console.log("\u{1F3AF} SYNC ACTION CALLED - Request URL:", request2.url), console.log("\u{1F3AF} Request headers:", Object.fromEntries(request2.headers.entries()));
  try {
    console.log("\u{1F510} Attempting authentication...");
    let { session } = await authenticate.admin(request2);
    console.log("\u{1F3AF} Authentication successful for shop:", session.shop);
    let user = await db.user.findUnique({
      where: { shopId: session.shop }
    });
    if (!user)
      return console.log("\u274C User not found for shop:", session.shop), (0, import_node9.json)({ error: "User not found" }, { status: 404 });
    console.log("\u{1F680} Starting sync for shop:", session.shop), console.log("\u{1F464} User ID:", user.id);
    let syncService = new ShopifySyncService(session.shop, user.accessToken);
    console.log("\u{1F527} Sync service initialized"), console.log("\u{1F4E6} Starting product sync...");
    let products = await syncService.syncProducts(user.id);
    console.log("\u2705 Product sync completed:", products.length, "products"), console.log("\u{1F4CA} Fetching inventory levels...");
    let inventoryLevels = await syncService.getInventoryLevels(session.shop, user.accessToken);
    console.log("\u{1F4C8} Inventory levels:", inventoryLevels.length), console.log("\u{1F6D2} Fetching recent orders...");
    let recentOrders = await syncService.getRecentOrders(session.shop, user.accessToken, 50);
    console.log("\u{1F4CB} Recent orders:", recentOrders.length), console.log("\u{1F4DD} Creating audit record...");
    let audit = await db.audit.create({
      data: {
        userId: user.id,
        score: 0,
        // Will be calculated after field mapping
        totalProducts: products.length,
        validProducts: 0,
        // Will be calculated after validation
        gaps: []
        // Will be populated after field mapping and validation
      }
    });
    console.log("\u2705 Audit record created:", audit.id);
    let response = {
      success: !0,
      message: `Successfully synced ${products.length} products`,
      data: {
        productsCount: products.length,
        inventoryLevelsCount: inventoryLevels.length,
        recentOrdersCount: recentOrders.length,
        auditId: audit.id
      }
    };
    return console.log("\u{1F389} Sync response:", response), (0, import_node9.json)(response);
  } catch (error) {
    if (console.error("\u274C SYNC ACTION ERROR:", error), console.error("\u274C Error type:", error?.constructor?.name), console.error("\u274C Error details:", {
      message: error instanceof Error ? error.message : "Unknown error",
      stack: error instanceof Error ? error.stack : String(error),
      isResponse: error instanceof Response,
      responseStatus: error instanceof Response ? error.status : "N/A",
      responseHeaders: error instanceof Response ? Object.fromEntries(error.headers.entries()) : "N/A"
    }), error instanceof Response)
      throw console.log("\u{1F504} Re-throwing OAuth redirect response - Status:", error.status), console.log("\u{1F504} Redirect location:", error.headers.get("location")), error;
    return (0, import_node9.json)(
      {
        success: !1,
        error: error instanceof Error ? error.message : "Unknown error occurred"
      },
      { status: 500 }
    );
  }
};

// app/routes/webhooks.ts
var webhooks_exports = {};
__export(webhooks_exports, {
  action: () => action7
});
var import_node10 = require("@remix-run/node");
init_shopify_server();
init_db();
var action7 = async ({ request: request2 }) => {
  let { topic, shop, session } = await authenticate.webhook(request2);
  if (!session)
    return (0, import_node10.json)({ error: "No session found" }, { status: 401 });
  try {
    let user = await db.user.findUnique({
      where: { shopId: shop }
    });
    if (!user)
      return (0, import_node10.json)({ error: "User not found" }, { status: 404 });
    switch (topic) {
      case "PRODUCTS_CREATE":
      case "PRODUCTS_UPDATE":
        await handleProductWebhook(user.id, session.shop, user.accessToken, topic);
        break;
      case "PRODUCTS_DELETE":
        await handleProductDelete(user.id, topic);
        break;
      default:
        console.log(`Unhandled webhook topic: ${topic}`);
    }
    return (0, import_node10.json)({ success: !0 });
  } catch (error) {
    if (console.error("Webhook error:", error), session?.shop) {
      let user = await db.user.findUnique({
        where: { shopId: session.shop }
      });
      user && await db.log.create({
        data: {
          userId: user.id,
          type: "error",
          message: `Webhook error: ${error instanceof Error ? error.message : "Unknown error"}`,
          error: error instanceof Error ? error.stack : String(error),
          metadata: {
            topic,
            timestamp: (/* @__PURE__ */ new Date()).toISOString()
          }
        }
      });
    }
    return (0, import_node10.json)(
      { error: error instanceof Error ? error.message : "Unknown error" },
      { status: 500 }
    );
  }
};
async function handleProductWebhook(userId, shopDomain, accessToken, topic) {
  try {
    await db.log.create({
      data: {
        userId,
        type: "webhook",
        message: `Product webhook triggered: ${topic}`,
        metadata: {
          topic,
          timestamp: (/* @__PURE__ */ new Date()).toISOString()
        }
      }
    }), console.log(`Product webhook received: ${topic} for shop: ${shopDomain}`);
  } catch (error) {
    throw console.error("Error handling product webhook:", error), error;
  }
}
async function handleProductDelete(userId, topic) {
  try {
    await db.log.create({
      data: {
        userId,
        type: "webhook",
        message: `Product deleted: ${topic}`,
        metadata: {
          topic,
          timestamp: (/* @__PURE__ */ new Date()).toISOString()
        }
      }
    }), console.log(`Product deletion webhook: ${topic}`);
  } catch (error) {
    throw console.error("Error handling product deletion webhook:", error), error;
  }
}

// app/routes/_index.tsx
var index_exports = {};
__export(index_exports, {
  default: () => Index2,
  loader: () => loader8
});
var import_node11 = require("@remix-run/node"), import_react5 = require("@remix-run/react"), import_polaris3 = __toESM(require_cjs());
init_shopify_server();
init_db();
var import_jsx_runtime5 = require("react/jsx-runtime"), loader8 = async ({ request: request2 }) => {
  let { session } = await authenticate.admin(request2), user = await db.user.findFirst({
    where: { shopId: session.shop }
  }), recentLogs = await db.log.findMany({
    where: { userId: user?.id },
    orderBy: { createdAt: "desc" },
    take: 10
  }), totalProducts = 100, validProducts = 75, warningProducts = 20, invalidProducts = 5, dashboardMetrics = {
    aiReadinessScore: Math.round(validProducts / totalProducts * 100),
    totalProducts,
    validProducts,
    warningProducts,
    invalidProducts,
    lastSyncTime: (/* @__PURE__ */ new Date()).toISOString()
  }, products = [
    {
      id: "1",
      title: "Sample Product 1",
      description: "A great product",
      score: 85,
      gaps: ["Missing material info", "No size specified"]
    },
    {
      id: "2",
      title: "Sample Product 2",
      description: "Another great product",
      score: 92,
      gaps: []
    }
  ];
  return (0, import_node11.json)({
    shop: session.shop,
    products,
    totalProducts,
    averageScore: 88,
    dashboardMetrics,
    lastSync: recentLogs.find((log) => log.type === "sync")?.createdAt || null,
    recentLogs: recentLogs.map((log) => ({
      id: log.id,
      type: log.type,
      message: log.message,
      createdAt: log.createdAt.toISOString()
    })),
    user
  });
};
function Index2() {
  let { shop, totalProducts, averageScore, dashboardMetrics, lastSync, recentLogs, user, products } = (0, import_react5.useLoaderData)();
  return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_polaris3.Page, { title: "CatalogAI Dashboard", children: /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(import_polaris3.Layout, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_polaris3.Layout.Section, { children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_polaris3.Card, { children: /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(import_polaris3.BlockStack, { gap: "400", children: [
      /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_polaris3.Text, { as: "h2", variant: "headingMd", children: "Welcome to CatalogAI Optimizer" }),
      /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(import_polaris3.Text, { as: "p", variant: "bodyMd", children: [
        "Shop: ",
        shop
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(import_polaris3.Text, { as: "p", variant: "bodyMd", children: [
        "Total Products: ",
        totalProducts
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(import_polaris3.Text, { as: "p", variant: "bodyMd", children: [
        "Average Score: ",
        averageScore,
        "%"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(import_polaris3.Text, { as: "p", variant: "bodyMd", children: [
        "AI Readiness Score: ",
        dashboardMetrics.aiReadinessScore,
        "%"
      ] })
    ] }) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_polaris3.Layout.Section, { children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_polaris3.Card, { children: /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(import_polaris3.BlockStack, { gap: "400", children: [
      /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_polaris3.Text, { as: "h3", variant: "headingMd", children: "Product Health Overview" }),
      /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(import_polaris3.Text, { as: "p", variant: "bodyMd", children: [
        "Valid Products: ",
        dashboardMetrics.validProducts
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(import_polaris3.Text, { as: "p", variant: "bodyMd", children: [
        "Warning Products: ",
        dashboardMetrics.warningProducts
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(import_polaris3.Text, { as: "p", variant: "bodyMd", children: [
        "Invalid Products: ",
        dashboardMetrics.invalidProducts
      ] })
    ] }) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_polaris3.Layout.Section, { children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_polaris3.Card, { children: /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(import_polaris3.BlockStack, { gap: "400", children: [
      /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_polaris3.Text, { as: "h3", variant: "headingMd", children: "Recent Activity" }),
      recentLogs.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_polaris3.BlockStack, { gap: "200", children: recentLogs.slice(0, 5).map((log) => /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(import_polaris3.Box, { padding: "200", background: "bg-surface-secondary", children: [
        /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(import_polaris3.Text, { as: "p", variant: "bodySm", children: [
          /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)("strong", { children: [
            log.type,
            ":"
          ] }),
          " ",
          log.message
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_polaris3.Text, { as: "p", variant: "bodySm", tone: "subdued", children: new Date(log.createdAt).toLocaleString() })
      ] }, log.id)) }) : /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_polaris3.Text, { as: "p", variant: "bodyMd", tone: "subdued", children: "No recent activity" })
    ] }) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_polaris3.Layout.Section, { children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_polaris3.Card, { children: /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(import_polaris3.BlockStack, { gap: "400", children: [
      /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_polaris3.Text, { as: "h3", variant: "headingMd", children: "Sample Products" }),
      /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
        import_polaris3.DataTable,
        {
          columnContentTypes: ["text", "text", "numeric", "text"],
          headings: ["Title", "Description", "Score", "Gaps"],
          rows: products.map((product) => [
            product.title,
            product.description,
            product.score.toString(),
            product.gaps.join(", ") || "None"
          ])
        }
      )
    ] }) }) })
  ] }) });
}

// app/routes/auth.$.tsx
var auth_exports = {};
__export(auth_exports, {
  loader: () => loader9
});
init_shopify_server();
var loader9 = async ({ request: request2 }) => (await authenticate.admin(request2), null);

// app/routes/health.tsx
var health_exports = {};
__export(health_exports, {
  loader: () => loader10
});
var import_node12 = require("@remix-run/node");
async function loader10() {
  try {
    return (0, import_node12.json)(
      {
        status: "healthy",
        timestamp: (/* @__PURE__ */ new Date()).toISOString(),
        service: "catalogai-optimizer",
        environment: "production",
        uptime: process.uptime()
      },
      { status: 200 }
    );
  } catch (error) {
    return console.error("Health check failed:", error), (0, import_node12.json)(
      {
        status: "unhealthy",
        error: error instanceof Error ? error.message : "Unknown error",
        timestamp: (/* @__PURE__ */ new Date()).toISOString()
      },
      { status: 500 }
    );
  }
}

// server-assets-manifest:@remix-run/dev/assets-manifest
var assets_manifest_default = { entry: { module: "/build/entry.client-2QPO3E3T.js", imports: ["/build/_shared/chunk-LOR64ATL.js", "/build/_shared/chunk-Q3IECNXJ.js"] }, routes: { root: { id: "root", parentId: void 0, path: "", index: void 0, caseSensitive: void 0, module: "/build/root-UZH7TC5D.js", imports: void 0, hasAction: !1, hasLoader: !1, hasClientAction: !1, hasClientLoader: !1, hasErrorBoundary: !1 }, "routes/_index": { id: "routes/_index", parentId: "root", path: void 0, index: !0, caseSensitive: void 0, module: "/build/routes/_index-LU7MMHJ4.js", imports: ["/build/_shared/chunk-LV7ZJ24I.js", "/build/_shared/chunk-KADRYHQJ.js", "/build/_shared/chunk-ADGUJX5W.js"], hasAction: !1, hasLoader: !0, hasClientAction: !1, hasClientLoader: !1, hasErrorBoundary: !1 }, "routes/_index_backup": { id: "routes/_index_backup", parentId: "root", path: void 0, index: void 0, caseSensitive: void 0, module: "/build/routes/_index_backup-G7LPM2BM.js", imports: ["/build/_shared/chunk-MWF276KD.js", "/build/_shared/chunk-LV7ZJ24I.js", "/build/_shared/chunk-KADRYHQJ.js", "/build/_shared/chunk-ADGUJX5W.js"], hasAction: !0, hasLoader: !0, hasClientAction: !1, hasClientLoader: !1, hasErrorBoundary: !1 }, "routes/api.enrich": { id: "routes/api.enrich", parentId: "root", path: "api/enrich", index: void 0, caseSensitive: void 0, module: "/build/routes/api.enrich-SFXHLYSE.js", imports: void 0, hasAction: !0, hasLoader: !0, hasClientAction: !1, hasClientLoader: !1, hasErrorBoundary: !1 }, "routes/api.health-check": { id: "routes/api.health-check", parentId: "root", path: "api/health-check", index: void 0, caseSensitive: void 0, module: "/build/routes/api.health-check-4K2OQFHX.js", imports: void 0, hasAction: !0, hasLoader: !0, hasClientAction: !1, hasClientLoader: !1, hasErrorBoundary: !1 }, "routes/api.queue-status": { id: "routes/api.queue-status", parentId: "root", path: "api/queue-status", index: void 0, caseSensitive: void 0, module: "/build/routes/api.queue-status-BGLNO3UC.js", imports: void 0, hasAction: !1, hasLoader: !0, hasClientAction: !1, hasClientLoader: !1, hasErrorBoundary: !1 }, "routes/api.settings": { id: "routes/api.settings", parentId: "root", path: "api/settings", index: void 0, caseSensitive: void 0, module: "/build/routes/api.settings-FJ3TID6M.js", imports: void 0, hasAction: !0, hasLoader: !0, hasClientAction: !1, hasClientLoader: !1, hasErrorBoundary: !1 }, "routes/api.sync": { id: "routes/api.sync", parentId: "root", path: "api/sync", index: void 0, caseSensitive: void 0, module: "/build/routes/api.sync-64X2SDGK.js", imports: void 0, hasAction: !0, hasLoader: !0, hasClientAction: !1, hasClientLoader: !1, hasErrorBoundary: !1 }, "routes/api.test-health-check": { id: "routes/api.test-health-check", parentId: "root", path: "api/test-health-check", index: void 0, caseSensitive: void 0, module: "/build/routes/api.test-health-check-IYEKKCWC.js", imports: void 0, hasAction: !1, hasLoader: !0, hasClientAction: !1, hasClientLoader: !1, hasErrorBoundary: !1 }, "routes/api.validate": { id: "routes/api.validate", parentId: "root", path: "api/validate", index: void 0, caseSensitive: void 0, module: "/build/routes/api.validate-HG5RCGQI.js", imports: void 0, hasAction: !0, hasLoader: !1, hasClientAction: !1, hasClientLoader: !1, hasErrorBoundary: !1 }, "routes/auth.$": { id: "routes/auth.$", parentId: "root", path: "auth/*", index: void 0, caseSensitive: void 0, module: "/build/routes/auth.$-QXGTKEOT.js", imports: void 0, hasAction: !1, hasLoader: !0, hasClientAction: !1, hasClientLoader: !1, hasErrorBoundary: !1 }, "routes/health": { id: "routes/health", parentId: "root", path: "health", index: void 0, caseSensitive: void 0, module: "/build/routes/health-TTCX2HYV.js", imports: void 0, hasAction: !1, hasLoader: !0, hasClientAction: !1, hasClientLoader: !1, hasErrorBoundary: !1 }, "routes/webhooks": { id: "routes/webhooks", parentId: "root", path: "webhooks", index: void 0, caseSensitive: void 0, module: "/build/routes/webhooks-PBKDGD5Z.js", imports: void 0, hasAction: !0, hasLoader: !1, hasClientAction: !1, hasClientLoader: !1, hasErrorBoundary: !1 } }, version: "b104ea63", hmr: void 0, url: "/build/manifest-B104EA63.js" };

// server-entry-module:@remix-run/dev/server-build
var mode = "production", assetsBuildDirectory = "public/build", future = { v3_fetcherPersist: !0, v3_relativeSplatPath: !0, v3_throwAbortReason: !0, v3_routeConfig: !1, v3_singleFetch: !1, v3_lazyRouteDiscovery: !1, unstable_optimizeDeps: !1 }, publicPath = "/build/", entry = { module: entry_server_exports }, routes = {
  root: {
    id: "root",
    parentId: void 0,
    path: "",
    index: void 0,
    caseSensitive: void 0,
    module: root_exports
  },
  "routes/api.test-health-check": {
    id: "routes/api.test-health-check",
    parentId: "root",
    path: "api/test-health-check",
    index: void 0,
    caseSensitive: void 0,
    module: api_test_health_check_exports
  },
  "routes/api.health-check": {
    id: "routes/api.health-check",
    parentId: "root",
    path: "api/health-check",
    index: void 0,
    caseSensitive: void 0,
    module: api_health_check_exports
  },
  "routes/api.queue-status": {
    id: "routes/api.queue-status",
    parentId: "root",
    path: "api/queue-status",
    index: void 0,
    caseSensitive: void 0,
    module: api_queue_status_exports
  },
  "routes/_index_backup": {
    id: "routes/_index_backup",
    parentId: "root",
    path: void 0,
    index: void 0,
    caseSensitive: void 0,
    module: index_backup_exports
  },
  "routes/api.settings": {
    id: "routes/api.settings",
    parentId: "root",
    path: "api/settings",
    index: void 0,
    caseSensitive: void 0,
    module: api_settings_exports
  },
  "routes/api.validate": {
    id: "routes/api.validate",
    parentId: "root",
    path: "api/validate",
    index: void 0,
    caseSensitive: void 0,
    module: api_validate_exports
  },
  "routes/api.enrich": {
    id: "routes/api.enrich",
    parentId: "root",
    path: "api/enrich",
    index: void 0,
    caseSensitive: void 0,
    module: api_enrich_exports
  },
  "routes/api.sync": {
    id: "routes/api.sync",
    parentId: "root",
    path: "api/sync",
    index: void 0,
    caseSensitive: void 0,
    module: api_sync_exports
  },
  "routes/webhooks": {
    id: "routes/webhooks",
    parentId: "root",
    path: "webhooks",
    index: void 0,
    caseSensitive: void 0,
    module: webhooks_exports
  },
  "routes/_index": {
    id: "routes/_index",
    parentId: "root",
    path: void 0,
    index: !0,
    caseSensitive: void 0,
    module: index_exports
  },
  "routes/auth.$": {
    id: "routes/auth.$",
    parentId: "root",
    path: "auth/*",
    index: void 0,
    caseSensitive: void 0,
    module: auth_exports
  },
  "routes/health": {
    id: "routes/health",
    parentId: "root",
    path: "health",
    index: void 0,
    caseSensitive: void 0,
    module: health_exports
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  assets,
  assetsBuildDirectory,
  entry,
  future,
  mode,
  publicPath,
  routes
});
/*! Bundled license information:

react/cjs/react.production.min.js:
  (**
   * @license React
   * react.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.production.min.js:
  (**
   * @license React
   * scheduler.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.production.min.js:
  (**
   * @license React
   * react-dom.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
