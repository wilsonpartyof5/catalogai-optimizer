{
  "version": 3,
  "sources": ["empty-module:@remix-run/node", "../../../app/routes/_index.tsx", "../../../app/components/HealthCheckModal.tsx"],
  "sourcesContent": ["module.exports = {};", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_index.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_index.tsx\");\n}\n// REMIX HMR END\n\nimport { json } from \"@remix-run/node\";\nimport { useLoaderData, useFetcher } from \"@remix-run/react\";\nimport { useState, useEffect } from \"react\";\nimport \"../styles/product-grid.css?__remix_sideEffect__\";\nimport { Page, Layout, Card, Text, Button, Badge, Toast, InlineStack, Box, Modal, TextField, Select, Collapsible, ProgressBar, BlockStack } from \"@shopify/polaris\";\nimport { authenticate } from \"../shopify.server\";\nimport { db } from \"../utils/db\";\nimport { HealthCheckModal } from \"../components/HealthCheckModal\";\nimport { getFieldInputType, FIELD_LABELS } from \"../utils/openaiSpec\";\n\n// TypeScript interfaces for type safety\n\n// Dashboard metrics interfaces\n\nexport const loader = async ({\n  request\n}) => {\n  try {\n    console.log('\uD83D\uDD0D DEBUG - Starting authentication for request:', request.url);\n    const {\n      session\n    } = await authenticate.admin(request);\n\n    // DEBUG: Add logging to see what's happening\n    console.log('\uD83D\uDD0D DEBUG - Session shop:', session.shop);\n    console.log('\uD83D\uDD0D DEBUG - Session exists:', !!session);\n    console.log('\uD83D\uDD0D DEBUG - Access token exists:', !!session.accessToken);\n    console.log('\uD83D\uDD0D DEBUG - Session ID:', session.id);\n\n    // Get user from database with error handling\n    let user = null;\n    let latestAudit = null;\n    let recentLogs = [];\n    try {\n      user = await db.user.findUnique({\n        where: {\n          shopId: session.shop\n        }\n      });\n      if (user) {\n        // Get latest audit if available\n        latestAudit = await db.audit.findFirst({\n          where: {\n            userId: user.id\n          },\n          orderBy: {\n            timestamp: 'desc'\n          }\n        });\n\n        // Clean up old error logs with raw details\n        await db.log.deleteMany({\n          where: {\n            userId: user.id,\n            message: {\n              contains: 'GraphQL Error'\n            }\n          }\n        });\n\n        // Get recent logs (filter out raw error details)\n        recentLogs = await db.log.findMany({\n          where: {\n            userId: user.id,\n            // Filter out logs with raw error details\n            message: {\n              not: {\n                contains: 'GraphQL Error'\n              }\n            }\n          },\n          orderBy: {\n            createdAt: 'desc'\n          },\n          take: 3\n        });\n      }\n    } catch (dbError) {\n      console.error('Database error in loader:', dbError);\n      // Continue with mock data if database fails\n    }\n\n    // Fetch real products with scores\n    let products = [];\n    let totalProducts = 0;\n    let averageScore = 0;\n    if (user) {\n      try {\n        // Load offline session to fetch products\n        const {\n          sessionStorage\n        } = await import(\"../shopify.server\");\n        const offlineSessionId = `offline_${session.shop}`;\n        const offlineSession = await sessionStorage.loadSession(offlineSessionId);\n        if (offlineSession?.accessToken) {\n          // Import services\n          const {\n            ShopifySyncService\n          } = await import(\"../utils/shopifySync\");\n          const {\n            mapShopifyToSpec,\n            calculateProductScore\n          } = await import(\"../utils/fieldMapper\");\n\n          // Fetch products from Shopify\n          const syncService = new ShopifySyncService(session.shop, offlineSession.accessToken);\n          const shopifyProducts = await syncService.syncProducts(user.id);\n\n          // Fetch stored recommendations for all products\n          const storedProducts = await db.product.findMany({\n            where: {\n              userId: user.id\n            },\n            select: {\n              shopifyId: true,\n              recommendations: true\n            }\n          });\n          const recommendationsMap = new Map();\n          storedProducts.forEach(sp => {\n            if (sp.recommendations) {\n              recommendationsMap.set(sp.shopifyId, sp.recommendations);\n            }\n          });\n\n          // Map to spec format and calculate scores\n          products = shopifyProducts.map(shopifyProduct => {\n            const spec = mapShopifyToSpec(shopifyProduct);\n            const scoreData = calculateProductScore(spec);\n            const productId = shopifyProduct.id.replace('gid://shopify/Product/', '');\n            return {\n              id: productId,\n              title: shopifyProduct.title || 'Untitled Product',\n              description: shopifyProduct.description || 'No description',\n              score: scoreData.score,\n              gaps: scoreData.gaps,\n              rawProduct: shopifyProduct,\n              // Store raw product for detail view\n              spec: spec,\n              // Store mapped spec for recommendations\n              recommendations: recommendationsMap.get(productId) || null // Include stored recommendations\n            };\n          });\n          totalProducts = shopifyProducts.length;\n          averageScore = products.length > 0 ? Math.round(products.reduce((sum, p) => sum + p.score, 0) / products.length) : 0;\n        }\n      } catch (error) {\n        console.error('Error fetching products in loader:', error);\n        // Fall back to mock data if there's an error\n        products = [{\n          id: \"1\",\n          title: \"Sample Product 1\",\n          description: \"Basic product description\",\n          score: 75,\n          gaps: [\"material\", \"weight\"]\n        }, {\n          id: \"2\",\n          title: \"Sample Product 2\",\n          description: \"Another product with minimal details\",\n          score: 60,\n          gaps: [\"material\", \"dimensions\", \"use_cases\"]\n        }, {\n          id: \"3\",\n          title: \"Sample Product 3\",\n          description: \"Well-described product with comprehensive details\",\n          score: 95,\n          gaps: []\n        }];\n      }\n    }\n\n    // Calculate dashboard metrics\n    const calculateDashboardMetrics = (products, user) => {\n      const totalProducts = products.length;\n      const validProducts = products.filter(p => p.score >= 90).length;\n      const warningProducts = products.filter(p => p.score >= 70 && p.score < 90).length;\n      const invalidProducts = products.filter(p => p.score < 70).length;\n      const productsPassedPercentage = totalProducts > 0 ? Math.round(validProducts / totalProducts * 100) : 0;\n      const aiReadinessScore = Math.round(averageScore);\n      const optimizationProgress = Math.round(averageScore); // Use average score as optimization progress\n\n      // Get last sync time from user's last audit\n      let lastSyncTime = null;\n      if (user) {\n        // This would need to be fetched from the database, for now use current time\n        lastSyncTime = new Date();\n      }\n      return {\n        aiReadinessScore,\n        totalProducts,\n        validProducts,\n        warningProducts,\n        invalidProducts,\n        productsPassedPercentage,\n        lastSyncTime,\n        optimizationProgress\n      };\n    };\n    const dashboardMetrics = calculateDashboardMetrics(products, user);\n    return json({\n      shop: session.shop,\n      user,\n      products: products,\n      totalProducts: totalProducts,\n      averageScore: averageScore,\n      dashboardMetrics,\n      lastSync: recentLogs.find(log => log.type === 'sync')?.createdAt || null,\n      recentLogs: recentLogs.map(log => ({\n        id: log.id,\n        type: log.type,\n        message: log.message,\n        createdAt: log.createdAt\n      }))\n    });\n  } catch (error) {\n    console.error('\u274C ERROR in index loader:', error);\n    console.error('\u274C ERROR details:', {\n      message: error.message,\n      stack: error.stack,\n      name: error.name\n    });\n\n    // If it's a Response (OAuth redirect), re-throw it to allow the redirect to happen\n    if (error instanceof Response) {\n      console.log('\uD83D\uDD04 Re-throwing OAuth redirect response');\n      throw error;\n    }\n\n    // For other errors, return minimal data\n    return json({\n      shop: 'unknown',\n      products: [],\n      user: null,\n      totalProducts: 0,\n      averageScore: 0,\n      lastSync: null,\n      recentLogs: []\n    });\n  }\n};\nexport const action = async ({\n  request\n}) => {\n  console.log('\uD83C\uDFAF INDEX ACTION CALLED');\n  try {\n    const {\n      admin,\n      session\n    } = await authenticate.admin(request);\n    console.log('\u2705 Authentication successful in index action');\n    console.log('\uD83D\uDD11 Admin API client available:', !!admin);\n    console.log('\uD83D\uDCCD Session shop:', session.shop);\n    const formData = await request.formData();\n    const actionType = formData.get(\"action\");\n    if (actionType === \"sync\") {\n      console.log('\uD83D\uDE80 Starting sync in index action');\n\n      // Get user from database\n      const user = await db.user.findUnique({\n        where: {\n          shopId: session.shop\n        }\n      });\n      if (!user) {\n        console.log('\u274C User not found for shop:', session.shop);\n        return json({\n          success: false,\n          error: \"User not found\"\n        }, {\n          status: 404\n        });\n      }\n      console.log('\uD83D\uDC64 User ID:', user.id);\n\n      // Load the offline session from storage\n      const {\n        sessionStorage\n      } = await import(\"../shopify.server\");\n      const offlineSessionId = `offline_${session.shop}`;\n      console.log('\uD83D\uDD11 Loading offline session:', offlineSessionId);\n      const offlineSession = await sessionStorage.loadSession(offlineSessionId);\n      if (!offlineSession) {\n        console.log('\u274C Offline session not found');\n        return json({\n          success: false,\n          error: \"Offline session not found. Please reinstall the app.\"\n        }, {\n          status: 401\n        });\n      }\n      console.log('\u2705 Offline session loaded, has accessToken:', !!offlineSession.accessToken);\n      console.log('\uD83D\uDD11 Access token prefix:', offlineSession.accessToken?.substring(0, 15) + '...');\n      console.log('\uD83D\uDD11 Access token length:', offlineSession.accessToken?.length);\n      console.log('\uD83D\uDD0D Session scope:', offlineSession.scope);\n      console.log('\uD83D\uDD0D Session isOnline:', offlineSession.isOnline);\n\n      // Create a GraphQL client with the offline access token\n      const {\n        GraphQLClient\n      } = await import('graphql-request');\n      const graphqlClient = new GraphQLClient(`https://${session.shop}/admin/api/2025-10/graphql`, {\n        headers: {\n          'X-Shopify-Access-Token': offlineSession.accessToken,\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log('\uD83D\uDCE6 Starting product sync with offline access token...');\n      const PRODUCTS_QUERY = `\n        query getProducts($first: Int!, $after: String) {\n          products(first: $first, after: $after) {\n            pageInfo {\n              hasNextPage\n              endCursor\n            }\n            edges {\n              node {\n                id\n                title\n                description\n                handle\n                productType\n                vendor\n                tags\n                variants(first: 100) {\n                  edges {\n                    node {\n                      id\n                      title\n                      price\n                      compareAtPrice\n                      sku\n                      inventoryQuantity\n                      availableForSale\n                    }\n                  }\n                }\n                metafields(first: 100) {\n                  edges {\n                    node {\n                      id\n                      namespace\n                      key\n                      value\n                      type\n                    }\n                  }\n                }\n                images(first: 10) {\n                  edges {\n                    node {\n                      id\n                      url\n                      altText\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      `;\n      const allProducts = [];\n      let hasNextPage = true;\n      let after;\n      let pageCount = 0;\n      while (hasNextPage) {\n        pageCount++;\n        console.log(`\uD83D\uDCC4 Fetching page ${pageCount}${after ? ` (after cursor)` : ' (first page)'}`);\n        const response = await graphqlClient.request(PRODUCTS_QUERY, {\n          first: 250,\n          after\n        });\n        console.log('\uD83D\uDCE6 Products in this page:', response.products?.edges?.length || 0);\n        if (response.products?.edges) {\n          allProducts.push(...response.products.edges);\n        }\n        hasNextPage = response.products?.pageInfo?.hasNextPage || false;\n        after = response.products?.pageInfo?.endCursor;\n        if (hasNextPage) {\n          console.log('\u23F3 Waiting 500ms before next request...');\n          await new Promise(resolve => setTimeout(resolve, 500));\n        }\n      }\n      console.log('\u2705 Product sync completed:', allProducts.length, 'products');\n\n      // Log the sync operation\n      await db.log.create({\n        data: {\n          userId: user.id,\n          type: 'sync',\n          message: `Synchronized ${allProducts.length} products from Shopify`,\n          metadata: {\n            productsCount: allProducts.length,\n            timestamp: new Date().toISOString()\n          }\n        }\n      });\n\n      // Create an audit record for this sync\n      console.log('\uD83D\uDCDD Creating audit record...');\n      const audit = await db.audit.create({\n        data: {\n          userId: user.id,\n          score: 0,\n          // Will be calculated after field mapping\n          totalProducts: allProducts.length,\n          validProducts: 0,\n          // Will be calculated after validation\n          gaps: [] // Will be populated after field mapping and validation\n        }\n      });\n      console.log('\u2705 Audit record created:', audit.id);\n      return json({\n        success: true,\n        message: `Successfully synced ${allProducts.length} products`,\n        data: {\n          productsCount: allProducts.length,\n          auditId: audit.id\n        }\n      });\n    }\n    if (actionType === \"generate-recommendations\") {\n      console.log('\uD83E\uDD16 Generating AI recommendations for single product');\n      const user = await db.user.findUnique({\n        where: {\n          shopId: session.shop\n        }\n      });\n      if (!user) {\n        return json({\n          success: false,\n          error: \"User not found\"\n        }, {\n          status: 404\n        });\n      }\n      const productId = formData.get(\"productId\");\n      console.log('\uD83C\uDFAF Product ID:', productId);\n      const forceRegenerate = formData.get(\"forceRegenerate\") === \"true\";\n\n      // Check if we have existing recommendations for this product (unless forcing regeneration)\n      if (!forceRegenerate) {\n        const existingProduct = await db.product.findFirst({\n          where: {\n            userId: user.id,\n            shopifyId: productId\n          }\n        });\n        if (existingProduct?.recommendations) {\n          const recData = existingProduct.recommendations;\n          console.log('\uD83D\uDCCB Returning existing recommendations for product:', productId);\n          return json({\n            success: true,\n            recommendations: recData.recommendations || [],\n            isExisting: true\n          });\n        }\n      }\n\n      // Load offline session\n      const {\n        sessionStorage\n      } = await import(\"../shopify.server\");\n      const offlineSessionId = `offline_${session.shop}`;\n      const offlineSession = await sessionStorage.loadSession(offlineSessionId);\n      if (!offlineSession?.accessToken) {\n        return json({\n          success: false,\n          error: \"Offline session not found. Please reinstall the app.\"\n        }, {\n          status: 401\n        });\n      }\n\n      // Fetch the specific product\n      const {\n        ShopifySyncService\n      } = await import(\"../utils/shopifySync\");\n      const {\n        AIEnrichmentService\n      } = await import(\"../utils/aiEnrich\");\n      const syncService = new ShopifySyncService(session.shop, offlineSession.accessToken);\n      const allProducts = await syncService.syncProducts(user.id);\n      const product = allProducts.find(p => p.id.includes(productId));\n      if (!product) {\n        return json({\n          success: false,\n          error: \"Product not found\"\n        }, {\n          status: 404\n        });\n      }\n\n      // Get the product's gaps from the health score system\n      const {\n        mapShopifyToSpec,\n        calculateProductScore\n      } = await import(\"../utils/fieldMapper\");\n      const spec = mapShopifyToSpec(product);\n      const scoreData = calculateProductScore(spec);\n      const gaps = scoreData.gaps;\n      console.log('\uD83C\uDFAF Product gaps identified:', gaps);\n\n      // Generate AI recommendations for all identified gaps (gap-driven approach)\n      const enrichmentService = new AIEnrichmentService();\n      const result = await enrichmentService.enrichProduct(user.id, product, gaps);\n      console.log('\u2705 Generated recommendations:', result.improvements.length);\n\n      // Store recommendations in database with status tracking\n      const recommendationData = {\n        recommendations: result.improvements.map(rec => ({\n          ...rec,\n          status: 'pending' // pending, approved, rejected, applied\n        })),\n        generatedAt: new Date().toISOString(),\n        lastUpdated: new Date().toISOString()\n      };\n\n      // Create or update product record with recommendations\n      await db.product.upsert({\n        where: {\n          userId_shopifyId: {\n            userId: user.id,\n            shopifyId: productId\n          }\n        },\n        create: {\n          userId: user.id,\n          shopifyId: productId,\n          title: product.title,\n          recommendations: recommendationData\n        },\n        update: {\n          recommendations: recommendationData\n        }\n      });\n      console.log('\uD83D\uDCBE Stored recommendations in database for product:', productId);\n      return json({\n        success: true,\n        recommendations: recommendationData.recommendations,\n        isExisting: false\n      });\n    }\n    if (actionType === \"apply-recommendations\") {\n      console.log('\uD83D\uDCDD Applying approved recommendations to Shopify');\n      const user = await db.user.findUnique({\n        where: {\n          shopId: session.shop\n        }\n      });\n      if (!user) {\n        return json({\n          success: false,\n          error: \"User not found\"\n        }, {\n          status: 404\n        });\n      }\n      const productId = formData.get(\"productId\");\n      const approvedRecommendationsJson = formData.get(\"approvedRecommendations\");\n      const approvedRecommendations = JSON.parse(approvedRecommendationsJson);\n      console.log('\uD83C\uDFAF Product ID:', productId);\n      console.log('\u2705 Approved recommendations:', approvedRecommendations.length);\n      console.log('\uD83D\uDCCB Approved recommendation fields:', approvedRecommendations.map(r => r.field));\n\n      // Validation: Ensure we only process approved recommendations\n      if (!Array.isArray(approvedRecommendations) || approvedRecommendations.length === 0) {\n        return json({\n          success: false,\n          error: \"No approved recommendations provided\"\n        }, {\n          status: 400\n        });\n      }\n\n      // Get current stored recommendations to update their status\n      const productRecord = await db.product.findFirst({\n        where: {\n          userId: user.id,\n          shopifyId: productId\n        }\n      });\n      let updatedRecommendationData = null;\n      if (productRecord?.recommendations) {\n        const recData = productRecord.recommendations;\n        // Update status of approved recommendations to 'applied'\n        const approvedFields = approvedRecommendations.map(r => r.field);\n        updatedRecommendationData = {\n          ...recData,\n          recommendations: recData.recommendations.map(rec => ({\n            ...rec,\n            status: approvedFields.includes(rec.field) ? 'applied' : rec.status\n          })),\n          lastUpdated: new Date().toISOString()\n        };\n      }\n\n      // Load offline session\n      const {\n        sessionStorage\n      } = await import(\"../shopify.server\");\n      const offlineSessionId = `offline_${session.shop}`;\n      const offlineSession = await sessionStorage.loadSession(offlineSessionId);\n      if (!offlineSession?.accessToken) {\n        return json({\n          success: false,\n          error: \"Offline session not found. Please reinstall the app.\"\n        }, {\n          status: 401\n        });\n      }\n\n      // Fetch the product and calculate initial score\n      const {\n        ShopifySyncService\n      } = await import(\"../utils/shopifySync\");\n      const {\n        mapShopifyToSpec,\n        calculateProductScore\n      } = await import(\"../utils/fieldMapper\");\n      const syncService = new ShopifySyncService(session.shop, offlineSession.accessToken);\n      const allProducts = await syncService.syncProducts(user.id);\n      const product = allProducts.find(p => p.id.includes(productId));\n      if (!product) {\n        return json({\n          success: false,\n          error: \"Product not found\"\n        }, {\n          status: 404\n        });\n      }\n\n      // Calculate initial score for comparison\n      const initialSpec = mapShopifyToSpec(product);\n      const initialScore = calculateProductScore(initialSpec).score;\n      console.log('\uD83D\uDCCA Initial product score:', initialScore);\n\n      // Apply approved changes to Shopify\n      const {\n        AIEnrichmentService\n      } = await import(\"../utils/aiEnrich\");\n      const enrichmentService = new AIEnrichmentService();\n\n      // Create a partial enrichment result with only approved improvements\n      const partialResult = {\n        originalProduct: product,\n        enrichedSpec: {},\n        improvements: approvedRecommendations,\n        totalUsage: 0,\n        errors: []\n      };\n      const success = await enrichmentService.applyEnrichmentToShopify(user.id, session.shop, offlineSession.accessToken, partialResult);\n      console.log('\u2705 Applied changes to Shopify:', success);\n\n      // Validate score improvement by re-fetching and recalculating\n      let finalScore = initialScore;\n      if (success) {\n        try {\n          // Re-fetch the product to get updated data\n          const updatedProducts = await syncService.syncProducts(user.id);\n          const updatedProduct = updatedProducts.find(p => p.id.includes(productId));\n          if (updatedProduct) {\n            const updatedSpec = mapShopifyToSpec(updatedProduct);\n            finalScore = calculateProductScore(updatedSpec).score;\n            console.log('\uD83D\uDCCA Final product score:', finalScore);\n            console.log('\uD83D\uDCC8 Score improvement:', finalScore - initialScore);\n          }\n        } catch (error) {\n          console.warn('Could not validate score improvement:', error);\n        }\n      }\n\n      // Update recommendation status in database\n      if (updatedRecommendationData && productRecord) {\n        await db.product.update({\n          where: {\n            id: productRecord.id\n          },\n          data: {\n            recommendations: updatedRecommendationData\n          }\n        });\n        console.log('\uD83D\uDCBE Updated recommendation status to applied in database');\n      }\n\n      // Log the operation\n      await db.log.create({\n        data: {\n          userId: user.id,\n          type: 'enrichment',\n          message: `Applied ${approvedRecommendations.length} approved AI recommendations to product ${productId}`,\n          metadata: {\n            productId,\n            approvedCount: approvedRecommendations.length,\n            timestamp: new Date().toISOString()\n          }\n        }\n      });\n      return json({\n        success: true,\n        appliedCount: approvedRecommendations.length,\n        scoreImprovement: {\n          initial: initialScore,\n          final: finalScore,\n          improvement: finalScore - initialScore\n        }\n      });\n    }\n    if (actionType === \"save-customer-input\") {\n      console.log('\uD83D\uDCBE Saving customer input data');\n      const user = await db.user.findUnique({\n        where: {\n          shopId: session.shop\n        }\n      });\n      if (!user) {\n        return json({\n          success: false,\n          error: \"User not found\"\n        }, {\n          status: 404\n        });\n      }\n      const productId = formData.get(\"productId\");\n      const inputDataJson = formData.get(\"inputData\");\n      const inputData = JSON.parse(inputDataJson);\n      console.log('\uD83C\uDFAF Product ID:', productId);\n      console.log('\uD83D\uDCDD Input data:', inputData);\n\n      // Load offline session\n      const {\n        sessionStorage\n      } = await import(\"../shopify.server\");\n      const offlineSessionId = `offline_${session.shop}`;\n      const offlineSession = await sessionStorage.loadSession(offlineSessionId);\n      if (!offlineSession?.accessToken) {\n        return json({\n          success: false,\n          error: \"Offline session not found. Please reinstall the app.\"\n        }, {\n          status: 401\n        });\n      }\n\n      // Apply customer input to Shopify metafields\n      const {\n        GraphQLClient\n      } = await import('graphql-request');\n      const graphqlClient = new GraphQLClient(`https://${session.shop}/admin/api/2025-10/graphql`, {\n        headers: {\n          'X-Shopify-Access-Token': offlineSession.accessToken,\n          'Content-Type': 'application/json'\n        }\n      });\n      let appliedCount = 0;\n      const appliedFields = [];\n\n      // Process each input field\n      for (const [field, value] of Object.entries(inputData)) {\n        try {\n          let metafieldValue = value;\n          let metafieldType = 'single_line_text_field';\n\n          // Handle special field types\n          if (field.startsWith('dimensions_')) {\n            // Skip individual dimension components, we'll handle dimensions as a group\n            continue;\n          } else if (field === 'specifications' || field === 'warranty' || field === 'return_policy') {\n            metafieldType = 'multi_line_text_field';\n          }\n          const CREATE_METAFIELD_MUTATION = `\n            mutation metafieldsSet($metafields: [MetafieldsSetInput!]!) {\n              metafieldsSet(metafields: $metafields) {\n                metafields {\n                  id\n                  namespace\n                  key\n                  value\n                }\n                userErrors {\n                  field\n                  message\n                }\n              }\n            }\n          `;\n          const response = await graphqlClient.request(CREATE_METAFIELD_MUTATION, {\n            metafields: [{\n              ownerId: `gid://shopify/Product/${productId}`,\n              namespace: 'catalogai',\n              key: field,\n              type: metafieldType,\n              value: metafieldValue\n            }]\n          });\n          if (!response.metafieldsSet.userErrors?.length) {\n            appliedCount++;\n            appliedFields.push(field);\n            console.log(`\u2705 Applied ${field}: ${metafieldValue}`);\n          } else {\n            console.error(`\u274C Error applying ${field}:`, response.metafieldsSet.userErrors);\n          }\n        } catch (error) {\n          console.error(`\u274C Error applying ${field}:`, error);\n        }\n      }\n\n      // Handle dimensions separately if provided\n      const dimensionFields = ['dimensions_length', 'dimensions_width', 'dimensions_height'];\n      const dimensionData = dimensionFields.reduce((acc, key) => {\n        if (inputData[key]) {\n          const dimKey = key.replace('dimensions_', '');\n          acc[dimKey] = inputData[key];\n        }\n        return acc;\n      }, {});\n      if (Object.keys(dimensionData).length > 0) {\n        try {\n          const CREATE_METAFIELD_MUTATION = `\n            mutation metafieldsSet($metafields: [MetafieldsSetInput!]!) {\n              metafieldsSet(metafields: $metafields) {\n                metafields {\n                  id\n                  namespace\n                  key\n                  value\n                }\n                userErrors {\n                  field\n                  message\n                }\n              }\n            }\n          `;\n          const response = await graphqlClient.request(CREATE_METAFIELD_MUTATION, {\n            metafields: [{\n              ownerId: `gid://shopify/Product/${productId}`,\n              namespace: 'catalogai',\n              key: 'dimensions',\n              type: 'json',\n              value: JSON.stringify(dimensionData)\n            }]\n          });\n          if (!response.metafieldsSet.userErrors?.length) {\n            appliedCount++;\n            appliedFields.push('dimensions');\n            console.log(`\u2705 Applied dimensions:`, dimensionData);\n          }\n        } catch (error) {\n          console.error('\u274C Error applying dimensions:', error);\n        }\n      }\n\n      // Log the operation\n      await db.log.create({\n        data: {\n          userId: user.id,\n          type: 'customer_input',\n          message: `Applied ${appliedCount} customer input fields to product ${productId}`,\n          metadata: {\n            productId,\n            appliedFields,\n            appliedCount,\n            timestamp: new Date().toISOString()\n          }\n        }\n      });\n      return json({\n        success: true,\n        appliedCount,\n        appliedFields,\n        message: `Successfully saved ${appliedCount} fields to your product!`\n      });\n    }\n    return json({\n      success: true\n    });\n  } catch (error) {\n    console.error('\u274C Error in index action:', error);\n\n    // If it's a Response (OAuth redirect), re-throw it\n    if (error instanceof Response) {\n      console.log('\uD83D\uDD04 Re-throwing OAuth redirect response');\n      throw error;\n    }\n\n    // Create user-friendly error message\n    let userFriendlyError = 'Sync failed. Please try again.';\n    if (error instanceof Error) {\n      if (error.message.includes('401') || error.message.includes('Unauthorized')) {\n        userFriendlyError = 'Authentication failed. Please reinstall the app.';\n      } else if (error.message.includes('403') || error.message.includes('Forbidden')) {\n        userFriendlyError = 'Insufficient permissions. Please check app permissions.';\n      } else if (error.message.includes('429') || error.message.includes('rate limit')) {\n        userFriendlyError = 'Rate limit exceeded. Please try again in a few minutes.';\n      } else if (error.message.includes('GraphQL')) {\n        userFriendlyError = 'API connection failed. Please try again.';\n      }\n    }\n\n    // Log the error to database with user-friendly message\n    try {\n      const {\n        session\n      } = await authenticate.admin(request);\n      const user = await db.user.findUnique({\n        where: {\n          shopId: session.shop\n        }\n      });\n      if (user) {\n        await db.log.create({\n          data: {\n            userId: user.id,\n            type: 'error',\n            message: userFriendlyError,\n            error: error instanceof Error ? error.message : 'Unknown error',\n            metadata: {\n              timestamp: new Date().toISOString(),\n              action: 'sync'\n            }\n          }\n        });\n      }\n    } catch (logError) {\n      console.error('Failed to log error:', logError);\n    }\n    return json({\n      success: false,\n      error: userFriendlyError\n    }, {\n      status: 500\n    });\n  }\n};\nexport default function Index() {\n  _s();\n  const loaderData = useLoaderData();\n  const {\n    shop,\n    totalProducts,\n    averageScore,\n    dashboardMetrics,\n    lastSync,\n    recentLogs,\n    user\n  } = loaderData;\n\n  // Local state for products that can be updated\n  const [products, setProducts] = useState(loaderData.products);\n  const [isSyncing, setIsSyncing] = useState(false);\n  const [isHealthChecking, setIsHealthChecking] = useState(false);\n  const [toastActive, setToastActive] = useState(false);\n  const [toastMessage, setToastMessage] = useState(\"\");\n  const [healthModalOpen, setHealthModalOpen] = useState(false);\n  const [healthCheckJobId, setHealthCheckJobId] = useState();\n  const [selectedProduct, setSelectedProduct] = useState(null);\n  const [productModalOpen, setProductModalOpen] = useState(false);\n  const [recommendations, setRecommendations] = useState([]);\n  const [approvalState, setApprovalState] = useState({});\n  const [isGeneratingRecommendations, setIsGeneratingRecommendations] = useState(false);\n  const [isApplyingChanges, setIsApplyingChanges] = useState(false);\n  const [justAppliedChanges, setJustAppliedChanges] = useState(false);\n\n  // Customer input form state\n  const [customerInputOpen, setCustomerInputOpen] = useState(false);\n  const [customerInputData, setCustomerInputData] = useState({});\n  const [isSavingCustomerInput, setIsSavingCustomerInput] = useState(false);\n\n  // Filter state for health dashboard\n  const [showOnlyLowHealth, setShowOnlyLowHealth] = useState(false);\n  const [showOnlyNoDescription, setShowOnlyNoDescription] = useState(false);\n  const syncFetcher = useFetcher();\n  const healthCheckFetcher = useFetcher();\n  const recommendationFetcher = useFetcher();\n  const customerInputFetcher = useFetcher();\n\n  // Update local products state when loader data changes (e.g., after sync)\n  useEffect(() => {\n    setProducts(loaderData.products);\n  }, [loaderData.products]);\n  const handleSync = () => {\n    setIsSyncing(true);\n    syncFetcher.submit({\n      action: \"sync\"\n    }, {\n      method: \"post\"\n    } // Same route action, no need to specify action path\n    );\n  };\n  const handleHealthCheck = () => {\n    setIsHealthChecking(true);\n    healthCheckFetcher.submit({}, {\n      method: \"get\",\n      action: \"/api/health-check\"\n    });\n  };\n  const handleProductClick = product => {\n    setSelectedProduct(product);\n    setProductModalOpen(true);\n    setJustAppliedChanges(false);\n\n    // Load existing recommendations if available\n    if (product.recommendations?.recommendations) {\n      console.log('\uD83D\uDCCB Loading existing recommendations for product:', product.id);\n      const existingRecs = product.recommendations.recommendations;\n      setRecommendations(existingRecs);\n\n      // Set approval state based on existing status\n      const approvalState = {};\n      existingRecs.forEach(rec => {\n        if (rec.status === 'approved' || rec.status === 'applied') {\n          approvalState[rec.field] = true;\n        } else if (rec.status === 'rejected') {\n          approvalState[rec.field] = false;\n        }\n        // pending recommendations remain undefined in approvalState\n      });\n      setApprovalState(approvalState);\n    } else {\n      setRecommendations([]);\n      setApprovalState({});\n    }\n  };\n  const handleGenerateRecommendations = () => {\n    if (!selectedProduct) return;\n    setIsGeneratingRecommendations(true);\n    setJustAppliedChanges(false); // Reset the applied changes flag\n    recommendationFetcher.submit({\n      action: \"generate-recommendations\",\n      productId: selectedProduct.id,\n      forceRegenerate: recommendations.length > 0 ? \"true\" : \"false\" // Force regenerate if called from regenerate button\n    }, {\n      method: \"post\"\n    });\n  };\n  const handleToggleApproval = (fieldName, newState) => {\n    setApprovalState(prev => ({\n      ...prev,\n      [fieldName]: newState !== undefined ? newState : prev[fieldName] === true ? false : prev[fieldName] === false ? undefined : true\n    }));\n  };\n  const handleApplyChanges = () => {\n    if (!selectedProduct) return;\n    const approvedRecommendations = recommendations.filter(rec => approvalState[rec.field] === true);\n    const rejectedRecommendations = recommendations.filter(rec => approvalState[rec.field] === false);\n    const pendingRecommendations = recommendations.filter(rec => approvalState[rec.field] === undefined);\n    console.log('\uD83D\uDCCA Approval Summary:', {\n      total: recommendations.length,\n      approved: approvedRecommendations.length,\n      rejected: rejectedRecommendations.length,\n      pending: pendingRecommendations.length,\n      approvedFields: approvedRecommendations.map(r => r.field),\n      rejectedFields: rejectedRecommendations.map(r => r.field)\n    });\n    if (approvedRecommendations.length === 0) {\n      setToastMessage('Please approve at least one recommendation before applying changes');\n      setToastActive(true);\n      return;\n    }\n    console.log('\uD83D\uDE80 Starting apply changes...');\n    console.log('\uD83D\uDCCB Approved recommendations to apply:', approvedRecommendations);\n    setIsApplyingChanges(true);\n    recommendationFetcher.submit({\n      action: \"apply-recommendations\",\n      productId: selectedProduct.id,\n      approvedRecommendations: JSON.stringify(approvedRecommendations)\n    }, {\n      method: \"post\"\n    });\n  };\n\n  // Handle sync completion\n  if (syncFetcher.data && isSyncing) {\n    const data = syncFetcher.data;\n    if (data.success) {\n      setToastMessage(`Successfully synced ${data.data?.productsCount || 0} products`);\n      setToastActive(true);\n    } else {\n      setToastMessage(`Sync failed: ${data.error}`);\n      setToastActive(true);\n    }\n    setIsSyncing(false);\n  }\n\n  // Handle health check completion\n  if (healthCheckFetcher.data && isHealthChecking) {\n    const data = healthCheckFetcher.data;\n    if (data.success) {\n      setHealthCheckJobId(data.jobId);\n      setHealthModalOpen(true);\n      setToastMessage(`Health scan initiated - analyzing ${data.currentScore}% current score`);\n      setToastActive(true);\n    } else {\n      setToastMessage(`Health check failed: ${data.error}`);\n      setToastActive(true);\n    }\n    setIsHealthChecking(false);\n  }\n\n  // Handle recommendation generation completion\n  if (recommendationFetcher.data && isGeneratingRecommendations) {\n    const data = recommendationFetcher.data;\n    if (data.success && data.recommendations) {\n      setRecommendations(data.recommendations);\n      if (data.isExisting) {\n        setToastMessage(`Loaded existing ${data.recommendations.length} AI recommendations`);\n      } else {\n        setToastMessage(`Generated ${data.recommendations.length} new AI recommendations`);\n      }\n      setToastActive(true);\n\n      // Update approval state based on stored status\n      if (data.isExisting) {\n        const approvalState = {};\n        data.recommendations.forEach(rec => {\n          if (rec.status === 'approved' || rec.status === 'applied') {\n            approvalState[rec.field] = true;\n          } else if (rec.status === 'rejected') {\n            approvalState[rec.field] = false;\n          }\n        });\n        setApprovalState(approvalState);\n      }\n    } else if (data.error) {\n      setToastMessage(`Failed to generate recommendations: ${data.error}`);\n      setToastActive(true);\n    }\n    setIsGeneratingRecommendations(false);\n  }\n\n  // Handle apply changes completion\n  if (recommendationFetcher.data && isApplyingChanges) {\n    const data = recommendationFetcher.data;\n    console.log('\uD83D\uDD0D Apply changes response:', data);\n    console.log('\uD83D\uDD0D Response type:', typeof data);\n    console.log('\uD83D\uDD0D Response keys:', Object.keys(data));\n    if (data.success && selectedProduct) {\n      // Get the applied field names for personalized celebrations\n      const appliedFields = recommendations.filter(rec => approvalState[rec.field] === true).map(rec => rec.field);\n\n      // Field-specific celebration messages\n      const getFieldCelebration = field => {\n        const celebrations = {\n          keywords: \"\uD83C\uDFAF Awesome! Keywords added - your product is now more discoverable!\",\n          description: \"\uD83D\uDCDD Great work! Enhanced description will help customers understand your product better!\",\n          features: \"\u2728 Fantastic! Feature list added - customers can see what makes your product special!\",\n          use_cases: \"\uD83D\uDCA1 Perfect! Use cases added - customers now know how to use your product!\",\n          target_audience: \"\uD83D\uDC65 Excellent! Target audience defined - your marketing just got more focused!\",\n          material: \"\uD83D\uDD2C Nice! Material info added - customers can make informed decisions!\",\n          dimensions: \"\uD83D\uDCCF Great! Dimensions added - no more size surprises for customers!\",\n          weight: \"\u2696\uFE0F Perfect! Weight information helps with shipping expectations!\",\n          color: \"\uD83C\uDFA8 Colorful! Color info added - visual buyers will love this!\",\n          brand: \"\uD83C\uDFF7\uFE0F Brand power! Brand info strengthens customer trust!\",\n          warranty: \"\uD83D\uDEE1\uFE0F Security boost! Warranty info builds customer confidence!\",\n          sku: \"\uD83D\uDCE6 Organized! SKU added for better inventory management!\",\n          tags: \"\uD83C\uDFF7\uFE0F Tagged! Product categorization just got better!\",\n          ai_search_queries: \"\uD83E\uDD16 AI-ready! Search queries optimized for AI discovery!\",\n          semantic_description: \"\uD83E\uDDE0 Smart! AI-optimized description for better search matching!\"\n        };\n        return celebrations[field] || `\u2705 ${field.charAt(0).toUpperCase() + field.slice(1).replace(/_/g, ' ')} updated!`;\n      };\n\n      // Create celebration message based on applied fields\n      let message = '';\n      if (appliedFields.length === 1) {\n        message = getFieldCelebration(appliedFields[0]);\n      } else if (appliedFields.length === 2) {\n        message = `\uD83C\uDF89 Double win! Updated ${appliedFields.map(f => f.replace(/_/g, ' ')).join(' and ')}!`;\n      } else if (appliedFields.length >= 3) {\n        message = `\uD83D\uDE80 Amazing progress! Applied ${appliedFields.length} improvements - you're on fire!`;\n      }\n\n      // Get the final score from response or calculate improvement\n      let finalScore = selectedProduct.score;\n      let pointsEarned = 0;\n      if (data.scoreImprovement) {\n        finalScore = data.scoreImprovement.final;\n        const improvement = data.scoreImprovement.improvement;\n        pointsEarned = appliedFields.length * 15; // Estimate points based on fields\n\n        if (improvement > 0) {\n          message += ` \uD83D\uDCC8 Score: ${data.scoreImprovement.initial}% \u2192 ${data.scoreImprovement.final}% (+${improvement.toFixed(0)}%) | +${pointsEarned} points!`;\n        } else {\n          message += ` \uD83D\uDCCA Score: ${data.scoreImprovement.final}%`;\n        }\n      }\n\n      // Update gaps by removing applied fields\n      const updatedGaps = selectedProduct.gaps.filter(gap => !appliedFields.includes(gap));\n\n      // Update selected product with new score and gaps\n      const updatedSelectedProduct = {\n        ...selectedProduct,\n        score: finalScore,\n        gaps: updatedGaps\n      };\n\n      // Update products array with new score and gaps\n      setProducts(prev => prev.map(p => p.id === selectedProduct.id ? updatedSelectedProduct : p));\n\n      // Update selected product state\n      setSelectedProduct(updatedSelectedProduct);\n\n      // Clear recommendations and approval state for next use\n      setRecommendations([]);\n      setApprovalState({});\n      setJustAppliedChanges(true);\n\n      // Safety check: ensure message is user-friendly\n      const safeMessage = typeof message === 'string' && message.length > 0 && !message.match(/^\\d{3}$/) ? message : 'Changes applied successfully!';\n      setToastMessage(safeMessage);\n      setToastActive(true);\n\n      // Keep modal open to show the updated score - don't close or reload!\n    } else if (data.error) {\n      setToastMessage(`Failed to apply changes: ${data.error}`);\n      setToastActive(true);\n    } else {\n      // Handle unexpected response format\n      console.error('\uD83D\uDEA8 Unexpected response format:', data);\n      setToastMessage(`Unexpected response: ${JSON.stringify(data)}`);\n      setToastActive(true);\n    }\n    setIsApplyingChanges(false);\n  }\n\n  // Handle customer input save completion\n  if (customerInputFetcher.data && isSavingCustomerInput) {\n    const data = customerInputFetcher.data;\n    console.log('\uD83D\uDD0D Customer input save response:', data);\n    if (data.success && selectedProduct) {\n      const appliedFields = data.appliedFields || [];\n      const appliedCount = data.appliedCount || 0;\n\n      // Create celebration message\n      let message = '';\n      if (appliedCount === 1) {\n        const fieldName = appliedFields[0]?.replace(/_/g, ' ');\n        message = `\uD83C\uDF89 Great! ${fieldName} added to your product specs!`;\n      } else if (appliedCount > 1) {\n        message = `\uD83D\uDE80 Excellent! Added ${appliedCount} product specifications!`;\n      }\n\n      // Estimate score improvement (customer input fields typically worth 3-5% each)\n      const estimatedImprovement = appliedCount * 4;\n      message += ` \uD83D\uDCC8 Health score boost: ~+${estimatedImprovement}% | +${appliedCount * 15} points!`;\n\n      // Update selected product to remove applied fields from gaps\n      const updatedGaps = selectedProduct.gaps.filter(gap => !appliedFields.includes(gap));\n      const updatedScore = Math.min(100, selectedProduct.score + estimatedImprovement);\n      const updatedSelectedProduct = {\n        ...selectedProduct,\n        score: updatedScore,\n        gaps: updatedGaps\n      };\n\n      // Update products array\n      setProducts(prev => prev.map(p => p.id === selectedProduct.id ? updatedSelectedProduct : p));\n\n      // Update selected product state\n      setSelectedProduct(updatedSelectedProduct);\n\n      // Clear customer input form\n      setCustomerInputData({});\n      setCustomerInputOpen(false);\n      setJustAppliedChanges(true);\n      setToastMessage(message);\n      setToastActive(true);\n    } else if (data.error) {\n      setToastMessage(`Failed to save: ${data.error}`);\n      setToastActive(true);\n    }\n    setIsSavingCustomerInput(false);\n  }\n\n  // Helper functions for customer input forms\n  const getFieldPlaceholder = field => {\n    const placeholders = {\n      material: 'e.g., Cotton, Polyester, Steel, Wood',\n      weight: 'e.g., 2.5 lbs, 1.2 kg',\n      color: 'e.g., Navy Blue, Black, Red',\n      size: 'e.g., Large, XL, 12x8x4',\n      brand: 'e.g., Your Brand Name',\n      model: 'e.g., Model ABC-123',\n      upc: 'e.g., 123456789012',\n      vendor: 'e.g., Supplier Company',\n      age_range: 'e.g., 18-65, Adults, 3+',\n      compatibility: 'e.g., iPhone 12, Samsung Galaxy',\n      warranty: 'e.g., 1 year limited warranty',\n      return_policy: 'e.g., 30-day returns accepted',\n      shipping_info: 'e.g., Free shipping over $50',\n      specifications: 'e.g., Power: 110V, Material: ABS Plastic',\n      documentation_url: 'e.g., https://yoursite.com/manual.pdf',\n      video_urls: 'e.g., https://youtube.com/watch?v=abc123'\n    };\n    return placeholders[field] || `Enter ${field.replace(/_/g, ' ')}`;\n  };\n  const getFieldHelpText = field => {\n    const helpTexts = {\n      material: 'Primary material or fabric composition',\n      weight: 'Product weight with unit (lbs, kg, oz)',\n      color: 'Primary color or color options',\n      brand: 'Manufacturer or brand name',\n      warranty: 'Warranty terms and duration',\n      upc: 'Universal Product Code for inventory',\n      specifications: 'Technical specs, one per line'\n    };\n    return helpTexts[field] || '';\n  };\n  const getFieldPoints = field => {\n    const fieldCategories = {\n      required: 25,\n      high: 20,\n      medium: 15,\n      low: 10\n    };\n    const highFields = ['material', 'dimensions', 'weight', 'brand'];\n    const mediumFields = ['color', 'size', 'upc', 'compatibility', 'age_range', 'gender'];\n    if (highFields.includes(field)) return fieldCategories.high;\n    if (mediumFields.includes(field)) return fieldCategories.medium;\n    return fieldCategories.low;\n  };\n  const getFieldImpact = field => {\n    const highFields = ['material', 'dimensions', 'weight', 'brand'];\n    const mediumFields = ['color', 'size', 'upc', 'compatibility', 'age_range', 'gender'];\n    if (highFields.includes(field)) return '4-5';\n    if (mediumFields.includes(field)) return '3-4';\n    return '2-3';\n  };\n  const handleSaveCustomerInput = () => {\n    if (!selectedProduct) return;\n\n    // Validate and filter data\n    const validationErrors = [];\n    const filledData = {};\n    Object.entries(customerInputData).forEach(([field, value]) => {\n      const trimmedValue = value.trim();\n      if (!trimmedValue) return;\n\n      // Basic field validation\n      if (field === 'upc' && trimmedValue.length < 8) {\n        validationErrors.push('UPC must be at least 8 digits');\n      } else if (field === 'weight' && !/\\d+(\\.\\d+)?\\s*(lbs?|kgs?|oz|pounds?|kilograms?|ounces?)/i.test(trimmedValue)) {\n        validationErrors.push('Weight must include unit (e.g., \"2.5 lbs\", \"1.2 kg\")');\n      } else if ((field === 'documentation_url' || field === 'video_urls') && trimmedValue && !trimmedValue.startsWith('http')) {\n        validationErrors.push(`${field.replace(/_/g, ' ')} must be a valid URL starting with http`);\n      } else if (field === 'age_range' && trimmedValue && !/\\d+/.test(trimmedValue)) {\n        validationErrors.push('Age range must contain numbers (e.g., \"18+\", \"3-12\")');\n      } else {\n        filledData[field] = trimmedValue;\n      }\n    });\n    if (validationErrors.length > 0) {\n      setToastMessage(`Validation errors: ${validationErrors.join(', ')}`);\n      setToastActive(true);\n      return;\n    }\n    if (Object.keys(filledData).length === 0) {\n      setToastMessage('Please fill in at least one field before saving');\n      setToastActive(true);\n      return;\n    }\n    setIsSavingCustomerInput(true);\n    customerInputFetcher.submit({\n      action: 'save-customer-input',\n      productId: selectedProduct.id,\n      inputData: JSON.stringify(filledData)\n    }, {\n      method: 'post'\n    });\n  };\n\n  // Filter products based on current filter state\n  const filteredProducts = products.filter(product => {\n    if (showOnlyLowHealth && product.score >= 70) return false;\n    if (showOnlyNoDescription && product.description && product.description !== \"No description\") return false;\n    return true;\n  });\n  const rows = products.map(product => [product.id, product.title, product.description.length > 50 ? `${product.description.substring(0, 50)}...` : product.description, `${product.score}%`, product.gaps.length > 0 ? product.gaps.join(\", \") : \"None\"]);\n  return <Page title=\"CatalogAI Optimizer Dashboard\">\n      <Layout>\n        {/* New Dashboard Overview Cards */}\n        <Layout.Section>\n          <div style={{\n          display: 'grid',\n          gridTemplateColumns: 'repeat(3, 1fr)',\n          gap: '20px'\n        }}>\n            {/* AI Readiness Score Card */}\n            <Card>\n              <BlockStack align=\"center\">\n                <div style={{\n                position: 'relative',\n                width: '80px',\n                height: '80px',\n                marginBottom: '10px'\n              }}>\n                  <svg width=\"80\" height=\"80\" style={{\n                  transform: 'rotate(-90deg)'\n                }}>\n                    <circle cx=\"40\" cy=\"40\" r=\"35\" fill=\"none\" stroke=\"#e5e7eb\" strokeWidth=\"8\" />\n                    <circle cx=\"40\" cy=\"40\" r=\"35\" fill=\"none\" stroke={dashboardMetrics.aiReadinessScore >= 90 ? '#10b981' : dashboardMetrics.aiReadinessScore >= 50 ? '#f59e0b' : '#ef4444'} strokeWidth=\"8\" strokeDasharray={`${dashboardMetrics.aiReadinessScore / 100 * 220} 220`} strokeLinecap=\"round\" />\n\n                  </svg>\n                  <div style={{\n                  position: 'absolute',\n                  top: '50%',\n                  left: '50%',\n                  transform: 'translate(-50%, -50%)',\n                  fontSize: '18px',\n                  fontWeight: 'bold',\n                  color: dashboardMetrics.aiReadinessScore >= 90 ? '#10b981' : dashboardMetrics.aiReadinessScore >= 50 ? '#f59e0b' : '#ef4444'\n                }}>\n                    {dashboardMetrics.aiReadinessScore}%\n                  </div>\n                </div>\n                <Text variant=\"headingLg\" as=\"p\">{dashboardMetrics.aiReadinessScore} / 100</Text>\n                <Text variant=\"bodyMd\" tone=\"subdued\" as=\"p\">Excellent AI readiness</Text>\n              </BlockStack>\n            </Card>\n\n            {/* Products Passed Card */}\n            <Card>\n              <BlockStack align=\"center\">\n                <Text variant=\"headingLg\" as=\"p\">{dashboardMetrics.productsPassedPercentage}%</Text>\n                <Text variant=\"bodyMd\" as=\"p\">{dashboardMetrics.validProducts} of {dashboardMetrics.totalProducts} products</Text>\n                <Text variant=\"bodySm\" tone=\"success\" as=\"p\">\u2191 5% from last week</Text>\n              </BlockStack>\n            </Card>\n\n            {/* Feed Freshness Card */}\n            <Card>\n              <BlockStack align=\"center\">\n                <Text variant=\"headingLg\" as=\"p\">\n                  {dashboardMetrics.lastSyncTime ? `${Math.floor((Date.now() - new Date(dashboardMetrics.lastSyncTime).getTime()) / (1000 * 60 * 60))}h ago` : 'Never'}\n              </Text>\n                <Text variant=\"bodyMd\" as=\"p\">Last synced successfully</Text>\n              </BlockStack>\n            </Card>\n          </div>\n        </Layout.Section>\n\n        {/* Feed Health Section */}\n        <Layout.Section>\n          <Card>\n              <BlockStack>\n              <Text variant=\"headingLg\" as=\"h2\">Feed Health</Text>\n              <Text variant=\"bodyMd\" tone=\"subdued\" as=\"p\">Product validation distribution</Text>\n              \n              <div style={{\n              marginTop: '20px'\n            }}>\n                {/* Valid Products */}\n                <div style={{\n                display: 'flex',\n                alignItems: 'center',\n                marginBottom: '10px'\n              }}>\n                  <div style={{\n                  width: `${dashboardMetrics.validProducts / dashboardMetrics.totalProducts * 200}px`,\n                  height: '8px',\n                  background: '#10b981',\n                  borderRadius: '4px',\n                  marginRight: '10px',\n                  minWidth: '20px'\n                }} />\n                  <Text variant=\"bodyMd\" as=\"p\">{dashboardMetrics.validProducts} products</Text>\n                </div>\n                \n                {/* Warning Products */}\n                <div style={{\n                display: 'flex',\n                alignItems: 'center',\n                marginBottom: '10px'\n              }}>\n                  <div style={{\n                  width: `${dashboardMetrics.warningProducts / dashboardMetrics.totalProducts * 200}px`,\n                  height: '8px',\n                  background: '#f59e0b',\n                  borderRadius: '4px',\n                  marginRight: '10px',\n                  minWidth: '20px'\n                }} />\n                  <Text variant=\"bodyMd\" as=\"p\">{dashboardMetrics.warningProducts} products</Text>\n                </div>\n                \n                {/* Invalid Products */}\n                <div style={{\n                display: 'flex',\n                alignItems: 'center',\n                marginBottom: '20px'\n              }}>\n                  <div style={{\n                  width: `${dashboardMetrics.invalidProducts / dashboardMetrics.totalProducts * 200}px`,\n                  height: '8px',\n                  background: '#ef4444',\n                  borderRadius: '4px',\n                  marginRight: '10px',\n                  minWidth: '20px'\n                }} />\n                  <Text variant=\"bodyMd\" as=\"p\">{dashboardMetrics.invalidProducts} products</Text>\n                </div>\n                \n                <Button variant=\"primary\">View Validation Report</Button>\n              </div>\n              </BlockStack>\n          </Card>\n        </Layout.Section>\n\n        {/* Next Actions Section */}\n        <Layout.Section>\n          <Card>\n            <BlockStack>\n              <Text variant=\"headingLg\" as=\"h2\">Next Actions</Text>\n              <Text variant=\"bodyMd\" tone=\"subdued\" as=\"p\">Recommended optimizations for your catalog</Text>\n              \n              <div style={{\n              display: 'grid',\n              gridTemplateColumns: 'repeat(2, 1fr)',\n              gap: '20px',\n              marginTop: '20px'\n            }}>\n                {/* Fix Validation Errors */}\n                <Card>\n                  <BlockStack>\n                    <Text variant=\"bodyMd\" as=\"p\">{dashboardMetrics.invalidProducts} products need attention</Text>\n                    <Button variant=\"primary\" tone=\"critical\">Take Action</Button>\n            </BlockStack>\n                </Card>\n                \n                {/* Run AI Enrichment */}\n                <Card>\n                  <BlockStack>\n                    <Text variant=\"bodyMd\" as=\"p\">Optimize {dashboardMetrics.warningProducts} products</Text>\n                    <Button variant=\"primary\">Take Action</Button>\n                  </BlockStack>\n                </Card>\n              </div>\n            </BlockStack>\n          </Card>\n        </Layout.Section>\n\n        {/* Catalog Optimization Progress Section */}\n        <Layout.Section>\n          <Card>\n            <BlockStack>\n              <div style={{\n              marginBottom: '10px'\n            }}>\n                <div style={{\n                width: '100%',\n                height: '8px',\n                background: '#e5e7eb',\n                borderRadius: '4px',\n                overflow: 'hidden'\n              }}>\n                  <div style={{\n                  width: `${dashboardMetrics.optimizationProgress}%`,\n                  height: '100%',\n                  background: '#3b82f6',\n                  transition: 'width 0.3s ease'\n                }} />\n                </div>\n              </div>\n              \n              <div style={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center'\n            }}>\n                <Text variant=\"bodyMd\" as=\"p\">\n                  Your catalog is {dashboardMetrics.optimizationProgress}% AI-ready \u2014 {100 - dashboardMetrics.optimizationProgress}% left to optimize!\n                </Text>\n                <Text variant=\"bodyMd\" tone=\"subdued\" as=\"p\">\n                  {dashboardMetrics.optimizationProgress}% Complete\n                </Text>\n              </div>\n              \n              <div style={{\n              marginTop: '5px'\n            }}>\n                <Text variant=\"bodySm\" tone=\"subdued\" as=\"p\">\n                  Keep going! \uD83D\uDE80\n                </Text>\n              </div>\n            </BlockStack>\n          </Card>\n        </Layout.Section>\n\n        <Layout.Section>\n          <Card>\n            <BlockStack>\n              <InlineStack>\n                <BlockStack>\n                  <Text variant=\"headingLg\" as=\"h2\">\n                    \uD83D\uDCE6 Product Catalog\n                </Text>\n                  <Text variant=\"bodyMd\" tone=\"subdued\" as=\"p\">\n                    Browse and manage your product inventory\n                  </Text>\n                </BlockStack>\n                <InlineStack>\n                  <Button onClick={handleSync} loading={isSyncing} variant=\"primary\" size=\"large\">\n\n                    {isSyncing ? \"Syncing...\" : \"\uD83D\uDD04 Sync Products\"}\n                  </Button>\n                </InlineStack>\n              </InlineStack>\n\n              {/* Filter and Search */}\n              <Card>\n                <InlineStack>\n                  <InlineStack>\n                    <Text variant=\"bodyMd\" tone=\"subdued\" as=\"p\">Filter by:</Text>\n                    <Button variant={showOnlyLowHealth ? 'primary' : 'tertiary'} size=\"slim\" onClick={() => setShowOnlyLowHealth(!showOnlyLowHealth)}>\n\n                      \uD83D\uDEA8 Low Health Only\n                    </Button>\n                    <Button variant={showOnlyNoDescription ? 'primary' : 'tertiary'} size=\"slim\" onClick={() => setShowOnlyNoDescription(!showOnlyNoDescription)}>\n\n                      \uD83D\uDCDD Missing Descriptions\n                    </Button>\n                  </InlineStack>\n                  <Text variant=\"bodySm\" tone=\"subdued\" as=\"p\">\n                    Showing {filteredProducts.length} of {products.length} products\n                  </Text>\n                </InlineStack>\n              </Card>\n\n              {/* Enhanced Product List */}\n              <div className=\"product-grid\" style={{\n              display: 'grid',\n              gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',\n              gap: '20px',\n              marginTop: '20px',\n              width: '100%'\n            }}>\n\n                {filteredProducts.map((product, index) => <Card key={product.id}>\n\n                    <InlineStack>\n                      <InlineStack>\n                        <BlockStack>\n                          <Button variant=\"plain\" onClick={() => handleProductClick(product)}>\n\n                              {product.title}\n                          </Button>\n                          <Text variant=\"bodySm\" tone=\"subdued\" as=\"p\">\n                            ID: {product.id}\n                          </Text>\n                        </BlockStack>\n\n                        <BlockStack>\n                          <Text variant=\"bodyMd\" as=\"p\">\n                            {product.description && product.description !== \"No description\" ? product.description.length > 100 ? `${product.description.substring(0, 100)}...` : product.description : <Text tone=\"subdued\" variant=\"bodyMd\" as=\"p\">No description available</Text>}\n                          </Text>\n                          {product.gaps.length > 0 && <InlineStack wrap>\n                              {product.gaps.slice(0, 3).map((gap, gapIndex) => <Badge key={gapIndex} tone=\"warning\" size=\"small\">\n                                  {gap}\n                                </Badge>)}\n                              {product.gaps.length > 3 && <Badge tone=\"info\" size=\"small\">\n                                  {`+${product.gaps.length - 3} more`}\n                                </Badge>}\n                            </InlineStack>}\n                        </BlockStack>\n                      </InlineStack>\n\n                      <BlockStack>\n                        <InlineStack>\n                          <ProgressBar progress={product.score} size=\"small\" />\n\n                          <Badge tone={product.score >= 90 ? 'success' : product.score >= 70 ? 'warning' : 'critical'} size=\"small\">\n\n                            {`${product.score}%`}\n                          </Badge>\n                        </InlineStack>\n                        \n                        <Button size=\"slim\" variant=\"primary\" onClick={() => handleProductClick(product)}>\n\n                          \uD83D\uDD27 Optimize\n                        </Button>\n                      </BlockStack>\n                    </InlineStack>\n                  </Card>)}\n              </div>\n\n              {filteredProducts.length === 0 && <Card>\n                  <BlockStack>\n                    <Text variant=\"headingMd\" as=\"h3\">\uD83C\uDF89 No products match your filters!</Text>\n                    <Text variant=\"bodyMd\" tone=\"subdued\" as=\"p\">\n                      {showOnlyLowHealth ? \"All your products are healthy! Great job maintaining your catalog.\" : showOnlyNoDescription ? \"All your products have descriptions! Your catalog is well-documented.\" : \"No products found matching your current filters.\"}\n              </Text>\n                    <Button variant=\"tertiary\" onClick={() => {\n                  setShowOnlyLowHealth(false);\n                  setShowOnlyNoDescription(false);\n                }}>\n\n                      Clear Filters\n                    </Button>\n                  </BlockStack>\n                </Card>}\n            </BlockStack>\n          </Card>\n        </Layout.Section>\n\n        <Layout.Section variant=\"oneHalf\">\n          <Card>\n            <BlockStack>\n              <Text variant=\"headingMd\" as=\"h3\">\n                Quick Actions\n              </Text>\n              <BlockStack>\n                <Button fullWidth onClick={handleHealthCheck} loading={isHealthChecking} variant={averageScore < 90 ? \"primary\" : \"secondary\"}>\n\n                  {averageScore < 90 ? \"Quick Scan Now\" : \"Run Health Check\"}\n                </Button>\n                <Button fullWidth>Generate Feed</Button>\n                <Button fullWidth>View Analytics</Button>\n              </BlockStack>\n            </BlockStack>\n          </Card>\n        </Layout.Section>\n        \n        <Layout.Section variant=\"oneHalf\">\n          <Card>\n            <BlockStack>\n              <Text variant=\"headingMd\" as=\"h3\">\n                Recent Activity\n              </Text>\n              <BlockStack>\n                {recentLogs.length > 0 ? recentLogs.map(log => <BlockStack key={log.id}>\n                      <Text as=\"span\">\n                        {log.type === 'sync' && '\uD83D\uDD04 '}\n                        {log.type === 'push' && '\uD83D\uDCE4 '}\n                        {log.type === 'error' && '\u274C '}\n                        {log.type === 'health_scan' && '\uD83D\uDD0D '}\n                        {log.type === 'auto_fix' && '\uD83D\uDD27 '}\n                        {log.type === 'ai_enrichment' && '\uD83E\uDD16 '}\n                        {log.type === 'settings_update' && '\u2699\uFE0F '}\n                        {log.message}\n                      </Text>\n                      <Text as=\"p\" variant=\"bodySm\" tone=\"subdued\">\n                        {new Date(log.createdAt).toLocaleString()}\n                      </Text>\n                    </BlockStack>) : <Text as=\"p\" tone=\"subdued\">No recent activity</Text>}\n              </BlockStack>\n            </BlockStack>\n          </Card>\n        </Layout.Section>\n      </Layout>\n      \n      {toastActive && <Toast content={toastMessage} onDismiss={() => setToastActive(false)} />}\n\n      <HealthCheckModal isOpen={healthModalOpen} onClose={() => setHealthModalOpen(false)} jobId={healthCheckJobId} currentScore={averageScore} currentGaps={[]} // Will be populated from latest audit\n    />\n\n      {/* Enhanced Product Detail Modal */}\n      <Modal open={productModalOpen} onClose={() => setProductModalOpen(false)} title=\"\" size=\"large\" primaryAction={{\n      content: 'Close',\n      onAction: () => setProductModalOpen(false)\n    }}>\n\n          {selectedProduct && <Modal.Section>\n            <BlockStack>\n              {/* Modern Product Header */}\n              <Card>\n                <BlockStack>\n                  <InlineStack>\n                <BlockStack>\n                      <Text variant=\"headingLg\" as=\"h2\">\n                        \uD83D\uDCE6 {selectedProduct.title}\n                      </Text>\n                      <Text variant=\"bodyMd\" tone=\"subdued\" as=\"p\">\n                        Product ID: {selectedProduct.id}\n                      </Text>\n                      {selectedProduct.description && selectedProduct.description !== \"No description\" && <Text variant=\"bodyMd\" as=\"p\">\n                          {selectedProduct.description}\n                        </Text>}\n                  </BlockStack>\n\n                    <BlockStack>\n                    <Badge tone={selectedProduct.score >= 90 ? 'success' : selectedProduct.score >= 70 ? 'warning' : 'critical'} size=\"large\">\n\n                        {selectedProduct.score}% Health\n                    </Badge>\n                    {justAppliedChanges && <Badge tone=\"success\" size=\"small\">\n                        \u2728 Just Updated!\n                        </Badge>}\n                        </BlockStack>\n                        </InlineStack>\n\n                  {/* Visual Health Progress */}\n                      <Box>\n                    <InlineStack>\n                      <Text variant=\"bodyMd\" tone=\"subdued\" as=\"p\">Overall Health Progress</Text>\n                      <Text variant=\"bodyMd\" tone=\"subdued\" as=\"p\">\n                        {`${Math.round(selectedProduct.score / 100 * 500)} / 500 points`}\n                          </Text>\n                      </InlineStack>\n                    <Box paddingBlockStart=\"200\">\n                      <ProgressBar progress={selectedProduct.score} size=\"large\" />\n\n                        </Box>\n                      </Box>\n                    </BlockStack>\n              </Card>\n\n              {/* Smart Category Breakdown */}\n              <Card>\n                <BlockStack>\n                  <Text variant=\"headingMd\" as=\"h3\">\n                    \uD83D\uDCCA Category Breakdown\n                  </Text>\n                  \n                  <InlineStack>\n                    {[{\n                  name: '\uD83D\uDEA8 Required Fields',\n                  icon: '\uD83D\uDEA8',\n                  fields: ['title', 'description', 'price', 'availability', 'category'],\n                  color: 'critical',\n                  description: 'Essential for product visibility'\n                }, {\n                  name: '\u26A1 High Priority',\n                  icon: '\u26A1',\n                  fields: ['material', 'dimensions', 'weight', 'brand', 'use_cases', 'features', 'image_urls'],\n                  color: 'warning',\n                  description: 'Important for customer decisions'\n                }, {\n                  name: '\uD83D\uDCCB Medium Priority',\n                  icon: '\uD83D\uDCCB',\n                  fields: ['color', 'size', 'target_audience', 'keywords', 'upc', 'compatibility', 'age_range', 'gender', 'video_urls'],\n                  color: 'attention',\n                  description: 'Enhances product discovery'\n                }, {\n                  name: '\u2728 Enhancement',\n                  icon: '\u2728',\n                  fields: ['model', 'sku', 'tags', 'vendor', 'warranty', 'return_policy', 'shipping_info', 'documentation_url', 'specifications', 'ai_search_queries', 'semantic_description'],\n                  color: 'success',\n                  description: 'Optimizes for AI search'\n                }].map((category, index) => {\n                  const missingInCategory = selectedProduct.gaps.filter(gap => category.fields.includes(gap)).length;\n                  const completedInCategory = category.fields.length - missingInCategory;\n                  const progress = Math.round(completedInCategory / category.fields.length * 100);\n                  return <Card key={index}>\n                          <InlineStack>\n                            <InlineStack>\n                              <Text variant=\"headingSm\" as=\"h4\">\n                                {category.icon} {category.name}\n                              </Text>\n                              <Text variant=\"bodySm\" tone=\"subdued\" as=\"p\">\n                                {category.description}\n                              </Text>\n                              <InlineStack wrap>\n                                <Text variant=\"bodySm\" as=\"p\">\n                                  {completedInCategory}/{category.fields.length} complete\n                                </Text>\n                                {missingInCategory > 0 && <Badge tone=\"warning\" size=\"small\">\n                                    {`${missingInCategory} missing`}\n                                  </Badge>}\n                            </InlineStack>\n                            </InlineStack>\n                            \n                            <BlockStack>\n                              <ProgressBar progress={progress} size=\"small\" />\n\n                              <Text variant=\"bodySm\" tone=\"subdued\" as=\"p\">\n                                {`${progress}% complete`}\n                              </Text>\n                            </BlockStack>\n                          </InlineStack>\n                        </Card>;\n                })}\n                  </InlineStack>\n                </BlockStack>\n              </Card>\n\n              {/* Smart Gaps Analysis */}\n              <Card>\n                <BlockStack>\n                  <InlineStack>\n                    <Text variant=\"headingMd\" as=\"h3\">\n                      \uD83D\uDD0D Missing Fields Analysis\n                    </Text>\n                    {selectedProduct.gaps.length === 0 ? <Badge tone=\"success\" size=\"large\">\n                        \uD83C\uDF89 Perfect Score!\n                      </Badge> : <Badge tone=\"critical\" size=\"large\">\n                        {`${selectedProduct.gaps.length} fields missing`}\n                      </Badge>}\n                  </InlineStack>\n\n                  {selectedProduct.gaps.length > 0 ? <BlockStack>\n                      <Text variant=\"bodyMd\" tone=\"subdued\" as=\"p\">\n                        These fields are missing and could improve your product's visibility and AI search performance:\n                      </Text>\n                      <InlineStack wrap>\n                        {selectedProduct.gaps.map((gap, index) => <Badge key={index} tone=\"warning\" size=\"small\">\n                            {gap.replace(/_/g, ' ')}\n                          </Badge>)}\n                  </InlineStack>\n                    </BlockStack> : <BlockStack>\n                      <Text variant=\"bodyMd\" tone=\"success\" as=\"p\">\n                        \uD83C\uDF89 Congratulations! Your product has all the essential fields completed.\n                      </Text>\n                      <Text variant=\"bodySm\" tone=\"subdued\" as=\"p\">\n                        This product is optimized for search engines and AI-powered discovery.\n                      </Text>\n                    </BlockStack>}\n                </BlockStack>\n              </Card>\n\n              {/* AI Recommendations Section */}\n              {selectedProduct.gaps.length > 0 && <Card>\n                  <BlockStack>\n                    <InlineStack>\n                      <Text variant=\"headingMd\" as=\"h3\">\n                        \uD83E\uDD16 AI Recommendations\n                    </Text>\n                      {recommendations.length > 0 && <Button onClick={() => {\n                  setRecommendations([]);\n                  setApprovalState({});\n                  handleGenerateRecommendations();\n                }} variant=\"secondary\" size=\"slim\" loading={isGeneratingRecommendations}>\n\n                          \uD83D\uDD04 Regenerate\n                      </Button>}\n                    </InlineStack>\n\n                    {recommendations.length === 0 ? <BlockStack>\n                        <BlockStack>\n                        <Text variant=\"bodyMd\" tone=\"subdued\" as=\"p\">\n                            \uD83C\uDFAF Ready to improve your product's health score?\n                          </Text>\n                        <Text variant=\"bodySm\" tone=\"subdued\" as=\"p\">\n                            Our AI will analyze your missing fields and suggest improvements for:\n                          </Text>\n                          <InlineStack wrap>\n                            {selectedProduct.gaps.slice(0, 5).map((gap, index) => <Badge key={index} tone=\"warning\" size=\"small\">\n                                {gap.replace(/_/g, ' ')}\n                              </Badge>)}\n                            {selectedProduct.gaps.length > 5 && <Badge tone=\"info\" size=\"small\">\n                                {`+${selectedProduct.gaps.length - 5} more`}\n                              </Badge>}\n                          </InlineStack>\n                        </BlockStack>\n                        \n                        <Button onClick={handleGenerateRecommendations} variant=\"primary\" size=\"large\" loading={isGeneratingRecommendations}>\n\n                          {isGeneratingRecommendations ? '\uD83E\uDD16 Generating...' : '\uD83D\uDE80 Generate AI Recommendations'}\n                        </Button>\n                      </BlockStack> : <BlockStack>\n                    {selectedProduct.recommendations?.generatedAt && <Text variant=\"bodySm\" tone=\"subdued\" as=\"p\">\n                        Generated: {new Date(selectedProduct.recommendations.generatedAt).toLocaleString()}\n                      </Text>}\n                        \n                        <Text variant=\"bodyMd\" tone=\"subdued\" as=\"p\">\n                          Review and approve the AI-generated suggestions below. Only approved changes will be applied to your product.\n                        </Text>\n                      </BlockStack>}\n                  </BlockStack>\n                </Card>}\n\n              {/* Recommendations Approval Interface */}\n              {recommendations.length > 0 && <Card>\n                  <BlockStack>\n                    <InlineStack>\n                      <Text variant=\"headingMd\" as=\"h3\">\n                        \u270F\uFE0F Review & Approve Recommendations\n                    </Text>\n                      <InlineStack>\n                        <Badge tone=\"success\" size=\"small\">\n                          {`${Object.values(approvalState).filter(Boolean).length} approved`}\n                        </Badge>\n                        <Badge tone=\"critical\" size=\"small\">\n                          {`${Object.values(approvalState).filter(val => val === false).length} rejected`}\n                        </Badge>\n                      </InlineStack>\n                    </InlineStack>\n\n                    <Text variant=\"bodyMd\" tone=\"subdued\" as=\"p\">\n                      Review each AI suggestion below. Use \u2705 to approve or \u274C to reject. Only approved changes will be applied to your product.\n                    </Text>\n                    \n                    {/* Smart Bulk Actions */}\n                    <Card>\n                      <InlineStack>\n                        <Text variant=\"bodyMd\" tone=\"subdued\" as=\"p\">Quick Actions:</Text>\n                        <InlineStack>\n                      <Button size=\"slim\" variant=\"secondary\" tone=\"success\" onClick={() => {\n                      const allApproved = recommendations.reduce((acc, rec) => ({\n                        ...acc,\n                        [rec.field]: true\n                      }), {});\n                      setApprovalState(allApproved);\n                    }}>\n\n                        \u2705 Approve All\n                      </Button>\n                      <Button size=\"slim\" variant=\"secondary\" tone=\"critical\" onClick={() => {\n                      const allRejected = recommendations.reduce((acc, rec) => ({\n                        ...acc,\n                        [rec.field]: false\n                      }), {});\n                      setApprovalState(allRejected);\n                    }}>\n\n                        \u274C Reject All\n                      </Button>\n                      <Button size=\"slim\" variant=\"secondary\" onClick={() => setApprovalState({})}>\n\n                        Clear All\n                      </Button>\n                        </InlineStack>\n                      </InlineStack>\n                    </Card>\n                    \n                    {/* Individual Recommendation Cards */}\n                    <BlockStack>\n                    {recommendations.map((rec, index) => {\n                  const isApproved = approvalState[rec.field] === true;\n                  const isRejected = approvalState[rec.field] === false;\n                  const isPending = approvalState[rec.field] === undefined;\n                  const isApplied = rec.status === 'applied';\n\n                  // Enhanced field progress info\n                  const getFieldInfo = field => {\n                    const fieldCategories = {\n                      required: {\n                        fields: ['title', 'description', 'price', 'availability', 'category'],\n                        points: '25',\n                        impact: '5-6%',\n                        color: 'critical',\n                        icon: '\uD83D\uDEA8'\n                      },\n                      high: {\n                        fields: ['material', 'dimensions', 'weight', 'brand', 'use_cases', 'features', 'image_urls'],\n                        points: '20',\n                        impact: '4-5%',\n                        color: 'warning',\n                        icon: '\u26A1'\n                      },\n                      medium: {\n                        fields: ['color', 'size', 'target_audience', 'keywords', 'upc', 'compatibility', 'age_range', 'gender', 'video_urls'],\n                        points: '15',\n                        impact: '3-4%',\n                        color: 'attention',\n                        icon: '\uD83D\uDCCB'\n                      },\n                      low: {\n                        fields: ['model', 'sku', 'tags', 'vendor', 'warranty', 'return_policy', 'shipping_info', 'documentation_url', 'specifications', 'ai_search_queries', 'semantic_description'],\n                        points: '10',\n                        impact: '2-3%',\n                        color: 'info',\n                        icon: '\u2728'\n                      }\n                    };\n                    for (const [category, info] of Object.entries(fieldCategories)) {\n                      if (info.fields.includes(field)) {\n                        return {\n                          category,\n                          ...info\n                        };\n                      }\n                    }\n                    return {\n                      category: 'low',\n                      fields: [],\n                      points: '10',\n                      impact: '2%',\n                      color: 'info',\n                      icon: '\u2728'\n                    };\n                  };\n                  const fieldInfo = getFieldInfo(rec.field);\n                  return <Card key={index}>\n                            <BlockStack>\n                              {/* Modern Field Header */}\n                              <InlineStack>\n                          <BlockStack>\n                                  <InlineStack>\n                                <Text variant=\"headingSm\" as=\"h4\">\n                                      {fieldInfo.icon} {rec.field.charAt(0).toUpperCase() + rec.field.slice(1).replace(/_/g, ' ')}\n                                </Text>\n                                    <Badge tone={fieldInfo.color} size=\"small\">\n                                      {fieldInfo.category.charAt(0).toUpperCase() + fieldInfo.category.slice(1)}\n                                  </Badge>\n                                  </InlineStack>\n                                  \n                                  <InlineStack wrap>\n                                    <Badge tone=\"info\" size=\"small\">\n                                      +{fieldInfo.points} pts\n                                    </Badge>\n                                    <Badge tone=\"subdued\" size=\"small\">\n                                      ~{fieldInfo.impact} impact\n                                    </Badge>\n                                  {isApplied && <Badge tone=\"success\" size=\"small\">\uD83D\uDE80 Applied</Badge>}\n                                  {!isApplied && isApproved && <Badge tone=\"success\" size=\"small\">\u2705 Approved</Badge>}\n                                  {!isApplied && isRejected && <Badge tone=\"critical\" size=\"small\">\u274C Rejected</Badge>}\n                                  {!isApplied && isPending && <Badge tone=\"attention\" size=\"small\">\u23F3 Pending</Badge>}\n                              </InlineStack>\n                                </BlockStack>\n                                \n                                {/* Action Buttons */}\n                              {!isApplied && <InlineStack>\n                                <Button size=\"slim\" onClick={() => handleToggleApproval(rec.field, false)} variant={isRejected ? 'primary' : 'secondary'} tone={isRejected ? 'critical' : undefined}>\n\n                                      {isRejected ? '\u274C Rejected' : '\u274C Reject'}\n                                </Button>\n                                <Button size=\"slim\" onClick={() => handleToggleApproval(rec.field, true)} variant={isApproved ? 'primary' : 'secondary'} tone={isApproved ? 'success' : undefined}>\n\n                                      {isApproved ? '\u2705 Approved' : '\u2705 Approve'}\n                                </Button>\n                                  </InlineStack>}\n                              </InlineStack>\n\n                              {/* Content Comparison */}\n                              <Card>\n                                <BlockStack>\n                                  <InlineStack>\n                                    <BlockStack>\n                                      <Text variant=\"bodyMd\" tone=\"subdued\" as=\"p\">Current Value</Text>\n                                      <Box padding=\"200\" borderRadius=\"100\">\n                            <Text variant=\"bodySm\" as=\"p\">\n                                          {rec.originalValue || <Text tone=\"subdued\" as=\"p\">(empty)</Text>}\n                            </Text>\n                                      </Box>\n                                    </BlockStack>\n                                    \n                                    <BlockStack>\n                                      <Text variant=\"bodyMd\" tone=\"success\" as=\"p\">AI Recommendation</Text>\n                                      <Box padding=\"200\" borderRadius=\"100\">\n                            <Text variant=\"bodySm\" as=\"p\">\n                                          {rec.newValue}\n                            </Text>\n                                      </Box>\n                                    </BlockStack>\n                                  </InlineStack>\n                                  \n                            <Text variant=\"bodySm\" tone=\"subdued\" as=\"p\">\n                                    \uD83D\uDCA1 <em>{rec.improvement}</em>\n                            </Text>\n                          </BlockStack>\n                              </Card>\n                            </BlockStack>\n                          </Card>;\n                })}\n                    </BlockStack>\n                    \n                    {/* Apply Changes Section */}\n                    <Card>\n                      <InlineStack>\n                        <BlockStack>\n                          <Text variant=\"bodyMd\" tone=\"subdued\" as=\"p\">\n                            Ready to apply your approved changes?\n                          </Text>\n                          <Text variant=\"bodySm\" tone=\"subdued\" as=\"p\">\n                            {recommendations.filter(rec => rec.status !== 'applied' && approvalState[rec.field] === true).length} changes approved for application\n                          </Text>\n                        </BlockStack>\n                        \n                        <InlineStack>\n                          <Button onClick={() => setRecommendations([])} variant=\"secondary\">\n\n                        Cancel\n                      </Button>\n                      <Button variant=\"primary\" size=\"large\" onClick={handleApplyChanges} loading={isApplyingChanges} disabled={recommendations.filter(rec => rec.status !== 'applied' && approvalState[rec.field] === true).length === 0}>\n\n                            {isApplyingChanges ? '\uD83D\uDE80 Applying...' : `\u2705 Apply ${recommendations.filter(rec => rec.status !== 'applied' && approvalState[rec.field] === true).length} Changes`}\n                      </Button>\n                        </InlineStack>\n                      </InlineStack>\n                    </Card>\n                  </BlockStack>\n                </Card>}\n\n              {/* Customer Input Section for Manual Fields */}\n              {selectedProduct.gaps.length > 0 && <Card>\n                  <BlockStack>\n                    <InlineStack align=\"space-between\">\n                      <BlockStack>\n                        <Text variant=\"headingMd\" as=\"h3\">Manual Product Information</Text>\n                        <Text variant=\"bodySm\" tone=\"subdued\" as=\"p\">\n                          Fill in product specs that only you know. These can't be generated by AI.\n                        </Text>\n                      </BlockStack>\n                      <Button onClick={() => setCustomerInputOpen(!customerInputOpen)} variant=\"secondary\" size=\"slim\">\n\n                        {customerInputOpen ? 'Hide Fields' : 'Add Product Info'}\n                      </Button>\n                    </InlineStack>\n\n                    <Collapsible id=\"customer-input-collapsible\" open={customerInputOpen}>\n                      <BlockStack>\n                        {/* Filter gaps to only show customer-required fields */}\n                        {selectedProduct.gaps.filter(gap => getFieldInputType(gap) === 'customer_required').map((field, index) => {\n                    const label = FIELD_LABELS[field] || field.charAt(0).toUpperCase() + field.slice(1).replace(/_/g, ' ');\n                    return <Box key={index}>\n                                {/* Dimensions gets special treatment */}\n                                {field === 'dimensions' ? <BlockStack>\n                                    <Text variant=\"bodySm\" as=\"p\">{label}</Text>\n                                    <InlineStack gap=\"300\">\n                                      <TextField label=\"Length\" value={customerInputData[`${field}_length`] || ''} onChange={value => setCustomerInputData(prev => ({\n                            ...prev,\n                            [`${field}_length`]: value\n                          }))} placeholder=\"e.g., 12 inches\" autoComplete=\"off\" />\n\n                                      <TextField label=\"Width\" value={customerInputData[`${field}_width`] || ''} onChange={value => setCustomerInputData(prev => ({\n                            ...prev,\n                            [`${field}_width`]: value\n                          }))} placeholder=\"e.g., 8 inches\" autoComplete=\"off\" />\n\n                                      <TextField label=\"Height\" value={customerInputData[`${field}_height`] || ''} onChange={value => setCustomerInputData(prev => ({\n                            ...prev,\n                            [`${field}_height`]: value\n                          }))} placeholder=\"e.g., 4 inches\" autoComplete=\"off\" />\n\n                                    </InlineStack>\n                                  </BlockStack> : field === 'gender' ? <Select label={label} options={[{\n                        label: 'Select target gender',\n                        value: ''\n                      }, {\n                        label: 'Male',\n                        value: 'male'\n                      }, {\n                        label: 'Female',\n                        value: 'female'\n                      }, {\n                        label: 'Unisex',\n                        value: 'unisex'\n                      }, {\n                        label: 'Kids',\n                        value: 'kids'\n                      }]} value={customerInputData[field] || ''} onChange={value => setCustomerInputData(prev => ({\n                        ...prev,\n                        [field]: value\n                      }))} /> : <TextField label={label} value={customerInputData[field] || ''} onChange={value => setCustomerInputData(prev => ({\n                        ...prev,\n                        [field]: value\n                      }))} placeholder={getFieldPlaceholder(field)} helpText={getFieldHelpText(field)} multiline={field === 'specifications' || field === 'warranty' || field === 'return_policy'} autoComplete=\"off\" />}\n                                \n                                {/* Field Progress Indicator */}\n                                <Box paddingBlockStart=\"200\">\n                                  <InlineStack gap=\"200\" blockAlign=\"center\">\n                                    <Text variant=\"bodySm\" tone=\"subdued\" as=\"p\">\n                                      Impact: +{getFieldPoints(field)} points, ~{getFieldImpact(field)}% health boost\n                                    </Text>\n                                    {customerInputData[field] && <Badge tone=\"success\" size=\"small\">\u2705 Ready to save</Badge>}\n                                  </InlineStack>\n                                </Box>\n                              </Box>;\n                  })}\n\n                        {/* Save Button */}\n                        {Object.keys(customerInputData).length > 0 && <InlineStack align=\"end\">\n                            <Button onClick={() => setCustomerInputData({})}>\n                              Clear All\n                            </Button>\n                            <Button variant=\"primary\" onClick={handleSaveCustomerInput} loading={isSavingCustomerInput}>\n\n                              Save {Object.values(customerInputData).filter(v => v.trim()).length} Fields\n                            </Button>\n                          </InlineStack>}\n                      </BlockStack>\n                    </Collapsible>\n                  </BlockStack>\n                </Card>}\n\n              {selectedProduct.score >= 90 && <Card>\n                  <BlockStack>\n                    <Text variant=\"headingMd\" as=\"h3\">\n                      {selectedProduct.score === 100 ? '\uD83C\uDF89 Perfect Product Health!' : '\u2705 Product Health: Excellent'}\n                    </Text>\n                    <Text as=\"p\">\n                      {selectedProduct.score === 100 ? 'Congratulations! This product has achieved perfect health with all OpenAI spec requirements met.' : 'This product has a high health score and does not need immediate attention.'}\n                    </Text>\n                    {selectedProduct.gaps.length === 0 && selectedProduct.score === 100 && <Text variant=\"bodySm\" tone=\"success\" as=\"p\">\n                        \uD83D\uDE80 Ready for OpenAI ChatGPT discovery!\n                      </Text>}\n                  </BlockStack>\n                </Card>}\n            </BlockStack>\n        </Modal.Section>}\n      </Modal>\n    </Page>;\n}\n_s(Index, \"8bDs+k1udq0yZzmTuENaMgTLpPU=\", false, function () {\n  return [useLoaderData, useFetcher, useFetcher, useFetcher, useFetcher];\n});\n_c = Index;\nvar _c;\n$RefreshReg$(_c, \"Index\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/HealthCheckModal.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/HealthCheckModal.tsx\");\n  import.meta.hot.lastModified = \"1759515818169.546\";\n}\n// REMIX HMR END\n\nimport React, { useState, useEffect } from 'react';\nimport { Modal, Card, Text, Button, Badge, DataTable, ProgressBar, InlineStack, BlockStack, Spinner, Toast, Box, Icon } from '@shopify/polaris';\nimport { CheckCircleIcon, AlertTriangleIcon, XCircleIcon, ArrowUpIcon, ArrowDownIcon } from '@shopify/polaris-icons';\nexport function HealthCheckModal({\n  isOpen,\n  onClose,\n  jobId,\n  currentScore = 0,\n  currentGaps = []\n}) {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [results, setResults] = useState(null);\n  const [toast, setToast] = useState(null);\n  const [autoFixing, setAutoFixing] = useState(false);\n  useEffect(() => {\n    if (isOpen && jobId) {\n      fetchResults();\n    }\n  }, [isOpen, jobId]);\n  const fetchResults = async () => {\n    setLoading(true);\n    try {\n      const formData = new FormData();\n      formData.append('action', 'get-results');\n      formData.append('jobId', jobId);\n      const response = await fetch('/api/health-check', {\n        method: 'POST',\n        body: formData\n      });\n      const data = await response.json();\n      if (data.success && data.result) {\n        setResults(data.result);\n      } else {\n        setToast({\n          content: data.error || 'Failed to fetch results',\n          error: true\n        });\n      }\n    } catch (error) {\n      setToast({\n        content: 'Failed to fetch results',\n        error: true\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleAutoFix = async () => {\n    if (!results) return;\n    const fixableGaps = results.gaps.filter(gap => gap.fixable);\n    if (fixableGaps.length === 0) {\n      setToast({\n        content: 'No fixable gaps found',\n        error: true\n      });\n      return;\n    }\n    setAutoFixing(true);\n    try {\n      const formData = new FormData();\n      formData.append('action', 'auto-fix');\n      formData.append('gapTypes', JSON.stringify(fixableGaps.map(gap => gap.field)));\n      const response = await fetch('/api/health-check', {\n        method: 'POST',\n        body: formData\n      });\n      const data = await response.json();\n      if (data.success) {\n        setToast({\n          content: `Auto-fix initiated for ${fixableGaps.length} gaps`\n        });\n        // Refresh results after a delay\n        setTimeout(fetchResults, 2000);\n      } else {\n        setToast({\n          content: data.error || 'Auto-fix failed',\n          error: true\n        });\n      }\n    } catch (error) {\n      setToast({\n        content: 'Auto-fix failed',\n        error: true\n      });\n    } finally {\n      setAutoFixing(false);\n    }\n  };\n  const getScoreColor = score => {\n    if (score >= 90) return 'success';\n    if (score >= 70) return 'warning';\n    return 'critical';\n  };\n  const getSeverityIcon = severity => {\n    switch (severity) {\n      case 'critical':\n        return XCircleIcon;\n      case 'error':\n        return AlertTriangleIcon;\n      case 'warning':\n        return AlertTriangleIcon;\n      default:\n        return CheckCircleIcon;\n    }\n  };\n  const getSeverityColor = severity => {\n    switch (severity) {\n      case 'critical':\n        return 'critical';\n      case 'error':\n        return 'critical';\n      case 'warning':\n        return 'warning';\n      default:\n        return 'success';\n    }\n  };\n  const formatTrend = trends => {\n    if (trends.length < 2) return null;\n    const latest = trends[trends.length - 1];\n    const previous = trends[trends.length - 2];\n    const diff = latest.score - previous.score;\n    return {\n      value: diff,\n      icon: diff >= 0 ? ArrowUpIcon : ArrowDownIcon,\n      color: diff >= 0 ? 'success' : 'critical'\n    };\n  };\n  const gapsTableRows = results?.gaps.map((gap, index) => [<InlineStack key={index} gap=\"200\" align=\"start\">\n      <Icon source={getSeverityIcon(gap.severity)} />\n      <Text variant=\"bodyMd\" fontWeight=\"medium\">{gap.field}</Text>\n    </InlineStack>, <Badge key={`badge-${index}`} tone={getSeverityColor(gap.severity)}>\n      {gap.severity}\n    </Badge>, gap.count, gap.fixable ? 'Yes' : 'No']) || [];\n  const trendsTableRows = results?.trends.slice(-7).map((trend, index) => [new Date(trend.date).toLocaleDateString(), `${trend.score}%`, trend.totalProducts, trend.validProducts]) || [];\n  return <>\n      <Modal open={isOpen} onClose={onClose} title=\"Health Check Results\" size=\"large\">\n        <Modal.Section>\n          {loading ? <InlineStack align=\"center\">\n              <Spinner size=\"large\" />\n              <Text variant=\"bodyMd\">Analyzing your catalog...</Text>\n            </InlineStack> : results ? <BlockStack gap=\"400\">\n              {/* Summary Card */}\n              <Card>\n                <BlockStack gap=\"300\">\n                  <InlineStack align=\"space-between\">\n                    <Text variant=\"headingMd\">Overall Health Score</Text>\n                    <Badge tone={getScoreColor(results.score)}>\n                      {results.score}%\n                    </Badge>\n                  </InlineStack>\n                  \n                  <ProgressBar progress={results.score} size=\"large\" color={getScoreColor(results.score)} />\n                  \n                  <InlineStack gap=\"400\" align=\"start\">\n                    <Box>\n                      <Text variant=\"bodyMd\" color=\"subdued\">Total Products</Text>\n                      <Text variant=\"headingMd\">{results.totalProducts}</Text>\n                    </Box>\n                    <Box>\n                      <Text variant=\"bodyMd\" color=\"subdued\">Valid Products</Text>\n                      <Text variant=\"headingMd\">{results.validProducts}</Text>\n                    </Box>\n                    <Box>\n                      <Text variant=\"bodyMd\" color=\"subdued\">Issues Found</Text>\n                      <Text variant=\"headingMd\">{results.gaps.length}</Text>\n                    </Box>\n                  </InlineStack>\n\n                  {results.trends.length > 1 && <Box>\n                      <InlineStack gap=\"200\" align=\"start\">\n                        <Text variant=\"bodyMd\" color=\"subdued\">7-Day Trend</Text>\n                        {(() => {\n                    const trend = formatTrend(results.trends);\n                    return trend ? <InlineStack gap=\"100\">\n                              <Icon source={trend.icon} />\n                              <Text variant=\"bodyMd\" color={trend.color}>\n                                {trend.value > 0 ? '+' : ''}{trend.value.toFixed(1)}%\n                              </Text>\n                            </InlineStack> : null;\n                  })()}\n                      </InlineStack>\n                    </Box>}\n                </BlockStack>\n              </Card>\n\n              {/* Gaps Table */}\n              {results.gaps.length > 0 && <Card>\n                  <BlockStack gap=\"300\">\n                    <InlineStack align=\"space-between\">\n                      <Text variant=\"headingMd\">Issues Found</Text>\n                      {results.gaps.some(gap => gap.fixable) && <Button variant=\"primary\" onClick={handleAutoFix} loading={autoFixing} disabled={autoFixing}>\n                          Auto-Fix Fixable Issues\n                        </Button>}\n                    </InlineStack>\n                    \n                    <DataTable columnContentTypes={['text', 'text', 'numeric', 'text']} headings={['Field', 'Severity', 'Count', 'Fixable']} rows={gapsTableRows} />\n                  </BlockStack>\n                </Card>}\n\n              {/* Trends Table */}\n              {results.trends.length > 0 && <Card>\n                  <BlockStack gap=\"300\">\n                    <Text variant=\"headingMd\">Health Score Trends (Last 7 Days)</Text>\n                    <DataTable columnContentTypes={['text', 'numeric', 'numeric', 'numeric']} headings={['Date', 'Score', 'Total Products', 'Valid Products']} rows={trendsTableRows} />\n                  </BlockStack>\n                </Card>}\n\n              {/* No Issues Found */}\n              {results.gaps.length === 0 && <Card>\n                  <InlineStack align=\"center\" gap=\"300\">\n                    <Icon source={CheckCircleIcon} />\n                    <BlockStack gap=\"200\">\n                      <Text variant=\"headingMd\">Excellent!</Text>\n                      <Text variant=\"bodyMd\" color=\"subdued\">\n                        Your catalog is in great health. No issues were found.\n                      </Text>\n                    </BlockStack>\n                  </InlineStack>\n                </Card>}\n            </BlockStack> : <Text variant=\"bodyMd\" color=\"subdued\">\n              No results available. Please try running the health check again.\n            </Text>}\n        </Modal.Section>\n      </Modal>\n\n      {toast && <Toast content={toast.content} error={toast.error} onDismiss={() => setToast(null)} />}\n    </>;\n}\n_s(HealthCheckModal, \"4AooCBtbNi6UJdul5NqhGJfxiyI=\");\n_c = HealthCheckModal;\nvar _c;\n$RefreshReg$(_c, \"HealthCheckModal\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react", "import_jsx_dev_runtime", "_s", "_s", "approvalState", "_c"]
}
