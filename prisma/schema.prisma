// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  shopId    String   @unique
  shopDomain String
  accessToken String
  tier      String   @default("starter") // starter, pro, enterprise
  aiUsage   Int      @default(0)
  endpoint  String?  // OpenAI endpoint URL
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  audits    Audit[]
  logs      Log[]
  products  Product[]
  
  @@map("users")
}

model Audit {
  id        String   @id @default(cuid())
  userId    String
  score     Float    // Overall catalog health score (0-100)
  totalProducts Int
  validProducts Int
  gaps      Json     // Array of field gaps found
  timestamp DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("audits")
}

model Log {
  id         String   @id @default(cuid())
  userId     String
  type       String   // sync, push, error
  message    String
  pushStatus String?  // success, failed, pending
  error      String?
  metadata   Json?
  createdAt  DateTime @default(now())
  
  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("logs")
}

model Product {
  id              String   @id @default(cuid())
  userId          String
  shopifyId       String
  title           String?
  description     String?
  handle          String?
  vendor          String?
  productType     String?
  tags            Json?
  images          Json?
  variants        Json?
  options         Json?
  status          String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, shopifyId])
  @@map("products")
}

model Session {
  id          String   @id @default(cuid())
  shop        String
  state       String
  isOnline    Boolean  @default(false)
  scope       String?
  expires     DateTime?
  accessToken String
  userId      String?
  
  @@map("sessions")
}
