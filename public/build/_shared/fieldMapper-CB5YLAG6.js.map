{
  "version": 3,
  "sources": ["../../../app/utils/fieldMapper.ts"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/utils/fieldMapper.ts\"\n);\nimport.meta.hot.lastModified = \"1760473121057.0361\";\n}\n// REMIX HMR END\n\nimport { ShopifyProduct } from './shopifySync'\nimport { OpenAISpecProduct, FIELD_WEIGHTS, FIELD_POINTS, ProductScore } from './openaiSpec'\n\nexport function mapShopifyToSpec(product: ShopifyProduct): OpenAISpecProduct {\n  const spec: OpenAISpecProduct = {\n    // Core required fields - map directly from Shopify\n    title: product.title || '',\n    description: product.description || '',\n    price: product.variants[0]?.price ? `${product.variants[0].price} USD` : '0.00 USD',\n    availability: getAvailabilityStatus(product.variants),\n    category: product.productType || 'Uncategorized',\n\n    // Physical attributes - from metafields or inference\n    material: getMetafieldValue(product.metafields, 'material') || inferMaterial(product.title, product.description),\n    weight: getMetafieldValue(product.metafields, 'weight'),\n    color: getMetafieldValue(product.metafields, 'color') || inferColor(product.title, product.description),\n    size: getMetafieldValue(product.metafields, 'size'),\n    \n    // Identification fields\n    brand: product.vendor || getMetafieldValue(product.metafields, 'brand'),\n    model: getMetafieldValue(product.metafields, 'model'),\n    sku: product.variants[0]?.sku,\n    upc: getMetafieldValue(product.metafields, 'upc') || getMetafieldValue(product.metafields, 'barcode'),\n    \n    // Usage and context\n    use_cases: getMetafieldArray(product.metafields, 'use_cases') || inferUseCases(product.title, product.description),\n    target_audience: getMetafieldValue(product.metafields, 'target_audience'),\n    age_range: getMetafieldValue(product.metafields, 'age_range'),\n    gender: getMetafieldValue(product.metafields, 'gender') as any,\n    \n    // Technical specifications\n    features: getMetafieldArray(product.metafields, 'features') || inferFeatures(product.description),\n    compatibility: getMetafieldArray(product.metafields, 'compatibility'),\n    \n    // SEO and search\n    keywords: product.tags || [],\n    tags: product.tags || [],\n    \n    // Media\n    image_urls: product.images.map(img => img.url),\n    video_urls: getMetafieldArray(product.metafields, 'video_urls') || getMetafieldArray(product.metafields, 'videos'),\n    documentation_url: getMetafieldValue(product.metafields, 'documentation_url') || getMetafieldValue(product.metafields, 'manual_url'),\n    \n    // Business information\n    vendor: product.vendor,\n    warranty: getMetafieldValue(product.metafields, 'warranty'),\n    return_policy: getMetafieldValue(product.metafields, 'return_policy'),\n    shipping_info: getMetafieldValue(product.metafields, 'shipping_info'),\n    \n    // AI-specific fields\n    ai_search_queries: getMetafieldArray(product.metafields, 'ai_search_queries'),\n    semantic_description: getMetafieldValue(product.metafields, 'semantic_description'),\n  }\n\n  // Add dimensions if available\n  const dimensions = getDimensionsFromMetafields(product.metafields)\n  if (dimensions) {\n    spec.dimensions = dimensions\n  }\n\n  // Add specifications if available\n  const specifications = getSpecificationsFromMetafields(product.metafields)\n  if (specifications && Object.keys(specifications).length > 0) {\n    spec.specifications = specifications\n  }\n\n  return spec\n}\n\nfunction getAvailabilityStatus(variants: ShopifyProduct['variants']): \"in_stock\" | \"out_of_stock\" | \"pre_order\" | \"discontinued\" {\n  if (variants.length === 0) return 'out_of_stock'\n  \n  const hasAvailable = variants.some(v => v.availableForSale && (v.inventoryQuantity || 0) > 0)\n  const hasInventory = variants.some(v => (v.inventoryQuantity || 0) > 0)\n  \n  if (hasAvailable) return 'in_stock'\n  if (hasInventory && !hasAvailable) return 'pre_order'\n  return 'out_of_stock'\n}\n\nfunction getMetafieldValue(metafields: ShopifyProduct['metafields'], key: string): string | undefined {\n  // First try to find in catalogai namespace (our AI-generated fields)\n  let metafield = metafields.find(m => \n    m.namespace === 'catalogai' && (m.key === key || m.key.toLowerCase().includes(key.toLowerCase()))\n  )\n  \n  // Fall back to any namespace with matching key\n  if (!metafield) {\n    metafield = metafields.find(m => \n      m.key === key || m.key.toLowerCase().includes(key.toLowerCase())\n    )\n  }\n  \n  return metafield?.value\n}\n\nfunction getMetafieldArray(metafields: ShopifyProduct['metafields'], key: string): string[] | undefined {\n  const value = getMetafieldValue(metafields, key)\n  if (!value) return undefined\n  \n  try {\n    // Try to parse as JSON array\n    const parsed = JSON.parse(value)\n    if (Array.isArray(parsed)) {\n      return parsed.filter(item => typeof item === 'string')\n    }\n  } catch {\n    // If not JSON, check for bullet-pointed text first\n    if (value.includes('\\n-') || value.startsWith('-')) {\n      return value\n        .split('\\n')\n        .map(line => line.replace(/^[-\u2022*]\\s*/, '').trim())\n        .filter(Boolean)\n    }\n    \n    // Fall back to splitting by common delimiters\n    return value.split(/[,;|]/).map(item => item.trim()).filter(Boolean)\n  }\n  \n  return undefined\n}\n\nfunction getDimensionsFromMetafields(metafields: ShopifyProduct['metafields']) {\n  const length = getMetafieldValue(metafields, 'length')\n  const width = getMetafieldValue(metafields, 'width')\n  const height = getMetafieldValue(metafields, 'height')\n  \n  if (!length && !width && !height) return null\n  \n  return {\n    ...(length && { length }),\n    ...(width && { width }),\n    ...(height && { height }),\n  }\n}\n\nfunction getSpecificationsFromMetafields(metafields: ShopifyProduct['metafields']): Record<string, any> | null {\n  const specs: Record<string, any> = {}\n  \n  // Look for metafields in a specifications namespace\n  const specMetafields = metafields.filter(m => \n    m.namespace === 'specifications' || m.namespace === 'specs'\n  )\n  \n  for (const metafield of specMetafields) {\n    specs[metafield.key] = metafield.value\n  }\n  \n  return Object.keys(specs).length > 0 ? specs : null\n}\n\n// Inference functions for missing data\nfunction inferMaterial(title: string, description: string): string | undefined {\n  const materialKeywords = [\n    'cotton', 'polyester', 'leather', 'metal', 'wood', 'plastic', 'glass',\n    'ceramic', 'fabric', 'denim', 'silk', 'wool', 'bamboo', 'steel',\n    'aluminum', 'bronze', 'silver', 'gold', 'rubber', 'silicone'\n  ]\n  \n  const text = `${title} ${description}`.toLowerCase()\n  \n  for (const material of materialKeywords) {\n    if (text.includes(material)) {\n      return material.charAt(0).toUpperCase() + material.slice(1)\n    }\n  }\n  \n  return undefined\n}\n\nfunction inferColor(title: string, description: string): string | undefined {\n  const colorKeywords = [\n    'red', 'blue', 'green', 'yellow', 'black', 'white', 'gray', 'grey',\n    'pink', 'purple', 'orange', 'brown', 'beige', 'navy', 'maroon'\n  ]\n  \n  const text = `${title} ${description}`.toLowerCase()\n  \n  for (const color of colorKeywords) {\n    if (text.includes(color)) {\n      return color.charAt(0).toUpperCase() + color.slice(1)\n    }\n  }\n  \n  return undefined\n}\n\nfunction inferUseCases(title: string, description: string): string[] {\n  const useCaseKeywords = [\n    'home', 'office', 'kitchen', 'bedroom', 'bathroom', 'garden', 'outdoor',\n    'travel', 'sports', 'fitness', 'workout', 'cooking', 'cleaning',\n    'decorative', 'functional', 'storage', 'organization'\n  ]\n  \n  const text = `${title} ${description}`.toLowerCase()\n  const foundUseCases: string[] = []\n  \n  for (const useCase of useCaseKeywords) {\n    if (text.includes(useCase)) {\n      foundUseCases.push(useCase.charAt(0).toUpperCase() + useCase.slice(1))\n    }\n  }\n  \n  return foundUseCases\n}\n\nfunction inferFeatures(description: string): string[] {\n  const featureKeywords = [\n    'waterproof', 'durable', 'lightweight', 'compact', 'portable',\n    'adjustable', 'reversible', 'washable', 'dishwasher safe',\n    'battery powered', 'cordless', 'wireless', 'bluetooth',\n    'stainless steel', 'non-stick', 'heat resistant'\n  ]\n  \n  const text = description.toLowerCase()\n  const foundFeatures: string[] = []\n  \n  for (const feature of featureKeywords) {\n    if (text.includes(feature)) {\n      foundFeatures.push(feature.charAt(0).toUpperCase() + feature.slice(1))\n    }\n  }\n  \n  return foundFeatures\n}\n\n// Calculate product completeness score with enhanced sensitivity and points system\nexport function calculateProductScore(spec: OpenAISpecProduct): ProductScore {\n  const gaps: string[] = []\n  const recommendations: string[] = []\n  let totalWeight = 0\n  let weightedScore = 0\n  let totalPoints = 0\n  let maxPossiblePoints = 0\n  \n  // Field-level progress tracking\n  const fieldProgress: ProductScore['fieldProgress'] = {}\n  \n  // Category progress tracking\n  const categoryProgress: ProductScore['categoryProgress'] = {\n    required: { completed: 0, total: 0, points: 0 },\n    high: { completed: 0, total: 0, points: 0 },\n    medium: { completed: 0, total: 0, points: 0 },\n    low: { completed: 0, total: 0, points: 0 }\n  }\n\n  // Helper function to check if field has value\n  const hasValue = (value: any): boolean => {\n    return value !== undefined && value !== null && \n           (typeof value !== 'string' || value.trim() !== '') &&\n           (!Array.isArray(value) || value.length > 0) &&\n           (typeof value !== 'object' || Object.keys(value).length > 0)\n  }\n\n  // Process each category\n  const categories = [\n    { name: 'required' as const, fields: FIELD_WEIGHTS.required, points: FIELD_POINTS.required },\n    { name: 'high' as const, fields: FIELD_WEIGHTS.high, points: FIELD_POINTS.high },\n    { name: 'medium' as const, fields: FIELD_WEIGHTS.medium, points: FIELD_POINTS.medium },\n    { name: 'low' as const, fields: FIELD_WEIGHTS.low, points: FIELD_POINTS.low }\n  ]\n\n  categories.forEach(({ name, fields, points }) => {\n    categoryProgress[name].total = Object.keys(fields).length\n    \n    for (const [field, weight] of Object.entries(fields)) {\n      totalWeight += weight\n      maxPossiblePoints += points[field as keyof typeof points]\n      \n      const value = spec[field as keyof OpenAISpecProduct]\n      const completed = hasValue(value)\n      \n      // Track field progress\n      fieldProgress[field] = {\n        completed,\n        category: name,\n        points: points[field as keyof typeof points],\n        weight\n      }\n      \n      if (completed) {\n        weightedScore += weight\n        totalPoints += points[field as keyof typeof points]\n        categoryProgress[name].completed++\n        categoryProgress[name].points += points[field as keyof typeof points]\n      } else {\n        gaps.push(field)\n        if (name === 'high') {\n          recommendations.push(`Add ${field} to improve product discoverability`)\n        }\n      }\n    }\n  })\n\n  // Calculate percentage score (now more sensitive due to higher weights)\n  const score = totalWeight > 0 ? Math.round((weightedScore / totalWeight) * 100) : 0\n  \n  // Calculate completeness based on filled fields\n  const totalFields = Object.keys(fieldProgress).length\n  const completedFields = Object.values(fieldProgress).filter(f => f.completed).length\n  const completeness = totalFields > 0 ? Math.round((completedFields / totalFields) * 100) : 0\n\n  return {\n    score,\n    completeness,\n    gaps,\n    recommendations,\n    points: totalPoints,\n    maxPoints: maxPossiblePoints,\n    fieldProgress,\n    categoryProgress\n  }\n}\n\n// Bulk map products\nexport function mapProductsToSpec(products: ShopifyProduct[]): (OpenAISpecProduct & { originalId: string, score: ProductScore })[] {\n  return products.map(product => {\n    const spec = mapShopifyToSpec(product)\n    const score = calculateProductScore(spec)\n    \n    return {\n      ...spec,\n      originalId: product.id,\n      score\n    }\n  })\n}\n"],
  "mappings": "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",
  "names": []
}
