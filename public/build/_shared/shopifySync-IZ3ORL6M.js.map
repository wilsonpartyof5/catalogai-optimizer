{
  "version": 3,
  "sources": ["../../../app/utils/shopifySync.ts"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/utils/shopifySync.ts\"\n);\nimport.meta.hot.lastModified = \"1759953690868.0525\";\n}\n// REMIX HMR END\n\nimport { GraphQLClient } from 'graphql-request'\nimport { db } from './db'\n\nexport interface ShopifyProduct {\n  id: string\n  title: string\n  description: string\n  handle: string\n  productType: string\n  vendor: string\n  tags: string[]\n  variants: ShopifyVariant[]\n  metafields: ShopifyMetafield[]\n  images: ShopifyImage[]\n}\n\nexport interface ShopifyVariant {\n  id: string\n  title: string\n  price: string\n  compareAtPrice?: string\n  sku?: string\n  inventoryQuantity?: number\n  availableForSale: boolean\n}\n\nexport interface ShopifyMetafield {\n  id: string\n  namespace: string\n  key: string\n  value: string\n  type: string\n}\n\nexport interface ShopifyImage {\n  id: string\n  url: string\n  altText?: string\n}\n\nconst PRODUCTS_QUERY = `\n  query getProducts($first: Int!, $after: String) {\n    products(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      edges {\n        node {\n          id\n          title\n          description\n          handle\n          productType\n          vendor\n          tags\n          variants(first: 100) {\n            edges {\n              node {\n                id\n                title\n                price\n                compareAtPrice\n                sku\n                inventoryQuantity\n                availableForSale\n              }\n            }\n          }\n          metafields(first: 100) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n                type\n              }\n            }\n          }\n          images(first: 10) {\n            edges {\n              node {\n                id\n                url\n                altText\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport class ShopifySyncService {\n  private client: GraphQLClient\n\n  constructor(shopDomain: string, accessToken: string) {\n    console.log('\uD83D\uDD27 ShopifySyncService constructor [v2]:', {\n      shopDomain,\n      accessTokenLength: accessToken?.length || 0,\n      accessTokenPrefix: accessToken?.substring(0, 10) + '...',\n      endpoint: `https://${shopDomain}/admin/api/2025-10/graphql`\n    })\n    \n    // Test the access token with a simple REST API call first\n    this.testAccessToken(shopDomain, accessToken)\n    \n    this.client = new GraphQLClient(\n      `https://${shopDomain}/admin/api/2025-10/graphql`,\n      {\n        headers: {\n          'X-Shopify-Access-Token': accessToken,\n          'Content-Type': 'application/json',\n        },\n      }\n    )\n  }\n\n  private async testAccessToken(shopDomain: string, accessToken: string) {\n    try {\n      console.log('\uD83E\uDDEA Testing access token with REST API...')\n      const response = await fetch(`https://${shopDomain}/admin/api/2025-10/shop.json`, {\n        headers: {\n          'X-Shopify-Access-Token': accessToken,\n          'Content-Type': 'application/json',\n        },\n      })\n      \n      console.log('\uD83E\uDDEA REST API test response:', {\n        status: response.status,\n        statusText: response.statusText,\n        ok: response.ok\n      })\n      \n      if (response.ok) {\n        const data = await response.json()\n        console.log('\u2705 Access token is valid, shop name:', data.shop?.name)\n      } else {\n        console.log('\u274C Access token test failed:', response.status, response.statusText)\n      }\n    } catch (error) {\n      console.log('\u274C Access token test error:', error)\n    }\n  }\n\n  async syncProducts(userId: string): Promise<ShopifyProduct[]> {\n    const allProducts: ShopifyProduct[] = []\n    let hasNextPage = true\n    let after: string | undefined\n    let pageCount = 0\n\n    console.log('\uD83D\uDD04 Starting product sync for user:', userId)\n    \n    try {\n      while (hasNextPage) {\n        pageCount++\n        console.log(`\uD83D\uDCC4 Fetching page ${pageCount}${after ? ` (after: ${after.substring(0, 20)}...)` : ' (first page)'}`)\n        \n        const startTime = Date.now()\n        const response = await this.client.request(PRODUCTS_QUERY, {\n          first: 250,\n          after,\n        }) as any\n        const fetchTime = Date.now() - startTime\n        \n        console.log(`\u23F1\uFE0F  Page ${pageCount} fetched in ${fetchTime}ms`)\n        console.log(`\uD83D\uDCE6 Products in this page: ${response.products.edges.length}`)\n\n        const products = response.products.edges.map((edge: any) => ({\n          id: edge.node.id.replace('gid://shopify/Product/', ''),\n          title: edge.node.title,\n          description: edge.node.description || '',\n          handle: edge.node.handle,\n          productType: edge.node.productType || '',\n          vendor: edge.node.vendor || '',\n          tags: edge.node.tags || [],\n          variants: edge.node.variants.edges.map((v: any) => ({\n            id: v.node.id.replace('gid://shopify/ProductVariant/', ''),\n            title: v.node.title,\n            price: v.node.price,\n            compareAtPrice: v.node.compareAtPrice,\n            sku: v.node.sku,\n            inventoryQuantity: v.node.inventoryQuantity,\n            availableForSale: v.node.availableForSale,\n          })),\n          metafields: edge.node.metafields.edges.map((m: any) => ({\n            id: m.node.id.replace('gid://shopify/Metafield/', ''),\n            namespace: m.node.namespace,\n            key: m.node.key,\n            value: m.node.value,\n            type: m.node.type,\n          })),\n          images: edge.node.images.edges.map((i: any) => ({\n            id: i.node.id.replace('gid://shopify/MediaImage/', ''),\n            url: i.node.url,\n            altText: i.node.altText,\n          })),\n        }))\n\n        allProducts.push(...products)\n        console.log(`\uD83D\uDCCA Total products so far: ${allProducts.length}`)\n\n        hasNextPage = response.products.pageInfo.hasNextPage\n        after = response.products.pageInfo.endCursor\n        \n        console.log(`\uD83D\uDD17 Has next page: ${hasNextPage}`)\n        if (hasNextPage) {\n          console.log(`\u23F3 Waiting 500ms before next request...`)\n          await new Promise(resolve => setTimeout(resolve, 500))\n        }\n      }\n      \n      console.log(`\u2705 Sync complete! Total products: ${allProducts.length}`)\n\n      // Log the sync operation\n      await db.log.create({\n        data: {\n          userId,\n          type: 'sync',\n          message: `Synchronized ${allProducts.length} products from Shopify`,\n          metadata: {\n            productsCount: allProducts.length,\n            timestamp: new Date().toISOString(),\n          },\n        },\n      })\n\n      return allProducts\n    } catch (error) {\n      console.error('\u274C Sync failed:', error)\n      console.error('\u274C Error details:', {\n        message: error instanceof Error ? error.message : 'Unknown error',\n        stack: error instanceof Error ? error.stack : String(error),\n        pageCount,\n        totalProducts: allProducts.length,\n      })\n      \n      // Log the error\n      await db.log.create({\n        data: {\n          userId,\n          type: 'error',\n          message: `Failed to sync products: ${error instanceof Error ? error.message : 'Unknown error'}`,\n          error: error instanceof Error ? error.stack : String(error),\n          metadata: {\n            timestamp: new Date().toISOString(),\n            pageCount,\n            totalProducts: allProducts.length,\n          },\n        },\n      })\n\n      throw error\n    }\n  }\n\n  async getInventoryLevels(shopDomain: string, accessToken: string): Promise<any[]> {\n    try {\n      const response = await fetch(\n        `https://${shopDomain}/admin/api/2025-10/inventory_levels.json`,\n        {\n          headers: {\n            'X-Shopify-Access-Token': accessToken,\n            'Content-Type': 'application/json',\n          },\n        }\n      )\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`)\n      }\n\n      const data = await response.json() as any\n      return data.inventory_levels || []\n    } catch (error) {\n      console.error('Error fetching inventory levels:', error)\n      throw error\n    }\n  }\n\n  async getRecentOrders(shopDomain: string, accessToken: string, limit: number = 50): Promise<any[]> {\n    try {\n      const response = await fetch(\n        `https://${shopDomain}/admin/api/2025-10/orders.json?limit=${limit}&status=any`,\n        {\n          headers: {\n            'X-Shopify-Access-Token': accessToken,\n            'Content-Type': 'application/json',\n          },\n        }\n      )\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`)\n      }\n\n      const data = await response.json() as any\n      return data.orders || []\n    } catch (error) {\n      console.error('Error fetching orders:', error)\n      throw error\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
