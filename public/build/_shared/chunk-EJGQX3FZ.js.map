{
  "version": 3,
  "sources": ["../../../app/utils/openaiSpec.ts"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/utils/openaiSpec.ts\"\n);\nimport.meta.hot.lastModified = \"1760473121056.9587\";\n}\n// REMIX HMR END\n\n// OpenAI Spec Schema for product data optimization\n// Based on OpenAI's recommended product data structure for AI search\n\nexport const OPENAI_PRODUCT_SCHEMA = {\n  type: \"object\",\n  required: [\n    \"title\",\n    \"description\", \n    \"price\",\n    \"availability\",\n    \"category\",\n  ],\n  properties: {\n    // Core Product Information\n    title: {\n      type: \"string\",\n      maxLength: 150,\n      description: \"Product title - clear, descriptive, keyword-rich\"\n    },\n    description: {\n      type: \"string\",\n      minLength: 100,\n      maxLength: 4000,\n      description: \"Detailed product description with features, benefits, use cases\"\n    },\n    price: {\n      type: \"string\",\n      pattern: \"^\\\\d+\\\\.\\\\d{2} [A-Z]{3}$\",\n      description: \"Price in format 'XX.XX USD'\"\n    },\n    availability: {\n      type: \"string\",\n      enum: [\"in_stock\", \"out_of_stock\", \"pre_order\", \"discontinued\"],\n      description: \"Current availability status\"\n    },\n    category: {\n      type: \"string\",\n      description: \"Product category for classification\"\n    },\n\n    // Physical Attributes\n    material: {\n      type: \"string\",\n      description: \"Primary material composition\"\n    },\n    dimensions: {\n      type: \"object\",\n      properties: {\n        length: { type: \"string\", description: \"Length with unit\" },\n        width: { type: \"string\", description: \"Width with unit\" },\n        height: { type: \"string\", description: \"Height with unit\" }\n      },\n      description: \"Product dimensions\"\n    },\n    weight: {\n      type: \"string\",\n      description: \"Product weight with unit\"\n    },\n    color: {\n      type: \"string\",\n      description: \"Primary color\"\n    },\n    size: {\n      type: \"string\",\n      description: \"Size information\"\n    },\n\n    // Functional Attributes\n    brand: {\n      type: \"string\",\n      description: \"Brand or manufacturer\"\n    },\n    model: {\n      type: \"string\",\n      description: \"Model number or name\"\n    },\n    sku: {\n      type: \"string\",\n      description: \"Stock keeping unit\"\n    },\n    upc: {\n      type: \"string\",\n      description: \"Universal Product Code\"\n    },\n\n    // Usage and Context\n    use_cases: {\n      type: \"array\",\n      items: { type: \"string\" },\n      description: \"List of use cases and applications\"\n    },\n    target_audience: {\n      type: \"string\",\n      description: \"Primary target audience\"\n    },\n    age_range: {\n      type: \"string\",\n      description: \"Recommended age range\"\n    },\n    gender: {\n      type: \"string\",\n      enum: [\"male\", \"female\", \"unisex\", \"kids\"],\n      description: \"Target gender\"\n    },\n\n    // Technical Specifications\n    features: {\n      type: \"array\",\n      items: { type: \"string\" },\n      description: \"Key product features\"\n    },\n    specifications: {\n      type: \"object\",\n      description: \"Technical specifications as key-value pairs\"\n    },\n    compatibility: {\n      type: \"array\",\n      items: { type: \"string\" },\n      description: \"Compatibility information\"\n    },\n\n    // SEO and Search\n    keywords: {\n      type: \"array\",\n      items: { type: \"string\" },\n      description: \"SEO keywords for search optimization\"\n    },\n    tags: {\n      type: \"array\",\n      items: { type: \"string\" },\n      description: \"Product tags for categorization\"\n    },\n\n    // Media and Links\n    image_urls: {\n      type: \"array\",\n      items: { type: \"string\" },\n      description: \"High-quality product image URLs\"\n    },\n    video_urls: {\n      type: \"array\",\n      items: { type: \"string\" },\n      description: \"Product video URLs\"\n    },\n    documentation_url: {\n      type: \"string\",\n      format: \"uri\",\n      description: \"Link to product documentation\"\n    },\n\n    // Business Information\n    vendor: {\n      type: \"string\",\n      description: \"Vendor or supplier\"\n    },\n    warranty: {\n      type: \"string\",\n      description: \"Warranty information\"\n    },\n    return_policy: {\n      type: \"string\",\n      description: \"Return policy information\"\n    },\n    shipping_info: {\n      type: \"string\",\n      description: \"Shipping information\"\n    },\n\n    // AI-Specific Fields\n    ai_search_queries: {\n      type: \"array\",\n      items: { type: \"string\" },\n      description: \"Sample AI search queries this product should match\"\n    },\n    semantic_description: {\n      type: \"string\",\n      description: \"AI-optimized semantic description for better matching\"\n    }\n  }\n}\n\n// Field importance weights for scoring (Enhanced for instant gratification)\nexport const FIELD_WEIGHTS = {\n  // Required fields (must be 100% complete) - Higher impact\n  required: {\n    title: 2.5,\n    description: 2.5,\n    price: 2.0,\n    availability: 2.0,\n    category: 2.0,\n  },\n  // High importance optional fields (critical for AI search) - Meaningful impact\n  high: {\n    material: 2.0,\n    dimensions: 2.0,\n    weight: 1.8,\n    brand: 2.0,\n    use_cases: 2.2,\n    features: 2.0,\n    image_urls: 1.8,\n  },\n  // Medium importance fields (enhance discoverability) - Good impact\n  medium: {\n    color: 1.5,\n    size: 1.5,\n    target_audience: 1.8,\n    keywords: 1.8,\n    upc: 1.2,\n    compatibility: 1.5,\n    age_range: 1.2,\n    gender: 1.2,\n    video_urls: 1.5,\n  },\n  // Low importance fields (nice to have) - Still meaningful\n  low: {\n    model: 1.0,\n    sku: 1.2,\n    tags: 1.2,\n    vendor: 1.0,\n    warranty: 1.0,\n    return_policy: 1.0,\n    shipping_info: 1.0,\n    documentation_url: 1.0,\n    specifications: 1.2,\n    ai_search_queries: 1.0,\n    semantic_description: 1.0,\n  }\n}\n\n// Points system for instant gratification\nexport const FIELD_POINTS = {\n  required: {\n    title: 25,\n    description: 25,\n    price: 20,\n    availability: 20,\n    category: 20,\n  },\n  high: {\n    material: 20,\n    dimensions: 20,\n    weight: 18,\n    brand: 20,\n    use_cases: 22,\n    features: 20,\n    image_urls: 18,\n  },\n  medium: {\n    color: 15,\n    size: 15,\n    target_audience: 18,\n    keywords: 18,\n    upc: 12,\n    compatibility: 15,\n    age_range: 12,\n    gender: 12,\n    video_urls: 15,\n  },\n  low: {\n    model: 10,\n    sku: 12,\n    tags: 12,\n    vendor: 10,\n    warranty: 10,\n    return_policy: 10,\n    shipping_info: 10,\n    documentation_url: 10,\n    specifications: 12,\n    ai_search_queries: 10,\n    semantic_description: 10,\n  }\n}\n\n// Field categories for gap analysis\nexport const FIELD_CATEGORIES = {\n  basic: [\"title\", \"description\", \"price\", \"availability\", \"category\"],\n  physical: [\"material\", \"dimensions\", \"weight\", \"color\", \"size\"],\n  functional: [\"brand\", \"model\", \"sku\", \"use_cases\", \"features\"],\n  seo: [\"keywords\", \"tags\", \"semantic_description\"],\n  media: [\"image_urls\", \"video_urls\"],\n  business: [\"vendor\", \"warranty\", \"shipping_info\"]\n}\n\n// Customer input vs AI-generatable field categorization  \nexport const FIELD_INPUT_TYPES = {\n  // Fields that REQUIRE customer/brand input - AI cannot determine these accurately\n  customer_input_required: [\n    // Physical specifications (only the brand/manufacturer knows these)\n    \"material\",\n    \"dimensions\", \n    \"weight\",\n    \"color\",\n    \"size\",\n    \n    // Identification & business info (brand-specific data)\n    \"brand\", \n    \"model\",\n    \"upc\",\n    \"vendor\",\n    \n    // Age/gender restrictions (brand policy)\n    \"age_range\",\n    \"gender\", \n    \"compatibility\",\n    \n    // Business policies (company-specific)\n    \"warranty\",\n    \"return_policy\", \n    \"shipping_info\",\n    \"specifications\",\n    \"documentation_url\",\n    \"video_urls\"\n  ],\n  \n  // Fields that AI can generate based on product info\n  ai_generatable: [\n    // Marketing content (AI can create based on existing product data)\n    \"description\",\n    \"use_cases\",\n    \"features\", \n    \"keywords\",\n    \"tags\",\n    \"target_audience\",\n    \"sku\",\n    \"ai_search_queries\",\n    \"semantic_description\"\n  ],\n  \n  // Core required fields (must exist, usually already present)\n  core_required: [\n    \"title\",\n    \"price\", \n    \"availability\",\n    \"category\",\n    \"image_urls\"\n  ]\n}\n\n// Helper function to get field input type\nexport function getFieldInputType(fieldName: string): 'customer_required' | 'ai_generatable' | 'core_required' {\n  if (FIELD_INPUT_TYPES.customer_input_required.includes(fieldName)) {\n    return 'customer_required'\n  } else if (FIELD_INPUT_TYPES.ai_generatable.includes(fieldName)) {\n    return 'ai_generatable'\n  } else if (FIELD_INPUT_TYPES.core_required.includes(fieldName)) {\n    return 'core_required'\n  }\n  return 'customer_required' // Default to customer input for safety\n}\n\n// User-friendly field labels\nexport const FIELD_LABELS: Record<string, string> = {\n  material: \"Material\",\n  dimensions: \"Dimensions\", \n  weight: \"Weight\",\n  color: \"Color\",\n  size: \"Size\",\n  brand: \"Brand\",\n  model: \"Model\", \n  upc: \"UPC/Barcode\",\n  vendor: \"Vendor\",\n  age_range: \"Age Range\",\n  gender: \"Target Gender\",\n  compatibility: \"Compatibility\",\n  warranty: \"Warranty Info\",\n  return_policy: \"Return Policy\",\n  shipping_info: \"Shipping Info\",\n  specifications: \"Technical Specs\",\n  documentation_url: \"Documentation URL\",\n  video_urls: \"Video URLs\"\n}\n\nexport interface OpenAISpecProduct {\n  // Core required fields\n  title: string\n  description: string\n  price: string\n  availability: \"in_stock\" | \"out_of_stock\" | \"pre_order\" | \"discontinued\"\n  category: string\n\n  // Optional fields\n  material?: string\n  dimensions?: {\n    length?: string\n    width?: string\n    height?: string\n  }\n  weight?: string\n  color?: string\n  size?: string\n  brand?: string\n  model?: string\n  sku?: string\n  upc?: string\n  use_cases?: string[]\n  target_audience?: string\n  age_range?: string\n  gender?: \"male\" | \"female\" | \"unisex\" | \"kids\"\n  features?: string[]\n  specifications?: Record<string, any>\n  compatibility?: string[]\n  keywords?: string[]\n  tags?: string[]\n  image_urls?: string[]\n  video_urls?: string[]\n  documentation_url?: string\n  vendor?: string\n  warranty?: string\n  return_policy?: string\n  shipping_info?: string\n  ai_search_queries?: string[]\n  semantic_description?: string\n}\n\nexport interface ProductScore {\n  score: number\n  completeness: number\n  gaps: string[]\n  recommendations: string[]\n  // New: Points system for instant gratification\n  points: number\n  maxPoints: number\n  // New: Field-level progress tracking\n  fieldProgress: {\n    [fieldName: string]: {\n      completed: boolean\n      category: 'required' | 'high' | 'medium' | 'low'\n      points: number\n      weight: number\n    }\n  }\n  // New: Category progress\n  categoryProgress: {\n    required: { completed: number; total: number; points: number }\n    high: { completed: number; total: number; points: number }\n    medium: { completed: number; total: number; points: number }\n    low: { completed: number; total: number; points: number }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
