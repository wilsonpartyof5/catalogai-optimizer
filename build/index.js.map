{
  "version": 3,
  "sources": ["../app/utils/db.ts", "../app/shopify.server.ts", "../app/utils/shopifySync.ts", "../app/utils/openaiSpec.ts", "../app/utils/fieldMapper.ts", "../app/utils/aiClient.ts", "../app/utils/aiEnrich.ts", "../app/entry.server.tsx", "../app/utils/queue.ts", "../app/utils/healthChecker.ts", "../app/utils/emailService.ts", "../app/utils/analyticsService.ts", "../app/root.tsx", "../app/routes/api.test-health-check.ts", "../app/utils/healthCheckTest.ts", "../app/routes/api.health-check.ts", "../app/routes/api.queue-status.ts", "../app/routes/api.settings.ts", "../app/routes/api.validate.ts", "../app/utils/validator.ts", "../app/routes/api.enrich.ts", "../app/routes/api.sync.ts", "../app/routes/webhooks.ts", "../app/routes/_index.tsx", "../app/components/HealthCheckModal.tsx", "../app/routes/auth.$.tsx", "../app/routes/health.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["import { PrismaClient } from '@prisma/client'\n\ndeclare global {\n  var __db__: PrismaClient\n}\n\nlet db: PrismaClient\n\n// This is needed because in development we don't want to restart\n// the server with every change, but we want to make sure we don't\n// create a new connection to the DB with every change either.\nif (process.env.NODE_ENV === 'production') {\n  db = new PrismaClient({\n    log: ['error', 'warn'],\n    errorFormat: 'minimal',\n  })\n} else {\n  if (!global.__db__) {\n    global.__db__ = new PrismaClient({\n      log: ['query', 'error', 'warn'],\n      errorFormat: 'pretty',\n    })\n  }\n  db = global.__db__\n  \n  // Only connect in development\n  db.$connect().catch((error) => {\n    console.error('Failed to connect to database:', error)\n  })\n}\n\nexport { db }\n", "import { shopifyApp } from \"@shopify/shopify-app-remix/server\"\nimport { PrismaSessionStorage } from \"@shopify/shopify-app-session-storage-prisma\"\nimport { db } from \"./utils/db\"\n\nconst shopify = shopifyApp({\n  apiKey: process.env.SHOPIFY_API_KEY!,\n  apiSecretKey: process.env.SHOPIFY_API_SECRET!,\n  appUrl: process.env.SHOPIFY_APP_URL!,\n  apiVersion: \"2025-10\" as any,\n  scopes: process.env.SCOPES?.split(\",\") || [\"read_products\", \"read_inventory\", \"write_metafields\", \"read_orders\"],\n  sessionStorage: new PrismaSessionStorage(db),\n  distribution: \"app\" as any,\n  useOnlineTokens: false, // Use offline tokens for background API calls\n  hooks: {\n    afterAuth: async ({ session }) => {\n      const requestId = Math.random().toString(36).substring(7)\n      console.log(`\uD83D\uDD0D [${requestId}] afterAuth triggered for shop:`, session.shop)\n      console.log(`\uD83D\uDD0D [${requestId}] Session details:`, {\n        id: session.id,\n        shop: session.shop,\n        scope: session.scope,\n        isOnline: session.isOnline,\n        expires: session.expires,\n        accessTokenLength: session.accessToken?.length,\n        accessTokenPrefix: session.accessToken?.substring(0, 15) + '...',\n      })\n      \n      try {\n        // Create or update user in database\n        const user = await db.user.upsert({\n        where: { shopId: session.shop! },\n        update: {\n          accessToken: session.accessToken!,\n          updatedAt: new Date(),\n        },\n        create: {\n          shopId: session.shop!,\n          shopDomain: session.shop!,\n          accessToken: session.accessToken!,\n          tier: \"starter\",\n          aiUsage: 0,\n        },\n      })\n      \n      console.log(`\u2705 [${requestId}] User created/updated:`, user.id)\n      console.log(`\uD83D\uDD0D [${requestId}] User details:`, {\n        id: user.id,\n        shopId: user.shopId,\n        tier: user.tier,\n        aiUsage: user.aiUsage,\n        createdAt: user.createdAt,\n        updatedAt: user.updatedAt,\n      })\n      } catch (error) {\n        console.error(`\u274C [${requestId}] afterAuth error:`, error)\n        console.error(`\u274C [${requestId}] Error details:`, {\n          message: error instanceof Error ? error.message : 'Unknown error',\n          stack: error instanceof Error ? error.stack : 'No stack trace',\n          errorType: error?.constructor?.name,\n        })\n        throw error\n      }\n    },\n  },\n})\n\nexport default shopify\nexport const apiVersion = \"2025-10\"\nexport const addDocumentResponseHeaders = shopify.addDocumentResponseHeaders\nexport const authenticate = shopify.authenticate\nexport const unauthenticated = shopify.unauthenticated\nexport const registerWebhooks = shopify.registerWebhooks\nexport const sessionStorage = shopify.sessionStorage\n\n// Import REST resources\n// import { restResources } from \"@shopify/shopify-api/rest/admin/2023-10\"\n", "import { GraphQLClient } from 'graphql-request'\nimport { db } from './db'\n\nexport interface ShopifyProduct {\n  id: string\n  title: string\n  description: string\n  handle: string\n  productType: string\n  vendor: string\n  tags: string[]\n  variants: ShopifyVariant[]\n  metafields: ShopifyMetafield[]\n  images: ShopifyImage[]\n}\n\nexport interface ShopifyVariant {\n  id: string\n  title: string\n  price: string\n  compareAtPrice?: string\n  sku?: string\n  inventoryQuantity?: number\n  availableForSale: boolean\n}\n\nexport interface ShopifyMetafield {\n  id: string\n  namespace: string\n  key: string\n  value: string\n  type: string\n}\n\nexport interface ShopifyImage {\n  id: string\n  url: string\n  altText?: string\n}\n\nconst PRODUCTS_QUERY = `\n  query getProducts($first: Int!, $after: String) {\n    products(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      edges {\n        node {\n          id\n          title\n          description\n          handle\n          productType\n          vendor\n          tags\n          variants(first: 100) {\n            edges {\n              node {\n                id\n                title\n                price\n                compareAtPrice\n                sku\n                inventoryQuantity\n                availableForSale\n              }\n            }\n          }\n          metafields(first: 100) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n                type\n              }\n            }\n          }\n          images(first: 10) {\n            edges {\n              node {\n                id\n                url\n                altText\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport class ShopifySyncService {\n  private client: GraphQLClient\n\n  constructor(shopDomain: string, accessToken: string) {\n    console.log('\uD83D\uDD27 ShopifySyncService constructor [v2]:', {\n      shopDomain,\n      accessTokenLength: accessToken?.length || 0,\n      accessTokenPrefix: accessToken?.substring(0, 10) + '...',\n      endpoint: `https://${shopDomain}/admin/api/2025-10/graphql`\n    })\n    \n    // Test the access token with a simple REST API call first\n    this.testAccessToken(shopDomain, accessToken)\n    \n    this.client = new GraphQLClient(\n      `https://${shopDomain}/admin/api/2025-10/graphql`,\n      {\n        headers: {\n          'X-Shopify-Access-Token': accessToken,\n          'Content-Type': 'application/json',\n        },\n      }\n    )\n  }\n\n  private async testAccessToken(shopDomain: string, accessToken: string) {\n    try {\n      console.log('\uD83E\uDDEA Testing access token with REST API...')\n      const response = await fetch(`https://${shopDomain}/admin/api/2025-10/shop.json`, {\n        headers: {\n          'X-Shopify-Access-Token': accessToken,\n          'Content-Type': 'application/json',\n        },\n      })\n      \n      console.log('\uD83E\uDDEA REST API test response:', {\n        status: response.status,\n        statusText: response.statusText,\n        ok: response.ok\n      })\n      \n      if (response.ok) {\n        const data = await response.json()\n        console.log('\u2705 Access token is valid, shop name:', data.shop?.name)\n      } else {\n        console.log('\u274C Access token test failed:', response.status, response.statusText)\n      }\n    } catch (error) {\n      console.log('\u274C Access token test error:', error)\n    }\n  }\n\n  async syncProducts(userId: string): Promise<ShopifyProduct[]> {\n    const allProducts: ShopifyProduct[] = []\n    let hasNextPage = true\n    let after: string | undefined\n    let pageCount = 0\n\n    console.log('\uD83D\uDD04 Starting product sync for user:', userId)\n    \n    try {\n      while (hasNextPage) {\n        pageCount++\n        console.log(`\uD83D\uDCC4 Fetching page ${pageCount}${after ? ` (after: ${after.substring(0, 20)}...)` : ' (first page)'}`)\n        \n        const startTime = Date.now()\n        const response = await this.client.request(PRODUCTS_QUERY, {\n          first: 250,\n          after,\n        }) as any\n        const fetchTime = Date.now() - startTime\n        \n        console.log(`\u23F1\uFE0F  Page ${pageCount} fetched in ${fetchTime}ms`)\n        console.log(`\uD83D\uDCE6 Products in this page: ${response.products.edges.length}`)\n\n        const products = response.products.edges.map((edge: any) => ({\n          id: edge.node.id.replace('gid://shopify/Product/', ''),\n          title: edge.node.title,\n          description: edge.node.description || '',\n          handle: edge.node.handle,\n          productType: edge.node.productType || '',\n          vendor: edge.node.vendor || '',\n          tags: edge.node.tags || [],\n          variants: edge.node.variants.edges.map((v: any) => ({\n            id: v.node.id.replace('gid://shopify/ProductVariant/', ''),\n            title: v.node.title,\n            price: v.node.price,\n            compareAtPrice: v.node.compareAtPrice,\n            sku: v.node.sku,\n            inventoryQuantity: v.node.inventoryQuantity,\n            availableForSale: v.node.availableForSale,\n          })),\n          metafields: edge.node.metafields.edges.map((m: any) => ({\n            id: m.node.id.replace('gid://shopify/Metafield/', ''),\n            namespace: m.node.namespace,\n            key: m.node.key,\n            value: m.node.value,\n            type: m.node.type,\n          })),\n          images: edge.node.images.edges.map((i: any) => ({\n            id: i.node.id.replace('gid://shopify/MediaImage/', ''),\n            url: i.node.url,\n            altText: i.node.altText,\n          })),\n        }))\n\n        allProducts.push(...products)\n        console.log(`\uD83D\uDCCA Total products so far: ${allProducts.length}`)\n\n        hasNextPage = response.products.pageInfo.hasNextPage\n        after = response.products.pageInfo.endCursor\n        \n        console.log(`\uD83D\uDD17 Has next page: ${hasNextPage}`)\n        if (hasNextPage) {\n          console.log(`\u23F3 Waiting 500ms before next request...`)\n          await new Promise(resolve => setTimeout(resolve, 500))\n        }\n      }\n      \n      console.log(`\u2705 Sync complete! Total products: ${allProducts.length}`)\n\n      // Log the sync operation\n      await db.log.create({\n        data: {\n          userId,\n          type: 'sync',\n          message: `Synchronized ${allProducts.length} products from Shopify`,\n          metadata: {\n            productsCount: allProducts.length,\n            timestamp: new Date().toISOString(),\n          },\n        },\n      })\n\n      return allProducts\n    } catch (error) {\n      console.error('\u274C Sync failed:', error)\n      console.error('\u274C Error details:', {\n        message: error instanceof Error ? error.message : 'Unknown error',\n        stack: error instanceof Error ? error.stack : String(error),\n        pageCount,\n        totalProducts: allProducts.length,\n      })\n      \n      // Log the error\n      await db.log.create({\n        data: {\n          userId,\n          type: 'error',\n          message: `Failed to sync products: ${error instanceof Error ? error.message : 'Unknown error'}`,\n          error: error instanceof Error ? error.stack : String(error),\n          metadata: {\n            timestamp: new Date().toISOString(),\n            pageCount,\n            totalProducts: allProducts.length,\n          },\n        },\n      })\n\n      throw error\n    }\n  }\n\n  async getInventoryLevels(shopDomain: string, accessToken: string): Promise<any[]> {\n    try {\n      const response = await fetch(\n        `https://${shopDomain}/admin/api/2025-10/inventory_levels.json`,\n        {\n          headers: {\n            'X-Shopify-Access-Token': accessToken,\n            'Content-Type': 'application/json',\n          },\n        }\n      )\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`)\n      }\n\n      const data = await response.json() as any\n      return data.inventory_levels || []\n    } catch (error) {\n      console.error('Error fetching inventory levels:', error)\n      throw error\n    }\n  }\n\n  async getRecentOrders(shopDomain: string, accessToken: string, limit: number = 50): Promise<any[]> {\n    try {\n      const response = await fetch(\n        `https://${shopDomain}/admin/api/2025-10/orders.json?limit=${limit}&status=any`,\n        {\n          headers: {\n            'X-Shopify-Access-Token': accessToken,\n            'Content-Type': 'application/json',\n          },\n        }\n      )\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`)\n      }\n\n      const data = await response.json() as any\n      return data.orders || []\n    } catch (error) {\n      console.error('Error fetching orders:', error)\n      throw error\n    }\n  }\n}\n", "// OpenAI Spec Schema for product data optimization\n// Based on OpenAI's recommended product data structure for AI search\n\nexport const OPENAI_PRODUCT_SCHEMA = {\n  type: \"object\",\n  required: [\n    \"title\",\n    \"description\", \n    \"price\",\n    \"availability\",\n    \"category\",\n  ],\n  properties: {\n    // Core Product Information\n    title: {\n      type: \"string\",\n      maxLength: 150,\n      description: \"Product title - clear, descriptive, keyword-rich\"\n    },\n    description: {\n      type: \"string\",\n      minLength: 100,\n      maxLength: 4000,\n      description: \"Detailed product description with features, benefits, use cases\"\n    },\n    price: {\n      type: \"string\",\n      pattern: \"^\\\\d+\\\\.\\\\d{2} [A-Z]{3}$\",\n      description: \"Price in format 'XX.XX USD'\"\n    },\n    availability: {\n      type: \"string\",\n      enum: [\"in_stock\", \"out_of_stock\", \"pre_order\", \"discontinued\"],\n      description: \"Current availability status\"\n    },\n    category: {\n      type: \"string\",\n      description: \"Product category for classification\"\n    },\n\n    // Physical Attributes\n    material: {\n      type: \"string\",\n      description: \"Primary material composition\"\n    },\n    dimensions: {\n      type: \"object\",\n      properties: {\n        length: { type: \"string\", description: \"Length with unit\" },\n        width: { type: \"string\", description: \"Width with unit\" },\n        height: { type: \"string\", description: \"Height with unit\" }\n      },\n      description: \"Product dimensions\"\n    },\n    weight: {\n      type: \"string\",\n      description: \"Product weight with unit\"\n    },\n    color: {\n      type: \"string\",\n      description: \"Primary color\"\n    },\n    size: {\n      type: \"string\",\n      description: \"Size information\"\n    },\n\n    // Functional Attributes\n    brand: {\n      type: \"string\",\n      description: \"Brand or manufacturer\"\n    },\n    model: {\n      type: \"string\",\n      description: \"Model number or name\"\n    },\n    sku: {\n      type: \"string\",\n      description: \"Stock keeping unit\"\n    },\n    upc: {\n      type: \"string\",\n      description: \"Universal Product Code\"\n    },\n\n    // Usage and Context\n    use_cases: {\n      type: \"array\",\n      items: { type: \"string\" },\n      description: \"List of use cases and applications\"\n    },\n    target_audience: {\n      type: \"string\",\n      description: \"Primary target audience\"\n    },\n    age_range: {\n      type: \"string\",\n      description: \"Recommended age range\"\n    },\n    gender: {\n      type: \"string\",\n      enum: [\"male\", \"female\", \"unisex\", \"kids\"],\n      description: \"Target gender\"\n    },\n\n    // Technical Specifications\n    features: {\n      type: \"array\",\n      items: { type: \"string\" },\n      description: \"Key product features\"\n    },\n    specifications: {\n      type: \"object\",\n      description: \"Technical specifications as key-value pairs\"\n    },\n    compatibility: {\n      type: \"array\",\n      items: { type: \"string\" },\n      description: \"Compatibility information\"\n    },\n\n    // SEO and Search\n    keywords: {\n      type: \"array\",\n      items: { type: \"string\" },\n      description: \"SEO keywords for search optimization\"\n    },\n    tags: {\n      type: \"array\",\n      items: { type: \"string\" },\n      description: \"Product tags for categorization\"\n    },\n\n    // Media and Links\n    image_urls: {\n      type: \"array\",\n      items: { type: \"string\" },\n      description: \"High-quality product image URLs\"\n    },\n    video_urls: {\n      type: \"array\",\n      items: { type: \"string\" },\n      description: \"Product video URLs\"\n    },\n    documentation_url: {\n      type: \"string\",\n      format: \"uri\",\n      description: \"Link to product documentation\"\n    },\n\n    // Business Information\n    vendor: {\n      type: \"string\",\n      description: \"Vendor or supplier\"\n    },\n    warranty: {\n      type: \"string\",\n      description: \"Warranty information\"\n    },\n    return_policy: {\n      type: \"string\",\n      description: \"Return policy information\"\n    },\n    shipping_info: {\n      type: \"string\",\n      description: \"Shipping information\"\n    },\n\n    // AI-Specific Fields\n    ai_search_queries: {\n      type: \"array\",\n      items: { type: \"string\" },\n      description: \"Sample AI search queries this product should match\"\n    },\n    semantic_description: {\n      type: \"string\",\n      description: \"AI-optimized semantic description for better matching\"\n    }\n  }\n}\n\n// Field importance weights for scoring (Enhanced for instant gratification)\nexport const FIELD_WEIGHTS = {\n  // Required fields (must be 100% complete) - Higher impact\n  required: {\n    title: 2.5,\n    description: 2.5,\n    price: 2.0,\n    availability: 2.0,\n    category: 2.0,\n  },\n  // High importance optional fields (critical for AI search) - Meaningful impact\n  high: {\n    material: 2.0,\n    dimensions: 2.0,\n    weight: 1.8,\n    brand: 2.0,\n    use_cases: 2.2,\n    features: 2.0,\n    image_urls: 1.8,\n  },\n  // Medium importance fields (enhance discoverability) - Good impact\n  medium: {\n    color: 1.5,\n    size: 1.5,\n    target_audience: 1.8,\n    keywords: 1.8,\n    upc: 1.2,\n    compatibility: 1.5,\n    age_range: 1.2,\n    gender: 1.2,\n    video_urls: 1.5,\n  },\n  // Low importance fields (nice to have) - Still meaningful\n  low: {\n    model: 1.0,\n    sku: 1.2,\n    tags: 1.2,\n    vendor: 1.0,\n    warranty: 1.0,\n    return_policy: 1.0,\n    shipping_info: 1.0,\n    documentation_url: 1.0,\n    specifications: 1.2,\n    ai_search_queries: 1.0,\n    semantic_description: 1.0,\n  }\n}\n\n// Points system for instant gratification\nexport const FIELD_POINTS = {\n  required: {\n    title: 25,\n    description: 25,\n    price: 20,\n    availability: 20,\n    category: 20,\n  },\n  high: {\n    material: 20,\n    dimensions: 20,\n    weight: 18,\n    brand: 20,\n    use_cases: 22,\n    features: 20,\n    image_urls: 18,\n  },\n  medium: {\n    color: 15,\n    size: 15,\n    target_audience: 18,\n    keywords: 18,\n    upc: 12,\n    compatibility: 15,\n    age_range: 12,\n    gender: 12,\n    video_urls: 15,\n  },\n  low: {\n    model: 10,\n    sku: 12,\n    tags: 12,\n    vendor: 10,\n    warranty: 10,\n    return_policy: 10,\n    shipping_info: 10,\n    documentation_url: 10,\n    specifications: 12,\n    ai_search_queries: 10,\n    semantic_description: 10,\n  }\n}\n\n// Field categories for gap analysis\nexport const FIELD_CATEGORIES = {\n  basic: [\"title\", \"description\", \"price\", \"availability\", \"category\"],\n  physical: [\"material\", \"dimensions\", \"weight\", \"color\", \"size\"],\n  functional: [\"brand\", \"model\", \"sku\", \"use_cases\", \"features\"],\n  seo: [\"keywords\", \"tags\", \"semantic_description\"],\n  media: [\"image_urls\", \"video_urls\"],\n  business: [\"vendor\", \"warranty\", \"shipping_info\"]\n}\n\n// Customer input vs AI-generatable field categorization  \nexport const FIELD_INPUT_TYPES = {\n  // Fields that REQUIRE customer/brand input - AI cannot determine these accurately\n  customer_input_required: [\n    // Physical specifications (only the brand/manufacturer knows these)\n    \"material\",\n    \"dimensions\", \n    \"weight\",\n    \"color\",\n    \"size\",\n    \n    // Identification & business info (brand-specific data)\n    \"brand\", \n    \"model\",\n    \"upc\",\n    \"vendor\",\n    \n    // Age/gender restrictions (brand policy)\n    \"age_range\",\n    \"gender\", \n    \"compatibility\",\n    \n    // Business policies (company-specific)\n    \"warranty\",\n    \"return_policy\", \n    \"shipping_info\",\n    \"specifications\",\n    \"documentation_url\",\n    \"video_urls\"\n  ],\n  \n  // Fields that AI can generate based on product info\n  ai_generatable: [\n    // Marketing content (AI can create based on existing product data)\n    \"description\",\n    \"use_cases\",\n    \"features\", \n    \"keywords\",\n    \"tags\",\n    \"target_audience\",\n    \"sku\",\n    \"ai_search_queries\",\n    \"semantic_description\"\n  ],\n  \n  // Core required fields (must exist, usually already present)\n  core_required: [\n    \"title\",\n    \"price\", \n    \"availability\",\n    \"category\",\n    \"image_urls\"\n  ]\n}\n\n// Helper function to get field input type\nexport function getFieldInputType(fieldName: string): 'customer_required' | 'ai_generatable' | 'core_required' {\n  if (FIELD_INPUT_TYPES.customer_input_required.includes(fieldName)) {\n    return 'customer_required'\n  } else if (FIELD_INPUT_TYPES.ai_generatable.includes(fieldName)) {\n    return 'ai_generatable'\n  } else if (FIELD_INPUT_TYPES.core_required.includes(fieldName)) {\n    return 'core_required'\n  }\n  return 'customer_required' // Default to customer input for safety\n}\n\n// User-friendly field labels\nexport const FIELD_LABELS: Record<string, string> = {\n  material: \"Material\",\n  dimensions: \"Dimensions\", \n  weight: \"Weight\",\n  color: \"Color\",\n  size: \"Size\",\n  brand: \"Brand\",\n  model: \"Model\", \n  upc: \"UPC/Barcode\",\n  vendor: \"Vendor\",\n  age_range: \"Age Range\",\n  gender: \"Target Gender\",\n  compatibility: \"Compatibility\",\n  warranty: \"Warranty Info\",\n  return_policy: \"Return Policy\",\n  shipping_info: \"Shipping Info\",\n  specifications: \"Technical Specs\",\n  documentation_url: \"Documentation URL\",\n  video_urls: \"Video URLs\"\n}\n\nexport interface OpenAISpecProduct {\n  // Core required fields\n  title: string\n  description: string\n  price: string\n  availability: \"in_stock\" | \"out_of_stock\" | \"pre_order\" | \"discontinued\"\n  category: string\n\n  // Optional fields\n  material?: string\n  dimensions?: {\n    length?: string\n    width?: string\n    height?: string\n  }\n  weight?: string\n  color?: string\n  size?: string\n  brand?: string\n  model?: string\n  sku?: string\n  upc?: string\n  use_cases?: string[]\n  target_audience?: string\n  age_range?: string\n  gender?: \"male\" | \"female\" | \"unisex\" | \"kids\"\n  features?: string[]\n  specifications?: Record<string, any>\n  compatibility?: string[]\n  keywords?: string[]\n  tags?: string[]\n  image_urls?: string[]\n  video_urls?: string[]\n  documentation_url?: string\n  vendor?: string\n  warranty?: string\n  return_policy?: string\n  shipping_info?: string\n  ai_search_queries?: string[]\n  semantic_description?: string\n}\n\nexport interface ProductScore {\n  score: number\n  completeness: number\n  gaps: string[]\n  recommendations: string[]\n  // New: Points system for instant gratification\n  points: number\n  maxPoints: number\n  // New: Field-level progress tracking\n  fieldProgress: {\n    [fieldName: string]: {\n      completed: boolean\n      category: 'required' | 'high' | 'medium' | 'low'\n      points: number\n      weight: number\n    }\n  }\n  // New: Category progress\n  categoryProgress: {\n    required: { completed: number; total: number; points: number }\n    high: { completed: number; total: number; points: number }\n    medium: { completed: number; total: number; points: number }\n    low: { completed: number; total: number; points: number }\n  }\n}\n", "import { ShopifyProduct } from './shopifySync'\nimport { OpenAISpecProduct, FIELD_WEIGHTS, FIELD_POINTS, ProductScore } from './openaiSpec'\n\nexport function mapShopifyToSpec(product: ShopifyProduct): OpenAISpecProduct {\n  const spec: OpenAISpecProduct = {\n    // Core required fields - map directly from Shopify\n    title: product.title || '',\n    description: product.description || '',\n    price: product.variants[0]?.price ? `${product.variants[0].price} USD` : '0.00 USD',\n    availability: getAvailabilityStatus(product.variants),\n    category: product.productType || 'Uncategorized',\n\n    // Physical attributes - from metafields or inference\n    material: getMetafieldValue(product.metafields, 'material') || inferMaterial(product.title, product.description),\n    weight: getMetafieldValue(product.metafields, 'weight'),\n    color: getMetafieldValue(product.metafields, 'color') || inferColor(product.title, product.description),\n    size: getMetafieldValue(product.metafields, 'size'),\n    \n    // Identification fields\n    brand: product.vendor || getMetafieldValue(product.metafields, 'brand'),\n    model: getMetafieldValue(product.metafields, 'model'),\n    sku: product.variants[0]?.sku,\n    upc: getMetafieldValue(product.metafields, 'upc') || getMetafieldValue(product.metafields, 'barcode'),\n    \n    // Usage and context\n    use_cases: getMetafieldArray(product.metafields, 'use_cases') || inferUseCases(product.title, product.description),\n    target_audience: getMetafieldValue(product.metafields, 'target_audience'),\n    age_range: getMetafieldValue(product.metafields, 'age_range'),\n    gender: getMetafieldValue(product.metafields, 'gender') as any,\n    \n    // Technical specifications\n    features: getMetafieldArray(product.metafields, 'features') || inferFeatures(product.description),\n    compatibility: getMetafieldArray(product.metafields, 'compatibility'),\n    \n    // SEO and search\n    keywords: product.tags || [],\n    tags: product.tags || [],\n    \n    // Media\n    image_urls: product.images.map(img => img.url),\n    video_urls: getMetafieldArray(product.metafields, 'video_urls') || getMetafieldArray(product.metafields, 'videos'),\n    documentation_url: getMetafieldValue(product.metafields, 'documentation_url') || getMetafieldValue(product.metafields, 'manual_url'),\n    \n    // Business information\n    vendor: product.vendor,\n    warranty: getMetafieldValue(product.metafields, 'warranty'),\n    return_policy: getMetafieldValue(product.metafields, 'return_policy'),\n    shipping_info: getMetafieldValue(product.metafields, 'shipping_info'),\n    \n    // AI-specific fields\n    ai_search_queries: getMetafieldArray(product.metafields, 'ai_search_queries'),\n    semantic_description: getMetafieldValue(product.metafields, 'semantic_description'),\n  }\n\n  // Add dimensions if available\n  const dimensions = getDimensionsFromMetafields(product.metafields)\n  if (dimensions) {\n    spec.dimensions = dimensions\n  }\n\n  // Add specifications if available\n  const specifications = getSpecificationsFromMetafields(product.metafields)\n  if (specifications && Object.keys(specifications).length > 0) {\n    spec.specifications = specifications\n  }\n\n  return spec\n}\n\nfunction getAvailabilityStatus(variants: ShopifyProduct['variants']): \"in_stock\" | \"out_of_stock\" | \"pre_order\" | \"discontinued\" {\n  if (variants.length === 0) return 'out_of_stock'\n  \n  const hasAvailable = variants.some(v => v.availableForSale && (v.inventoryQuantity || 0) > 0)\n  const hasInventory = variants.some(v => (v.inventoryQuantity || 0) > 0)\n  \n  if (hasAvailable) return 'in_stock'\n  if (hasInventory && !hasAvailable) return 'pre_order'\n  return 'out_of_stock'\n}\n\nfunction getMetafieldValue(metafields: ShopifyProduct['metafields'], key: string): string | undefined {\n  // First try to find in catalogai namespace (our AI-generated fields)\n  let metafield = metafields.find(m => \n    m.namespace === 'catalogai' && (m.key === key || m.key.toLowerCase().includes(key.toLowerCase()))\n  )\n  \n  // Fall back to any namespace with matching key\n  if (!metafield) {\n    metafield = metafields.find(m => \n      m.key === key || m.key.toLowerCase().includes(key.toLowerCase())\n    )\n  }\n  \n  return metafield?.value\n}\n\nfunction getMetafieldArray(metafields: ShopifyProduct['metafields'], key: string): string[] | undefined {\n  const value = getMetafieldValue(metafields, key)\n  if (!value) return undefined\n  \n  try {\n    // Try to parse as JSON array\n    const parsed = JSON.parse(value)\n    if (Array.isArray(parsed)) {\n      return parsed.filter(item => typeof item === 'string')\n    }\n  } catch {\n    // If not JSON, check for bullet-pointed text first\n    if (value.includes('\\n-') || value.startsWith('-')) {\n      return value\n        .split('\\n')\n        .map(line => line.replace(/^[-\u2022*]\\s*/, '').trim())\n        .filter(Boolean)\n    }\n    \n    // Fall back to splitting by common delimiters\n    return value.split(/[,;|]/).map(item => item.trim()).filter(Boolean)\n  }\n  \n  return undefined\n}\n\nfunction getDimensionsFromMetafields(metafields: ShopifyProduct['metafields']) {\n  const length = getMetafieldValue(metafields, 'length')\n  const width = getMetafieldValue(metafields, 'width')\n  const height = getMetafieldValue(metafields, 'height')\n  \n  if (!length && !width && !height) return null\n  \n  return {\n    ...(length && { length }),\n    ...(width && { width }),\n    ...(height && { height }),\n  }\n}\n\nfunction getSpecificationsFromMetafields(metafields: ShopifyProduct['metafields']): Record<string, any> | null {\n  const specs: Record<string, any> = {}\n  \n  // Look for metafields in a specifications namespace\n  const specMetafields = metafields.filter(m => \n    m.namespace === 'specifications' || m.namespace === 'specs'\n  )\n  \n  for (const metafield of specMetafields) {\n    specs[metafield.key] = metafield.value\n  }\n  \n  return Object.keys(specs).length > 0 ? specs : null\n}\n\n// Inference functions for missing data\nfunction inferMaterial(title: string, description: string): string | undefined {\n  const materialKeywords = [\n    'cotton', 'polyester', 'leather', 'metal', 'wood', 'plastic', 'glass',\n    'ceramic', 'fabric', 'denim', 'silk', 'wool', 'bamboo', 'steel',\n    'aluminum', 'bronze', 'silver', 'gold', 'rubber', 'silicone'\n  ]\n  \n  const text = `${title} ${description}`.toLowerCase()\n  \n  for (const material of materialKeywords) {\n    if (text.includes(material)) {\n      return material.charAt(0).toUpperCase() + material.slice(1)\n    }\n  }\n  \n  return undefined\n}\n\nfunction inferColor(title: string, description: string): string | undefined {\n  const colorKeywords = [\n    'red', 'blue', 'green', 'yellow', 'black', 'white', 'gray', 'grey',\n    'pink', 'purple', 'orange', 'brown', 'beige', 'navy', 'maroon'\n  ]\n  \n  const text = `${title} ${description}`.toLowerCase()\n  \n  for (const color of colorKeywords) {\n    if (text.includes(color)) {\n      return color.charAt(0).toUpperCase() + color.slice(1)\n    }\n  }\n  \n  return undefined\n}\n\nfunction inferUseCases(title: string, description: string): string[] {\n  const useCaseKeywords = [\n    'home', 'office', 'kitchen', 'bedroom', 'bathroom', 'garden', 'outdoor',\n    'travel', 'sports', 'fitness', 'workout', 'cooking', 'cleaning',\n    'decorative', 'functional', 'storage', 'organization'\n  ]\n  \n  const text = `${title} ${description}`.toLowerCase()\n  const foundUseCases: string[] = []\n  \n  for (const useCase of useCaseKeywords) {\n    if (text.includes(useCase)) {\n      foundUseCases.push(useCase.charAt(0).toUpperCase() + useCase.slice(1))\n    }\n  }\n  \n  return foundUseCases\n}\n\nfunction inferFeatures(description: string): string[] {\n  const featureKeywords = [\n    'waterproof', 'durable', 'lightweight', 'compact', 'portable',\n    'adjustable', 'reversible', 'washable', 'dishwasher safe',\n    'battery powered', 'cordless', 'wireless', 'bluetooth',\n    'stainless steel', 'non-stick', 'heat resistant'\n  ]\n  \n  const text = description.toLowerCase()\n  const foundFeatures: string[] = []\n  \n  for (const feature of featureKeywords) {\n    if (text.includes(feature)) {\n      foundFeatures.push(feature.charAt(0).toUpperCase() + feature.slice(1))\n    }\n  }\n  \n  return foundFeatures\n}\n\n// Calculate product completeness score with enhanced sensitivity and points system\nexport function calculateProductScore(spec: OpenAISpecProduct): ProductScore {\n  const gaps: string[] = []\n  const recommendations: string[] = []\n  let totalWeight = 0\n  let weightedScore = 0\n  let totalPoints = 0\n  let maxPossiblePoints = 0\n  \n  // Field-level progress tracking\n  const fieldProgress: ProductScore['fieldProgress'] = {}\n  \n  // Category progress tracking\n  const categoryProgress: ProductScore['categoryProgress'] = {\n    required: { completed: 0, total: 0, points: 0 },\n    high: { completed: 0, total: 0, points: 0 },\n    medium: { completed: 0, total: 0, points: 0 },\n    low: { completed: 0, total: 0, points: 0 }\n  }\n\n  // Helper function to check if field has value\n  const hasValue = (value: any): boolean => {\n    return value !== undefined && value !== null && \n           (typeof value !== 'string' || value.trim() !== '') &&\n           (!Array.isArray(value) || value.length > 0) &&\n           (typeof value !== 'object' || Object.keys(value).length > 0)\n  }\n\n  // Process each category\n  const categories = [\n    { name: 'required' as const, fields: FIELD_WEIGHTS.required, points: FIELD_POINTS.required },\n    { name: 'high' as const, fields: FIELD_WEIGHTS.high, points: FIELD_POINTS.high },\n    { name: 'medium' as const, fields: FIELD_WEIGHTS.medium, points: FIELD_POINTS.medium },\n    { name: 'low' as const, fields: FIELD_WEIGHTS.low, points: FIELD_POINTS.low }\n  ]\n\n  categories.forEach(({ name, fields, points }) => {\n    categoryProgress[name].total = Object.keys(fields).length\n    \n    for (const [field, weight] of Object.entries(fields)) {\n      totalWeight += weight\n      maxPossiblePoints += points[field as keyof typeof points]\n      \n      const value = spec[field as keyof OpenAISpecProduct]\n      const completed = hasValue(value)\n      \n      // Track field progress\n      fieldProgress[field] = {\n        completed,\n        category: name,\n        points: points[field as keyof typeof points],\n        weight\n      }\n      \n      if (completed) {\n        weightedScore += weight\n        totalPoints += points[field as keyof typeof points]\n        categoryProgress[name].completed++\n        categoryProgress[name].points += points[field as keyof typeof points]\n      } else {\n        gaps.push(field)\n        if (name === 'high') {\n          recommendations.push(`Add ${field} to improve product discoverability`)\n        }\n      }\n    }\n  })\n\n  // Calculate percentage score (now more sensitive due to higher weights)\n  const score = totalWeight > 0 ? Math.round((weightedScore / totalWeight) * 100) : 0\n  \n  // Calculate completeness based on filled fields\n  const totalFields = Object.keys(fieldProgress).length\n  const completedFields = Object.values(fieldProgress).filter(f => f.completed).length\n  const completeness = totalFields > 0 ? Math.round((completedFields / totalFields) * 100) : 0\n\n  return {\n    score,\n    completeness,\n    gaps,\n    recommendations,\n    points: totalPoints,\n    maxPoints: maxPossiblePoints,\n    fieldProgress,\n    categoryProgress\n  }\n}\n\n// Bulk map products\nexport function mapProductsToSpec(products: ShopifyProduct[]): (OpenAISpecProduct & { originalId: string, score: ProductScore })[] {\n  return products.map(product => {\n    const spec = mapShopifyToSpec(product)\n    const score = calculateProductScore(spec)\n    \n    return {\n      ...spec,\n      originalId: product.id,\n      score\n    }\n  })\n}\n", "import OpenAI from 'openai'\nimport { db } from './db'\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n})\n\nexport interface AIUsage {\n  promptTokens: number\n  completionTokens: number\n  totalTokens: number\n}\n\nexport class AIClient {\n  private async trackUsage(userId: string, usage: AIUsage) {\n    try {\n      await db.user.update({\n        where: { id: userId },\n        data: {\n          aiUsage: {\n            increment: usage.totalTokens,\n          },\n        },\n      })\n    } catch (error) {\n      console.error('Failed to track AI usage:', error)\n    }\n  }\n\n  async enrichDescription(\n    userId: string,\n    title: string,\n    currentDescription: string,\n    category?: string,\n    material?: string\n  ): Promise<{ enriched: string; usage: AIUsage }> {\n    const prompt = `You are an expert product copywriter specializing in e-commerce optimization for AI search systems. \n\nYour task is to enrich the following product description to make it more comprehensive, SEO-friendly, and optimized for AI search queries. The description should be between 400-4000 characters and written in plain text (no HTML).\n\nProduct Information:\n- Title: ${title}\n- Category: ${category || 'Not specified'}\n- Material: ${material || 'Not specified'}\n- Current Description: ${currentDescription}\n\nRequirements:\n1. Expand the description with specific details about features, benefits, and use cases\n2. Include relevant keywords that customers might search for\n3. Add information about dimensions, weight, or other specifications if relevant\n4. Mention target audience and ideal use cases\n5. Use descriptive, engaging language that highlights product value\n6. Ensure the description flows naturally and is easy to read\n7. Do not include HTML tags or special formatting\n8. Focus on factual, helpful information that aids in product discovery\n\nReturn only the enriched description text.`\n\n    try {\n      const response = await openai.chat.completions.create({\n        model: \"gpt-3.5-turbo\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a professional product copywriter who creates detailed, SEO-optimized product descriptions for e-commerce platforms.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        max_tokens: 1000,\n        temperature: 0.7,\n      })\n\n      const enriched = response.choices[0]?.message?.content || currentDescription\n      const usage: AIUsage = {\n        promptTokens: response.usage?.prompt_tokens || 0,\n        completionTokens: response.usage?.completion_tokens || 0,\n        totalTokens: response.usage?.total_tokens || 0,\n      }\n\n      await this.trackUsage(userId, usage)\n      \n      return { enriched, usage }\n    } catch (error) {\n      console.error('OpenAI API error:', error)\n      throw new Error(`Failed to enrich description: ${error instanceof Error ? error.message : 'Unknown error'}`)\n    }\n  }\n\n  async inferMaterial(\n    userId: string,\n    title: string,\n    description: string,\n    category?: string\n  ): Promise<{ material: string; usage: AIUsage }> {\n    const prompt = `Based on the following product information, determine the most likely primary material composition. Return only the material name.\n\nProduct Information:\n- Title: ${title}\n- Category: ${category || 'Not specified'}\n- Description: ${description}\n\nCommon materials include: cotton, polyester, leather, metal, wood, plastic, glass, ceramic, fabric, denim, silk, wool, bamboo, steel, aluminum, bronze, silver, gold, rubber, silicone, etc.\n\nIf the material is unclear, return \"Unknown\". Return only the material name, nothing else.`\n\n    try {\n      const response = await openai.chat.completions.create({\n        model: \"gpt-3.5-turbo\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a product analyst who identifies material composition from product descriptions.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        max_tokens: 50,\n        temperature: 0.3,\n      })\n\n      const material = response.choices[0]?.message?.content?.trim() || \"Unknown\"\n      const usage: AIUsage = {\n        promptTokens: response.usage?.prompt_tokens || 0,\n        completionTokens: response.usage?.completion_tokens || 0,\n        totalTokens: response.usage?.total_tokens || 0,\n      }\n\n      await this.trackUsage(userId, usage)\n      \n      return { material, usage }\n    } catch (error) {\n      console.error('OpenAI API error:', error)\n      throw new Error(`Failed to infer material: ${error instanceof Error ? error.message : 'Unknown error'}`)\n    }\n  }\n\n  async generateUseCases(\n    userId: string,\n    title: string,\n    description: string,\n    category?: string\n  ): Promise<{ useCases: string[]; usage: AIUsage }> {\n    const prompt = `Based on the following product information, generate 3-5 specific use cases or applications for this product. Return the use cases as a JSON array of strings.\n\nProduct Information:\n- Title: ${title}\n- Category: ${category || 'Not specified'}\n- Description: ${description}\n\nFocus on practical, specific use cases that would help customers understand how to use this product. Examples might include specific activities, environments, or situations where the product would be useful.\n\nReturn only a JSON array like: [\"Use case 1\", \"Use case 2\", \"Use case 3\"]`\n\n    try {\n      const response = await openai.chat.completions.create({\n        model: \"gpt-3.5-turbo\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a product analyst who identifies practical use cases for products.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        max_tokens: 200,\n        temperature: 0.7,\n      })\n\n      const content = response.choices[0]?.message?.content || \"[]\"\n      let useCases: string[] = []\n      \n      try {\n        useCases = JSON.parse(content)\n        if (!Array.isArray(useCases)) {\n          useCases = []\n        }\n      } catch {\n        useCases = []\n      }\n\n      const usage: AIUsage = {\n        promptTokens: response.usage?.prompt_tokens || 0,\n        completionTokens: response.usage?.completion_tokens || 0,\n        totalTokens: response.usage?.total_tokens || 0,\n      }\n\n      await this.trackUsage(userId, usage)\n      \n      return { useCases, usage }\n    } catch (error) {\n      console.error('OpenAI API error:', error)\n      throw new Error(`Failed to generate use cases: ${error instanceof Error ? error.message : 'Unknown error'}`)\n    }\n  }\n\n  async generateFeatures(\n    userId: string,\n    title: string,\n    description: string,\n    category?: string\n  ): Promise<{ features: string[]; usage: AIUsage }> {\n    const prompt = `Based on the following product information, extract and generate 3-6 key features or characteristics of this product. Return the features as a JSON array of strings.\n\nProduct Information:\n- Title: ${title}\n- Category: ${category || 'Not specified'}\n- Description: ${description}\n\nFocus on specific, factual features that highlight the product's benefits or characteristics. These should be features that customers would care about when making a purchase decision.\n\nReturn only a JSON array like: [\"Feature 1\", \"Feature 2\", \"Feature 3\"]`\n\n    try {\n      const response = await openai.chat.completions.create({\n        model: \"gpt-3.5-turbo\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a product analyst who extracts key features from product descriptions.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        max_tokens: 200,\n        temperature: 0.5,\n      })\n\n      const content = response.choices[0]?.message?.content || \"[]\"\n      let features: string[] = []\n      \n      try {\n        features = JSON.parse(content)\n        if (!Array.isArray(features)) {\n          features = []\n        }\n      } catch {\n        features = []\n      }\n\n      const usage: AIUsage = {\n        promptTokens: response.usage?.prompt_tokens || 0,\n        completionTokens: response.usage?.completion_tokens || 0,\n        totalTokens: response.usage?.total_tokens || 0,\n      }\n\n      await this.trackUsage(userId, usage)\n      \n      return { features, usage }\n    } catch (error) {\n      console.error('OpenAI API error:', error)\n      throw new Error(`Failed to generate features: ${error instanceof Error ? error.message : 'Unknown error'}`)\n    }\n  }\n\n  async generateKeywords(\n    userId: string,\n    title: string,\n    description: string,\n    category?: string\n  ): Promise<{ keywords: string[]; usage: AIUsage }> {\n    const prompt = `Based on the following product information, generate 5-10 relevant SEO keywords that customers might use to search for this product. Return the keywords as a JSON array of strings.\n\nProduct Information:\n- Title: ${title}\n- Category: ${category || 'Not specified'}\n- Description: ${description}\n\nFocus on keywords that are:\n1. Relevant to the product\n2. Commonly used in search queries\n3. Specific enough to be meaningful\n4. Broad enough to capture search volume\n\nInclude a mix of short-tail and long-tail keywords.\n\nReturn only a JSON array like: [\"keyword 1\", \"keyword 2\", \"keyword 3\"]`\n\n    try {\n      const response = await openai.chat.completions.create({\n        model: \"gpt-3.5-turbo\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are an SEO specialist who generates relevant keywords for product optimization.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        max_tokens: 200,\n        temperature: 0.6,\n      })\n\n      const content = response.choices[0]?.message?.content || \"[]\"\n      let keywords: string[] = []\n      \n      try {\n        keywords = JSON.parse(content)\n        if (!Array.isArray(keywords)) {\n          keywords = []\n        }\n      } catch {\n        keywords = []\n      }\n\n      const usage: AIUsage = {\n        promptTokens: response.usage?.prompt_tokens || 0,\n        completionTokens: response.usage?.completion_tokens || 0,\n        totalTokens: response.usage?.total_tokens || 0,\n      }\n\n      await this.trackUsage(userId, usage)\n      \n      return { keywords, usage }\n    } catch (error) {\n      console.error('OpenAI API error:', error)\n      throw new Error(`Failed to generate keywords: ${error instanceof Error ? error.message : 'Unknown error'}`)\n    }\n  }\n\n  async generateText(\n    prompt: string,\n    maxTokens: number = 100\n  ): Promise<string> {\n    try {\n      const completion = await openai.chat.completions.create({\n        model: \"gpt-3.5-turbo\",\n        messages: [\n          {\n            role: \"user\",\n            content: prompt,\n          },\n        ],\n        max_tokens: maxTokens,\n        temperature: 0.7,\n      })\n\n      const response = completion.choices[0]?.message?.content || ''\n      return response.trim()\n    } catch (error) {\n      console.error('OpenAI API error:', error)\n      throw new Error(`Failed to generate text: ${error instanceof Error ? error.message : 'Unknown error'}`)\n    }\n  }\n}\n", "import { AIClient } from './aiClient'\nimport { ShopifyProduct } from './shopifySync'\nimport { OpenAISpecProduct } from './openaiSpec'\nimport { db } from './db'\n\n\nexport interface EnrichmentResult {\n  originalProduct: ShopifyProduct\n  enrichedSpec: OpenAISpecProduct\n  improvements: EnrichmentImprovement[]\n  totalUsage: number\n  errors: string[]\n}\n\nexport interface EnrichmentImprovement {\n  field: string\n  originalValue: any\n  newValue: any\n  improvement: string\n}\n\nexport interface EnrichmentOptions {\n  enrichDescription?: boolean\n  inferMaterial?: boolean\n  generateUseCases?: boolean\n  generateFeatures?: boolean\n  generateKeywords?: boolean\n}\n\nexport class AIEnrichmentService {\n  private aiClient: AIClient\n\n  constructor() {\n    this.aiClient = new AIClient()\n  }\n\n  async enrichProduct(\n    userId: string,\n    product: ShopifyProduct,\n    gaps: string[] = []\n  ): Promise<EnrichmentResult> {\n    const improvements: EnrichmentImprovement[] = []\n    const errors: string[] = []\n    let totalUsage = 0\n\n    // Start with basic mapping\n    const baseSpec: OpenAISpecProduct = {\n      title: product.title || '',\n      description: product.description || '',\n      price: product.variants[0]?.price ? `${product.variants[0].price} USD` : '0.00 USD',\n      availability: this.getAvailabilityStatus(product.variants),\n      category: product.productType || 'Uncategorized',\n      sku: product.variants[0]?.sku,\n      image_urls: product.images.map(img => img.url),\n      vendor: product.vendor,\n    }\n\n    console.log('\uD83C\uDFAF Enriching product for gaps:', gaps)\n\n    // Dynamic gap-driven enrichment\n    for (const gap of gaps) {\n      try {\n        const result = await this.generateRecommendationForGap(gap, baseSpec, userId)\n        if (result) {\n          improvements.push(result)\n          totalUsage += result.newValue?.length || 0\n        }\n      } catch (error) {\n        errors.push(`Failed to generate recommendation for ${gap}: ${error instanceof Error ? error.message : 'Unknown error'}`)\n      }\n    }\n\n    return {\n      originalProduct: product,\n      enrichedSpec: baseSpec,\n      improvements,\n      totalUsage,\n      errors\n    }\n  }\n\n  private async generateRecommendationForGap(\n    gap: string,\n    baseSpec: OpenAISpecProduct,\n    userId: string\n  ): Promise<EnrichmentImprovement | null> {\n    // Fields that require actual product specifications from the brand/customer\n    // AI cannot make up factual product data like dimensions, weight, UPC, etc.\n    const customerInputFields = [\n      'material', 'dimensions', 'weight', 'color', 'size', 'model', 'brand', 'vendor',\n      'upc', 'age_range', 'gender', 'compatibility', 'specifications', \n      'video_urls', 'documentation_url', 'return_policy', 'shipping_info'\n    ]\n    \n    if (customerInputFields.includes(gap)) {\n      return {\n        field: gap,\n        originalValue: (baseSpec as any)[gap] || null,\n        newValue: 'Need Customer Input',\n        improvement: `This field requires actual product specifications from the brand/manufacturer`\n      }\n    }\n\n    // Fields that AI can generate (marketing content, suggestions)\n    const fieldMappings = {\n      description: {\n        prompt: `Given the product title \"${baseSpec.title}\", generate a comprehensive and engaging product description. Highlight its key features, benefits, and target audience. Aim for a length of at least 200 words. Current description: \"${baseSpec.description || 'No description'}\"`,\n        maxTokens: 500,\n        reason: 'Generated comprehensive product description'\n      },\n      use_cases: {\n        prompt: `Given the product title \"${baseSpec.title}\" and description \"${baseSpec.description}\", generate a comma-separated list of 3-5 practical use cases or scenarios where this product would be ideal. Focus on how a customer would use it.`,\n        maxTokens: 100,\n        reason: 'Generated practical use cases'\n      },\n      features: {\n        prompt: `Given the product title \"${baseSpec.title}\" and description \"${baseSpec.description}\", generate a bulleted list of 3-5 key features of the product. Focus on unique selling points and technical specifications.`,\n        maxTokens: 150,\n        reason: 'Generated key product features'\n      },\n      keywords: {\n        prompt: `Given the product title \"${baseSpec.title}\" and description \"${baseSpec.description}\", generate a comma-separated list of relevant keywords for SEO and search. Focus on terms a customer would use to find this product. Do not include the product title itself as a keyword.`,\n        maxTokens: 100,\n        reason: 'Generated SEO keywords'\n      },\n      target_audience: {\n        prompt: `Given the product title \"${baseSpec.title}\" and description \"${baseSpec.description}\", suggest the primary target audience for this product (e.g., 'Beginner snowboarders', 'Professional athletes', 'Casual users').`,\n        maxTokens: 50,\n        reason: 'Suggested target audience'\n      },\n      sku: {\n        prompt: `Given the product title \"${baseSpec.title}\", description \"${baseSpec.description}\", and current SKU \"${baseSpec.sku || 'N/A'}\", suggest a concise SKU for the product if it's missing or generic. If a good SKU exists, state 'N/A'.`,\n        maxTokens: 20,\n        reason: 'Suggested concise SKU'\n      },\n      tags: {\n        prompt: `Given the product title \"${baseSpec.title}\" and description \"${baseSpec.description}\", generate a comma-separated list of relevant tags for product categorization and search. Focus on broad categories and attributes.`,\n        maxTokens: 100,\n        reason: 'Generated relevant tags'\n      },\n      warranty: {\n        prompt: `Given the product title \"${baseSpec.title}\" and description \"${baseSpec.description}\", suggest typical warranty information for this type of product (e.g., '1-year limited warranty', 'Manufacturer warranty applies').`,\n        maxTokens: 50,\n        reason: 'Suggested warranty information'\n      },\n      ai_search_queries: {\n        prompt: `Given the product title \"${baseSpec.title}\" and description \"${baseSpec.description}\", generate 5-7 example search queries that customers might use to find this product when using AI search or voice search. Focus on natural language queries.`,\n        maxTokens: 150,\n        reason: 'Generated AI search query examples'\n      },\n      semantic_description: {\n        prompt: `Given the product title \"${baseSpec.title}\" and description \"${baseSpec.description}\", create a concise semantic description optimized for AI understanding. Focus on key attributes, use cases, and context in 2-3 sentences.`,\n        maxTokens: 150,\n        reason: 'Generated AI-optimized semantic description'\n      },\n      image_urls: {\n        prompt: `Note: Image URLs cannot be generated by AI. This field requires actual product images to be uploaded to Shopify.`,\n        maxTokens: 10,\n        reason: 'Images require manual upload'\n      }\n    }\n\n    const mapping = fieldMappings[gap as keyof typeof fieldMappings]\n    if (!mapping) {\n      console.log(`\u26A0\uFE0F No mapping found for gap: ${gap}`)\n      return null\n    }\n\n    try {\n      const aiResponse = await this.aiClient.generateText(mapping.prompt, mapping.maxTokens)\n      \n      console.log(`\uD83E\uDD16 AI Response for ${gap}:`, aiResponse)\n      \n      // Filter out empty responses, errors, or N/A responses (not useful)\n      if (\n        aiResponse && \n        aiResponse.trim() !== '' && \n        !aiResponse.toLowerCase().includes('error') &&\n        aiResponse.trim().toLowerCase() !== 'n/a'\n      ) {\n        return {\n          field: gap,\n          originalValue: baseSpec[gap as keyof OpenAISpecProduct] || null,\n          newValue: aiResponse,\n          improvement: mapping.reason\n        }\n      } else {\n        console.log(`\u26A0\uFE0F Skipping ${gap}: Response was empty, N/A, or contained error`)\n      }\n    } catch (error) {\n      console.error(`Error generating recommendation for ${gap}:`, error)\n    }\n\n    return null\n  }\n\n  async enrichProducts(\n    userId: string,\n    products: ShopifyProduct[],\n    options: EnrichmentOptions = {}\n  ): Promise<EnrichmentResult[]> {\n    const results: EnrichmentResult[] = []\n    \n    for (const product of products) {\n      try {\n        // For batch processing, get gaps from health score system\n        const { mapShopifyToSpec, calculateProductScore } = await import('./fieldMapper')\n        const spec = mapShopifyToSpec(product)\n        const scoreData = calculateProductScore(spec)\n        const gaps = scoreData.gaps\n        \n        console.log(`\uD83C\uDFAF Enriching product ${product.title} with gaps:`, gaps)\n        \n        // Call the single product enrichment method with gaps\n        const result = await this.enrichProduct(userId, product, gaps)\n        results.push(result)\n      } catch (error) {\n        console.error(`Failed to enrich product ${product.title}:`, error)\n        results.push({\n          originalProduct: product,\n          enrichedSpec: {} as any,\n          improvements: [],\n          totalUsage: 0,\n          errors: [`Failed to enrich product: ${error instanceof Error ? error.message : 'Unknown error'}`]\n        })\n      }\n    }\n    \n    return results\n  }\n\n  async applyEnrichmentToShopify(\n    userId: string,\n    shopDomain: string,\n    accessToken: string,\n    enrichmentResult: EnrichmentResult\n  ): Promise<boolean> {\n    try {\n      console.log('\uD83D\uDD04 Applying enrichment to Shopify with improvements:', enrichmentResult.improvements.length)\n      \n      // Process each approved improvement\n      for (const improvement of enrichmentResult.improvements) {\n        const { field, newValue } = improvement\n        console.log(`\uD83D\uDCDD Applying ${field}: ${newValue}`)\n\n        if (field === 'description') {\n          // Update the main product description\n          await this.updateProductDescription(\n            shopDomain,\n            accessToken,\n            enrichmentResult.originalProduct.id,\n            newValue\n          )\n          console.log('\u2705 Updated product description')\n        } else {\n          // Create/update metafield for other fields\n          const metafieldType = this.getMetafieldType(field, newValue)\n          const metafieldValue = this.formatMetafieldValue(field, newValue)\n          \n          console.log(`\uD83D\uDCDD Creating metafield:`, {\n            namespace: 'catalogai',\n            key: field,\n            type: metafieldType,\n            originalValue: newValue,\n            formattedValue: metafieldValue,\n            valueType: typeof newValue\n          })\n          \n          await this.createProductMetafield(\n            shopDomain,\n            accessToken,\n            enrichmentResult.originalProduct.id,\n            {\n              namespace: 'catalogai',\n              key: field,\n              value: metafieldValue,\n              type: metafieldType\n            }\n          )\n          console.log(`\u2705 Updated metafield: catalogai.${field}`)\n        }\n      }\n\n\n      // Log the enrichment\n      await db.log.create({\n        data: {\n          userId,\n          type: 'enrichment',\n          message: `Applied AI enrichment to product: ${enrichmentResult.originalProduct.title}`,\n          metadata: {\n            productId: enrichmentResult.originalProduct.id,\n            improvements: enrichmentResult.improvements.length,\n            usage: enrichmentResult.totalUsage,\n            timestamp: new Date().toISOString(),\n          },\n        },\n      })\n\n      return true\n    } catch (error) {\n      console.error('Failed to apply enrichment to Shopify:', error)\n      \n      await db.log.create({\n        data: {\n          userId,\n          type: 'error',\n          message: `Failed to apply enrichment to Shopify: ${error instanceof Error ? error.message : 'Unknown error'}`,\n          error: error instanceof Error ? error.stack : String(error),\n          metadata: {\n            productId: enrichmentResult.originalProduct.id,\n            timestamp: new Date().toISOString(),\n          },\n        },\n      })\n\n      return false\n    }\n  }\n\n  private getMetafieldType(field: string, value: any): string {\n    // Determine the appropriate Shopify metafield type based on field and value\n    if (field === 'dimensions') {\n      return 'json' // Dimensions are typically objects\n    }\n    \n    if (['use_cases', 'features', 'keywords', 'ai_search_queries'].includes(field)) {\n      return 'json' // These are typically arrays\n    }\n    \n    if (['weight', 'price'].includes(field)) {\n      return 'number_decimal'\n    }\n    \n    if (field === 'availability') {\n      return 'single_line_text_field'\n    }\n    \n    // Default to single line text for most fields\n    return 'single_line_text_field'\n  }\n\n  private formatMetafieldValue(field: string, value: any): string {\n    // Format the value appropriately for Shopify metafields\n    if (typeof value === 'object') {\n      return JSON.stringify(value)\n    }\n    \n    if (Array.isArray(value)) {\n      return JSON.stringify(value)\n    }\n    \n    // For fields that should be arrays but are strings (AI generated text with bullet points)\n    if (['use_cases', 'features', 'keywords', 'ai_search_queries', 'tags'].includes(field)) {\n      // Convert bullet-pointed or comma-separated text into JSON array\n      const stringValue = String(value)\n      \n      // Check if it's bullet-pointed text (e.g., \"- Item 1\\n- Item 2\")\n      if (stringValue.includes('\\n-') || stringValue.startsWith('-')) {\n        const items = stringValue\n          .split('\\n')\n          .map(line => line.replace(/^[-\u2022*]\\s*/, '').trim())\n          .filter(Boolean)\n        return JSON.stringify(items)\n      }\n      \n      // Check if it's comma-separated\n      if (stringValue.includes(',')) {\n        const items = stringValue.split(',').map(item => item.trim()).filter(Boolean)\n        return JSON.stringify(items)\n      }\n      \n      // Single value - wrap in array\n      return JSON.stringify([stringValue])\n    }\n    \n    return String(value)\n  }\n\n  private getAvailabilityStatus(variants: ShopifyProduct['variants']): \"in_stock\" | \"out_of_stock\" | \"pre_order\" | \"discontinued\" {\n    if (variants.length === 0) return 'out_of_stock'\n    \n    const hasAvailable = variants.some(v => v.availableForSale && (v.inventoryQuantity || 0) > 0)\n    const hasInventory = variants.some(v => (v.inventoryQuantity || 0) > 0)\n    \n    if (hasAvailable) return 'in_stock'\n    if (hasInventory && !hasAvailable) return 'pre_order'\n    return 'out_of_stock'\n  }\n\n  private getMetafieldValue(metafields: ShopifyProduct['metafields'], key: string): string | undefined {\n    const metafield = metafields.find(m => \n      m.key === key || m.key.toLowerCase().includes(key.toLowerCase())\n    )\n    return metafield?.value\n  }\n\n  private getMetafieldArray(metafields: ShopifyProduct['metafields'], key: string): string[] | undefined {\n    const value = this.getMetafieldValue(metafields, key)\n    if (!value) return undefined\n    \n    try {\n      const parsed = JSON.parse(value)\n      if (Array.isArray(parsed)) {\n        return parsed.filter(item => typeof item === 'string')\n      }\n    } catch {\n      return value.split(/[,;|]/).map(item => item.trim()).filter(Boolean)\n    }\n    \n    return undefined\n  }\n\n  private async updateProductDescription(\n    shopDomain: string,\n    accessToken: string,\n    productId: string,\n    description: string\n  ): Promise<void> {\n    const mutation = `\n      mutation productUpdate($input: ProductInput!) {\n        productUpdate(input: $input) {\n          product {\n            id\n            title\n            descriptionHtml\n          }\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n    `\n\n    const variables = {\n      input: {\n        id: `gid://shopify/Product/${productId}`,\n        descriptionHtml: description\n      }\n    }\n\n    const response = await fetch(`https://${shopDomain}/admin/api/2025-10/graphql`, {\n      method: 'POST',\n      headers: {\n        'X-Shopify-Access-Token': accessToken,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        query: mutation,\n        variables,\n      }),\n    })\n\n    if (!response.ok) {\n      throw new Error(`Failed to update product description: ${response.status}`)\n    }\n\n    const result = await response.json()\n    if (result.errors) {\n      throw new Error(`GraphQL errors: ${JSON.stringify(result.errors)}`)\n    }\n    \n    if (result.data?.productUpdate?.userErrors?.length > 0) {\n      throw new Error(`Shopify validation errors: ${JSON.stringify(result.data.productUpdate.userErrors)}`)\n    }\n  }\n\n  private async createProductMetafield(\n    shopDomain: string,\n    accessToken: string,\n    productId: string,\n    metafield: {\n      namespace: string\n      key: string\n      value: string\n      type: string\n    }\n  ): Promise<void> {\n    const mutation = `\n      mutation metafieldsSet($metafields: [MetafieldsSetInput!]!) {\n        metafieldsSet(metafields: $metafields) {\n          metafields {\n            id\n            namespace\n            key\n            value\n          }\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n    `\n\n    const variables = {\n      metafields: [\n        {\n          ownerId: `gid://shopify/Product/${productId}`,\n          namespace: metafield.namespace,\n          key: metafield.key,\n          value: metafield.value,\n          type: metafield.type,\n        }\n      ]\n    }\n\n    const response = await fetch(`https://${shopDomain}/admin/api/2025-10/graphql`, {\n      method: 'POST',\n      headers: {\n        'X-Shopify-Access-Token': accessToken,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        query: mutation,\n        variables,\n      }),\n    })\n\n    if (!response.ok) {\n      throw new Error(`Failed to create metafield: ${response.status}`)\n    }\n\n    const result = await response.json()\n    if (result.errors) {\n      throw new Error(`GraphQL errors: ${JSON.stringify(result.errors)}`)\n    }\n  }\n}\n", "import { PassThrough } from \"node:stream\"\nimport type { EntryContext } from \"@remix-run/node\"\nimport { createReadableStreamFromReadable } from \"@remix-run/node\"\nimport { RemixServer } from \"@remix-run/react\"\nimport { isbot } from \"isbot\"\nimport { renderToPipeableStream } from \"react-dom/server\"\nimport { scheduleHealthChecks, scheduleDailyHealthScans } from \"./utils/queue\"\n\nconst ABORT_DELAY = 5_000\n\n// Initialize health checks on server start (only if Redis is configured)\nif (typeof global !== 'undefined' && !global.healthChecksInitialized) {\n  console.log('Checking Redis configuration:', {\n    redisHost: process.env.REDIS_HOST,\n    redisPort: process.env.REDIS_PORT,\n    hasRedisPassword: !!process.env.REDIS_PASSWORD,\n    allEnvVars: Object.keys(process.env).filter(key => key.startsWith('REDIS'))\n  })\n  \n  if (process.env.REDIS_HOST && process.env.REDIS_PASSWORD) {\n    console.log('Redis configuration found - initializing health checks')\n    scheduleHealthChecks().catch((error) => {\n      console.error('Failed to initialize health checks:', error)\n    })\n    \n    // Schedule daily health scans for all users\n    scheduleDailyHealthScans().catch((error) => {\n      console.error('Failed to schedule daily health scans:', error)\n    })\n  } else {\n    console.log('Health checks skipped - Redis not configured')\n  }\n  global.healthChecksInitialized = true\n}\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext,\n) {\n  return isbot(request.headers.get(\"user-agent\"))\n    ? handleBotRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext,\n      )\n    : handleBrowserRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext,\n      )\n}\n\nfunction handleBotRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext,\n) {\n  return new Promise((resolve, reject) => {\n    let shellRendered = false\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer\n        context={remixContext}\n        url={request.url}\n        abortDelay={ABORT_DELAY}\n      />,\n      {\n        onAllReady() {\n          shellRendered = true\n          const body = new PassThrough()\n          const stream = createReadableStreamFromReadable(body)\n\n          responseHeaders.set(\"Content-Type\", \"text/html\")\n          responseHeaders.set(\"X-Frame-Options\", \"ALLOWALL\")\n          responseHeaders.set(\"Content-Security-Policy\", \"frame-ancestors https://*.myshopify.com https://admin.shopify.com\")\n\n          resolve(\n            new Response(stream, {\n              headers: responseHeaders,\n              status: responseStatusCode,\n            }),\n          )\n\n          pipe(body)\n        },\n        onShellError(error: unknown) {\n          reject(error)\n        },\n        onError(error: unknown) {\n          responseStatusCode = 500\n          // Log streaming rendering errors from inside the shell.  Don't log\n          // errors encountered during initial shell rendering since they'll\n          // reject and get logged in handleDocumentRequest.\n          if (shellRendered) {\n            console.error(error)\n          }\n        },\n      },\n    )\n\n    setTimeout(abort, ABORT_DELAY)\n  })\n}\n\nfunction handleBrowserRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext,\n) {\n  return new Promise((resolve, reject) => {\n    let shellRendered = false\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer\n        context={remixContext}\n        url={request.url}\n        abortDelay={ABORT_DELAY}\n      />,\n      {\n        onShellReady() {\n          shellRendered = true\n          const body = new PassThrough()\n          const stream = createReadableStreamFromReadable(body)\n\n          responseHeaders.set(\"Content-Type\", \"text/html\")\n          responseHeaders.set(\"X-Frame-Options\", \"ALLOWALL\")\n          responseHeaders.set(\"Content-Security-Policy\", \"frame-ancestors https://*.myshopify.com https://admin.shopify.com\")\n\n          resolve(\n            new Response(stream, {\n              headers: responseHeaders,\n              status: responseStatusCode,\n            }),\n          )\n\n          pipe(body)\n        },\n        onShellError(error: unknown) {\n          reject(error)\n        },\n        onError(error: unknown) {\n          responseStatusCode = 500\n          // Log streaming rendering errors from inside the shell.  Don't log\n          // errors encountered during initial shell rendering since they'll\n          // reject and get logged in handleDocumentRequest.\n          if (shellRendered) {\n            console.error(error)\n          }\n        },\n      },\n    )\n\n    setTimeout(abort, ABORT_DELAY)\n  })\n}\n", "/**\n * BullMQ Queue Configuration for Health Checks and Background Jobs\n */\n\nimport { Queue, Worker, QueueEvents } from 'bullmq'\nimport { Redis } from 'ioredis'\nimport { db } from './db'\nimport { HealthCheckerService } from './healthChecker'\nimport { emailService } from './emailService'\nimport { analyticsService } from './analyticsService'\n\n// Redis connection configuration\nlet redis: Redis | null = null\n\ntry {\n  // Debug environment variables\n  console.log('Checking Redis configuration:', {\n    redisHost: process.env.REDIS_HOST,\n    redisPort: process.env.REDIS_PORT,\n    hasRedisPassword: !!process.env.REDIS_PASSWORD,\n    allEnvVars: Object.keys(process.env).filter(key => key.startsWith('REDIS'))\n  })\n\n  // Try REDIS_URL first (full connection string), then fall back to individual variables\n  if (process.env.REDIS_URL) {\n    console.log('Attempting Redis connection using REDIS_URL:', process.env.REDIS_URL.replace(/\\/\\/default:[^@]+@/, '//default:***@'))\n    redis = new Redis(process.env.REDIS_URL, {\n      maxRetriesPerRequest: null, // Required by BullMQ for blocking operations\n      connectTimeout: 5000, // 5 second timeout\n      lazyConnect: true, // Don't connect immediately\n      db: 0, // Force database 0 (default)\n    })\n  } else if (process.env.REDIS_HOST && process.env.REDIS_PASSWORD) {\n    console.log('Attempting Redis connection to:', process.env.REDIS_HOST)\n    redis = new Redis({\n      host: process.env.REDIS_HOST,\n      port: parseInt(process.env.REDIS_PORT || '6379'),\n      password: process.env.REDIS_PASSWORD,\n      maxRetriesPerRequest: null, // Required by BullMQ for blocking operations\n      connectTimeout: 5000, // 5 second timeout\n      lazyConnect: true, // Don't connect immediately\n      db: 0, // Force database 0 (default)\n    })\n  } else {\n    console.log('Redis not configured - skipping connection')\n  }\n  \n  if (redis) {\n    // Test the connection\n    redis.connect().then(() => {\n      console.log('\u2705 Redis connected successfully')\n    }).catch((error) => {\n      console.error('\u274C Redis connection failed:', error.message)\n      redis = null\n    })\n  }\n} catch (error) {\n  console.error('Failed to initialize Redis connection:', error)\n  redis = null\n}\n\n// Create separate Redis connection instances for each BullMQ component\n// This ensures each component uses database 0 explicitly\nlet bullmqQueueConnection: Redis | null = null\nlet bullmqWorkerConnection: Redis | null = null\nlet bullmqEventsConnection: Redis | null = null\n\nif (redis) {\n  try {\n    // Create Redis connection configuration\n    let connectionConfig: any = null\n    \n    if (process.env.REDIS_URL) {\n      // Clean the REDIS_URL (remove any trailing quotes)\n      const cleanRedisUrl = process.env.REDIS_URL.replace(/['\"]+$/, '')\n      console.log('Cleaned REDIS_URL:', cleanRedisUrl.replace(/\\/\\/default:[^@]+@/, '//default:***@'))\n      \n      // Parse REDIS_URL to extract connection details\n      const url = new URL(cleanRedisUrl)\n      connectionConfig = {\n        host: url.hostname,\n        port: parseInt(url.port) || 6379,\n        password: url.password,\n        db: 0, // Explicitly force database 0\n        maxRetriesPerRequest: null,\n        retryDelayOnFailover: 100,\n        connectTimeout: 5000,\n        lazyConnect: true,\n        enableAutoPipelining: false,\n      }\n    } else if (process.env.REDIS_HOST && process.env.REDIS_PASSWORD) {\n      connectionConfig = {\n        host: process.env.REDIS_HOST,\n        port: parseInt(process.env.REDIS_PORT || '6379'),\n        password: process.env.REDIS_PASSWORD,\n        db: 0, // Explicitly force database 0\n        maxRetriesPerRequest: null,\n        retryDelayOnFailover: 100,\n        connectTimeout: 5000,\n        lazyConnect: true,\n        enableAutoPipelining: false,\n      }\n    }\n    \n    if (connectionConfig) {\n      // Create separate Redis instances for each BullMQ component\n      bullmqQueueConnection = new Redis(connectionConfig)\n      bullmqWorkerConnection = new Redis(connectionConfig)\n      bullmqEventsConnection = new Redis(connectionConfig)\n      \n      // Add connection monitoring\n      bullmqQueueConnection.on('connect', () => {\n        console.log('BullMQ Queue Redis connected to database:', bullmqQueueConnection?.options.db)\n      })\n      \n      bullmqWorkerConnection.on('connect', () => {\n        console.log('BullMQ Worker Redis connected to database:', bullmqWorkerConnection?.options.db)\n      })\n      \n      bullmqEventsConnection.on('connect', () => {\n        console.log('BullMQ Events Redis connected to database:', bullmqEventsConnection?.options.db)\n      })\n      \n      console.log('BullMQ Redis connections created with database 0')\n    }\n  } catch (error) {\n    console.error('Failed to create BullMQ Redis connections:', error)\n    bullmqQueueConnection = null\n    bullmqWorkerConnection = null\n    bullmqEventsConnection = null\n  }\n}\n\n// Health check queue (only if BullMQ queue connection is available)\nexport const healthCheckQueue = bullmqQueueConnection ? new Queue('health-checks', {\n  connection: bullmqQueueConnection,\n  defaultJobOptions: {\n    removeOnComplete: 10,\n    removeOnFail: 5,\n    attempts: 3,\n    backoff: {\n      type: 'exponential',\n      delay: 2000,\n    },\n  },\n}) : null\n\n// Background jobs queue (only if BullMQ queue connection is available)\nexport const backgroundJobsQueue = bullmqQueueConnection ? new Queue('background-jobs', {\n  connection: bullmqQueueConnection,\n  defaultJobOptions: {\n    removeOnComplete: 50,\n    removeOnFail: 10,\n    attempts: 2,\n    backoff: {\n      type: 'exponential',\n      delay: 5000,\n    },\n  },\n}) : null\n\n// Queue events for monitoring (only if BullMQ events connection is available)\nexport const queueEvents = bullmqEventsConnection ? new QueueEvents('health-checks', { connection: bullmqEventsConnection }) : null\n\n// Health check worker (only if BullMQ worker connection is available)\nexport const healthCheckWorker = bullmqWorkerConnection ? new Worker(\n  'health-checks',\n  async (job) => {\n    const { type, data} = job.data\n    \n    switch (type) {\n      case 'url-ping':\n        return await performUrlPing(data)\n      case 'inventory-validation':\n        return await performInventoryValidation(data)\n      case 'database-health':\n        return await performDatabaseHealthCheck(data)\n      case 'api-status':\n        return await performApiStatusCheck(data)\n      case 'health-scan':\n        return await performHealthScan(data)\n      default:\n        throw new Error(`Unknown health check type: ${type}`)\n    }\n  },\n  {\n    connection: bullmqWorkerConnection,\n    concurrency: 5,\n  }\n) : null\n\n// Background jobs worker (only if BullMQ worker connection is available)\nexport const backgroundJobsWorker = bullmqWorkerConnection ? new Worker(\n  'background-jobs',\n  async (job) => {\n    const { type, data } = job.data\n    \n    switch (type) {\n      case 'sync-products':\n        return await performProductSync(data)\n      case 'ai-enrichment':\n        return await performAIEnrichment(data)\n      case 'cleanup-logs':\n        return await performLogCleanup(data)\n      case 'weekly-email-summary':\n        return await performWeeklyEmailSummary(data)\n      default:\n        throw new Error(`Unknown background job type: ${type}`)\n    }\n  },\n  {\n    connection: bullmqWorkerConnection,\n    concurrency: 3,\n  }\n) : null\n\n// Health check functions\nasync function performUrlPing(data: { url: string; timeout?: number }) {\n  try {\n    const response = await fetch(data.url, {\n      method: 'HEAD',\n      signal: AbortSignal.timeout(data.timeout || 5000),\n    })\n    \n    return {\n      success: response.ok,\n      status: response.status,\n      responseTime: Date.now(),\n      url: data.url,\n    }\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error',\n      url: data.url,\n    }\n  }\n}\n\nasync function performInventoryValidation(data: { shopId: string }) {\n  try {\n    // Check if user exists and has products\n    const user = await db.user.findUnique({\n      where: { shopId: data.shopId },\n      include: {\n        audits: {\n          orderBy: { timestamp: 'desc' },\n          take: 1,\n        },\n      },\n    })\n\n    if (!user) {\n      return {\n        success: false,\n        error: 'User not found',\n        shopId: data.shopId,\n      }\n    }\n\n    const latestAudit = user.audits[0]\n    const hasRecentSync = latestAudit && \n      (Date.now() - new Date(latestAudit.timestamp).getTime()) < 24 * 60 * 60 * 1000 // 24 hours\n\n    return {\n      success: true,\n      hasRecentSync,\n      totalProducts: latestAudit?.totalProducts || 0,\n      lastSync: latestAudit?.timestamp || null,\n      shopId: data.shopId,\n    }\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Database error',\n      shopId: data.shopId,\n    }\n  }\n}\n\nasync function performDatabaseHealthCheck(data: { shopId?: string }) {\n  try {\n    // Test database connectivity\n    await db.$queryRaw`SELECT 1`\n    \n    // Check if we can read user data\n    const userCount = await db.user.count()\n    \n    return {\n      success: true,\n      userCount,\n      timestamp: new Date().toISOString(),\n    }\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Database connection failed',\n    }\n  }\n}\n\nasync function performApiStatusCheck(data: { shopId: string }) {\n  try {\n    // This would check Shopify API connectivity\n    // For now, return a mock response\n    return {\n      success: true,\n      shopId: data.shopId,\n      apiVersion: '2025-10',\n      timestamp: new Date().toISOString(),\n    }\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'API check failed',\n      shopId: data.shopId,\n    }\n  }\n}\n\n// Background job functions\nasync function performProductSync(data: { shopId: string; userId: string }) {\n  try {\n    // This would trigger actual product sync\n    // For now, log the request\n    await db.log.create({\n      data: {\n        userId: data.userId,\n        type: 'sync',\n        message: `Product sync initiated for shop ${data.shopId}`,\n      },\n    })\n\n    return {\n      success: true,\n      shopId: data.shopId,\n      timestamp: new Date().toISOString(),\n    }\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Sync failed',\n      shopId: data.shopId,\n    }\n  }\n}\n\nasync function performAIEnrichment(data: { shopId: string; userId: string; productIds: string[] }) {\n  try {\n    // This would trigger AI enrichment\n    await db.log.create({\n      data: {\n        userId: data.userId,\n        type: 'ai_enrichment',\n        message: `AI enrichment initiated for ${data.productIds.length} products`,\n      },\n    })\n\n    return {\n      success: true,\n      shopId: data.shopId,\n      productCount: data.productIds.length,\n      timestamp: new Date().toISOString(),\n    }\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'AI enrichment failed',\n      shopId: data.shopId,\n    }\n  }\n}\n\nasync function performLogCleanup(data: { daysToKeep?: number }) {\n  try {\n    const daysToKeep = data.daysToKeep || 30\n    const cutoffDate = new Date()\n    cutoffDate.setDate(cutoffDate.getDate() - daysToKeep)\n\n    const deletedCount = await db.log.deleteMany({\n      where: {\n        createdAt: {\n          lt: cutoffDate,\n        },\n      },\n    })\n\n    return {\n      success: true,\n      deletedCount: deletedCount.count,\n      cutoffDate: cutoffDate.toISOString(),\n    }\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Log cleanup failed',\n    }\n  }\n}\n\nasync function performHealthScan(data: { shopId: string; userId: string; options?: any }) {\n  try {\n    // Get user details for access token\n    const user = await db.user.findUnique({\n      where: { shopId: data.shopId }\n    })\n\n    if (!user) {\n      throw new Error('User not found')\n    }\n\n    // Create health checker service\n    const healthChecker = new HealthCheckerService(data.shopId, user.accessToken)\n    \n    // Perform comprehensive health scan\n    const result = await healthChecker.performHealthCheck(data.options || {\n      maxProducts: 100,\n      includePings: true,\n      includeInventory: true,\n      includeValidation: true\n    })\n\n    // Log the scan\n    await db.log.create({\n      data: {\n        userId: data.userId,\n        type: 'health_scan',\n        message: `Health scan completed: ${result.score}% score, ${result.gaps.length} gaps found`,\n        metadata: {\n          score: result.score,\n          totalProducts: result.totalProducts,\n          validProducts: result.validProducts,\n          gapsCount: result.gaps.length\n        }\n      }\n    })\n\n    // Auto-fix if gaps > 10% and score < 90%\n    if (result.score < 90 && result.gaps.length > 0) {\n      const fixableGaps = result.gaps.filter(gap => gap.fixable)\n      if (fixableGaps.length > 0) {\n        const fixResult = await healthChecker.autoFixGaps(fixableGaps)\n        \n        await db.log.create({\n          data: {\n            userId: data.userId,\n            type: 'auto_fix',\n            message: `Auto-fixed ${fixResult.fixed} gaps, ${fixResult.failed} failed`,\n            metadata: {\n              fixed: fixResult.fixed,\n              failed: fixResult.failed,\n              originalScore: result.score\n            }\n          }\n        })\n\n        // Track auto-fix performance metrics\n        const user = await db.user.findUnique({\n          where: { id: data.userId }\n        })\n\n        if (user) {\n          await analyticsService.trackPerformanceMetrics({\n            userId: data.userId,\n            shopDomain: data.shopId,\n            timestamp: new Date(),\n            healthScore: result.score,\n            totalProducts: result.totalProducts,\n            validProducts: result.validProducts,\n            issuesFound: result.gaps.length,\n            issuesFixed: fixResult.fixed,\n            aiUsage: user.aiUsage,\n            syncCount: 0,\n            enrichmentCount: 0\n          })\n        }\n      }\n    }\n\n    return {\n      success: true,\n      result,\n      shopId: data.shopId,\n      timestamp: new Date().toISOString(),\n    }\n  } catch (error) {\n    await db.log.create({\n      data: {\n        userId: data.userId,\n        type: 'error',\n        message: `Health scan failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }\n    })\n\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Health scan failed',\n      shopId: data.shopId,\n    }\n  }\n}\n\n// Schedule recurring health checks\nexport async function scheduleHealthChecks() {\n  if (!healthCheckQueue || !backgroundJobsQueue) {\n    console.log('Health checks skipped - queues not available')\n    return\n  }\n\n  try {\n    // Database health check every 5 minutes\n    await healthCheckQueue.add(\n      'database-health',\n      {},\n      {\n        repeat: { pattern: '*/5 * * * *' },\n        jobId: 'database-health-recurring',\n      }\n    )\n\n    // URL ping every 2 minutes\n    await healthCheckQueue.add(\n      'url-ping',\n      { url: process.env.SHOPIFY_APP_URL + '/health' },\n      {\n        repeat: { pattern: '*/2 * * * *' },\n        jobId: 'url-ping-recurring',\n      }\n    )\n\n    // Log cleanup daily at 2 AM\n    await backgroundJobsQueue.add(\n      'cleanup-logs',\n      { daysToKeep: 30 },\n      {\n        repeat: { pattern: '0 2 * * *' },\n        jobId: 'log-cleanup-recurring',\n      }\n    )\n\n    // Weekly email summaries every Monday at 8 AM\n    await backgroundJobsQueue.add(\n      'weekly-email-summary',\n      {},\n      {\n        repeat: { pattern: '0 8 * * 1' },\n        jobId: 'weekly-email-summary-recurring',\n      }\n    )\n    \n    console.log('Health checks scheduled successfully')\n  } catch (error) {\n    console.error('Failed to schedule health checks:', error)\n  }\n}\n\nasync function performWeeklyEmailSummary(data: { shopId?: string; userId?: string }) {\n  try {\n    // Get all users or specific user\n    const users = data.userId ? \n      [await db.user.findUnique({ where: { id: data.userId } })] :\n      await db.user.findMany()\n\n    const validUsers = users.filter((user: any) => user !== null)\n\n    for (const user of validUsers) {\n      if (!user) continue\n\n      // Create health checker service\n      const healthChecker = new HealthCheckerService(user.shopDomain, user.accessToken)\n      \n      // Send weekly health summary\n      const success = await healthChecker.sendWeeklyHealthSummary(user.id)\n\n      await db.log.create({\n        data: {\n          userId: user.id,\n          type: 'weekly_email_summary',\n          message: `Weekly email summary ${success ? 'sent' : 'failed'} for ${user.shopDomain}`,\n          metadata: {\n            success,\n            shopDomain: user.shopDomain\n          }\n        }\n      })\n    }\n\n    return {\n      success: true,\n      usersProcessed: validUsers.length,\n      timestamp: new Date().toISOString(),\n    }\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Weekly email summary failed',\n    }\n  }\n}\n\n// Schedule daily health scans for all users\nexport async function scheduleDailyHealthScans() {\n  if (!healthCheckQueue) {\n    console.log('Health scans skipped - queue not available')\n    return\n  }\n\n  try {\n    // Get all users\n    const users = await db.user.findMany({\n      select: {\n        id: true,\n        shopId: true,\n        tier: true\n      }\n    })\n\n    for (const user of users) {\n      // Schedule daily health scan at 2 AM UTC\n      await healthCheckQueue.add(\n        'health-scan',\n        {\n          shopId: user.shopId,\n          userId: user.id,\n          options: {\n            maxProducts: user.tier === 'enterprise' ? 500 : 100,\n            includePings: true,\n            includeInventory: true,\n            includeValidation: true\n          }\n        },\n        {\n          repeat: { pattern: '0 2 * * *' },\n          jobId: `health-scan-${user.shopId}`,\n        }\n      )\n    }\n    \n    console.log(`Daily health scans scheduled for ${users.length} users`)\n  } catch (error) {\n    console.error('Failed to schedule daily health scans:', error)\n  }\n}\n\n// Graceful shutdown\nexport async function shutdownQueues() {\n  const promises = []\n  \n  if (healthCheckWorker) promises.push(healthCheckWorker.close())\n  if (backgroundJobsWorker) promises.push(backgroundJobsWorker.close())\n  if (queueEvents) promises.push(queueEvents.close())\n  if (bullmqQueueConnection) promises.push(bullmqQueueConnection.disconnect())\n  if (bullmqWorkerConnection) promises.push(bullmqWorkerConnection.disconnect())\n  if (bullmqEventsConnection) promises.push(bullmqEventsConnection.disconnect())\n  if (redis) promises.push(redis.disconnect())\n  \n  await Promise.all(promises)\n}\n\n// Error handling (only if workers exist)\nif (healthCheckWorker) {\n  healthCheckWorker.on('error', (error) => {\n    console.error('Health check worker error:', error)\n  })\n}\n\nif (backgroundJobsWorker) {\n  backgroundJobsWorker.on('error', (error) => {\n    console.error('Background jobs worker error:', error)\n  })\n}\n\nif (queueEvents) {\n  queueEvents.on('error', (error) => {\n    console.error('Queue events error:', error)\n  })\n}\n", "import { db } from \"./db\"\nimport { ShopifySyncService } from \"./shopifySync\"\nimport { emailService, WeeklyHealthSummary } from \"./emailService\"\nimport { analyticsService, PerformanceMetrics } from \"./analyticsService\"\nimport Ajv from \"ajv\"\nimport addFormats from \"ajv-formats\"\nimport axios from \"axios\"\n\nconst ajv = new Ajv()\naddFormats(ajv)\n\nexport interface HealthCheckResult {\n  score: number\n  totalProducts: number\n  validProducts: number\n  gaps: HealthGap[]\n  trends: HealthTrend[]\n  timestamp: Date\n}\n\nexport interface HealthGap {\n  field: string\n  severity: 'warning' | 'error' | 'critical'\n  count: number\n  products: string[]\n  fixable: boolean\n}\n\nexport interface HealthTrend {\n  date: string\n  score: number\n  totalProducts: number\n  validProducts: number\n}\n\nexport interface HealthCheckOptions {\n  maxProducts?: number\n  includePings?: boolean\n  includeInventory?: boolean\n  includeValidation?: boolean\n}\n\nexport class HealthCheckerService {\n  private shopDomain: string\n  private accessToken: string\n\n  constructor(shopDomain: string, accessToken: string) {\n    this.shopDomain = shopDomain\n    this.accessToken = accessToken\n  }\n\n  async performHealthCheck(options: HealthCheckOptions = {}): Promise<HealthCheckResult> {\n    const {\n      maxProducts = 100,\n      includePings = true,\n      includeInventory = true,\n      includeValidation = true\n    } = options\n\n    try {\n      // Get latest products from database\n      const user = await db.user.findUnique({\n        where: { shopId: this.shopDomain }\n      })\n\n      if (!user) {\n        throw new Error('User not found')\n      }\n\n      // Get recent products (last 30 days)\n      const thirtyDaysAgo = new Date()\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30)\n\n      const products = await db.product.findMany({\n        where: {\n          userId: user.id,\n          updatedAt: {\n            gte: thirtyDaysAgo\n          }\n        },\n        take: maxProducts,\n        orderBy: {\n          updatedAt: 'desc'\n        }\n      })\n\n      const gaps: HealthGap[] = []\n      let validProducts = 0\n\n      // Validation checks\n      if (includeValidation) {\n        const validationResults = await this.validateProducts(products)\n        gaps.push(...validationResults.gaps)\n        validProducts = validationResults.validCount\n      }\n\n      // URL ping checks\n      if (includePings) {\n        const pingResults = await this.checkProductUrls(products.slice(0, 20)) // Limit to 20 for performance\n        gaps.push(...pingResults)\n      }\n\n      // Inventory checks\n      if (includeInventory) {\n        const inventoryResults = await this.checkInventoryDeltas(products)\n        gaps.push(...inventoryResults)\n      }\n\n      // Calculate overall score\n      const score = this.calculateHealthScore(products.length, validProducts, gaps)\n\n      // Get trends from last 7 days\n      const trends = await this.getHealthTrends(user.id, 7)\n\n      // Save audit record\n      await db.audit.create({\n        data: {\n          userId: user.id,\n          score,\n          totalProducts: products.length,\n          validProducts,\n          gaps: gaps as any, // Store as JSON\n          timestamp: new Date()\n        }\n      })\n\n      // Track performance metrics\n      const performanceMetrics: PerformanceMetrics = {\n        userId: user.id,\n        shopDomain: this.shopDomain,\n        timestamp: new Date(),\n        healthScore: score,\n        totalProducts: products.length,\n        validProducts,\n        issuesFound: gaps.length,\n        issuesFixed: 0, // Will be updated after auto-fix\n        aiUsage: user.aiUsage,\n        syncCount: 0, // Will be calculated separately\n        enrichmentCount: 0 // Will be calculated separately\n      }\n\n      await analyticsService.trackPerformanceMetrics(performanceMetrics)\n\n      return {\n        score,\n        totalProducts: products.length,\n        validProducts,\n        gaps,\n        trends,\n        timestamp: new Date()\n      }\n\n    } catch (error) {\n      console.error('Health check failed:', error)\n      throw new Error(`Health check failed: ${error instanceof Error ? error.message : 'Unknown error'}`)\n    }\n  }\n\n  private async validateProducts(products: any[]): Promise<{ gaps: HealthGap[], validCount: number }> {\n    const gaps: HealthGap[] = []\n    let validCount = 0\n\n    const requiredFields = [\n      'title', 'description', 'vendor', 'productType', 'tags', \n      'images', 'variants', 'options', 'status'\n    ]\n\n    const fieldCounts: { [key: string]: number } = {}\n    const missingFieldProducts: { [key: string]: string[] } = {}\n\n    for (const product of products) {\n      let isValid = true\n\n      for (const field of requiredFields) {\n        if (!product[field] || \n            (Array.isArray(product[field]) && product[field].length === 0) ||\n            (typeof product[field] === 'string' && product[field].trim() === '')) {\n          \n          fieldCounts[field] = (fieldCounts[field] || 0) + 1\n          missingFieldProducts[field] = missingFieldProducts[field] || []\n          missingFieldProducts[field].push(product.id)\n          isValid = false\n        }\n      }\n\n      if (isValid) validCount++\n    }\n\n    // Create gaps for missing fields\n    for (const [field, count] of Object.entries(fieldCounts)) {\n      if (count > 0) {\n        const severity = count > products.length * 0.5 ? 'critical' : \n                        count > products.length * 0.2 ? 'error' : 'warning'\n        \n        gaps.push({\n          field,\n          severity,\n          count,\n          products: missingFieldProducts[field],\n          fixable: ['title', 'description', 'tags'].includes(field)\n        })\n      }\n    }\n\n    return { gaps, validCount }\n  }\n\n  private async checkProductUrls(products: any[]): Promise<HealthGap[]> {\n    const gaps: HealthGap[] = []\n    const failedUrls: string[] = []\n\n    for (const product of products) {\n      if (product.handle) {\n        try {\n          const url = `https://${this.shopDomain}/products/${product.handle}`\n          const response = await axios.get(url, { \n            timeout: 5000,\n            validateStatus: (status) => status < 500 // Accept redirects and client errors\n          })\n          \n          if (response.status >= 400) {\n            failedUrls.push(product.id)\n          }\n        } catch (error) {\n          failedUrls.push(product.id)\n        }\n      }\n    }\n\n    if (failedUrls.length > 0) {\n      gaps.push({\n        field: 'product_url',\n        severity: failedUrls.length > products.length * 0.3 ? 'error' : 'warning',\n        count: failedUrls.length,\n        products: failedUrls,\n        fixable: false\n      })\n    }\n\n    return gaps\n  }\n\n  private async checkInventoryDeltas(products: any[]): Promise<HealthGap[]> {\n    const gaps: HealthGap[] = []\n    const lowInventory: string[] = []\n    const outOfStock: string[] = []\n\n    for (const product of products) {\n      if (product.variants && Array.isArray(product.variants)) {\n        for (const variant of product.variants) {\n          if (variant.inventoryQuantity !== undefined) {\n            if (variant.inventoryQuantity === 0) {\n              outOfStock.push(variant.id)\n            } else if (variant.inventoryQuantity < 5) {\n              lowInventory.push(variant.id)\n            }\n          }\n        }\n      }\n    }\n\n    if (outOfStock.length > 0) {\n      gaps.push({\n        field: 'inventory_out_of_stock',\n        severity: 'error',\n        count: outOfStock.length,\n        products: outOfStock,\n        fixable: false\n      })\n    }\n\n    if (lowInventory.length > 0) {\n      gaps.push({\n        field: 'inventory_low',\n        severity: 'warning',\n        count: lowInventory.length,\n        products: lowInventory,\n        fixable: false\n      })\n    }\n\n    return gaps\n  }\n\n  private calculateHealthScore(totalProducts: number, validProducts: number, gaps: HealthGap[]): number {\n    if (totalProducts === 0) return 100\n\n    // Base score from validation\n    let score = (validProducts / totalProducts) * 100\n\n    // Deduct points for gaps\n    for (const gap of gaps) {\n      const penalty = gap.severity === 'critical' ? 5 : \n                     gap.severity === 'error' ? 3 : 1\n      score -= Math.min(penalty * (gap.count / totalProducts), 10)\n    }\n\n    return Math.max(0, Math.round(score))\n  }\n\n  private async getHealthTrends(userId: string, days: number): Promise<HealthTrend[]> {\n    const startDate = new Date()\n    startDate.setDate(startDate.getDate() - days)\n\n    const audits = await db.audit.findMany({\n      where: {\n        userId,\n        timestamp: {\n          gte: startDate\n        }\n      },\n      orderBy: {\n        timestamp: 'asc'\n      }\n    })\n\n    return audits.map(audit => ({\n      date: audit.timestamp.toISOString().split('T')[0],\n      score: audit.score,\n      totalProducts: audit.totalProducts,\n      validProducts: audit.validProducts\n    }))\n  }\n\n  async autoFixGaps(gaps: HealthGap[]): Promise<{ fixed: number, failed: number }> {\n    let fixed = 0\n    let failed = 0\n\n    for (const gap of gaps) {\n      if (!gap.fixable) continue\n\n      try {\n        // This would integrate with AI enrichment service\n        // For now, we'll just log the intent\n        console.log(`Auto-fixing gap: ${gap.field} for ${gap.count} products`)\n        \n        // TODO: Implement actual AI fixes\n        // await this.aiEnrichmentService.fixField(gap.field, gap.products)\n        \n        fixed++\n      } catch (error) {\n        console.error(`Failed to fix gap ${gap.field}:`, error)\n        failed++\n      }\n    }\n\n    return { fixed, failed }\n  }\n\n  async sendWeeklyHealthSummary(userId: string): Promise<boolean> {\n    try {\n      // Get health trends from last 14 days\n      const fourteenDaysAgo = new Date()\n      fourteenDaysAgo.setDate(fourteenDaysAgo.getDate() - 14)\n\n      const audits = await db.audit.findMany({\n        where: {\n          userId,\n          timestamp: {\n            gte: fourteenDaysAgo\n          }\n        },\n        orderBy: {\n          timestamp: 'desc'\n        }\n      })\n\n      if (audits.length === 0) {\n        console.log('No audit data available for weekly summary')\n        return false\n      }\n\n      const currentAudit = audits[0]\n      const previousAudit = audits[audits.length - 1] || currentAudit\n\n      // Get issues fixed in the last week\n      const oneWeekAgo = new Date()\n      oneWeekAgo.setDate(oneWeekAgo.getDate() - 7)\n\n      const fixedIssues = await db.log.count({\n        where: {\n          userId,\n          type: 'auto_fix',\n          createdAt: {\n            gte: oneWeekAgo\n          }\n        }\n      })\n\n      const summary: WeeklyHealthSummary = {\n        userId,\n        shopDomain: this.shopDomain,\n        currentScore: currentAudit.score,\n        previousScore: previousAudit.score,\n        scoreChange: currentAudit.score - previousAudit.score,\n        totalProducts: currentAudit.totalProducts,\n        issuesFound: Array.isArray(currentAudit.gaps) ? currentAudit.gaps.length : 0,\n        issuesFixed: fixedIssues,\n        trendData: audits.slice(0, 7).map(audit => ({\n          date: audit.timestamp.toISOString().split('T')[0],\n          score: audit.score\n        }))\n      }\n\n      return await emailService.sendWeeklyHealthSummary(summary)\n    } catch (error) {\n      console.error('Failed to send weekly health summary:', error)\n      return false\n    }\n  }\n\n  async sendHealthAlert(userId: string, alertType: 'critical' | 'warning', message: string): Promise<boolean> {\n    return await emailService.sendHealthAlert(userId, this.shopDomain, alertType, message)\n  }\n}\n", "import { db } from \"./db\"\n\nexport interface EmailTemplate {\n  subject: string\n  html: string\n  text: string\n}\n\nexport interface WeeklyHealthSummary {\n  userId: string\n  shopDomain: string\n  currentScore: number\n  previousScore: number\n  scoreChange: number\n  totalProducts: number\n  issuesFound: number\n  issuesFixed: number\n  trendData: Array<{\n    date: string\n    score: number\n  }>\n}\n\nexport class EmailService {\n  private static instance: EmailService\n  private isConfigured: boolean = false\n\n  constructor() {\n    // Check if email service is configured\n    this.isConfigured = !!(\n      process.env.SMTP_HOST && \n      process.env.SMTP_PORT && \n      process.env.SMTP_USER && \n      process.env.SMTP_PASS\n    )\n  }\n\n  static getInstance(): EmailService {\n    if (!EmailService.instance) {\n      EmailService.instance = new EmailService()\n    }\n    return EmailService.instance\n  }\n\n  async sendWeeklyHealthSummary(summary: WeeklyHealthSummary): Promise<boolean> {\n    try {\n      if (!this.isConfigured) {\n        console.log('Email service not configured - logging summary instead')\n        await this.logSummary(summary)\n        return true\n      }\n\n      const template = this.generateWeeklyHealthTemplate(summary)\n      const emailAddress = await this.getUserEmailAddress(summary.userId)\n\n      if (!emailAddress) {\n        console.log('No email address found for user - logging summary instead')\n        await this.logSummary(summary)\n        return true\n      }\n\n      // TODO: Implement actual email sending with Nodemailer\n      // For now, we'll just log the email content\n      console.log('Would send email:', {\n        to: emailAddress,\n        subject: template.subject,\n        html: template.html\n      })\n\n      // Log the email attempt\n      await db.log.create({\n        data: {\n          userId: summary.userId,\n          type: 'email_sent',\n          message: `Weekly health summary sent to ${emailAddress}`,\n          metadata: {\n            subject: template.subject,\n            currentScore: summary.currentScore,\n            scoreChange: summary.scoreChange,\n            issuesFound: summary.issuesFound,\n            issuesFixed: summary.issuesFixed\n          }\n        }\n      })\n\n      return true\n    } catch (error) {\n      console.error('Failed to send weekly health summary:', error)\n      \n      // Log the error\n      await db.log.create({\n        data: {\n          userId: summary.userId,\n          type: 'error',\n          message: `Failed to send weekly health summary: ${error instanceof Error ? error.message : 'Unknown error'}`,\n          error: error instanceof Error ? error.message : 'Unknown error'\n        }\n      })\n\n      return false\n    }\n  }\n\n  private async getUserEmailAddress(userId: string): Promise<string | null> {\n    try {\n      // For now, we'll construct a generic email based on shop domain\n      // In a real implementation, this would come from user preferences or Shopify API\n      const user = await db.user.findUnique({\n        where: { id: userId },\n        select: { shopDomain: true }\n      })\n\n      if (!user) return null\n\n      // Extract shop name from domain (e.g., \"mystore.myshopify.com\" -> \"mystore\")\n      const shopName = user.shopDomain.replace('.myshopify.com', '')\n      return `admin@${shopName}.myshopify.com`\n    } catch (error) {\n      console.error('Failed to get user email address:', error)\n      return null\n    }\n  }\n\n  private generateWeeklyHealthTemplate(summary: WeeklyHealthSummary): EmailTemplate {\n    const scoreTrend = summary.scoreChange >= 0 ? '\uD83D\uDCC8' : '\uD83D\uDCC9'\n    const scoreColor = summary.scoreChange >= 0 ? '#00a047' : '#d82c0d'\n    \n    const html = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Weekly Health Summary - ${summary.shopDomain}</title>\n        <style>\n          body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }\n          .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 10px 10px 0 0; text-align: center; }\n          .content { background: #fff; padding: 30px; border: 1px solid #e1e5e9; }\n          .score-card { background: #f8f9fa; border-radius: 8px; padding: 20px; margin: 20px 0; text-align: center; }\n          .score-number { font-size: 48px; font-weight: bold; color: ${scoreColor}; margin: 10px 0; }\n          .trend { font-size: 18px; color: ${scoreColor}; }\n          .stats { display: flex; justify-content: space-around; margin: 20px 0; }\n          .stat { text-align: center; }\n          .stat-number { font-size: 24px; font-weight: bold; color: #667eea; }\n          .stat-label { color: #666; font-size: 14px; }\n          .footer { background: #f8f9fa; padding: 20px; text-align: center; border-radius: 0 0 10px 10px; font-size: 14px; color: #666; }\n          .cta-button { display: inline-block; background: #667eea; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 20px 0; }\n        </style>\n      </head>\n      <body>\n        <div class=\"header\">\n          <h1>\uD83C\uDFE5 Catalog Health Report</h1>\n          <p>Weekly summary for ${summary.shopDomain}</p>\n        </div>\n        \n        <div class=\"content\">\n          <div class=\"score-card\">\n            <div class=\"score-number\">${summary.currentScore}%</div>\n            <div class=\"trend\">\n              ${scoreTrend} ${summary.scoreChange >= 0 ? '+' : ''}${summary.scoreChange.toFixed(1)}% from last week\n            </div>\n            <p>Current Health Score</p>\n          </div>\n          \n          <div class=\"stats\">\n            <div class=\"stat\">\n              <div class=\"stat-number\">${summary.totalProducts}</div>\n              <div class=\"stat-label\">Total Products</div>\n            </div>\n            <div class=\"stat\">\n              <div class=\"stat-number\">${summary.issuesFound}</div>\n              <div class=\"stat-label\">Issues Found</div>\n            </div>\n            <div class=\"stat\">\n              <div class=\"stat-number\">${summary.issuesFixed}</div>\n              <div class=\"stat-label\">Issues Fixed</div>\n            </div>\n          </div>\n          \n          ${summary.currentScore < 90 ? `\n            <div style=\"background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 6px; padding: 15px; margin: 20px 0;\">\n              <strong>\u26A0\uFE0F Attention Needed:</strong> Your catalog health is below 90%. Consider running a health check to identify and fix issues.\n            </div>\n          ` : `\n            <div style=\"background: #d4edda; border: 1px solid #c3e6cb; border-radius: 6px; padding: 15px; margin: 20px 0;\">\n              <strong>\u2705 Great Job!</strong> Your catalog is in excellent health. Keep up the good work!\n            </div>\n          `}\n          \n          <div style=\"text-align: center; margin: 30px 0;\">\n            <a href=\"${process.env.SHOPIFY_APP_URL}/dashboard\" class=\"cta-button\">\n              View Dashboard\n            </a>\n          </div>\n        </div>\n        \n        <div class=\"footer\">\n          <p>This is an automated report from CatalogAI Optimizer.</p>\n          <p>To adjust your email preferences, visit your dashboard settings.</p>\n        </div>\n      </body>\n      </html>\n    `\n\n    const text = `\nCatalog Health Report - ${summary.shopDomain}\n\nHealth Score: ${summary.currentScore}%\nTrend: ${summary.scoreChange >= 0 ? '+' : ''}${summary.scoreChange.toFixed(1)}% from last week\n\nStatistics:\n- Total Products: ${summary.totalProducts}\n- Issues Found: ${summary.issuesFound}\n- Issues Fixed: ${summary.issuesFixed}\n\n${summary.currentScore < 90 ? \n  '\u26A0\uFE0F Your catalog health is below 90%. Consider running a health check to identify and fix issues.' :\n  '\u2705 Your catalog is in excellent health. Keep up the good work!'\n}\n\nView your dashboard: ${process.env.SHOPIFY_APP_URL}/dashboard\n\n---\nThis is an automated report from CatalogAI Optimizer.\nTo adjust your email preferences, visit your dashboard settings.\n    `\n\n    return {\n      subject: `\uD83D\uDCCA Weekly Health Report: ${summary.currentScore}% (${summary.scoreChange >= 0 ? '+' : ''}${summary.scoreChange.toFixed(1)}%)`,\n      html,\n      text\n    }\n  }\n\n  private async logSummary(summary: WeeklyHealthSummary): Promise<void> {\n    await db.log.create({\n      data: {\n        userId: summary.userId,\n        type: 'email_summary',\n        message: `Weekly health summary: ${summary.currentScore}% (${summary.scoreChange >= 0 ? '+' : ''}${summary.scoreChange.toFixed(1)}%) - ${summary.issuesFound} issues found, ${summary.issuesFixed} fixed`,\n        metadata: {\n          currentScore: summary.currentScore,\n          previousScore: summary.previousScore,\n          scoreChange: summary.scoreChange,\n          totalProducts: summary.totalProducts,\n          issuesFound: summary.issuesFound,\n          issuesFixed: summary.issuesFixed\n        }\n      }\n    })\n  }\n\n  async sendHealthAlert(userId: string, shopDomain: string, alertType: 'critical' | 'warning', message: string): Promise<boolean> {\n    try {\n      if (!this.isConfigured) {\n        console.log('Email service not configured - logging alert instead')\n        await this.logAlert(userId, alertType, message)\n        return true\n      }\n\n      const emailAddress = await this.getUserEmailAddress(userId)\n      if (!emailAddress) {\n        console.log('No email address found for user - logging alert instead')\n        await this.logAlert(userId, alertType, message)\n        return true\n      }\n\n      const template = this.generateHealthAlertTemplate(shopDomain, alertType, message)\n\n      // TODO: Implement actual email sending\n      console.log('Would send health alert:', {\n        to: emailAddress,\n        subject: template.subject,\n        html: template.html\n      })\n\n      await db.log.create({\n        data: {\n          userId,\n          type: 'health_alert',\n          message: `Health alert sent: ${message}`,\n          metadata: {\n            alertType,\n            message\n          }\n        }\n      })\n\n      return true\n    } catch (error) {\n      console.error('Failed to send health alert:', error)\n      return false\n    }\n  }\n\n  private generateHealthAlertTemplate(shopDomain: string, alertType: 'critical' | 'warning', message: string): EmailTemplate {\n    const isCritical = alertType === 'critical'\n    const color = isCritical ? '#d82c0d' : '#f59e0b'\n    const icon = isCritical ? '\uD83D\uDEA8' : '\u26A0\uFE0F'\n\n    const html = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Health Alert - ${shopDomain}</title>\n        <style>\n          body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }\n          .header { background: ${color}; color: white; padding: 30px; border-radius: 10px 10px 0 0; text-align: center; }\n          .content { background: #fff; padding: 30px; border: 1px solid #e1e5e9; }\n          .alert-box { background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 6px; padding: 20px; margin: 20px 0; }\n          .cta-button { display: inline-block; background: ${color}; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 20px 0; }\n        </style>\n      </head>\n      <body>\n        <div class=\"header\">\n          <h1>${icon} Health Alert</h1>\n          <p>${shopDomain}</p>\n        </div>\n        \n        <div class=\"content\">\n          <div class=\"alert-box\">\n            <h3>${isCritical ? 'Critical Issue Detected' : 'Warning'}</h3>\n            <p>${message}</p>\n          </div>\n          \n          <div style=\"text-align: center; margin: 30px 0;\">\n            <a href=\"${process.env.SHOPIFY_APP_URL}/dashboard\" class=\"cta-button\">\n              View Dashboard\n            </a>\n          </div>\n        </div>\n      </body>\n      </html>\n    `\n\n    const text = `\n${icon} Health Alert - ${shopDomain}\n\n${isCritical ? 'Critical Issue Detected' : 'Warning'}\n\n${message}\n\nView your dashboard: ${process.env.SHOPIFY_APP_URL}/dashboard\n    `\n\n    return {\n      subject: `${icon} ${isCritical ? 'Critical' : 'Warning'}: ${shopDomain}`,\n      html,\n      text\n    }\n  }\n\n  private async logAlert(userId: string, alertType: 'critical' | 'warning', message: string): Promise<void> {\n    await db.log.create({\n      data: {\n        userId,\n        type: 'health_alert',\n        message: `Health alert (${alertType}): ${message}`,\n        metadata: {\n          alertType,\n          message\n        }\n      }\n    })\n  }\n}\n\n// Export singleton instance\nexport const emailService = EmailService.getInstance()\n", "import { db } from \"./db\"\n\nexport interface PerformanceMetrics {\n  userId: string\n  shopDomain: string\n  timestamp: Date\n  healthScore: number\n  totalProducts: number\n  validProducts: number\n  issuesFound: number\n  issuesFixed: number\n  aiUsage: number\n  syncCount: number\n  enrichmentCount: number\n}\n\nexport interface DeltaMetrics {\n  scoreDelta: number\n  productsDelta: number\n  issuesDelta: number\n  aiUsageDelta: number\n  syncDelta: number\n  enrichmentDelta: number\n  timePeriod: 'hour' | 'day' | 'week' | 'month'\n}\n\nexport interface ROIMetrics {\n  userId: string\n  shopDomain: string\n  timePeriod: string\n  healthScoreImprovement: number\n  productsProcessed: number\n  aiTokensUsed: number\n  estimatedValueAdded: number\n  costPerImprovement: number\n  roi: number\n}\n\nexport class AnalyticsService {\n  private static instance: AnalyticsService\n\n  static getInstance(): AnalyticsService {\n    if (!AnalyticsService.instance) {\n      AnalyticsService.instance = new AnalyticsService()\n    }\n    return AnalyticsService.instance\n  }\n\n  async trackPerformanceMetrics(metrics: PerformanceMetrics): Promise<void> {\n    try {\n      // Store performance metrics in database\n      await db.log.create({\n        data: {\n          userId: metrics.userId,\n          type: 'performance_metrics',\n          message: `Performance tracked: ${metrics.healthScore}% health, ${metrics.totalProducts} products, ${metrics.issuesFound} issues`,\n          metadata: {\n            healthScore: metrics.healthScore,\n            totalProducts: metrics.totalProducts,\n            validProducts: metrics.validProducts,\n            issuesFound: metrics.issuesFound,\n            issuesFixed: metrics.issuesFixed,\n            aiUsage: metrics.aiUsage,\n            syncCount: metrics.syncCount,\n            enrichmentCount: metrics.enrichmentCount,\n            timestamp: metrics.timestamp\n          }\n        }\n      })\n\n      // Calculate and store delta metrics\n      const deltaMetrics = await this.calculateDeltaMetrics(metrics.userId, metrics.timestamp)\n      if (deltaMetrics) {\n        await this.storeDeltaMetrics(metrics.userId, deltaMetrics)\n      }\n\n      // Calculate ROI metrics\n      const roiMetrics = await this.calculateROIMetrics(metrics.userId, metrics.shopDomain)\n      if (roiMetrics) {\n        await this.storeROIMetrics(roiMetrics)\n      }\n\n    } catch (error) {\n      console.error('Failed to track performance metrics:', error)\n    }\n  }\n\n  private async calculateDeltaMetrics(userId: string, currentTimestamp: Date): Promise<DeltaMetrics | null> {\n    try {\n      // Get previous metrics from different time periods\n      const hourAgo = new Date(currentTimestamp.getTime() - 60 * 60 * 1000)\n      const dayAgo = new Date(currentTimestamp.getTime() - 24 * 60 * 60 * 1000)\n      const weekAgo = new Date(currentTimestamp.getTime() - 7 * 24 * 60 * 60 * 1000)\n\n      // Get current metrics\n      const currentMetrics = await this.getLatestMetrics(userId)\n      if (!currentMetrics) return null\n\n      // Get previous metrics\n      const previousMetrics = await this.getPreviousMetrics(userId, dayAgo)\n      if (!previousMetrics) return null\n\n      // Calculate deltas\n      const scoreDelta = currentMetrics.healthScore - previousMetrics.healthScore\n      const productsDelta = currentMetrics.totalProducts - previousMetrics.totalProducts\n      const issuesDelta = currentMetrics.issuesFound - previousMetrics.issuesFound\n      const aiUsageDelta = currentMetrics.aiUsage - previousMetrics.aiUsage\n      const syncDelta = currentMetrics.syncCount - previousMetrics.syncCount\n      const enrichmentDelta = currentMetrics.enrichmentCount - previousMetrics.enrichmentCount\n\n      return {\n        scoreDelta,\n        productsDelta,\n        issuesDelta,\n        aiUsageDelta,\n        syncDelta,\n        enrichmentDelta,\n        timePeriod: 'day'\n      }\n    } catch (error) {\n      console.error('Failed to calculate delta metrics:', error)\n      return null\n    }\n  }\n\n  private async getLatestMetrics(userId: string): Promise<PerformanceMetrics | null> {\n    try {\n      const latestAudit = await db.audit.findFirst({\n        where: { userId },\n        orderBy: { timestamp: 'desc' }\n      })\n\n      const user = await db.user.findUnique({\n        where: { id: userId }\n      })\n\n      if (!latestAudit || !user) return null\n\n      // Get recent activity counts\n      const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000)\n\n      const syncCount = await db.log.count({\n        where: {\n          userId,\n          type: 'sync',\n          createdAt: { gte: oneDayAgo }\n        }\n      })\n\n      const enrichmentCount = await db.log.count({\n        where: {\n          userId,\n          type: 'ai_enrichment',\n          createdAt: { gte: oneDayAgo }\n        }\n      })\n\n      return {\n        userId,\n        shopDomain: user.shopDomain,\n        timestamp: latestAudit.timestamp,\n        healthScore: latestAudit.score,\n        totalProducts: latestAudit.totalProducts,\n        validProducts: latestAudit.validProducts,\n        issuesFound: Array.isArray(latestAudit.gaps) ? latestAudit.gaps.length : 0,\n        issuesFixed: 0, // Will be calculated separately\n        aiUsage: user.aiUsage,\n        syncCount,\n        enrichmentCount\n      }\n    } catch (error) {\n      console.error('Failed to get latest metrics:', error)\n      return null\n    }\n  }\n\n  private async getPreviousMetrics(userId: string, fromDate: Date): Promise<PerformanceMetrics | null> {\n    try {\n      const audit = await db.audit.findFirst({\n        where: {\n          userId,\n          timestamp: { gte: fromDate }\n        },\n        orderBy: { timestamp: 'asc' }\n      })\n\n      const user = await db.user.findUnique({\n        where: { id: userId }\n      })\n\n      if (!audit || !user) return null\n\n      return {\n        userId,\n        shopDomain: user.shopDomain,\n        timestamp: audit.timestamp,\n        healthScore: audit.score,\n        totalProducts: audit.totalProducts,\n        validProducts: audit.validProducts,\n        issuesFound: Array.isArray(audit.gaps) ? audit.gaps.length : 0,\n        issuesFixed: 0,\n        aiUsage: user.aiUsage,\n        syncCount: 0,\n        enrichmentCount: 0\n      }\n    } catch (error) {\n      console.error('Failed to get previous metrics:', error)\n      return null\n    }\n  }\n\n  private async storeDeltaMetrics(userId: string, deltaMetrics: DeltaMetrics): Promise<void> {\n    try {\n      await db.log.create({\n        data: {\n          userId,\n          type: 'delta_metrics',\n          message: `Delta metrics: ${deltaMetrics.scoreDelta >= 0 ? '+' : ''}${deltaMetrics.scoreDelta.toFixed(1)}% score, ${deltaMetrics.productsDelta >= 0 ? '+' : ''}${deltaMetrics.productsDelta} products`,\n          metadata: {\n            scoreDelta: deltaMetrics.scoreDelta,\n            productsDelta: deltaMetrics.productsDelta,\n            issuesDelta: deltaMetrics.issuesDelta,\n            aiUsageDelta: deltaMetrics.aiUsageDelta,\n            syncDelta: deltaMetrics.syncCount,\n            enrichmentDelta: deltaMetrics.enrichmentDelta,\n            timePeriod: deltaMetrics.timePeriod\n          }\n        }\n      })\n    } catch (error) {\n      console.error('Failed to store delta metrics:', error)\n    }\n  }\n\n  private async calculateROIMetrics(userId: string, shopDomain: string): Promise<ROIMetrics | null> {\n    try {\n      // Get metrics from the last week\n      const oneWeekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)\n\n      const audits = await db.audit.findMany({\n        where: {\n          userId,\n          timestamp: { gte: oneWeekAgo }\n        },\n        orderBy: { timestamp: 'asc' }\n      })\n\n      if (audits.length < 2) return null\n\n      const firstAudit = audits[0]\n      const lastAudit = audits[audits.length - 1]\n\n      // Get AI usage and activity counts\n      const user = await db.user.findUnique({\n        where: { id: userId }\n      })\n\n      if (!user) return null\n\n      const aiTokensUsed = user.aiUsage\n      const healthScoreImprovement = lastAudit.score - firstAudit.score\n      const productsProcessed = lastAudit.totalProducts\n\n      // Calculate estimated value added (simplified formula)\n      const estimatedValueAdded = healthScoreImprovement * productsProcessed * 0.1 // $0.10 per product per 1% improvement\n\n      // Calculate cost per improvement (AI tokens cost)\n      const tokenCost = aiTokensUsed * 0.0001 // $0.0001 per token (approximate)\n      const costPerImprovement = tokenCost / Math.max(healthScoreImprovement, 1)\n\n      // Calculate ROI\n      const roi = estimatedValueAdded / Math.max(tokenCost, 1)\n\n      return {\n        userId,\n        shopDomain,\n        timePeriod: 'week',\n        healthScoreImprovement,\n        productsProcessed,\n        aiTokensUsed,\n        estimatedValueAdded,\n        costPerImprovement,\n        roi\n      }\n    } catch (error) {\n      console.error('Failed to calculate ROI metrics:', error)\n      return null\n    }\n  }\n\n  private async storeROIMetrics(roiMetrics: ROIMetrics): Promise<void> {\n    try {\n      await db.log.create({\n        data: {\n          userId: roiMetrics.userId,\n          type: 'roi_metrics',\n          message: `ROI: ${roiMetrics.roi.toFixed(2)}x return, $${roiMetrics.estimatedValueAdded.toFixed(2)} value added`,\n          metadata: {\n            healthScoreImprovement: roiMetrics.healthScoreImprovement,\n            productsProcessed: roiMetrics.productsProcessed,\n            aiTokensUsed: roiMetrics.aiTokensUsed,\n            estimatedValueAdded: roiMetrics.estimatedValueAdded,\n            costPerImprovement: roiMetrics.costPerImprovement,\n            roi: roiMetrics.roi,\n            timePeriod: roiMetrics.timePeriod\n          }\n        }\n      })\n    } catch (error) {\n      console.error('Failed to store ROI metrics:', error)\n    }\n  }\n\n  async getPerformanceTrends(userId: string, days: number = 30): Promise<Array<{\n    date: string\n    healthScore: number\n    totalProducts: number\n    issuesFound: number\n    aiUsage: number\n  }>> {\n    try {\n      const startDate = new Date(Date.now() - days * 24 * 60 * 60 * 1000)\n\n      const audits = await db.audit.findMany({\n        where: {\n          userId,\n          timestamp: { gte: startDate }\n        },\n        orderBy: { timestamp: 'asc' }\n      })\n\n      const user = await db.user.findUnique({\n        where: { id: userId }\n      })\n\n      return audits.map(audit => ({\n        date: audit.timestamp.toISOString().split('T')[0],\n        healthScore: audit.score,\n        totalProducts: audit.totalProducts,\n        issuesFound: Array.isArray(audit.gaps) ? audit.gaps.length : 0,\n        aiUsage: user?.aiUsage || 0\n      }))\n    } catch (error) {\n      console.error('Failed to get performance trends:', error)\n      return []\n    }\n  }\n\n  async getROISummary(userId: string): Promise<{\n    totalROI: number\n    totalValueAdded: number\n    totalCost: number\n    averageROI: number\n  } | null> {\n    try {\n      const roiLogs = await db.log.findMany({\n        where: {\n          userId,\n          type: 'roi_metrics'\n        },\n        orderBy: { createdAt: 'desc' },\n        take: 10\n      })\n\n      if (roiLogs.length === 0) return null\n\n      let totalValueAdded = 0\n      let totalCost = 0\n      let totalROI = 0\n\n      for (const log of roiLogs) {\n        const metadata = log.metadata as any\n        if (metadata) {\n          totalValueAdded += metadata.estimatedValueAdded || 0\n          totalCost += (metadata.aiTokensUsed || 0) * 0.0001\n          totalROI += metadata.roi || 0\n        }\n      }\n\n      return {\n        totalROI,\n        totalValueAdded,\n        totalCost,\n        averageROI: totalROI / roiLogs.length\n      }\n    } catch (error) {\n      console.error('Failed to get ROI summary:', error)\n      return null\n    }\n  }\n}\n\n// Export singleton instance\nexport const analyticsService = AnalyticsService.getInstance()\n", "import type { LinksFunction, MetaFunction } from \"@remix-run/node\";\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration } from\n\"@remix-run/react\";\nimport { AppProvider, Frame } from \"@shopify/polaris\";\nimport { useLocation } from \"@remix-run/react\";\nimport { useEffect } from \"react\";\nimport { NavMenu } from \"@shopify/app-bridge-react\";\n\nexport const meta: MetaFunction = () => {\n  return [\n  { title: \"CatalogAI Optimizer\" },\n  { name: \"description\", content: \"AI-powered Shopify catalog optimization\" }];\n\n};\n\nexport const links: LinksFunction = () => [\n{ rel: \"stylesheet\", href: \"https://unpkg.com/@shopify/polaris@12.27.0/build/esm/styles.css\" }];\n\n\n\nfunction AppLayout() {\n  const location = useLocation();\n\n  // Get shop origin from URL parameters\n  const urlParams = typeof window !== 'undefined' ? new URLSearchParams(window.location.search) : null;\n  const shop = urlParams?.get('shop');\n\n  const navigationLinks = [\n  {\n    label: 'Dashboard',\n    destination: '/'\n  },\n  {\n    label: 'Feed Validation',\n    destination: '/validation'\n  },\n  {\n    label: 'AI Enrichment',\n    destination: '/enrichment'\n  },\n  {\n    label: 'Intent Tagging',\n    destination: '/tagging'\n  },\n  {\n    label: 'Settings',\n    destination: '/settings'\n  }];\n\n\n  return (\n    <>\n      {shop &&\n      <NavMenu\n        navigationLinks={navigationLinks}\n        matcher={(link, location) => link.destination === location.pathname} />\n\n      }\n      <Outlet />\n    </>);\n\n}\n\nexport default function App() {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <AppProvider i18n={{}}>\n          <Frame>\n            <AppLayout />\n          </Frame>\n        </AppProvider>\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>);\n\n}", "import { json, type LoaderFunctionArgs } from \"@remix-run/node\"\nimport { authenticate } from \"~/shopify.server\"\nimport { db } from \"~/utils/db\"\nimport { healthCheckTester } from \"~/utils/healthCheckTest\"\n\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\n  try {\n    const { session } = await authenticate.admin(request)\n    \n    // Get user for testing\n    const user = await db.user.findUnique({\n      where: { shopId: session.shop }\n    })\n\n    if (!user) {\n      return json({\n        success: false,\n        error: \"User not found\",\n      }, { status: 404 })\n    }\n\n    // Run health check tests\n    const testResults = await healthCheckTester.runAllTests(\n      user.id,\n      session.shop,\n      user.accessToken\n    )\n\n    const summary = healthCheckTester.getTestSummary()\n\n    // Log test results\n    await db.log.create({\n      data: {\n        userId: user.id,\n        type: 'health_check_test',\n        message: `Health check tests completed: ${summary.passed}/${summary.total} passed`,\n        metadata: {\n          totalTests: summary.total,\n          passedTests: summary.passed,\n          failedTests: summary.failed,\n          duration: summary.duration,\n          results: testResults\n        }\n      }\n    })\n\n    return json({\n      success: true,\n      summary,\n      results: testResults,\n      message: `Health check tests completed: ${summary.passed}/${summary.total} passed`\n    })\n  } catch (error) {\n    console.error('Health check test error:', error)\n    return json({\n      success: false,\n      error: error instanceof Error ? error.message : \"Failed to run health check tests\",\n    }, { status: 500 })\n  }\n}\n", "import { db } from \"./db\"\nimport { HealthCheckerService } from \"./healthChecker\"\nimport { healthCheckQueue } from \"./queue\"\n\nexport interface TestResult {\n  testName: string\n  passed: boolean\n  error?: string\n  duration: number\n  details?: any\n}\n\nexport class HealthCheckTester {\n  private testResults: TestResult[] = []\n\n  async runAllTests(userId: string, shopDomain: string, accessToken: string): Promise<TestResult[]> {\n    this.testResults = []\n    \n    console.log('\uD83E\uDDEA Starting health check system tests...')\n\n    // Test 1: Basic health checker initialization\n    await this.testHealthCheckerInitialization(shopDomain, accessToken)\n\n    // Test 2: Mock product data validation\n    await this.testProductValidation()\n\n    // Test 3: URL ping functionality\n    await this.testUrlPings()\n\n    // Test 4: Inventory validation\n    await this.testInventoryValidation()\n\n    // Test 5: Health score calculation\n    await this.testHealthScoreCalculation()\n\n    // Test 6: Database operations\n    await this.testDatabaseOperations(userId)\n\n    // Test 7: Queue operations\n    await this.testQueueOperations(userId, shopDomain)\n\n    // Test 8: Error handling\n    await this.testErrorHandling(shopDomain, accessToken)\n\n    // Test 9: Performance with large datasets\n    await this.testPerformanceLargeDataset()\n\n    // Test 10: Edge cases\n    await this.testEdgeCases()\n\n    console.log(`\u2705 Health check tests completed: ${this.testResults.filter(r => r.passed).length}/${this.testResults.length} passed`)\n    \n    return this.testResults\n  }\n\n  private async testHealthCheckerInitialization(shopDomain: string, accessToken: string): Promise<void> {\n    const startTime = Date.now()\n    \n    try {\n      const healthChecker = new HealthCheckerService(shopDomain, accessToken)\n      \n      if (!healthChecker) {\n        throw new Error('Failed to initialize HealthCheckerService')\n      }\n\n      this.testResults.push({\n        testName: 'Health Checker Initialization',\n        passed: true,\n        duration: Date.now() - startTime,\n        details: { shopDomain, hasAccessToken: !!accessToken }\n      })\n    } catch (error) {\n      this.testResults.push({\n        testName: 'Health Checker Initialization',\n        passed: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        duration: Date.now() - startTime\n      })\n    }\n  }\n\n  private async testProductValidation(): Promise<void> {\n    const startTime = Date.now()\n    \n    try {\n      // Create mock product data with various validation scenarios\n      const mockProducts = [\n        {\n          id: 'test-1',\n          title: 'Valid Product',\n          description: 'This is a valid product description',\n          vendor: 'Test Vendor',\n          productType: 'Test Type',\n          tags: ['tag1', 'tag2'],\n          images: [{ src: 'image1.jpg' }],\n          variants: [{ id: 'v1', title: 'Variant 1' }],\n          options: [{ name: 'Size', values: ['S', 'M', 'L'] }],\n          status: 'active'\n        },\n        {\n          id: 'test-2',\n          title: '', // Missing title\n          description: 'Valid description',\n          vendor: 'Test Vendor',\n          productType: 'Test Type',\n          tags: [],\n          images: [],\n          variants: [],\n          options: [],\n          status: 'active'\n        },\n        {\n          id: 'test-3',\n          title: 'Valid Product',\n          description: '', // Missing description\n          vendor: '',\n          productType: 'Test Type',\n          tags: ['tag1'],\n          images: [{ src: 'image1.jpg' }],\n          variants: [{ id: 'v1', title: 'Variant 1' }],\n          options: [{ name: 'Size', values: ['S', 'M', 'L'] }],\n          status: 'active'\n        }\n      ]\n\n      // Test validation logic\n      const requiredFields = ['title', 'description', 'vendor', 'productType', 'tags', 'images', 'variants', 'options', 'status']\n      let validCount = 0\n      const gaps: any[] = []\n\n      for (const product of mockProducts) {\n        let isValid = true\n\n        for (const field of requiredFields) {\n          if (!product[field as keyof typeof product] || \n              (Array.isArray(product[field as keyof typeof product]) && (product[field as keyof typeof product] as any[]).length === 0) ||\n              (typeof product[field as keyof typeof product] === 'string' && (product[field as keyof typeof product] as string).trim() === '')) {\n            gaps.push({ field, productId: product.id })\n            isValid = false\n          }\n        }\n\n        if (isValid) validCount++\n      }\n\n      const expectedValidCount = 1 // Only the first product should be valid\n      const expectedGapsCount = 4 // 2 gaps from product 2, 2 gaps from product 3\n\n      if (validCount !== expectedValidCount) {\n        throw new Error(`Expected ${expectedValidCount} valid products, got ${validCount}`)\n      }\n\n      if (gaps.length !== expectedGapsCount) {\n        throw new Error(`Expected ${expectedGapsCount} gaps, got ${gaps.length}`)\n      }\n\n      this.testResults.push({\n        testName: 'Product Validation',\n        passed: true,\n        duration: Date.now() - startTime,\n        details: { \n          totalProducts: mockProducts.length,\n          validProducts: validCount,\n          gapsFound: gaps.length,\n          gaps: gaps\n        }\n      })\n    } catch (error) {\n      this.testResults.push({\n        testName: 'Product Validation',\n        passed: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        duration: Date.now() - startTime\n      })\n    }\n  }\n\n  private async testUrlPings(): Promise<void> {\n    const startTime = Date.now()\n    \n    try {\n      // Test URL ping functionality with mock data\n      const testUrls = [\n        'https://httpbin.org/status/200', // Should succeed\n        'https://httpbin.org/status/404', // Should fail with 404\n        'https://invalid-domain-that-does-not-exist.com', // Should fail\n        'https://httpbin.org/delay/10' // Should timeout\n      ]\n\n      const results = []\n      for (const url of testUrls) {\n        try {\n          const response = await fetch(url, { \n            method: 'HEAD',\n            signal: AbortSignal.timeout(5000)\n          })\n          results.push({ url, success: response.ok, status: response.status })\n        } catch (error) {\n          results.push({ url, success: false, error: error instanceof Error ? error.message : 'Unknown error' })\n        }\n      }\n\n      // Verify results\n      const successCount = results.filter(r => r.success).length\n      const expectedSuccessCount = 1 // Only the 200 status should succeed\n\n      if (successCount !== expectedSuccessCount) {\n        throw new Error(`Expected ${expectedSuccessCount} successful pings, got ${successCount}`)\n      }\n\n      this.testResults.push({\n        testName: 'URL Pings',\n        passed: true,\n        duration: Date.now() - startTime,\n        details: { \n          totalUrls: testUrls.length,\n          successfulPings: successCount,\n          results: results\n        }\n      })\n    } catch (error) {\n      this.testResults.push({\n        testName: 'URL Pings',\n        passed: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        duration: Date.now() - startTime\n      })\n    }\n  }\n\n  private async testInventoryValidation(): Promise<void> {\n    const startTime = Date.now()\n    \n    try {\n      // Test inventory validation logic\n      const mockVariants = [\n        { id: 'v1', inventoryQuantity: 10 }, // Normal stock\n        { id: 'v2', inventoryQuantity: 3 }, // Low stock\n        { id: 'v3', inventoryQuantity: 0 }, // Out of stock\n        { id: 'v4', inventoryQuantity: 1 }, // Low stock\n        { id: 'v5', inventoryQuantity: 15 } // Normal stock\n      ]\n\n      const lowStock: string[] = []\n      const outOfStock: string[] = []\n\n      for (const variant of mockVariants) {\n        if (variant.inventoryQuantity === 0) {\n          outOfStock.push(variant.id)\n        } else if (variant.inventoryQuantity < 5) {\n          lowStock.push(variant.id)\n        }\n      }\n\n      const expectedLowStock = 2 // variants v2 and v4\n      const expectedOutOfStock = 1 // variant v3\n\n      if (lowStock.length !== expectedLowStock) {\n        throw new Error(`Expected ${expectedLowStock} low stock variants, got ${lowStock.length}`)\n      }\n\n      if (outOfStock.length !== expectedOutOfStock) {\n        throw new Error(`Expected ${expectedOutOfStock} out of stock variants, got ${outOfStock.length}`)\n      }\n\n      this.testResults.push({\n        testName: 'Inventory Validation',\n        passed: true,\n        duration: Date.now() - startTime,\n        details: { \n          totalVariants: mockVariants.length,\n          lowStock: lowStock.length,\n          outOfStock: outOfStock.length,\n          lowStockVariants: lowStock,\n          outOfStockVariants: outOfStock\n        }\n      })\n    } catch (error) {\n      this.testResults.push({\n        testName: 'Inventory Validation',\n        passed: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        duration: Date.now() - startTime\n      })\n    }\n  }\n\n  private async testHealthScoreCalculation(): Promise<void> {\n    const startTime = Date.now()\n    \n    try {\n      // Test health score calculation logic\n      const testCases = [\n        { totalProducts: 100, validProducts: 100, gaps: [], expectedScore: 100 },\n        { totalProducts: 100, validProducts: 90, gaps: [], expectedScore: 90 },\n        { totalProducts: 100, validProducts: 80, gaps: [{ severity: 'warning', count: 10 }], expectedScore: 70 },\n        { totalProducts: 100, validProducts: 70, gaps: [{ severity: 'error', count: 20 }], expectedScore: 10 },\n        { totalProducts: 0, validProducts: 0, gaps: [], expectedScore: 100 }\n      ]\n\n      const results = []\n      for (const testCase of testCases) {\n        // Simulate score calculation\n        let score = testCase.totalProducts === 0 ? 100 : (testCase.validProducts / testCase.totalProducts) * 100\n\n        // Deduct points for gaps\n        for (const gap of testCase.gaps) {\n          const penalty = gap.severity === 'critical' ? 5 : gap.severity === 'error' ? 3 : 1\n          score -= Math.min(penalty * (gap.count / testCase.totalProducts), 10)\n        }\n\n        score = Math.max(0, Math.round(score))\n        const passed = score === testCase.expectedScore\n        results.push({ ...testCase, calculatedScore: score, passed })\n      }\n\n      const failedTests = results.filter(r => !r.passed)\n      if (failedTests.length > 0) {\n        throw new Error(`${failedTests.length} health score calculations failed`)\n      }\n\n      this.testResults.push({\n        testName: 'Health Score Calculation',\n        passed: true,\n        duration: Date.now() - startTime,\n        details: { \n          totalTestCases: testCases.length,\n          allPassed: true,\n          results: results\n        }\n      })\n    } catch (error) {\n      this.testResults.push({\n        testName: 'Health Score Calculation',\n        passed: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        duration: Date.now() - startTime\n      })\n    }\n  }\n\n  private async testDatabaseOperations(userId: string): Promise<void> {\n    const startTime = Date.now()\n    \n    try {\n      // Test database operations\n      const testAudit = await db.audit.create({\n        data: {\n          userId,\n          score: 85,\n          totalProducts: 100,\n          validProducts: 85,\n          gaps: [{ field: 'title', severity: 'warning', count: 15 }],\n          timestamp: new Date()\n        }\n      })\n\n      if (!testAudit.id) {\n        throw new Error('Failed to create audit record')\n      }\n\n      // Test retrieval\n      const retrievedAudit = await db.audit.findUnique({\n        where: { id: testAudit.id }\n      })\n\n      if (!retrievedAudit) {\n        throw new Error('Failed to retrieve audit record')\n      }\n\n      // Test deletion\n      await db.audit.delete({\n        where: { id: testAudit.id }\n      })\n\n      this.testResults.push({\n        testName: 'Database Operations',\n        passed: true,\n        duration: Date.now() - startTime,\n        details: { \n          auditId: testAudit.id,\n          score: testAudit.score,\n          totalProducts: testAudit.totalProducts\n        }\n      })\n    } catch (error) {\n      this.testResults.push({\n        testName: 'Database Operations',\n        passed: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        duration: Date.now() - startTime\n      })\n    }\n  }\n\n  private async testQueueOperations(userId: string, shopDomain: string): Promise<void> {\n    const startTime = Date.now()\n    \n    try {\n      if (!healthCheckQueue) {\n        throw new Error('Health check queue not available')\n      }\n\n      // Test queue job creation\n      const testJob = await healthCheckQueue.add('health-scan', {\n        shopId: shopDomain,\n        userId: userId,\n        options: {\n          maxProducts: 10,\n          includePings: false,\n          includeInventory: false,\n          includeValidation: true\n        }\n      })\n\n      if (!testJob.id) {\n        throw new Error('Failed to create queue job')\n      }\n\n      this.testResults.push({\n        testName: 'Queue Operations',\n        passed: true,\n        duration: Date.now() - startTime,\n        details: { \n          jobId: testJob.id,\n          jobName: testJob.name,\n          jobData: testJob.data\n        }\n      })\n    } catch (error) {\n      this.testResults.push({\n        testName: 'Queue Operations',\n        passed: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        duration: Date.now() - startTime\n      })\n    }\n  }\n\n  private async testErrorHandling(shopDomain: string, accessToken: string): Promise<void> {\n    const startTime = Date.now()\n    \n    try {\n      const healthChecker = new HealthCheckerService(shopDomain, accessToken)\n      \n      // Test with invalid data\n      try {\n        await healthChecker.performHealthCheck({\n          maxProducts: -1, // Invalid value\n          includePings: true,\n          includeInventory: true,\n          includeValidation: true\n        })\n      } catch (error) {\n        // Expected to fail\n      }\n\n      // Test with empty shop domain\n      try {\n        const invalidChecker = new HealthCheckerService('', accessToken)\n        await invalidChecker.performHealthCheck()\n      } catch (error) {\n        // Expected to fail\n      }\n\n      // Test with invalid access token\n      try {\n        const invalidChecker = new HealthCheckerService(shopDomain, '')\n        await invalidChecker.performHealthCheck()\n      } catch (error) {\n        // Expected to fail\n      }\n\n      this.testResults.push({\n        testName: 'Error Handling',\n        passed: true,\n        duration: Date.now() - startTime,\n        details: { \n          errorHandlingTests: 3,\n          allErrorsHandled: true\n        }\n      })\n    } catch (error) {\n      this.testResults.push({\n        testName: 'Error Handling',\n        passed: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        duration: Date.now() - startTime\n      })\n    }\n  }\n\n  private async testPerformanceLargeDataset(): Promise<void> {\n    const startTime = Date.now()\n    \n    try {\n      // Test performance with large dataset simulation\n      const largeProductSet = Array.from({ length: 1000 }, (_, i) => ({\n        id: `product-${i}`,\n        title: i % 10 === 0 ? '' : `Product ${i}`, // 10% missing titles\n        description: i % 20 === 0 ? '' : `Description for product ${i}`, // 5% missing descriptions\n        vendor: i % 15 === 0 ? '' : 'Test Vendor', // ~6.7% missing vendors\n        productType: 'Test Type',\n        tags: i % 25 === 0 ? [] : ['tag1', 'tag2'], // 4% missing tags\n        images: i % 30 === 0 ? [] : [{ src: `image-${i}.jpg` }], // ~3.3% missing images\n        variants: i % 40 === 0 ? [] : [{ id: `v-${i}`, title: `Variant ${i}` }], // 2.5% missing variants\n        options: i % 50 === 0 ? [] : [{ name: 'Size', values: ['S', 'M', 'L'] }], // 2% missing options\n        status: 'active'\n      }))\n\n      // Simulate validation process\n      const requiredFields = ['title', 'description', 'vendor', 'productType', 'tags', 'images', 'variants', 'options', 'status']\n      let validCount = 0\n      const gaps: any[] = []\n\n      for (const product of largeProductSet) {\n        let isValid = true\n\n        for (const field of requiredFields) {\n          if (!product[field as keyof typeof product] || \n              (Array.isArray(product[field as keyof typeof product]) && (product[field as keyof typeof product] as any[]).length === 0) ||\n              (typeof product[field as keyof typeof product] === 'string' && (product[field as keyof typeof product] as string).trim() === '')) {\n            gaps.push({ field, productId: product.id })\n            isValid = false\n          }\n        }\n\n        if (isValid) validCount++\n      }\n\n      const processingTime = Date.now() - startTime\n      const expectedValidCount = Math.floor(1000 * 0.7) // Approximately 70% should be valid\n      const tolerance = 50 // Allow 5% tolerance\n\n      if (Math.abs(validCount - expectedValidCount) > tolerance) {\n        throw new Error(`Performance test failed: expected ~${expectedValidCount} valid products, got ${validCount}`)\n      }\n\n      if (processingTime > 5000) { // Should complete within 5 seconds\n        throw new Error(`Performance test failed: processing took ${processingTime}ms, expected < 5000ms`)\n      }\n\n      this.testResults.push({\n        testName: 'Performance Large Dataset',\n        passed: true,\n        duration: Date.now() - startTime,\n        details: { \n          totalProducts: largeProductSet.length,\n          validProducts: validCount,\n          gapsFound: gaps.length,\n          processingTime: processingTime,\n          productsPerSecond: Math.round(largeProductSet.length / (processingTime / 1000))\n        }\n      })\n    } catch (error) {\n      this.testResults.push({\n        testName: 'Performance Large Dataset',\n        passed: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        duration: Date.now() - startTime\n      })\n    }\n  }\n\n  private async testEdgeCases(): Promise<void> {\n    const startTime = Date.now()\n    \n    try {\n      // Test edge cases\n      const edgeCases = [\n        // Empty product\n        {\n          id: 'empty',\n          title: '',\n          description: '',\n          vendor: '',\n          productType: '',\n          tags: [],\n          images: [],\n          variants: [],\n          options: [],\n          status: ''\n        },\n        // Product with only spaces\n        {\n          id: 'spaces',\n          title: '   ',\n          description: '   ',\n          vendor: '   ',\n          productType: 'Test Type',\n          tags: [],\n          images: [],\n          variants: [],\n          options: [],\n          status: 'active'\n        },\n        // Product with null/undefined values\n        {\n          id: 'nulls',\n          title: null,\n          description: undefined,\n          vendor: 'Test Vendor',\n          productType: 'Test Type',\n          tags: null,\n          images: undefined,\n          variants: [],\n          options: [],\n          status: 'active'\n        }\n      ]\n\n      const results = []\n      for (const product of edgeCases) {\n        let isValid = true\n        const gaps: string[] = []\n\n        const requiredFields = ['title', 'description', 'vendor', 'productType', 'tags', 'images', 'variants', 'options', 'status']\n        \n        for (const field of requiredFields) {\n          const value = product[field as keyof typeof product]\n          if (!value || \n              (Array.isArray(value) && value.length === 0) ||\n              (typeof value === 'string' && value.trim() === '')) {\n            gaps.push(field)\n            isValid = false\n          }\n        }\n\n        results.push({ productId: product.id, isValid, gaps })\n      }\n\n      // All edge cases should be invalid\n      const validCount = results.filter(r => r.isValid).length\n      if (validCount > 0) {\n        throw new Error(`Expected all edge cases to be invalid, but ${validCount} were valid`)\n      }\n\n      this.testResults.push({\n        testName: 'Edge Cases',\n        passed: true,\n        duration: Date.now() - startTime,\n        details: { \n          totalEdgeCases: edgeCases.length,\n          allInvalid: true,\n          results: results\n        }\n      })\n    } catch (error) {\n      this.testResults.push({\n        testName: 'Edge Cases',\n        passed: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        duration: Date.now() - startTime\n      })\n    }\n  }\n\n  getTestSummary(): { total: number; passed: number; failed: number; duration: number } {\n    const total = this.testResults.length\n    const passed = this.testResults.filter(r => r.passed).length\n    const failed = total - passed\n    const duration = this.testResults.reduce((sum, r) => sum + r.duration, 0)\n\n    return { total, passed, failed, duration }\n  }\n}\n\n// Export singleton instance\nexport const healthCheckTester = new HealthCheckTester()\n", "import { json, type LoaderFunctionArgs, type ActionFunctionArgs } from \"@remix-run/node\"\nimport { healthCheckQueue, backgroundJobsQueue } from \"~/utils/queue\"\nimport { authenticate } from \"~/shopify.server\"\nimport { db } from \"~/utils/db\"\n\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\n  try {\n    const { session } = await authenticate.admin(request)\n    \n    console.log('Health check API called', {\n      redisHost: process.env.REDIS_HOST,\n      redisPort: process.env.REDIS_PORT,\n      hasRedisPassword: !!process.env.REDIS_PASSWORD,\n      healthCheckQueueExists: !!healthCheckQueue,\n      timestamp: new Date().toISOString()\n    })\n    \n    // Check if health check queue is available\n    if (!healthCheckQueue) {\n      console.error('Health check queue is null - Redis connection failed')\n      return json({\n        success: false,\n        error: \"Health check system not available - Redis connection failed\",\n      }, { status: 503 })\n    }\n\n    // Get user for manual health scan\n    const user = await db.user.findUnique({\n      where: { shopId: session.shop }\n    })\n\n    if (!user) {\n      return json({\n        success: false,\n        error: \"User not found\",\n      }, { status: 404 })\n    }\n\n    // Trigger comprehensive health scan\n    const healthScanJob = await healthCheckQueue.add('health-scan', {\n      shopId: session.shop,\n      userId: user.id,\n      options: {\n        maxProducts: 100,\n        includePings: true,\n        includeInventory: true,\n        includeValidation: true\n      }\n    })\n\n    // Get latest audit for comparison\n    const latestAudit = await db.audit.findFirst({\n      where: { userId: user.id },\n      orderBy: { timestamp: 'desc' }\n    })\n\n    return json({\n      success: true,\n      jobId: healthScanJob.id,\n      currentScore: latestAudit?.score || 0,\n      currentGaps: latestAudit?.gaps || [],\n      message: \"Health scan initiated\",\n    })\n  } catch (error) {\n    console.error('Health check API error:', error)\n    return json({\n      success: false,\n      error: error instanceof Error ? error.message : \"Failed to initiate health checks\",\n    }, { status: 500 })\n  }\n}\n\nexport const action = async ({ request }: ActionFunctionArgs) => {\n  try {\n    const { session } = await authenticate.admin(request)\n    const formData = await request.formData()\n    const action = formData.get(\"action\") as string\n\n    if (action === \"trigger-scan\") {\n      // Get user for manual health scan\n      const user = await db.user.findUnique({\n        where: { shopId: session.shop }\n      })\n\n      if (!user) {\n        return json({\n          success: false,\n          error: \"User not found\",\n        }, { status: 404 })\n      }\n\n      // Check if health check queue is available\n      if (!healthCheckQueue) {\n        console.error('Health check queue is null - Redis connection failed')\n        return json({\n          success: false,\n          error: \"Health check system not available - Redis connection failed\",\n        }, { status: 503 })\n      }\n\n      // Trigger comprehensive health scan\n      const healthScanJob = await healthCheckQueue.add('health-scan', {\n        shopId: session.shop,\n        userId: user.id,\n        options: {\n          maxProducts: 100,\n          includePings: true,\n          includeInventory: true,\n          includeValidation: true\n        }\n      })\n\n      // Get latest audit for comparison\n      const latestAudit = await db.audit.findFirst({\n        where: { userId: user.id },\n        orderBy: { timestamp: 'desc' }\n      })\n\n      return json({\n        success: true,\n        jobId: healthScanJob.id,\n        currentScore: latestAudit?.score || 0,\n        currentGaps: latestAudit?.gaps || [],\n        message: \"Health scan initiated\",\n      })\n    }\n\n    if (action === \"get-results\") {\n      const jobId = formData.get(\"jobId\") as string\n      \n      if (!jobId) {\n        return json({\n          success: false,\n          error: \"Job ID is required\",\n        }, { status: 400 })\n      }\n\n      // Get user\n      const user = await db.user.findUnique({\n        where: { shopId: session.shop }\n      })\n\n      if (!user) {\n        return json({\n          success: false,\n          error: \"User not found\",\n        }, { status: 404 })\n      }\n\n      // Get latest audit results\n      const latestAudit = await db.audit.findFirst({\n        where: { userId: user.id },\n        orderBy: { timestamp: 'desc' }\n      })\n\n      // Get trends from last 7 days\n      const sevenDaysAgo = new Date()\n      sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7)\n\n      const trends = await db.audit.findMany({\n        where: {\n          userId: user.id,\n          timestamp: {\n            gte: sevenDaysAgo\n          }\n        },\n        orderBy: {\n          timestamp: 'asc'\n        }\n      })\n\n      return json({\n        success: true,\n        result: latestAudit ? {\n          score: latestAudit.score,\n          totalProducts: latestAudit.totalProducts,\n          validProducts: latestAudit.validProducts,\n          gaps: latestAudit.gaps,\n          timestamp: latestAudit.timestamp,\n          trends: trends.map((t: any) => ({\n            date: t.timestamp.toISOString().split('T')[0],\n            score: t.score,\n            totalProducts: t.totalProducts,\n            validProducts: t.validProducts\n          }))\n        } : null\n      })\n    }\n\n    if (action === \"auto-fix\") {\n      const gapTypes = formData.get(\"gapTypes\") as string\n      \n      if (!gapTypes) {\n        return json({\n          success: false,\n          error: \"Gap types are required\",\n        }, { status: 400 })\n      }\n\n      // Get user\n      const user = await db.user.findUnique({\n        where: { shopId: session.shop }\n      })\n\n      if (!user) {\n        return json({\n          success: false,\n          error: \"User not found\",\n        }, { status: 404 })\n      }\n\n      // Trigger AI enrichment for fixable gaps\n      const aiEnrichmentJob = await backgroundJobsQueue?.add('ai-enrichment', {\n        shopId: session.shop,\n        userId: user.id,\n        productIds: [], // Will be determined by gap types\n        gapTypes: JSON.parse(gapTypes)\n      })\n\n      return json({\n        success: true,\n        jobId: aiEnrichmentJob?.id,\n        message: \"Auto-fix initiated\",\n      })\n    }\n\n    return json({\n      success: false,\n      error: \"Invalid action\",\n    }, { status: 400 })\n\n  } catch (error) {\n    console.error('Health check action error:', error)\n    return json({\n      success: false,\n      error: error instanceof Error ? error.message : \"Failed to process action\",\n    }, { status: 500 })\n  }\n}\n", "import { json, type LoaderFunctionArgs } from \"@remix-run/node\"\nimport { healthCheckQueue, backgroundJobsQueue } from \"~/utils/queue\"\nimport { authenticate } from \"~/shopify.server\"\n\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\n  try {\n    const { session } = await authenticate.admin(request)\n    \n    // Check if queues are available\n    if (!healthCheckQueue || !backgroundJobsQueue) {\n      return json({\n        success: false,\n        error: \"Queue system not available - Redis not configured\",\n      }, { status: 503 })\n    }\n    \n    // Get queue statistics\n    const healthCheckStats = await healthCheckQueue.getJobCounts()\n    const backgroundJobsStats = await backgroundJobsQueue.getJobCounts()\n    \n    // Get recent completed jobs\n    const recentHealthChecks = await healthCheckQueue.getJobs(['completed'], 0, 5)\n    const recentBackgroundJobs = await backgroundJobsQueue.getJobs(['completed'], 0, 5)\n\n    return json({\n      success: true,\n      queues: {\n        healthChecks: {\n          ...healthCheckStats,\n          recentJobs: recentHealthChecks.map(job => ({\n            id: job.id,\n            name: job.name,\n            data: job.data,\n            result: job.returnvalue,\n            completedOn: job.finishedOn,\n          })),\n        },\n        backgroundJobs: {\n          ...backgroundJobsStats,\n          recentJobs: recentBackgroundJobs.map(job => ({\n            id: job.id,\n            name: job.name,\n            data: job.data,\n            result: job.returnvalue,\n            completedOn: job.finishedOn,\n          })),\n        },\n      },\n      timestamp: new Date().toISOString(),\n    })\n  } catch (error) {\n    return json({\n      success: false,\n      error: error instanceof Error ? error.message : \"Failed to get queue status\",\n    }, { status: 500 })\n  }\n}\n", "import { json, type LoaderFunctionArgs, type ActionFunctionArgs } from \"@remix-run/node\"\nimport { authenticate } from \"~/shopify.server\"\nimport { db } from \"~/utils/db\"\n\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\n  try {\n    const { session } = await authenticate.admin(request)\n    \n    const user = await db.user.findUnique({\n      where: { shopId: session.shop }\n    })\n\n    if (!user) {\n      return json({\n        success: false,\n        error: \"User not found\",\n      }, { status: 404 })\n    }\n\n    // Return current settings (defaults if not set)\n    return json({\n      success: true,\n      settings: {\n        healthChecksEnabled: true,\n        healthCheckTime: \"02:00\", // 2 AM UTC\n        autoFixEnabled: true,\n        emailNotifications: true,\n        maxProductsPerScan: user.tier === 'enterprise' ? 500 : 100,\n        includeUrlPings: true,\n        includeInventoryChecks: true,\n        includeValidation: true\n      }\n    })\n  } catch (error) {\n    console.error('Settings API error:', error)\n    return json({\n      success: false,\n      error: error instanceof Error ? error.message : \"Failed to fetch settings\",\n    }, { status: 500 })\n  }\n}\n\nexport const action = async ({ request }: ActionFunctionArgs) => {\n  try {\n    const { session } = await authenticate.admin(request)\n    const formData = await request.formData()\n    const action = formData.get(\"action\") as string\n\n    const user = await db.user.findUnique({\n      where: { shopId: session.shop }\n    })\n\n    if (!user) {\n      return json({\n        success: false,\n        error: \"User not found\",\n      }, { status: 404 })\n    }\n\n    if (action === \"update\") {\n      const healthChecksEnabled = formData.get(\"healthChecksEnabled\") === \"true\"\n      const healthCheckTime = formData.get(\"healthCheckTime\") as string\n      const autoFixEnabled = formData.get(\"autoFixEnabled\") === \"true\"\n      const emailNotifications = formData.get(\"emailNotifications\") === \"true\"\n      const maxProductsPerScan = parseInt(formData.get(\"maxProductsPerScan\") as string) || 100\n      const includeUrlPings = formData.get(\"includeUrlPings\") === \"true\"\n      const includeInventoryChecks = formData.get(\"includeInventoryChecks\") === \"true\"\n      const includeValidation = formData.get(\"includeValidation\") === \"true\"\n\n      // Update user settings (we'll store these in a separate settings table later)\n      // For now, we'll store them in the user metadata or create a simple settings field\n      \n      await db.log.create({\n        data: {\n          userId: user.id,\n          type: 'settings_update',\n          message: `Settings updated: health checks ${healthChecksEnabled ? 'enabled' : 'disabled'}, auto-fix ${autoFixEnabled ? 'enabled' : 'disabled'}`,\n          metadata: {\n            healthChecksEnabled,\n            healthCheckTime,\n            autoFixEnabled,\n            emailNotifications,\n            maxProductsPerScan,\n            includeUrlPings,\n            includeInventoryChecks,\n            includeValidation\n          }\n        }\n      })\n\n      return json({\n        success: true,\n        message: \"Settings updated successfully\",\n      })\n    }\n\n    return json({\n      success: false,\n      error: \"Invalid action\",\n    }, { status: 400 })\n\n  } catch (error) {\n    console.error('Settings action error:', error)\n    return json({\n      success: false,\n      error: error instanceof Error ? error.message : \"Failed to update settings\",\n    }, { status: 500 })\n  }\n}\n", "import { json, type ActionFunctionArgs } from \"@remix-run/node\"\nimport { authenticate } from \"../shopify.server\"\nimport { ShopifySyncService } from \"../utils/shopifySync\"\nimport { mapProductsToSpec } from \"../utils/fieldMapper\"\nimport { validateProducts, getValidationSummary } from \"../utils/validator\"\nimport { db } from \"../utils/db\"\n\nexport const action = async ({ request }: ActionFunctionArgs) => {\n  const { session } = await authenticate.admin(request)\n  \n  // Get user from database\n  const user = await db.user.findUnique({\n    where: { shopId: session.shop },\n  })\n\n  if (!user) {\n    return json({ error: \"User not found\" }, { status: 404 })\n  }\n\n  try {\n    const formData = await request.formData()\n    const action = formData.get(\"action\")\n    \n    if (action === \"validate\") {\n      // Get a sample of products for validation (limit to 10 for demo)\n      const syncService = new ShopifySyncService(session.shop, user.accessToken)\n      const products = await syncService.syncProducts(user.id)\n      \n      // Limit to first 10 products for demo\n      const sampleProducts = products.slice(0, 10)\n      \n      // Map Shopify products to OpenAI spec\n      const mappedProducts = mapProductsToSpec(sampleProducts)\n      \n      // Validate the mapped products\n      const validationResults = await validateProducts(mappedProducts.map(p => {\n        const { originalId, score, ...spec } = p\n        return spec\n      }))\n      \n      // Get validation summary\n      const summary = getValidationSummary(validationResults)\n      \n      // Create audit record\n      const audit = await db.audit.create({\n        data: {\n          userId: user.id,\n          score: summary.validationRate,\n          totalProducts: summary.totalProducts,\n          validProducts: summary.validProducts,\n          gaps: summary.commonErrors.map(error => ({\n            field: error.field,\n            count: error.count,\n            message: error.message\n          })),\n        },\n      })\n\n      // Log the validation\n      await db.log.create({\n        data: {\n          userId: user.id,\n          type: 'validation',\n          message: `Validated ${summary.totalProducts} products - ${summary.validationRate}% passed validation`,\n          metadata: {\n            summary,\n            auditId: audit.id,\n            timestamp: new Date().toISOString(),\n          },\n        },\n      })\n\n      return json({\n        success: true,\n        data: {\n          auditId: audit.id,\n          summary,\n          products: mappedProducts.map((product, index) => ({\n            id: product.originalId,\n            title: product.title,\n            score: product.score,\n            validation: validationResults[index],\n          })),\n        },\n      })\n    }\n\n    return json({ error: \"Invalid action\" }, { status: 400 })\n  } catch (error) {\n    console.error('Validation error:', error)\n    \n    // Log the error\n    await db.log.create({\n      data: {\n        userId: user.id,\n        type: 'error',\n        message: `Validation error: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error: error instanceof Error ? error.stack : String(error),\n        metadata: {\n          timestamp: new Date().toISOString(),\n        },\n      },\n    })\n\n    return json(\n      {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred',\n      },\n      { status: 500 }\n    )\n  }\n}\n", "import Ajv from 'ajv'\nimport addFormats from 'ajv-formats'\nimport axios from 'axios'\nimport { OPENAI_PRODUCT_SCHEMA, OpenAISpecProduct } from './openaiSpec'\n\nconst ajv = new Ajv({ allErrors: true })\naddFormats(ajv)\n\n// Compile the schema\nconst validate = ajv.compile(OPENAI_PRODUCT_SCHEMA)\n\nexport interface ValidationResult {\n  valid: boolean\n  errors: ValidationError[]\n  warnings: ValidationWarning[]\n}\n\nexport interface ValidationError {\n  field: string\n  message: string\n  value?: any\n}\n\nexport interface ValidationWarning {\n  field: string\n  message: string\n  suggestion?: string\n}\n\nexport function validateProduct(product: OpenAISpecProduct): ValidationResult {\n  const errors: ValidationError[] = []\n  const warnings: ValidationWarning[] = []\n\n  // Schema validation\n  const isValid = validate(product)\n  \n  if (!isValid && validate.errors) {\n    for (const error of validate.errors) {\n      errors.push({\n        field: error.instancePath ? error.instancePath.slice(1) : 'root',\n        message: error.message || 'Validation error',\n        value: error.data\n      })\n    }\n  }\n\n  // Custom validations\n  validateDescription(product, warnings)\n  validatePrice(product, errors)\n  validateImageUrls(product, warnings)\n  validateLinks(product, warnings)\n\n  return {\n    valid: errors.length === 0,\n    errors,\n    warnings\n  }\n}\n\nfunction validateDescription(product: OpenAISpecProduct, warnings: ValidationWarning[]) {\n  if (!product.description) return\n\n  const desc = product.description\n\n  // Check for HTML tags\n  const htmlRegex = /<[^>]*>/g\n  if (htmlRegex.test(desc)) {\n    warnings.push({\n      field: 'description',\n      message: 'Description contains HTML tags',\n      suggestion: 'Use plain text for better AI search compatibility'\n    })\n  }\n\n  // Check length\n  if (desc.length < 100) {\n    warnings.push({\n      field: 'description',\n      message: 'Description is too short',\n      suggestion: 'Add more details about features, benefits, and use cases'\n    })\n  }\n\n  if (desc.length > 4000) {\n    warnings.push({\n      field: 'description',\n      message: 'Description is too long',\n      suggestion: 'Consider shortening to under 4000 characters'\n    })\n  }\n\n  // Check for generic descriptions\n  const genericPhrases = [\n    'great product',\n    'high quality',\n    'perfect for',\n    'amazing',\n    'wonderful',\n    'excellent'\n  ]\n\n  const lowerDesc = desc.toLowerCase()\n  const genericCount = genericPhrases.filter(phrase => lowerDesc.includes(phrase)).length\n  \n  if (genericCount > 2) {\n    warnings.push({\n      field: 'description',\n      message: 'Description contains too many generic phrases',\n      suggestion: 'Use more specific, descriptive language'\n    })\n  }\n}\n\nfunction validatePrice(product: OpenAISpecProduct, errors: ValidationError[]) {\n  if (!product.price) return\n\n  const priceRegex = /^\\d+\\.\\d{2} [A-Z]{3}$/\n  if (!priceRegex.test(product.price)) {\n    errors.push({\n      field: 'price',\n      message: 'Price must be in format \"XX.XX USD\"',\n      value: product.price\n    })\n  }\n}\n\nasync function validateImageUrls(product: OpenAISpecProduct, warnings: ValidationWarning[]) {\n  if (!product.image_urls || product.image_urls.length === 0) return\n\n  for (const [index, url] of product.image_urls.entries()) {\n    try {\n      const response = await axios.head(url, { timeout: 5000 })\n      \n      if (response.status !== 200) {\n        warnings.push({\n          field: `image_urls[${index}]`,\n          message: `Image URL returned status ${response.status}`,\n          suggestion: 'Check if the image URL is accessible'\n        })\n      }\n\n      // Check content type\n      const contentType = response.headers['content-type']\n      if (contentType && !contentType.startsWith('image/')) {\n        warnings.push({\n          field: `image_urls[${index}]`,\n          message: 'URL does not appear to be an image',\n          suggestion: 'Ensure the URL points to an image file'\n        })\n      }\n    } catch (error) {\n      warnings.push({\n        field: `image_urls[${index}]`,\n        message: 'Failed to validate image URL',\n        suggestion: 'Check if the URL is accessible and points to an image'\n      })\n    }\n  }\n}\n\nasync function validateLinks(product: OpenAISpecProduct, warnings: ValidationWarning[]) {\n  const linksToValidate = []\n\n  if (product.documentation_url) {\n    linksToValidate.push({ url: product.documentation_url, field: 'documentation_url' })\n  }\n\n  if (product.video_urls) {\n    product.video_urls.forEach((url, index) => {\n      linksToValidate.push({ url, field: `video_urls[${index}]` })\n    })\n  }\n\n  for (const { url, field } of linksToValidate) {\n    try {\n      const response = await axios.head(url, { timeout: 5000 })\n      \n      if (response.status !== 200) {\n        warnings.push({\n          field,\n          message: `Link returned status ${response.status}`,\n          suggestion: 'Check if the link is accessible'\n        })\n      }\n    } catch (error) {\n      warnings.push({\n        field,\n        message: 'Failed to validate link',\n        suggestion: 'Check if the link is accessible'\n      })\n    }\n  }\n}\n\n// Batch validation for multiple products\nexport async function validateProducts(products: OpenAISpecProduct[]): Promise<ValidationResult[]> {\n  const results: ValidationResult[] = []\n\n  for (const product of products) {\n    const result = validateProduct(product)\n    results.push(result)\n  }\n\n  return results\n}\n\n// Get validation summary\nexport function getValidationSummary(results: ValidationResult[]) {\n  const totalProducts = results.length\n  const validProducts = results.filter(r => r.valid).length\n  const totalErrors = results.reduce((sum, r) => sum + r.errors.length, 0)\n  const totalWarnings = results.reduce((sum, r) => sum + r.warnings.length, 0)\n\n  const commonErrors = getCommonIssues(results.map(r => r.errors).flat(), 'error')\n  const commonWarnings = getCommonIssues(results.map(r => r.warnings).flat(), 'warning')\n\n  return {\n    totalProducts,\n    validProducts,\n    invalidProducts: totalProducts - validProducts,\n    totalErrors,\n    totalWarnings,\n    validationRate: totalProducts > 0 ? Math.round((validProducts / totalProducts) * 100) : 0,\n    commonErrors,\n    commonWarnings\n  }\n}\n\nfunction getCommonIssues(issues: (ValidationError | ValidationWarning)[], type: 'error' | 'warning'): Array<{ field: string, count: number, message: string }> {\n  const fieldCounts = new Map<string, { count: number, message: string }>()\n\n  for (const issue of issues) {\n    const key = issue.field\n    if (fieldCounts.has(key)) {\n      fieldCounts.get(key)!.count++\n    } else {\n      fieldCounts.set(key, { count: 1, message: issue.message })\n    }\n  }\n\n  return Array.from(fieldCounts.entries())\n    .map(([field, data]) => ({ field, ...data }))\n    .sort((a, b) => b.count - a.count)\n    .slice(0, 10) // Top 10 most common issues\n}\n", "import { json, type ActionFunctionArgs, type LoaderFunctionArgs } from \"@remix-run/node\"\nimport { authenticate } from \"../shopify.server\"\nimport { ShopifySyncService } from \"../utils/shopifySync\"\nimport { AIEnrichmentService } from \"../utils/aiEnrich\"\nimport { db } from \"../utils/db\"\n\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\n  console.log('\uD83C\uDFAF AI ENRICH LOADER CALLED')\n  try {\n    const { session } = await authenticate.admin(request)\n    console.log('\u2705 AI Enrich loader authentication successful for shop:', session.shop)\n    return json({ success: true, message: \"AI Enrichment API ready\" })\n  } catch (error) {\n    console.error('\u274C AI Enrich loader authentication failed:', error)\n    return json({ success: false, error: \"Authentication failed\" }, { status: 401 })\n  }\n}\n\nexport const action = async ({ request }: ActionFunctionArgs) => {\n  console.log('\uD83C\uDFAF AI ENRICH ACTION CALLED - Fixed Syntax Error')\n  \n  try {\n    console.log('\uD83D\uDD0D Attempting authentication for AI enrichment...')\n    console.log('\uD83D\uDD0D Request URL:', request.url)\n    console.log('\uD83D\uDD0D Request method:', request.method)\n    console.log('\uD83D\uDD0D Request headers:', Object.fromEntries(request.headers.entries()))\n    \n    const { session } = await authenticate.admin(request)\n    console.log('\u2705 AI Enrich authentication successful for shop:', session.shop)\n    \n    // Get user from database\n    const user = await db.user.findUnique({\n      where: { shopId: session.shop },\n    })\n\n    if (!user) {\n      console.log('\u274C User not found for shop:', session.shop)\n      return json({ error: \"User not found\" }, { status: 404 })\n    }\n    console.log('\uD83D\uDC64 User found:', user.id)\n    const formData = await request.formData()\n    const action = formData.get(\"action\")\n    const shopFromForm = formData.get(\"shop\")\n    console.log('\uD83D\uDCDD Form data action:', action)\n    console.log('\uD83C\uDFEA Shop from form:', shopFromForm)\n    \n    if (action === \"enrich\") {\n      console.log('\uD83D\uDE80 Starting AI enrichment process...')\n      const productIds = formData.getAll(\"productIds\") as string[]\n      const maxProducts = parseInt(formData.get(\"maxProducts\") as string) || 5\n      \n      // Check tier limits\n      const tierLimits = {\n        starter: 5,\n        pro: 25,\n        enterprise: 100\n      }\n      \n      const limit = tierLimits[user.tier as keyof typeof tierLimits] || tierLimits.starter\n      \n      if (maxProducts > limit) {\n        return json({\n          success: false,\n          error: `Your ${user.tier} tier allows up to ${limit} products per enrichment. Please upgrade to process more products.`\n        }, { status: 400 })\n      }\n\n      // Get products from Shopify using offline session token\n      console.log('\uD83D\uDD11 Loading offline session for AI enrichment...')\n      const { sessionStorage } = await import(\"../shopify.server\")\n      const offlineSessionId = `offline_${session.shop}`\n      const offlineSession = await sessionStorage.loadSession(offlineSessionId)\n      \n      if (!offlineSession?.accessToken) {\n        console.log('\u274C Offline session not found for AI enrichment')\n        return json({\n          success: false,\n          error: \"Offline session not found. Please reinstall the app.\"\n        }, { status: 401 })\n      }\n      console.log('\u2705 Offline session loaded for AI enrichment')\n      \n      console.log('\uD83D\uDCE6 Fetching products for AI enrichment...')\n      const syncService = new ShopifySyncService(session.shop, offlineSession.accessToken)\n      const allProducts = await syncService.syncProducts(user.id)\n      console.log('\uD83D\uDCE6 Products fetched:', allProducts.length)\n      \n      // Filter to selected products or get sample\n      const productsToEnrich = productIds.length > 0 \n        ? allProducts.filter(p => productIds.includes(p.id))\n        : allProducts.slice(0, maxProducts)\n\n      console.log('\uD83C\uDFAF Products selected for enrichment:', productsToEnrich.length)\n\n      if (productsToEnrich.length === 0) {\n        console.log('\u274C No products found to enrich')\n        return json({\n          success: false,\n          error: \"No products found to enrich\"\n        }, { status: 400 })\n      }\n\n      // Enrich products\n      console.log('\uD83E\uDD16 Starting AI enrichment service...')\n      const enrichmentService = new AIEnrichmentService()\n      console.log('\uD83E\uDD16 Calling enrichProducts with', productsToEnrich.length, 'products')\n      \n      const enrichmentResults = await enrichmentService.enrichProducts(\n        user.id,\n        productsToEnrich,\n        {\n          enrichDescription: true,\n          inferMaterial: true,\n          generateUseCases: true,\n          generateFeatures: true,\n          generateKeywords: true,\n        },\n        maxProducts\n      )\n      \n      console.log('\u2705 AI enrichment completed, results:', enrichmentResults.length)\n\n      // Apply enrichment to Shopify (optional - controlled by form data)\n      const applyToShopify = formData.get(\"applyToShopify\") === \"true\"\n      const appliedResults = []\n\n      if (applyToShopify) {\n        for (const result of enrichmentResults) {\n          try {\n            const success = await enrichmentService.applyEnrichmentToShopify(\n              user.id,\n              session.shop,\n              offlineSession.accessToken,\n              result\n            )\n            appliedResults.push({\n              productId: result.originalProduct.id,\n              success,\n              improvements: result.improvements\n            })\n          } catch (error) {\n            appliedResults.push({\n              productId: result.originalProduct.id,\n              success: false,\n              error: error instanceof Error ? error.message : 'Unknown error'\n            })\n          }\n        }\n      }\n\n      // Calculate total usage\n      const totalUsage = enrichmentResults.reduce((sum, result) => sum + result.totalUsage, 0)\n      console.log('\uD83D\uDCB0 Total usage calculated:', totalUsage)\n      \n      // Log the enrichment operation\n      console.log('\uD83D\uDCDD Creating database log...')\n      await db.log.create({\n        data: {\n          userId: user.id,\n          type: 'enrichment',\n          message: `AI enrichment completed for ${enrichmentResults.length} products`,\n          metadata: {\n            productsProcessed: enrichmentResults.length,\n            totalUsage,\n            appliedToShopify: applyToShopify,\n            timestamp: new Date().toISOString(),\n          },\n        },\n      })\n      console.log('\u2705 Database log created')\n\n      const response = {\n        success: true,\n        data: {\n          productsProcessed: enrichmentResults.length,\n          totalUsage,\n          appliedToShopify: applyToShopify,\n          results: enrichmentResults.map(result => ({\n            productId: result.originalProduct.id,\n            title: result.originalProduct.title,\n            improvements: result.improvements,\n            totalUsage: result.totalUsage,\n            errors: result.errors,\n          })),\n          appliedResults,\n        },\n      }\n      \n      console.log('\uD83C\uDF89 Returning successful response:', response)\n      return json(response)\n    }\n\n    return json({ error: \"Invalid action\" }, { status: 400 })\n  } catch (error) {\n    console.error('\u274C CRITICAL ERROR in AI enrichment:', error)\n    console.error('\u274C Error stack:', error instanceof Error ? error.stack : 'No stack trace')\n    \n    // Log the error (but don't fail if user is undefined)\n    try {\n      // Try to get user for logging (might not be available if error occurred early)\n      const { session } = await authenticate.admin(request).catch(() => null)\n      if (session) {\n        const user = await db.user.findUnique({\n          where: { shopId: session.shop },\n        }).catch(() => null)\n        \n        if (user) {\n          await db.log.create({\n            data: {\n              userId: user.id,\n              type: 'error',\n              message: `Enrichment error: ${error instanceof Error ? error.message : 'Unknown error'}`,\n              error: error instanceof Error ? error.stack : String(error),\n              metadata: {\n                timestamp: new Date().toISOString(),\n              },\n            },\n          })\n          console.log('\uD83D\uDCDD Error logged to database')\n        }\n      }\n    } catch (logError) {\n      console.error('\u274C Failed to log error to database:', logError)\n    }\n\n    return json(\n      {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred',\n      },\n      { status: 500 }\n    )\n  }\n}\n", "import { json, type ActionFunctionArgs, type LoaderFunctionArgs } from \"@remix-run/node\"\nimport { authenticate } from \"../shopify.server\"\nimport { ShopifySyncService } from \"../utils/shopifySync\"\nimport { db } from \"../utils/db\"\n\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\n  const { session } = await authenticate.admin(request)\n  \n  // Get user from database\n  const user = await db.user.findUnique({\n    where: { shopId: session.shop },\n  })\n\n  if (!user) {\n    return json({ error: \"User not found\" }, { status: 404 })\n  }\n\n  // Get recent sync logs\n  const recentLogs = await db.log.findMany({\n    where: {\n      userId: user.id,\n      type: 'sync',\n    },\n    orderBy: {\n      createdAt: 'desc',\n    },\n    take: 10,\n  })\n\n  return json({\n    logs: recentLogs.map(log => ({\n      id: log.id,\n      type: log.type,\n      message: log.message,\n      createdAt: log.createdAt,\n      metadata: log.metadata,\n    })),\n  })\n}\n\nexport const action = async ({ request }: ActionFunctionArgs) => {\n  console.log('\uD83C\uDFAF SYNC ACTION CALLED - Request method:', request.method)\n  console.log('\uD83C\uDFAF SYNC ACTION CALLED - Request URL:', request.url)\n  console.log('\uD83C\uDFAF Request headers:', Object.fromEntries(request.headers.entries()))\n  \n  try {\n    console.log('\uD83D\uDD10 Attempting authentication...')\n    const { session } = await authenticate.admin(request)\n    console.log('\uD83C\uDFAF Authentication successful for shop:', session.shop)\n    \n    // Get user from database\n    const user = await db.user.findUnique({\n      where: { shopId: session.shop },\n    })\n\n    if (!user) {\n      console.log('\u274C User not found for shop:', session.shop)\n      return json({ error: \"User not found\" }, { status: 404 })\n    }\n\n    console.log('\uD83D\uDE80 Starting sync for shop:', session.shop)\n    console.log('\uD83D\uDC64 User ID:', user.id)\n    \n    // Initialize sync service\n    const syncService = new ShopifySyncService(session.shop, user.accessToken)\n    console.log('\uD83D\uDD27 Sync service initialized')\n    \n    // Sync products\n    console.log('\uD83D\uDCE6 Starting product sync...')\n    const products = await syncService.syncProducts(user.id)\n    console.log('\u2705 Product sync completed:', products.length, 'products')\n    \n    // Get inventory levels for analytics\n    console.log('\uD83D\uDCCA Fetching inventory levels...')\n    const inventoryLevels = await syncService.getInventoryLevels(session.shop, user.accessToken)\n    console.log('\uD83D\uDCC8 Inventory levels:', inventoryLevels.length)\n    \n    // Get recent orders for attribution\n    console.log('\uD83D\uDED2 Fetching recent orders...')\n    const recentOrders = await syncService.getRecentOrders(session.shop, user.accessToken, 50)\n    console.log('\uD83D\uDCCB Recent orders:', recentOrders.length)\n\n    // Create an audit record for this sync\n    console.log('\uD83D\uDCDD Creating audit record...')\n    const audit = await db.audit.create({\n      data: {\n        userId: user.id,\n        score: 0, // Will be calculated after field mapping\n        totalProducts: products.length,\n        validProducts: 0, // Will be calculated after validation\n        gaps: [], // Will be populated after field mapping and validation\n      },\n    })\n    console.log('\u2705 Audit record created:', audit.id)\n\n    const response = {\n      success: true,\n      message: `Successfully synced ${products.length} products`,\n      data: {\n        productsCount: products.length,\n        inventoryLevelsCount: inventoryLevels.length,\n        recentOrdersCount: recentOrders.length,\n        auditId: audit.id,\n      },\n    }\n    \n    console.log('\uD83C\uDF89 Sync response:', response)\n    return json(response)\n  } catch (error) {\n    console.error('\u274C SYNC ACTION ERROR:', error)\n    console.error('\u274C Error type:', error?.constructor?.name)\n    console.error('\u274C Error details:', {\n      message: error instanceof Error ? error.message : 'Unknown error',\n      stack: error instanceof Error ? error.stack : String(error),\n      isResponse: error instanceof Response,\n      responseStatus: error instanceof Response ? error.status : 'N/A',\n      responseHeaders: error instanceof Response ? Object.fromEntries(error.headers.entries()) : 'N/A',\n    })\n    \n    // If it's a Response (OAuth redirect), re-throw it to allow the redirect to happen\n    if (error instanceof Response) {\n      console.log('\uD83D\uDD04 Re-throwing OAuth redirect response - Status:', error.status)\n      console.log('\uD83D\uDD04 Redirect location:', error.headers.get('location'))\n      throw error\n    }\n    \n    return json(\n      {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred',\n      },\n      { status: 500 }\n    )\n  }\n}", "import { json, type ActionFunctionArgs } from \"@remix-run/node\"\nimport { authenticate } from \"../shopify.server\"\nimport { db } from \"../utils/db\"\nimport { ShopifySyncService } from \"../utils/shopifySync\"\n\nexport const action = async ({ request }: ActionFunctionArgs) => {\n  const { topic, shop, session } = await authenticate.webhook(request)\n\n  if (!session) {\n    return json({ error: \"No session found\" }, { status: 401 })\n  }\n\n  try {\n    // Get user from database\n    const user = await db.user.findUnique({\n      where: { shopId: shop },\n    })\n\n    if (!user) {\n      return json({ error: \"User not found\" }, { status: 404 })\n    }\n\n    // Handle different webhook topics\n    switch (topic) {\n      case 'PRODUCTS_CREATE':\n      case 'PRODUCTS_UPDATE':\n        await handleProductWebhook(user.id, session.shop, user.accessToken, topic)\n        break\n      \n      case 'PRODUCTS_DELETE':\n        await handleProductDelete(user.id, topic)\n        break\n      \n      default:\n        console.log(`Unhandled webhook topic: ${topic}`)\n    }\n\n    return json({ success: true })\n  } catch (error) {\n    console.error('Webhook error:', error)\n    \n    // Log the error\n    if (session?.shop) {\n      const user = await db.user.findUnique({\n        where: { shopId: session.shop },\n      })\n      \n      if (user) {\n        await db.log.create({\n          data: {\n            userId: user.id,\n            type: 'error',\n            message: `Webhook error: ${error instanceof Error ? error.message : 'Unknown error'}`,\n            error: error instanceof Error ? error.stack : String(error),\n            metadata: {\n              topic,\n              timestamp: new Date().toISOString(),\n            },\n          },\n        })\n      }\n    }\n\n    return json(\n      { error: error instanceof Error ? error.message : 'Unknown error' },\n      { status: 500 }\n    )\n  }\n}\n\nasync function handleProductWebhook(\n  userId: string,\n  shopDomain: string,\n  accessToken: string,\n  topic: string\n) {\n  try {\n    // Log the webhook trigger\n    await db.log.create({\n      data: {\n        userId,\n        type: 'webhook',\n        message: `Product webhook triggered: ${topic}`,\n        metadata: {\n          topic,\n          timestamp: new Date().toISOString(),\n        },\n      },\n    })\n\n    // For now, just log the webhook\n    // In a full implementation, you might want to:\n    // 1. Sync only the specific product that changed\n    // 2. Re-run field mapping and validation for that product\n    // 3. Update the audit score\n    // 4. Trigger a feed update if configured\n\n    console.log(`Product webhook received: ${topic} for shop: ${shopDomain}`)\n  } catch (error) {\n    console.error('Error handling product webhook:', error)\n    throw error\n  }\n}\n\nasync function handleProductDelete(userId: string, topic: string) {\n  try {\n    // Log the deletion\n    await db.log.create({\n      data: {\n        userId,\n        type: 'webhook',\n        message: `Product deleted: ${topic}`,\n        metadata: {\n          topic,\n          timestamp: new Date().toISOString(),\n        },\n      },\n    })\n\n    console.log(`Product deletion webhook: ${topic}`)\n  } catch (error) {\n    console.error('Error handling product deletion webhook:', error)\n    throw error\n  }\n}\n", "import { json, type LoaderFunctionArgs, type ActionFunctionArgs } from \"@remix-run/node\";\nimport { useLoaderData, useFetcher } from \"@remix-run/react\";\nimport { useState, useEffect } from \"react\";\nimport \"../styles/product-grid.css?__remix_sideEffect__\";\nimport {\n  Page,\n  Layout,\n  Card,\n  Text,\n  Button,\n  Banner,\n  DataTable,\n  Badge,\n  Toast,\n  InlineStack,\n  Box,\n  Modal,\n  TextField,\n  Select,\n  Collapsible,\n  ProgressBar,\n  BlockStack } from\n\"@shopify/polaris\";\nimport { authenticate } from \"../shopify.server\";\nimport { db } from \"../utils/db\";\nimport { HealthCheckModal } from \"../components/HealthCheckModal\";\nimport { getFieldInputType, FIELD_LABELS } from \"../utils/openaiSpec\";\n\n// TypeScript interfaces for type safety\ninterface Product {\n  id: string;\n  title: string;\n  description: string;\n  score: number;\n  gaps: string[];\n  rawProduct?: any; // Store raw Shopify product data\n  spec?: any; // Store mapped spec data\n  recommendations?: any; // Store persisted AI recommendations with status\n}\n\ninterface LogEntry {\n  id: string;\n  type: string;\n  message: string;\n  createdAt: string;\n}\n\ninterface User {\n  id: string;\n  shopId: string;\n  tier: string;\n  aiUsage: number;\n}\n\n// Dashboard metrics interfaces\ninterface DashboardMetrics {\n  aiReadinessScore: number;\n  totalProducts: number;\n  validProducts: number;\n  warningProducts: number;\n  invalidProducts: number;\n  productsPassedPercentage: number;\n  lastSyncTime: Date | null;\n  optimizationProgress: number;\n}\n\ninterface Audit {\n  id: string;\n  userId: string;\n  totalProducts: number;\n  score: number;\n  timestamp: Date;\n}\n\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\n  const requestId = Math.random().toString(36).substring(7);\n  const startTime = Date.now();\n\n  try {\n    console.log(`\uD83D\uDD0D [${requestId}] DEBUG - Starting authentication for request:`, request.url);\n    console.log(`\uD83D\uDD0D [${requestId}] DEBUG - Request headers:`, Object.fromEntries(request.headers.entries()));\n\n    const { session } = await authenticate.admin(request);\n\n    // Enhanced session debugging\n    console.log(`\uD83D\uDD0D [${requestId}] DEBUG - Session shop:`, session.shop);\n    console.log(`\uD83D\uDD0D [${requestId}] DEBUG - Session exists:`, !!session);\n    console.log(`\uD83D\uDD0D [${requestId}] DEBUG - Access token exists:`, !!session.accessToken);\n    console.log(`\uD83D\uDD0D [${requestId}] DEBUG - Session ID:`, session.id);\n    console.log(`\uD83D\uDD0D [${requestId}] DEBUG - Session scope:`, session.scope);\n    console.log(`\uD83D\uDD0D [${requestId}] DEBUG - Session isOnline:`, session.isOnline);\n    console.log(`\uD83D\uDD0D [${requestId}] DEBUG - Session expires:`, session.expires);\n    console.log(`\uD83D\uDD0D [${requestId}] DEBUG - Access token length:`, session.accessToken?.length);\n    console.log(`\uD83D\uDD0D [${requestId}] DEBUG - Access token prefix:`, session.accessToken?.substring(0, 15) + '...');\n\n    // Get user from database with error handling\n    let user = null;\n    let latestAudit = null;\n    let recentLogs = [];\n\n    try {\n      user = await db.user.findUnique({\n        where: { shopId: session.shop }\n      });\n\n      if (user) {\n        // Get latest audit if available\n        latestAudit = await db.audit.findFirst({\n          where: { userId: user.id },\n          orderBy: { timestamp: 'desc' }\n        });\n\n        // Clean up old error logs with raw details\n        await db.log.deleteMany({\n          where: {\n            userId: user.id,\n            message: {\n              contains: 'GraphQL Error'\n            }\n          }\n        });\n\n        // Get recent logs (filter out raw error details)\n        recentLogs = await db.log.findMany({\n          where: {\n            userId: user.id,\n            // Filter out logs with raw error details\n            message: {\n              not: {\n                contains: 'GraphQL Error'\n              }\n            }\n          },\n          orderBy: { createdAt: 'desc' },\n          take: 3\n        });\n      }\n    } catch (dbError) {\n      console.error('Database error in loader:', dbError);\n      // Continue with mock data if database fails\n    }\n\n    // Fetch real products with scores\n    let products: Product[] = [];\n    let totalProducts = 0;\n    let averageScore = 0;\n\n    if (user) {\n      try {\n        // Load offline session to fetch products\n        const { sessionStorage } = await import(\"../shopify.server\");\n        const offlineSessionId = `offline_${session.shop}`;\n        console.log(`\uD83D\uDD11 [${requestId}] Loading offline session:`, offlineSessionId);\n        const offlineSession = await sessionStorage.loadSession(offlineSessionId);\n        console.log(`\uD83D\uDD0D [${requestId}] Offline session found:`, !!offlineSession);\n        console.log(`\uD83D\uDD0D [${requestId}] Offline session has accessToken:`, !!offlineSession?.accessToken);\n\n        if (offlineSession) {\n          console.log(`\uD83D\uDD0D [${requestId}] Offline session details:`);\n          console.log(`\uD83D\uDD0D [${requestId}] - ID:`, offlineSession.id);\n          console.log(`\uD83D\uDD0D [${requestId}] - Shop:`, offlineSession.shop);\n          console.log(`\uD83D\uDD0D [${requestId}] - Scope:`, offlineSession.scope);\n          console.log(`\uD83D\uDD0D [${requestId}] - IsOnline:`, offlineSession.isOnline);\n          console.log(`\uD83D\uDD0D [${requestId}] - Expires:`, offlineSession.expires);\n          console.log(`\uD83D\uDD0D [${requestId}] - Access token length:`, offlineSession.accessToken?.length);\n          console.log(`\uD83D\uDD0D [${requestId}] - Access token prefix:`, offlineSession.accessToken?.substring(0, 15) + '...');\n        }\n\n        if (offlineSession?.accessToken) {\n          console.log('\u2705 Offline session loaded, has accessToken: true');\n          console.log('\uD83D\uDD11 Access token prefix:', offlineSession.accessToken.substring(0, 15) + '...');\n          console.log('\uD83D\uDD11 Access token length:', offlineSession.accessToken.length);\n\n          // Import services\n          const { ShopifySyncService } = await import(\"../utils/shopifySync\");\n          const { mapShopifyToSpec, calculateProductScore } = await import(\"../utils/fieldMapper\");\n\n          // Fetch products from Shopify\n          const syncService = new ShopifySyncService(session.shop, offlineSession.accessToken);\n          const shopifyProducts = await syncService.syncProducts(user.id);\n\n          // Fetch stored recommendations for all products\n          const storedProducts = await db.product.findMany({\n            where: { userId: user.id },\n            select: {\n              shopifyId: true,\n              recommendations: true\n            }\n          });\n\n          const recommendationsMap = new Map();\n          storedProducts.forEach((sp) => {\n            if (sp.recommendations) {\n              recommendationsMap.set(sp.shopifyId, sp.recommendations);\n            }\n          });\n\n          // Map to spec format and calculate scores\n          products = shopifyProducts.map((shopifyProduct: any) => {\n            const spec = mapShopifyToSpec(shopifyProduct);\n            const scoreData = calculateProductScore(spec);\n            const productId = shopifyProduct.id.replace('gid://shopify/Product/', '');\n\n            return {\n              id: productId,\n              title: shopifyProduct.title || 'Untitled Product',\n              description: shopifyProduct.description || 'No description',\n              score: scoreData.score,\n              gaps: scoreData.gaps,\n              rawProduct: shopifyProduct, // Store raw product for detail view\n              spec: spec, // Store mapped spec for recommendations\n              recommendations: recommendationsMap.get(productId) || null // Include stored recommendations\n            };\n          });\n\n          totalProducts = shopifyProducts.length;\n          averageScore = products.length > 0 ? Math.round(products.reduce((sum, p) => sum + p.score, 0) / products.length) : 0;\n        } else {\n          console.log('\u274C Offline session not found or no access token');\n          console.log('\uD83D\uDD0D Offline session exists:', !!offlineSession);\n          console.log('\uD83D\uDD0D Access token exists:', !!offlineSession?.accessToken);\n          console.log('\u26A0\uFE0F This usually means the app needs to be reinstalled to get a fresh session');\n        }\n      } catch (error) {\n        console.error('Error fetching products in loader:', error);\n\n        // Enhanced error analysis and handling\n        console.log(`\u274C [${requestId}] Error type:`, error?.constructor?.name);\n        console.log(`\u274C [${requestId}] Error message:`, error instanceof Error ? error.message : 'Unknown error');\n        console.log(`\u274C [${requestId}] Error stack:`, error instanceof Error ? error.stack : 'No stack trace');\n\n        // Check if it's a 401 authentication error\n        if (error instanceof Error && error.message.includes('401')) {\n          console.log(`\uD83D\uDD11 [${requestId}] Authentication error detected - clearing invalid session`);\n          console.log(`\u26A0\uFE0F [${requestId}] The access token is invalid/expired. Clearing session to force re-authentication.`);\n          console.log(`\uD83D\uDD0D [${requestId}] Error details:`, {\n            message: error.message,\n            stack: error.stack,\n            isGraphQLError: error.message.includes('GraphQL Error'),\n            is401Error: error.message.includes('401'),\n            errorType: error.constructor.name\n          });\n\n          try {\n            // Clear the invalid offline session from database\n            const { sessionStorage } = await import(\"../shopify.server\");\n            const offlineSessionId = `offline_${session.shop}`;\n            console.log(`\uD83D\uDDD1\uFE0F [${requestId}] Deleting invalid offline session:`, offlineSessionId);\n            await sessionStorage.deleteSession(offlineSessionId);\n            console.log(`\u2705 [${requestId}] Invalid session cleared - next page load will trigger fresh authentication`);\n\n            // Log the session cleanup to database\n            if (user) {\n              await db.log.create({\n                data: {\n                  userId: user.id,\n                  type: 'warning',\n                  message: `Invalid session cleared for shop ${session.shop} - 401 authentication error`,\n                  metadata: {\n                    requestId,\n                    sessionId: offlineSessionId,\n                    errorMessage: error.message,\n                    timestamp: new Date().toISOString()\n                  }\n                }\n              });\n            }\n          } catch (clearError) {\n            console.error(`\u274C [${requestId}] Error clearing session:`, clearError);\n          }\n        } else {\n          // Log non-401 errors for debugging\n          console.log(`\uD83D\uDD0D [${requestId}] Non-authentication error detected:`, {\n            errorType: error?.constructor?.name,\n            message: error instanceof Error ? error.message : 'Unknown error',\n            isResponse: error instanceof Response,\n            responseStatus: error instanceof Response ? error.status : 'N/A'\n          });\n        }\n\n        // Fall back to mock data if there's an error\n        products = [\n        {\n          id: \"1\",\n          title: \"Sample Product 1\",\n          description: \"Basic product description\",\n          score: 75,\n          gaps: [\"material\", \"weight\"]\n        },\n        {\n          id: \"2\",\n          title: \"Sample Product 2\",\n          description: \"Another product with minimal details\",\n          score: 60,\n          gaps: [\"material\", \"dimensions\", \"use_cases\"]\n        },\n        {\n          id: \"3\",\n          title: \"Sample Product 3\",\n          description: \"Well-described product with comprehensive details\",\n          score: 95,\n          gaps: []\n        }];\n\n      }\n    }\n\n    // Calculate dashboard metrics\n    const calculateDashboardMetrics = (products: Product[], user: User | null): DashboardMetrics => {\n      const totalProducts = products.length;\n      const validProducts = products.filter((p) => p.score >= 90).length;\n      const warningProducts = products.filter((p) => p.score >= 70 && p.score < 90).length;\n      const invalidProducts = products.filter((p) => p.score < 70).length;\n      const productsPassedPercentage = totalProducts > 0 ? Math.round(validProducts / totalProducts * 100) : 0;\n      const aiReadinessScore = Math.round(averageScore);\n      const optimizationProgress = Math.round(averageScore); // Use average score as optimization progress\n\n      // Get last sync time from user's last audit\n      let lastSyncTime: Date | null = null;\n      if (user) {\n        // This would need to be fetched from the database, for now use current time\n        lastSyncTime = new Date();\n      }\n\n      return {\n        aiReadinessScore,\n        totalProducts,\n        validProducts,\n        warningProducts,\n        invalidProducts,\n        productsPassedPercentage,\n        lastSyncTime,\n        optimizationProgress\n      };\n    };\n\n    const dashboardMetrics = calculateDashboardMetrics(products, user);\n\n    const endTime = Date.now();\n    const duration = endTime - startTime;\n\n    console.log(`\u2705 [${requestId}] Loader completed successfully in ${duration}ms`);\n    console.log(`\uD83D\uDCCA [${requestId}] Results:`, {\n      productsCount: products.length,\n      totalProducts,\n      averageScore,\n      userExists: !!user,\n      lastSync: recentLogs.find((log: any) => log.type === 'sync')?.createdAt || null,\n      recentLogsCount: recentLogs.length\n    });\n\n    return json({\n      shop: session.shop,\n      user,\n      products: products,\n      totalProducts: totalProducts,\n      averageScore: averageScore,\n      dashboardMetrics,\n      lastSync: recentLogs.find((log: any) => log.type === 'sync')?.createdAt || null,\n      recentLogs: recentLogs.map((log: any): LogEntry => ({\n        id: log.id,\n        type: log.type,\n        message: log.message,\n        createdAt: log.createdAt\n      }))\n    });\n  } catch (error) {\n    console.error('\u274C ERROR in index loader:', error);\n    console.error('\u274C ERROR details:', {\n      message: (error as any).message,\n      stack: (error as any).stack,\n      name: (error as any).name\n    });\n\n    // If it's a Response (OAuth redirect), re-throw it to allow the redirect to happen\n    if (error instanceof Response) {\n      console.log('\uD83D\uDD04 Re-throwing OAuth redirect response');\n      throw error;\n    }\n\n    // For other errors, return minimal data\n    return json({\n      shop: 'unknown',\n      products: [],\n      user: null,\n      totalProducts: 0,\n      averageScore: 0,\n      lastSync: null,\n      recentLogs: []\n    });\n  }\n};\n\nexport const action = async ({ request }: ActionFunctionArgs) => {\n  console.log('\uD83C\uDFAF INDEX ACTION CALLED');\n\n  try {\n    const { admin, session } = await authenticate.admin(request);\n    console.log('\u2705 Authentication successful in index action');\n    console.log('\uD83D\uDD11 Admin API client available:', !!admin);\n    console.log('\uD83D\uDCCD Session shop:', session.shop);\n\n    const formData = await request.formData();\n    const actionType = formData.get(\"action\");\n\n    if (actionType === \"sync\") {\n      console.log('\uD83D\uDE80 Starting sync in index action');\n\n      // Get user from database\n      const user = await db.user.findUnique({\n        where: { shopId: session.shop }\n      });\n\n      if (!user) {\n        console.log('\u274C User not found for shop:', session.shop);\n        return json({ success: false, error: \"User not found\" }, { status: 404 });\n      }\n\n      console.log('\uD83D\uDC64 User ID:', user.id);\n\n      // Load the offline session from storage\n      const { sessionStorage } = await import(\"../shopify.server\");\n      const offlineSessionId = `offline_${session.shop}`;\n      console.log('\uD83D\uDD11 Loading offline session:', offlineSessionId);\n\n      const offlineSession = await sessionStorage.loadSession(offlineSessionId);\n\n      if (!offlineSession) {\n        console.log('\u274C Offline session not found');\n        return json({ success: false, error: \"Offline session not found. Please reinstall the app.\" }, { status: 401 });\n      }\n\n      console.log('\u2705 Offline session loaded, has accessToken:', !!offlineSession.accessToken);\n      console.log('\uD83D\uDD11 Access token prefix:', offlineSession.accessToken?.substring(0, 15) + '...');\n      console.log('\uD83D\uDD11 Access token length:', offlineSession.accessToken?.length);\n      console.log('\uD83D\uDD0D Session scope:', offlineSession.scope);\n      console.log('\uD83D\uDD0D Session isOnline:', offlineSession.isOnline);\n\n      // Create a GraphQL client with the offline access token\n      const { GraphQLClient } = await import('graphql-request');\n      const graphqlClient = new GraphQLClient(\n        `https://${session.shop}/admin/api/2025-10/graphql`,\n        {\n          headers: {\n            'X-Shopify-Access-Token': offlineSession.accessToken!,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      console.log('\uD83D\uDCE6 Starting product sync with offline access token...');\n\n      const PRODUCTS_QUERY = `\n        query getProducts($first: Int!, $after: String) {\n          products(first: $first, after: $after) {\n            pageInfo {\n              hasNextPage\n              endCursor\n            }\n            edges {\n              node {\n                id\n                title\n                description\n                handle\n                productType\n                vendor\n                tags\n                variants(first: 100) {\n                  edges {\n                    node {\n                      id\n                      title\n                      price\n                      compareAtPrice\n                      sku\n                      inventoryQuantity\n                      availableForSale\n                    }\n                  }\n                }\n                metafields(first: 100) {\n                  edges {\n                    node {\n                      id\n                      namespace\n                      key\n                      value\n                      type\n                    }\n                  }\n                }\n                images(first: 10) {\n                  edges {\n                    node {\n                      id\n                      url\n                      altText\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      `;\n\n      const allProducts: any[] = [];\n      let hasNextPage = true;\n      let after: string | undefined;\n      let pageCount = 0;\n\n      while (hasNextPage) {\n        pageCount++;\n        console.log(`\uD83D\uDCC4 Fetching page ${pageCount}${after ? ` (after cursor)` : ' (first page)'}`);\n\n        const response = (await graphqlClient.request(PRODUCTS_QUERY, {\n          first: 250,\n          after\n        })) as any;\n\n        console.log('\uD83D\uDCE6 Products in this page:', response.products?.edges?.length || 0);\n\n        if (response.products?.edges) {\n          allProducts.push(...response.products.edges);\n        }\n\n        hasNextPage = response.products?.pageInfo?.hasNextPage || false;\n        after = response.products?.pageInfo?.endCursor;\n\n        if (hasNextPage) {\n          console.log('\u23F3 Waiting 500ms before next request...');\n          await new Promise((resolve) => setTimeout(resolve, 500));\n        }\n      }\n\n      console.log('\u2705 Product sync completed:', allProducts.length, 'products');\n\n      // Log the sync operation\n      await db.log.create({\n        data: {\n          userId: user.id,\n          type: 'sync',\n          message: `Synchronized ${allProducts.length} products from Shopify`,\n          metadata: {\n            productsCount: allProducts.length,\n            timestamp: new Date().toISOString()\n          }\n        }\n      });\n\n      // Create an audit record for this sync\n      console.log('\uD83D\uDCDD Creating audit record...');\n      const audit = await db.audit.create({\n        data: {\n          userId: user.id,\n          score: 0, // Will be calculated after field mapping\n          totalProducts: allProducts.length,\n          validProducts: 0, // Will be calculated after validation\n          gaps: [] // Will be populated after field mapping and validation\n        }\n      });\n      console.log('\u2705 Audit record created:', audit.id);\n\n      return json({\n        success: true,\n        message: `Successfully synced ${allProducts.length} products`,\n        data: {\n          productsCount: allProducts.length,\n          auditId: audit.id\n        }\n      });\n    }\n\n\n    if (actionType === \"generate-recommendations\") {\n      console.log('\uD83E\uDD16 Generating AI recommendations for single product');\n\n      const user = await db.user.findUnique({\n        where: { shopId: session.shop }\n      });\n\n      if (!user) {\n        return json({ success: false, error: \"User not found\" }, { status: 404 });\n      }\n\n      const productId = formData.get(\"productId\") as string;\n      console.log('\uD83C\uDFAF Product ID:', productId);\n\n      const forceRegenerate = formData.get(\"forceRegenerate\") === \"true\";\n\n      // Check if we have existing recommendations for this product (unless forcing regeneration)\n      if (!forceRegenerate) {\n        const existingProduct = await db.product.findFirst({\n          where: {\n            userId: user.id,\n            shopifyId: productId\n          }\n        });\n\n        if (existingProduct?.recommendations) {\n          const recData = existingProduct.recommendations as any;\n          console.log('\uD83D\uDCCB Returning existing recommendations for product:', productId);\n          return json({\n            success: true,\n            recommendations: recData.recommendations || [],\n            isExisting: true\n          });\n        }\n      }\n\n      // Load offline session\n      const { sessionStorage } = await import(\"../shopify.server\");\n      const offlineSessionId = `offline_${session.shop}`;\n      const offlineSession = await sessionStorage.loadSession(offlineSessionId);\n\n      if (!offlineSession?.accessToken) {\n        return json({\n          success: false,\n          error: \"Offline session not found. Please reinstall the app.\"\n        }, { status: 401 });\n      }\n\n      // Fetch the specific product\n      const { ShopifySyncService } = await import(\"../utils/shopifySync\");\n      const { AIEnrichmentService } = await import(\"../utils/aiEnrich\");\n\n      const syncService = new ShopifySyncService(session.shop, offlineSession.accessToken);\n      const allProducts = await syncService.syncProducts(user.id);\n      const product = allProducts.find((p) => p.id.includes(productId));\n\n      if (!product) {\n        return json({ success: false, error: \"Product not found\" }, { status: 404 });\n      }\n\n      // Get the product's gaps from the health score system\n      const { mapShopifyToSpec, calculateProductScore } = await import(\"../utils/fieldMapper\");\n      const spec = mapShopifyToSpec(product);\n      const scoreData = calculateProductScore(spec);\n      const gaps = scoreData.gaps;\n\n      console.log('\uD83C\uDFAF Product gaps identified:', gaps);\n\n      // Generate AI recommendations for all identified gaps (gap-driven approach)\n      const enrichmentService = new AIEnrichmentService();\n      const result = await enrichmentService.enrichProduct(user.id, product, gaps);\n\n      console.log('\u2705 Generated recommendations:', result.improvements.length);\n\n      // Store recommendations in database with status tracking\n      const recommendationData = {\n        recommendations: result.improvements.map((rec: any) => ({\n          ...rec,\n          status: 'pending' // pending, approved, rejected, applied\n        })),\n        generatedAt: new Date().toISOString(),\n        lastUpdated: new Date().toISOString()\n      };\n\n      // Create or update product record with recommendations\n      await db.product.upsert({\n        where: {\n          userId_shopifyId: {\n            userId: user.id,\n            shopifyId: productId\n          }\n        },\n        create: {\n          userId: user.id,\n          shopifyId: productId,\n          title: product.title,\n          recommendations: recommendationData\n        },\n        update: {\n          recommendations: recommendationData\n        }\n      });\n\n      console.log('\uD83D\uDCBE Stored recommendations in database for product:', productId);\n\n      return json({\n        success: true,\n        recommendations: recommendationData.recommendations,\n        isExisting: false\n      });\n    }\n\n    if (actionType === \"apply-recommendations\") {\n      console.log('\uD83D\uDCDD Applying approved recommendations to Shopify');\n\n      const user = await db.user.findUnique({\n        where: { shopId: session.shop }\n      });\n\n      if (!user) {\n        return json({ success: false, error: \"User not found\" }, { status: 404 });\n      }\n\n      const productId = formData.get(\"productId\") as string;\n      const approvedRecommendationsJson = formData.get(\"approvedRecommendations\") as string;\n      const approvedRecommendations = JSON.parse(approvedRecommendationsJson);\n\n      console.log('\uD83C\uDFAF Product ID:', productId);\n      console.log('\u2705 Approved recommendations:', approvedRecommendations.length);\n      console.log('\uD83D\uDCCB Approved recommendation fields:', approvedRecommendations.map((r: any) => r.field));\n\n      // Validation: Ensure we only process approved recommendations\n      if (!Array.isArray(approvedRecommendations) || approvedRecommendations.length === 0) {\n        return json({\n          success: false,\n          error: \"No approved recommendations provided\"\n        }, { status: 400 });\n      }\n\n      // Get current stored recommendations to update their status\n      const productRecord = await db.product.findFirst({\n        where: {\n          userId: user.id,\n          shopifyId: productId\n        }\n      });\n\n      let updatedRecommendationData = null;\n      if (productRecord?.recommendations) {\n        const recData = productRecord.recommendations as any;\n        // Update status of approved recommendations to 'applied'\n        const approvedFields = approvedRecommendations.map((r: any) => r.field);\n        updatedRecommendationData = {\n          ...recData,\n          recommendations: recData.recommendations.map((rec: any) => ({\n            ...rec,\n            status: approvedFields.includes(rec.field) ? 'applied' : rec.status\n          })),\n          lastUpdated: new Date().toISOString()\n        };\n      }\n\n      // Load offline session\n      const { sessionStorage } = await import(\"../shopify.server\");\n      const offlineSessionId = `offline_${session.shop}`;\n      const offlineSession = await sessionStorage.loadSession(offlineSessionId);\n\n      if (!offlineSession?.accessToken) {\n        return json({\n          success: false,\n          error: \"Offline session not found. Please reinstall the app.\"\n        }, { status: 401 });\n      }\n\n      // Fetch the product and calculate initial score\n      const { ShopifySyncService } = await import(\"../utils/shopifySync\");\n      const { mapShopifyToSpec, calculateProductScore } = await import(\"../utils/fieldMapper\");\n\n      const syncService = new ShopifySyncService(session.shop, offlineSession.accessToken);\n      const allProducts = await syncService.syncProducts(user.id);\n      const product = allProducts.find((p) => p.id.includes(productId));\n\n      if (!product) {\n        return json({ success: false, error: \"Product not found\" }, { status: 404 });\n      }\n\n      // Calculate initial score for comparison\n      const initialSpec = mapShopifyToSpec(product);\n      const initialScore = calculateProductScore(initialSpec).score;\n      console.log('\uD83D\uDCCA Initial product score:', initialScore);\n\n      // Apply approved changes to Shopify\n      const { AIEnrichmentService } = await import(\"../utils/aiEnrich\");\n      const enrichmentService = new AIEnrichmentService();\n\n      // Create a partial enrichment result with only approved improvements\n      const partialResult = {\n        originalProduct: product,\n        enrichedSpec: {} as any,\n        improvements: approvedRecommendations,\n        totalUsage: 0,\n        errors: []\n      };\n\n      const success = await enrichmentService.applyEnrichmentToShopify(\n        user.id,\n        session.shop,\n        offlineSession.accessToken,\n        partialResult\n      );\n\n      console.log('\u2705 Applied changes to Shopify:', success);\n\n      // Validate score improvement by re-fetching and recalculating\n      let finalScore = initialScore;\n      if (success) {\n        try {\n          // Re-fetch the product to get updated data\n          const updatedProducts = await syncService.syncProducts(user.id);\n          const updatedProduct = updatedProducts.find((p) => p.id.includes(productId));\n\n          if (updatedProduct) {\n            const updatedSpec = mapShopifyToSpec(updatedProduct);\n            finalScore = calculateProductScore(updatedSpec).score;\n            console.log('\uD83D\uDCCA Final product score:', finalScore);\n            console.log('\uD83D\uDCC8 Score improvement:', finalScore - initialScore);\n          }\n        } catch (error) {\n          console.warn('Could not validate score improvement:', error);\n        }\n      }\n\n      // Update recommendation status in database\n      if (updatedRecommendationData && productRecord) {\n        await db.product.update({\n          where: { id: productRecord.id },\n          data: {\n            recommendations: updatedRecommendationData\n          }\n        });\n        console.log('\uD83D\uDCBE Updated recommendation status to applied in database');\n      }\n\n      // Log the operation\n      await db.log.create({\n        data: {\n          userId: user.id,\n          type: 'enrichment',\n          message: `Applied ${approvedRecommendations.length} approved AI recommendations to product ${productId}`,\n          metadata: {\n            productId,\n            approvedCount: approvedRecommendations.length,\n            timestamp: new Date().toISOString()\n          }\n        }\n      });\n\n      return json({\n        success: true,\n        appliedCount: approvedRecommendations.length,\n        scoreImprovement: {\n          initial: initialScore,\n          final: finalScore,\n          improvement: finalScore - initialScore\n        }\n      });\n    }\n\n    if (actionType === \"save-customer-input\") {\n      console.log('\uD83D\uDCBE Saving customer input data');\n\n      const user = await db.user.findUnique({\n        where: { shopId: session.shop }\n      });\n\n      if (!user) {\n        return json({ success: false, error: \"User not found\" }, { status: 404 });\n      }\n\n      const productId = formData.get(\"productId\") as string;\n      const inputDataJson = formData.get(\"inputData\") as string;\n      const inputData = JSON.parse(inputDataJson);\n\n      console.log('\uD83C\uDFAF Product ID:', productId);\n      console.log('\uD83D\uDCDD Input data:', inputData);\n\n      // Load offline session\n      const { sessionStorage } = await import(\"../shopify.server\");\n      const offlineSessionId = `offline_${session.shop}`;\n      const offlineSession = await sessionStorage.loadSession(offlineSessionId);\n\n      if (!offlineSession?.accessToken) {\n        return json({\n          success: false,\n          error: \"Offline session not found. Please reinstall the app.\"\n        }, { status: 401 });\n      }\n\n      // Apply customer input to Shopify metafields\n      const { GraphQLClient } = await import('graphql-request');\n      const graphqlClient = new GraphQLClient(\n        `https://${session.shop}/admin/api/2025-10/graphql`,\n        {\n          headers: {\n            'X-Shopify-Access-Token': offlineSession.accessToken,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      let appliedCount = 0;\n      const appliedFields: string[] = [];\n\n      // Process each input field\n      for (const [field, value] of Object.entries(inputData)) {\n        try {\n          let metafieldValue = value as string;\n          let metafieldType = 'single_line_text_field';\n\n          // Handle special field types\n          if (field.startsWith('dimensions_')) {\n            // Skip individual dimension components, we'll handle dimensions as a group\n            continue;\n          } else if (field === 'specifications' || field === 'warranty' || field === 'return_policy') {\n            metafieldType = 'multi_line_text_field';\n          }\n\n          const CREATE_METAFIELD_MUTATION = `\n            mutation metafieldsSet($metafields: [MetafieldsSetInput!]!) {\n              metafieldsSet(metafields: $metafields) {\n                metafields {\n                  id\n                  namespace\n                  key\n                  value\n                }\n                userErrors {\n                  field\n                  message\n                }\n              }\n            }\n          `;\n\n          const response = (await graphqlClient.request(CREATE_METAFIELD_MUTATION, {\n            metafields: [\n            {\n              ownerId: `gid://shopify/Product/${productId}`,\n              namespace: 'catalogai',\n              key: field,\n              type: metafieldType,\n              value: metafieldValue\n            }]\n\n          })) as any;\n\n          if (!response.metafieldsSet.userErrors?.length) {\n            appliedCount++;\n            appliedFields.push(field);\n            console.log(`\u2705 Applied ${field}: ${metafieldValue}`);\n          } else {\n            console.error(`\u274C Error applying ${field}:`, response.metafieldsSet.userErrors);\n          }\n        } catch (error) {\n          console.error(`\u274C Error applying ${field}:`, error);\n        }\n      }\n\n      // Handle dimensions separately if provided\n      const dimensionFields = ['dimensions_length', 'dimensions_width', 'dimensions_height'];\n      const dimensionData = dimensionFields.reduce((acc, key) => {\n        if (inputData[key]) {\n          const dimKey = key.replace('dimensions_', '');\n          acc[dimKey] = inputData[key];\n        }\n        return acc;\n      }, {} as Record<string, string>);\n\n      if (Object.keys(dimensionData).length > 0) {\n        try {\n          const CREATE_METAFIELD_MUTATION = `\n            mutation metafieldsSet($metafields: [MetafieldsSetInput!]!) {\n              metafieldsSet(metafields: $metafields) {\n                metafields {\n                  id\n                  namespace\n                  key\n                  value\n                }\n                userErrors {\n                  field\n                  message\n                }\n              }\n            }\n          `;\n\n          const response = (await graphqlClient.request(CREATE_METAFIELD_MUTATION, {\n            metafields: [\n            {\n              ownerId: `gid://shopify/Product/${productId}`,\n              namespace: 'catalogai',\n              key: 'dimensions',\n              type: 'json',\n              value: JSON.stringify(dimensionData)\n            }]\n\n          })) as any;\n\n          if (!response.metafieldsSet.userErrors?.length) {\n            appliedCount++;\n            appliedFields.push('dimensions');\n            console.log(`\u2705 Applied dimensions:`, dimensionData);\n          }\n        } catch (error) {\n          console.error('\u274C Error applying dimensions:', error);\n        }\n      }\n\n      // Log the operation\n      await db.log.create({\n        data: {\n          userId: user.id,\n          type: 'customer_input',\n          message: `Applied ${appliedCount} customer input fields to product ${productId}`,\n          metadata: {\n            productId,\n            appliedFields,\n            appliedCount,\n            timestamp: new Date().toISOString()\n          }\n        }\n      });\n\n      return json({\n        success: true,\n        appliedCount,\n        appliedFields,\n        message: `Successfully saved ${appliedCount} fields to your product!`\n      });\n    }\n\n    return json({ success: true });\n  } catch (error) {\n    console.error('\u274C Error in index action:', error);\n\n    // If it's a Response (OAuth redirect), re-throw it\n    if (error instanceof Response) {\n      console.log('\uD83D\uDD04 Re-throwing OAuth redirect response');\n      throw error;\n    }\n\n    // Create user-friendly error message\n    let userFriendlyError = 'Sync failed. Please try again.';\n\n    if (error instanceof Error) {\n      if (error.message.includes('401') || error.message.includes('Unauthorized')) {\n        userFriendlyError = 'Authentication failed. Please reinstall the app.';\n      } else if (error.message.includes('403') || error.message.includes('Forbidden')) {\n        userFriendlyError = 'Insufficient permissions. Please check app permissions.';\n      } else if (error.message.includes('429') || error.message.includes('rate limit')) {\n        userFriendlyError = 'Rate limit exceeded. Please try again in a few minutes.';\n      } else if (error.message.includes('GraphQL')) {\n        userFriendlyError = 'API connection failed. Please try again.';\n      }\n    }\n\n    // Log the error to database with user-friendly message\n    try {\n      const { session } = await authenticate.admin(request);\n      const user = await db.user.findUnique({\n        where: { shopId: session.shop }\n      });\n\n      if (user) {\n        await db.log.create({\n          data: {\n            userId: user.id,\n            type: 'error',\n            message: userFriendlyError,\n            error: error instanceof Error ? error.message : 'Unknown error',\n            metadata: {\n              timestamp: new Date().toISOString(),\n              action: 'sync'\n            }\n          }\n        });\n      }\n    } catch (logError) {\n      console.error('Failed to log error:', logError);\n    }\n\n    return json(\n      {\n        success: false,\n        error: userFriendlyError\n      },\n      { status: 500 }\n    );\n  }\n};\n\ninterface LoaderData {\n  shop: string;\n  products: Product[];\n  totalProducts: number;\n  averageScore: number;\n  dashboardMetrics: DashboardMetrics;\n  lastSync: string | null;\n  recentLogs: LogEntry[];\n  user: User | null;\n}\n\nexport default function Index() {\n  const loaderData = useLoaderData<LoaderData>();\n  const { shop, totalProducts, averageScore, dashboardMetrics, lastSync, recentLogs, user } = loaderData;\n\n  // Local state for products that can be updated\n  const [products, setProducts] = useState<Product[]>(loaderData.products);\n  const [isSyncing, setIsSyncing] = useState(false);\n  const [isHealthChecking, setIsHealthChecking] = useState(false);\n  const [toastActive, setToastActive] = useState(false);\n  const [toastMessage, setToastMessage] = useState(\"\");\n  const [healthModalOpen, setHealthModalOpen] = useState(false);\n  const [healthCheckJobId, setHealthCheckJobId] = useState<string | undefined>();\n  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);\n  const [productModalOpen, setProductModalOpen] = useState(false);\n  const [recommendations, setRecommendations] = useState<any[]>([]);\n  const [approvalState, setApprovalState] = useState<Record<string, boolean>>({});\n  const [isGeneratingRecommendations, setIsGeneratingRecommendations] = useState(false);\n  const [isApplyingChanges, setIsApplyingChanges] = useState(false);\n  const [justAppliedChanges, setJustAppliedChanges] = useState(false);\n\n  // Customer input form state\n  const [customerInputOpen, setCustomerInputOpen] = useState(false);\n  const [customerInputData, setCustomerInputData] = useState<Record<string, string>>({});\n  const [isSavingCustomerInput, setIsSavingCustomerInput] = useState(false);\n\n  // Filter state for health dashboard\n  const [showOnlyLowHealth, setShowOnlyLowHealth] = useState(false);\n  const [showOnlyNoDescription, setShowOnlyNoDescription] = useState(false);\n\n  const syncFetcher = useFetcher();\n  const healthCheckFetcher = useFetcher();\n  const recommendationFetcher = useFetcher();\n  const customerInputFetcher = useFetcher();\n\n  // Update local products state when loader data changes (e.g., after sync)\n  useEffect(() => {\n    setProducts(loaderData.products);\n  }, [loaderData.products]);\n\n  const handleSync = () => {\n    setIsSyncing(true);\n    syncFetcher.submit(\n      { action: \"sync\" },\n      { method: \"post\" } // Same route action, no need to specify action path\n    );\n  };\n\n\n  const handleHealthCheck = () => {\n    setIsHealthChecking(true);\n    healthCheckFetcher.submit(\n      {},\n      { method: \"get\", action: \"/api/health-check\" }\n    );\n  };\n\n  const handleProductClick = (product: Product) => {\n    setSelectedProduct(product);\n    setProductModalOpen(true);\n    setJustAppliedChanges(false);\n\n    // Load existing recommendations if available\n    if (product.recommendations?.recommendations) {\n      console.log('\uD83D\uDCCB Loading existing recommendations for product:', product.id);\n      const existingRecs = product.recommendations.recommendations;\n      setRecommendations(existingRecs);\n\n      // Set approval state based on existing status\n      const approvalState: Record<string, boolean> = {};\n      existingRecs.forEach((rec: any) => {\n        if (rec.status === 'approved' || rec.status === 'applied') {\n          approvalState[rec.field] = true;\n        } else if (rec.status === 'rejected') {\n          approvalState[rec.field] = false;\n        }\n        // pending recommendations remain undefined in approvalState\n      });\n      setApprovalState(approvalState);\n    } else {\n      setRecommendations([]);\n      setApprovalState({});\n    }\n  };\n\n  const handleGenerateRecommendations = () => {\n    if (!selectedProduct) return;\n\n    setIsGeneratingRecommendations(true);\n    setJustAppliedChanges(false); // Reset the applied changes flag\n    recommendationFetcher.submit(\n      {\n        action: \"generate-recommendations\",\n        productId: selectedProduct.id,\n        forceRegenerate: recommendations.length > 0 ? \"true\" : \"false\" // Force regenerate if called from regenerate button\n      },\n      { method: \"post\" }\n    );\n  };\n\n  const handleToggleApproval = (fieldName: string, newState?: boolean) => {\n    setApprovalState((prev) => ({\n      ...prev,\n      [fieldName]: newState !== undefined ? newState : prev[fieldName] === true ? false : prev[fieldName] === false ? undefined : true\n    }));\n  };\n\n  const handleApplyChanges = () => {\n    if (!selectedProduct) return;\n\n    const approvedRecommendations = recommendations.filter(\n      (rec) => approvalState[rec.field] === true\n    );\n\n    const rejectedRecommendations = recommendations.filter(\n      (rec) => approvalState[rec.field] === false\n    );\n\n    const pendingRecommendations = recommendations.filter(\n      (rec) => approvalState[rec.field] === undefined\n    );\n\n    console.log('\uD83D\uDCCA Approval Summary:', {\n      total: recommendations.length,\n      approved: approvedRecommendations.length,\n      rejected: rejectedRecommendations.length,\n      pending: pendingRecommendations.length,\n      approvedFields: approvedRecommendations.map((r) => r.field),\n      rejectedFields: rejectedRecommendations.map((r) => r.field)\n    });\n\n    if (approvedRecommendations.length === 0) {\n      setToastMessage('Please approve at least one recommendation before applying changes');\n      setToastActive(true);\n      return;\n    }\n\n    console.log('\uD83D\uDE80 Starting apply changes...');\n    console.log('\uD83D\uDCCB Approved recommendations to apply:', approvedRecommendations);\n\n    setIsApplyingChanges(true);\n    recommendationFetcher.submit(\n      {\n        action: \"apply-recommendations\",\n        productId: selectedProduct.id,\n        approvedRecommendations: JSON.stringify(approvedRecommendations)\n      },\n      { method: \"post\" }\n    );\n  };\n\n  // Handle sync completion\n  if (syncFetcher.data && isSyncing) {\n    const data = syncFetcher.data as any;\n    if (data.success) {\n      setToastMessage(`Successfully synced ${data.data?.productsCount || 0} products`);\n      setToastActive(true);\n    } else {\n      setToastMessage(`Sync failed: ${data.error}`);\n      setToastActive(true);\n    }\n    setIsSyncing(false);\n  }\n\n\n  // Handle health check completion\n  if (healthCheckFetcher.data && isHealthChecking) {\n    const data = healthCheckFetcher.data as any;\n    if (data.success) {\n      setHealthCheckJobId(data.jobId);\n      setHealthModalOpen(true);\n      setToastMessage(`Health scan initiated - analyzing ${data.currentScore}% current score`);\n      setToastActive(true);\n    } else {\n      setToastMessage(`Health check failed: ${data.error}`);\n      setToastActive(true);\n    }\n    setIsHealthChecking(false);\n  }\n\n  // Handle recommendation generation completion\n  if (recommendationFetcher.data && isGeneratingRecommendations) {\n    const data = recommendationFetcher.data as any;\n    if (data.success && data.recommendations) {\n      setRecommendations(data.recommendations);\n\n      if (data.isExisting) {\n        setToastMessage(`Loaded existing ${data.recommendations.length} AI recommendations`);\n      } else {\n        setToastMessage(`Generated ${data.recommendations.length} new AI recommendations`);\n      }\n      setToastActive(true);\n\n      // Update approval state based on stored status\n      if (data.isExisting) {\n        const approvalState: Record<string, boolean> = {};\n        data.recommendations.forEach((rec: any) => {\n          if (rec.status === 'approved' || rec.status === 'applied') {\n            approvalState[rec.field] = true;\n          } else if (rec.status === 'rejected') {\n            approvalState[rec.field] = false;\n          }\n        });\n        setApprovalState(approvalState);\n      }\n    } else if (data.error) {\n      setToastMessage(`Failed to generate recommendations: ${data.error}`);\n      setToastActive(true);\n    }\n    setIsGeneratingRecommendations(false);\n  }\n\n  // Handle apply changes completion\n  if (recommendationFetcher.data && isApplyingChanges) {\n    const data = recommendationFetcher.data as any;\n    console.log('\uD83D\uDD0D Apply changes response:', data);\n    console.log('\uD83D\uDD0D Response type:', typeof data);\n    console.log('\uD83D\uDD0D Response keys:', Object.keys(data));\n\n    if (data.success && selectedProduct) {\n      // Get the applied field names for personalized celebrations\n      const appliedFields = recommendations.\n      filter((rec) => approvalState[rec.field] === true).\n      map((rec) => rec.field);\n\n      // Field-specific celebration messages\n      const getFieldCelebration = (field: string): string => {\n        const celebrations: Record<string, string> = {\n          keywords: \"\uD83C\uDFAF Awesome! Keywords added - your product is now more discoverable!\",\n          description: \"\uD83D\uDCDD Great work! Enhanced description will help customers understand your product better!\",\n          features: \"\u2728 Fantastic! Feature list added - customers can see what makes your product special!\",\n          use_cases: \"\uD83D\uDCA1 Perfect! Use cases added - customers now know how to use your product!\",\n          target_audience: \"\uD83D\uDC65 Excellent! Target audience defined - your marketing just got more focused!\",\n          material: \"\uD83D\uDD2C Nice! Material info added - customers can make informed decisions!\",\n          dimensions: \"\uD83D\uDCCF Great! Dimensions added - no more size surprises for customers!\",\n          weight: \"\u2696\uFE0F Perfect! Weight information helps with shipping expectations!\",\n          color: \"\uD83C\uDFA8 Colorful! Color info added - visual buyers will love this!\",\n          brand: \"\uD83C\uDFF7\uFE0F Brand power! Brand info strengthens customer trust!\",\n          warranty: \"\uD83D\uDEE1\uFE0F Security boost! Warranty info builds customer confidence!\",\n          sku: \"\uD83D\uDCE6 Organized! SKU added for better inventory management!\",\n          tags: \"\uD83C\uDFF7\uFE0F Tagged! Product categorization just got better!\",\n          ai_search_queries: \"\uD83E\uDD16 AI-ready! Search queries optimized for AI discovery!\",\n          semantic_description: \"\uD83E\uDDE0 Smart! AI-optimized description for better search matching!\"\n        };\n        return celebrations[field] || `\u2705 ${field.charAt(0).toUpperCase() + field.slice(1).replace(/_/g, ' ')} updated!`;\n      };\n\n      // Create celebration message based on applied fields\n      let message = '';\n      if (appliedFields.length === 1) {\n        message = getFieldCelebration(appliedFields[0]);\n      } else if (appliedFields.length === 2) {\n        message = `\uD83C\uDF89 Double win! Updated ${appliedFields.map((f) => f.replace(/_/g, ' ')).join(' and ')}!`;\n      } else if (appliedFields.length >= 3) {\n        message = `\uD83D\uDE80 Amazing progress! Applied ${appliedFields.length} improvements - you're on fire!`;\n      }\n\n      // Get the final score from response or calculate improvement\n      let finalScore = selectedProduct.score;\n      let pointsEarned = 0;\n\n      if (data.scoreImprovement) {\n        finalScore = data.scoreImprovement.final;\n        const improvement = data.scoreImprovement.improvement;\n        pointsEarned = appliedFields.length * 15; // Estimate points based on fields\n\n        if (improvement > 0) {\n          message += ` \uD83D\uDCC8 Score: ${data.scoreImprovement.initial}% \u2192 ${data.scoreImprovement.final}% (+${improvement.toFixed(0)}%) | +${pointsEarned} points!`;\n        } else {\n          message += ` \uD83D\uDCCA Score: ${data.scoreImprovement.final}%`;\n        }\n      }\n\n      // Update gaps by removing applied fields\n      const updatedGaps = selectedProduct.gaps.filter((gap) => !appliedFields.includes(gap));\n\n      // Update selected product with new score and gaps\n      const updatedSelectedProduct = {\n        ...selectedProduct,\n        score: finalScore,\n        gaps: updatedGaps\n      };\n\n      // Update products array with new score and gaps\n      setProducts((prev) => prev.map((p) =>\n      p.id === selectedProduct.id ?\n      updatedSelectedProduct :\n      p\n      ));\n\n      // Update selected product state\n      setSelectedProduct(updatedSelectedProduct);\n\n      // Clear recommendations and approval state for next use\n      setRecommendations([]);\n      setApprovalState({});\n      setJustAppliedChanges(true);\n\n      // Safety check: ensure message is user-friendly\n      const safeMessage = typeof message === 'string' && message.length > 0 && !message.match(/^\\d{3}$/) ?\n      message :\n      'Changes applied successfully!';\n\n      setToastMessage(safeMessage);\n      setToastActive(true);\n\n      // Keep modal open to show the updated score - don't close or reload!\n\n    } else if (data.error) {\n      setToastMessage(`Failed to apply changes: ${data.error}`);\n      setToastActive(true);\n    } else {\n      // Handle unexpected response format\n      console.error('\uD83D\uDEA8 Unexpected response format:', data);\n      setToastMessage(`Unexpected response: ${JSON.stringify(data)}`);\n      setToastActive(true);\n    }\n    setIsApplyingChanges(false);\n  }\n\n  // Handle customer input save completion\n  if (customerInputFetcher.data && isSavingCustomerInput) {\n    const data = customerInputFetcher.data as any;\n    console.log('\uD83D\uDD0D Customer input save response:', data);\n\n    if (data.success && selectedProduct) {\n      const appliedFields = data.appliedFields || [];\n      const appliedCount = data.appliedCount || 0;\n\n      // Create celebration message\n      let message = '';\n      if (appliedCount === 1) {\n        const fieldName = appliedFields[0]?.replace(/_/g, ' ');\n        message = `\uD83C\uDF89 Great! ${fieldName} added to your product specs!`;\n      } else if (appliedCount > 1) {\n        message = `\uD83D\uDE80 Excellent! Added ${appliedCount} product specifications!`;\n      }\n\n      // Estimate score improvement (customer input fields typically worth 3-5% each)\n      const estimatedImprovement = appliedCount * 4;\n      message += ` \uD83D\uDCC8 Health score boost: ~+${estimatedImprovement}% | +${appliedCount * 15} points!`;\n\n      // Update selected product to remove applied fields from gaps\n      const updatedGaps = selectedProduct.gaps.filter((gap) => !appliedFields.includes(gap));\n      const updatedScore = Math.min(100, selectedProduct.score + estimatedImprovement);\n\n      const updatedSelectedProduct = {\n        ...selectedProduct,\n        score: updatedScore,\n        gaps: updatedGaps\n      };\n\n      // Update products array\n      setProducts((prev) => prev.map((p) =>\n      p.id === selectedProduct.id ?\n      updatedSelectedProduct :\n      p\n      ));\n\n      // Update selected product state\n      setSelectedProduct(updatedSelectedProduct);\n\n      // Clear customer input form\n      setCustomerInputData({});\n      setCustomerInputOpen(false);\n      setJustAppliedChanges(true);\n\n      setToastMessage(message);\n      setToastActive(true);\n    } else if (data.error) {\n      setToastMessage(`Failed to save: ${data.error}`);\n      setToastActive(true);\n    }\n    setIsSavingCustomerInput(false);\n  }\n\n  // Helper functions for customer input forms\n  const getFieldPlaceholder = (field: string): string => {\n    const placeholders: Record<string, string> = {\n      material: 'e.g., Cotton, Polyester, Steel, Wood',\n      weight: 'e.g., 2.5 lbs, 1.2 kg',\n      color: 'e.g., Navy Blue, Black, Red',\n      size: 'e.g., Large, XL, 12x8x4',\n      brand: 'e.g., Your Brand Name',\n      model: 'e.g., Model ABC-123',\n      upc: 'e.g., 123456789012',\n      vendor: 'e.g., Supplier Company',\n      age_range: 'e.g., 18-65, Adults, 3+',\n      compatibility: 'e.g., iPhone 12, Samsung Galaxy',\n      warranty: 'e.g., 1 year limited warranty',\n      return_policy: 'e.g., 30-day returns accepted',\n      shipping_info: 'e.g., Free shipping over $50',\n      specifications: 'e.g., Power: 110V, Material: ABS Plastic',\n      documentation_url: 'e.g., https://yoursite.com/manual.pdf',\n      video_urls: 'e.g., https://youtube.com/watch?v=abc123'\n    };\n    return placeholders[field] || `Enter ${field.replace(/_/g, ' ')}`;\n  };\n\n  const getFieldHelpText = (field: string): string => {\n    const helpTexts: Record<string, string> = {\n      material: 'Primary material or fabric composition',\n      weight: 'Product weight with unit (lbs, kg, oz)',\n      color: 'Primary color or color options',\n      brand: 'Manufacturer or brand name',\n      warranty: 'Warranty terms and duration',\n      upc: 'Universal Product Code for inventory',\n      specifications: 'Technical specs, one per line'\n    };\n    return helpTexts[field] || '';\n  };\n\n  const getFieldPoints = (field: string): number => {\n    const fieldCategories = {\n      required: 25,\n      high: 20,\n      medium: 15,\n      low: 10\n    };\n\n    const highFields = ['material', 'dimensions', 'weight', 'brand'];\n    const mediumFields = ['color', 'size', 'upc', 'compatibility', 'age_range', 'gender'];\n\n    if (highFields.includes(field)) return fieldCategories.high;\n    if (mediumFields.includes(field)) return fieldCategories.medium;\n    return fieldCategories.low;\n  };\n\n  const getFieldImpact = (field: string): string => {\n    const highFields = ['material', 'dimensions', 'weight', 'brand'];\n    const mediumFields = ['color', 'size', 'upc', 'compatibility', 'age_range', 'gender'];\n\n    if (highFields.includes(field)) return '4-5';\n    if (mediumFields.includes(field)) return '3-4';\n    return '2-3';\n  };\n\n  const handleSaveCustomerInput = () => {\n    if (!selectedProduct) return;\n\n    // Validate and filter data\n    const validationErrors: string[] = [];\n    const filledData: Record<string, string> = {};\n\n    Object.entries(customerInputData).forEach(([field, value]) => {\n      const trimmedValue = value.trim();\n      if (!trimmedValue) return;\n\n      // Basic field validation\n      if (field === 'upc' && trimmedValue.length < 8) {\n        validationErrors.push('UPC must be at least 8 digits');\n      } else if (field === 'weight' && !/\\d+(\\.\\d+)?\\s*(lbs?|kgs?|oz|pounds?|kilograms?|ounces?)/i.test(trimmedValue)) {\n        validationErrors.push('Weight must include unit (e.g., \"2.5 lbs\", \"1.2 kg\")');\n      } else if ((field === 'documentation_url' || field === 'video_urls') && trimmedValue && !trimmedValue.startsWith('http')) {\n        validationErrors.push(`${field.replace(/_/g, ' ')} must be a valid URL starting with http`);\n      } else if (field === 'age_range' && trimmedValue && !/\\d+/.test(trimmedValue)) {\n        validationErrors.push('Age range must contain numbers (e.g., \"18+\", \"3-12\")');\n      } else {\n        filledData[field] = trimmedValue;\n      }\n    });\n\n    if (validationErrors.length > 0) {\n      setToastMessage(`Validation errors: ${validationErrors.join(', ')}`);\n      setToastActive(true);\n      return;\n    }\n\n    if (Object.keys(filledData).length === 0) {\n      setToastMessage('Please fill in at least one field before saving');\n      setToastActive(true);\n      return;\n    }\n\n    setIsSavingCustomerInput(true);\n    customerInputFetcher.submit(\n      {\n        action: 'save-customer-input',\n        productId: selectedProduct.id,\n        inputData: JSON.stringify(filledData)\n      },\n      { method: 'post' }\n    );\n  };\n\n  // Filter products based on current filter state\n  const filteredProducts = products.filter((product) => {\n    if (showOnlyLowHealth && product.score >= 70) return false;\n    if (showOnlyNoDescription && product.description && product.description !== \"No description\") return false;\n    return true;\n  });\n\n  const rows = products.map((product) => [\n  product.id,\n  product.title,\n  product.description.length > 50 ?\n  `${product.description.substring(0, 50)}...` :\n  product.description,\n  `${product.score}%`,\n  product.gaps.length > 0 ? product.gaps.join(\", \") : \"None\"]\n  );\n\n  return (\n    <Page title=\"CatalogAI Optimizer Dashboard\">\n      <Layout>\n        {/* New Dashboard Overview Cards */}\n        <Layout.Section>\n          <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '20px' }}>\n            {/* AI Readiness Score Card */}\n            <Card>\n              <BlockStack align=\"center\">\n                <div style={{ position: 'relative', width: '80px', height: '80px', marginBottom: '10px' }}>\n                  <svg width=\"80\" height=\"80\" style={{ transform: 'rotate(-90deg)' }}>\n                    <circle cx=\"40\" cy=\"40\" r=\"35\" fill=\"none\" stroke=\"#e5e7eb\" strokeWidth=\"8\" />\n                    <circle\n                      cx=\"40\" cy=\"40\" r=\"35\" fill=\"none\"\n                      stroke={dashboardMetrics.aiReadinessScore >= 90 ? '#10b981' : dashboardMetrics.aiReadinessScore >= 50 ? '#f59e0b' : '#ef4444'}\n                      strokeWidth=\"8\" strokeDasharray={`${dashboardMetrics.aiReadinessScore / 100 * 220} 220`}\n                      strokeLinecap=\"round\" />\n\n                  </svg>\n                  <div style={{\n                    position: 'absolute',\n                    top: '50%',\n                    left: '50%',\n                    transform: 'translate(-50%, -50%)',\n                    fontSize: '18px',\n                    fontWeight: 'bold',\n                    color: dashboardMetrics.aiReadinessScore >= 90 ? '#10b981' : dashboardMetrics.aiReadinessScore >= 50 ? '#f59e0b' : '#ef4444'\n                  }}>\n                    {dashboardMetrics.aiReadinessScore}%\n                  </div>\n                </div>\n                <Text variant=\"headingLg\" as=\"p\">{dashboardMetrics.aiReadinessScore} / 100</Text>\n                <Text variant=\"bodyMd\" tone=\"subdued\" as=\"p\">Excellent AI readiness</Text>\n              </BlockStack>\n            </Card>\n\n            {/* Products Passed Card */}\n            <Card>\n              <BlockStack align=\"center\">\n                <Text variant=\"headingLg\" as=\"p\">{dashboardMetrics.productsPassedPercentage}%</Text>\n                <Text variant=\"bodyMd\" as=\"p\">{dashboardMetrics.validProducts} of {dashboardMetrics.totalProducts} products</Text>\n                <Text variant=\"bodySm\" tone=\"success\" as=\"p\">\u2191 5% from last week</Text>\n              </BlockStack>\n            </Card>\n\n            {/* Feed Freshness Card */}\n            <Card>\n              <BlockStack align=\"center\">\n                <Text variant=\"headingLg\" as=\"p\">\n                  {dashboardMetrics.lastSyncTime ?\n                  `${Math.floor((Date.now() - new Date(dashboardMetrics.lastSyncTime).getTime()) / (1000 * 60 * 60))}h ago` :\n                  'Never'\n                  }\n              </Text>\n                <Text variant=\"bodyMd\" as=\"p\">Last synced successfully</Text>\n              </BlockStack>\n            </Card>\n          </div>\n        </Layout.Section>\n\n        {/* Feed Health Section */}\n        <Layout.Section>\n          <Card>\n              <BlockStack>\n              <Text variant=\"headingLg\" as=\"h2\">Feed Health</Text>\n              <Text variant=\"bodyMd\" tone=\"subdued\" as=\"p\">Product validation distribution</Text>\n              \n              <div style={{ marginTop: '20px' }}>\n                {/* Valid Products */}\n                <div style={{ display: 'flex', alignItems: 'center', marginBottom: '10px' }}>\n                  <div style={{\n                    width: `${dashboardMetrics.validProducts / dashboardMetrics.totalProducts * 200}px`,\n                    height: '8px',\n                    background: '#10b981',\n                    borderRadius: '4px',\n                    marginRight: '10px',\n                    minWidth: '20px'\n                  }} />\n                  <Text variant=\"bodyMd\" as=\"p\">{dashboardMetrics.validProducts} products</Text>\n                </div>\n                \n                {/* Warning Products */}\n                <div style={{ display: 'flex', alignItems: 'center', marginBottom: '10px' }}>\n                  <div style={{\n                    width: `${dashboardMetrics.warningProducts / dashboardMetrics.totalProducts * 200}px`,\n                    height: '8px',\n                    background: '#f59e0b',\n                    borderRadius: '4px',\n                    marginRight: '10px',\n                    minWidth: '20px'\n                  }} />\n                  <Text variant=\"bodyMd\" as=\"p\">{dashboardMetrics.warningProducts} products</Text>\n                </div>\n                \n                {/* Invalid Products */}\n                <div style={{ display: 'flex', alignItems: 'center', marginBottom: '20px' }}>\n                  <div style={{\n                    width: `${dashboardMetrics.invalidProducts / dashboardMetrics.totalProducts * 200}px`,\n                    height: '8px',\n                    background: '#ef4444',\n                    borderRadius: '4px',\n                    marginRight: '10px',\n                    minWidth: '20px'\n                  }} />\n                  <Text variant=\"bodyMd\" as=\"p\">{dashboardMetrics.invalidProducts} products</Text>\n                </div>\n                \n                <Button variant=\"primary\">View Validation Report</Button>\n              </div>\n              </BlockStack>\n          </Card>\n        </Layout.Section>\n\n        {/* Next Actions Section */}\n        <Layout.Section>\n          <Card>\n            <BlockStack>\n              <Text variant=\"headingLg\" as=\"h2\">Next Actions</Text>\n              <Text variant=\"bodyMd\" tone=\"subdued\" as=\"p\">Recommended optimizations for your catalog</Text>\n              \n              <div style={{\n                display: 'grid',\n                gridTemplateColumns: 'repeat(2, 1fr)',\n                gap: '20px',\n                marginTop: '20px'\n              }}>\n                {/* Fix Validation Errors */}\n                <Card>\n                  <BlockStack>\n                    <Text variant=\"bodyMd\" as=\"p\">{dashboardMetrics.invalidProducts} products need attention</Text>\n                    <Button variant=\"primary\" tone=\"critical\">Take Action</Button>\n            </BlockStack>\n                </Card>\n                \n                {/* Run AI Enrichment */}\n                <Card>\n                  <BlockStack>\n                    <Text variant=\"bodyMd\" as=\"p\">Optimize {dashboardMetrics.warningProducts} products</Text>\n                    <Button variant=\"primary\">Take Action</Button>\n                  </BlockStack>\n                </Card>\n              </div>\n            </BlockStack>\n          </Card>\n        </Layout.Section>\n\n        {/* Catalog Optimization Progress Section */}\n        <Layout.Section>\n          <Card>\n            <BlockStack>\n              <div style={{ marginBottom: '10px' }}>\n                <div style={{\n                  width: '100%',\n                  height: '8px',\n                  background: '#e5e7eb',\n                  borderRadius: '4px',\n                  overflow: 'hidden'\n                }}>\n                  <div style={{\n                    width: `${dashboardMetrics.optimizationProgress}%`,\n                    height: '100%',\n                    background: '#3b82f6',\n                    transition: 'width 0.3s ease'\n                  }} />\n                </div>\n              </div>\n              \n              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                <Text variant=\"bodyMd\" as=\"p\">\n                  Your catalog is {dashboardMetrics.optimizationProgress}% AI-ready \u2014 {100 - dashboardMetrics.optimizationProgress}% left to optimize!\n                </Text>\n                <Text variant=\"bodyMd\" tone=\"subdued\" as=\"p\">\n                  {dashboardMetrics.optimizationProgress}% Complete\n                </Text>\n              </div>\n              \n              <div style={{ marginTop: '5px' }}>\n                <Text variant=\"bodySm\" tone=\"subdued\" as=\"p\">\n                  Keep going! \uD83D\uDE80\n                </Text>\n              </div>\n            </BlockStack>\n          </Card>\n        </Layout.Section>\n\n\n        <Layout.Section>\n          <Card>\n            <BlockStack>\n              <InlineStack>\n                <BlockStack>\n                  <Text variant=\"headingLg\" as=\"h2\">\n                    \uD83D\uDCE6 Product Catalog\n                </Text>\n                  <Text variant=\"bodyMd\" tone=\"subdued\" as=\"p\">\n                    Browse and manage your product inventory\n                  </Text>\n                </BlockStack>\n                <InlineStack>\n                  <Button\n                    onClick={handleSync}\n                    loading={isSyncing}\n                    variant=\"primary\"\n                    size=\"large\">\n\n                    {isSyncing ? \"Syncing...\" : \"\uD83D\uDD04 Sync Products\"}\n                  </Button>\n                </InlineStack>\n              </InlineStack>\n\n              {/* Filter and Search */}\n              <Card>\n                <InlineStack>\n                  <InlineStack>\n                    <Text variant=\"bodyMd\" tone=\"subdued\" as=\"p\">Filter by:</Text>\n                    <Button\n                      variant={showOnlyLowHealth ? 'primary' : 'tertiary'}\n                      size=\"slim\"\n                      onClick={() => setShowOnlyLowHealth(!showOnlyLowHealth)}>\n\n                      \uD83D\uDEA8 Low Health Only\n                    </Button>\n                    <Button\n                      variant={showOnlyNoDescription ? 'primary' : 'tertiary'}\n                      size=\"slim\"\n                      onClick={() => setShowOnlyNoDescription(!showOnlyNoDescription)}>\n\n                      \uD83D\uDCDD Missing Descriptions\n                    </Button>\n                  </InlineStack>\n                  <Text variant=\"bodySm\" tone=\"subdued\" as=\"p\">\n                    Showing {filteredProducts.length} of {products.length} products\n                  </Text>\n                </InlineStack>\n              </Card>\n\n              {/* Enhanced Product List */}\n              <div\n                className=\"product-grid\"\n                style={{\n                  display: 'grid',\n                  gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',\n                  gap: '20px',\n                  marginTop: '20px',\n                  width: '100%'\n                }}>\n\n                {filteredProducts.map((product, index) =>\n                <Card\n                  key={product.id}>\n\n                    <InlineStack>\n                      <InlineStack>\n                        <BlockStack>\n                          <Button\n                          variant=\"plain\"\n                          onClick={() => handleProductClick(product)}>\n\n                              {product.title}\n                          </Button>\n                          <Text variant=\"bodySm\" tone=\"subdued\" as=\"p\">\n                            ID: {product.id}\n                          </Text>\n                        </BlockStack>\n\n                        <BlockStack>\n                          <Text variant=\"bodyMd\" as=\"p\">\n                            {product.description && product.description !== \"No description\" ?\n                          product.description.length > 100 ?\n                          `${product.description.substring(0, 100)}...` :\n                          product.description :\n                          <Text tone=\"subdued\" variant=\"bodyMd\" as=\"p\">No description available</Text>\n                          }\n                          </Text>\n                          {product.gaps.length > 0 &&\n                        <InlineStack wrap>\n                              {product.gaps.slice(0, 3).map((gap, gapIndex) =>\n                          <Badge key={gapIndex} tone=\"warning\" size=\"small\">\n                                  {gap}\n                                </Badge>\n                          )}\n                              {product.gaps.length > 3 &&\n                          <Badge tone=\"info\" size=\"small\">\n                                  {`+${product.gaps.length - 3} more`}\n                                </Badge>\n                          }\n                            </InlineStack>\n                        }\n                        </BlockStack>\n                      </InlineStack>\n\n                      <BlockStack>\n                        <InlineStack>\n                          <ProgressBar\n                          progress={product.score}\n                          size=\"small\" />\n\n                          <Badge\n                          tone={product.score >= 90 ? 'success' : product.score >= 70 ? 'warning' : 'critical'}\n                          size=\"small\">\n\n                            {`${product.score}%`}\n                          </Badge>\n                        </InlineStack>\n                        \n                        <Button\n                        size=\"slim\"\n                        variant=\"primary\"\n                        onClick={() => handleProductClick(product)}>\n\n                          \uD83D\uDD27 Optimize\n                        </Button>\n                      </BlockStack>\n                    </InlineStack>\n                  </Card>\n                )}\n              </div>\n\n              {filteredProducts.length === 0 &&\n              <Card>\n                  <BlockStack>\n                    <Text variant=\"headingMd\" as=\"h3\">\uD83C\uDF89 No products match your filters!</Text>\n                    <Text variant=\"bodyMd\" tone=\"subdued\" as=\"p\">\n                      {showOnlyLowHealth ?\n                    \"All your products are healthy! Great job maintaining your catalog.\" :\n                    showOnlyNoDescription ?\n                    \"All your products have descriptions! Your catalog is well-documented.\" :\n                    \"No products found matching your current filters.\"\n                    }\n              </Text>\n                    <Button\n                    variant=\"tertiary\"\n                    onClick={() => {\n                      setShowOnlyLowHealth(false);\n                      setShowOnlyNoDescription(false);\n                    }}>\n\n                      Clear Filters\n                    </Button>\n                  </BlockStack>\n                </Card>\n              }\n            </BlockStack>\n          </Card>\n        </Layout.Section>\n\n        <Layout.Section variant=\"oneHalf\">\n          <Card>\n            <BlockStack>\n              <Text variant=\"headingMd\" as=\"h3\">\n                Quick Actions\n              </Text>\n              <BlockStack>\n                <Button\n                  fullWidth\n                  onClick={handleHealthCheck}\n                  loading={isHealthChecking}\n                  variant={averageScore < 90 ? \"primary\" : \"secondary\"}>\n\n                  {averageScore < 90 ? \"Quick Scan Now\" : \"Run Health Check\"}\n                </Button>\n                <Button fullWidth>Generate Feed</Button>\n                <Button fullWidth>View Analytics</Button>\n              </BlockStack>\n            </BlockStack>\n          </Card>\n        </Layout.Section>\n        \n        <Layout.Section variant=\"oneHalf\">\n          <Card>\n            <BlockStack>\n              <Text variant=\"headingMd\" as=\"h3\">\n                Recent Activity\n              </Text>\n              <BlockStack>\n                {recentLogs.length > 0 ?\n                recentLogs.map((log: LogEntry) =>\n                <BlockStack key={log.id}>\n                      <Text as=\"span\">\n                        {log.type === 'sync' && '\uD83D\uDD04 '}\n                        {log.type === 'push' && '\uD83D\uDCE4 '}\n                        {log.type === 'error' && '\u274C '}\n                        {log.type === 'health_scan' && '\uD83D\uDD0D '}\n                        {log.type === 'auto_fix' && '\uD83D\uDD27 '}\n                        {log.type === 'ai_enrichment' && '\uD83E\uDD16 '}\n                        {log.type === 'settings_update' && '\u2699\uFE0F '}\n                        {log.message}\n                      </Text>\n                      <Text as=\"p\" variant=\"bodySm\" tone=\"subdued\">\n                        {new Date(log.createdAt).toLocaleString()}\n                      </Text>\n                    </BlockStack>\n                ) :\n\n                <Text as=\"p\" tone=\"subdued\">No recent activity</Text>\n                }\n              </BlockStack>\n            </BlockStack>\n          </Card>\n        </Layout.Section>\n      </Layout>\n      \n      {toastActive &&\n      <Toast\n        content={toastMessage}\n        onDismiss={() => setToastActive(false)} />\n\n      }\n\n      <HealthCheckModal\n        isOpen={healthModalOpen}\n        onClose={() => setHealthModalOpen(false)}\n        jobId={healthCheckJobId}\n        currentScore={averageScore}\n        currentGaps={[]} // Will be populated from latest audit\n      />\n\n      {/* Enhanced Product Detail Modal */}\n      <Modal\n        open={productModalOpen}\n        onClose={() => setProductModalOpen(false)}\n        title=\"\"\n        size=\"large\"\n        primaryAction={{\n          content: 'Close',\n          onAction: () => setProductModalOpen(false)\n        }}>\n\n          {selectedProduct &&\n        <Modal.Section>\n            <BlockStack>\n              {/* Modern Product Header */}\n              <Card>\n                <BlockStack>\n                  <InlineStack>\n                <BlockStack>\n                      <Text variant=\"headingLg\" as=\"h2\">\n                        \uD83D\uDCE6 {selectedProduct.title}\n                      </Text>\n                      <Text variant=\"bodyMd\" tone=\"subdued\" as=\"p\">\n                        Product ID: {selectedProduct.id}\n                      </Text>\n                      {selectedProduct.description && selectedProduct.description !== \"No description\" &&\n                    <Text variant=\"bodyMd\" as=\"p\">\n                          {selectedProduct.description}\n                        </Text>\n                    }\n                  </BlockStack>\n\n                    <BlockStack>\n                    <Badge\n                      tone={selectedProduct.score >= 90 ? 'success' : selectedProduct.score >= 70 ? 'warning' : 'critical'}\n                      size=\"large\">\n\n                        {selectedProduct.score}% Health\n                    </Badge>\n                    {justAppliedChanges &&\n                    <Badge tone=\"success\" size=\"small\">\n                        \u2728 Just Updated!\n                        </Badge>\n                    }\n                        </BlockStack>\n                        </InlineStack>\n\n                  {/* Visual Health Progress */}\n                      <Box>\n                    <InlineStack>\n                      <Text variant=\"bodyMd\" tone=\"subdued\" as=\"p\">Overall Health Progress</Text>\n                      <Text variant=\"bodyMd\" tone=\"subdued\" as=\"p\">\n                        {`${Math.round(selectedProduct.score / 100 * 500)} / 500 points`}\n                          </Text>\n                      </InlineStack>\n                    <Box paddingBlockStart=\"200\">\n                      <ProgressBar\n                      progress={selectedProduct.score}\n                      size=\"large\" />\n\n                        </Box>\n                      </Box>\n                    </BlockStack>\n              </Card>\n\n              {/* Smart Category Breakdown */}\n              <Card>\n                <BlockStack>\n                  <Text variant=\"headingMd\" as=\"h3\">\n                    \uD83D\uDCCA Category Breakdown\n                  </Text>\n                  \n                  <InlineStack>\n                    {[\n                  {\n                    name: '\uD83D\uDEA8 Required Fields',\n                    icon: '\uD83D\uDEA8',\n                    fields: ['title', 'description', 'price', 'availability', 'category'],\n                    color: 'critical',\n                    description: 'Essential for product visibility'\n                  },\n                  {\n                    name: '\u26A1 High Priority',\n                    icon: '\u26A1',\n                    fields: ['material', 'dimensions', 'weight', 'brand', 'use_cases', 'features', 'image_urls'],\n                    color: 'warning',\n                    description: 'Important for customer decisions'\n                  },\n                  {\n                    name: '\uD83D\uDCCB Medium Priority',\n                    icon: '\uD83D\uDCCB',\n                    fields: ['color', 'size', 'target_audience', 'keywords', 'upc', 'compatibility', 'age_range', 'gender', 'video_urls'],\n                    color: 'attention',\n                    description: 'Enhances product discovery'\n                  },\n                  {\n                    name: '\u2728 Enhancement',\n                    icon: '\u2728',\n                    fields: ['model', 'sku', 'tags', 'vendor', 'warranty', 'return_policy', 'shipping_info', 'documentation_url', 'specifications', 'ai_search_queries', 'semantic_description'],\n                    color: 'success',\n                    description: 'Optimizes for AI search'\n                  }].\n                  map((category, index) => {\n                    const missingInCategory = selectedProduct.gaps.filter((gap) => category.fields.includes(gap)).length;\n                    const completedInCategory = category.fields.length - missingInCategory;\n                    const progress = Math.round(completedInCategory / category.fields.length * 100);\n\n                    return (\n                      <Card key={index}>\n                          <InlineStack>\n                            <InlineStack>\n                              <Text variant=\"headingSm\" as=\"h4\">\n                                {category.icon} {category.name}\n                              </Text>\n                              <Text variant=\"bodySm\" tone=\"subdued\" as=\"p\">\n                                {category.description}\n                              </Text>\n                              <InlineStack wrap>\n                                <Text variant=\"bodySm\" as=\"p\">\n                                  {completedInCategory}/{category.fields.length} complete\n                                </Text>\n                                {missingInCategory > 0 &&\n                              <Badge tone=\"warning\" size=\"small\">\n                                    {`${missingInCategory} missing`}\n                                  </Badge>\n                              }\n                            </InlineStack>\n                            </InlineStack>\n                            \n                            <BlockStack>\n                              <ProgressBar\n                              progress={progress}\n                              size=\"small\" />\n\n                              <Text variant=\"bodySm\" tone=\"subdued\" as=\"p\">\n                                {`${progress}% complete`}\n                              </Text>\n                            </BlockStack>\n                          </InlineStack>\n                        </Card>);\n\n                  })}\n                  </InlineStack>\n                </BlockStack>\n              </Card>\n\n              {/* Smart Gaps Analysis */}\n              <Card>\n                <BlockStack>\n                  <InlineStack>\n                    <Text variant=\"headingMd\" as=\"h3\">\n                      \uD83D\uDD0D Missing Fields Analysis\n                    </Text>\n                    {selectedProduct.gaps.length === 0 ?\n                  <Badge tone=\"success\" size=\"large\">\n                        \uD83C\uDF89 Perfect Score!\n                      </Badge> :\n\n                  <Badge tone=\"critical\" size=\"large\">\n                        {`${selectedProduct.gaps.length} fields missing`}\n                      </Badge>\n                  }\n                  </InlineStack>\n\n                  {selectedProduct.gaps.length > 0 ?\n                <BlockStack>\n                      <Text variant=\"bodyMd\" tone=\"subdued\" as=\"p\">\n                        These fields are missing and could improve your product's visibility and AI search performance:\n                      </Text>\n                      <InlineStack wrap>\n                        {selectedProduct.gaps.map((gap, index) =>\n                    <Badge key={index} tone=\"warning\" size=\"small\">\n                            {gap.replace(/_/g, ' ')}\n                          </Badge>\n                    )}\n                  </InlineStack>\n                    </BlockStack> :\n\n                <BlockStack>\n                      <Text variant=\"bodyMd\" tone=\"success\" as=\"p\">\n                        \uD83C\uDF89 Congratulations! Your product has all the essential fields completed.\n                      </Text>\n                      <Text variant=\"bodySm\" tone=\"subdued\" as=\"p\">\n                        This product is optimized for search engines and AI-powered discovery.\n                      </Text>\n                    </BlockStack>\n                }\n                </BlockStack>\n              </Card>\n\n              {/* AI Recommendations Section */}\n              {selectedProduct.gaps.length > 0 &&\n            <Card>\n                  <BlockStack>\n                    <InlineStack>\n                      <Text variant=\"headingMd\" as=\"h3\">\n                        \uD83E\uDD16 AI Recommendations\n                    </Text>\n                      {recommendations.length > 0 &&\n                  <Button\n                    onClick={() => {\n                      setRecommendations([]);\n                      setApprovalState({});\n                      handleGenerateRecommendations();\n                    }}\n                    variant=\"secondary\"\n                    size=\"slim\"\n                    loading={isGeneratingRecommendations}>\n\n                          \uD83D\uDD04 Regenerate\n                      </Button>\n                  }\n                    </InlineStack>\n\n                    {recommendations.length === 0 ?\n                <BlockStack>\n                        <BlockStack>\n                        <Text variant=\"bodyMd\" tone=\"subdued\" as=\"p\">\n                            \uD83C\uDFAF Ready to improve your product's health score?\n                          </Text>\n                        <Text variant=\"bodySm\" tone=\"subdued\" as=\"p\">\n                            Our AI will analyze your missing fields and suggest improvements for:\n                          </Text>\n                          <InlineStack wrap>\n                            {selectedProduct.gaps.slice(0, 5).map((gap, index) =>\n                      <Badge key={index} tone=\"warning\" size=\"small\">\n                                {gap.replace(/_/g, ' ')}\n                              </Badge>\n                      )}\n                            {selectedProduct.gaps.length > 5 &&\n                      <Badge tone=\"info\" size=\"small\">\n                                {`+${selectedProduct.gaps.length - 5} more`}\n                              </Badge>\n                      }\n                          </InlineStack>\n                        </BlockStack>\n                        \n                        <Button\n                    onClick={handleGenerateRecommendations}\n                    variant=\"primary\"\n                    size=\"large\"\n                    loading={isGeneratingRecommendations}>\n\n                          {isGeneratingRecommendations ? '\uD83E\uDD16 Generating...' : '\uD83D\uDE80 Generate AI Recommendations'}\n                        </Button>\n                      </BlockStack> :\n\n                <BlockStack>\n                    {selectedProduct.recommendations?.generatedAt &&\n                  <Text variant=\"bodySm\" tone=\"subdued\" as=\"p\">\n                        Generated: {new Date(selectedProduct.recommendations.generatedAt).toLocaleString()}\n                      </Text>\n                  }\n                        \n                        <Text variant=\"bodyMd\" tone=\"subdued\" as=\"p\">\n                          Review and approve the AI-generated suggestions below. Only approved changes will be applied to your product.\n                        </Text>\n                      </BlockStack>\n                }\n                  </BlockStack>\n                </Card>\n            }\n\n              {/* Recommendations Approval Interface */}\n              {recommendations.length > 0 &&\n            <Card>\n                  <BlockStack>\n                    <InlineStack>\n                      <Text variant=\"headingMd\" as=\"h3\">\n                        \u270F\uFE0F Review & Approve Recommendations\n                    </Text>\n                      <InlineStack>\n                        <Badge tone=\"success\" size=\"small\">\n                          {`${Object.values(approvalState).filter(Boolean).length} approved`}\n                        </Badge>\n                        <Badge tone=\"critical\" size=\"small\">\n                          {`${Object.values(approvalState).filter((val) => val === false).length} rejected`}\n                        </Badge>\n                      </InlineStack>\n                    </InlineStack>\n\n                    <Text variant=\"bodyMd\" tone=\"subdued\" as=\"p\">\n                      Review each AI suggestion below. Use \u2705 to approve or \u274C to reject. Only approved changes will be applied to your product.\n                    </Text>\n                    \n                    {/* Smart Bulk Actions */}\n                    <Card>\n                      <InlineStack>\n                        <Text variant=\"bodyMd\" tone=\"subdued\" as=\"p\">Quick Actions:</Text>\n                        <InlineStack>\n                      <Button\n                        size=\"slim\"\n                        variant=\"secondary\"\n                        tone=\"success\"\n                        onClick={() => {\n                          const allApproved = recommendations.reduce((acc, rec) => ({\n                            ...acc,\n                            [rec.field]: true\n                          }), {});\n                          setApprovalState(allApproved);\n                        }}>\n\n                        \u2705 Approve All\n                      </Button>\n                      <Button\n                        size=\"slim\"\n                        variant=\"secondary\"\n                        tone=\"critical\"\n                        onClick={() => {\n                          const allRejected = recommendations.reduce((acc, rec) => ({\n                            ...acc,\n                            [rec.field]: false\n                          }), {});\n                          setApprovalState(allRejected);\n                        }}>\n\n                        \u274C Reject All\n                      </Button>\n                      <Button\n                        size=\"slim\"\n                        variant=\"secondary\"\n                        onClick={() => setApprovalState({})}>\n\n                        Clear All\n                      </Button>\n                        </InlineStack>\n                      </InlineStack>\n                    </Card>\n                    \n                    {/* Individual Recommendation Cards */}\n                    <BlockStack>\n                    {recommendations.map((rec, index) => {\n                    const isApproved = approvalState[rec.field] === true;\n                    const isRejected = approvalState[rec.field] === false;\n                    const isPending = approvalState[rec.field] === undefined;\n                    const isApplied = rec.status === 'applied';\n\n                    // Enhanced field progress info\n                    const getFieldInfo = (field: string) => {\n                      const fieldCategories = {\n                        required: { fields: ['title', 'description', 'price', 'availability', 'category'], points: '25', impact: '5-6%', color: 'critical', icon: '\uD83D\uDEA8' },\n                        high: { fields: ['material', 'dimensions', 'weight', 'brand', 'use_cases', 'features', 'image_urls'], points: '20', impact: '4-5%', color: 'warning', icon: '\u26A1' },\n                        medium: { fields: ['color', 'size', 'target_audience', 'keywords', 'upc', 'compatibility', 'age_range', 'gender', 'video_urls'], points: '15', impact: '3-4%', color: 'attention', icon: '\uD83D\uDCCB' },\n                        low: { fields: ['model', 'sku', 'tags', 'vendor', 'warranty', 'return_policy', 'shipping_info', 'documentation_url', 'specifications', 'ai_search_queries', 'semantic_description'], points: '10', impact: '2-3%', color: 'info', icon: '\u2728' }\n                      };\n\n                      for (const [category, info] of Object.entries(fieldCategories)) {\n                        if (info.fields.includes(field)) {\n                          return { category, ...info };\n                        }\n                      }\n                      return { category: 'low', fields: [], points: '10', impact: '2%', color: 'info', icon: '\u2728' };\n                    };\n\n                    const fieldInfo = getFieldInfo(rec.field);\n\n                    return (\n                      <Card key={index}>\n                            <BlockStack>\n                              {/* Modern Field Header */}\n                              <InlineStack>\n                          <BlockStack>\n                                  <InlineStack>\n                                <Text variant=\"headingSm\" as=\"h4\">\n                                      {fieldInfo.icon} {rec.field.charAt(0).toUpperCase() + rec.field.slice(1).replace(/_/g, ' ')}\n                                </Text>\n                                    <Badge tone={fieldInfo.color as any} size=\"small\">\n                                      {fieldInfo.category.charAt(0).toUpperCase() + fieldInfo.category.slice(1)}\n                                  </Badge>\n                                  </InlineStack>\n                                  \n                                  <InlineStack wrap>\n                                    <Badge tone=\"info\" size=\"small\">\n                                      +{fieldInfo.points} pts\n                                    </Badge>\n                                    <Badge tone=\"subdued\" size=\"small\">\n                                      ~{fieldInfo.impact} impact\n                                    </Badge>\n                                  {isApplied &&\n                                <Badge tone=\"success\" size=\"small\">\uD83D\uDE80 Applied</Badge>\n                                }\n                                  {!isApplied && isApproved &&\n                                <Badge tone=\"success\" size=\"small\">\u2705 Approved</Badge>\n                                }\n                                  {!isApplied && isRejected &&\n                                <Badge tone=\"critical\" size=\"small\">\u274C Rejected</Badge>\n                                }\n                                  {!isApplied && isPending &&\n                                <Badge tone=\"attention\" size=\"small\">\u23F3 Pending</Badge>\n                                }\n                              </InlineStack>\n                                </BlockStack>\n                                \n                                {/* Action Buttons */}\n                              {!isApplied &&\n                            <InlineStack>\n                                <Button\n                                size=\"slim\"\n                                onClick={() => handleToggleApproval(rec.field, false)}\n                                variant={isRejected ? 'primary' : 'secondary'}\n                                tone={isRejected ? 'critical' : undefined}>\n\n                                      {isRejected ? '\u274C Rejected' : '\u274C Reject'}\n                                </Button>\n                                <Button\n                                size=\"slim\"\n                                onClick={() => handleToggleApproval(rec.field, true)}\n                                variant={isApproved ? 'primary' : 'secondary'}\n                                tone={isApproved ? 'success' : undefined}>\n\n                                      {isApproved ? '\u2705 Approved' : '\u2705 Approve'}\n                                </Button>\n                                  </InlineStack>\n                            }\n                              </InlineStack>\n\n                              {/* Content Comparison */}\n                              <Card>\n                                <BlockStack>\n                                  <InlineStack>\n                                    <BlockStack>\n                                      <Text variant=\"bodyMd\" tone=\"subdued\" as=\"p\">Current Value</Text>\n                                      <Box padding=\"200\" borderRadius=\"100\">\n                            <Text variant=\"bodySm\" as=\"p\">\n                                          {rec.originalValue || <Text tone=\"subdued\" as=\"p\">(empty)</Text>}\n                            </Text>\n                                      </Box>\n                                    </BlockStack>\n                                    \n                                    <BlockStack>\n                                      <Text variant=\"bodyMd\" tone=\"success\" as=\"p\">AI Recommendation</Text>\n                                      <Box padding=\"200\" borderRadius=\"100\">\n                            <Text variant=\"bodySm\" as=\"p\">\n                                          {rec.newValue}\n                            </Text>\n                                      </Box>\n                                    </BlockStack>\n                                  </InlineStack>\n                                  \n                            <Text variant=\"bodySm\" tone=\"subdued\" as=\"p\">\n                                    \uD83D\uDCA1 <em>{rec.improvement}</em>\n                            </Text>\n                          </BlockStack>\n                              </Card>\n                            </BlockStack>\n                          </Card>);\n\n                  })}\n                    </BlockStack>\n                    \n                    {/* Apply Changes Section */}\n                    <Card>\n                      <InlineStack>\n                        <BlockStack>\n                          <Text variant=\"bodyMd\" tone=\"subdued\" as=\"p\">\n                            Ready to apply your approved changes?\n                          </Text>\n                          <Text variant=\"bodySm\" tone=\"subdued\" as=\"p\">\n                            {recommendations.filter((rec) =>\n                        rec.status !== 'applied' && approvalState[rec.field] === true\n                        ).length} changes approved for application\n                          </Text>\n                        </BlockStack>\n                        \n                        <InlineStack>\n                          <Button\n                        onClick={() => setRecommendations([])}\n                        variant=\"secondary\">\n\n                        Cancel\n                      </Button>\n                      <Button\n                        variant=\"primary\"\n                        size=\"large\"\n                        onClick={handleApplyChanges}\n                        loading={isApplyingChanges}\n                        disabled={\n                        recommendations.filter((rec) =>\n                        rec.status !== 'applied' && approvalState[rec.field] === true\n                        ).length === 0\n                        }>\n\n                            {isApplyingChanges ? '\uD83D\uDE80 Applying...' : `\u2705 Apply ${recommendations.filter((rec) =>\n                        rec.status !== 'applied' && approvalState[rec.field] === true\n                        ).length} Changes`}\n                      </Button>\n                        </InlineStack>\n                      </InlineStack>\n                    </Card>\n                  </BlockStack>\n                </Card>\n            }\n\n              {/* Customer Input Section for Manual Fields */}\n              {selectedProduct.gaps.length > 0 &&\n            <Card>\n                  <BlockStack>\n                    <InlineStack align=\"space-between\">\n                      <BlockStack>\n                        <Text variant=\"headingMd\" as=\"h3\">Manual Product Information</Text>\n                        <Text variant=\"bodySm\" tone=\"subdued\" as=\"p\">\n                          Fill in product specs that only you know. These can't be generated by AI.\n                        </Text>\n                      </BlockStack>\n                      <Button\n                    onClick={() => setCustomerInputOpen(!customerInputOpen)}\n                    variant=\"secondary\"\n                    size=\"slim\">\n\n                        {customerInputOpen ? 'Hide Fields' : 'Add Product Info'}\n                      </Button>\n                    </InlineStack>\n\n                    <Collapsible id=\"customer-input-collapsible\" open={customerInputOpen}>\n                      <BlockStack>\n                        {/* Filter gaps to only show customer-required fields */}\n                        {selectedProduct.gaps.\n                    filter((gap) => getFieldInputType(gap) === 'customer_required').\n                    map((field, index) => {\n                      const label = FIELD_LABELS[field] || field.charAt(0).toUpperCase() + field.slice(1).replace(/_/g, ' ');\n\n                      return (\n                        <Box key={index}>\n                                {/* Dimensions gets special treatment */}\n                                {field === 'dimensions' ?\n                          <BlockStack>\n                                    <Text variant=\"bodySm\" as=\"p\">{label}</Text>\n                                    <InlineStack gap=\"300\">\n                                      <TextField\n                                label=\"Length\"\n                                value={customerInputData[`${field}_length`] || ''}\n                                onChange={(value) => setCustomerInputData((prev) => ({\n                                  ...prev,\n                                  [`${field}_length`]: value\n                                }))}\n                                placeholder=\"e.g., 12 inches\"\n                                autoComplete=\"off\" />\n\n                                      <TextField\n                                label=\"Width\"\n                                value={customerInputData[`${field}_width`] || ''}\n                                onChange={(value) => setCustomerInputData((prev) => ({\n                                  ...prev,\n                                  [`${field}_width`]: value\n                                }))}\n                                placeholder=\"e.g., 8 inches\"\n                                autoComplete=\"off\" />\n\n                                      <TextField\n                                label=\"Height\"\n                                value={customerInputData[`${field}_height`] || ''}\n                                onChange={(value) => setCustomerInputData((prev) => ({\n                                  ...prev,\n                                  [`${field}_height`]: value\n                                }))}\n                                placeholder=\"e.g., 4 inches\"\n                                autoComplete=\"off\" />\n\n                                    </InlineStack>\n                                  </BlockStack> :\n                          field === 'gender' ?\n                          <Select\n                            label={label}\n                            options={[\n                            { label: 'Select target gender', value: '' },\n                            { label: 'Male', value: 'male' },\n                            { label: 'Female', value: 'female' },\n                            { label: 'Unisex', value: 'unisex' },\n                            { label: 'Kids', value: 'kids' }]\n                            }\n                            value={customerInputData[field] || ''}\n                            onChange={(value) => setCustomerInputData((prev) => ({\n                              ...prev,\n                              [field]: value\n                            }))} /> :\n\n\n                          <TextField\n                            label={label}\n                            value={customerInputData[field] || ''}\n                            onChange={(value) => setCustomerInputData((prev) => ({\n                              ...prev,\n                              [field]: value\n                            }))}\n                            placeholder={getFieldPlaceholder(field)}\n                            helpText={getFieldHelpText(field)}\n                            multiline={field === 'specifications' || field === 'warranty' || field === 'return_policy'}\n                            autoComplete=\"off\" />\n\n                          }\n                                \n                                {/* Field Progress Indicator */}\n                                <Box paddingBlockStart=\"200\">\n                                  <InlineStack gap=\"200\" blockAlign=\"center\">\n                                    <Text variant=\"bodySm\" tone=\"subdued\" as=\"p\">\n                                      Impact: +{getFieldPoints(field)} points, ~{getFieldImpact(field)}% health boost\n                                    </Text>\n                                    {customerInputData[field] &&\n                              <Badge tone=\"success\" size=\"small\">\u2705 Ready to save</Badge>\n                              }\n                                  </InlineStack>\n                                </Box>\n                              </Box>);\n\n                    })}\n\n                        {/* Save Button */}\n                        {Object.keys(customerInputData).length > 0 &&\n                    <InlineStack align=\"end\">\n                            <Button onClick={() => setCustomerInputData({})}>\n                              Clear All\n                            </Button>\n                            <Button\n                        variant=\"primary\"\n                        onClick={handleSaveCustomerInput}\n                        loading={isSavingCustomerInput}>\n\n                              Save {Object.values(customerInputData).filter((v) => v.trim()).length} Fields\n                            </Button>\n                          </InlineStack>\n                    }\n                      </BlockStack>\n                    </Collapsible>\n                  </BlockStack>\n                </Card>\n            }\n\n              {selectedProduct.score >= 90 &&\n            <Card>\n                  <BlockStack>\n                    <Text variant=\"headingMd\" as=\"h3\">\n                      {selectedProduct.score === 100 ? '\uD83C\uDF89 Perfect Product Health!' : '\u2705 Product Health: Excellent'}\n                    </Text>\n                    <Text as=\"p\">\n                      {selectedProduct.score === 100 ?\n                  'Congratulations! This product has achieved perfect health with all OpenAI spec requirements met.' :\n                  'This product has a high health score and does not need immediate attention.'}\n                    </Text>\n                    {selectedProduct.gaps.length === 0 && selectedProduct.score === 100 &&\n                <Text variant=\"bodySm\" tone=\"success\" as=\"p\">\n                        \uD83D\uDE80 Ready for OpenAI ChatGPT discovery!\n                      </Text>\n                }\n                  </BlockStack>\n                </Card>\n            }\n            </BlockStack>\n        </Modal.Section>\n        }\n      </Modal>\n    </Page>);\n\n}", "import React, { useState, useEffect } from 'react'\nimport {\n  Modal,\n  Card,\n  Text,\n  Button,\n  Badge,\n  DataTable,\n  ProgressBar,\n  InlineStack,\n  BlockStack,\n  Spinner,\n  Toast,\n  Box,\n  Divider,\n  Icon\n} from '@shopify/polaris'\nimport { \n  CheckCircleIcon, \n  AlertTriangleIcon, \n  XCircleIcon,\n  ArrowUpIcon,\n  ArrowDownIcon\n} from '@shopify/polaris-icons'\n\ninterface HealthGap {\n  field: string\n  severity: 'warning' | 'error' | 'critical'\n  count: number\n  products: string[]\n  fixable: boolean\n}\n\ninterface HealthTrend {\n  date: string\n  score: number\n  totalProducts: number\n  validProducts: number\n}\n\ninterface HealthCheckResult {\n  score: number\n  totalProducts: number\n  validProducts: number\n  gaps: HealthGap[]\n  trends: HealthTrend[]\n  timestamp: string\n}\n\ninterface HealthCheckModalProps {\n  isOpen: boolean\n  onClose: () => void\n  jobId?: string\n  currentScore?: number\n  currentGaps?: HealthGap[]\n}\n\nexport function HealthCheckModal({ \n  isOpen, \n  onClose, \n  jobId, \n  currentScore = 0, \n  currentGaps = [] \n}: HealthCheckModalProps) {\n  const [loading, setLoading] = useState(false)\n  const [results, setResults] = useState<HealthCheckResult | null>(null)\n  const [toast, setToast] = useState<{ content: string; error?: boolean } | null>(null)\n  const [autoFixing, setAutoFixing] = useState(false)\n\n  useEffect(() => {\n    if (isOpen && jobId) {\n      fetchResults()\n    }\n  }, [isOpen, jobId])\n\n  const fetchResults = async () => {\n    setLoading(true)\n    try {\n      const formData = new FormData()\n      formData.append('action', 'get-results')\n      formData.append('jobId', jobId!)\n\n      const response = await fetch('/api/health-check', {\n        method: 'POST',\n        body: formData\n      })\n\n      const data = await response.json()\n\n      if (data.success && data.result) {\n        setResults(data.result)\n      } else {\n        setToast({ content: data.error || 'Failed to fetch results', error: true })\n      }\n    } catch (error) {\n      setToast({ content: 'Failed to fetch results', error: true })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleAutoFix = async () => {\n    if (!results) return\n\n    const fixableGaps = results.gaps.filter(gap => gap.fixable)\n    if (fixableGaps.length === 0) {\n      setToast({ content: 'No fixable gaps found', error: true })\n      return\n    }\n\n    setAutoFixing(true)\n    try {\n      const formData = new FormData()\n      formData.append('action', 'auto-fix')\n      formData.append('gapTypes', JSON.stringify(fixableGaps.map(gap => gap.field)))\n\n      const response = await fetch('/api/health-check', {\n        method: 'POST',\n        body: formData\n      })\n\n      const data = await response.json()\n\n      if (data.success) {\n        setToast({ content: `Auto-fix initiated for ${fixableGaps.length} gaps` })\n        // Refresh results after a delay\n        setTimeout(fetchResults, 2000)\n      } else {\n        setToast({ content: data.error || 'Auto-fix failed', error: true })\n      }\n    } catch (error) {\n      setToast({ content: 'Auto-fix failed', error: true })\n    } finally {\n      setAutoFixing(false)\n    }\n  }\n\n  const getScoreColor = (score: number) => {\n    if (score >= 90) return 'success'\n    if (score >= 70) return 'warning'\n    return 'critical'\n  }\n\n  const getSeverityIcon = (severity: string) => {\n    switch (severity) {\n      case 'critical':\n        return XCircleIcon\n      case 'error':\n        return AlertTriangleIcon\n      case 'warning':\n        return AlertTriangleIcon\n      default:\n        return CheckCircleIcon\n    }\n  }\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'critical':\n        return 'critical'\n      case 'error':\n        return 'critical'\n      case 'warning':\n        return 'warning'\n      default:\n        return 'success'\n    }\n  }\n\n  const formatTrend = (trends: HealthTrend[]) => {\n    if (trends.length < 2) return null\n    \n    const latest = trends[trends.length - 1]\n    const previous = trends[trends.length - 2]\n    const diff = latest.score - previous.score\n    \n    return {\n      value: diff,\n      icon: diff >= 0 ? ArrowUpIcon : ArrowDownIcon,\n      color: diff >= 0 ? 'success' : 'critical'\n    }\n  }\n\n  const gapsTableRows = results?.gaps.map((gap, index) => [\n    <InlineStack key={index} gap=\"200\" align=\"start\">\n      <Icon source={getSeverityIcon(gap.severity)} />\n      <Text variant=\"bodyMd\" fontWeight=\"medium\">{gap.field}</Text>\n    </InlineStack>,\n    <Badge key={`badge-${index}`} tone={getSeverityColor(gap.severity)}>\n      {gap.severity}\n    </Badge>,\n    gap.count,\n    gap.fixable ? 'Yes' : 'No'\n  ]) || []\n\n  const trendsTableRows = results?.trends.slice(-7).map((trend, index) => [\n    new Date(trend.date).toLocaleDateString(),\n    `${trend.score}%`,\n    trend.totalProducts,\n    trend.validProducts\n  ]) || []\n\n  return (\n    <>\n      <Modal\n        open={isOpen}\n        onClose={onClose}\n        title=\"Health Check Results\"\n        size=\"large\"\n      >\n        <Modal.Section>\n          {loading ? (\n            <InlineStack align=\"center\">\n              <Spinner size=\"large\" />\n              <Text variant=\"bodyMd\">Analyzing your catalog...</Text>\n            </InlineStack>\n          ) : results ? (\n            <BlockStack gap=\"400\">\n              {/* Summary Card */}\n              <Card>\n                <BlockStack gap=\"300\">\n                  <InlineStack align=\"space-between\">\n                    <Text variant=\"headingMd\">Overall Health Score</Text>\n                    <Badge tone={getScoreColor(results.score)}>\n                      {results.score}%\n                    </Badge>\n                  </InlineStack>\n                  \n                  <ProgressBar \n                    progress={results.score} \n                    size=\"large\" \n                    color={getScoreColor(results.score)}\n                  />\n                  \n                  <InlineStack gap=\"400\" align=\"start\">\n                    <Box>\n                      <Text variant=\"bodyMd\" color=\"subdued\">Total Products</Text>\n                      <Text variant=\"headingMd\">{results.totalProducts}</Text>\n                    </Box>\n                    <Box>\n                      <Text variant=\"bodyMd\" color=\"subdued\">Valid Products</Text>\n                      <Text variant=\"headingMd\">{results.validProducts}</Text>\n                    </Box>\n                    <Box>\n                      <Text variant=\"bodyMd\" color=\"subdued\">Issues Found</Text>\n                      <Text variant=\"headingMd\">{results.gaps.length}</Text>\n                    </Box>\n                  </InlineStack>\n\n                  {results.trends.length > 1 && (\n                    <Box>\n                      <InlineStack gap=\"200\" align=\"start\">\n                        <Text variant=\"bodyMd\" color=\"subdued\">7-Day Trend</Text>\n                        {(() => {\n                          const trend = formatTrend(results.trends)\n                          return trend ? (\n                            <InlineStack gap=\"100\">\n                              <Icon source={trend.icon} />\n                              <Text variant=\"bodyMd\" color={trend.color}>\n                                {trend.value > 0 ? '+' : ''}{trend.value.toFixed(1)}%\n                              </Text>\n                            </InlineStack>\n                          ) : null\n                        })()}\n                      </InlineStack>\n                    </Box>\n                  )}\n                </BlockStack>\n              </Card>\n\n              {/* Gaps Table */}\n              {results.gaps.length > 0 && (\n                <Card>\n                  <BlockStack gap=\"300\">\n                    <InlineStack align=\"space-between\">\n                      <Text variant=\"headingMd\">Issues Found</Text>\n                      {results.gaps.some(gap => gap.fixable) && (\n                        <Button\n                          variant=\"primary\"\n                          onClick={handleAutoFix}\n                          loading={autoFixing}\n                          disabled={autoFixing}\n                        >\n                          Auto-Fix Fixable Issues\n                        </Button>\n                      )}\n                    </InlineStack>\n                    \n                    <DataTable\n                      columnContentTypes={['text', 'text', 'numeric', 'text']}\n                      headings={['Field', 'Severity', 'Count', 'Fixable']}\n                      rows={gapsTableRows}\n                    />\n                  </BlockStack>\n                </Card>\n              )}\n\n              {/* Trends Table */}\n              {results.trends.length > 0 && (\n                <Card>\n                  <BlockStack gap=\"300\">\n                    <Text variant=\"headingMd\">Health Score Trends (Last 7 Days)</Text>\n                    <DataTable\n                      columnContentTypes={['text', 'numeric', 'numeric', 'numeric']}\n                      headings={['Date', 'Score', 'Total Products', 'Valid Products']}\n                      rows={trendsTableRows}\n                    />\n                  </BlockStack>\n                </Card>\n              )}\n\n              {/* No Issues Found */}\n              {results.gaps.length === 0 && (\n                <Card>\n                  <InlineStack align=\"center\" gap=\"300\">\n                    <Icon source={CheckCircleIcon} />\n                    <BlockStack gap=\"200\">\n                      <Text variant=\"headingMd\">Excellent!</Text>\n                      <Text variant=\"bodyMd\" color=\"subdued\">\n                        Your catalog is in great health. No issues were found.\n                      </Text>\n                    </BlockStack>\n                  </InlineStack>\n                </Card>\n              )}\n            </BlockStack>\n          ) : (\n            <Text variant=\"bodyMd\" color=\"subdued\">\n              No results available. Please try running the health check again.\n            </Text>\n          )}\n        </Modal.Section>\n      </Modal>\n\n      {toast && (\n        <Toast\n          content={toast.content}\n          error={toast.error}\n          onDismiss={() => setToast(null)}\n        />\n      )}\n    </>\n  )\n}\n", "import { authenticate } from \"../shopify.server\"\nimport { type LoaderFunctionArgs } from \"@remix-run/node\"\n\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\n  await authenticate.admin(request)\n\n  return null\n}\n\n", "import { json } from \"@remix-run/node\"\n\nexport async function loader() {\n  try {\n    // Simple health check without database dependency\n    return json(\n      { \n        status: \"healthy\", \n        timestamp: new Date().toISOString(),\n        service: \"catalogai-optimizer\",\n        environment: process.env.NODE_ENV || \"development\",\n        uptime: process.uptime()\n      },\n      { status: 200 }\n    )\n  } catch (error) {\n    console.error(\"Health check failed:\", error)\n    return json(\n      { \n        status: \"unhealthy\", \n        error: error instanceof Error ? error.message : \"Unknown error\",\n        timestamp: new Date().toISOString()\n      },\n      { status: 500 }\n    )\n  }\n}", "export default {'entry':{'module':'/build/entry.client-2SP42A7H.js','imports':['/build/_shared/chunk-O4BRYNJ4.js','/build/_shared/chunk-KB66VNYM.js','/build/_shared/chunk-U4FRFQSK.js','/build/_shared/chunk-XGOTYLZ5.js','/build/_shared/chunk-7M6SC7J5.js','/build/_shared/chunk-JWO2UMNO.js','/build/_shared/chunk-UWV35TSL.js','/build/_shared/chunk-PNG5AS42.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-WE6HH4EH.js','imports':['/build/_shared/chunk-6SE3652O.js'],'hasAction':false,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/_index':{'id':'routes/_index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/_index-7Z7WR2DX.js','imports':['/build/_shared/chunk-EJGQX3FZ.js','/build/_shared/chunk-7LEGIGN6.js','/build/_shared/chunk-WKL2Q47I.js'],'hasAction':true,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/api.enrich':{'id':'routes/api.enrich','parentId':'root','path':'api/enrich','index':undefined,'caseSensitive':undefined,'module':'/build/routes/api.enrich-3XAUJ4WC.js','imports':undefined,'hasAction':true,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/api.health-check':{'id':'routes/api.health-check','parentId':'root','path':'api/health-check','index':undefined,'caseSensitive':undefined,'module':'/build/routes/api.health-check-XLG7AG4T.js','imports':undefined,'hasAction':true,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/api.queue-status':{'id':'routes/api.queue-status','parentId':'root','path':'api/queue-status','index':undefined,'caseSensitive':undefined,'module':'/build/routes/api.queue-status-WHOO3S4P.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/api.settings':{'id':'routes/api.settings','parentId':'root','path':'api/settings','index':undefined,'caseSensitive':undefined,'module':'/build/routes/api.settings-UN35SBFW.js','imports':undefined,'hasAction':true,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/api.sync':{'id':'routes/api.sync','parentId':'root','path':'api/sync','index':undefined,'caseSensitive':undefined,'module':'/build/routes/api.sync-MH7TZGJZ.js','imports':undefined,'hasAction':true,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/api.test-health-check':{'id':'routes/api.test-health-check','parentId':'root','path':'api/test-health-check','index':undefined,'caseSensitive':undefined,'module':'/build/routes/api.test-health-check-MG5D5ABK.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/api.validate':{'id':'routes/api.validate','parentId':'root','path':'api/validate','index':undefined,'caseSensitive':undefined,'module':'/build/routes/api.validate-FV22CLAM.js','imports':undefined,'hasAction':true,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/auth.$':{'id':'routes/auth.$','parentId':'root','path':'auth/*','index':undefined,'caseSensitive':undefined,'module':'/build/routes/auth.$-Z6LPBAD4.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/health':{'id':'routes/health','parentId':'root','path':'health','index':undefined,'caseSensitive':undefined,'module':'/build/routes/health-WRGBPVEM.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/webhooks':{'id':'routes/webhooks','parentId':'root','path':'webhooks','index':undefined,'caseSensitive':undefined,'module':'/build/routes/webhooks-NFVTRAGX.js','imports':undefined,'hasAction':true,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false}},'version':'ac65660c','hmr':{'runtime':'/build/_shared/chunk-JWO2UMNO.js','timestamp':1760637593798},'url':'/build/manifest-AC65660C.js'};", "\nimport * as entryServer from \"/Users/mac/Catalog AI/app/entry.server.tsx\";\nimport * as route0 from \"./root.tsx\";\nimport * as route1 from \"./routes/api.test-health-check.ts\";\nimport * as route2 from \"./routes/api.health-check.ts\";\nimport * as route3 from \"./routes/api.queue-status.ts\";\nimport * as route4 from \"./routes/api.settings.ts\";\nimport * as route5 from \"./routes/api.validate.ts\";\nimport * as route6 from \"./routes/api.enrich.ts\";\nimport * as route7 from \"./routes/api.sync.ts\";\nimport * as route8 from \"./routes/webhooks.ts\";\nimport * as route9 from \"./routes/_index.tsx\";\nimport * as route10 from \"./routes/auth.$.tsx\";\nimport * as route11 from \"./routes/health.tsx\";\n  export const mode = \"development\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const assetsBuildDirectory = \"public/build\";\n  export const future = {\"v3_fetcherPersist\":false,\"v3_relativeSplatPath\":false,\"v3_throwAbortReason\":false,\"v3_routeConfig\":false,\"v3_singleFetch\":false,\"v3_lazyRouteDiscovery\":false,\"unstable_optimizeDeps\":false};\n  export const publicPath = \"/build/\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/api.test-health-check\": {\n      id: \"routes/api.test-health-check\",\n      parentId: \"root\",\n      path: \"api/test-health-check\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/api.health-check\": {\n      id: \"routes/api.health-check\",\n      parentId: \"root\",\n      path: \"api/health-check\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/api.queue-status\": {\n      id: \"routes/api.queue-status\",\n      parentId: \"root\",\n      path: \"api/queue-status\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/api.settings\": {\n      id: \"routes/api.settings\",\n      parentId: \"root\",\n      path: \"api/settings\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route4\n    },\n  \"routes/api.validate\": {\n      id: \"routes/api.validate\",\n      parentId: \"root\",\n      path: \"api/validate\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route5\n    },\n  \"routes/api.enrich\": {\n      id: \"routes/api.enrich\",\n      parentId: \"root\",\n      path: \"api/enrich\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route6\n    },\n  \"routes/api.sync\": {\n      id: \"routes/api.sync\",\n      parentId: \"root\",\n      path: \"api/sync\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route7\n    },\n  \"routes/webhooks\": {\n      id: \"routes/webhooks\",\n      parentId: \"root\",\n      path: \"webhooks\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route8\n    },\n  \"routes/_index\": {\n      id: \"routes/_index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route9\n    },\n  \"routes/auth.$\": {\n      id: \"routes/auth.$\",\n      parentId: \"root\",\n      path: \"auth/*\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route10\n    },\n  \"routes/health\": {\n      id: \"routes/health\",\n      parentId: \"root\",\n      path: \"health\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route11\n    }\n  };"],
  "mappings": "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",
  "names": ["mapShopifyToSpec", "calculateProductScore", "user", "jsxDEV", "location", "loader", "json", "loader", "json", "action", "loader", "json", "loader", "json", "action", "loader", "json", "action", "json", "Ajv", "addFormats", "axios", "ajv", "action", "json", "action", "loader", "json", "sessionStorage", "action", "loader", "json", "action", "json", "action", "loader", "json", "useState", "useEffect", "Card", "Text", "Button", "Badge", "Toast", "InlineStack", "Box", "Modal", "ProgressBar", "BlockStack", "Fragment", "jsxDEV", "jsxDEV", "loader", "sessionStorage", "ShopifySyncService", "mapShopifyToSpec", "calculateProductScore", "products", "user", "totalProducts", "json", "action", "GraphQLClient", "PRODUCTS_QUERY", "AIEnrichmentService", "useState", "useEffect", "approvalState", "Card", "BlockStack", "Text", "Button", "InlineStack", "Badge", "ProgressBar", "Toast", "Modal", "Box", "loader", "loader", "json"]
}
